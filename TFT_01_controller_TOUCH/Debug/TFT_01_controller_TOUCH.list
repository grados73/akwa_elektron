
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001670c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014140  080168b0  080168b0  000268b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a9f0  0802a9f0  00040218  2**0
                  CONTENTS
  4 .ARM          00000008  0802a9f0  0802a9f0  0003a9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a9f8  0802a9f8  00040218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802a9f8  0802a9f8  0003a9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a9fc  0802a9fc  0003a9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0802aa00  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a78  20000218  0802ac18  00040218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c90  0802ac18  00040c90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025ba2  00000000  00000000  00040248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004de9  00000000  00000000  00065dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b58  00000000  00000000  0006abd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019a8  00000000  00000000  0006c730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c717  00000000  00000000  0006e0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000275fa  00000000  00000000  0008a7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099da2  00000000  00000000  000b1de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014bb8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008654  00000000  00000000  0014bbe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08016894 	.word	0x08016894

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	08016894 	.word	0x08016894

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <UART_ESP_ParseLine>:

BlynkServerData Blynk1;


void UART_ESP_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b094      	sub	sp, #80	; 0x50
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

		if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	4619      	mov	r1, r3
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f009 fd43 	bl	800aab6 <UARTDMA_GetLineFromReceiveBuffer>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10f      	bne.n	8001056 <UART_ESP_ParseLine+0x3a>
		{
			// Header
			char* ParsePointer = strtok(BufferReceive, "=");
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	4909      	ldr	r1, [pc, #36]	; (8001060 <UART_ESP_ParseLine+0x44>)
 800103c:	4618      	mov	r0, r3
 800103e:	f012 fc6b 	bl	8013918 <strtok>
 8001042:	64f8      	str	r0, [r7, #76]	; 0x4c

			if (strcmp(ParsePointer, "CHRELAY") == 0) // Command to change state of Relays
 8001044:	4907      	ldr	r1, [pc, #28]	; (8001064 <UART_ESP_ParseLine+0x48>)
 8001046:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001048:	f7ff f8ca 	bl	80001e0 <strcmp>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <UART_ESP_ParseLine+0x3a>
			{
				ESP_ParseChangeRelayState();
 8001052:	f000 f809 	bl	8001068 <ESP_ParseChangeRelayState>
			}
		}
}
 8001056:	bf00      	nop
 8001058:	3750      	adds	r7, #80	; 0x50
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	080168b0 	.word	0x080168b0
 8001064:	080168b4 	.word	0x080168b4

08001068 <ESP_ParseChangeRelayState>:

//
// Get info from Blynk Server About change Relays state
// CHRELAY=7,1\n
void ESP_ParseChangeRelayState(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
	uint8_t RelayNr = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	73fb      	strb	r3, [r7, #15]
	uint8_t NewState = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	73bb      	strb	r3, [r7, #14]
	char* ParsePointer = strtok(NULL, ",");
 8001076:	4913      	ldr	r1, [pc, #76]	; (80010c4 <ESP_ParseChangeRelayState+0x5c>)
 8001078:	2000      	movs	r0, #0
 800107a:	f012 fc4d 	bl	8013918 <strtok>
 800107e:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d012      	beq.n	80010ae <ESP_ParseChangeRelayState+0x46>
	{
		RelayNr = atoi(ParsePointer);
 8001088:	68b8      	ldr	r0, [r7, #8]
 800108a:	f010 ff36 	bl	8011efa <atoi>
 800108e:	4603      	mov	r3, r0
 8001090:	73fb      	strb	r3, [r7, #15]
		if(strlen(ParsePointer) > 0)
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d009      	beq.n	80010ae <ESP_ParseChangeRelayState+0x46>
		{
			char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800109a:	490a      	ldr	r1, [pc, #40]	; (80010c4 <ESP_ParseChangeRelayState+0x5c>)
 800109c:	2000      	movs	r0, #0
 800109e:	f012 fc3b 	bl	8013918 <strtok>
 80010a2:	6078      	str	r0, [r7, #4]
			NewState = atoi(ParsePointer); // If there are no chars, change string to integer
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f010 ff28 	bl	8011efa <atoi>
 80010aa:	4603      	mov	r3, r0
 80010ac:	73bb      	strb	r3, [r7, #14]
		}
	}
	ESP_ChangeRelayState(RelayNr, NewState);
 80010ae:	7bba      	ldrb	r2, [r7, #14]
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 f807 	bl	80010c8 <ESP_ChangeRelayState>
}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	080168bc 	.word	0x080168bc

080010c8 <ESP_ChangeRelayState>:


void ESP_ChangeRelayState(uint8_t RelayNumber, uint8_t NewState)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	460a      	mov	r2, r1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	4613      	mov	r3, r2
 80010d6:	71bb      	strb	r3, [r7, #6]
	// First Relay (Switch)
	if(1 == RelayNumber)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d10a      	bne.n	80010f4 <ESP_ChangeRelayState+0x2c>
	{
		if(0 == NewState) firstSwitchTurn(0); //Turn OFF
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d103      	bne.n	80010ec <ESP_ChangeRelayState+0x24>
 80010e4:	2000      	movs	r0, #0
 80010e6:	f007 fc6b 	bl	80089c0 <firstSwitchTurn>
	else if(8 == RelayNumber)
	{
		if(0 == NewState) fourthLightTurn(0); //Turn OFF
		else fourthLightTurn(1); //Turn ON
	}
}
 80010ea:	e064      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else firstSwitchTurn(1); //Turn ON
 80010ec:	2001      	movs	r0, #1
 80010ee:	f007 fc67 	bl	80089c0 <firstSwitchTurn>
}
 80010f2:	e060      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(2 == RelayNumber)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d10a      	bne.n	8001110 <ESP_ChangeRelayState+0x48>
		if(0 == NewState) secondSwitchTurn(0); //Turn OFF
 80010fa:	79bb      	ldrb	r3, [r7, #6]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d103      	bne.n	8001108 <ESP_ChangeRelayState+0x40>
 8001100:	2000      	movs	r0, #0
 8001102:	f007 fcdf 	bl	8008ac4 <secondSwitchTurn>
}
 8001106:	e056      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else secondSwitchTurn(1); //Turn ON
 8001108:	2001      	movs	r0, #1
 800110a:	f007 fcdb 	bl	8008ac4 <secondSwitchTurn>
}
 800110e:	e052      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(3 == RelayNumber)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	2b03      	cmp	r3, #3
 8001114:	d10a      	bne.n	800112c <ESP_ChangeRelayState+0x64>
		if(0 == NewState) thirdSwitchTurn(0); //Turn OFF
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d103      	bne.n	8001124 <ESP_ChangeRelayState+0x5c>
 800111c:	2000      	movs	r0, #0
 800111e:	f007 fd53 	bl	8008bc8 <thirdSwitchTurn>
}
 8001122:	e048      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else thirdSwitchTurn(1); //Turn ON
 8001124:	2001      	movs	r0, #1
 8001126:	f007 fd4f 	bl	8008bc8 <thirdSwitchTurn>
}
 800112a:	e044      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(4 == RelayNumber)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2b04      	cmp	r3, #4
 8001130:	d10a      	bne.n	8001148 <ESP_ChangeRelayState+0x80>
		if(0 == NewState) fourthSwitchTurn(0); //Turn OFF
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d103      	bne.n	8001140 <ESP_ChangeRelayState+0x78>
 8001138:	2000      	movs	r0, #0
 800113a:	f007 fdc7 	bl	8008ccc <fourthSwitchTurn>
}
 800113e:	e03a      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else fourthSwitchTurn(1); //Turn ON
 8001140:	2001      	movs	r0, #1
 8001142:	f007 fdc3 	bl	8008ccc <fourthSwitchTurn>
}
 8001146:	e036      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(5 == RelayNumber)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	2b05      	cmp	r3, #5
 800114c:	d10a      	bne.n	8001164 <ESP_ChangeRelayState+0x9c>
		if(0 == NewState) firstLightTurn(0); //Turn OFF
 800114e:	79bb      	ldrb	r3, [r7, #6]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d103      	bne.n	800115c <ESP_ChangeRelayState+0x94>
 8001154:	2000      	movs	r0, #0
 8001156:	f007 fe3b 	bl	8008dd0 <firstLightTurn>
}
 800115a:	e02c      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else firstLightTurn(1); //Turn ON
 800115c:	2001      	movs	r0, #1
 800115e:	f007 fe37 	bl	8008dd0 <firstLightTurn>
}
 8001162:	e028      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(6 == RelayNumber)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2b06      	cmp	r3, #6
 8001168:	d10a      	bne.n	8001180 <ESP_ChangeRelayState+0xb8>
		if(0 == NewState) secondLightTurn(0); //Turn OFF
 800116a:	79bb      	ldrb	r3, [r7, #6]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d103      	bne.n	8001178 <ESP_ChangeRelayState+0xb0>
 8001170:	2000      	movs	r0, #0
 8001172:	f007 feab 	bl	8008ecc <secondLightTurn>
}
 8001176:	e01e      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else secondLightTurn(1); //Turn ON
 8001178:	2001      	movs	r0, #1
 800117a:	f007 fea7 	bl	8008ecc <secondLightTurn>
}
 800117e:	e01a      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(7 == RelayNumber)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b07      	cmp	r3, #7
 8001184:	d10a      	bne.n	800119c <ESP_ChangeRelayState+0xd4>
		if(0 == NewState) thirdLightTurn(0); //Turn OFF
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d103      	bne.n	8001194 <ESP_ChangeRelayState+0xcc>
 800118c:	2000      	movs	r0, #0
 800118e:	f007 ff1b 	bl	8008fc8 <thirdLightTurn>
}
 8001192:	e010      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else thirdLightTurn(1); //Turn ON
 8001194:	2001      	movs	r0, #1
 8001196:	f007 ff17 	bl	8008fc8 <thirdLightTurn>
}
 800119a:	e00c      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(8 == RelayNumber)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d109      	bne.n	80011b6 <ESP_ChangeRelayState+0xee>
		if(0 == NewState) fourthLightTurn(0); //Turn OFF
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d103      	bne.n	80011b0 <ESP_ChangeRelayState+0xe8>
 80011a8:	2000      	movs	r0, #0
 80011aa:	f007 ff8b 	bl	80090c4 <fourthLightTurn>
}
 80011ae:	e002      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else fourthLightTurn(1); //Turn ON
 80011b0:	2001      	movs	r0, #1
 80011b2:	f007 ff87 	bl	80090c4 <fourthLightTurn>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <ESP_SendCurrentTempInside>:

//
// Send info to Blynk Server
//
void ESP_SendCurrentTempInside(float CurrentTemp)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "TEMPINS=%f\n", CurrentTemp);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff f9d4 	bl	8000578 <__aeabi_f2d>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4905      	ldr	r1, [pc, #20]	; (80011ec <ESP_SendCurrentTempInside+0x2c>)
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <ESP_SendCurrentTempInside+0x30>)
 80011d8:	f011 fd46 	bl	8012c68 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 80011dc:	4904      	ldr	r1, [pc, #16]	; (80011f0 <ESP_SendCurrentTempInside+0x30>)
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <ESP_SendCurrentTempInside+0x34>)
 80011e0:	f009 fc9a 	bl	800ab18 <UARTDMA_Print>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	080168c0 	.word	0x080168c0
 80011f0:	2000030c 	.word	0x2000030c
 80011f4:	200006c8 	.word	0x200006c8

080011f8 <ESP_SendCurrentTempOutside>:

void ESP_SendCurrentTempOutside(float CurrentTemp)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "TEMPOUT=%f\n", CurrentTemp);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff f9b8 	bl	8000578 <__aeabi_f2d>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4905      	ldr	r1, [pc, #20]	; (8001224 <ESP_SendCurrentTempOutside+0x2c>)
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <ESP_SendCurrentTempOutside+0x30>)
 8001210:	f011 fd2a 	bl	8012c68 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 8001214:	4904      	ldr	r1, [pc, #16]	; (8001228 <ESP_SendCurrentTempOutside+0x30>)
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <ESP_SendCurrentTempOutside+0x34>)
 8001218:	f009 fc7e 	bl	800ab18 <UARTDMA_Print>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	080168cc 	.word	0x080168cc
 8001228:	2000030c 	.word	0x2000030c
 800122c:	200006c8 	.word	0x200006c8

08001230 <ESP_SendCurrentPressure>:

void ESP_SendCurrentPressure(float CurrentPress)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "PRES=%f\n", CurrentPress);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff f99c 	bl	8000578 <__aeabi_f2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4905      	ldr	r1, [pc, #20]	; (800125c <ESP_SendCurrentPressure+0x2c>)
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <ESP_SendCurrentPressure+0x30>)
 8001248:	f011 fd0e 	bl	8012c68 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 800124c:	4904      	ldr	r1, [pc, #16]	; (8001260 <ESP_SendCurrentPressure+0x30>)
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <ESP_SendCurrentPressure+0x34>)
 8001250:	f009 fc62 	bl	800ab18 <UARTDMA_Print>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	080168d8 	.word	0x080168d8
 8001260:	2000030c 	.word	0x2000030c
 8001264:	200006c8 	.word	0x200006c8

08001268 <ESP_SendCurrentWaterLvl>:

void ESP_SendCurrentWaterLvl(uint32_t CurrentWaterLvl)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	sprintf(Message, "WLVL=%ld\n", CurrentWaterLvl);
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	4906      	ldr	r1, [pc, #24]	; (800128c <ESP_SendCurrentWaterLvl+0x24>)
 8001274:	4806      	ldr	r0, [pc, #24]	; (8001290 <ESP_SendCurrentWaterLvl+0x28>)
 8001276:	f011 fcf7 	bl	8012c68 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 800127a:	4905      	ldr	r1, [pc, #20]	; (8001290 <ESP_SendCurrentWaterLvl+0x28>)
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <ESP_SendCurrentWaterLvl+0x2c>)
 800127e:	f009 fc4b 	bl	800ab18 <UARTDMA_Print>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	080168e4 	.word	0x080168e4
 8001290:	2000030c 	.word	0x2000030c
 8001294:	200006c8 	.word	0x200006c8

08001298 <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	; 0x30
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80012b0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1acb      	subs	r3, r1, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	bfb8      	it	lt
 80012be:	425b      	neglt	r3, r3
 80012c0:	429a      	cmp	r2, r3
 80012c2:	bfcc      	ite	gt
 80012c4:	2301      	movgt	r3, #1
 80012c6:	2300      	movle	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 80012cc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00b      	beq.n	80012ec <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	623b      	str	r3, [r7, #32]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dd0b      	ble.n	800130c <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	61bb      	str	r3, [r7, #24]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	b29a      	uxth	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	b29b      	uxth	r3, r3
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	b29b      	uxth	r3, r3
 8001318:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	bfb8      	it	lt
 8001324:	425b      	neglt	r3, r3
 8001326:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001328:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800132c:	0fda      	lsrs	r2, r3, #31
 800132e:	4413      	add	r3, r2
 8001330:	105b      	asrs	r3, r3, #1
 8001332:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	da02      	bge.n	8001342 <GFX_WriteLine+0xaa>
	        ystep = 1;
 800133c:	2301      	movs	r3, #1
 800133e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001340:	e02e      	b.n	80013a0 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 8001342:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001346:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8001348:	e02a      	b.n	80013a0 <GFX_WriteLine+0x108>
	        if (steep) {
 800134a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800134e:	2b00      	cmp	r3, #0
 8001350:	d008      	beq.n	8001364 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	b21b      	sxth	r3, r3
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	b211      	sxth	r1, r2
 800135a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800135c:	4618      	mov	r0, r3
 800135e:	f000 feab 	bl	80020b8 <ILI9341_WritePixel>
 8001362:	e007      	b.n	8001374 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	b21b      	sxth	r3, r3
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	b211      	sxth	r1, r2
 800136c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800136e:	4618      	mov	r0, r3
 8001370:	f000 fea2 	bl	80020b8 <ILI9341_WritePixel>
	        }
	        err -= dy;
 8001374:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001376:	8abb      	ldrh	r3, [r7, #20]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	b29b      	uxth	r3, r3
 800137c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 800137e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001382:	2b00      	cmp	r3, #0
 8001384:	da09      	bge.n	800139a <GFX_WriteLine+0x102>
	            y_start += ystep;
 8001386:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	4413      	add	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001390:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001392:	8afb      	ldrh	r3, [r7, #22]
 8001394:	4413      	add	r3, r2
 8001396:	b29b      	uxth	r3, r3
 8001398:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3301      	adds	r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	ddd0      	ble.n	800134a <GFX_WriteLine+0xb2>
	        }
	    }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3730      	adds	r7, #48	; 0x30
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af02      	add	r7, sp, #8
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	1e5a      	subs	r2, r3, #1
 80013c8:	887b      	ldrh	r3, [r7, #2]
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	4613      	mov	r3, r2
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f7ff ff60 	bl	8001298 <GFX_WriteLine>
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	1e5a      	subs	r2, r3, #1
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f7ff ff4a 	bl	8001298 <GFX_WriteLine>
}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af02      	add	r7, sp, #8
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	429a      	cmp	r2, r3
 8001420:	d113      	bne.n	800144a <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	dd05      	ble.n	8001436 <GFX_DrawLine+0x2a>
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	1c5a      	adds	r2, r3, #1
 800143e:	8c3b      	ldrh	r3, [r7, #32]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f7ff ffb5 	bl	80013b2 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 8001448:	e01f      	b.n	800148a <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d113      	bne.n	800147a <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	429a      	cmp	r2, r3
 8001458:	dd05      	ble.n	8001466 <GFX_DrawLine+0x5a>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	8c3b      	ldrh	r3, [r7, #32]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f7ff ffb4 	bl	80013e0 <GFX_DrawFastHLine>
}
 8001478:	e007      	b.n	800148a <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 800147a:	8c3b      	ldrh	r3, [r7, #32]
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	68b9      	ldr	r1, [r7, #8]
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f7ff ff07 	bl	8001298 <GFX_WriteLine>
}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	4611      	mov	r1, r2
 800149e:	461a      	mov	r2, r3
 80014a0:	460b      	mov	r3, r1
 80014a2:	80fb      	strh	r3, [r7, #6]
 80014a4:	4613      	mov	r3, r2
 80014a6:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e008      	b.n	80014c0 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 80014ae:	88ba      	ldrh	r2, [r7, #4]
 80014b0:	8c3b      	ldrh	r3, [r7, #32]
 80014b2:	68b9      	ldr	r1, [r7, #8]
 80014b4:	6978      	ldr	r0, [r7, #20]
 80014b6:	f7ff ff7c 	bl	80013b2 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	88fa      	ldrh	r2, [r7, #6]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4413      	add	r3, r2
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	dbf0      	blt.n	80014ae <GFX_DrawFillRectangle+0x1c>
    }

}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b088      	sub	sp, #32
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	4611      	mov	r1, r2
 80014e2:	461a      	mov	r2, r3
 80014e4:	460b      	mov	r3, r1
 80014e6:	80fb      	strh	r3, [r7, #6]
 80014e8:	4613      	mov	r3, r2
 80014ea:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	f1c3 0301 	rsb	r3, r3, #1
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 80014f6:	2301      	movs	r3, #1
 80014f8:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	461a      	mov	r2, r3
 80014fe:	03d2      	lsls	r2, r2, #15
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	b29b      	uxth	r3, r3
 8001506:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001510:	e0b5      	b.n	800167e <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 8001512:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db0e      	blt.n	8001538 <GFX_DrawCircleHelper+0x62>
            y--;
 800151a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800151e:	b29b      	uxth	r3, r3
 8001520:	3b01      	subs	r3, #1
 8001522:	b29b      	uxth	r3, r3
 8001524:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8001526:	8b7b      	ldrh	r3, [r7, #26]
 8001528:	3302      	adds	r3, #2
 800152a:	b29b      	uxth	r3, r3
 800152c:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 800152e:	8bfa      	ldrh	r2, [r7, #30]
 8001530:	8b7b      	ldrh	r3, [r7, #26]
 8001532:	4413      	add	r3, r2
 8001534:	b29b      	uxth	r3, r3
 8001536:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8001538:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800153c:	b29b      	uxth	r3, r3
 800153e:	3301      	adds	r3, #1
 8001540:	b29b      	uxth	r3, r3
 8001542:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001544:	8bbb      	ldrh	r3, [r7, #28]
 8001546:	3302      	adds	r3, #2
 8001548:	b29b      	uxth	r3, r3
 800154a:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 800154c:	8bfa      	ldrh	r2, [r7, #30]
 800154e:	8bbb      	ldrh	r3, [r7, #28]
 8001550:	4413      	add	r3, r2
 8001552:	b29b      	uxth	r3, r3
 8001554:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 8001556:	797b      	ldrb	r3, [r7, #5]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	d01f      	beq.n	80015a0 <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	b29a      	uxth	r2, r3
 8001564:	8b3b      	ldrh	r3, [r7, #24]
 8001566:	4413      	add	r3, r2
 8001568:	b29b      	uxth	r3, r3
 800156a:	b218      	sxth	r0, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	b29a      	uxth	r2, r3
 8001570:	8afb      	ldrh	r3, [r7, #22]
 8001572:	4413      	add	r3, r2
 8001574:	b29b      	uxth	r3, r3
 8001576:	b21b      	sxth	r3, r3
 8001578:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800157a:	4619      	mov	r1, r3
 800157c:	f000 fd9c 	bl	80020b8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	b29a      	uxth	r2, r3
 8001584:	8afb      	ldrh	r3, [r7, #22]
 8001586:	4413      	add	r3, r2
 8001588:	b29b      	uxth	r3, r3
 800158a:	b218      	sxth	r0, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	b29a      	uxth	r2, r3
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	4413      	add	r3, r2
 8001594:	b29b      	uxth	r3, r3
 8001596:	b21b      	sxth	r3, r3
 8001598:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800159a:	4619      	mov	r1, r3
 800159c:	f000 fd8c 	bl	80020b8 <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 80015a0:	797b      	ldrb	r3, [r7, #5]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d01f      	beq.n	80015ea <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	8b3b      	ldrh	r3, [r7, #24]
 80015b0:	4413      	add	r3, r2
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	b218      	sxth	r0, r3
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	8afb      	ldrh	r3, [r7, #22]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	b29b      	uxth	r3, r3
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015c4:	4619      	mov	r1, r3
 80015c6:	f000 fd77 	bl	80020b8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	8afb      	ldrh	r3, [r7, #22]
 80015d0:	4413      	add	r3, r2
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	b218      	sxth	r0, r3
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	8b3b      	ldrh	r3, [r7, #24]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	b29b      	uxth	r3, r3
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015e4:	4619      	mov	r1, r3
 80015e6:	f000 fd67 	bl	80020b8 <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 80015ea:	797b      	ldrb	r3, [r7, #5]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d01f      	beq.n	8001634 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	8afb      	ldrh	r3, [r7, #22]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	b218      	sxth	r0, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	b29a      	uxth	r2, r3
 8001604:	8b3b      	ldrh	r3, [r7, #24]
 8001606:	4413      	add	r3, r2
 8001608:	b29b      	uxth	r3, r3
 800160a:	b21b      	sxth	r3, r3
 800160c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800160e:	4619      	mov	r1, r3
 8001610:	f000 fd52 	bl	80020b8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	b29a      	uxth	r2, r3
 8001618:	8b3b      	ldrh	r3, [r7, #24]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	b29b      	uxth	r3, r3
 800161e:	b218      	sxth	r0, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	b29a      	uxth	r2, r3
 8001624:	8afb      	ldrh	r3, [r7, #22]
 8001626:	4413      	add	r3, r2
 8001628:	b29b      	uxth	r3, r3
 800162a:	b21b      	sxth	r3, r3
 800162c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800162e:	4619      	mov	r1, r3
 8001630:	f000 fd42 	bl	80020b8 <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 8001634:	797b      	ldrb	r3, [r7, #5]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d01f      	beq.n	800167e <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	b29a      	uxth	r2, r3
 8001642:	8afb      	ldrh	r3, [r7, #22]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	b29b      	uxth	r3, r3
 8001648:	b218      	sxth	r0, r3
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	b29a      	uxth	r2, r3
 800164e:	8b3b      	ldrh	r3, [r7, #24]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	b29b      	uxth	r3, r3
 8001654:	b21b      	sxth	r3, r3
 8001656:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001658:	4619      	mov	r1, r3
 800165a:	f000 fd2d 	bl	80020b8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	b29a      	uxth	r2, r3
 8001662:	8b3b      	ldrh	r3, [r7, #24]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	b29b      	uxth	r3, r3
 8001668:	b218      	sxth	r0, r3
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	b29a      	uxth	r2, r3
 800166e:	8afb      	ldrh	r3, [r7, #22]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	b29b      	uxth	r3, r3
 8001674:	b21b      	sxth	r3, r3
 8001676:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001678:	4619      	mov	r1, r3
 800167a:	f000 fd1d 	bl	80020b8 <ILI9341_WritePixel>
    while (x<y) {
 800167e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001682:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001686:	429a      	cmp	r2, r3
 8001688:	f6ff af43 	blt.w	8001512 <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3720      	adds	r7, #32
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b088      	sub	sp, #32
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	4611      	mov	r1, r2
 80016a2:	461a      	mov	r2, r3
 80016a4:	460b      	mov	r3, r1
 80016a6:	80fb      	strh	r3, [r7, #6]
 80016a8:	4613      	mov	r3, r2
 80016aa:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	f1c3 0301 	rsb	r3, r3, #1
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 80016b6:	2301      	movs	r3, #1
 80016b8:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	461a      	mov	r2, r3
 80016be:	03d2      	lsls	r2, r2, #15
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 80016d0:	e073      	b.n	80017ba <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 80016d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	db0e      	blt.n	80016f8 <GFX_DrawFillCircleHelper+0x62>
            y--;
 80016da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	3b01      	subs	r3, #1
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80016e6:	8b7b      	ldrh	r3, [r7, #26]
 80016e8:	3302      	adds	r3, #2
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80016ee:	8bfa      	ldrh	r2, [r7, #30]
 80016f0:	8b7b      	ldrh	r3, [r7, #26]
 80016f2:	4413      	add	r3, r2
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80016f8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	3301      	adds	r3, #1
 8001700:	b29b      	uxth	r3, r3
 8001702:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001704:	8bbb      	ldrh	r3, [r7, #28]
 8001706:	3302      	adds	r3, #2
 8001708:	b29b      	uxth	r3, r3
 800170a:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 800170c:	8bfa      	ldrh	r2, [r7, #30]
 800170e:	8bbb      	ldrh	r3, [r7, #28]
 8001710:	4413      	add	r3, r2
 8001712:	b29b      	uxth	r3, r3
 8001714:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8001716:	797b      	ldrb	r3, [r7, #5]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d023      	beq.n	8001768 <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 8001720:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	18d0      	adds	r0, r2, r3
 8001728:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	1ad1      	subs	r1, r2, r3
 8001730:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800173c:	441a      	add	r2, r3
 800173e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001740:	f7ff fe37 	bl	80013b2 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8001744:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	18d0      	adds	r0, r2, r3
 800174c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	1ad1      	subs	r1, r2, r3
 8001754:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001760:	441a      	add	r2, r3
 8001762:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001764:	f7ff fe25 	bl	80013b2 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 8001768:	797b      	ldrb	r3, [r7, #5]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d023      	beq.n	80017ba <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 8001772:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	1ad0      	subs	r0, r2, r3
 800177a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	1ad1      	subs	r1, r2, r3
 8001782:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800178e:	441a      	add	r2, r3
 8001790:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001792:	f7ff fe0e 	bl	80013b2 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8001796:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	1ad0      	subs	r0, r2, r3
 800179e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	1ad1      	subs	r1, r2, r3
 80017a6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80017b2:	441a      	add	r2, r3
 80017b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80017b6:	f7ff fdfc 	bl	80013b2 <GFX_DrawFastVLine>
    while (x<y) {
 80017ba:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80017be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	db85      	blt.n	80016d2 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 80017c6:	bf00      	nop
 80017c8:	bf00      	nop
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af02      	add	r7, sp, #8
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	4611      	mov	r1, r2
 80017dc:	461a      	mov	r2, r3
 80017de:	460b      	mov	r3, r1
 80017e0:	80fb      	strh	r3, [r7, #6]
 80017e2:	4613      	mov	r3, r2
 80017e4:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 80017e6:	8b3a      	ldrh	r2, [r7, #24]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	18d0      	adds	r0, r2, r3
 80017ec:	88fa      	ldrh	r2, [r7, #6]
 80017ee:	8b3b      	ldrh	r3, [r7, #24]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	1ad2      	subs	r2, r2, r3
 80017f4:	8bbb      	ldrh	r3, [r7, #28]
 80017f6:	68b9      	ldr	r1, [r7, #8]
 80017f8:	f7ff fdf2 	bl	80013e0 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 80017fc:	8b3a      	ldrh	r2, [r7, #24]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	18d0      	adds	r0, r2, r3
 8001802:	88ba      	ldrh	r2, [r7, #4]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4413      	add	r3, r2
 8001808:	1e59      	subs	r1, r3, #1
 800180a:	88fa      	ldrh	r2, [r7, #6]
 800180c:	8b3b      	ldrh	r3, [r7, #24]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	1ad2      	subs	r2, r2, r3
 8001812:	8bbb      	ldrh	r3, [r7, #28]
 8001814:	f7ff fde4 	bl	80013e0 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 8001818:	8b3a      	ldrh	r2, [r7, #24]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	18d1      	adds	r1, r2, r3
 800181e:	88ba      	ldrh	r2, [r7, #4]
 8001820:	8b3b      	ldrh	r3, [r7, #24]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	1ad2      	subs	r2, r2, r3
 8001826:	8bbb      	ldrh	r3, [r7, #28]
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f7ff fdc2 	bl	80013b2 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 800182e:	88fa      	ldrh	r2, [r7, #6]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	1e58      	subs	r0, r3, #1
 8001836:	8b3a      	ldrh	r2, [r7, #24]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	18d1      	adds	r1, r2, r3
 800183c:	88ba      	ldrh	r2, [r7, #4]
 800183e:	8b3b      	ldrh	r3, [r7, #24]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	1ad2      	subs	r2, r2, r3
 8001844:	8bbb      	ldrh	r3, [r7, #28]
 8001846:	f7ff fdb4 	bl	80013b2 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 800184a:	8b3a      	ldrh	r2, [r7, #24]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	18d0      	adds	r0, r2, r3
 8001850:	8b3a      	ldrh	r2, [r7, #24]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	18d1      	adds	r1, r2, r3
 8001856:	8b3a      	ldrh	r2, [r7, #24]
 8001858:	8bbb      	ldrh	r3, [r7, #28]
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	2301      	movs	r3, #1
 800185e:	f7ff fe3a 	bl	80014d6 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8001862:	88fa      	ldrh	r2, [r7, #6]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	441a      	add	r2, r3
 8001868:	8b3b      	ldrh	r3, [r7, #24]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	1e58      	subs	r0, r3, #1
 800186e:	8b3a      	ldrh	r2, [r7, #24]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	18d1      	adds	r1, r2, r3
 8001874:	8b3a      	ldrh	r2, [r7, #24]
 8001876:	8bbb      	ldrh	r3, [r7, #28]
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2302      	movs	r3, #2
 800187c:	f7ff fe2b 	bl	80014d6 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8001880:	88fa      	ldrh	r2, [r7, #6]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	441a      	add	r2, r3
 8001886:	8b3b      	ldrh	r3, [r7, #24]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	1e58      	subs	r0, r3, #1
 800188c:	88ba      	ldrh	r2, [r7, #4]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	441a      	add	r2, r3
 8001892:	8b3b      	ldrh	r3, [r7, #24]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	1e59      	subs	r1, r3, #1
 8001898:	8b3a      	ldrh	r2, [r7, #24]
 800189a:	8bbb      	ldrh	r3, [r7, #28]
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	2304      	movs	r3, #4
 80018a0:	f7ff fe19 	bl	80014d6 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 80018a4:	8b3a      	ldrh	r2, [r7, #24]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	18d0      	adds	r0, r2, r3
 80018aa:	88ba      	ldrh	r2, [r7, #4]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	441a      	add	r2, r3
 80018b0:	8b3b      	ldrh	r3, [r7, #24]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	1e59      	subs	r1, r3, #1
 80018b6:	8b3a      	ldrh	r2, [r7, #24]
 80018b8:	8bbb      	ldrh	r3, [r7, #28]
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	2308      	movs	r3, #8
 80018be:	f7ff fe0a 	bl	80014d6 <GFX_DrawCircleHelper>
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 80018ca:	b590      	push	{r4, r7, lr}
 80018cc:	b087      	sub	sp, #28
 80018ce:	af02      	add	r7, sp, #8
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	4611      	mov	r1, r2
 80018d6:	461a      	mov	r2, r3
 80018d8:	460b      	mov	r3, r1
 80018da:	80fb      	strh	r3, [r7, #6]
 80018dc:	4613      	mov	r3, r2
 80018de:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 80018e0:	8c3a      	ldrh	r2, [r7, #32]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	18d0      	adds	r0, r2, r3
 80018e6:	8c3b      	ldrh	r3, [r7, #32]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	88fa      	ldrh	r2, [r7, #6]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	88b9      	ldrh	r1, [r7, #4]
 80018f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	460b      	mov	r3, r1
 80018fa:	68b9      	ldr	r1, [r7, #8]
 80018fc:	f7ff fdc9 	bl	8001492 <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001900:	88fa      	ldrh	r2, [r7, #6]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	441a      	add	r2, r3
 8001906:	8c3b      	ldrh	r3, [r7, #32]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	1e58      	subs	r0, r3, #1
 800190c:	8c3a      	ldrh	r2, [r7, #32]
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	18d1      	adds	r1, r2, r3
 8001912:	8c3b      	ldrh	r3, [r7, #32]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	88ba      	ldrh	r2, [r7, #4]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	b29b      	uxth	r3, r3
 800191e:	3b01      	subs	r3, #1
 8001920:	b29b      	uxth	r3, r3
 8001922:	b21b      	sxth	r3, r3
 8001924:	8c3c      	ldrh	r4, [r7, #32]
 8001926:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001928:	9201      	str	r2, [sp, #4]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2301      	movs	r3, #1
 800192e:	4622      	mov	r2, r4
 8001930:	f7ff feb1 	bl	8001696 <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8001934:	8c3a      	ldrh	r2, [r7, #32]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	18d0      	adds	r0, r2, r3
 800193a:	8c3a      	ldrh	r2, [r7, #32]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	18d1      	adds	r1, r2, r3
 8001940:	8c3b      	ldrh	r3, [r7, #32]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	b29b      	uxth	r3, r3
 8001946:	88ba      	ldrh	r2, [r7, #4]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	b29b      	uxth	r3, r3
 800194c:	3b01      	subs	r3, #1
 800194e:	b29b      	uxth	r3, r3
 8001950:	b21b      	sxth	r3, r3
 8001952:	8c3c      	ldrh	r4, [r7, #32]
 8001954:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001956:	9201      	str	r2, [sp, #4]
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2302      	movs	r3, #2
 800195c:	4622      	mov	r2, r4
 800195e:	f7ff fe9a 	bl	8001696 <GFX_DrawFillCircleHelper>
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
	...

0800196c <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <EF_SetFont+0x1c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000358 	.word	0x20000358

0800198c <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <EF_GetFontHeight+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	781b      	ldrb	r3, [r3, #0]
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	20000358 	.word	0x20000358

080019a4 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <EF_GetFontStartChar+0x14>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	785b      	ldrb	r3, [r3, #1]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	20000358 	.word	0x20000358

080019bc <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <EF_GetFontEndChar+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	789b      	ldrb	r3, [r3, #2]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	20000358 	.word	0x20000358

080019d4 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <EF_GetFontSpaceWidth+0x14>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	78db      	ldrb	r3, [r3, #3]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	20000358 	.word	0x20000358

080019ec <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	460a      	mov	r2, r1
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	4613      	mov	r3, r2
 80019fa:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	2bc5      	cmp	r3, #197	; 0xc5
 8001a00:	d052      	beq.n	8001aa8 <EF_DecodePolish+0xbc>
 8001a02:	2bc5      	cmp	r3, #197	; 0xc5
 8001a04:	f300 80e7 	bgt.w	8001bd6 <EF_DecodePolish+0x1ea>
 8001a08:	2bc3      	cmp	r3, #195	; 0xc3
 8001a0a:	d002      	beq.n	8001a12 <EF_DecodePolish+0x26>
 8001a0c:	2bc4      	cmp	r3, #196	; 0xc4
 8001a0e:	d00a      	beq.n	8001a26 <EF_DecodePolish+0x3a>
 8001a10:	e0e1      	b.n	8001bd6 <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001a12:	79bb      	ldrb	r3, [r7, #6]
 8001a14:	2b93      	cmp	r3, #147	; 0x93
 8001a16:	d002      	beq.n	8001a1e <EF_DecodePolish+0x32>
 8001a18:	2bb3      	cmp	r3, #179	; 0xb3
 8001a1a:	d002      	beq.n	8001a22 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 8001a1c:	e0db      	b.n	8001bd6 <EF_DecodePolish+0x1ea>
			return 0x84;
 8001a1e:	2384      	movs	r3, #132	; 0x84
 8001a20:	e0da      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			return 0x8D;
 8001a22:	238d      	movs	r3, #141	; 0x8d
 8001a24:	e0d8      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 8001a26:	79bb      	ldrb	r3, [r7, #6]
 8001a28:	3b84      	subs	r3, #132	; 0x84
 8001a2a:	2b15      	cmp	r3, #21
 8001a2c:	f200 80d0 	bhi.w	8001bd0 <EF_DecodePolish+0x1e4>
 8001a30:	a201      	add	r2, pc, #4	; (adr r2, 8001a38 <EF_DecodePolish+0x4c>)
 8001a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a36:	bf00      	nop
 8001a38:	08001a91 	.word	0x08001a91
 8001a3c:	08001a9d 	.word	0x08001a9d
 8001a40:	08001a99 	.word	0x08001a99
 8001a44:	08001aa5 	.word	0x08001aa5
 8001a48:	08001bd1 	.word	0x08001bd1
 8001a4c:	08001bd1 	.word	0x08001bd1
 8001a50:	08001bd1 	.word	0x08001bd1
 8001a54:	08001bd1 	.word	0x08001bd1
 8001a58:	08001bd1 	.word	0x08001bd1
 8001a5c:	08001bd1 	.word	0x08001bd1
 8001a60:	08001bd1 	.word	0x08001bd1
 8001a64:	08001bd1 	.word	0x08001bd1
 8001a68:	08001bd1 	.word	0x08001bd1
 8001a6c:	08001bd1 	.word	0x08001bd1
 8001a70:	08001bd1 	.word	0x08001bd1
 8001a74:	08001bd1 	.word	0x08001bd1
 8001a78:	08001bd1 	.word	0x08001bd1
 8001a7c:	08001bd1 	.word	0x08001bd1
 8001a80:	08001bd1 	.word	0x08001bd1
 8001a84:	08001bd1 	.word	0x08001bd1
 8001a88:	08001a95 	.word	0x08001a95
 8001a8c:	08001aa1 	.word	0x08001aa1
		{
		case 0x84: // Ą
			return 0x7F;
 8001a90:	237f      	movs	r3, #127	; 0x7f
 8001a92:	e0a1      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001a94:	2381      	movs	r3, #129	; 0x81
 8001a96:	e09f      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	e09d      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001a9c:	2388      	movs	r3, #136	; 0x88
 8001a9e:	e09b      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001aa0:	238a      	movs	r3, #138	; 0x8a
 8001aa2:	e099      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001aa4:	2389      	movs	r3, #137	; 0x89
 8001aa6:	e097      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 8001aa8:	79bb      	ldrb	r3, [r7, #6]
 8001aaa:	3b81      	subs	r3, #129	; 0x81
 8001aac:	2b3b      	cmp	r3, #59	; 0x3b
 8001aae:	f200 8091 	bhi.w	8001bd4 <EF_DecodePolish+0x1e8>
 8001ab2:	a201      	add	r2, pc, #4	; (adr r2, 8001ab8 <EF_DecodePolish+0xcc>)
 8001ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab8:	08001ba9 	.word	0x08001ba9
 8001abc:	08001bbd 	.word	0x08001bbd
 8001ac0:	08001bad 	.word	0x08001bad
 8001ac4:	08001bc1 	.word	0x08001bc1
 8001ac8:	08001bd5 	.word	0x08001bd5
 8001acc:	08001bd5 	.word	0x08001bd5
 8001ad0:	08001bd5 	.word	0x08001bd5
 8001ad4:	08001bd5 	.word	0x08001bd5
 8001ad8:	08001bd5 	.word	0x08001bd5
 8001adc:	08001bd5 	.word	0x08001bd5
 8001ae0:	08001bd5 	.word	0x08001bd5
 8001ae4:	08001bd5 	.word	0x08001bd5
 8001ae8:	08001bd5 	.word	0x08001bd5
 8001aec:	08001bd5 	.word	0x08001bd5
 8001af0:	08001bd5 	.word	0x08001bd5
 8001af4:	08001bd5 	.word	0x08001bd5
 8001af8:	08001bd5 	.word	0x08001bd5
 8001afc:	08001bd5 	.word	0x08001bd5
 8001b00:	08001bd5 	.word	0x08001bd5
 8001b04:	08001bd5 	.word	0x08001bd5
 8001b08:	08001bd5 	.word	0x08001bd5
 8001b0c:	08001bd5 	.word	0x08001bd5
 8001b10:	08001bd5 	.word	0x08001bd5
 8001b14:	08001bd5 	.word	0x08001bd5
 8001b18:	08001bd5 	.word	0x08001bd5
 8001b1c:	08001bb1 	.word	0x08001bb1
 8001b20:	08001bc5 	.word	0x08001bc5
 8001b24:	08001bd5 	.word	0x08001bd5
 8001b28:	08001bd5 	.word	0x08001bd5
 8001b2c:	08001bd5 	.word	0x08001bd5
 8001b30:	08001bd5 	.word	0x08001bd5
 8001b34:	08001bd5 	.word	0x08001bd5
 8001b38:	08001bd5 	.word	0x08001bd5
 8001b3c:	08001bd5 	.word	0x08001bd5
 8001b40:	08001bd5 	.word	0x08001bd5
 8001b44:	08001bd5 	.word	0x08001bd5
 8001b48:	08001bd5 	.word	0x08001bd5
 8001b4c:	08001bd5 	.word	0x08001bd5
 8001b50:	08001bd5 	.word	0x08001bd5
 8001b54:	08001bd5 	.word	0x08001bd5
 8001b58:	08001bd5 	.word	0x08001bd5
 8001b5c:	08001bd5 	.word	0x08001bd5
 8001b60:	08001bd5 	.word	0x08001bd5
 8001b64:	08001bd5 	.word	0x08001bd5
 8001b68:	08001bd5 	.word	0x08001bd5
 8001b6c:	08001bd5 	.word	0x08001bd5
 8001b70:	08001bd5 	.word	0x08001bd5
 8001b74:	08001bd5 	.word	0x08001bd5
 8001b78:	08001bd5 	.word	0x08001bd5
 8001b7c:	08001bd5 	.word	0x08001bd5
 8001b80:	08001bd5 	.word	0x08001bd5
 8001b84:	08001bd5 	.word	0x08001bd5
 8001b88:	08001bd5 	.word	0x08001bd5
 8001b8c:	08001bd5 	.word	0x08001bd5
 8001b90:	08001bd5 	.word	0x08001bd5
 8001b94:	08001bd5 	.word	0x08001bd5
 8001b98:	08001bb5 	.word	0x08001bb5
 8001b9c:	08001bc9 	.word	0x08001bc9
 8001ba0:	08001bb9 	.word	0x08001bb9
 8001ba4:	08001bcd 	.word	0x08001bcd
		{
		case 0x81: // Ł
			return 0x82;
 8001ba8:	2382      	movs	r3, #130	; 0x82
 8001baa:	e015      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001bac:	2383      	movs	r3, #131	; 0x83
 8001bae:	e013      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001bb0:	2385      	movs	r3, #133	; 0x85
 8001bb2:	e011      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001bb4:	2386      	movs	r3, #134	; 0x86
 8001bb6:	e00f      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 8001bb8:	2387      	movs	r3, #135	; 0x87
 8001bba:	e00d      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001bbc:	238b      	movs	r3, #139	; 0x8b
 8001bbe:	e00b      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001bc0:	238c      	movs	r3, #140	; 0x8c
 8001bc2:	e009      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001bc4:	238e      	movs	r3, #142	; 0x8e
 8001bc6:	e007      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 8001bc8:	238f      	movs	r3, #143	; 0x8f
 8001bca:	e005      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001bcc:	2390      	movs	r3, #144	; 0x90
 8001bce:	e003      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
		break;
 8001bd0:	bf00      	nop
 8001bd2:	e000      	b.n	8001bd6 <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001bd4:	bf00      	nop
	}

	return 0;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001be4:	b5b0      	push	{r4, r5, r7, lr}
 8001be6:	b08a      	sub	sp, #40	; 0x28
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	4604      	mov	r4, r0
 8001bec:	4608      	mov	r0, r1
 8001bee:	4611      	mov	r1, r2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4623      	mov	r3, r4
 8001bf4:	71fb      	strb	r3, [r7, #7]
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	80bb      	strh	r3, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	807b      	strh	r3, [r7, #2]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001c02:	f7ff fecf 	bl	80019a4 <EF_GetFontStartChar>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	2b20      	cmp	r3, #32
 8001c14:	d120      	bne.n	8001c58 <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 8001c16:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d114      	bne.n	8001c48 <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 8001c1e:	88bc      	ldrh	r4, [r7, #4]
 8001c20:	887d      	ldrh	r5, [r7, #2]
 8001c22:	f7ff fed7 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001c26:	4603      	mov	r3, r0
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	0052      	lsls	r2, r2, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	4b5a      	ldr	r3, [pc, #360]	; (8001d9c <EF_PutChar+0x1b8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b299      	uxth	r1, r3
 8001c3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4629      	mov	r1, r5
 8001c42:	4620      	mov	r0, r4
 8001c44:	f7ff fc25 	bl	8001492 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 8001c48:	f7ff fec4 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	0052      	lsls	r2, r2, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	e09c      	b.n	8001d92 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 8001c58:	f7ff fea4 	bl	80019a4 <EF_GetFontStartChar>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d201      	bcs.n	8001c6a <EF_PutChar+0x86>
	{
		return 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e093      	b.n	8001d92 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 8001c6a:	f7ff fea7 	bl	80019bc <EF_GetFontEndChar>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	7c7b      	ldrb	r3, [r7, #17]
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d901      	bls.n	8001c7c <EF_PutChar+0x98>
	{
		return 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	e08a      	b.n	8001d92 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001c7c:	4b47      	ldr	r3, [pc, #284]	; (8001d9c <EF_PutChar+0x1b8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	7c7b      	ldrb	r3, [r7, #17]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001c8a:	4b44      	ldr	r3, [pc, #272]	; (8001d9c <EF_PutChar+0x1b8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	4a42      	ldr	r2, [pc, #264]	; (8001d9c <EF_PutChar+0x1b8>)
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	6851      	ldr	r1, [r2, #4]
 8001c96:	7c7a      	ldrb	r2, [r7, #17]
 8001c98:	0092      	lsls	r2, r2, #2
 8001c9a:	440a      	add	r2, r1
 8001c9c:	8852      	ldrh	r2, [r2, #2]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	83fb      	strh	r3, [r7, #30]
 8001ca6:	e066      	b.n	8001d76 <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	777b      	strb	r3, [r7, #29]
 8001cb2:	e053      	b.n	8001d5c <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001cba:	7efb      	ldrb	r3, [r7, #27]
 8001cbc:	2b07      	cmp	r3, #7
 8001cbe:	d905      	bls.n	8001ccc <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001cc0:	2308      	movs	r3, #8
 8001cc2:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001cc4:	7efb      	ldrb	r3, [r7, #27]
 8001cc6:	3b08      	subs	r3, #8
 8001cc8:	76fb      	strb	r3, [r7, #27]
 8001cca:	e001      	b.n	8001cd0 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001ccc:	7efb      	ldrb	r3, [r7, #27]
 8001cce:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	74bb      	strb	r3, [r7, #18]
 8001cd4:	e038      	b.n	8001d48 <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001cd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	da15      	bge.n	8001d0a <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001cde:	7f7b      	ldrb	r3, [r7, #29]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	88bb      	ldrh	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	7cbb      	ldrb	r3, [r7, #18]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b218      	sxth	r0, r3
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	8bfb      	ldrh	r3, [r7, #30]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	883a      	ldrh	r2, [r7, #0]
 8001d02:	4619      	mov	r1, r3
 8001d04:	f000 f9d8 	bl	80020b8 <ILI9341_WritePixel>
 8001d08:	e018      	b.n	8001d3c <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001d0a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d114      	bne.n	8001d3c <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001d12:	7f7b      	ldrb	r3, [r7, #29]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	88bb      	ldrh	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	7cbb      	ldrb	r3, [r7, #18]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	b218      	sxth	r0, r3
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	8bfb      	ldrh	r3, [r7, #30]
 8001d2e:	4413      	add	r3, r2
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d36:	4619      	mov	r1, r3
 8001d38:	f000 f9be 	bl	80020b8 <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001d3c:	7cbb      	ldrb	r3, [r7, #18]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	74bb      	strb	r3, [r7, #18]
 8001d42:	7cfb      	ldrb	r3, [r7, #19]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	74fb      	strb	r3, [r7, #19]
 8001d48:	7cba      	ldrb	r2, [r7, #18]
 8001d4a:	7f3b      	ldrb	r3, [r7, #28]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d3c2      	bcc.n	8001cd6 <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	3301      	adds	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001d56:	7f7b      	ldrb	r3, [r7, #29]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	777b      	strb	r3, [r7, #29]
 8001d5c:	7f7a      	ldrb	r2, [r7, #29]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	da00      	bge.n	8001d6a <EF_PutChar+0x186>
 8001d68:	3307      	adds	r3, #7
 8001d6a:	10db      	asrs	r3, r3, #3
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	dda1      	ble.n	8001cb4 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001d70:	8bfb      	ldrh	r3, [r7, #30]
 8001d72:	3301      	adds	r3, #1
 8001d74:	83fb      	strh	r3, [r7, #30]
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <EF_PutChar+0x1b8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	8bfa      	ldrh	r2, [r7, #30]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d391      	bcc.n	8001ca8 <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <EF_PutChar+0x1b8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	7c7b      	ldrb	r3, [r7, #17]
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	781b      	ldrb	r3, [r3, #0]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3720      	adds	r7, #32
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bdb0      	pop	{r4, r5, r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000358 	.word	0x20000358

08001da0 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	4608      	mov	r0, r1
 8001daa:	4611      	mov	r1, r2
 8001dac:	461a      	mov	r2, r3
 8001dae:	4603      	mov	r3, r0
 8001db0:	817b      	strh	r3, [r7, #10]
 8001db2:	460b      	mov	r3, r1
 8001db4:	813b      	strh	r3, [r7, #8]
 8001db6:	4613      	mov	r3, r2
 8001db8:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f7fe fa1a 	bl	80001f4 <strlen>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001dc8:	2300      	movs	r3, #0
 8001dca:	75fb      	strb	r3, [r7, #23]
 8001dcc:	e05a      	b.n	8001e84 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2bc5      	cmp	r3, #197	; 0xc5
 8001dd8:	d817      	bhi.n	8001e0a <EF_PutString+0x6a>
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2bc2      	cmp	r3, #194	; 0xc2
 8001de4:	d911      	bls.n	8001e0a <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	7818      	ldrb	r0, [r3, #0]
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
 8001df0:	3301      	adds	r3, #1
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	4413      	add	r3, r2
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7ff fdf7 	bl	80019ec <EF_DecodePolish>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
 8001e04:	3301      	adds	r3, #1
 8001e06:	75fb      	strb	r3, [r7, #23]
 8001e08:	e004      	b.n	8001e14 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001e14:	897a      	ldrh	r2, [r7, #10]
 8001e16:	8abb      	ldrh	r3, [r7, #20]
 8001e18:	4413      	add	r3, r2
 8001e1a:	b299      	uxth	r1, r3
 8001e1c:	88fc      	ldrh	r4, [r7, #6]
 8001e1e:	893a      	ldrh	r2, [r7, #8]
 8001e20:	7cf8      	ldrb	r0, [r7, #19]
 8001e22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	4623      	mov	r3, r4
 8001e2e:	f7ff fed9 	bl	8001be4 <EF_PutChar>
 8001e32:	4603      	mov	r3, r0
 8001e34:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001e36:	7c7b      	ldrb	r3, [r7, #17]
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	8abb      	ldrh	r3, [r7, #20]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001e40:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d113      	bne.n	8001e70 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001e48:	897a      	ldrh	r2, [r7, #10]
 8001e4a:	8abb      	ldrh	r3, [r7, #20]
 8001e4c:	18d4      	adds	r4, r2, r3
 8001e4e:	893d      	ldrh	r5, [r7, #8]
 8001e50:	f7ff fdc0 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001e54:	4603      	mov	r3, r0
 8001e56:	b29e      	uxth	r6, r3
 8001e58:	f7ff fd98 	bl	800198c <EF_GetFontHeight>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	4613      	mov	r3, r2
 8001e66:	4632      	mov	r2, r6
 8001e68:	4629      	mov	r1, r5
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f7ff fb11 	bl	8001492 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001e70:	f7ff fdb0 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001e74:	4603      	mov	r3, r0
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	8abb      	ldrh	r3, [r7, #20]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001e7e:	7dfb      	ldrb	r3, [r7, #23]
 8001e80:	3301      	adds	r3, #1
 8001e82:	75fb      	strb	r3, [r7, #23]
 8001e84:	7dfa      	ldrb	r2, [r7, #23]
 8001e86:	7cbb      	ldrb	r3, [r7, #18]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d3a0      	bcc.n	8001dce <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001e8c:	8abb      	ldrh	r3, [r7, #20]
 8001e8e:	b2dc      	uxtb	r4, r3
 8001e90:	f7ff fda0 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001e94:	4603      	mov	r3, r0
 8001e96:	1ae3      	subs	r3, r4, r3
 8001e98:	b2db      	uxtb	r3, r3
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	371c      	adds	r7, #28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ea2 <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f009 f958 	bl	800b160 <HAL_Delay>
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001ec2:	e014      	b.n	8001eee <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <ILI9341_SendToTFT+0x5c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d10c      	bne.n	8001eee <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <ILI9341_SendToTFT+0x5c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	330c      	adds	r3, #12
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	7812      	ldrb	r2, [r2, #0]
 8001ee0:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1e7      	bne.n	8001ec4 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001ef4:	bf00      	nop
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <ILI9341_SendToTFT+0x5c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f02:	2b80      	cmp	r3, #128	; 0x80
 8001f04:	d0f7      	beq.n	8001ef6 <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001f06:	bf00      	nop
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	2000035c 	.word	0x2000035c

08001f18 <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f22:	2200      	movs	r2, #0
 8001f24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f28:	480b      	ldr	r0, [pc, #44]	; (8001f58 <ILI9341_SendComand+0x40>)
 8001f2a:	f00a f889 	bl	800c040 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f34:	4808      	ldr	r0, [pc, #32]	; (8001f58 <ILI9341_SendComand+0x40>)
 8001f36:	f00a f883 	bl	800c040 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001f3a:	1dfb      	adds	r3, r7, #7
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ffba 	bl	8001eb8 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f44:	2201      	movs	r2, #1
 8001f46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f4a:	4803      	ldr	r0, [pc, #12]	; (8001f58 <ILI9341_SendComand+0x40>)
 8001f4c:	f00a f878 	bl	800c040 <HAL_GPIO_WritePin>
#endif
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40020400 	.word	0x40020400

08001f5c <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f70:	4811      	ldr	r0, [pc, #68]	; (8001fb8 <ILI9341_SendCommandAndData+0x5c>)
 8001f72:	f00a f865 	bl	800c040 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f7c:	480e      	ldr	r0, [pc, #56]	; (8001fb8 <ILI9341_SendCommandAndData+0x5c>)
 8001f7e:	f00a f85f 	bl	800c040 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001f82:	f107 030f 	add.w	r3, r7, #15
 8001f86:	2101      	movs	r1, #1
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff95 	bl	8001eb8 <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f94:	4808      	ldr	r0, [pc, #32]	; (8001fb8 <ILI9341_SendCommandAndData+0x5c>)
 8001f96:	f00a f853 	bl	800c040 <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	68b8      	ldr	r0, [r7, #8]
 8001f9e:	f7ff ff8b 	bl	8001eb8 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa8:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <ILI9341_SendCommandAndData+0x5c>)
 8001faa:	f00a f849 	bl	800c040 <HAL_GPIO_WritePin>
#endif

}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40020400 	.word	0x40020400

08001fbc <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d820      	bhi.n	800200e <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d816      	bhi.n	8002000 <ILI9341_SetRotation+0x44>
 8001fd2:	a201      	add	r2, pc, #4	; (adr r2, 8001fd8 <ILI9341_SetRotation+0x1c>)
 8001fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd8:	08001fe9 	.word	0x08001fe9
 8001fdc:	08001fef 	.word	0x08001fef
 8001fe0:	08001ff5 	.word	0x08001ff5
 8001fe4:	08001ffb 	.word	0x08001ffb
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001fe8:	2348      	movs	r3, #72	; 0x48
 8001fea:	71fb      	strb	r3, [r7, #7]
		break;
 8001fec:	e008      	b.n	8002000 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001fee:	2328      	movs	r3, #40	; 0x28
 8001ff0:	71fb      	strb	r3, [r7, #7]
		break;
 8001ff2:	e005      	b.n	8002000 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001ff4:	2388      	movs	r3, #136	; 0x88
 8001ff6:	71fb      	strb	r3, [r7, #7]
		break;
 8001ff8:	e002      	b.n	8002000 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001ffa:	23e8      	movs	r3, #232	; 0xe8
 8001ffc:	71fb      	strb	r3, [r7, #7]
		break;
 8001ffe:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8002000:	1dfb      	adds	r3, r7, #7
 8002002:	2201      	movs	r2, #1
 8002004:	4619      	mov	r1, r3
 8002006:	2036      	movs	r0, #54	; 0x36
 8002008:	f7ff ffa8 	bl	8001f5c <ILI9341_SendCommandAndData>
 800200c:	e000      	b.n	8002010 <ILI9341_SetRotation+0x54>
		return;
 800200e:	bf00      	nop
}
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop

08002018 <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	4604      	mov	r4, r0
 8002020:	4608      	mov	r0, r1
 8002022:	4611      	mov	r1, r2
 8002024:	461a      	mov	r2, r3
 8002026:	4623      	mov	r3, r4
 8002028:	80fb      	strh	r3, [r7, #6]
 800202a:	4603      	mov	r3, r0
 800202c:	80bb      	strh	r3, [r7, #4]
 800202e:	460b      	mov	r3, r1
 8002030:	807b      	strh	r3, [r7, #2]
 8002032:	4613      	mov	r3, r2
 8002034:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8002036:	88fa      	ldrh	r2, [r7, #6]
 8002038:	887b      	ldrh	r3, [r7, #2]
 800203a:	4413      	add	r3, r2
 800203c:	b29b      	uxth	r3, r3
 800203e:	3b01      	subs	r3, #1
 8002040:	81fb      	strh	r3, [r7, #14]
 8002042:	88ba      	ldrh	r2, [r7, #4]
 8002044:	883b      	ldrh	r3, [r7, #0]
 8002046:	4413      	add	r3, r2
 8002048:	b29b      	uxth	r3, r3
 800204a:	3b01      	subs	r3, #1
 800204c:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	b29b      	uxth	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 800205e:	89fb      	ldrh	r3, [r7, #14]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	b29b      	uxth	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8002068:	89fb      	ldrh	r3, [r7, #14]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 800206e:	f107 0308 	add.w	r3, r7, #8
 8002072:	2204      	movs	r2, #4
 8002074:	4619      	mov	r1, r3
 8002076:	202a      	movs	r0, #42	; 0x2a
 8002078:	f7ff ff70 	bl	8001f5c <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 800207c:	88bb      	ldrh	r3, [r7, #4]
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	b29b      	uxth	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8002086:	88bb      	ldrh	r3, [r7, #4]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 800208c:	89bb      	ldrh	r3, [r7, #12]
 800208e:	0a1b      	lsrs	r3, r3, #8
 8002090:	b29b      	uxth	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8002096:	89bb      	ldrh	r3, [r7, #12]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	2204      	movs	r2, #4
 80020a2:	4619      	mov	r1, r3
 80020a4:	202b      	movs	r0, #43	; 0x2b
 80020a6:	f7ff ff59 	bl	8001f5c <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 80020aa:	202c      	movs	r0, #44	; 0x2c
 80020ac:	f7ff ff34 	bl	8001f18 <ILI9341_SendComand>

}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd90      	pop	{r4, r7, pc}

080020b8 <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
 80020c2:	460b      	mov	r3, r1
 80020c4:	80bb      	strh	r3, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 80020ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	db21      	blt.n	8002116 <ILI9341_WritePixel+0x5e>
 80020d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020d6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80020da:	da1c      	bge.n	8002116 <ILI9341_WritePixel+0x5e>
 80020dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	db18      	blt.n	8002116 <ILI9341_WritePixel+0x5e>
 80020e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020e8:	2bef      	cmp	r3, #239	; 0xef
 80020ea:	dc14      	bgt.n	8002116 <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 80020ec:	88f8      	ldrh	r0, [r7, #6]
 80020ee:	88b9      	ldrh	r1, [r7, #4]
 80020f0:	2301      	movs	r3, #1
 80020f2:	2201      	movs	r2, #1
 80020f4:	f7ff ff90 	bl	8002018 <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 80020f8:	887b      	ldrh	r3, [r7, #2]
 80020fa:	0a1b      	lsrs	r3, r3, #8
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8002102:	887b      	ldrh	r3, [r7, #2]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8002108:	f107 030c 	add.w	r3, r7, #12
 800210c:	2202      	movs	r2, #2
 800210e:	4619      	mov	r1, r3
 8002110:	202c      	movs	r0, #44	; 0x2c
 8002112:	f7ff ff23 	bl	8001f5c <ILI9341_SendCommandAndData>
	}

}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b084      	sub	sp, #16
 8002122:	af00      	add	r7, sp, #0
 8002124:	60ba      	str	r2, [r7, #8]
 8002126:	461a      	mov	r2, r3
 8002128:	4603      	mov	r3, r0
 800212a:	81fb      	strh	r3, [r7, #14]
 800212c:	460b      	mov	r3, r1
 800212e:	81bb      	strh	r3, [r7, #12]
 8002130:	4613      	mov	r3, r2
 8002132:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8002134:	89fa      	ldrh	r2, [r7, #14]
 8002136:	88fb      	ldrh	r3, [r7, #6]
 8002138:	4413      	add	r3, r2
 800213a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800213e:	dc14      	bgt.n	800216a <ILI9341_DrawImage+0x4c>
 8002140:	89ba      	ldrh	r2, [r7, #12]
 8002142:	8b3b      	ldrh	r3, [r7, #24]
 8002144:	4413      	add	r3, r2
 8002146:	2bf0      	cmp	r3, #240	; 0xf0
 8002148:	dc0f      	bgt.n	800216a <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 800214a:	8b3b      	ldrh	r3, [r7, #24]
 800214c:	88fa      	ldrh	r2, [r7, #6]
 800214e:	89b9      	ldrh	r1, [r7, #12]
 8002150:	89f8      	ldrh	r0, [r7, #14]
 8002152:	f7ff ff61 	bl	8002018 <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	8b3a      	ldrh	r2, [r7, #24]
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	461a      	mov	r2, r3
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	202c      	movs	r0, #44	; 0x2c
 8002166:	f7ff fef9 	bl	8001f5c <ILI9341_SendCommandAndData>
	}
}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 800217e:	23f0      	movs	r3, #240	; 0xf0
 8002180:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002184:	2100      	movs	r1, #0
 8002186:	2000      	movs	r0, #0
 8002188:	f7ff ff46 	bl	8002018 <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 800218c:	202c      	movs	r0, #44	; 0x2c
 800218e:	f7ff fec3 	bl	8001f18 <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8002192:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002196:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8002198:	2200      	movs	r2, #0
 800219a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800219e:	4822      	ldr	r0, [pc, #136]	; (8002228 <ILI9341_ClearDisplay+0xb4>)
 80021a0:	f009 ff4e 	bl	800c040 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 80021a4:	2201      	movs	r2, #1
 80021a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021aa:	481f      	ldr	r0, [pc, #124]	; (8002228 <ILI9341_ClearDisplay+0xb4>)
 80021ac:	f009 ff48 	bl	800c040 <HAL_GPIO_WritePin>

    while (Length > 0U)
 80021b0:	e023      	b.n	80021fa <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 80021b2:	4b1e      	ldr	r3, [pc, #120]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d11b      	bne.n	80021fa <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	4b18      	ldr	r3, [pc, #96]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	330c      	adds	r3, #12
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 80021d4:	bf00      	nop
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d1f7      	bne.n	80021d6 <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	330c      	adds	r3, #12
 80021ee:	88fa      	ldrh	r2, [r7, #6]
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1d8      	bne.n	80021b2 <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8002200:	bf00      	nop
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220e:	2b80      	cmp	r3, #128	; 0x80
 8002210:	d0f7      	beq.n	8002202 <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8002212:	2201      	movs	r2, #1
 8002214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002218:	4803      	ldr	r0, [pc, #12]	; (8002228 <ILI9341_ClearDisplay+0xb4>)
 800221a:	f009 ff11 	bl	800c040 <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40020400 	.word	0x40020400
 800222c:	2000035c 	.word	0x2000035c

08002230 <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8002238:	4a24      	ldr	r2, [pc, #144]	; (80022cc <ILI9341_Init+0x9c>)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 800223e:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <ILI9341_Init+0xa0>)
 8002240:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002250:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 8002252:	2200      	movs	r2, #0
 8002254:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002258:	481e      	ldr	r0, [pc, #120]	; (80022d4 <ILI9341_Init+0xa4>)
 800225a:	f009 fef1 	bl	800c040 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 800225e:	200a      	movs	r0, #10
 8002260:	f7ff fe1f 	bl	8001ea2 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8002264:	2201      	movs	r2, #1
 8002266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800226a:	481a      	ldr	r0, [pc, #104]	; (80022d4 <ILI9341_Init+0xa4>)
 800226c:	f009 fee8 	bl	800c040 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8002270:	200a      	movs	r0, #10
 8002272:	f7ff fe16 	bl	8001ea2 <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8002276:	e019      	b.n	80022ac <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	60fa      	str	r2, [r7, #12]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 8002282:	7abb      	ldrb	r3, [r7, #10]
 8002284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002288:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 800228a:	7a7a      	ldrb	r2, [r7, #9]
 800228c:	7afb      	ldrb	r3, [r7, #11]
 800228e:	68f9      	ldr	r1, [r7, #12]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fe63 	bl	8001f5c <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 8002296:	7a7b      	ldrb	r3, [r7, #9]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4413      	add	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 800229e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	da02      	bge.n	80022ac <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 80022a6:	2096      	movs	r0, #150	; 0x96
 80022a8:	f7ff fdfb 	bl	8001ea2 <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	60fa      	str	r2, [r7, #12]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	72fb      	strb	r3, [r7, #11]
 80022b6:	7afb      	ldrb	r3, [r7, #11]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1dd      	bne.n	8002278 <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 80022bc:	2003      	movs	r0, #3
 80022be:	f7ff fe7d 	bl	8001fbc <ILI9341_SetRotation>
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	2000035c 	.word	0x2000035c
 80022d0:	08017394 	.word	0x08017394
 80022d4:	40020400 	.word	0x40020400

080022d8 <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 80022de:	2200      	movs	r2, #0
 80022e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022e4:	480a      	ldr	r0, [pc, #40]	; (8002310 <XPT2046_GetRawData+0x38>)
 80022e6:	f009 feab 	bl	800c040 <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <XPT2046_GetRawData+0x3c>)
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	2305      	movs	r3, #5
 80022f6:	4a08      	ldr	r2, [pc, #32]	; (8002318 <XPT2046_GetRawData+0x40>)
 80022f8:	4908      	ldr	r1, [pc, #32]	; (800231c <XPT2046_GetRawData+0x44>)
 80022fa:	f00d fcc2 	bl	800fc82 <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 80022fe:	2201      	movs	r2, #1
 8002300:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <XPT2046_GetRawData+0x38>)
 8002306:	f009 fe9b 	bl	800c040 <HAL_GPIO_WritePin>
#endif
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40020400 	.word	0x40020400
 8002314:	20000234 	.word	0x20000234
 8002318:	20000244 	.word	0x20000244
 800231c:	2000023c 	.word	0x2000023c

08002320 <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <XPT2046_ReadRawData+0x48>)
 800232c:	785b      	ldrb	r3, [r3, #1]
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	b21a      	sxth	r2, r3
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <XPT2046_ReadRawData+0x48>)
 8002334:	789b      	ldrb	r3, [r3, #2]
 8002336:	b21b      	sxth	r3, r3
 8002338:	4313      	orrs	r3, r2
 800233a:	b21b      	sxth	r3, r3
 800233c:	b29a      	uxth	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <XPT2046_ReadRawData+0x48>)
 8002344:	78db      	ldrb	r3, [r3, #3]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	b21a      	sxth	r2, r3
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <XPT2046_ReadRawData+0x48>)
 800234c:	791b      	ldrb	r3, [r3, #4]
 800234e:	b21b      	sxth	r3, r3
 8002350:	4313      	orrs	r3, r2
 8002352:	b21b      	sxth	r3, r3
 8002354:	b29a      	uxth	r2, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	801a      	strh	r2, [r3, #0]
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000244 	.word	0x20000244

0800236c <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 800236c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 8002378:	f107 020c 	add.w	r2, r7, #12
 800237c:	f107 030e 	add.w	r3, r7, #14
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ffcc 	bl	8002320 <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 8002388:	4b3e      	ldr	r3, [pc, #248]	; (8002484 <XPT2046_ReadTouchPoint+0x118>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d16e      	bne.n	800246e <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 8002390:	4b3d      	ldr	r3, [pc, #244]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 8002392:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002396:	89fb      	ldrh	r3, [r7, #14]
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe f8db 	bl	8000554 <__aeabi_i2d>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4620      	mov	r0, r4
 80023a4:	4629      	mov	r1, r5
 80023a6:	f7fe f93f 	bl	8000628 <__aeabi_dmul>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4690      	mov	r8, r2
 80023b0:	4699      	mov	r9, r3
 80023b2:	4b35      	ldr	r3, [pc, #212]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 80023b4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80023b8:	89bb      	ldrh	r3, [r7, #12]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe f8ca 	bl	8000554 <__aeabi_i2d>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4620      	mov	r0, r4
 80023c6:	4629      	mov	r1, r5
 80023c8:	f7fe f92e 	bl	8000628 <__aeabi_dmul>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4640      	mov	r0, r8
 80023d2:	4649      	mov	r1, r9
 80023d4:	f7fd ff72 	bl	80002bc <__adddf3>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	4b29      	ldr	r3, [pc, #164]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 80023e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80023e6:	f7fd ff69 	bl	80002bc <__adddf3>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	f7fe fbf1 	bl	8000bd8 <__aeabi_d2uiz>
 80023f6:	4603      	mov	r3, r0
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 80023fe:	4b22      	ldr	r3, [pc, #136]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 8002400:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002404:	89fb      	ldrh	r3, [r7, #14]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe f8a4 	bl	8000554 <__aeabi_i2d>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4620      	mov	r0, r4
 8002412:	4629      	mov	r1, r5
 8002414:	f7fe f908 	bl	8000628 <__aeabi_dmul>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4690      	mov	r8, r2
 800241e:	4699      	mov	r9, r3
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 8002422:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002426:	89bb      	ldrh	r3, [r7, #12]
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe f893 	bl	8000554 <__aeabi_i2d>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4620      	mov	r0, r4
 8002434:	4629      	mov	r1, r5
 8002436:	f7fe f8f7 	bl	8000628 <__aeabi_dmul>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4640      	mov	r0, r8
 8002440:	4649      	mov	r1, r9
 8002442:	f7fd ff3b 	bl	80002bc <__adddf3>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4610      	mov	r0, r2
 800244c:	4619      	mov	r1, r3
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 8002450:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002454:	f7fd ff32 	bl	80002bc <__adddf3>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	f7fe fbba 	bl	8000bd8 <__aeabi_d2uiz>
 8002464:	4603      	mov	r3, r0
 8002466:	b29a      	uxth	r2, r3
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 800246c:	e005      	b.n	800247a <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 800246e:	89fa      	ldrh	r2, [r7, #14]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 8002474:	89ba      	ldrh	r2, [r7, #12]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	801a      	strh	r2, [r3, #0]
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002484:	20000249 	.word	0x20000249
 8002488:	20000000 	.word	0x20000000

0800248c <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 800249e:	2300      	movs	r3, #0
 80024a0:	73fb      	strb	r3, [r7, #15]
 80024a2:	e013      	b.n	80024cc <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	4a16      	ldr	r2, [pc, #88]	; (8002500 <XPT2046_GetTouchPoint+0x74>)
 80024a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024ac:	461a      	mov	r2, r3
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	4413      	add	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <XPT2046_GetTouchPoint+0x74>)
 80024b8:	330a      	adds	r3, #10
 80024ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024be:	461a      	mov	r2, r3
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4413      	add	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	3301      	adds	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	2b09      	cmp	r3, #9
 80024d0:	d9e8      	bls.n	80024a4 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <XPT2046_GetTouchPoint+0x78>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	08db      	lsrs	r3, r3, #3
 80024dc:	b29a      	uxth	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4a07      	ldr	r2, [pc, #28]	; (8002504 <XPT2046_GetTouchPoint+0x78>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	08db      	lsrs	r3, r3, #3
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	801a      	strh	r2, [r3, #0]
}
 80024f2:	bf00      	nop
 80024f4:	371c      	adds	r7, #28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000360 	.word	0x20000360
 8002504:	cccccccd 	.word	0xcccccccd

08002508 <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <XPT2046_IsTouched+0x20>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d101      	bne.n	800251a <XPT2046_IsTouched+0x12>
		return 1;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <XPT2046_IsTouched+0x14>

	return 0;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000389 	.word	0x20000389

0800252c <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
	  switch(TouchState)
 8002530:	4b59      	ldr	r3, [pc, #356]	; (8002698 <XPT2046_Task+0x16c>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b03      	cmp	r3, #3
 8002538:	f200 80ab 	bhi.w	8002692 <XPT2046_Task+0x166>
 800253c:	a201      	add	r2, pc, #4	; (adr r2, 8002544 <XPT2046_Task+0x18>)
 800253e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002542:	bf00      	nop
 8002544:	08002689 	.word	0x08002689
 8002548:	08002555 	.word	0x08002555
 800254c:	080025cb 	.word	0x080025cb
 8002550:	08002647 	.word	0x08002647
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 8002554:	f008 fdf8 	bl	800b148 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	4b50      	ldr	r3, [pc, #320]	; (800269c <XPT2046_Task+0x170>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b05      	cmp	r3, #5
 8002562:	f240 8093 	bls.w	800268c <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 8002566:	f7ff feb7 	bl	80022d8 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 800256a:	4b4d      	ldr	r3, [pc, #308]	; (80026a0 <XPT2046_Task+0x174>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4a4c      	ldr	r2, [pc, #304]	; (80026a4 <XPT2046_Task+0x178>)
 8002572:	441a      	add	r2, r3
 8002574:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <XPT2046_Task+0x174>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	330a      	adds	r3, #10
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4949      	ldr	r1, [pc, #292]	; (80026a4 <XPT2046_Task+0x178>)
 800257e:	440b      	add	r3, r1
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f7ff fef2 	bl	800236c <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002588:	4b45      	ldr	r3, [pc, #276]	; (80026a0 <XPT2046_Task+0x174>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	3301      	adds	r3, #1
 800258e:	b2da      	uxtb	r2, r3
 8002590:	4b43      	ldr	r3, [pc, #268]	; (80026a0 <XPT2046_Task+0x174>)
 8002592:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8002594:	4b42      	ldr	r3, [pc, #264]	; (80026a0 <XPT2046_Task+0x174>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b0a      	cmp	r3, #10
 800259a:	d105      	bne.n	80025a8 <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 800259c:	4b40      	ldr	r3, [pc, #256]	; (80026a0 <XPT2046_Task+0x174>)
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 80025a2:	4b3d      	ldr	r3, [pc, #244]	; (8002698 <XPT2046_Task+0x16c>)
 80025a4:	2202      	movs	r2, #2
 80025a6:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80025a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025ac:	483e      	ldr	r0, [pc, #248]	; (80026a8 <XPT2046_Task+0x17c>)
 80025ae:	f009 fd2f 	bl	800c010 <HAL_GPIO_ReadPin>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d102      	bne.n	80025be <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80025b8:	4b37      	ldr	r3, [pc, #220]	; (8002698 <XPT2046_Task+0x16c>)
 80025ba:	2203      	movs	r2, #3
 80025bc:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80025be:	f008 fdc3 	bl	800b148 <HAL_GetTick>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4a35      	ldr	r2, [pc, #212]	; (800269c <XPT2046_Task+0x170>)
 80025c6:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80025c8:	e060      	b.n	800268c <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80025ca:	f008 fdbd 	bl	800b148 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	4b32      	ldr	r3, [pc, #200]	; (800269c <XPT2046_Task+0x170>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	d95a      	bls.n	8002690 <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80025da:	f7ff fe7d 	bl	80022d8 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80025de:	4b30      	ldr	r3, [pc, #192]	; (80026a0 <XPT2046_Task+0x174>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4a2f      	ldr	r2, [pc, #188]	; (80026a4 <XPT2046_Task+0x178>)
 80025e6:	441a      	add	r2, r3
 80025e8:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <XPT2046_Task+0x174>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	330a      	adds	r3, #10
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	492c      	ldr	r1, [pc, #176]	; (80026a4 <XPT2046_Task+0x178>)
 80025f2:	440b      	add	r3, r1
 80025f4:	4619      	mov	r1, r3
 80025f6:	4610      	mov	r0, r2
 80025f8:	f7ff feb8 	bl	800236c <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 80025fc:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <XPT2046_Task+0x174>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	b2da      	uxtb	r2, r3
 8002604:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <XPT2046_Task+0x174>)
 8002606:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 8002608:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <XPT2046_Task+0x174>)
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	4b27      	ldr	r3, [pc, #156]	; (80026ac <XPT2046_Task+0x180>)
 800260e:	fba3 1302 	umull	r1, r3, r3, r2
 8002612:	08d9      	lsrs	r1, r3, #3
 8002614:	460b      	mov	r3, r1
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	b2da      	uxtb	r2, r3
 8002620:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <XPT2046_Task+0x174>)
 8002622:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 8002624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002628:	481f      	ldr	r0, [pc, #124]	; (80026a8 <XPT2046_Task+0x17c>)
 800262a:	f009 fcf1 	bl	800c010 <HAL_GPIO_ReadPin>
 800262e:	4603      	mov	r3, r0
 8002630:	2b01      	cmp	r3, #1
 8002632:	d102      	bne.n	800263a <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 8002634:	4b18      	ldr	r3, [pc, #96]	; (8002698 <XPT2046_Task+0x16c>)
 8002636:	2203      	movs	r2, #3
 8002638:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 800263a:	f008 fd85 	bl	800b148 <HAL_GetTick>
 800263e:	4603      	mov	r3, r0
 8002640:	4a16      	ldr	r2, [pc, #88]	; (800269c <XPT2046_Task+0x170>)
 8002642:	6013      	str	r3, [r2, #0]
		  }

		  break;
 8002644:	e024      	b.n	8002690 <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <XPT2046_Task+0x16c>)
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <XPT2046_Task+0x174>)
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 8002652:	e009      	b.n	8002668 <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 8002654:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <XPT2046_Task+0x184>)
 8002656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265a:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 800265c:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <XPT2046_Task+0x188>)
 800265e:	f993 3000 	ldrsb.w	r3, [r3]
 8002662:	4618      	mov	r0, r3
 8002664:	f008 ff32 	bl	800b4cc <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <XPT2046_Task+0x188>)
 800266a:	f993 3000 	ldrsb.w	r3, [r3]
 800266e:	4618      	mov	r0, r3
 8002670:	f008 ff1d 	bl	800b4ae <HAL_NVIC_GetPendingIRQ>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1ec      	bne.n	8002654 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 800267a:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <XPT2046_Task+0x188>)
 800267c:	f993 3000 	ldrsb.w	r3, [r3]
 8002680:	4618      	mov	r0, r3
 8002682:	f008 feec 	bl	800b45e <HAL_NVIC_EnableIRQ>
		  break;
 8002686:	e004      	b.n	8002692 <XPT2046_Task+0x166>
		  break;
 8002688:	bf00      	nop
 800268a:	e002      	b.n	8002692 <XPT2046_Task+0x166>
		  break;
 800268c:	bf00      	nop
 800268e:	e000      	b.n	8002692 <XPT2046_Task+0x166>
		  break;
 8002690:	bf00      	nop

	  }
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000389 	.word	0x20000389
 800269c:	2000038c 	.word	0x2000038c
 80026a0:	20000388 	.word	0x20000388
 80026a4:	20000360 	.word	0x20000360
 80026a8:	40020000 	.word	0x40020000
 80026ac:	cccccccd 	.word	0xcccccccd
 80026b0:	40013c00 	.word	0x40013c00
 80026b4:	20000238 	.word	0x20000238

080026b8 <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80026bc:	2017      	movs	r0, #23
 80026be:	f008 fedc 	bl	800b47a <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 80026c2:	4b02      	ldr	r3, [pc, #8]	; (80026cc <XPT2046_IRQ+0x14>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000389 	.word	0x20000389

080026d0 <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 80026dc:	4a1d      	ldr	r2, [pc, #116]	; (8002754 <XPT2046_Init+0x84>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 80026e2:	4a1d      	ldr	r2, [pc, #116]	; (8002758 <XPT2046_Init+0x88>)
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 80026e8:	4b1c      	ldr	r3, [pc, #112]	; (800275c <XPT2046_Init+0x8c>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 80026ee:	2201      	movs	r2, #1
 80026f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026f4:	481a      	ldr	r0, [pc, #104]	; (8002760 <XPT2046_Init+0x90>)
 80026f6:	f009 fca3 	bl	800c040 <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 80026fa:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <XPT2046_Init+0x94>)
 80026fc:	2290      	movs	r2, #144	; 0x90
 80026fe:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <XPT2046_Init+0x98>)
 8002702:	22d0      	movs	r2, #208	; 0xd0
 8002704:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 8002706:	4b19      	ldr	r3, [pc, #100]	; (800276c <XPT2046_Init+0x9c>)
 8002708:	2280      	movs	r2, #128	; 0x80
 800270a:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 800270c:	f7ff fde4 	bl	80022d8 <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 8002710:	2001      	movs	r0, #1
 8002712:	f008 fd25 	bl	800b160 <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <XPT2046_Init+0x94>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	08db      	lsrs	r3, r3, #3
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <XPT2046_Init+0x9c>)
 8002720:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 8002722:	4b10      	ldr	r3, [pc, #64]	; (8002764 <XPT2046_Init+0x94>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	015b      	lsls	r3, r3, #5
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <XPT2046_Init+0x9c>)
 800272c:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <XPT2046_Init+0x98>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	08db      	lsrs	r3, r3, #3
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <XPT2046_Init+0x9c>)
 8002738:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 800273a:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <XPT2046_Init+0x98>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	015b      	lsls	r3, r3, #5
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <XPT2046_Init+0x9c>)
 8002744:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <XPT2046_Init+0x9c>)
 8002748:	2200      	movs	r2, #0
 800274a:	711a      	strb	r2, [r3, #4]
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000234 	.word	0x20000234
 8002758:	20000238 	.word	0x20000238
 800275c:	20000389 	.word	0x20000389
 8002760:	40020400 	.word	0x40020400
 8002764:	20000239 	.word	0x20000239
 8002768:	2000023a 	.word	0x2000023a
 800276c:	2000023c 	.word	0x2000023c

08002770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	4b27      	ldr	r3, [pc, #156]	; (8002818 <MX_DMA_Init+0xa8>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a26      	ldr	r2, [pc, #152]	; (8002818 <MX_DMA_Init+0xa8>)
 8002780:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b24      	ldr	r3, [pc, #144]	; (8002818 <MX_DMA_Init+0xa8>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	603b      	str	r3, [r7, #0]
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <MX_DMA_Init+0xa8>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <MX_DMA_Init+0xa8>)
 800279c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <MX_DMA_Init+0xa8>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	200b      	movs	r0, #11
 80027b4:	f008 fe37 	bl	800b426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80027b8:	200b      	movs	r0, #11
 80027ba:	f008 fe50 	bl	800b45e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	2100      	movs	r1, #0
 80027c2:	200c      	movs	r0, #12
 80027c4:	f008 fe2f 	bl	800b426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80027c8:	200c      	movs	r0, #12
 80027ca:	f008 fe48 	bl	800b45e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2100      	movs	r1, #0
 80027d2:	2010      	movs	r0, #16
 80027d4:	f008 fe27 	bl	800b426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80027d8:	2010      	movs	r0, #16
 80027da:	f008 fe40 	bl	800b45e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2100      	movs	r1, #0
 80027e2:	2011      	movs	r0, #17
 80027e4:	f008 fe1f 	bl	800b426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80027e8:	2011      	movs	r0, #17
 80027ea:	f008 fe38 	bl	800b45e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	2100      	movs	r1, #0
 80027f2:	203a      	movs	r0, #58	; 0x3a
 80027f4:	f008 fe17 	bl	800b426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80027f8:	203a      	movs	r0, #58	; 0x3a
 80027fa:	f008 fe30 	bl	800b45e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80027fe:	2200      	movs	r2, #0
 8002800:	2100      	movs	r1, #0
 8002802:	2046      	movs	r0, #70	; 0x46
 8002804:	f008 fe0f 	bl	800b426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002808:	2046      	movs	r0, #70	; 0x46
 800280a:	f008 fe28 	bl	800b45e <HAL_NVIC_EnableIRQ>

}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800

0800281c <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 8002824:	4a09      	ldr	r2, [pc, #36]	; (800284c <DS3231_Init+0x30>)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 800282a:	2000      	movs	r0, #0
 800282c:	f000 f8ea 	bl	8002a04 <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8002830:	2000      	movs	r0, #0
 8002832:	f000 f8ae 	bl	8002992 <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8002836:	f000 f907 	bl	8002a48 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 800283a:	f000 f8cd 	bl	80029d8 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800283e:	2001      	movs	r0, #1
 8002840:	f000 f846 	bl	80028d0 <DS3231_SetInterruptMode>
}
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000390 	.word	0x20000390

08002850 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af02      	add	r7, sp, #8
 8002856:	4603      	mov	r3, r0
 8002858:	460a      	mov	r2, r1
 800285a:	71fb      	strb	r3, [r7, #7]
 800285c:	4613      	mov	r3, r2
 800285e:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	733b      	strb	r3, [r7, #12]
 8002864:	79bb      	ldrb	r3, [r7, #6]
 8002866:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8002868:	4b07      	ldr	r3, [pc, #28]	; (8002888 <DS3231_SetRegByte+0x38>)
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	f107 020c 	add.w	r2, r7, #12
 8002870:	f04f 33ff 	mov.w	r3, #4294967295
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	2302      	movs	r3, #2
 8002878:	21d0      	movs	r1, #208	; 0xd0
 800287a:	f009 fd71 	bl	800c360 <HAL_I2C_Master_Transmit>
}
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000390 	.word	0x20000390

0800288c <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af02      	add	r7, sp, #8
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <DS3231_GetRegByte+0x40>)
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	1dfa      	adds	r2, r7, #7
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	2301      	movs	r3, #1
 80028a4:	21d0      	movs	r1, #208	; 0xd0
 80028a6:	f009 fd5b 	bl	800c360 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <DS3231_GetRegByte+0x40>)
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	f107 020f 	add.w	r2, r7, #15
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2301      	movs	r3, #1
 80028ba:	21d0      	movs	r1, #208	; 0xd0
 80028bc:	f009 fe4e 	bl	800c55c <HAL_I2C_Master_Receive>
	return val;
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000390 	.word	0x20000390

080028d0 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80028da:	200e      	movs	r0, #14
 80028dc:	f7ff ffd6 	bl	800288c <DS3231_GetRegByte>
 80028e0:	4603      	mov	r3, r0
 80028e2:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 80028e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	b25a      	sxtb	r2, r3
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	b25b      	sxtb	r3, r3
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	b25b      	sxtb	r3, r3
 80028fa:	4313      	orrs	r3, r2
 80028fc:	b25b      	sxtb	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	4619      	mov	r1, r3
 8002902:	200e      	movs	r0, #14
 8002904:	f7ff ffa4 	bl	8002850 <DS3231_SetRegByte>
}
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <DS3231_SetRateSelect>:

/**
 * @brief Set frequency of the square wave output
 * @param rate Frequency to set, DS3231_1HZ, DS3231_1024HZ, DS3231_4096HZ or DS3231_8192HZ.
 */
void DS3231_SetRateSelect(DS3231_Rate rate){
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800291a:	200e      	movs	r0, #14
 800291c:	f7ff ffb6 	bl	800288c <DS3231_GetRegByte>
 8002920:	4603      	mov	r3, r0
 8002922:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xe7) | ((rate & 0x03) << DS3231_RS1));
 8002924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002928:	f023 0318 	bic.w	r3, r3, #24
 800292c:	b25a      	sxtb	r2, r3
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	b25b      	sxtb	r3, r3
 8002934:	f003 0318 	and.w	r3, r3, #24
 8002938:	b25b      	sxtb	r3, r3
 800293a:	4313      	orrs	r3, r2
 800293c:	b25b      	sxtb	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	4619      	mov	r1, r3
 8002942:	200e      	movs	r0, #14
 8002944:	f7ff ff84 	bl	8002850 <DS3231_SetRegByte>
}
 8002948:	bf00      	nop
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800295a:	200e      	movs	r0, #14
 800295c:	f7ff ff96 	bl	800288c <DS3231_GetRegByte>
 8002960:	4603      	mov	r3, r0
 8002962:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 8002964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800296c:	b25b      	sxtb	r3, r3
 800296e:	79fa      	ldrb	r2, [r7, #7]
 8002970:	2a00      	cmp	r2, #0
 8002972:	d102      	bne.n	800297a <DS3231_EnableOscillator+0x2a>
 8002974:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002978:	e000      	b.n	800297c <DS3231_EnableOscillator+0x2c>
 800297a:	2200      	movs	r2, #0
 800297c:	4313      	orrs	r3, r2
 800297e:	b25b      	sxtb	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	4619      	mov	r1, r3
 8002984:	200e      	movs	r0, #14
 8002986:	f7ff ff63 	bl	8002850 <DS3231_SetRegByte>
}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800299c:	200e      	movs	r0, #14
 800299e:	f7ff ff75 	bl	800288c <DS3231_GetRegByte>
 80029a2:	4603      	mov	r3, r0
 80029a4:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80029a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029aa:	f023 0302 	bic.w	r3, r3, #2
 80029ae:	b25a      	sxtb	r2, r3
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	b25b      	sxtb	r3, r3
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	b25b      	sxtb	r3, r3
 80029bc:	4313      	orrs	r3, r2
 80029be:	b25b      	sxtb	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	4619      	mov	r1, r3
 80029c4:	200e      	movs	r0, #14
 80029c6:	f7ff ff43 	bl	8002850 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80029ca:	2001      	movs	r0, #1
 80029cc:	f7ff ff80 	bl	80028d0 <DS3231_SetInterruptMode>
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80029de:	200f      	movs	r0, #15
 80029e0:	f7ff ff54 	bl	800288c <DS3231_GetRegByte>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f023 0302 	bic.w	r3, r3, #2
 80029ea:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f023 0302 	bic.w	r3, r3, #2
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	4619      	mov	r1, r3
 80029f6:	200f      	movs	r0, #15
 80029f8:	f7ff ff2a 	bl	8002850 <DS3231_SetRegByte>
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002a0e:	200e      	movs	r0, #14
 8002a10:	f7ff ff3c 	bl	800288c <DS3231_GetRegByte>
 8002a14:	4603      	mov	r3, r0
 8002a16:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	b25a      	sxtb	r2, r3
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	b25b      	sxtb	r3, r3
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	b25b      	sxtb	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	4619      	mov	r1, r3
 8002a34:	200e      	movs	r0, #14
 8002a36:	f7ff ff0b 	bl	8002850 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f7ff ff48 	bl	80028d0 <DS3231_SetInterruptMode>
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002a4e:	200f      	movs	r0, #15
 8002a50:	f7ff ff1c 	bl	800288c <DS3231_GetRegByte>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	4619      	mov	r1, r3
 8002a66:	200f      	movs	r0, #15
 8002a68:	f7ff fef2 	bl	8002850 <DS3231_SetRegByte>
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8002a78:	2003      	movs	r0, #3
 8002a7a:	f7ff ff07 	bl	800288c <DS3231_GetRegByte>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 f866 	bl	8002b52 <DS3231_DecodeBCD>
 8002a86:	4603      	mov	r3, r0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002a90:	2002      	movs	r0, #2
 8002a92:	f7ff fefb 	bl	800288c <DS3231_GetRegByte>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 f85a 	bl	8002b52 <DS3231_DecodeBCD>
 8002a9e:	4603      	mov	r3, r0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	f7ff feef 	bl	800288c <DS3231_GetRegByte>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 f84e 	bl	8002b52 <DS3231_DecodeBCD>
 8002ab6:	4603      	mov	r3, r0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	bd80      	pop	{r7, pc}

08002abc <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 f85b 	bl	8002b84 <DS3231_EncodeBCD>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	2003      	movs	r0, #3
 8002ad4:	f7ff febc 	bl	8002850 <DS3231_SetRegByte>
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 f846 	bl	8002b84 <DS3231_EncodeBCD>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4619      	mov	r1, r3
 8002afc:	2002      	movs	r0, #2
 8002afe:	f7ff fea7 	bl	8002850 <DS3231_SetRegByte>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f834 	bl	8002b84 <DS3231_EncodeBCD>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4619      	mov	r1, r3
 8002b20:	2001      	movs	r0, #1
 8002b22:	f7ff fe95 	bl	8002850 <DS3231_SetRegByte>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	4603      	mov	r3, r0
 8002b36:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f822 	bl	8002b84 <DS3231_EncodeBCD>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4619      	mov	r1, r3
 8002b44:	2000      	movs	r0, #0
 8002b46:	f7ff fe83 	bl	8002850 <DS3231_SetRegByte>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	091b      	lsrs	r3, r3, #4
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	0092      	lsls	r2, r2, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	b2db      	uxtb	r3, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8002b8e:	79fa      	ldrb	r2, [r7, #7]
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <DS3231_EncodeBCD+0x40>)
 8002b92:	fba3 1302 	umull	r1, r3, r3, r2
 8002b96:	08d9      	lsrs	r1, r3, #3
 8002b98:	460b      	mov	r3, r1
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	4907      	ldr	r1, [pc, #28]	; (8002bc4 <DS3231_EncodeBCD+0x40>)
 8002ba8:	fba1 1303 	umull	r1, r3, r1, r3
 8002bac:	08db      	lsrs	r3, r3, #3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	b2db      	uxtb	r3, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	cccccccd 	.word	0xcccccccd

08002bc8 <eeprom_wait>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Basic function to work with I2C EEPROM
//
void eeprom_wait(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 8002bcc:	bf00      	nop
 8002bce:	f008 fabb 	bl	800b148 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <eeprom_wait+0x1c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b06      	cmp	r3, #6
 8002bdc:	d9f7      	bls.n	8002bce <eeprom_wait+0x6>
    {
    }
}
 8002bde:	bf00      	nop
 8002be0:	bf00      	nop
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	2000024c 	.word	0x2000024c

08002be8 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af04      	add	r7, sp, #16
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 8002bf4:	f7ff ffe8 	bl	8002bc8 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	f04f 31ff 	mov.w	r1, #4294967295
 8002c04:	9102      	str	r1, [sp, #8]
 8002c06:	9301      	str	r3, [sp, #4]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	21a0      	movs	r1, #160	; 0xa0
 8002c10:	4803      	ldr	r0, [pc, #12]	; (8002c20 <eeprom_read+0x38>)
 8002c12:	f009 ffc3 	bl	800cb9c <HAL_I2C_Mem_Read>
 8002c16:	4603      	mov	r3, r0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20000394 	.word	0x20000394

08002c24 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08a      	sub	sp, #40	; 0x28
 8002c28:	af04      	add	r7, sp, #16
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8002c30:	f7ff ffca 	bl	8002bc8 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c40:	9102      	str	r1, [sp, #8]
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	2301      	movs	r3, #1
 8002c4a:	21a0      	movs	r1, #160	; 0xa0
 8002c4c:	4807      	ldr	r0, [pc, #28]	; (8002c6c <eeprom_write+0x48>)
 8002c4e:	f009 feab 	bl	800c9a8 <HAL_I2C_Mem_Write>
 8002c52:	4603      	mov	r3, r0
 8002c54:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 8002c56:	f008 fa77 	bl	800b148 <HAL_GetTick>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4a04      	ldr	r2, [pc, #16]	; (8002c70 <eeprom_write+0x4c>)
 8002c5e:	6013      	str	r3, [r2, #0]

    return rc;
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000394 	.word	0x20000394
 8002c70:	2000024c 	.word	0x2000024c

08002c74 <EEPROM_RelayStateUpdate>:
//
// Function to Read, Update and Restore from EEPROM memory last state of Relay and Lights after lack of energy
//
// Function to update in EEPROM current state of all Relay
void EEPROM_RelayStateUpdate(uint8_t RelayNumber, uint8_t NewState)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	460a      	mov	r2, r1
 8002c7e:	71fb      	strb	r3, [r7, #7]
 8002c80:	4613      	mov	r3, r2
 8002c82:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002c84:	79bb      	ldrb	r3, [r7, #6]
 8002c86:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_write(EEPROM_ADR_RELAY_1_STATE, &State, sizeof(State));
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d107      	bne.n	8002c9e <EEPROM_RelayStateUpdate+0x2a>
 8002c8e:	f107 030f 	add.w	r3, r7, #15
 8002c92:	2201      	movs	r2, #1
 8002c94:	4619      	mov	r1, r3
 8002c96:	202e      	movs	r0, #46	; 0x2e
 8002c98:	f7ff ffc4 	bl	8002c24 <eeprom_write>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
}
 8002c9c:	e01f      	b.n	8002cde <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d107      	bne.n	8002cb4 <EEPROM_RelayStateUpdate+0x40>
 8002ca4:	f107 030f 	add.w	r3, r7, #15
 8002ca8:	2201      	movs	r2, #1
 8002caa:	4619      	mov	r1, r3
 8002cac:	202f      	movs	r0, #47	; 0x2f
 8002cae:	f7ff ffb9 	bl	8002c24 <eeprom_write>
}
 8002cb2:	e014      	b.n	8002cde <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d107      	bne.n	8002cca <EEPROM_RelayStateUpdate+0x56>
 8002cba:	f107 030f 	add.w	r3, r7, #15
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	2030      	movs	r0, #48	; 0x30
 8002cc4:	f7ff ffae 	bl	8002c24 <eeprom_write>
}
 8002cc8:	e009      	b.n	8002cde <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d106      	bne.n	8002cde <EEPROM_RelayStateUpdate+0x6a>
 8002cd0:	f107 030f 	add.w	r3, r7, #15
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	2031      	movs	r0, #49	; 0x31
 8002cda:	f7ff ffa3 	bl	8002c24 <eeprom_write>
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <EEPROM_LightStateUpdate>:

//
// Function to update in EEPROM current state of all Lights
void EEPROM_LightStateUpdate(uint8_t LightNumber, uint8_t NewState)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	460a      	mov	r2, r1
 8002cf0:	71fb      	strb	r3, [r7, #7]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002cf6:	79bb      	ldrb	r3, [r7, #6]
 8002cf8:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_write(EEPROM_ADR_LIGHT_1_STATE, &State, sizeof(State));
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d107      	bne.n	8002d10 <EEPROM_LightStateUpdate+0x2a>
 8002d00:	f107 030f 	add.w	r3, r7, #15
 8002d04:	2201      	movs	r2, #1
 8002d06:	4619      	mov	r1, r3
 8002d08:	2033      	movs	r0, #51	; 0x33
 8002d0a:	f7ff ff8b 	bl	8002c24 <eeprom_write>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
}
 8002d0e:	e01f      	b.n	8002d50 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d107      	bne.n	8002d26 <EEPROM_LightStateUpdate+0x40>
 8002d16:	f107 030f 	add.w	r3, r7, #15
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	2034      	movs	r0, #52	; 0x34
 8002d20:	f7ff ff80 	bl	8002c24 <eeprom_write>
}
 8002d24:	e014      	b.n	8002d50 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d107      	bne.n	8002d3c <EEPROM_LightStateUpdate+0x56>
 8002d2c:	f107 030f 	add.w	r3, r7, #15
 8002d30:	2201      	movs	r2, #1
 8002d32:	4619      	mov	r1, r3
 8002d34:	2035      	movs	r0, #53	; 0x35
 8002d36:	f7ff ff75 	bl	8002c24 <eeprom_write>
}
 8002d3a:	e009      	b.n	8002d50 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d106      	bne.n	8002d50 <EEPROM_LightStateUpdate+0x6a>
 8002d42:	f107 030f 	add.w	r3, r7, #15
 8002d46:	2201      	movs	r2, #1
 8002d48:	4619      	mov	r1, r3
 8002d4a:	2036      	movs	r0, #54	; 0x36
 8002d4c:	f7ff ff6a 	bl	8002c24 <eeprom_write>
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <EEPROM_RelayStateRead>:

//
// Function to read in EEPROM current state of all Relay
uint8_t EEPROM_RelayStateRead(uint8_t RelayNumber)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
	uint8_t RelayStan = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_read(EEPROM_ADR_RELAY_1_STATE, &RelayStan, sizeof(RelayStan));
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d107      	bne.n	8002d7c <EEPROM_RelayStateRead+0x24>
 8002d6c:	f107 030f 	add.w	r3, r7, #15
 8002d70:	2201      	movs	r2, #1
 8002d72:	4619      	mov	r1, r3
 8002d74:	202e      	movs	r0, #46	; 0x2e
 8002d76:	f7ff ff37 	bl	8002be8 <eeprom_read>
 8002d7a:	e01f      	b.n	8002dbc <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 2) eeprom_read(EEPROM_ADR_RELAY_2_STATE, &RelayStan, sizeof(RelayStan));
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d107      	bne.n	8002d92 <EEPROM_RelayStateRead+0x3a>
 8002d82:	f107 030f 	add.w	r3, r7, #15
 8002d86:	2201      	movs	r2, #1
 8002d88:	4619      	mov	r1, r3
 8002d8a:	202f      	movs	r0, #47	; 0x2f
 8002d8c:	f7ff ff2c 	bl	8002be8 <eeprom_read>
 8002d90:	e014      	b.n	8002dbc <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 3) eeprom_read(EEPROM_ADR_RELAY_3_STATE, &RelayStan, sizeof(RelayStan));
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d107      	bne.n	8002da8 <EEPROM_RelayStateRead+0x50>
 8002d98:	f107 030f 	add.w	r3, r7, #15
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	4619      	mov	r1, r3
 8002da0:	2030      	movs	r0, #48	; 0x30
 8002da2:	f7ff ff21 	bl	8002be8 <eeprom_read>
 8002da6:	e009      	b.n	8002dbc <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 4) eeprom_read(EEPROM_ADR_RELAY_4_STATE, &RelayStan, sizeof(RelayStan));
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d106      	bne.n	8002dbc <EEPROM_RelayStateRead+0x64>
 8002dae:	f107 030f 	add.w	r3, r7, #15
 8002db2:	2201      	movs	r2, #1
 8002db4:	4619      	mov	r1, r3
 8002db6:	2031      	movs	r0, #49	; 0x31
 8002db8:	f7ff ff16 	bl	8002be8 <eeprom_read>

	return RelayStan;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <EEPROM_LightStateRead>:

//
// Function to read in EEPROM current state of all Lights
uint8_t EEPROM_LightStateRead(uint8_t LightNumber)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	4603      	mov	r3, r0
 8002dce:	71fb      	strb	r3, [r7, #7]
	uint8_t AktualnyStan = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_read(EEPROM_ADR_LIGHT_1_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d107      	bne.n	8002dea <EEPROM_LightStateRead+0x24>
 8002dda:	f107 030f 	add.w	r3, r7, #15
 8002dde:	2201      	movs	r2, #1
 8002de0:	4619      	mov	r1, r3
 8002de2:	2033      	movs	r0, #51	; 0x33
 8002de4:	f7ff ff00 	bl	8002be8 <eeprom_read>
 8002de8:	e01f      	b.n	8002e2a <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 2) eeprom_read(EEPROM_ADR_LIGHT_2_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d107      	bne.n	8002e00 <EEPROM_LightStateRead+0x3a>
 8002df0:	f107 030f 	add.w	r3, r7, #15
 8002df4:	2201      	movs	r2, #1
 8002df6:	4619      	mov	r1, r3
 8002df8:	2034      	movs	r0, #52	; 0x34
 8002dfa:	f7ff fef5 	bl	8002be8 <eeprom_read>
 8002dfe:	e014      	b.n	8002e2a <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 3) eeprom_read(EEPROM_ADR_LIGHT_3_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d107      	bne.n	8002e16 <EEPROM_LightStateRead+0x50>
 8002e06:	f107 030f 	add.w	r3, r7, #15
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	2035      	movs	r0, #53	; 0x35
 8002e10:	f7ff feea 	bl	8002be8 <eeprom_read>
 8002e14:	e009      	b.n	8002e2a <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 4) eeprom_read(EEPROM_ADR_LIGHT_4_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d106      	bne.n	8002e2a <EEPROM_LightStateRead+0x64>
 8002e1c:	f107 030f 	add.w	r3, r7, #15
 8002e20:	2201      	movs	r2, #1
 8002e22:	4619      	mov	r1, r3
 8002e24:	2036      	movs	r0, #54	; 0x36
 8002e26:	f7ff fedf 	bl	8002be8 <eeprom_read>

	return AktualnyStan;
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <EEPROM_RelayStateRestore>:

//
// Function to restore from EEPROM memory last state of all Relay
void EEPROM_RelayStateRestore(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
	if(EEPROM_RelayStateRead(1)) SendComand(UCMD_RELAY_1_ON);
 8002e38:	2001      	movs	r0, #1
 8002e3a:	f7ff ff8d 	bl	8002d58 <EEPROM_RelayStateRead>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <EEPROM_RelayStateRestore+0x18>
 8002e44:	2005      	movs	r0, #5
 8002e46:	f006 ff3f 	bl	8009cc8 <SendComand>
 8002e4a:	e002      	b.n	8002e52 <EEPROM_RelayStateRestore+0x1e>
	else SendComand(UCMD_RELAY_1_OFF);
 8002e4c:	2006      	movs	r0, #6
 8002e4e:	f006 ff3b 	bl	8009cc8 <SendComand>
	if(EEPROM_RelayStateRead(2)) SendComand(UCMD_RELAY_2_ON);
 8002e52:	2002      	movs	r0, #2
 8002e54:	f7ff ff80 	bl	8002d58 <EEPROM_RelayStateRead>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <EEPROM_RelayStateRestore+0x32>
 8002e5e:	2007      	movs	r0, #7
 8002e60:	f006 ff32 	bl	8009cc8 <SendComand>
 8002e64:	e002      	b.n	8002e6c <EEPROM_RelayStateRestore+0x38>
	else SendComand(UCMD_RELAY_2_OFF);
 8002e66:	2008      	movs	r0, #8
 8002e68:	f006 ff2e 	bl	8009cc8 <SendComand>
	if(EEPROM_RelayStateRead(3)) SendComand(UCMD_RELAY_3_ON);
 8002e6c:	2003      	movs	r0, #3
 8002e6e:	f7ff ff73 	bl	8002d58 <EEPROM_RelayStateRead>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <EEPROM_RelayStateRestore+0x4c>
 8002e78:	2009      	movs	r0, #9
 8002e7a:	f006 ff25 	bl	8009cc8 <SendComand>
 8002e7e:	e002      	b.n	8002e86 <EEPROM_RelayStateRestore+0x52>
	else SendComand(UCMD_RELAY_3_OFF);
 8002e80:	200a      	movs	r0, #10
 8002e82:	f006 ff21 	bl	8009cc8 <SendComand>
	if(EEPROM_RelayStateRead(4)) SendComand(UCMD_RELAY_4_ON);
 8002e86:	2004      	movs	r0, #4
 8002e88:	f7ff ff66 	bl	8002d58 <EEPROM_RelayStateRead>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <EEPROM_RelayStateRestore+0x66>
 8002e92:	200b      	movs	r0, #11
 8002e94:	f006 ff18 	bl	8009cc8 <SendComand>
	else SendComand(UCMD_RELAY_4_OFF);

}
 8002e98:	e002      	b.n	8002ea0 <EEPROM_RelayStateRestore+0x6c>
	else SendComand(UCMD_RELAY_4_OFF);
 8002e9a:	200c      	movs	r0, #12
 8002e9c:	f006 ff14 	bl	8009cc8 <SendComand>
}
 8002ea0:	bf00      	nop
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <EEPROM_LightStateRestore>:

//
// Function to restore from EEPROM memory last state of all Lights
void EEPROM_LightStateRestore(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
	if(EEPROM_LightStateRead(1)) SendComand(UCMD_LIGHT_1_ON);
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	f7ff ff8c 	bl	8002dc6 <EEPROM_LightStateRead>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <EEPROM_LightStateRestore+0x18>
 8002eb4:	200d      	movs	r0, #13
 8002eb6:	f006 ff07 	bl	8009cc8 <SendComand>
 8002eba:	e002      	b.n	8002ec2 <EEPROM_LightStateRestore+0x1e>
	else SendComand(UCMD_LIGHT_1_OFF);
 8002ebc:	200e      	movs	r0, #14
 8002ebe:	f006 ff03 	bl	8009cc8 <SendComand>
	if(EEPROM_LightStateRead(2)) SendComand(UCMD_LIGHT_2_ON);
 8002ec2:	2002      	movs	r0, #2
 8002ec4:	f7ff ff7f 	bl	8002dc6 <EEPROM_LightStateRead>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <EEPROM_LightStateRestore+0x32>
 8002ece:	200f      	movs	r0, #15
 8002ed0:	f006 fefa 	bl	8009cc8 <SendComand>
 8002ed4:	e002      	b.n	8002edc <EEPROM_LightStateRestore+0x38>
	else SendComand(UCMD_LIGHT_2_OFF);
 8002ed6:	2010      	movs	r0, #16
 8002ed8:	f006 fef6 	bl	8009cc8 <SendComand>
	if(EEPROM_LightStateRead(3)) SendComand(UCMD_LIGHT_3_ON);
 8002edc:	2003      	movs	r0, #3
 8002ede:	f7ff ff72 	bl	8002dc6 <EEPROM_LightStateRead>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <EEPROM_LightStateRestore+0x4c>
 8002ee8:	2011      	movs	r0, #17
 8002eea:	f006 feed 	bl	8009cc8 <SendComand>
 8002eee:	e002      	b.n	8002ef6 <EEPROM_LightStateRestore+0x52>
	else SendComand(UCMD_LIGHT_3_OFF);
 8002ef0:	2012      	movs	r0, #18
 8002ef2:	f006 fee9 	bl	8009cc8 <SendComand>
	if(EEPROM_LightStateRead(4)) SendComand(UCMD_LIGHT_4_ON);
 8002ef6:	2004      	movs	r0, #4
 8002ef8:	f7ff ff65 	bl	8002dc6 <EEPROM_LightStateRead>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <EEPROM_LightStateRestore+0x66>
 8002f02:	2013      	movs	r0, #19
 8002f04:	f006 fee0 	bl	8009cc8 <SendComand>
	else SendComand(UCMD_LIGHT_4_OFF);
}
 8002f08:	e002      	b.n	8002f10 <EEPROM_LightStateRestore+0x6c>
	else SendComand(UCMD_LIGHT_4_OFF);
 8002f0a:	2014      	movs	r0, #20
 8002f0c:	f006 fedc 	bl	8009cc8 <SendComand>
}
 8002f10:	bf00      	nop
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <EEPROM_ScheduleDayInWeekRead>:
//
// Function to Read, Update and Restore from EEPROM memory day of week which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleDayInWeekRead(uint8_t NrOfSchedule, uint8_t * scheduleDayInWeekTab)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	6039      	str	r1, [r7, #0]
 8002f1e:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayInWeek = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	72bb      	strb	r3, [r7, #10]

	if(1 == NrOfSchedule)
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d107      	bne.n	8002f3a <EEPROM_ScheduleDayInWeekRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002f2a:	f107 030a 	add.w	r3, r7, #10
 8002f2e:	2201      	movs	r2, #1
 8002f30:	4619      	mov	r1, r3
 8002f32:	2005      	movs	r0, #5
 8002f34:	f7ff fe58 	bl	8002be8 <eeprom_read>
 8002f38:	e009      	b.n	8002f4e <EEPROM_ScheduleDayInWeekRead+0x3a>
	}
	else if(2 == NrOfSchedule)
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d106      	bne.n	8002f4e <EEPROM_ScheduleDayInWeekRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002f40:	f107 030a 	add.w	r3, r7, #10
 8002f44:	2201      	movs	r2, #1
 8002f46:	4619      	mov	r1, r3
 8002f48:	200c      	movs	r0, #12
 8002f4a:	f7ff fe4d 	bl	8002be8 <eeprom_read>
	}

	uint32_t a = 0x01;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002f52:	2300      	movs	r3, #0
 8002f54:	72fb      	strb	r3, [r7, #11]
 8002f56:	e016      	b.n	8002f86 <EEPROM_ScheduleDayInWeekRead+0x72>
	{
		if(TempDayInWeek & a) // check every bit in TempDayInWeek (EEPROM) if is 1
 8002f58:	7abb      	ldrb	r3, [r7, #10]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <EEPROM_ScheduleDayInWeekRead+0x5c>
		{
			scheduleDayInWeekTab[i] = 1;
 8002f64:	7afb      	ldrb	r3, [r7, #11]
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	4413      	add	r3, r2
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	e004      	b.n	8002f7a <EEPROM_ScheduleDayInWeekRead+0x66>
		}
		else // or is 0
		{
			scheduleDayInWeekTab[i] = 0;
 8002f70:	7afb      	ldrb	r3, [r7, #11]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	4413      	add	r3, r2
 8002f76:	2200      	movs	r2, #0
 8002f78:	701a      	strb	r2, [r3, #0]
		}
		a = a << 1; // Mask bit shift
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002f80:	7afb      	ldrb	r3, [r7, #11]
 8002f82:	3301      	adds	r3, #1
 8002f84:	72fb      	strb	r3, [r7, #11]
 8002f86:	7afb      	ldrb	r3, [r7, #11]
 8002f88:	2b06      	cmp	r3, #6
 8002f8a:	d9e5      	bls.n	8002f58 <EEPROM_ScheduleDayInWeekRead+0x44>
	}
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <EEPROM_ScheduleDayInWeekUpdate>:

//
// Function to update to EEPROM day which apply this schedule
void EEPROM_ScheduleDayInWeekUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleDayInWeekTab)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	6039      	str	r1, [r7, #0]
 8002fa0:	71fb      	strb	r3, [r7, #7]

	uint8_t TempDayInWeek = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	72bb      	strb	r3, [r7, #10]
	uint32_t a = 0x01;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	72fb      	strb	r3, [r7, #11]
 8002fae:	e011      	b.n	8002fd4 <EEPROM_ScheduleDayInWeekUpdate+0x3e>
	{
		if(scheduleDayInWeekTab[i])
 8002fb0:	7afb      	ldrb	r3, [r7, #11]
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <EEPROM_ScheduleDayInWeekUpdate+0x32>
		{
			TempDayInWeek = TempDayInWeek | a;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	7abb      	ldrb	r3, [r7, #10]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	72bb      	strb	r3, [r7, #10]
		}
		a = a << 1; // Mask bit shift
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002fce:	7afb      	ldrb	r3, [r7, #11]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	72fb      	strb	r3, [r7, #11]
 8002fd4:	7afb      	ldrb	r3, [r7, #11]
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d9ea      	bls.n	8002fb0 <EEPROM_ScheduleDayInWeekUpdate+0x1a>
	}

	if(1 == NrOfSchedule)
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d107      	bne.n	8002ff0 <EEPROM_ScheduleDayInWeekUpdate+0x5a>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002fe0:	f107 030a 	add.w	r3, r7, #10
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	2005      	movs	r0, #5
 8002fea:	f7ff fe1b 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
	}

}
 8002fee:	e009      	b.n	8003004 <EEPROM_ScheduleDayInWeekUpdate+0x6e>
	else if(2 == NrOfSchedule)
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d106      	bne.n	8003004 <EEPROM_ScheduleDayInWeekUpdate+0x6e>
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002ff6:	f107 030a 	add.w	r3, r7, #10
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	200c      	movs	r0, #12
 8003000:	f7ff fe10 	bl	8002c24 <eeprom_write>
}
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <EEPROM_ScheduleRelayAndSwitchTabRead>:
//
// Function to Read, Update and Restore from EEPROM memory Relays and Lights which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleRelayAndSwitchTabRead(uint8_t NrOfSchedule, uint8_t * scheduleRelayAndSwitchTab)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	6039      	str	r1, [r7, #0]
 8003016:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelays = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	727b      	strb	r3, [r7, #9]
	uint8_t TempLights = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	723b      	strb	r3, [r7, #8]

		if(1 == NrOfSchedule)
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d10e      	bne.n	8003044 <EEPROM_ScheduleRelayAndSwitchTabRead+0x38>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelays, sizeof(TempRelays));
 8003026:	f107 0309 	add.w	r3, r7, #9
 800302a:	2201      	movs	r2, #1
 800302c:	4619      	mov	r1, r3
 800302e:	2006      	movs	r0, #6
 8003030:	f7ff fdda 	bl	8002be8 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLights, sizeof(TempLights));
 8003034:	f107 0308 	add.w	r3, r7, #8
 8003038:	2201      	movs	r2, #1
 800303a:	4619      	mov	r1, r3
 800303c:	2007      	movs	r0, #7
 800303e:	f7ff fdd3 	bl	8002be8 <eeprom_read>
 8003042:	e010      	b.n	8003066 <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>

		}
		else if(2 == NrOfSchedule)
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d10d      	bne.n	8003066 <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelays, sizeof(TempRelays));
 800304a:	f107 0309 	add.w	r3, r7, #9
 800304e:	2201      	movs	r2, #1
 8003050:	4619      	mov	r1, r3
 8003052:	200d      	movs	r0, #13
 8003054:	f7ff fdc8 	bl	8002be8 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLights, sizeof(TempLights));
 8003058:	f107 0308 	add.w	r3, r7, #8
 800305c:	2201      	movs	r2, #1
 800305e:	4619      	mov	r1, r3
 8003060:	200e      	movs	r0, #14
 8003062:	f7ff fdc1 	bl	8002be8 <eeprom_read>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 =	 =	 =	 =
		uint32_t a = 0x01;
 8003066:	2301      	movs	r3, #1
 8003068:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 800306a:	2300      	movs	r3, #0
 800306c:	72fb      	strb	r3, [r7, #11]
 800306e:	e016      	b.n	800309e <EEPROM_ScheduleRelayAndSwitchTabRead+0x92>
		{
			if(TempRelays & a) // check every bit in TempRelays (EEPROM) if is 1
 8003070:	7a7b      	ldrb	r3, [r7, #9]
 8003072:	461a      	mov	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4013      	ands	r3, r2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <EEPROM_ScheduleRelayAndSwitchTabRead+0x7c>
			{
				scheduleRelayAndSwitchTab[i] = 1;
 800307c:	7afb      	ldrb	r3, [r7, #11]
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	4413      	add	r3, r2
 8003082:	2201      	movs	r2, #1
 8003084:	701a      	strb	r2, [r3, #0]
 8003086:	e004      	b.n	8003092 <EEPROM_ScheduleRelayAndSwitchTabRead+0x86>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[i] = 0;
 8003088:	7afb      	ldrb	r3, [r7, #11]
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	4413      	add	r3, r2
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 8003098:	7afb      	ldrb	r3, [r7, #11]
 800309a:	3301      	adds	r3, #1
 800309c:	72fb      	strb	r3, [r7, #11]
 800309e:	7afb      	ldrb	r3, [r7, #11]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d9e5      	bls.n	8003070 <EEPROM_ScheduleRelayAndSwitchTabRead+0x64>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 				  =	  =	  =	  =	 =
		a = 0x01; // reseting Mask to check from first bit in TempLights
 80030a4:	2301      	movs	r3, #1
 80030a6:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 80030a8:	2304      	movs	r3, #4
 80030aa:	72bb      	strb	r3, [r7, #10]
 80030ac:	e016      	b.n	80030dc <EEPROM_ScheduleRelayAndSwitchTabRead+0xd0>
		{
			if(TempLights & a) // check every bit in TempRelays (EEPROM) if is 1
 80030ae:	7a3b      	ldrb	r3, [r7, #8]
 80030b0:	461a      	mov	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <EEPROM_ScheduleRelayAndSwitchTabRead+0xba>
			{
				scheduleRelayAndSwitchTab[j] = 1;
 80030ba:	7abb      	ldrb	r3, [r7, #10]
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	4413      	add	r3, r2
 80030c0:	2201      	movs	r2, #1
 80030c2:	701a      	strb	r2, [r3, #0]
 80030c4:	e004      	b.n	80030d0 <EEPROM_ScheduleRelayAndSwitchTabRead+0xc4>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[j] = 0;
 80030c6:	7abb      	ldrb	r3, [r7, #10]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	4413      	add	r3, r2
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 80030d6:	7abb      	ldrb	r3, [r7, #10]
 80030d8:	3301      	adds	r3, #1
 80030da:	72bb      	strb	r3, [r7, #10]
 80030dc:	7abb      	ldrb	r3, [r7, #10]
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d9e5      	bls.n	80030ae <EEPROM_ScheduleRelayAndSwitchTabRead+0xa2>
		}

}
 80030e2:	bf00      	nop
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <EEPROM_ScheduleRelayAndSwitchTabUpdate>:
//
// Function to update saved day which apply this schedule
//
// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
void EEPROM_ScheduleRelayAndSwitchTabUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleRelayAndSwitchTab)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	6039      	str	r1, [r7, #0]
 80030f6:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelay = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	727b      	strb	r3, [r7, #9]
	uint8_t TempLight = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	723b      	strb	r3, [r7, #8]
	uint32_t a = 0x01;
 8003100:	2301      	movs	r3, #1
 8003102:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8003104:	2300      	movs	r3, #0
 8003106:	72fb      	strb	r3, [r7, #11]
 8003108:	e011      	b.n	800312e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x42>
	{
		if(scheduleRelayAndSwitchTab[i])
 800310a:	7afb      	ldrb	r3, [r7, #11]
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	4413      	add	r3, r2
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x36>
		{
			TempRelay = TempRelay | a;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	7a7b      	ldrb	r3, [r7, #9]
 800311c:	4313      	orrs	r3, r2
 800311e:	b2db      	uxtb	r3, r3
 8003120:	727b      	strb	r3, [r7, #9]
		}
		a = a << 1; // Mask bit shift
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8003128:	7afb      	ldrb	r3, [r7, #11]
 800312a:	3301      	adds	r3, #1
 800312c:	72fb      	strb	r3, [r7, #11]
 800312e:	7afb      	ldrb	r3, [r7, #11]
 8003130:	2b03      	cmp	r3, #3
 8003132:	d9ea      	bls.n	800310a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x1e>
	}
	a = 0x01;  // reseting Mask to check from first bit in TempLights
 8003134:	2301      	movs	r3, #1
 8003136:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8003138:	2304      	movs	r3, #4
 800313a:	72bb      	strb	r3, [r7, #10]
 800313c:	e011      	b.n	8003162 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x76>
	{
		if(scheduleRelayAndSwitchTab[j])
 800313e:	7abb      	ldrb	r3, [r7, #10]
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	4413      	add	r3, r2
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x6a>
		{
			TempLight = TempLight | a;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	7a3b      	ldrb	r3, [r7, #8]
 8003150:	4313      	orrs	r3, r2
 8003152:	b2db      	uxtb	r3, r3
 8003154:	723b      	strb	r3, [r7, #8]
		}
		a = a << 1; // Mask bit shift
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 800315c:	7abb      	ldrb	r3, [r7, #10]
 800315e:	3301      	adds	r3, #1
 8003160:	72bb      	strb	r3, [r7, #10]
 8003162:	7abb      	ldrb	r3, [r7, #10]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d9ea      	bls.n	800313e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x52>
	}

	if(1 == NrOfSchedule)
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d10e      	bne.n	800318c <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xa0>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelay, sizeof(TempRelay));
 800316e:	f107 0309 	add.w	r3, r7, #9
 8003172:	2201      	movs	r2, #1
 8003174:	4619      	mov	r1, r3
 8003176:	2006      	movs	r0, #6
 8003178:	f7ff fd54 	bl	8002c24 <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLight, sizeof(TempLight));
 800317c:	f107 0308 	add.w	r3, r7, #8
 8003180:	2201      	movs	r2, #1
 8003182:	4619      	mov	r1, r3
 8003184:	2007      	movs	r0, #7
 8003186:	f7ff fd4d 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
	}
}
 800318a:	e010      	b.n	80031ae <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
	else if(2 == NrOfSchedule)
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d10d      	bne.n	80031ae <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
 8003192:	f107 0309 	add.w	r3, r7, #9
 8003196:	2201      	movs	r2, #1
 8003198:	4619      	mov	r1, r3
 800319a:	200d      	movs	r0, #13
 800319c:	f7ff fd42 	bl	8002c24 <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
 80031a0:	f107 0308 	add.w	r3, r7, #8
 80031a4:	2201      	movs	r2, #1
 80031a6:	4619      	mov	r1, r3
 80031a8:	200e      	movs	r0, #14
 80031aa:	f7ff fd3b 	bl	8002c24 <eeprom_write>
}
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <EEPROM_ScheduleHourOnRead>:
//
// Function to Read and Update from EEPROM memory Hours and Minutes ON / OFF which schedule apply
//
// ON READ
void EEPROM_ScheduleHourOnRead(uint8_t NrOfSchedule, uint8_t * hourOn)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	4603      	mov	r3, r0
 80031be:	6039      	str	r1, [r7, #0]
 80031c0:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d107      	bne.n	80031dc <EEPROM_ScheduleHourOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_ON, &TempHour, sizeof(TempHour));
 80031cc:	f107 030f 	add.w	r3, r7, #15
 80031d0:	2201      	movs	r2, #1
 80031d2:	4619      	mov	r1, r3
 80031d4:	2008      	movs	r0, #8
 80031d6:	f7ff fd07 	bl	8002be8 <eeprom_read>
 80031da:	e009      	b.n	80031f0 <EEPROM_ScheduleHourOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d106      	bne.n	80031f0 <EEPROM_ScheduleHourOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_ON, &TempHour, sizeof(TempHour));
 80031e2:	f107 030f 	add.w	r3, r7, #15
 80031e6:	2201      	movs	r2, #1
 80031e8:	4619      	mov	r1, r3
 80031ea:	200f      	movs	r0, #15
 80031ec:	f7ff fcfc 	bl	8002be8 <eeprom_read>
	}

	*hourOn = TempHour;
 80031f0:	7bfa      	ldrb	r2, [r7, #15]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	701a      	strb	r2, [r3, #0]
}
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <EEPROM_ScheduleMinuteOnRead>:

void EEPROM_ScheduleMinuteOnRead(uint8_t NrOfSchedule, uint8_t * minuteOn)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	4603      	mov	r3, r0
 8003206:	6039      	str	r1, [r7, #0]
 8003208:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d107      	bne.n	8003224 <EEPROM_ScheduleMinuteOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8003214:	f107 030f 	add.w	r3, r7, #15
 8003218:	2201      	movs	r2, #1
 800321a:	4619      	mov	r1, r3
 800321c:	2009      	movs	r0, #9
 800321e:	f7ff fce3 	bl	8002be8 <eeprom_read>
 8003222:	e009      	b.n	8003238 <EEPROM_ScheduleMinuteOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d106      	bne.n	8003238 <EEPROM_ScheduleMinuteOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 800322a:	f107 030f 	add.w	r3, r7, #15
 800322e:	2201      	movs	r2, #1
 8003230:	4619      	mov	r1, r3
 8003232:	2010      	movs	r0, #16
 8003234:	f7ff fcd8 	bl	8002be8 <eeprom_read>
	}
	*minuteOn = TempMinute;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	701a      	strb	r2, [r3, #0]
}
 800323e:	bf00      	nop
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <EEPROM_ScheduleHourOffRead>:

//
// OFF READ
void EEPROM_ScheduleHourOffRead(uint8_t NrOfSchedule, uint8_t * hourOff)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	4603      	mov	r3, r0
 800324e:	6039      	str	r1, [r7, #0]
 8003250:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d107      	bne.n	800326c <EEPROM_ScheduleHourOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &TempHour, sizeof(TempHour));
 800325c:	f107 030f 	add.w	r3, r7, #15
 8003260:	2201      	movs	r2, #1
 8003262:	4619      	mov	r1, r3
 8003264:	200a      	movs	r0, #10
 8003266:	f7ff fcbf 	bl	8002be8 <eeprom_read>
 800326a:	e009      	b.n	8003280 <EEPROM_ScheduleHourOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d106      	bne.n	8003280 <EEPROM_ScheduleHourOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &TempHour, sizeof(TempHour));
 8003272:	f107 030f 	add.w	r3, r7, #15
 8003276:	2201      	movs	r2, #1
 8003278:	4619      	mov	r1, r3
 800327a:	2011      	movs	r0, #17
 800327c:	f7ff fcb4 	bl	8002be8 <eeprom_read>
	}

	*hourOff = TempHour;
 8003280:	7bfa      	ldrb	r2, [r7, #15]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	701a      	strb	r2, [r3, #0]

}
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <EEPROM_ScheduleMinuteOffRead>:
void EEPROM_ScheduleMinuteOffRead(uint8_t NrOfSchedule, uint8_t * minuteOff)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	6039      	str	r1, [r7, #0]
 8003298:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d107      	bne.n	80032b4 <EEPROM_ScheduleMinuteOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 80032a4:	f107 030f 	add.w	r3, r7, #15
 80032a8:	2201      	movs	r2, #1
 80032aa:	4619      	mov	r1, r3
 80032ac:	200b      	movs	r0, #11
 80032ae:	f7ff fc9b 	bl	8002be8 <eeprom_read>
 80032b2:	e009      	b.n	80032c8 <EEPROM_ScheduleMinuteOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d106      	bne.n	80032c8 <EEPROM_ScheduleMinuteOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 80032ba:	f107 030f 	add.w	r3, r7, #15
 80032be:	2201      	movs	r2, #1
 80032c0:	4619      	mov	r1, r3
 80032c2:	2012      	movs	r0, #18
 80032c4:	f7ff fc90 	bl	8002be8 <eeprom_read>
	}
	*minuteOff = TempMinute;
 80032c8:	7bfa      	ldrb	r2, [r7, #15]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	701a      	strb	r2, [r3, #0]
}
 80032ce:	bf00      	nop
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <EEPROM_ScheduleHourOnUpdate>:

//
// ON UPDATE IN EEPROM
void EEPROM_ScheduleHourOnUpdate(uint8_t NrOfSchedule, uint8_t hourOn)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	4603      	mov	r3, r0
 80032de:	460a      	mov	r2, r1
 80032e0:	71fb      	strb	r3, [r7, #7]
 80032e2:	4613      	mov	r3, r2
 80032e4:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOn;
 80032e6:	79bb      	ldrb	r3, [r7, #6]
 80032e8:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_ON, &NewHour, sizeof(NewHour));
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d107      	bne.n	8003300 <EEPROM_ScheduleHourOnUpdate+0x2a>
 80032f0:	f107 030f 	add.w	r3, r7, #15
 80032f4:	2201      	movs	r2, #1
 80032f6:	4619      	mov	r1, r3
 80032f8:	2008      	movs	r0, #8
 80032fa:	f7ff fc93 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
}
 80032fe:	e009      	b.n	8003314 <EEPROM_ScheduleHourOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d106      	bne.n	8003314 <EEPROM_ScheduleHourOnUpdate+0x3e>
 8003306:	f107 030f 	add.w	r3, r7, #15
 800330a:	2201      	movs	r2, #1
 800330c:	4619      	mov	r1, r3
 800330e:	200f      	movs	r0, #15
 8003310:	f7ff fc88 	bl	8002c24 <eeprom_write>
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <EEPROM_ScheduleMinuteOnUpdate>:
void EEPROM_ScheduleMinuteOnUpdate(uint8_t NrOfSchedule, uint8_t minuteOn)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	460a      	mov	r2, r1
 8003326:	71fb      	strb	r3, [r7, #7]
 8003328:	4613      	mov	r3, r2
 800332a:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOn;
 800332c:	79bb      	ldrb	r3, [r7, #6]
 800332e:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d107      	bne.n	8003346 <EEPROM_ScheduleMinuteOnUpdate+0x2a>
 8003336:	f107 030f 	add.w	r3, r7, #15
 800333a:	2201      	movs	r2, #1
 800333c:	4619      	mov	r1, r3
 800333e:	2009      	movs	r0, #9
 8003340:	f7ff fc70 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
}
 8003344:	e009      	b.n	800335a <EEPROM_ScheduleMinuteOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d106      	bne.n	800335a <EEPROM_ScheduleMinuteOnUpdate+0x3e>
 800334c:	f107 030f 	add.w	r3, r7, #15
 8003350:	2201      	movs	r2, #1
 8003352:	4619      	mov	r1, r3
 8003354:	2010      	movs	r0, #16
 8003356:	f7ff fc65 	bl	8002c24 <eeprom_write>
}
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <EEPROM_ScheduleHourOffUpdate>:

//
// OFF UPDATE IN EEPROM
void EEPROM_ScheduleHourOffUpdate(uint8_t NrOfSchedule, uint8_t hourOff)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	4603      	mov	r3, r0
 800336a:	460a      	mov	r2, r1
 800336c:	71fb      	strb	r3, [r7, #7]
 800336e:	4613      	mov	r3, r2
 8003370:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOff;
 8003372:	79bb      	ldrb	r3, [r7, #6]
 8003374:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &NewHour, sizeof(NewHour));
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d107      	bne.n	800338c <EEPROM_ScheduleHourOffUpdate+0x2a>
 800337c:	f107 030f 	add.w	r3, r7, #15
 8003380:	2201      	movs	r2, #1
 8003382:	4619      	mov	r1, r3
 8003384:	200a      	movs	r0, #10
 8003386:	f7ff fc4d 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));

}
 800338a:	e009      	b.n	80033a0 <EEPROM_ScheduleHourOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d106      	bne.n	80033a0 <EEPROM_ScheduleHourOffUpdate+0x3e>
 8003392:	f107 030f 	add.w	r3, r7, #15
 8003396:	2201      	movs	r2, #1
 8003398:	4619      	mov	r1, r3
 800339a:	2011      	movs	r0, #17
 800339c:	f7ff fc42 	bl	8002c24 <eeprom_write>
}
 80033a0:	bf00      	nop
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <EEPROM_ScheduleMinuteOffUpdate>:
void EEPROM_ScheduleMinuteOffUpdate(uint8_t NrOfSchedule, uint8_t minuteOff)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	460a      	mov	r2, r1
 80033b2:	71fb      	strb	r3, [r7, #7]
 80033b4:	4613      	mov	r3, r2
 80033b6:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOff;
 80033b8:	79bb      	ldrb	r3, [r7, #6]
 80033ba:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d107      	bne.n	80033d2 <EEPROM_ScheduleMinuteOffUpdate+0x2a>
 80033c2:	f107 030f 	add.w	r3, r7, #15
 80033c6:	2201      	movs	r2, #1
 80033c8:	4619      	mov	r1, r3
 80033ca:	200b      	movs	r0, #11
 80033cc:	f7ff fc2a 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));

}
 80033d0:	e009      	b.n	80033e6 <EEPROM_ScheduleMinuteOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d106      	bne.n	80033e6 <EEPROM_ScheduleMinuteOffUpdate+0x3e>
 80033d8:	f107 030f 	add.w	r3, r7, #15
 80033dc:	2201      	movs	r2, #1
 80033de:	4619      	mov	r1, r3
 80033e0:	2012      	movs	r0, #18
 80033e2:	f7ff fc1f 	bl	8002c24 <eeprom_write>
}
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <EEPROM_ActivitiesTimeRead>:

//
// ACTIVITIES DURATION TIME READ
uint32_t EEPROM_ActivitiesTimeRead(uint8_t NrOfActivities)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	4603      	mov	r3, r0
 80033f6:	71fb      	strb	r3, [r7, #7]
	uint8_t ActivitiesNumber = NrOfActivities;
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	73fb      	strb	r3, [r7, #15]
	uint32_t ActivitiesDurationX10Seconds = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60bb      	str	r3, [r7, #8]
	if(1 == ActivitiesNumber) // if feeding
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d106      	bne.n	8003414 <EEPROM_ActivitiesTimeRead+0x26>
	{
		eeprom_read(EEPROM_ADR_ACTIVITIES_IN_10S, &ActivitiesDurationX10Seconds, sizeof(ActivitiesDurationX10Seconds));
 8003406:	f107 0308 	add.w	r3, r7, #8
 800340a:	2204      	movs	r2, #4
 800340c:	4619      	mov	r1, r3
 800340e:	2038      	movs	r0, #56	; 0x38
 8003410:	f7ff fbea 	bl	8002be8 <eeprom_read>
	}
	return ActivitiesDurationX10Seconds * 10;
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <EEPROM_ActivitiesTimeUpdate>:


//
// ACTIVITIES DURATION TIME UPDATE
void EEPROM_ActivitiesTimeUpdate(uint8_t NrOfActivities, uint32_t TimeInSeconds)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	6039      	str	r1, [r7, #0]
 8003432:	71fb      	strb	r3, [r7, #7]
	uint8_t ActivitiesNumber = NrOfActivities;
 8003434:	79fb      	ldrb	r3, [r7, #7]
 8003436:	73fb      	strb	r3, [r7, #15]
	uint32_t Time = (TimeInSeconds/10);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	4a09      	ldr	r2, [pc, #36]	; (8003460 <EEPROM_ActivitiesTimeUpdate+0x38>)
 800343c:	fba2 2303 	umull	r2, r3, r2, r3
 8003440:	08db      	lsrs	r3, r3, #3
 8003442:	60bb      	str	r3, [r7, #8]

	if( 1 == ActivitiesNumber) // if feeding
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d106      	bne.n	8003458 <EEPROM_ActivitiesTimeUpdate+0x30>
	{
		eeprom_write(EEPROM_ADR_ACTIVITIES_IN_10S, &Time, sizeof(Time));
 800344a:	f107 0308 	add.w	r3, r7, #8
 800344e:	2204      	movs	r2, #4
 8003450:	4619      	mov	r1, r3
 8003452:	2038      	movs	r0, #56	; 0x38
 8003454:	f7ff fbe6 	bl	8002c24 <eeprom_write>
	}

}
 8003458:	bf00      	nop
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	cccccccd 	.word	0xcccccccd

08003464 <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800346a:	f24c 6018 	movw	r0, #50712	; 0xc618
 800346e:	f7fe fe81 	bl	8002174 <ILI9341_ClearDisplay>
	  //
	  // Draw Image with LOGO
	  ILI9341_DrawImage(30, 50, logo, 240, 140);
 8003472:	238c      	movs	r3, #140	; 0x8c
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	23f0      	movs	r3, #240	; 0xf0
 8003478:	4aae      	ldr	r2, [pc, #696]	; (8003734 <system_init+0x2d0>)
 800347a:	2132      	movs	r1, #50	; 0x32
 800347c:	201e      	movs	r0, #30
 800347e:	f7fe fe4e 	bl	800211e <ILI9341_DrawImage>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003482:	48ad      	ldr	r0, [pc, #692]	; (8003738 <system_init+0x2d4>)
 8003484:	f7fe fa72 	bl	800196c <EF_SetFont>
	  sprintf((char*)Msg, "Inicjalizacja...");
 8003488:	49ac      	ldr	r1, [pc, #688]	; (800373c <system_init+0x2d8>)
 800348a:	48ad      	ldr	r0, [pc, #692]	; (8003740 <system_init+0x2dc>)
 800348c:	f00f fbec 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, 60, 10, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003490:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	2300      	movs	r3, #0
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	2300      	movs	r3, #0
 800349c:	220a      	movs	r2, #10
 800349e:	213c      	movs	r1, #60	; 0x3c
 80034a0:	48a7      	ldr	r0, [pc, #668]	; (8003740 <system_init+0x2dc>)
 80034a2:	f7fe fc7d 	bl	8001da0 <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  LastTime = HAL_GetTick();
 80034a6:	f007 fe4f 	bl	800b148 <HAL_GetTick>
 80034aa:	4603      	mov	r3, r0
 80034ac:	4aa5      	ldr	r2, [pc, #660]	; (8003744 <system_init+0x2e0>)
 80034ae:	6013      	str	r3, [r2, #0]
	  GFX_DrawRoundRectangle(60, 190, 20, 20, 5, ILI9341_RED);
 80034b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	2305      	movs	r3, #5
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	2314      	movs	r3, #20
 80034bc:	2214      	movs	r2, #20
 80034be:	21be      	movs	r1, #190	; 0xbe
 80034c0:	203c      	movs	r0, #60	; 0x3c
 80034c2:	f7fe f985 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 190, 20, 20, 5, ILI9341_RED);
 80034c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034ca:	9301      	str	r3, [sp, #4]
 80034cc:	2305      	movs	r3, #5
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	2314      	movs	r3, #20
 80034d2:	2214      	movs	r2, #20
 80034d4:	21be      	movs	r1, #190	; 0xbe
 80034d6:	205a      	movs	r0, #90	; 0x5a
 80034d8:	f7fe f97a 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 190, 20, 20, 5, ILI9341_RED);
 80034dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034e0:	9301      	str	r3, [sp, #4]
 80034e2:	2305      	movs	r3, #5
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	2314      	movs	r3, #20
 80034e8:	2214      	movs	r2, #20
 80034ea:	21be      	movs	r1, #190	; 0xbe
 80034ec:	2078      	movs	r0, #120	; 0x78
 80034ee:	f7fe f96f 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 190, 20, 20, 5, ILI9341_RED);
 80034f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034f6:	9301      	str	r3, [sp, #4]
 80034f8:	2305      	movs	r3, #5
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	2314      	movs	r3, #20
 80034fe:	2214      	movs	r2, #20
 8003500:	21be      	movs	r1, #190	; 0xbe
 8003502:	2096      	movs	r0, #150	; 0x96
 8003504:	f7fe f964 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 190, 20, 20, 5, ILI9341_RED);
 8003508:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	2305      	movs	r3, #5
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	2314      	movs	r3, #20
 8003514:	2214      	movs	r2, #20
 8003516:	21be      	movs	r1, #190	; 0xbe
 8003518:	20b4      	movs	r0, #180	; 0xb4
 800351a:	f7fe f959 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 190, 20, 20, 5, ILI9341_RED);
 800351e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003522:	9301      	str	r3, [sp, #4]
 8003524:	2305      	movs	r3, #5
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	2314      	movs	r3, #20
 800352a:	2214      	movs	r2, #20
 800352c:	21be      	movs	r1, #190	; 0xbe
 800352e:	20d2      	movs	r0, #210	; 0xd2
 8003530:	f7fe f94e 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 190, 20, 20, 5, ILI9341_RED);
 8003534:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003538:	9301      	str	r3, [sp, #4]
 800353a:	2305      	movs	r3, #5
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	2314      	movs	r3, #20
 8003540:	2214      	movs	r2, #20
 8003542:	21be      	movs	r1, #190	; 0xbe
 8003544:	20f0      	movs	r0, #240	; 0xf0
 8003546:	f7fe f943 	bl	80017d0 <GFX_DrawRoundRectangle>
	  LastTime = HAL_GetTick();
 800354a:	f007 fdfd 	bl	800b148 <HAL_GetTick>
 800354e:	4603      	mov	r3, r0
 8003550:	4a7c      	ldr	r2, [pc, #496]	; (8003744 <system_init+0x2e0>)
 8003552:	6013      	str	r3, [r2, #0]
	  EF_SetFont(&arial_11ptFontInfo);
 8003554:	487c      	ldr	r0, [pc, #496]	; (8003748 <system_init+0x2e4>)
 8003556:	f7fe fa09 	bl	800196c <EF_SetFont>
	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800355a:	20c8      	movs	r0, #200	; 0xc8
 800355c:	f002 fade 	bl	8005b1c <initWait>
	  	  LastTime = HAL_GetTick();
 8003560:	f007 fdf2 	bl	800b148 <HAL_GetTick>
 8003564:	4603      	mov	r3, r0
 8003566:	4a77      	ldr	r2, [pc, #476]	; (8003744 <system_init+0x2e0>)
 8003568:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//First step of initialization
//
	  GFX_DrawFillRoundRectangle(60, 190, 20, 20, 5, ILI9341_GREEN);
 800356a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800356e:	9301      	str	r3, [sp, #4]
 8003570:	2305      	movs	r3, #5
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	2314      	movs	r3, #20
 8003576:	2214      	movs	r2, #20
 8003578:	21be      	movs	r1, #190	; 0xbe
 800357a:	203c      	movs	r0, #60	; 0x3c
 800357c:	f7fe f9a5 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)); // read number of leds
 8003580:	2201      	movs	r2, #1
 8003582:	4972      	ldr	r1, [pc, #456]	; (800374c <system_init+0x2e8>)
 8003584:	2001      	movs	r0, #1
 8003586:	f7ff fb2f 	bl	8002be8 <eeprom_read>
	  	  SendComand(UCMD_WS_NUMBER_LED); // Send number of LEDs
 800358a:	2025      	movs	r0, #37	; 0x25
 800358c:	f006 fb9c 	bl	8009cc8 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003590:	486f      	ldr	r0, [pc, #444]	; (8003750 <system_init+0x2ec>)
 8003592:	f007 faf9 	bl	800ab88 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o ledach...    ");
 8003596:	496f      	ldr	r1, [pc, #444]	; (8003754 <system_init+0x2f0>)
 8003598:	4869      	ldr	r0, [pc, #420]	; (8003740 <system_init+0x2dc>)
 800359a:	f00f fb65 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800359e:	f24c 6318 	movw	r3, #50712	; 0xc618
 80035a2:	9301      	str	r3, [sp, #4]
 80035a4:	2301      	movs	r3, #1
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	2300      	movs	r3, #0
 80035aa:	22dc      	movs	r2, #220	; 0xdc
 80035ac:	2114      	movs	r1, #20
 80035ae:	4864      	ldr	r0, [pc, #400]	; (8003740 <system_init+0x2dc>)
 80035b0:	f7fe fbf6 	bl	8001da0 <EF_PutString>
	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80035b4:	20c8      	movs	r0, #200	; 0xc8
 80035b6:	f002 fab1 	bl	8005b1c <initWait>
	  	  	  LastTime = HAL_GetTick();
 80035ba:	f007 fdc5 	bl	800b148 <HAL_GetTick>
 80035be:	4603      	mov	r3, r0
 80035c0:	4a60      	ldr	r2, [pc, #384]	; (8003744 <system_init+0x2e0>)
 80035c2:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Second step of initialization
//
	  GFX_DrawFillRoundRectangle(90, 190, 20, 20, 5, ILI9341_GREEN);
 80035c4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035c8:	9301      	str	r3, [sp, #4]
 80035ca:	2305      	movs	r3, #5
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	2314      	movs	r3, #20
 80035d0:	2214      	movs	r2, #20
 80035d2:	21be      	movs	r1, #190	; 0xbe
 80035d4:	205a      	movs	r0, #90	; 0x5a
 80035d6:	f7fe f978 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);	// ASK for current temperature inside
 80035da:	201b      	movs	r0, #27
 80035dc:	f006 fb74 	bl	8009cc8 <SendComand>
  	  	  EEPROM_RelayStateRestore(); // Restore state of relay to state before power off, from EEPROM memory
 80035e0:	f7ff fc28 	bl	8002e34 <EEPROM_RelayStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80035e4:	485a      	ldr	r0, [pc, #360]	; (8003750 <system_init+0x2ec>)
 80035e6:	f007 facf 	bl	800ab88 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o przekaźnikach...  ");
 80035ea:	495b      	ldr	r1, [pc, #364]	; (8003758 <system_init+0x2f4>)
 80035ec:	4854      	ldr	r0, [pc, #336]	; (8003740 <system_init+0x2dc>)
 80035ee:	f00f fb3b 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80035f2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80035f6:	9301      	str	r3, [sp, #4]
 80035f8:	2301      	movs	r3, #1
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	2300      	movs	r3, #0
 80035fe:	22dc      	movs	r2, #220	; 0xdc
 8003600:	2114      	movs	r1, #20
 8003602:	484f      	ldr	r0, [pc, #316]	; (8003740 <system_init+0x2dc>)
 8003604:	f7fe fbcc 	bl	8001da0 <EF_PutString>
  	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003608:	20c8      	movs	r0, #200	; 0xc8
 800360a:	f002 fa87 	bl	8005b1c <initWait>
  	  	  	  LastTime = HAL_GetTick();
 800360e:	f007 fd9b 	bl	800b148 <HAL_GetTick>
 8003612:	4603      	mov	r3, r0
 8003614:	4a4b      	ldr	r2, [pc, #300]	; (8003744 <system_init+0x2e0>)
 8003616:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Third step of initialization
//
	  GFX_DrawFillRoundRectangle(120, 190, 20, 20, 5, ILI9341_GREEN);
 8003618:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	2305      	movs	r3, #5
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	2314      	movs	r3, #20
 8003624:	2214      	movs	r2, #20
 8003626:	21be      	movs	r1, #190	; 0xbe
 8003628:	2078      	movs	r0, #120	; 0x78
 800362a:	f7fe f94e 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 800362e:	2004      	movs	r0, #4
 8003630:	f006 fb4a 	bl	8009cc8 <SendComand>
	  	  updateAllSchedulesInfo(1); // Read all info about schedule 1
 8003634:	2001      	movs	r0, #1
 8003636:	f004 fdbd 	bl	80081b4 <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800363a:	20c8      	movs	r0, #200	; 0xc8
 800363c:	f002 fa6e 	bl	8005b1c <initWait>
			  LastTime = HAL_GetTick();
 8003640:	f007 fd82 	bl	800b148 <HAL_GetTick>
 8003644:	4603      	mov	r3, r0
 8003646:	4a3f      	ldr	r2, [pc, #252]	; (8003744 <system_init+0x2e0>)
 8003648:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fourth step of initialization
//
	  GFX_DrawFillRoundRectangle(150, 190, 20, 20, 5, ILI9341_GREEN);
 800364a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800364e:	9301      	str	r3, [sp, #4]
 8003650:	2305      	movs	r3, #5
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	2314      	movs	r3, #20
 8003656:	2214      	movs	r2, #20
 8003658:	21be      	movs	r1, #190	; 0xbe
 800365a:	2096      	movs	r0, #150	; 0x96
 800365c:	f7fe f935 	bl	80018ca <GFX_DrawFillRoundRectangle>
  	  	  EEPROM_LightStateRestore(); // Restore state of lights to state before power off, from EEPROM memory
 8003660:	f7ff fc20 	bl	8002ea4 <EEPROM_LightStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003664:	483a      	ldr	r0, [pc, #232]	; (8003750 <system_init+0x2ec>)
 8003666:	f007 fa8f 	bl	800ab88 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o światlach...    ");
 800366a:	493c      	ldr	r1, [pc, #240]	; (800375c <system_init+0x2f8>)
 800366c:	4834      	ldr	r0, [pc, #208]	; (8003740 <system_init+0x2dc>)
 800366e:	f00f fafb 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003672:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003676:	9301      	str	r3, [sp, #4]
 8003678:	2301      	movs	r3, #1
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	2300      	movs	r3, #0
 800367e:	22dc      	movs	r2, #220	; 0xdc
 8003680:	2114      	movs	r1, #20
 8003682:	482f      	ldr	r0, [pc, #188]	; (8003740 <system_init+0x2dc>)
 8003684:	f7fe fb8c 	bl	8001da0 <EF_PutString>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003688:	20c8      	movs	r0, #200	; 0xc8
 800368a:	f002 fa47 	bl	8005b1c <initWait>
			  LastTime = HAL_GetTick();
 800368e:	f007 fd5b 	bl	800b148 <HAL_GetTick>
 8003692:	4603      	mov	r3, r0
 8003694:	4a2b      	ldr	r2, [pc, #172]	; (8003744 <system_init+0x2e0>)
 8003696:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(180, 190, 20, 20, 5, ILI9341_GREEN);
 8003698:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	2305      	movs	r3, #5
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	2314      	movs	r3, #20
 80036a4:	2214      	movs	r2, #20
 80036a6:	21be      	movs	r1, #190	; 0xbe
 80036a8:	20b4      	movs	r0, #180	; 0xb4
 80036aa:	f7fe f90e 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  	SendComand(UCMD_TEMP_1);	// ASK for current temperature outside
 80036ae:	2003      	movs	r0, #3
 80036b0:	f006 fb0a 	bl	8009cc8 <SendComand>
	  	  	updateAllSchedulesInfo(2); // Read all info about schedule 2
 80036b4:	2002      	movs	r0, #2
 80036b6:	f004 fd7d 	bl	80081b4 <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80036ba:	20c8      	movs	r0, #200	; 0xc8
 80036bc:	f002 fa2e 	bl	8005b1c <initWait>
			  LastTime = HAL_GetTick();
 80036c0:	f007 fd42 	bl	800b148 <HAL_GetTick>
 80036c4:	4603      	mov	r3, r0
 80036c6:	4a1f      	ldr	r2, [pc, #124]	; (8003744 <system_init+0x2e0>)
 80036c8:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Sixth step of initialization
//
	  GFX_DrawFillRoundRectangle(210, 190, 20, 20, 5, ILI9341_GREEN);
 80036ca:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	2305      	movs	r3, #5
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	2314      	movs	r3, #20
 80036d6:	2214      	movs	r2, #20
 80036d8:	21be      	movs	r1, #190	; 0xbe
 80036da:	20d2      	movs	r0, #210	; 0xd2
 80036dc:	f7fe f8f5 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 80036e0:	2015      	movs	r0, #21
 80036e2:	f006 faf1 	bl	8009cc8 <SendComand>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80036e6:	20c8      	movs	r0, #200	; 0xc8
 80036e8:	f002 fa18 	bl	8005b1c <initWait>
			  LastTime = HAL_GetTick();
 80036ec:	f007 fd2c 	bl	800b148 <HAL_GetTick>
 80036f0:	4603      	mov	r3, r0
 80036f2:	4a14      	ldr	r2, [pc, #80]	; (8003744 <system_init+0x2e0>)
 80036f4:	6013      	str	r3, [r2, #0]
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(240, 190, 20, 20, 5, ILI9341_GREEN);
 80036f6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	2305      	movs	r3, #5
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	2314      	movs	r3, #20
 8003702:	2214      	movs	r2, #20
 8003704:	21be      	movs	r1, #190	; 0xbe
 8003706:	20f0      	movs	r0, #240	; 0xf0
 8003708:	f7fe f8df 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 800370c:	2016      	movs	r0, #22
 800370e:	f006 fadb 	bl	8009cc8 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003712:	480f      	ldr	r0, [pc, #60]	; (8003750 <system_init+0x2ec>)
 8003714:	f007 fa38 	bl	800ab88 <UARTDMA_TransmitEvent>
			  initWait(2*ONE_MODULE_INIT_TIME_IN_MS);
 8003718:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800371c:	f002 f9fe 	bl	8005b1c <initWait>
			  LastTime = HAL_GetTick();
 8003720:	f007 fd12 	bl	800b148 <HAL_GetTick>
 8003724:	4603      	mov	r3, r0
 8003726:	4a07      	ldr	r2, [pc, #28]	; (8003744 <system_init+0x2e0>)
 8003728:	6013      	str	r3, [r2, #0]

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 800372a:	2301      	movs	r3, #1
}
 800372c:	4618      	mov	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	08017404 	.word	0x08017404
 8003738:	0802a4cc 	.word	0x0802a4cc
 800373c:	080168f0 	.word	0x080168f0
 8003740:	200002cc 	.word	0x200002cc
 8003744:	20000254 	.word	0x20000254
 8003748:	08028554 	.word	0x08028554
 800374c:	20000034 	.word	0x20000034
 8003750:	200004fc 	.word	0x200004fc
 8003754:	08016904 	.word	0x08016904
 8003758:	08016920 	.word	0x08016920
 800375c:	08016940 	.word	0x08016940

08003760 <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08a      	sub	sp, #40	; 0x28
 8003764:	af02      	add	r7, sp, #8
 8003766:	ed87 0a05 	vstr	s0, [r7, #20]
 800376a:	edc7 0a04 	vstr	s1, [r7, #16]
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	460b      	mov	r3, r1
 8003772:	ed87 1a01 	vstr	s2, [r7, #4]
 8003776:	72fb      	strb	r3, [r7, #11]
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003778:	f24c 6018 	movw	r0, #50712	; 0xc618
 800377c:	f7fe fcfa 	bl	8002174 <ILI9341_ClearDisplay>
	  SendComand(UCMD_TEMP_1);
 8003780:	2003      	movs	r0, #3
 8003782:	f006 faa1 	bl	8009cc8 <SendComand>
	  SendComand(UCMD_PRES_1);
 8003786:	2004      	movs	r0, #4
 8003788:	f006 fa9e 	bl	8009cc8 <SendComand>
	  SendComand(UCMD_TEMP_2);
 800378c:	201b      	movs	r0, #27
 800378e:	f006 fa9b 	bl	8009cc8 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 8003792:	f7ff f97b 	bl	8002a8c <DS3231_GetHour>
 8003796:	4603      	mov	r3, r0
 8003798:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 800379a:	f7ff f983 	bl	8002aa4 <DS3231_GetMinute>
 800379e:	4603      	mov	r3, r0
 80037a0:	77bb      	strb	r3, [r7, #30]


	  EF_SetFont(&arialBlack_20ptFontInfo);
 80037a2:	4881      	ldr	r0, [pc, #516]	; (80039a8 <showCurrentParameters+0x248>)
 80037a4:	f7fe f8e2 	bl	800196c <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)Msg, "-=PARAMETRY=-");
 80037a8:	4980      	ldr	r1, [pc, #512]	; (80039ac <showCurrentParameters+0x24c>)
 80037aa:	4881      	ldr	r0, [pc, #516]	; (80039b0 <showCurrentParameters+0x250>)
 80037ac:	f00f fa5c 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80037b0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	2300      	movs	r3, #0
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80037be:	220a      	movs	r2, #10
 80037c0:	212f      	movs	r1, #47	; 0x2f
 80037c2:	487b      	ldr	r0, [pc, #492]	; (80039b0 <showCurrentParameters+0x250>)
 80037c4:	f7fe faec 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80037c8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	2329      	movs	r3, #41	; 0x29
 80037d0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80037d4:	2129      	movs	r1, #41	; 0x29
 80037d6:	2000      	movs	r0, #0
 80037d8:	f7fd fe18 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80037dc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	232b      	movs	r3, #43	; 0x2b
 80037e4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80037e8:	212b      	movs	r1, #43	; 0x2b
 80037ea:	2000      	movs	r0, #0
 80037ec:	f7fd fe0e 	bl	800140c <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 80037f0:	7ffb      	ldrb	r3, [r7, #31]
 80037f2:	2b09      	cmp	r3, #9
 80037f4:	d809      	bhi.n	800380a <showCurrentParameters+0xaa>
 80037f6:	7fbb      	ldrb	r3, [r7, #30]
 80037f8:	2b09      	cmp	r3, #9
 80037fa:	d806      	bhi.n	800380a <showCurrentParameters+0xaa>
 80037fc:	7ffa      	ldrb	r2, [r7, #31]
 80037fe:	7fbb      	ldrb	r3, [r7, #30]
 8003800:	496c      	ldr	r1, [pc, #432]	; (80039b4 <showCurrentParameters+0x254>)
 8003802:	486b      	ldr	r0, [pc, #428]	; (80039b0 <showCurrentParameters+0x250>)
 8003804:	f00f fa30 	bl	8012c68 <siprintf>
 8003808:	e019      	b.n	800383e <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 800380a:	7ffb      	ldrb	r3, [r7, #31]
 800380c:	2b09      	cmp	r3, #9
 800380e:	d806      	bhi.n	800381e <showCurrentParameters+0xbe>
 8003810:	7ffa      	ldrb	r2, [r7, #31]
 8003812:	7fbb      	ldrb	r3, [r7, #30]
 8003814:	4968      	ldr	r1, [pc, #416]	; (80039b8 <showCurrentParameters+0x258>)
 8003816:	4866      	ldr	r0, [pc, #408]	; (80039b0 <showCurrentParameters+0x250>)
 8003818:	f00f fa26 	bl	8012c68 <siprintf>
 800381c:	e00f      	b.n	800383e <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 800381e:	7fbb      	ldrb	r3, [r7, #30]
 8003820:	2b09      	cmp	r3, #9
 8003822:	d806      	bhi.n	8003832 <showCurrentParameters+0xd2>
 8003824:	7ffa      	ldrb	r2, [r7, #31]
 8003826:	7fbb      	ldrb	r3, [r7, #30]
 8003828:	4964      	ldr	r1, [pc, #400]	; (80039bc <showCurrentParameters+0x25c>)
 800382a:	4861      	ldr	r0, [pc, #388]	; (80039b0 <showCurrentParameters+0x250>)
 800382c:	f00f fa1c 	bl	8012c68 <siprintf>
 8003830:	e005      	b.n	800383e <showCurrentParameters+0xde>
	  else sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 8003832:	7ffa      	ldrb	r2, [r7, #31]
 8003834:	7fbb      	ldrb	r3, [r7, #30]
 8003836:	4962      	ldr	r1, [pc, #392]	; (80039c0 <showCurrentParameters+0x260>)
 8003838:	485d      	ldr	r0, [pc, #372]	; (80039b0 <showCurrentParameters+0x250>)
 800383a:	f00f fa15 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800383e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003842:	9301      	str	r3, [sp, #4]
 8003844:	2300      	movs	r3, #0
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	2300      	movs	r3, #0
 800384a:	2232      	movs	r2, #50	; 0x32
 800384c:	2114      	movs	r1, #20
 800384e:	4858      	ldr	r0, [pc, #352]	; (80039b0 <showCurrentParameters+0x250>)
 8003850:	f7fe faa6 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 8003854:	4b5b      	ldr	r3, [pc, #364]	; (80039c4 <showCurrentParameters+0x264>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f7fc fe8d 	bl	8000578 <__aeabi_f2d>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	4959      	ldr	r1, [pc, #356]	; (80039c8 <showCurrentParameters+0x268>)
 8003864:	4852      	ldr	r0, [pc, #328]	; (80039b0 <showCurrentParameters+0x250>)
 8003866:	f00f f9ff 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800386a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800386e:	9301      	str	r3, [sp, #4]
 8003870:	2301      	movs	r3, #1
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	2300      	movs	r3, #0
 8003876:	2250      	movs	r2, #80	; 0x50
 8003878:	2114      	movs	r1, #20
 800387a:	484d      	ldr	r0, [pc, #308]	; (80039b0 <showCurrentParameters+0x250>)
 800387c:	f7fe fa90 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 8003880:	4b52      	ldr	r3, [pc, #328]	; (80039cc <showCurrentParameters+0x26c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f7fc fe77 	bl	8000578 <__aeabi_f2d>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4950      	ldr	r1, [pc, #320]	; (80039d0 <showCurrentParameters+0x270>)
 8003890:	4847      	ldr	r0, [pc, #284]	; (80039b0 <showCurrentParameters+0x250>)
 8003892:	f00f f9e9 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003896:	f24c 6318 	movw	r3, #50712	; 0xc618
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	2300      	movs	r3, #0
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2300      	movs	r3, #0
 80038a2:	226e      	movs	r2, #110	; 0x6e
 80038a4:	2114      	movs	r1, #20
 80038a6:	4842      	ldr	r0, [pc, #264]	; (80039b0 <showCurrentParameters+0x250>)
 80038a8:	f7fe fa7a 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "Poz. wody: -%ldmm", CDist2water);
 80038ac:	4b49      	ldr	r3, [pc, #292]	; (80039d4 <showCurrentParameters+0x274>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	4949      	ldr	r1, [pc, #292]	; (80039d8 <showCurrentParameters+0x278>)
 80038b4:	483e      	ldr	r0, [pc, #248]	; (80039b0 <showCurrentParameters+0x250>)
 80038b6:	f00f f9d7 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80038ba:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	2300      	movs	r3, #0
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	2300      	movs	r3, #0
 80038c6:	228c      	movs	r2, #140	; 0x8c
 80038c8:	2114      	movs	r1, #20
 80038ca:	4839      	ldr	r0, [pc, #228]	; (80039b0 <showCurrentParameters+0x250>)
 80038cc:	f7fe fa68 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 80038d0:	4b42      	ldr	r3, [pc, #264]	; (80039dc <showCurrentParameters+0x27c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fc fe4f 	bl	8000578 <__aeabi_f2d>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	4940      	ldr	r1, [pc, #256]	; (80039e0 <showCurrentParameters+0x280>)
 80038e0:	4833      	ldr	r0, [pc, #204]	; (80039b0 <showCurrentParameters+0x250>)
 80038e2:	f00f f9c1 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80038e6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038ea:	9301      	str	r3, [sp, #4]
 80038ec:	2300      	movs	r3, #0
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	2300      	movs	r3, #0
 80038f2:	22aa      	movs	r2, #170	; 0xaa
 80038f4:	2114      	movs	r1, #20
 80038f6:	482e      	ldr	r0, [pc, #184]	; (80039b0 <showCurrentParameters+0x250>)
 80038f8:	f7fe fa52 	bl	8001da0 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 80038fc:	4839      	ldr	r0, [pc, #228]	; (80039e4 <showCurrentParameters+0x284>)
 80038fe:	f7fe f835 	bl	800196c <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003902:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003906:	9301      	str	r3, [sp, #4]
 8003908:	2305      	movs	r3, #5
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	2314      	movs	r3, #20
 800390e:	225f      	movs	r2, #95	; 0x5f
 8003910:	21d8      	movs	r1, #216	; 0xd8
 8003912:	20dc      	movs	r0, #220	; 0xdc
 8003914:	f7fd ffd9 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "CONTROL=>");
 8003918:	4933      	ldr	r1, [pc, #204]	; (80039e8 <showCurrentParameters+0x288>)
 800391a:	4825      	ldr	r0, [pc, #148]	; (80039b0 <showCurrentParameters+0x250>)
 800391c:	f00f f9a4 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003920:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003924:	9301      	str	r3, [sp, #4]
 8003926:	2300      	movs	r3, #0
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	2300      	movs	r3, #0
 800392c:	22da      	movs	r2, #218	; 0xda
 800392e:	21df      	movs	r1, #223	; 0xdf
 8003930:	481f      	ldr	r0, [pc, #124]	; (80039b0 <showCurrentParameters+0x250>)
 8003932:	f7fe fa35 	bl	8001da0 <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003936:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	2305      	movs	r3, #5
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	2314      	movs	r3, #20
 8003942:	2264      	movs	r2, #100	; 0x64
 8003944:	21d8      	movs	r1, #216	; 0xd8
 8003946:	200a      	movs	r0, #10
 8003948:	f7fd ffbf 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=LIGHTS");
 800394c:	4927      	ldr	r1, [pc, #156]	; (80039ec <showCurrentParameters+0x28c>)
 800394e:	4818      	ldr	r0, [pc, #96]	; (80039b0 <showCurrentParameters+0x250>)
 8003950:	f00f f98a 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003954:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003958:	9301      	str	r3, [sp, #4]
 800395a:	2300      	movs	r3, #0
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	2300      	movs	r3, #0
 8003960:	22da      	movs	r2, #218	; 0xda
 8003962:	2114      	movs	r1, #20
 8003964:	4812      	ldr	r0, [pc, #72]	; (80039b0 <showCurrentParameters+0x250>)
 8003966:	f7fe fa1b 	bl	8001da0 <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 800396a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800396e:	9301      	str	r3, [sp, #4]
 8003970:	2305      	movs	r3, #5
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	2314      	movs	r3, #20
 8003976:	225a      	movs	r2, #90	; 0x5a
 8003978:	21d8      	movs	r1, #216	; 0xd8
 800397a:	2078      	movs	r0, #120	; 0x78
 800397c:	f7fd ffa5 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">CLOCK<");
 8003980:	491b      	ldr	r1, [pc, #108]	; (80039f0 <showCurrentParameters+0x290>)
 8003982:	480b      	ldr	r0, [pc, #44]	; (80039b0 <showCurrentParameters+0x250>)
 8003984:	f00f f970 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003988:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800398c:	9301      	str	r3, [sp, #4]
 800398e:	2300      	movs	r3, #0
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	2300      	movs	r3, #0
 8003994:	22da      	movs	r2, #218	; 0xda
 8003996:	2184      	movs	r1, #132	; 0x84
 8003998:	4805      	ldr	r0, [pc, #20]	; (80039b0 <showCurrentParameters+0x250>)
 800399a:	f7fe fa01 	bl	8001da0 <EF_PutString>
}
 800399e:	bf00      	nop
 80039a0:	3720      	adds	r7, #32
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	0802a4cc 	.word	0x0802a4cc
 80039ac:	08016960 	.word	0x08016960
 80039b0:	200002cc 	.word	0x200002cc
 80039b4:	08016970 	.word	0x08016970
 80039b8:	08016980 	.word	0x08016980
 80039bc:	08016990 	.word	0x08016990
 80039c0:	080169a0 	.word	0x080169a0
 80039c4:	200002a4 	.word	0x200002a4
 80039c8:	080169b0 	.word	0x080169b0
 80039cc:	200002b0 	.word	0x200002b0
 80039d0:	080169c4 	.word	0x080169c4
 80039d4:	200002b4 	.word	0x200002b4
 80039d8:	080169d8 	.word	0x080169d8
 80039dc:	200002ac 	.word	0x200002ac
 80039e0:	080169ec 	.word	0x080169ec
 80039e4:	08028554 	.word	0x08028554
 80039e8:	08016a04 	.word	0x08016a04
 80039ec:	08016a10 	.word	0x08016a10
 80039f0:	08016a1c 	.word	0x08016a1c

080039f4 <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 80039fa:	2015      	movs	r0, #21
 80039fc:	f006 f964 	bl	8009cc8 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003a00:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003a04:	f7fe fbb6 	bl	8002174 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003a08:	485c      	ldr	r0, [pc, #368]	; (8003b7c <showControlPanel+0x188>)
 8003a0a:	f7fd ffaf 	bl	800196c <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 8003a0e:	495c      	ldr	r1, [pc, #368]	; (8003b80 <showControlPanel+0x18c>)
 8003a10:	485c      	ldr	r0, [pc, #368]	; (8003b84 <showControlPanel+0x190>)
 8003a12:	f00f f929 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a16:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a1a:	9301      	str	r3, [sp, #4]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	231f      	movs	r3, #31
 8003a22:	220a      	movs	r2, #10
 8003a24:	2123      	movs	r1, #35	; 0x23
 8003a26:	4857      	ldr	r0, [pc, #348]	; (8003b84 <showControlPanel+0x190>)
 8003a28:	f7fe f9ba 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003a2c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	2329      	movs	r3, #41	; 0x29
 8003a34:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a38:	2129      	movs	r1, #41	; 0x29
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	f7fd fce6 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003a40:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	232b      	movs	r3, #43	; 0x2b
 8003a48:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a4c:	212b      	movs	r1, #43	; 0x2b
 8003a4e:	2000      	movs	r0, #0
 8003a50:	f7fd fcdc 	bl	800140c <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 8003a54:	494c      	ldr	r1, [pc, #304]	; (8003b88 <showControlPanel+0x194>)
 8003a56:	484b      	ldr	r0, [pc, #300]	; (8003b84 <showControlPanel+0x190>)
 8003a58:	f00f f906 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a5c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	2300      	movs	r3, #0
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	2300      	movs	r3, #0
 8003a68:	223c      	movs	r2, #60	; 0x3c
 8003a6a:	2114      	movs	r1, #20
 8003a6c:	4845      	ldr	r0, [pc, #276]	; (8003b84 <showControlPanel+0x190>)
 8003a6e:	f7fe f997 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 8003a72:	4946      	ldr	r1, [pc, #280]	; (8003b8c <showControlPanel+0x198>)
 8003a74:	4843      	ldr	r0, [pc, #268]	; (8003b84 <showControlPanel+0x190>)
 8003a76:	f00f f8f7 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003a7a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a7e:	9301      	str	r3, [sp, #4]
 8003a80:	2301      	movs	r3, #1
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	2300      	movs	r3, #0
 8003a86:	225a      	movs	r2, #90	; 0x5a
 8003a88:	2114      	movs	r1, #20
 8003a8a:	483e      	ldr	r0, [pc, #248]	; (8003b84 <showControlPanel+0x190>)
 8003a8c:	f7fe f988 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 8003a90:	493f      	ldr	r1, [pc, #252]	; (8003b90 <showControlPanel+0x19c>)
 8003a92:	483c      	ldr	r0, [pc, #240]	; (8003b84 <showControlPanel+0x190>)
 8003a94:	f00f f8e8 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a98:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	2278      	movs	r2, #120	; 0x78
 8003aa6:	2114      	movs	r1, #20
 8003aa8:	4836      	ldr	r0, [pc, #216]	; (8003b84 <showControlPanel+0x190>)
 8003aaa:	f7fe f979 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 8003aae:	4939      	ldr	r1, [pc, #228]	; (8003b94 <showControlPanel+0x1a0>)
 8003ab0:	4834      	ldr	r0, [pc, #208]	; (8003b84 <showControlPanel+0x190>)
 8003ab2:	f00f f8d9 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003ab6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	2300      	movs	r3, #0
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	2296      	movs	r2, #150	; 0x96
 8003ac4:	2114      	movs	r1, #20
 8003ac6:	482f      	ldr	r0, [pc, #188]	; (8003b84 <showControlPanel+0x190>)
 8003ac8:	f7fe f96a 	bl	8001da0 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003acc:	4832      	ldr	r0, [pc, #200]	; (8003b98 <showControlPanel+0x1a4>)
 8003ace:	f7fd ff4d 	bl	800196c <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003ad2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ad6:	9301      	str	r3, [sp, #4]
 8003ad8:	2305      	movs	r3, #5
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	2314      	movs	r3, #20
 8003ade:	225f      	movs	r2, #95	; 0x5f
 8003ae0:	21d8      	movs	r1, #216	; 0xd8
 8003ae2:	20dc      	movs	r0, #220	; 0xdc
 8003ae4:	f7fd fef1 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "LIGHTS=>");
 8003ae8:	492c      	ldr	r1, [pc, #176]	; (8003b9c <showControlPanel+0x1a8>)
 8003aea:	4826      	ldr	r0, [pc, #152]	; (8003b84 <showControlPanel+0x190>)
 8003aec:	f00f f8bc 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003af0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003af4:	9301      	str	r3, [sp, #4]
 8003af6:	2300      	movs	r3, #0
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	2300      	movs	r3, #0
 8003afc:	22da      	movs	r2, #218	; 0xda
 8003afe:	21df      	movs	r1, #223	; 0xdf
 8003b00:	4820      	ldr	r0, [pc, #128]	; (8003b84 <showControlPanel+0x190>)
 8003b02:	f7fe f94d 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003b06:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	2305      	movs	r3, #5
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	2314      	movs	r3, #20
 8003b12:	2264      	movs	r2, #100	; 0x64
 8003b14:	21d8      	movs	r1, #216	; 0xd8
 8003b16:	200a      	movs	r0, #10
 8003b18:	f7fd fed7 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=PARAM");
 8003b1c:	4920      	ldr	r1, [pc, #128]	; (8003ba0 <showControlPanel+0x1ac>)
 8003b1e:	4819      	ldr	r0, [pc, #100]	; (8003b84 <showControlPanel+0x190>)
 8003b20:	f00f f8a2 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003b24:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b28:	9301      	str	r3, [sp, #4]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	22da      	movs	r2, #218	; 0xda
 8003b32:	2114      	movs	r1, #20
 8003b34:	4813      	ldr	r0, [pc, #76]	; (8003b84 <showControlPanel+0x190>)
 8003b36:	f7fe f933 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003b3a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	2305      	movs	r3, #5
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	2314      	movs	r3, #20
 8003b46:	225a      	movs	r2, #90	; 0x5a
 8003b48:	21d8      	movs	r1, #216	; 0xd8
 8003b4a:	2078      	movs	r0, #120	; 0x78
 8003b4c:	f7fd febd 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "ACTIVITIES");
 8003b50:	4914      	ldr	r1, [pc, #80]	; (8003ba4 <showControlPanel+0x1b0>)
 8003b52:	480c      	ldr	r0, [pc, #48]	; (8003b84 <showControlPanel+0x190>)
 8003b54:	f00f f888 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003b58:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b5c:	9301      	str	r3, [sp, #4]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2300      	movs	r3, #0
 8003b64:	22da      	movs	r2, #218	; 0xda
 8003b66:	217e      	movs	r1, #126	; 0x7e
 8003b68:	4806      	ldr	r0, [pc, #24]	; (8003b84 <showControlPanel+0x190>)
 8003b6a:	f7fe f919 	bl	8001da0 <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003b6e:	4803      	ldr	r0, [pc, #12]	; (8003b7c <showControlPanel+0x188>)
 8003b70:	f7fd fefc 	bl	800196c <EF_SetFont>


}
 8003b74:	bf00      	nop
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	0802a4cc 	.word	0x0802a4cc
 8003b80:	08016a24 	.word	0x08016a24
 8003b84:	200002cc 	.word	0x200002cc
 8003b88:	08016a38 	.word	0x08016a38
 8003b8c:	08016a4c 	.word	0x08016a4c
 8003b90:	08016a60 	.word	0x08016a60
 8003b94:	08016a74 	.word	0x08016a74
 8003b98:	08028554 	.word	0x08028554
 8003b9c:	08016a88 	.word	0x08016a88
 8003ba0:	08016a94 	.word	0x08016a94
 8003ba4:	08016a9c 	.word	0x08016a9c

08003ba8 <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8003bae:	2016      	movs	r0, #22
 8003bb0:	f006 f88a 	bl	8009cc8 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003bb4:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003bb8:	f7fe fadc 	bl	8002174 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003bbc:	485b      	ldr	r0, [pc, #364]	; (8003d2c <showLightsControlPanel+0x184>)
 8003bbe:	f7fd fed5 	bl	800196c <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "-=ŚWIATŁA=-");
 8003bc2:	495b      	ldr	r1, [pc, #364]	; (8003d30 <showLightsControlPanel+0x188>)
 8003bc4:	485b      	ldr	r0, [pc, #364]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003bc6:	f00f f84f 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003bca:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003bce:	9301      	str	r3, [sp, #4]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003bd8:	220a      	movs	r2, #10
 8003bda:	2146      	movs	r1, #70	; 0x46
 8003bdc:	4855      	ldr	r0, [pc, #340]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003bde:	f7fe f8df 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003be2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	2329      	movs	r3, #41	; 0x29
 8003bea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003bee:	2129      	movs	r1, #41	; 0x29
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	f7fd fc0b 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003bf6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	232b      	movs	r3, #43	; 0x2b
 8003bfe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003c02:	212b      	movs	r1, #43	; 0x2b
 8003c04:	2000      	movs	r0, #0
 8003c06:	f7fd fc01 	bl	800140c <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)Msg, "ŚWIATŁO 1:");
 8003c0a:	494b      	ldr	r1, [pc, #300]	; (8003d38 <showLightsControlPanel+0x190>)
 8003c0c:	4849      	ldr	r0, [pc, #292]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003c0e:	f00f f82b 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003c12:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003c16:	9301      	str	r3, [sp, #4]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	223c      	movs	r2, #60	; 0x3c
 8003c20:	2114      	movs	r1, #20
 8003c22:	4844      	ldr	r0, [pc, #272]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003c24:	f7fe f8bc 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 2:");
 8003c28:	4944      	ldr	r1, [pc, #272]	; (8003d3c <showLightsControlPanel+0x194>)
 8003c2a:	4842      	ldr	r0, [pc, #264]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003c2c:	f00f f81c 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003c30:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003c34:	9301      	str	r3, [sp, #4]
 8003c36:	2301      	movs	r3, #1
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	225a      	movs	r2, #90	; 0x5a
 8003c3e:	2114      	movs	r1, #20
 8003c40:	483c      	ldr	r0, [pc, #240]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003c42:	f7fe f8ad 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 3:");
 8003c46:	493e      	ldr	r1, [pc, #248]	; (8003d40 <showLightsControlPanel+0x198>)
 8003c48:	483a      	ldr	r0, [pc, #232]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003c4a:	f00f f80d 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003c4e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003c52:	9301      	str	r3, [sp, #4]
 8003c54:	2300      	movs	r3, #0
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	2300      	movs	r3, #0
 8003c5a:	2278      	movs	r2, #120	; 0x78
 8003c5c:	2114      	movs	r1, #20
 8003c5e:	4835      	ldr	r0, [pc, #212]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003c60:	f7fe f89e 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 4:");
 8003c64:	4937      	ldr	r1, [pc, #220]	; (8003d44 <showLightsControlPanel+0x19c>)
 8003c66:	4833      	ldr	r0, [pc, #204]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003c68:	f00e fffe 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003c6c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003c70:	9301      	str	r3, [sp, #4]
 8003c72:	2300      	movs	r3, #0
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	2300      	movs	r3, #0
 8003c78:	2296      	movs	r2, #150	; 0x96
 8003c7a:	2114      	movs	r1, #20
 8003c7c:	482d      	ldr	r0, [pc, #180]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003c7e:	f7fe f88f 	bl	8001da0 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003c82:	4831      	ldr	r0, [pc, #196]	; (8003d48 <showLightsControlPanel+0x1a0>)
 8003c84:	f7fd fe72 	bl	800196c <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003c88:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c8c:	9301      	str	r3, [sp, #4]
 8003c8e:	2305      	movs	r3, #5
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	2314      	movs	r3, #20
 8003c94:	225f      	movs	r2, #95	; 0x5f
 8003c96:	21d8      	movs	r1, #216	; 0xd8
 8003c98:	20dc      	movs	r0, #220	; 0xdc
 8003c9a:	f7fd fe16 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "PARAM=>");
 8003c9e:	492b      	ldr	r1, [pc, #172]	; (8003d4c <showLightsControlPanel+0x1a4>)
 8003ca0:	4824      	ldr	r0, [pc, #144]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003ca2:	f00e ffe1 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003ca6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	2300      	movs	r3, #0
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	22da      	movs	r2, #218	; 0xda
 8003cb4:	21e6      	movs	r1, #230	; 0xe6
 8003cb6:	481f      	ldr	r0, [pc, #124]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003cb8:	f7fe f872 	bl	8001da0 <EF_PutString>

	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003cbc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003cc0:	9301      	str	r3, [sp, #4]
 8003cc2:	2305      	movs	r3, #5
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	2314      	movs	r3, #20
 8003cc8:	225a      	movs	r2, #90	; 0x5a
 8003cca:	21d8      	movs	r1, #216	; 0xd8
 8003ccc:	2078      	movs	r0, #120	; 0x78
 8003cce:	f7fd fdfc 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">WS2812b<");
 8003cd2:	491f      	ldr	r1, [pc, #124]	; (8003d50 <showLightsControlPanel+0x1a8>)
 8003cd4:	4817      	ldr	r0, [pc, #92]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003cd6:	f00e ffc7 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003cda:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	22da      	movs	r2, #218	; 0xda
 8003ce8:	217e      	movs	r1, #126	; 0x7e
 8003cea:	4812      	ldr	r0, [pc, #72]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003cec:	f7fe f858 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003cf0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003cf4:	9301      	str	r3, [sp, #4]
 8003cf6:	2305      	movs	r3, #5
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	2314      	movs	r3, #20
 8003cfc:	2264      	movs	r2, #100	; 0x64
 8003cfe:	21d8      	movs	r1, #216	; 0xd8
 8003d00:	200a      	movs	r0, #10
 8003d02:	f7fd fde2 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=CONTROL");
 8003d06:	4913      	ldr	r1, [pc, #76]	; (8003d54 <showLightsControlPanel+0x1ac>)
 8003d08:	480a      	ldr	r0, [pc, #40]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003d0a:	f00e ffad 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003d0e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d12:	9301      	str	r3, [sp, #4]
 8003d14:	2300      	movs	r3, #0
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	22da      	movs	r2, #218	; 0xda
 8003d1c:	210d      	movs	r1, #13
 8003d1e:	4805      	ldr	r0, [pc, #20]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003d20:	f7fe f83e 	bl	8001da0 <EF_PutString>


}
 8003d24:	bf00      	nop
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	0802a4cc 	.word	0x0802a4cc
 8003d30:	08016aa8 	.word	0x08016aa8
 8003d34:	200002cc 	.word	0x200002cc
 8003d38:	08016ab8 	.word	0x08016ab8
 8003d3c:	08016ac8 	.word	0x08016ac8
 8003d40:	08016ad8 	.word	0x08016ad8
 8003d44:	08016ae8 	.word	0x08016ae8
 8003d48:	08028554 	.word	0x08028554
 8003d4c:	08016af8 	.word	0x08016af8
 8003d50:	08016b00 	.word	0x08016b00
 8003d54:	08016b0c 	.word	0x08016b0c

08003d58 <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af02      	add	r7, sp, #8


	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003d5e:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003d62:	f7fe fa07 	bl	8002174 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003d66:	48a2      	ldr	r0, [pc, #648]	; (8003ff0 <showClockSetPanel+0x298>)
 8003d68:	f7fd fe00 	bl	800196c <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 8003d6c:	f7fe fe8e 	bl	8002a8c <DS3231_GetHour>
 8003d70:	4603      	mov	r3, r0
 8003d72:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 8003d74:	f7fe fe96 	bl	8002aa4 <DS3231_GetMinute>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	71bb      	strb	r3, [r7, #6]
	uint8_t CDayOfWeek = DS3231_GetDayOfWeek();
 8003d7c:	f7fe fe7a 	bl	8002a74 <DS3231_GetDayOfWeek>
 8003d80:	4603      	mov	r3, r0
 8003d82:	717b      	strb	r3, [r7, #5]

	//
	// Display HEADER string
	sprintf((char*)Msg, "-=SET CLOCK=-");
 8003d84:	499b      	ldr	r1, [pc, #620]	; (8003ff4 <showClockSetPanel+0x29c>)
 8003d86:	489c      	ldr	r0, [pc, #624]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003d88:	f00e ff6e 	bl	8012c68 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003d8c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003d90:	9301      	str	r3, [sp, #4]
 8003d92:	2300      	movs	r3, #0
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003d9a:	220a      	movs	r2, #10
 8003d9c:	212f      	movs	r1, #47	; 0x2f
 8003d9e:	4896      	ldr	r0, [pc, #600]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003da0:	f7fd fffe 	bl	8001da0 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003da4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	2329      	movs	r3, #41	; 0x29
 8003dac:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003db0:	2129      	movs	r1, #41	; 0x29
 8003db2:	2000      	movs	r0, #0
 8003db4:	f7fd fb2a 	bl	800140c <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003db8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	232b      	movs	r3, #43	; 0x2b
 8003dc0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003dc4:	212b      	movs	r1, #43	; 0x2b
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	f7fd fb20 	bl	800140c <GFX_DrawLine>

	sprintf((char*)Msg, "GODZINA: %d", CHour);
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	498a      	ldr	r1, [pc, #552]	; (8003ffc <showClockSetPanel+0x2a4>)
 8003dd2:	4889      	ldr	r0, [pc, #548]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003dd4:	f00e ff48 	bl	8012c68 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003dd8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003ddc:	9301      	str	r3, [sp, #4]
 8003dde:	2300      	movs	r3, #0
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	2300      	movs	r3, #0
 8003de4:	2246      	movs	r2, #70	; 0x46
 8003de6:	2114      	movs	r1, #20
 8003de8:	4883      	ldr	r0, [pc, #524]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003dea:	f7fd ffd9 	bl	8001da0 <EF_PutString>

	sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 8003dee:	79bb      	ldrb	r3, [r7, #6]
 8003df0:	461a      	mov	r2, r3
 8003df2:	4983      	ldr	r1, [pc, #524]	; (8004000 <showClockSetPanel+0x2a8>)
 8003df4:	4880      	ldr	r0, [pc, #512]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003df6:	f00e ff37 	bl	8012c68 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003dfa:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	2301      	movs	r3, #1
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	2300      	movs	r3, #0
 8003e06:	226e      	movs	r2, #110	; 0x6e
 8003e08:	2114      	movs	r1, #20
 8003e0a:	487b      	ldr	r0, [pc, #492]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003e0c:	f7fd ffc8 	bl	8001da0 <EF_PutString>

	sprintf((char*)Msg, "DZIEŃ TYG:  %d", CDayOfWeek);
 8003e10:	797b      	ldrb	r3, [r7, #5]
 8003e12:	461a      	mov	r2, r3
 8003e14:	497b      	ldr	r1, [pc, #492]	; (8004004 <showClockSetPanel+0x2ac>)
 8003e16:	4878      	ldr	r0, [pc, #480]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003e18:	f00e ff26 	bl	8012c68 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003e1c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003e20:	9301      	str	r3, [sp, #4]
 8003e22:	2301      	movs	r3, #1
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	2300      	movs	r3, #0
 8003e28:	2296      	movs	r2, #150	; 0x96
 8003e2a:	2114      	movs	r1, #20
 8003e2c:	4872      	ldr	r0, [pc, #456]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003e2e:	f7fd ffb7 	bl	8001da0 <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 8003e32:	4875      	ldr	r0, [pc, #468]	; (8004008 <showClockSetPanel+0x2b0>)
 8003e34:	f7fd fd9a 	bl	800196c <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003e38:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e3c:	9301      	str	r3, [sp, #4]
 8003e3e:	2305      	movs	r3, #5
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	2315      	movs	r3, #21
 8003e44:	221e      	movs	r2, #30
 8003e46:	214b      	movs	r1, #75	; 0x4b
 8003e48:	20f0      	movs	r0, #240	; 0xf0
 8003e4a:	f7fd fd3e 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003e4e:	496f      	ldr	r1, [pc, #444]	; (800400c <showClockSetPanel+0x2b4>)
 8003e50:	4869      	ldr	r0, [pc, #420]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003e52:	f00e ff09 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003e56:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e5a:	9301      	str	r3, [sp, #4]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	2300      	movs	r3, #0
 8003e62:	224d      	movs	r2, #77	; 0x4d
 8003e64:	21f3      	movs	r1, #243	; 0xf3
 8003e66:	4864      	ldr	r0, [pc, #400]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003e68:	f7fd ff9a 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003e6c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	2305      	movs	r3, #5
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	2315      	movs	r3, #21
 8003e78:	221e      	movs	r2, #30
 8003e7a:	214b      	movs	r1, #75	; 0x4b
 8003e7c:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003e80:	f7fd fd23 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+6");
 8003e84:	4962      	ldr	r1, [pc, #392]	; (8004010 <showClockSetPanel+0x2b8>)
 8003e86:	485c      	ldr	r0, [pc, #368]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003e88:	f00e feee 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003e8c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e90:	9301      	str	r3, [sp, #4]
 8003e92:	2300      	movs	r3, #0
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	2300      	movs	r3, #0
 8003e98:	224d      	movs	r2, #77	; 0x4d
 8003e9a:	f240 111d 	movw	r1, #285	; 0x11d
 8003e9e:	4856      	ldr	r0, [pc, #344]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003ea0:	f7fd ff7e 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003ea4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ea8:	9301      	str	r3, [sp, #4]
 8003eaa:	2305      	movs	r3, #5
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	2315      	movs	r3, #21
 8003eb0:	221e      	movs	r2, #30
 8003eb2:	2173      	movs	r1, #115	; 0x73
 8003eb4:	20f0      	movs	r0, #240	; 0xf0
 8003eb6:	f7fd fd08 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003eba:	4954      	ldr	r1, [pc, #336]	; (800400c <showClockSetPanel+0x2b4>)
 8003ebc:	484e      	ldr	r0, [pc, #312]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003ebe:	f00e fed3 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003ec2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ec6:	9301      	str	r3, [sp, #4]
 8003ec8:	2300      	movs	r3, #0
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	2275      	movs	r2, #117	; 0x75
 8003ed0:	21f5      	movs	r1, #245	; 0xf5
 8003ed2:	4849      	ldr	r0, [pc, #292]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003ed4:	f7fd ff64 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003ed8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003edc:	9301      	str	r3, [sp, #4]
 8003ede:	2305      	movs	r3, #5
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	2315      	movs	r3, #21
 8003ee4:	221e      	movs	r2, #30
 8003ee6:	2173      	movs	r1, #115	; 0x73
 8003ee8:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003eec:	f7fd fced 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003ef0:	4948      	ldr	r1, [pc, #288]	; (8004014 <showClockSetPanel+0x2bc>)
 8003ef2:	4841      	ldr	r0, [pc, #260]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003ef4:	f00e feb8 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003ef8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003efc:	9301      	str	r3, [sp, #4]
 8003efe:	2300      	movs	r3, #0
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	2300      	movs	r3, #0
 8003f04:	2275      	movs	r2, #117	; 0x75
 8003f06:	f240 111b 	movw	r1, #283	; 0x11b
 8003f0a:	483b      	ldr	r0, [pc, #236]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003f0c:	f7fd ff48 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_3_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003f10:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f14:	9301      	str	r3, [sp, #4]
 8003f16:	2305      	movs	r3, #5
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	2315      	movs	r3, #21
 8003f1c:	221e      	movs	r2, #30
 8003f1e:	219b      	movs	r1, #155	; 0x9b
 8003f20:	20f0      	movs	r0, #240	; 0xf0
 8003f22:	f7fd fcd2 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1D");
 8003f26:	493c      	ldr	r1, [pc, #240]	; (8004018 <showClockSetPanel+0x2c0>)
 8003f28:	4833      	ldr	r0, [pc, #204]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003f2a:	f00e fe9d 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003f2e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f32:	9301      	str	r3, [sp, #4]
 8003f34:	2300      	movs	r3, #0
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	229d      	movs	r2, #157	; 0x9d
 8003f3c:	21f3      	movs	r1, #243	; 0xf3
 8003f3e:	482e      	ldr	r0, [pc, #184]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003f40:	f7fd ff2e 	bl	8001da0 <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003f44:	4830      	ldr	r0, [pc, #192]	; (8004008 <showClockSetPanel+0x2b0>)
 8003f46:	f7fd fd11 	bl	800196c <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003f4a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f4e:	9301      	str	r3, [sp, #4]
 8003f50:	2305      	movs	r3, #5
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	2314      	movs	r3, #20
 8003f56:	225f      	movs	r2, #95	; 0x5f
 8003f58:	21d8      	movs	r1, #216	; 0xd8
 8003f5a:	20dc      	movs	r0, #220	; 0xdc
 8003f5c:	f7fd fcb5 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 8003f60:	492e      	ldr	r1, [pc, #184]	; (800401c <showClockSetPanel+0x2c4>)
 8003f62:	4825      	ldr	r0, [pc, #148]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003f64:	f00e fe80 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003f68:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f6c:	9301      	str	r3, [sp, #4]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	2300      	movs	r3, #0
 8003f74:	22da      	movs	r2, #218	; 0xda
 8003f76:	21e6      	movs	r1, #230	; 0xe6
 8003f78:	481f      	ldr	r0, [pc, #124]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003f7a:	f7fd ff11 	bl	8001da0 <EF_PutString>

	// Medium button
	GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_CLOCK_X-30, MEDIUM_BUTTON_CLOCK_Y, MEDIUM_BUTTON_CLOCK_W+60, MEDIUM_BUTTON_H_CLOCK, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003f7e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f82:	9301      	str	r3, [sp, #4]
 8003f84:	2305      	movs	r3, #5
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	2316      	movs	r3, #22
 8003f8a:	22aa      	movs	r2, #170	; 0xaa
 8003f8c:	21be      	movs	r1, #190	; 0xbe
 8003f8e:	2050      	movs	r0, #80	; 0x50
 8003f90:	f7fd fc9b 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "HARMONOGRAMY");
 8003f94:	4922      	ldr	r1, [pc, #136]	; (8004020 <showClockSetPanel+0x2c8>)
 8003f96:	4818      	ldr	r0, [pc, #96]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003f98:	f00e fe66 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (MEDIUM_BUTTON_CLOCK_X -10), (MEDIUM_BUTTON_CLOCK_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003f9c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	22c1      	movs	r2, #193	; 0xc1
 8003faa:	2164      	movs	r1, #100	; 0x64
 8003fac:	4812      	ldr	r0, [pc, #72]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003fae:	f7fd fef7 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003fb2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003fb6:	9301      	str	r3, [sp, #4]
 8003fb8:	2305      	movs	r3, #5
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	2314      	movs	r3, #20
 8003fbe:	2264      	movs	r2, #100	; 0x64
 8003fc0:	21d8      	movs	r1, #216	; 0xd8
 8003fc2:	200a      	movs	r0, #10
 8003fc4:	f7fd fc81 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003fc8:	4916      	ldr	r1, [pc, #88]	; (8004024 <showClockSetPanel+0x2cc>)
 8003fca:	480b      	ldr	r0, [pc, #44]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003fcc:	f00e fe4c 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003fd0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003fd4:	9301      	str	r3, [sp, #4]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	22da      	movs	r2, #218	; 0xda
 8003fde:	210d      	movs	r1, #13
 8003fe0:	4805      	ldr	r0, [pc, #20]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003fe2:	f7fd fedd 	bl	8001da0 <EF_PutString>
}
 8003fe6:	bf00      	nop
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	0802a4cc 	.word	0x0802a4cc
 8003ff4:	08016b18 	.word	0x08016b18
 8003ff8:	200002cc 	.word	0x200002cc
 8003ffc:	08016b28 	.word	0x08016b28
 8004000:	08016b34 	.word	0x08016b34
 8004004:	08016b44 	.word	0x08016b44
 8004008:	08028554 	.word	0x08028554
 800400c:	08016b54 	.word	0x08016b54
 8004010:	08016b58 	.word	0x08016b58
 8004014:	08016b5c 	.word	0x08016b5c
 8004018:	08016b60 	.word	0x08016b60
 800401c:	08016b64 	.word	0x08016b64
 8004020:	08016b6c 	.word	0x08016b6c
 8004024:	08016b7c 	.word	0x08016b7c

08004028 <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800402e:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004032:	f7fe f89f 	bl	8002174 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8004036:	4896      	ldr	r0, [pc, #600]	; (8004290 <showPreparedActivitiesPanel+0x268>)
 8004038:	f7fd fc98 	bl	800196c <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=ACTIVITIES=-");
 800403c:	4995      	ldr	r1, [pc, #596]	; (8004294 <showPreparedActivitiesPanel+0x26c>)
 800403e:	4896      	ldr	r0, [pc, #600]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 8004040:	f00e fe12 	bl	8012c68 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004044:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004048:	9301      	str	r3, [sp, #4]
 800404a:	2300      	movs	r3, #0
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	231f      	movs	r3, #31
 8004050:	220a      	movs	r2, #10
 8004052:	212f      	movs	r1, #47	; 0x2f
 8004054:	4890      	ldr	r0, [pc, #576]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 8004056:	f7fd fea3 	bl	8001da0 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 800405a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	2329      	movs	r3, #41	; 0x29
 8004062:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004066:	2129      	movs	r1, #41	; 0x29
 8004068:	2000      	movs	r0, #0
 800406a:	f7fd f9cf 	bl	800140c <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800406e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	232b      	movs	r3, #43	; 0x2b
 8004076:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800407a:	212b      	movs	r1, #43	; 0x2b
 800407c:	2000      	movs	r0, #0
 800407e:	f7fd f9c5 	bl	800140c <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8004082:	4886      	ldr	r0, [pc, #536]	; (800429c <showPreparedActivitiesPanel+0x274>)
 8004084:	f7fd fc72 	bl	800196c <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004088:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	2305      	movs	r3, #5
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	2314      	movs	r3, #20
 8004094:	2264      	movs	r2, #100	; 0x64
 8004096:	21d8      	movs	r1, #216	; 0xd8
 8004098:	200a      	movs	r0, #10
 800409a:	f7fd fc16 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 800409e:	4980      	ldr	r1, [pc, #512]	; (80042a0 <showPreparedActivitiesPanel+0x278>)
 80040a0:	487d      	ldr	r0, [pc, #500]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 80040a2:	f00e fde1 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80040a6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040aa:	9301      	str	r3, [sp, #4]
 80040ac:	2300      	movs	r3, #0
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	2300      	movs	r3, #0
 80040b2:	22da      	movs	r2, #218	; 0xda
 80040b4:	210d      	movs	r1, #13
 80040b6:	4878      	ldr	r0, [pc, #480]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 80040b8:	f7fd fe72 	bl	8001da0 <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80040bc:	4877      	ldr	r0, [pc, #476]	; (800429c <showPreparedActivitiesPanel+0x274>)
 80040be:	f7fd fc55 	bl	800196c <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80040c2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040c6:	9301      	str	r3, [sp, #4]
 80040c8:	2305      	movs	r3, #5
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	2314      	movs	r3, #20
 80040ce:	225f      	movs	r2, #95	; 0x5f
 80040d0:	21d8      	movs	r1, #216	; 0xd8
 80040d2:	20dc      	movs	r0, #220	; 0xdc
 80040d4:	f7fd fbf9 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 80040d8:	4972      	ldr	r1, [pc, #456]	; (80042a4 <showPreparedActivitiesPanel+0x27c>)
 80040da:	486f      	ldr	r0, [pc, #444]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 80040dc:	f00e fdc4 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80040e0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040e4:	9301      	str	r3, [sp, #4]
 80040e6:	2300      	movs	r3, #0
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	2300      	movs	r3, #0
 80040ec:	22da      	movs	r2, #218	; 0xda
 80040ee:	21e6      	movs	r1, #230	; 0xe6
 80040f0:	4869      	ldr	r0, [pc, #420]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 80040f2:	f7fd fe55 	bl	8001da0 <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 80040f6:	4b6c      	ldr	r3, [pc, #432]	; (80042a8 <showPreparedActivitiesPanel+0x280>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d029      	beq.n	8004152 <showPreparedActivitiesPanel+0x12a>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80040fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004102:	9301      	str	r3, [sp, #4]
 8004104:	230a      	movs	r3, #10
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	2328      	movs	r3, #40	; 0x28
 800410a:	2278      	movs	r2, #120	; 0x78
 800410c:	213c      	movs	r1, #60	; 0x3c
 800410e:	2064      	movs	r0, #100	; 0x64
 8004110:	f7fd fbdb 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8004114:	4965      	ldr	r1, [pc, #404]	; (80042ac <showPreparedActivitiesPanel+0x284>)
 8004116:	4860      	ldr	r0, [pc, #384]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 8004118:	f00e fda6 	bl	8012c68 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800411c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	2300      	movs	r3, #0
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	2300      	movs	r3, #0
 8004128:	223e      	movs	r2, #62	; 0x3e
 800412a:	2177      	movs	r1, #119	; 0x77
 800412c:	485a      	ldr	r0, [pc, #360]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 800412e:	f7fd fe37 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8004132:	495f      	ldr	r1, [pc, #380]	; (80042b0 <showPreparedActivitiesPanel+0x288>)
 8004134:	4858      	ldr	r0, [pc, #352]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 8004136:	f00e fd97 	bl	8012c68 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800413a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	2300      	movs	r3, #0
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	2300      	movs	r3, #0
 8004146:	2250      	movs	r2, #80	; 0x50
 8004148:	2193      	movs	r1, #147	; 0x93
 800414a:	4853      	ldr	r0, [pc, #332]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 800414c:	f7fd fe28 	bl	8001da0 <EF_PutString>
 8004150:	e028      	b.n	80041a4 <showPreparedActivitiesPanel+0x17c>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004152:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004156:	9301      	str	r3, [sp, #4]
 8004158:	230a      	movs	r3, #10
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	2328      	movs	r3, #40	; 0x28
 800415e:	2278      	movs	r2, #120	; 0x78
 8004160:	213c      	movs	r1, #60	; 0x3c
 8004162:	2064      	movs	r0, #100	; 0x64
 8004164:	f7fd fbb1 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8004168:	4950      	ldr	r1, [pc, #320]	; (80042ac <showPreparedActivitiesPanel+0x284>)
 800416a:	484b      	ldr	r0, [pc, #300]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 800416c:	f00e fd7c 	bl	8012c68 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004170:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004174:	9301      	str	r3, [sp, #4]
 8004176:	2300      	movs	r3, #0
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	2300      	movs	r3, #0
 800417c:	223e      	movs	r2, #62	; 0x3e
 800417e:	2177      	movs	r1, #119	; 0x77
 8004180:	4845      	ldr	r0, [pc, #276]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 8004182:	f7fd fe0d 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8004186:	494b      	ldr	r1, [pc, #300]	; (80042b4 <showPreparedActivitiesPanel+0x28c>)
 8004188:	4843      	ldr	r0, [pc, #268]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 800418a:	f00e fd6d 	bl	8012c68 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800418e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004192:	9301      	str	r3, [sp, #4]
 8004194:	2300      	movs	r3, #0
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	2300      	movs	r3, #0
 800419a:	2250      	movs	r2, #80	; 0x50
 800419c:	2193      	movs	r1, #147	; 0x93
 800419e:	483e      	ldr	r0, [pc, #248]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 80041a0:	f7fd fdfe 	bl	8001da0 <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 80041a4:	4b40      	ldr	r3, [pc, #256]	; (80042a8 <showPreparedActivitiesPanel+0x280>)
 80041a6:	785b      	ldrb	r3, [r3, #1]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d029      	beq.n	8004200 <showPreparedActivitiesPanel+0x1d8>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80041ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	230a      	movs	r3, #10
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	2328      	movs	r3, #40	; 0x28
 80041b8:	2278      	movs	r2, #120	; 0x78
 80041ba:	2178      	movs	r1, #120	; 0x78
 80041bc:	2064      	movs	r0, #100	; 0x64
 80041be:	f7fd fb84 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 80041c2:	493d      	ldr	r1, [pc, #244]	; (80042b8 <showPreparedActivitiesPanel+0x290>)
 80041c4:	4834      	ldr	r0, [pc, #208]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 80041c6:	f00e fd4f 	bl	8012c68 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80041ca:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80041ce:	9301      	str	r3, [sp, #4]
 80041d0:	2300      	movs	r3, #0
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	2300      	movs	r3, #0
 80041d6:	227a      	movs	r2, #122	; 0x7a
 80041d8:	2169      	movs	r1, #105	; 0x69
 80041da:	482f      	ldr	r0, [pc, #188]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 80041dc:	f7fd fde0 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "ON");
 80041e0:	4933      	ldr	r1, [pc, #204]	; (80042b0 <showPreparedActivitiesPanel+0x288>)
 80041e2:	482d      	ldr	r0, [pc, #180]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 80041e4:	f00e fd40 	bl	8012c68 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80041e8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80041ec:	9301      	str	r3, [sp, #4]
 80041ee:	2300      	movs	r3, #0
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	2300      	movs	r3, #0
 80041f4:	228c      	movs	r2, #140	; 0x8c
 80041f6:	2193      	movs	r1, #147	; 0x93
 80041f8:	4827      	ldr	r0, [pc, #156]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 80041fa:	f7fd fdd1 	bl	8001da0 <EF_PutString>
 80041fe:	e028      	b.n	8004252 <showPreparedActivitiesPanel+0x22a>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004200:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004204:	9301      	str	r3, [sp, #4]
 8004206:	230a      	movs	r3, #10
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	2328      	movs	r3, #40	; 0x28
 800420c:	2278      	movs	r2, #120	; 0x78
 800420e:	2178      	movs	r1, #120	; 0x78
 8004210:	2064      	movs	r0, #100	; 0x64
 8004212:	f7fd fb5a 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8004216:	4928      	ldr	r1, [pc, #160]	; (80042b8 <showPreparedActivitiesPanel+0x290>)
 8004218:	481f      	ldr	r0, [pc, #124]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 800421a:	f00e fd25 	bl	8012c68 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800421e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	2300      	movs	r3, #0
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	2300      	movs	r3, #0
 800422a:	227a      	movs	r2, #122	; 0x7a
 800422c:	2169      	movs	r1, #105	; 0x69
 800422e:	481a      	ldr	r0, [pc, #104]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 8004230:	f7fd fdb6 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8004234:	491f      	ldr	r1, [pc, #124]	; (80042b4 <showPreparedActivitiesPanel+0x28c>)
 8004236:	4818      	ldr	r0, [pc, #96]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 8004238:	f00e fd16 	bl	8012c68 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800423c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	2300      	movs	r3, #0
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	2300      	movs	r3, #0
 8004248:	228c      	movs	r2, #140	; 0x8c
 800424a:	2193      	movs	r1, #147	; 0x93
 800424c:	4812      	ldr	r0, [pc, #72]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 800424e:	f7fd fda7 	bl	8001da0 <EF_PutString>
	}


	EF_SetFont(&arialBlack_20ptFontInfo);
 8004252:	480f      	ldr	r0, [pc, #60]	; (8004290 <showPreparedActivitiesPanel+0x268>)
 8004254:	f7fd fb8a 	bl	800196c <EF_SetFont>
	activitiesDurationTimeInSeconds = EEPROM_ActivitiesTimeRead(1);
 8004258:	2001      	movs	r0, #1
 800425a:	f7ff f8c8 	bl	80033ee <EEPROM_ActivitiesTimeRead>
 800425e:	4603      	mov	r3, r0
 8004260:	4a16      	ldr	r2, [pc, #88]	; (80042bc <showPreparedActivitiesPanel+0x294>)
 8004262:	6013      	str	r3, [r2, #0]
	sprintf((char*)Msg, "Czas karmienia: %ld s", activitiesDurationTimeInSeconds);
 8004264:	4b15      	ldr	r3, [pc, #84]	; (80042bc <showPreparedActivitiesPanel+0x294>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	4915      	ldr	r1, [pc, #84]	; (80042c0 <showPreparedActivitiesPanel+0x298>)
 800426c:	480a      	ldr	r0, [pc, #40]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 800426e:	f00e fcfb 	bl	8012c68 <siprintf>
	EF_PutString(Msg, ACTIVITIES_TIME_DURATION_X, ACTIVITIES_TIME_DURATION_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004272:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004276:	9301      	str	r3, [sp, #4]
 8004278:	2300      	movs	r3, #0
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	2300      	movs	r3, #0
 800427e:	22b4      	movs	r2, #180	; 0xb4
 8004280:	210a      	movs	r1, #10
 8004282:	4805      	ldr	r0, [pc, #20]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 8004284:	f7fd fd8c 	bl	8001da0 <EF_PutString>
}
 8004288:	bf00      	nop
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	0802a4cc 	.word	0x0802a4cc
 8004294:	08016b84 	.word	0x08016b84
 8004298:	200002cc 	.word	0x200002cc
 800429c:	08028554 	.word	0x08028554
 80042a0:	08016b7c 	.word	0x08016b7c
 80042a4:	08016b64 	.word	0x08016b64
 80042a8:	20000250 	.word	0x20000250
 80042ac:	08016b94 	.word	0x08016b94
 80042b0:	08016ba0 	.word	0x08016ba0
 80042b4:	08016ba4 	.word	0x08016ba4
 80042b8:	08016ba8 	.word	0x08016ba8
 80042bc:	20000290 	.word	0x20000290
 80042c0:	08016bb4 	.word	0x08016bb4

080042c4 <showWSLedPanel>:
// Display screen to controlling WS2812b LEDs
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void showWSLedPanel()
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80042ca:	f24c 6018 	movw	r0, #50712	; 0xc618
 80042ce:	f7fd ff51 	bl	8002174 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 80042d2:	48c7      	ldr	r0, [pc, #796]	; (80045f0 <showWSLedPanel+0x32c>)
 80042d4:	f7fd fb4a 	bl	800196c <EF_SetFont>


	// Display Header
	sprintf((char*)Msg, "-=WS2812b=-");
 80042d8:	49c6      	ldr	r1, [pc, #792]	; (80045f4 <showWSLedPanel+0x330>)
 80042da:	48c7      	ldr	r0, [pc, #796]	; (80045f8 <showWSLedPanel+0x334>)
 80042dc:	f00e fcc4 	bl	8012c68 <siprintf>
	EF_PutString(Msg, WS_LED_STRING_POZ_X, WS_LED_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80042e0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80042e4:	9301      	str	r3, [sp, #4]
 80042e6:	2300      	movs	r3, #0
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	231f      	movs	r3, #31
 80042ec:	220a      	movs	r2, #10
 80042ee:	2146      	movs	r1, #70	; 0x46
 80042f0:	48c1      	ldr	r0, [pc, #772]	; (80045f8 <showWSLedPanel+0x334>)
 80042f2:	f7fd fd55 	bl	8001da0 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80042f6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	2329      	movs	r3, #41	; 0x29
 80042fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004302:	2129      	movs	r1, #41	; 0x29
 8004304:	2000      	movs	r0, #0
 8004306:	f7fd f881 	bl	800140c <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800430a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	232b      	movs	r3, #43	; 0x2b
 8004312:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004316:	212b      	movs	r1, #43	; 0x2b
 8004318:	2000      	movs	r0, #0
 800431a:	f7fd f877 	bl	800140c <GFX_DrawLine>

	// Display String
	sprintf((char*)Msg, "ILOŚĆ LED: %d", NrOfLeds);
 800431e:	4bb7      	ldr	r3, [pc, #732]	; (80045fc <showWSLedPanel+0x338>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	49b6      	ldr	r1, [pc, #728]	; (8004600 <showWSLedPanel+0x33c>)
 8004326:	48b4      	ldr	r0, [pc, #720]	; (80045f8 <showWSLedPanel+0x334>)
 8004328:	f00e fc9e 	bl	8012c68 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800432c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004330:	9301      	str	r3, [sp, #4]
 8004332:	2300      	movs	r3, #0
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	2300      	movs	r3, #0
 8004338:	223c      	movs	r2, #60	; 0x3c
 800433a:	2114      	movs	r1, #20
 800433c:	48ae      	ldr	r0, [pc, #696]	; (80045f8 <showWSLedPanel+0x334>)
 800433e:	f7fd fd2f 	bl	8001da0 <EF_PutString>

	sprintf((char*)Msg, "WHITE:");
 8004342:	49b0      	ldr	r1, [pc, #704]	; (8004604 <showWSLedPanel+0x340>)
 8004344:	48ac      	ldr	r0, [pc, #688]	; (80045f8 <showWSLedPanel+0x334>)
 8004346:	f00e fc8f 	bl	8012c68 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_WHITE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800434a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800434e:	9301      	str	r3, [sp, #4]
 8004350:	2300      	movs	r3, #0
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	2300      	movs	r3, #0
 8004356:	225a      	movs	r2, #90	; 0x5a
 8004358:	2114      	movs	r1, #20
 800435a:	48a7      	ldr	r0, [pc, #668]	; (80045f8 <showWSLedPanel+0x334>)
 800435c:	f7fd fd20 	bl	8001da0 <EF_PutString>

	sprintf((char*)Msg, "BLUE:");
 8004360:	49a9      	ldr	r1, [pc, #676]	; (8004608 <showWSLedPanel+0x344>)
 8004362:	48a5      	ldr	r0, [pc, #660]	; (80045f8 <showWSLedPanel+0x334>)
 8004364:	f00e fc80 	bl	8012c68 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_BLUE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004368:	f24c 6318 	movw	r3, #50712	; 0xc618
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	2300      	movs	r3, #0
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	2300      	movs	r3, #0
 8004374:	2278      	movs	r2, #120	; 0x78
 8004376:	2114      	movs	r1, #20
 8004378:	489f      	ldr	r0, [pc, #636]	; (80045f8 <showWSLedPanel+0x334>)
 800437a:	f7fd fd11 	bl	8001da0 <EF_PutString>

	//
	// Display first row of buttons - number of LEDs
	EF_SetFont(&arial_11ptFontInfo);
 800437e:	48a3      	ldr	r0, [pc, #652]	; (800460c <showWSLedPanel+0x348>)
 8004380:	f7fd faf4 	bl	800196c <EF_SetFont>
	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_1_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8004384:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004388:	9301      	str	r3, [sp, #4]
 800438a:	2305      	movs	r3, #5
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	2315      	movs	r3, #21
 8004390:	221e      	movs	r2, #30
 8004392:	2141      	movs	r1, #65	; 0x41
 8004394:	20d9      	movs	r0, #217	; 0xd9
 8004396:	f7fd fa98 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 800439a:	499d      	ldr	r1, [pc, #628]	; (8004610 <showWSLedPanel+0x34c>)
 800439c:	4896      	ldr	r0, [pc, #600]	; (80045f8 <showWSLedPanel+0x334>)
 800439e:	f00e fc63 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_1_X+STRING_ERRATA_X + 3), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80043a2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80043a6:	9301      	str	r3, [sp, #4]
 80043a8:	2300      	movs	r3, #0
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	2300      	movs	r3, #0
 80043ae:	2243      	movs	r2, #67	; 0x43
 80043b0:	21df      	movs	r1, #223	; 0xdf
 80043b2:	4891      	ldr	r0, [pc, #580]	; (80045f8 <showWSLedPanel+0x334>)
 80043b4:	f7fd fcf4 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_2_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80043b8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80043bc:	9301      	str	r3, [sp, #4]
 80043be:	2305      	movs	r3, #5
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	2315      	movs	r3, #21
 80043c4:	221e      	movs	r2, #30
 80043c6:	2141      	movs	r1, #65	; 0x41
 80043c8:	20fc      	movs	r0, #252	; 0xfc
 80043ca:	f7fd fa7e 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 80043ce:	4991      	ldr	r1, [pc, #580]	; (8004614 <showWSLedPanel+0x350>)
 80043d0:	4889      	ldr	r0, [pc, #548]	; (80045f8 <showWSLedPanel+0x334>)
 80043d2:	f00e fc49 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_2_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80043d6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80043da:	9301      	str	r3, [sp, #4]
 80043dc:	2300      	movs	r3, #0
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	2300      	movs	r3, #0
 80043e2:	2243      	movs	r2, #67	; 0x43
 80043e4:	f240 1101 	movw	r1, #257	; 0x101
 80043e8:	4883      	ldr	r0, [pc, #524]	; (80045f8 <showWSLedPanel+0x334>)
 80043ea:	f7fd fcd9 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80043ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043f2:	9301      	str	r3, [sp, #4]
 80043f4:	2305      	movs	r3, #5
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	2315      	movs	r3, #21
 80043fa:	221e      	movs	r2, #30
 80043fc:	2141      	movs	r1, #65	; 0x41
 80043fe:	f240 101f 	movw	r0, #287	; 0x11f
 8004402:	f7fd fa62 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OK");
 8004406:	4984      	ldr	r1, [pc, #528]	; (8004618 <showWSLedPanel+0x354>)
 8004408:	487b      	ldr	r0, [pc, #492]	; (80045f8 <showWSLedPanel+0x334>)
 800440a:	f00e fc2d 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800440e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	2300      	movs	r3, #0
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	2300      	movs	r3, #0
 800441a:	2243      	movs	r2, #67	; 0x43
 800441c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8004420:	4875      	ldr	r0, [pc, #468]	; (80045f8 <showWSLedPanel+0x334>)
 8004422:	f7fd fcbd 	bl	8001da0 <EF_PutString>

	//
	// Display second row of buttons - WHITE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8004426:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800442a:	9301      	str	r3, [sp, #4]
 800442c:	2305      	movs	r3, #5
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	2315      	movs	r3, #21
 8004432:	2228      	movs	r2, #40	; 0x28
 8004434:	215f      	movs	r1, #95	; 0x5f
 8004436:	2096      	movs	r0, #150	; 0x96
 8004438:	f7fd fa47 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 800443c:	4977      	ldr	r1, [pc, #476]	; (800461c <showWSLedPanel+0x358>)
 800443e:	486e      	ldr	r0, [pc, #440]	; (80045f8 <showWSLedPanel+0x334>)
 8004440:	f00e fc12 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004444:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004448:	9301      	str	r3, [sp, #4]
 800444a:	2300      	movs	r3, #0
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	2300      	movs	r3, #0
 8004450:	2261      	movs	r2, #97	; 0x61
 8004452:	219b      	movs	r1, #155	; 0x9b
 8004454:	4868      	ldr	r0, [pc, #416]	; (80045f8 <showWSLedPanel+0x334>)
 8004456:	f7fd fca3 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 800445a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800445e:	9301      	str	r3, [sp, #4]
 8004460:	2305      	movs	r3, #5
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	2315      	movs	r3, #21
 8004466:	2228      	movs	r2, #40	; 0x28
 8004468:	215f      	movs	r1, #95	; 0x5f
 800446a:	20ca      	movs	r0, #202	; 0xca
 800446c:	f7fd fa2d 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8004470:	496b      	ldr	r1, [pc, #428]	; (8004620 <showWSLedPanel+0x35c>)
 8004472:	4861      	ldr	r0, [pc, #388]	; (80045f8 <showWSLedPanel+0x334>)
 8004474:	f00e fbf8 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004478:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800447c:	9301      	str	r3, [sp, #4]
 800447e:	2300      	movs	r3, #0
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	2300      	movs	r3, #0
 8004484:	2261      	movs	r2, #97	; 0x61
 8004486:	21d2      	movs	r1, #210	; 0xd2
 8004488:	485b      	ldr	r0, [pc, #364]	; (80045f8 <showWSLedPanel+0x334>)
 800448a:	f7fd fc89 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 800448e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004492:	9301      	str	r3, [sp, #4]
 8004494:	2305      	movs	r3, #5
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	2315      	movs	r3, #21
 800449a:	2228      	movs	r2, #40	; 0x28
 800449c:	215f      	movs	r1, #95	; 0x5f
 800449e:	20fe      	movs	r0, #254	; 0xfe
 80044a0:	f7fd fa13 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 80044a4:	495f      	ldr	r1, [pc, #380]	; (8004624 <showWSLedPanel+0x360>)
 80044a6:	4854      	ldr	r0, [pc, #336]	; (80045f8 <showWSLedPanel+0x334>)
 80044a8:	f00e fbde 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 80044ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044b0:	9301      	str	r3, [sp, #4]
 80044b2:	2300      	movs	r3, #0
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	2300      	movs	r3, #0
 80044b8:	2261      	movs	r2, #97	; 0x61
 80044ba:	f44f 7183 	mov.w	r1, #262	; 0x106
 80044be:	484e      	ldr	r0, [pc, #312]	; (80045f8 <showWSLedPanel+0x334>)
 80044c0:	f7fd fc6e 	bl	8001da0 <EF_PutString>

	//
	// Display third row of buttons - BLUE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 80044c4:	231f      	movs	r3, #31
 80044c6:	9301      	str	r3, [sp, #4]
 80044c8:	2305      	movs	r3, #5
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	2315      	movs	r3, #21
 80044ce:	2228      	movs	r2, #40	; 0x28
 80044d0:	217d      	movs	r1, #125	; 0x7d
 80044d2:	2096      	movs	r0, #150	; 0x96
 80044d4:	f7fd f9f9 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 80044d8:	4950      	ldr	r1, [pc, #320]	; (800461c <showWSLedPanel+0x358>)
 80044da:	4847      	ldr	r0, [pc, #284]	; (80045f8 <showWSLedPanel+0x334>)
 80044dc:	f00e fbc4 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 80044e0:	231f      	movs	r3, #31
 80044e2:	9301      	str	r3, [sp, #4]
 80044e4:	2300      	movs	r3, #0
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	2300      	movs	r3, #0
 80044ea:	227f      	movs	r2, #127	; 0x7f
 80044ec:	219b      	movs	r1, #155	; 0x9b
 80044ee:	4842      	ldr	r0, [pc, #264]	; (80045f8 <showWSLedPanel+0x334>)
 80044f0:	f7fd fc56 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 80044f4:	231f      	movs	r3, #31
 80044f6:	9301      	str	r3, [sp, #4]
 80044f8:	2305      	movs	r3, #5
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	2315      	movs	r3, #21
 80044fe:	2228      	movs	r2, #40	; 0x28
 8004500:	217d      	movs	r1, #125	; 0x7d
 8004502:	20ca      	movs	r0, #202	; 0xca
 8004504:	f7fd f9e1 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8004508:	4945      	ldr	r1, [pc, #276]	; (8004620 <showWSLedPanel+0x35c>)
 800450a:	483b      	ldr	r0, [pc, #236]	; (80045f8 <showWSLedPanel+0x334>)
 800450c:	f00e fbac 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8004510:	231f      	movs	r3, #31
 8004512:	9301      	str	r3, [sp, #4]
 8004514:	2300      	movs	r3, #0
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	2300      	movs	r3, #0
 800451a:	227f      	movs	r2, #127	; 0x7f
 800451c:	21d2      	movs	r1, #210	; 0xd2
 800451e:	4836      	ldr	r0, [pc, #216]	; (80045f8 <showWSLedPanel+0x334>)
 8004520:	f7fd fc3e 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8004524:	231f      	movs	r3, #31
 8004526:	9301      	str	r3, [sp, #4]
 8004528:	2305      	movs	r3, #5
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	2315      	movs	r3, #21
 800452e:	2228      	movs	r2, #40	; 0x28
 8004530:	217d      	movs	r1, #125	; 0x7d
 8004532:	20fe      	movs	r0, #254	; 0xfe
 8004534:	f7fd f9c9 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8004538:	493a      	ldr	r1, [pc, #232]	; (8004624 <showWSLedPanel+0x360>)
 800453a:	482f      	ldr	r0, [pc, #188]	; (80045f8 <showWSLedPanel+0x334>)
 800453c:	f00e fb94 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8004540:	231f      	movs	r3, #31
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	2300      	movs	r3, #0
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	2300      	movs	r3, #0
 800454a:	227f      	movs	r2, #127	; 0x7f
 800454c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004550:	4829      	ldr	r0, [pc, #164]	; (80045f8 <showWSLedPanel+0x334>)
 8004552:	f7fd fc25 	bl	8001da0 <EF_PutString>

	//
	// Display fourth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_1_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_DAILY_BUTTON_COLOR);
 8004556:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800455a:	9301      	str	r3, [sp, #4]
 800455c:	2305      	movs	r3, #5
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	2315      	movs	r3, #21
 8004562:	2250      	movs	r2, #80	; 0x50
 8004564:	219c      	movs	r1, #156	; 0x9c
 8004566:	2014      	movs	r0, #20
 8004568:	f7fd f9af 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "DAILY");
 800456c:	492e      	ldr	r1, [pc, #184]	; (8004628 <showWSLedPanel+0x364>)
 800456e:	4822      	ldr	r0, [pc, #136]	; (80045f8 <showWSLedPanel+0x334>)
 8004570:	f00e fb7a 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_DAILY_BUTTON_COLOR);
 8004574:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004578:	9301      	str	r3, [sp, #4]
 800457a:	2300      	movs	r3, #0
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	2300      	movs	r3, #0
 8004580:	229e      	movs	r2, #158	; 0x9e
 8004582:	211c      	movs	r1, #28
 8004584:	481c      	ldr	r0, [pc, #112]	; (80045f8 <showWSLedPanel+0x334>)
 8004586:	f7fd fc0b 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_2_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800458a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	2305      	movs	r3, #5
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	2315      	movs	r3, #21
 8004596:	2250      	movs	r2, #80	; 0x50
 8004598:	219c      	movs	r1, #156	; 0x9c
 800459a:	2078      	movs	r0, #120	; 0x78
 800459c:	f7fd f995 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OFF");
 80045a0:	4922      	ldr	r1, [pc, #136]	; (800462c <showWSLedPanel+0x368>)
 80045a2:	4815      	ldr	r0, [pc, #84]	; (80045f8 <showWSLedPanel+0x334>)
 80045a4:	f00e fb60 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_2_X+STRING_ERRATA_X+12), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80045a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	2300      	movs	r3, #0
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	2300      	movs	r3, #0
 80045b4:	229e      	movs	r2, #158	; 0x9e
 80045b6:	2187      	movs	r1, #135	; 0x87
 80045b8:	480f      	ldr	r0, [pc, #60]	; (80045f8 <showWSLedPanel+0x334>)
 80045ba:	f7fd fbf1 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_3_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_NIGHT_BUTTON_COLOR);
 80045be:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80045c2:	9301      	str	r3, [sp, #4]
 80045c4:	2305      	movs	r3, #5
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	2315      	movs	r3, #21
 80045ca:	2250      	movs	r2, #80	; 0x50
 80045cc:	219c      	movs	r1, #156	; 0x9c
 80045ce:	20dc      	movs	r0, #220	; 0xdc
 80045d0:	f7fd f97b 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "NIGHT");
 80045d4:	4916      	ldr	r1, [pc, #88]	; (8004630 <showWSLedPanel+0x36c>)
 80045d6:	4808      	ldr	r0, [pc, #32]	; (80045f8 <showWSLedPanel+0x334>)
 80045d8:	f00e fb46 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_3_X+STRING_ERRATA_X+10), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_NIGHT_BUTTON_COLOR);
 80045dc:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80045e0:	9301      	str	r3, [sp, #4]
 80045e2:	2300      	movs	r3, #0
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	2300      	movs	r3, #0
 80045e8:	229e      	movs	r2, #158	; 0x9e
 80045ea:	21e9      	movs	r1, #233	; 0xe9
 80045ec:	e022      	b.n	8004634 <showWSLedPanel+0x370>
 80045ee:	bf00      	nop
 80045f0:	0802a4cc 	.word	0x0802a4cc
 80045f4:	08016bcc 	.word	0x08016bcc
 80045f8:	200002cc 	.word	0x200002cc
 80045fc:	20000034 	.word	0x20000034
 8004600:	08016bd8 	.word	0x08016bd8
 8004604:	08016be8 	.word	0x08016be8
 8004608:	08016bf0 	.word	0x08016bf0
 800460c:	08028554 	.word	0x08028554
 8004610:	08016b54 	.word	0x08016b54
 8004614:	08016b5c 	.word	0x08016b5c
 8004618:	08016bf8 	.word	0x08016bf8
 800461c:	08016bfc 	.word	0x08016bfc
 8004620:	08016c00 	.word	0x08016c00
 8004624:	08016c04 	.word	0x08016c04
 8004628:	08016c08 	.word	0x08016c08
 800462c:	08016ba4 	.word	0x08016ba4
 8004630:	08016c10 	.word	0x08016c10
 8004634:	482b      	ldr	r0, [pc, #172]	; (80046e4 <showWSLedPanel+0x420>)
 8004636:	f7fd fbb3 	bl	8001da0 <EF_PutString>

	//
	// Display fifth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_1_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 800463a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800463e:	9301      	str	r3, [sp, #4]
 8004640:	2305      	movs	r3, #5
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	2315      	movs	r3, #21
 8004646:	2250      	movs	r2, #80	; 0x50
 8004648:	21bb      	movs	r1, #187	; 0xbb
 800464a:	2046      	movs	r0, #70	; 0x46
 800464c:	f7fd f93d 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNRISE");
 8004650:	4925      	ldr	r1, [pc, #148]	; (80046e8 <showWSLedPanel+0x424>)
 8004652:	4824      	ldr	r0, [pc, #144]	; (80046e4 <showWSLedPanel+0x420>)
 8004654:	f00e fb08 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8004658:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800465c:	9301      	str	r3, [sp, #4]
 800465e:	2300      	movs	r3, #0
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	2300      	movs	r3, #0
 8004664:	22bd      	movs	r2, #189	; 0xbd
 8004666:	214e      	movs	r1, #78	; 0x4e
 8004668:	481e      	ldr	r0, [pc, #120]	; (80046e4 <showWSLedPanel+0x420>)
 800466a:	f7fd fb99 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_2_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 800466e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004672:	9301      	str	r3, [sp, #4]
 8004674:	2305      	movs	r3, #5
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	2315      	movs	r3, #21
 800467a:	2250      	movs	r2, #80	; 0x50
 800467c:	21bb      	movs	r1, #187	; 0xbb
 800467e:	20aa      	movs	r0, #170	; 0xaa
 8004680:	f7fd f923 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNSET");
 8004684:	4919      	ldr	r1, [pc, #100]	; (80046ec <showWSLedPanel+0x428>)
 8004686:	4817      	ldr	r0, [pc, #92]	; (80046e4 <showWSLedPanel+0x420>)
 8004688:	f00e faee 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_2_X+STRING_ERRATA_X+8), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 800468c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004690:	9301      	str	r3, [sp, #4]
 8004692:	2300      	movs	r3, #0
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	2300      	movs	r3, #0
 8004698:	22bd      	movs	r2, #189	; 0xbd
 800469a:	21b5      	movs	r1, #181	; 0xb5
 800469c:	4811      	ldr	r0, [pc, #68]	; (80046e4 <showWSLedPanel+0x420>)
 800469e:	f7fd fb7f 	bl	8001da0 <EF_PutString>


	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80046a2:	4813      	ldr	r0, [pc, #76]	; (80046f0 <showWSLedPanel+0x42c>)
 80046a4:	f7fd f962 	bl	800196c <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80046a8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80046ac:	9301      	str	r3, [sp, #4]
 80046ae:	2305      	movs	r3, #5
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	2314      	movs	r3, #20
 80046b4:	2264      	movs	r2, #100	; 0x64
 80046b6:	21d8      	movs	r1, #216	; 0xd8
 80046b8:	200a      	movs	r0, #10
 80046ba:	f7fd f906 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 80046be:	490d      	ldr	r1, [pc, #52]	; (80046f4 <showWSLedPanel+0x430>)
 80046c0:	4808      	ldr	r0, [pc, #32]	; (80046e4 <showWSLedPanel+0x420>)
 80046c2:	f00e fad1 	bl	8012c68 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80046c6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80046ca:	9301      	str	r3, [sp, #4]
 80046cc:	2300      	movs	r3, #0
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	2300      	movs	r3, #0
 80046d2:	22da      	movs	r2, #218	; 0xda
 80046d4:	210d      	movs	r1, #13
 80046d6:	4803      	ldr	r0, [pc, #12]	; (80046e4 <showWSLedPanel+0x420>)
 80046d8:	f7fd fb62 	bl	8001da0 <EF_PutString>


}
 80046dc:	bf00      	nop
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	200002cc 	.word	0x200002cc
 80046e8:	08016c18 	.word	0x08016c18
 80046ec:	08016c20 	.word	0x08016c20
 80046f0:	08028554 	.word	0x08028554
 80046f4:	08016b7c 	.word	0x08016b7c

080046f8 <drawschedulePanel>:
//
// Display screen to setting Schedule Panel
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawschedulePanel(uint8_t NrOfschedule)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b090      	sub	sp, #64	; 0x40
 80046fc:	af02      	add	r7, sp, #8
 80046fe:	4603      	mov	r3, r0
 8004700:	71fb      	strb	r3, [r7, #7]
	uint8_t hourOnschedule1 = 0;
 8004702:	2300      	movs	r3, #0
 8004704:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t hourOffschedule1 = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t minuteOnschedule1 = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t minuteOffschedule1 = 0;
 8004714:	2300      	movs	r3, #0
 8004716:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hourOnschedule2 = 0;
 800471a:	2300      	movs	r3, #0
 800471c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t hourOffschedule2 = 0;
 8004720:	2300      	movs	r3, #0
 8004722:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t minuteOnschedule2 = 0;
 8004726:	2300      	movs	r3, #0
 8004728:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t minuteOffschedule2 = 0;
 800472c:	2300      	movs	r3, #0
 800472e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uint8_t schedule1DayInWeekTab[7] = {0};
 8004732:	2300      	movs	r3, #0
 8004734:	62bb      	str	r3, [r7, #40]	; 0x28
 8004736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800473a:	2100      	movs	r1, #0
 800473c:	460a      	mov	r2, r1
 800473e:	801a      	strh	r2, [r3, #0]
 8004740:	460a      	mov	r2, r1
 8004742:	709a      	strb	r2, [r3, #2]
	uint8_t schedule1RelayAndSwitchTab[9] = {0};
 8004744:	2300      	movs	r3, #0
 8004746:	61fb      	str	r3, [r7, #28]
 8004748:	f107 0320 	add.w	r3, r7, #32
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	711a      	strb	r2, [r3, #4]
	uint8_t schedule2DayInWeekTab[7] = {0};
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]
 8004756:	f107 0318 	add.w	r3, r7, #24
 800475a:	2100      	movs	r1, #0
 800475c:	460a      	mov	r2, r1
 800475e:	801a      	strh	r2, [r3, #0]
 8004760:	460a      	mov	r2, r1
 8004762:	709a      	strb	r2, [r3, #2]
	uint8_t schedule2RelayAndSwitchTab[9] = {0};
 8004764:	2300      	movs	r3, #0
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	f107 030c 	add.w	r3, r7, #12
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	711a      	strb	r2, [r3, #4]
	  //
	  // Draw empty Rectangle to indicate day of week
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_1_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004772:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004776:	9301      	str	r3, [sp, #4]
 8004778:	2305      	movs	r3, #5
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	2314      	movs	r3, #20
 800477e:	2214      	movs	r2, #20
 8004780:	2132      	movs	r1, #50	; 0x32
 8004782:	203c      	movs	r0, #60	; 0x3c
 8004784:	f7fd f824 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_2_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004788:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800478c:	9301      	str	r3, [sp, #4]
 800478e:	2305      	movs	r3, #5
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	2314      	movs	r3, #20
 8004794:	2214      	movs	r2, #20
 8004796:	2132      	movs	r1, #50	; 0x32
 8004798:	205a      	movs	r0, #90	; 0x5a
 800479a:	f7fd f819 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_3_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800479e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047a2:	9301      	str	r3, [sp, #4]
 80047a4:	2305      	movs	r3, #5
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	2314      	movs	r3, #20
 80047aa:	2214      	movs	r2, #20
 80047ac:	2132      	movs	r1, #50	; 0x32
 80047ae:	2078      	movs	r0, #120	; 0x78
 80047b0:	f7fd f80e 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_4_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	2305      	movs	r3, #5
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	2314      	movs	r3, #20
 80047c0:	2214      	movs	r2, #20
 80047c2:	2132      	movs	r1, #50	; 0x32
 80047c4:	2096      	movs	r0, #150	; 0x96
 80047c6:	f7fd f803 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_5_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	2305      	movs	r3, #5
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	2314      	movs	r3, #20
 80047d6:	2214      	movs	r2, #20
 80047d8:	2132      	movs	r1, #50	; 0x32
 80047da:	20b4      	movs	r0, #180	; 0xb4
 80047dc:	f7fc fff8 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_6_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047e4:	9301      	str	r3, [sp, #4]
 80047e6:	2305      	movs	r3, #5
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	2314      	movs	r3, #20
 80047ec:	2214      	movs	r2, #20
 80047ee:	2132      	movs	r1, #50	; 0x32
 80047f0:	20d2      	movs	r0, #210	; 0xd2
 80047f2:	f7fc ffed 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_7_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047fa:	9301      	str	r3, [sp, #4]
 80047fc:	2305      	movs	r3, #5
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	2314      	movs	r3, #20
 8004802:	2214      	movs	r2, #20
 8004804:	2132      	movs	r1, #50	; 0x32
 8004806:	20f0      	movs	r0, #240	; 0xf0
 8004808:	f7fc ffe2 	bl	80017d0 <GFX_DrawRoundRectangle>

	  // Restore from EEPROM chosen day for this schedule
	  restoreTFTScheduleDayOfWeek(NrOfschedule);
 800480c:	79fb      	ldrb	r3, [r7, #7]
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fef8 	bl	8005604 <restoreTFTScheduleDayOfWeek>
	  restoreTFTScheduleRelayLights(NrOfschedule);
 8004814:	79fb      	ldrb	r3, [r7, #7]
 8004816:	4618      	mov	r0, r3
 8004818:	f000 ff61 	bl	80056de <restoreTFTScheduleRelayLights>

	  EF_SetFont(&arial_11ptFontInfo);
 800481c:	48cc      	ldr	r0, [pc, #816]	; (8004b50 <drawschedulePanel+0x458>)
 800481e:	f7fd f8a5 	bl	800196c <EF_SetFont>
	  sprintf((char*)Msg, "PN WT ŚR CZ PT SB ND");
 8004822:	49cc      	ldr	r1, [pc, #816]	; (8004b54 <drawschedulePanel+0x45c>)
 8004824:	48cc      	ldr	r0, [pc, #816]	; (8004b58 <drawschedulePanel+0x460>)
 8004826:	f00e fa1f 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, DAY_CHECK_BUTTON_1_X, (DAY_CHECK_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800482a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	2301      	movs	r3, #1
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	2300      	movs	r3, #0
 8004836:	224b      	movs	r2, #75	; 0x4b
 8004838:	213c      	movs	r1, #60	; 0x3c
 800483a:	48c7      	ldr	r0, [pc, #796]	; (8004b58 <drawschedulePanel+0x460>)
 800483c:	f7fd fab0 	bl	8001da0 <EF_PutString>

	  //
	  // Draw empty Rectangle to indicate relay and lights
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004840:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004844:	9301      	str	r3, [sp, #4]
 8004846:	2305      	movs	r3, #5
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	2314      	movs	r3, #20
 800484c:	2214      	movs	r2, #20
 800484e:	21aa      	movs	r1, #170	; 0xaa
 8004850:	2015      	movs	r0, #21
 8004852:	f7fc ffbd 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004856:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800485a:	9301      	str	r3, [sp, #4]
 800485c:	2305      	movs	r3, #5
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	2314      	movs	r3, #20
 8004862:	2214      	movs	r2, #20
 8004864:	21aa      	movs	r1, #170	; 0xaa
 8004866:	2035      	movs	r0, #53	; 0x35
 8004868:	f7fc ffb2 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800486c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004870:	9301      	str	r3, [sp, #4]
 8004872:	2305      	movs	r3, #5
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	2314      	movs	r3, #20
 8004878:	2214      	movs	r2, #20
 800487a:	21aa      	movs	r1, #170	; 0xaa
 800487c:	2055      	movs	r0, #85	; 0x55
 800487e:	f7fc ffa7 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004882:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	2305      	movs	r3, #5
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	2314      	movs	r3, #20
 800488e:	2214      	movs	r2, #20
 8004890:	21aa      	movs	r1, #170	; 0xaa
 8004892:	2075      	movs	r0, #117	; 0x75
 8004894:	f7fc ff9c 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004898:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	2305      	movs	r3, #5
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	2314      	movs	r3, #20
 80048a4:	2214      	movs	r2, #20
 80048a6:	21aa      	movs	r1, #170	; 0xaa
 80048a8:	2095      	movs	r0, #149	; 0x95
 80048aa:	f7fc ff91 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80048ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80048b2:	9301      	str	r3, [sp, #4]
 80048b4:	2305      	movs	r3, #5
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	2314      	movs	r3, #20
 80048ba:	2214      	movs	r2, #20
 80048bc:	21aa      	movs	r1, #170	; 0xaa
 80048be:	20b5      	movs	r0, #181	; 0xb5
 80048c0:	f7fc ff86 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80048c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80048c8:	9301      	str	r3, [sp, #4]
 80048ca:	2305      	movs	r3, #5
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	2314      	movs	r3, #20
 80048d0:	2214      	movs	r2, #20
 80048d2:	21aa      	movs	r1, #170	; 0xaa
 80048d4:	20d5      	movs	r0, #213	; 0xd5
 80048d6:	f7fc ff7b 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80048da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80048de:	9301      	str	r3, [sp, #4]
 80048e0:	2305      	movs	r3, #5
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	2314      	movs	r3, #20
 80048e6:	2214      	movs	r2, #20
 80048e8:	21aa      	movs	r1, #170	; 0xaa
 80048ea:	20f5      	movs	r0, #245	; 0xf5
 80048ec:	f7fc ff70 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80048f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80048f4:	9301      	str	r3, [sp, #4]
 80048f6:	2305      	movs	r3, #5
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	2314      	movs	r3, #20
 80048fc:	2214      	movs	r2, #20
 80048fe:	21aa      	movs	r1, #170	; 0xaa
 8004900:	f240 1015 	movw	r0, #277	; 0x115
 8004904:	f7fc ff64 	bl	80017d0 <GFX_DrawRoundRectangle>

	  sprintf((char*)Msg, "R1  R2  R3  R4 WS L1  L2  L3  L4");
 8004908:	4994      	ldr	r1, [pc, #592]	; (8004b5c <drawschedulePanel+0x464>)
 800490a:	4893      	ldr	r0, [pc, #588]	; (8004b58 <drawschedulePanel+0x460>)
 800490c:	f00e f9ac 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, (DAY_CHECK_RELAY_BUTTON_1_X), (DAY_CHECK_RELAY_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004910:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004914:	9301      	str	r3, [sp, #4]
 8004916:	2301      	movs	r3, #1
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	2300      	movs	r3, #0
 800491c:	22c3      	movs	r2, #195	; 0xc3
 800491e:	2115      	movs	r1, #21
 8004920:	488d      	ldr	r0, [pc, #564]	; (8004b58 <drawschedulePanel+0x460>)
 8004922:	f7fd fa3d 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004926:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800492a:	9301      	str	r3, [sp, #4]
 800492c:	2305      	movs	r3, #5
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	2314      	movs	r3, #20
 8004932:	2222      	movs	r2, #34	; 0x22
 8004934:	2165      	movs	r1, #101	; 0x65
 8004936:	20bb      	movs	r0, #187	; 0xbb
 8004938:	f7fc ffc7 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 800493c:	4988      	ldr	r1, [pc, #544]	; (8004b60 <drawschedulePanel+0x468>)
 800493e:	4886      	ldr	r0, [pc, #536]	; (8004b58 <drawschedulePanel+0x460>)
 8004940:	f00e f992 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004944:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004948:	9301      	str	r3, [sp, #4]
 800494a:	2300      	movs	r3, #0
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	2300      	movs	r3, #0
 8004950:	2268      	movs	r2, #104	; 0x68
 8004952:	21c1      	movs	r1, #193	; 0xc1
 8004954:	4880      	ldr	r0, [pc, #512]	; (8004b58 <drawschedulePanel+0x460>)
 8004956:	f7fd fa23 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800495a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	2305      	movs	r3, #5
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	2314      	movs	r3, #20
 8004966:	2222      	movs	r2, #34	; 0x22
 8004968:	2165      	movs	r1, #101	; 0x65
 800496a:	20e9      	movs	r0, #233	; 0xe9
 800496c:	f7fc ffad 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 8004970:	497c      	ldr	r1, [pc, #496]	; (8004b64 <drawschedulePanel+0x46c>)
 8004972:	4879      	ldr	r0, [pc, #484]	; (8004b58 <drawschedulePanel+0x460>)
 8004974:	f00e f978 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004978:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800497c:	9301      	str	r3, [sp, #4]
 800497e:	2300      	movs	r3, #0
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	2300      	movs	r3, #0
 8004984:	2268      	movs	r2, #104	; 0x68
 8004986:	21ec      	movs	r1, #236	; 0xec
 8004988:	4873      	ldr	r0, [pc, #460]	; (8004b58 <drawschedulePanel+0x460>)
 800498a:	f7fd fa09 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800498e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004992:	9301      	str	r3, [sp, #4]
 8004994:	2305      	movs	r3, #5
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	2314      	movs	r3, #20
 800499a:	2222      	movs	r2, #34	; 0x22
 800499c:	2165      	movs	r1, #101	; 0x65
 800499e:	f240 1017 	movw	r0, #279	; 0x117
 80049a2:	f7fc ff92 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 80049a6:	4970      	ldr	r1, [pc, #448]	; (8004b68 <drawschedulePanel+0x470>)
 80049a8:	486b      	ldr	r0, [pc, #428]	; (8004b58 <drawschedulePanel+0x460>)
 80049aa:	f00e f95d 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80049ae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80049b2:	9301      	str	r3, [sp, #4]
 80049b4:	2300      	movs	r3, #0
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	2300      	movs	r3, #0
 80049ba:	2268      	movs	r2, #104	; 0x68
 80049bc:	f44f 718c 	mov.w	r1, #280	; 0x118
 80049c0:	4865      	ldr	r0, [pc, #404]	; (8004b58 <drawschedulePanel+0x460>)
 80049c2:	f7fd f9ed 	bl	8001da0 <EF_PutString>


	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80049c6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80049ca:	9301      	str	r3, [sp, #4]
 80049cc:	2305      	movs	r3, #5
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	2314      	movs	r3, #20
 80049d2:	2222      	movs	r2, #34	; 0x22
 80049d4:	2188      	movs	r1, #136	; 0x88
 80049d6:	20bb      	movs	r0, #187	; 0xbb
 80049d8:	f7fc ff77 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 80049dc:	4960      	ldr	r1, [pc, #384]	; (8004b60 <drawschedulePanel+0x468>)
 80049de:	485e      	ldr	r0, [pc, #376]	; (8004b58 <drawschedulePanel+0x460>)
 80049e0:	f00e f942 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80049e4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80049e8:	9301      	str	r3, [sp, #4]
 80049ea:	2300      	movs	r3, #0
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	2300      	movs	r3, #0
 80049f0:	228b      	movs	r2, #139	; 0x8b
 80049f2:	21c1      	movs	r1, #193	; 0xc1
 80049f4:	4858      	ldr	r0, [pc, #352]	; (8004b58 <drawschedulePanel+0x460>)
 80049f6:	f7fd f9d3 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80049fa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	2305      	movs	r3, #5
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	2314      	movs	r3, #20
 8004a06:	2222      	movs	r2, #34	; 0x22
 8004a08:	2188      	movs	r1, #136	; 0x88
 8004a0a:	20e9      	movs	r0, #233	; 0xe9
 8004a0c:	f7fc ff5d 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 8004a10:	4954      	ldr	r1, [pc, #336]	; (8004b64 <drawschedulePanel+0x46c>)
 8004a12:	4851      	ldr	r0, [pc, #324]	; (8004b58 <drawschedulePanel+0x460>)
 8004a14:	f00e f928 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004a18:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	2300      	movs	r3, #0
 8004a24:	228b      	movs	r2, #139	; 0x8b
 8004a26:	21ec      	movs	r1, #236	; 0xec
 8004a28:	484b      	ldr	r0, [pc, #300]	; (8004b58 <drawschedulePanel+0x460>)
 8004a2a:	f7fd f9b9 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004a2e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a32:	9301      	str	r3, [sp, #4]
 8004a34:	2305      	movs	r3, #5
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	2314      	movs	r3, #20
 8004a3a:	2222      	movs	r2, #34	; 0x22
 8004a3c:	2188      	movs	r1, #136	; 0x88
 8004a3e:	f240 1017 	movw	r0, #279	; 0x117
 8004a42:	f7fc ff42 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 8004a46:	4948      	ldr	r1, [pc, #288]	; (8004b68 <drawschedulePanel+0x470>)
 8004a48:	4843      	ldr	r0, [pc, #268]	; (8004b58 <drawschedulePanel+0x460>)
 8004a4a:	f00e f90d 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004a4e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a52:	9301      	str	r3, [sp, #4]
 8004a54:	2300      	movs	r3, #0
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	228b      	movs	r2, #139	; 0x8b
 8004a5c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004a60:	483d      	ldr	r0, [pc, #244]	; (8004b58 <drawschedulePanel+0x460>)
 8004a62:	f7fd f99d 	bl	8001da0 <EF_PutString>
	  //
	  // Display hour and minute ON and OFF



	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004a66:	4841      	ldr	r0, [pc, #260]	; (8004b6c <drawschedulePanel+0x474>)
 8004a68:	f7fc ff80 	bl	800196c <EF_SetFont>
	  if(NrOfschedule == 1)
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	f040 80db 	bne.w	8004c2a <drawschedulePanel+0x532>
	  {
		  // Read hour and minute of ON and OFF
		  EEPROM_ScheduleHourOnRead(1, &hourOnschedule1);
 8004a74:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004a78:	4619      	mov	r1, r3
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	f7fe fb9b 	bl	80031b6 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(1, &minuteOnschedule1);
 8004a80:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8004a84:	4619      	mov	r1, r3
 8004a86:	2001      	movs	r0, #1
 8004a88:	f7fe fbb9 	bl	80031fe <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(1, &hourOffschedule1);
 8004a8c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8004a90:	4619      	mov	r1, r3
 8004a92:	2001      	movs	r0, #1
 8004a94:	f7fe fbd7 	bl	8003246 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(1, &minuteOffschedule1);
 8004a98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	f7fe fbf5 	bl	800328e <EEPROM_ScheduleMinuteOffRead>
		  // Read day of week and relay / lights in current schedule
		  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 8004aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	2001      	movs	r0, #1
 8004aac:	f7fe fa32 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 8004ab0:	f107 031c 	add.w	r3, r7, #28
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	f7fe faa8 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>

		  if(hourOnschedule1 > 23) hourOnschedule1 = 23;
 8004abc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004ac0:	2b17      	cmp	r3, #23
 8004ac2:	d902      	bls.n	8004aca <drawschedulePanel+0x3d2>
 8004ac4:	2317      	movs	r3, #23
 8004ac6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  if(minuteOnschedule1 > 59) minuteOnschedule1 = 59;
 8004aca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004ace:	2b3b      	cmp	r3, #59	; 0x3b
 8004ad0:	d902      	bls.n	8004ad8 <drawschedulePanel+0x3e0>
 8004ad2:	233b      	movs	r3, #59	; 0x3b
 8004ad4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  if(hourOffschedule1 > 23) hourOffschedule1 = 23;
 8004ad8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004adc:	2b17      	cmp	r3, #23
 8004ade:	d902      	bls.n	8004ae6 <drawschedulePanel+0x3ee>
 8004ae0:	2317      	movs	r3, #23
 8004ae2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		  if(minuteOffschedule1 > 59) minuteOffschedule1 = 59;
 8004ae6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004aea:	2b3b      	cmp	r3, #59	; 0x3b
 8004aec:	d902      	bls.n	8004af4 <drawschedulePanel+0x3fc>
 8004aee:	233b      	movs	r3, #59	; 0x3b
 8004af0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

		  if((hourOnschedule1 < 10)&&(minuteOnschedule1 < 10))sprintf((char*)Msg, "ON:   0%d  :0%d", hourOnschedule1, minuteOnschedule1);
 8004af4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004af8:	2b09      	cmp	r3, #9
 8004afa:	d80d      	bhi.n	8004b18 <drawschedulePanel+0x420>
 8004afc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b00:	2b09      	cmp	r3, #9
 8004b02:	d809      	bhi.n	8004b18 <drawschedulePanel+0x420>
 8004b04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b08:	461a      	mov	r2, r3
 8004b0a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b0e:	4918      	ldr	r1, [pc, #96]	; (8004b70 <drawschedulePanel+0x478>)
 8004b10:	4811      	ldr	r0, [pc, #68]	; (8004b58 <drawschedulePanel+0x460>)
 8004b12:	f00e f8a9 	bl	8012c68 <siprintf>
 8004b16:	e03a      	b.n	8004b8e <drawschedulePanel+0x496>
		  else if(hourOnschedule1 < 10) sprintf((char*)Msg, "ON:   0%d  : %d", hourOnschedule1, minuteOnschedule1);
 8004b18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b1c:	2b09      	cmp	r3, #9
 8004b1e:	d809      	bhi.n	8004b34 <drawschedulePanel+0x43c>
 8004b20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b24:	461a      	mov	r2, r3
 8004b26:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b2a:	4912      	ldr	r1, [pc, #72]	; (8004b74 <drawschedulePanel+0x47c>)
 8004b2c:	480a      	ldr	r0, [pc, #40]	; (8004b58 <drawschedulePanel+0x460>)
 8004b2e:	f00e f89b 	bl	8012c68 <siprintf>
 8004b32:	e02c      	b.n	8004b8e <drawschedulePanel+0x496>
		  else if (minuteOnschedule1 < 10) sprintf((char*)Msg, "ON:    %d  :0%d", hourOnschedule1, minuteOnschedule1);
 8004b34:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b38:	2b09      	cmp	r3, #9
 8004b3a:	d81f      	bhi.n	8004b7c <drawschedulePanel+0x484>
 8004b3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b40:	461a      	mov	r2, r3
 8004b42:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b46:	490c      	ldr	r1, [pc, #48]	; (8004b78 <drawschedulePanel+0x480>)
 8004b48:	4803      	ldr	r0, [pc, #12]	; (8004b58 <drawschedulePanel+0x460>)
 8004b4a:	f00e f88d 	bl	8012c68 <siprintf>
 8004b4e:	e01e      	b.n	8004b8e <drawschedulePanel+0x496>
 8004b50:	08028554 	.word	0x08028554
 8004b54:	08016c28 	.word	0x08016c28
 8004b58:	200002cc 	.word	0x200002cc
 8004b5c:	08016c40 	.word	0x08016c40
 8004b60:	08016c64 	.word	0x08016c64
 8004b64:	08016c68 	.word	0x08016c68
 8004b68:	08016c6c 	.word	0x08016c6c
 8004b6c:	0802a4cc 	.word	0x0802a4cc
 8004b70:	08016c74 	.word	0x08016c74
 8004b74:	08016c84 	.word	0x08016c84
 8004b78:	08016c94 	.word	0x08016c94
		  else sprintf((char*)Msg, "ON:    %d  : %d", hourOnschedule1, minuteOnschedule1);
 8004b7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b80:	461a      	mov	r2, r3
 8004b82:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b86:	498f      	ldr	r1, [pc, #572]	; (8004dc4 <drawschedulePanel+0x6cc>)
 8004b88:	488f      	ldr	r0, [pc, #572]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004b8a:	f00e f86d 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004b8e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004b92:	9301      	str	r3, [sp, #4]
 8004b94:	2301      	movs	r3, #1
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	2264      	movs	r2, #100	; 0x64
 8004b9c:	210a      	movs	r1, #10
 8004b9e:	488a      	ldr	r0, [pc, #552]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004ba0:	f7fd f8fe 	bl	8001da0 <EF_PutString>

		  if((hourOffschedule1 < 10)&&(minuteOffschedule1 < 10))sprintf((char*)Msg, "OFF: 0%d  :0%d", hourOffschedule1, minuteOffschedule1);
 8004ba4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004ba8:	2b09      	cmp	r3, #9
 8004baa:	d80d      	bhi.n	8004bc8 <drawschedulePanel+0x4d0>
 8004bac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004bb0:	2b09      	cmp	r3, #9
 8004bb2:	d809      	bhi.n	8004bc8 <drawschedulePanel+0x4d0>
 8004bb4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004bb8:	461a      	mov	r2, r3
 8004bba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004bbe:	4983      	ldr	r1, [pc, #524]	; (8004dcc <drawschedulePanel+0x6d4>)
 8004bc0:	4881      	ldr	r0, [pc, #516]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004bc2:	f00e f851 	bl	8012c68 <siprintf>
 8004bc6:	e024      	b.n	8004c12 <drawschedulePanel+0x51a>
		  else if(hourOffschedule1 < 10) sprintf((char*)Msg, "OFF: 0%d  : %d", hourOffschedule1, minuteOffschedule1);
 8004bc8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004bcc:	2b09      	cmp	r3, #9
 8004bce:	d809      	bhi.n	8004be4 <drawschedulePanel+0x4ec>
 8004bd0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004bda:	497d      	ldr	r1, [pc, #500]	; (8004dd0 <drawschedulePanel+0x6d8>)
 8004bdc:	487a      	ldr	r0, [pc, #488]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004bde:	f00e f843 	bl	8012c68 <siprintf>
 8004be2:	e016      	b.n	8004c12 <drawschedulePanel+0x51a>
		  else if (minuteOffschedule1 < 10) sprintf((char*)Msg, "OFF:  %d  :0%d", hourOffschedule1, minuteOffschedule1);
 8004be4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004be8:	2b09      	cmp	r3, #9
 8004bea:	d809      	bhi.n	8004c00 <drawschedulePanel+0x508>
 8004bec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004bf6:	4977      	ldr	r1, [pc, #476]	; (8004dd4 <drawschedulePanel+0x6dc>)
 8004bf8:	4873      	ldr	r0, [pc, #460]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004bfa:	f00e f835 	bl	8012c68 <siprintf>
 8004bfe:	e008      	b.n	8004c12 <drawschedulePanel+0x51a>
		  else sprintf((char*)Msg, "OFF:  %d  : %d", hourOffschedule1, minuteOffschedule1);
 8004c00:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004c04:	461a      	mov	r2, r3
 8004c06:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004c0a:	4973      	ldr	r1, [pc, #460]	; (8004dd8 <drawschedulePanel+0x6e0>)
 8004c0c:	486e      	ldr	r0, [pc, #440]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004c0e:	f00e f82b 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004c12:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004c16:	9301      	str	r3, [sp, #4]
 8004c18:	2301      	movs	r3, #1
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	2287      	movs	r2, #135	; 0x87
 8004c20:	210a      	movs	r1, #10
 8004c22:	4869      	ldr	r0, [pc, #420]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004c24:	f7fd f8bc 	bl	8001da0 <EF_PutString>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
	  }
}
 8004c28:	e0c7      	b.n	8004dba <drawschedulePanel+0x6c2>
	  else if(NrOfschedule == 2)
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	f040 80c4 	bne.w	8004dba <drawschedulePanel+0x6c2>
		  EEPROM_ScheduleHourOnRead(2, &hourOnschedule2);
 8004c32:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8004c36:	4619      	mov	r1, r3
 8004c38:	2002      	movs	r0, #2
 8004c3a:	f7fe fabc 	bl	80031b6 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(2, &minuteOnschedule2);
 8004c3e:	f107 0331 	add.w	r3, r7, #49	; 0x31
 8004c42:	4619      	mov	r1, r3
 8004c44:	2002      	movs	r0, #2
 8004c46:	f7fe fada 	bl	80031fe <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(2, &hourOffschedule2);
 8004c4a:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8004c4e:	4619      	mov	r1, r3
 8004c50:	2002      	movs	r0, #2
 8004c52:	f7fe faf8 	bl	8003246 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(2, &minuteOffschedule2);
 8004c56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	2002      	movs	r0, #2
 8004c5e:	f7fe fb16 	bl	800328e <EEPROM_ScheduleMinuteOffRead>
		  EEPROM_ScheduleDayInWeekRead(2, schedule2DayInWeekTab);
 8004c62:	f107 0314 	add.w	r3, r7, #20
 8004c66:	4619      	mov	r1, r3
 8004c68:	2002      	movs	r0, #2
 8004c6a:	f7fe f953 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule2RelayAndSwitchTab);
 8004c6e:	f107 0308 	add.w	r3, r7, #8
 8004c72:	4619      	mov	r1, r3
 8004c74:	2002      	movs	r0, #2
 8004c76:	f7fe f9c9 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>
		  if(hourOnschedule2 > 23) hourOnschedule2 = 23;
 8004c7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c7e:	2b17      	cmp	r3, #23
 8004c80:	d902      	bls.n	8004c88 <drawschedulePanel+0x590>
 8004c82:	2317      	movs	r3, #23
 8004c84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  if(minuteOnschedule2 > 59) minuteOnschedule2 = 59;
 8004c88:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004c8c:	2b3b      	cmp	r3, #59	; 0x3b
 8004c8e:	d902      	bls.n	8004c96 <drawschedulePanel+0x59e>
 8004c90:	233b      	movs	r3, #59	; 0x3b
 8004c92:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		  if(hourOffschedule2 > 23) hourOffschedule2 = 23;
 8004c96:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004c9a:	2b17      	cmp	r3, #23
 8004c9c:	d902      	bls.n	8004ca4 <drawschedulePanel+0x5ac>
 8004c9e:	2317      	movs	r3, #23
 8004ca0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		  if(minuteOffschedule2 > 59) minuteOffschedule2 = 59;
 8004ca4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004ca8:	2b3b      	cmp	r3, #59	; 0x3b
 8004caa:	d902      	bls.n	8004cb2 <drawschedulePanel+0x5ba>
 8004cac:	233b      	movs	r3, #59	; 0x3b
 8004cae:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		  if((hourOnschedule2 < 10)&&(minuteOnschedule2 < 10))sprintf((char*)Msg, "ON:    0%d :0%d", hourOnschedule2, minuteOnschedule2);
 8004cb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cb6:	2b09      	cmp	r3, #9
 8004cb8:	d80d      	bhi.n	8004cd6 <drawschedulePanel+0x5de>
 8004cba:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004cbe:	2b09      	cmp	r3, #9
 8004cc0:	d809      	bhi.n	8004cd6 <drawschedulePanel+0x5de>
 8004cc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004ccc:	4943      	ldr	r1, [pc, #268]	; (8004ddc <drawschedulePanel+0x6e4>)
 8004cce:	483e      	ldr	r0, [pc, #248]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004cd0:	f00d ffca 	bl	8012c68 <siprintf>
 8004cd4:	e024      	b.n	8004d20 <drawschedulePanel+0x628>
		  else if(hourOnschedule2 < 10) sprintf((char*)Msg, "ON:    0%d : %d", hourOnschedule2, minuteOnschedule2);
 8004cd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cda:	2b09      	cmp	r3, #9
 8004cdc:	d809      	bhi.n	8004cf2 <drawschedulePanel+0x5fa>
 8004cde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004ce8:	493d      	ldr	r1, [pc, #244]	; (8004de0 <drawschedulePanel+0x6e8>)
 8004cea:	4837      	ldr	r0, [pc, #220]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004cec:	f00d ffbc 	bl	8012c68 <siprintf>
 8004cf0:	e016      	b.n	8004d20 <drawschedulePanel+0x628>
		  else if (minuteOnschedule2 < 10) sprintf((char*)Msg, "ON:     %d :0%d", hourOnschedule2, minuteOnschedule2);
 8004cf2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004cf6:	2b09      	cmp	r3, #9
 8004cf8:	d809      	bhi.n	8004d0e <drawschedulePanel+0x616>
 8004cfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004d04:	4937      	ldr	r1, [pc, #220]	; (8004de4 <drawschedulePanel+0x6ec>)
 8004d06:	4830      	ldr	r0, [pc, #192]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004d08:	f00d ffae 	bl	8012c68 <siprintf>
 8004d0c:	e008      	b.n	8004d20 <drawschedulePanel+0x628>
		  else sprintf((char*)Msg, "ON:     %d : %d", hourOnschedule2, minuteOnschedule2);
 8004d0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d12:	461a      	mov	r2, r3
 8004d14:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004d18:	4933      	ldr	r1, [pc, #204]	; (8004de8 <drawschedulePanel+0x6f0>)
 8004d1a:	482b      	ldr	r0, [pc, #172]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004d1c:	f00d ffa4 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004d20:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004d24:	9301      	str	r3, [sp, #4]
 8004d26:	2301      	movs	r3, #1
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	2264      	movs	r2, #100	; 0x64
 8004d2e:	210a      	movs	r1, #10
 8004d30:	4825      	ldr	r0, [pc, #148]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004d32:	f7fd f835 	bl	8001da0 <EF_PutString>
		  if((hourOffschedule2 < 10)&&(minuteOffschedule2 < 10))sprintf((char*)Msg, "OFF:  0%d :0%d", hourOffschedule2, minuteOffschedule2);
 8004d36:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004d3a:	2b09      	cmp	r3, #9
 8004d3c:	d80d      	bhi.n	8004d5a <drawschedulePanel+0x662>
 8004d3e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d42:	2b09      	cmp	r3, #9
 8004d44:	d809      	bhi.n	8004d5a <drawschedulePanel+0x662>
 8004d46:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d50:	4926      	ldr	r1, [pc, #152]	; (8004dec <drawschedulePanel+0x6f4>)
 8004d52:	481d      	ldr	r0, [pc, #116]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004d54:	f00d ff88 	bl	8012c68 <siprintf>
 8004d58:	e024      	b.n	8004da4 <drawschedulePanel+0x6ac>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
 8004d5a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004d5e:	2b09      	cmp	r3, #9
 8004d60:	d809      	bhi.n	8004d76 <drawschedulePanel+0x67e>
 8004d62:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004d66:	461a      	mov	r2, r3
 8004d68:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d6c:	4920      	ldr	r1, [pc, #128]	; (8004df0 <drawschedulePanel+0x6f8>)
 8004d6e:	4816      	ldr	r0, [pc, #88]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004d70:	f00d ff7a 	bl	8012c68 <siprintf>
 8004d74:	e016      	b.n	8004da4 <drawschedulePanel+0x6ac>
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
 8004d76:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d7a:	2b09      	cmp	r3, #9
 8004d7c:	d809      	bhi.n	8004d92 <drawschedulePanel+0x69a>
 8004d7e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004d82:	461a      	mov	r2, r3
 8004d84:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d88:	491a      	ldr	r1, [pc, #104]	; (8004df4 <drawschedulePanel+0x6fc>)
 8004d8a:	480f      	ldr	r0, [pc, #60]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004d8c:	f00d ff6c 	bl	8012c68 <siprintf>
 8004d90:	e008      	b.n	8004da4 <drawschedulePanel+0x6ac>
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
 8004d92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004d96:	461a      	mov	r2, r3
 8004d98:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d9c:	4916      	ldr	r1, [pc, #88]	; (8004df8 <drawschedulePanel+0x700>)
 8004d9e:	480a      	ldr	r0, [pc, #40]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004da0:	f00d ff62 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004da4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004da8:	9301      	str	r3, [sp, #4]
 8004daa:	2301      	movs	r3, #1
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	2300      	movs	r3, #0
 8004db0:	2287      	movs	r2, #135	; 0x87
 8004db2:	210c      	movs	r1, #12
 8004db4:	4804      	ldr	r0, [pc, #16]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004db6:	f7fc fff3 	bl	8001da0 <EF_PutString>
}
 8004dba:	bf00      	nop
 8004dbc:	3738      	adds	r7, #56	; 0x38
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	08016ca4 	.word	0x08016ca4
 8004dc8:	200002cc 	.word	0x200002cc
 8004dcc:	08016cb4 	.word	0x08016cb4
 8004dd0:	08016cc4 	.word	0x08016cc4
 8004dd4:	08016cd4 	.word	0x08016cd4
 8004dd8:	08016ce4 	.word	0x08016ce4
 8004ddc:	08016cf4 	.word	0x08016cf4
 8004de0:	08016d04 	.word	0x08016d04
 8004de4:	08016d14 	.word	0x08016d14
 8004de8:	08016d24 	.word	0x08016d24
 8004dec:	08016d34 	.word	0x08016d34
 8004df0:	08016d44 	.word	0x08016d44
 8004df4:	08016d54 	.word	0x08016d54
 8004df8:	08016d64 	.word	0x08016d64

08004dfc <showSchedule1Panel>:

void showSchedule1Panel()
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004e02:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004e06:	f7fd f9b5 	bl	8002174 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004e0a:	483f      	ldr	r0, [pc, #252]	; (8004f08 <showSchedule1Panel+0x10c>)
 8004e0c:	f7fc fdae 	bl	800196c <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 1");
 8004e10:	493e      	ldr	r1, [pc, #248]	; (8004f0c <showSchedule1Panel+0x110>)
 8004e12:	483f      	ldr	r0, [pc, #252]	; (8004f10 <showSchedule1Panel+0x114>)
 8004e14:	f00d ff28 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004e18:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004e1c:	9301      	str	r3, [sp, #4]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e26:	220a      	movs	r2, #10
 8004e28:	212a      	movs	r1, #42	; 0x2a
 8004e2a:	4839      	ldr	r0, [pc, #228]	; (8004f10 <showSchedule1Panel+0x114>)
 8004e2c:	f7fc ffb8 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004e30:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	2329      	movs	r3, #41	; 0x29
 8004e38:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e3c:	2129      	movs	r1, #41	; 0x29
 8004e3e:	2000      	movs	r0, #0
 8004e40:	f7fc fae4 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004e44:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	232b      	movs	r3, #43	; 0x2b
 8004e4c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e50:	212b      	movs	r1, #43	; 0x2b
 8004e52:	2000      	movs	r0, #0
 8004e54:	f7fc fada 	bl	800140c <GFX_DrawLine>

	  drawschedulePanel(1);
 8004e58:	2001      	movs	r0, #1
 8004e5a:	f7ff fc4d 	bl	80046f8 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004e5e:	482d      	ldr	r0, [pc, #180]	; (8004f14 <showSchedule1Panel+0x118>)
 8004e60:	f7fc fd84 	bl	800196c <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004e64:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004e68:	9301      	str	r3, [sp, #4]
 8004e6a:	2305      	movs	r3, #5
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	2314      	movs	r3, #20
 8004e70:	225f      	movs	r2, #95	; 0x5f
 8004e72:	21d8      	movs	r1, #216	; 0xd8
 8004e74:	20dc      	movs	r0, #220	; 0xdc
 8004e76:	f7fc fd28 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "HARM. 2=>");
 8004e7a:	4927      	ldr	r1, [pc, #156]	; (8004f18 <showSchedule1Panel+0x11c>)
 8004e7c:	4824      	ldr	r0, [pc, #144]	; (8004f10 <showSchedule1Panel+0x114>)
 8004e7e:	f00d fef3 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004e82:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004e86:	9301      	str	r3, [sp, #4]
 8004e88:	2300      	movs	r3, #0
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	22da      	movs	r2, #218	; 0xda
 8004e90:	21e6      	movs	r1, #230	; 0xe6
 8004e92:	481f      	ldr	r0, [pc, #124]	; (8004f10 <showSchedule1Panel+0x114>)
 8004e94:	f7fc ff84 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004e98:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e9c:	9301      	str	r3, [sp, #4]
 8004e9e:	2305      	movs	r3, #5
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	2314      	movs	r3, #20
 8004ea4:	225a      	movs	r2, #90	; 0x5a
 8004ea6:	21d8      	movs	r1, #216	; 0xd8
 8004ea8:	2078      	movs	r0, #120	; 0x78
 8004eaa:	f7fc fd0e 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004eae:	491b      	ldr	r1, [pc, #108]	; (8004f1c <showSchedule1Panel+0x120>)
 8004eb0:	4817      	ldr	r0, [pc, #92]	; (8004f10 <showSchedule1Panel+0x114>)
 8004eb2:	f00d fed9 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004eb6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004eba:	9301      	str	r3, [sp, #4]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	22da      	movs	r2, #218	; 0xda
 8004ec4:	217e      	movs	r1, #126	; 0x7e
 8004ec6:	4812      	ldr	r0, [pc, #72]	; (8004f10 <showSchedule1Panel+0x114>)
 8004ec8:	f7fc ff6a 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004ecc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ed0:	9301      	str	r3, [sp, #4]
 8004ed2:	2305      	movs	r3, #5
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	2314      	movs	r3, #20
 8004ed8:	2264      	movs	r2, #100	; 0x64
 8004eda:	21d8      	movs	r1, #216	; 0xd8
 8004edc:	200a      	movs	r0, #10
 8004ede:	f7fc fcf4 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004ee2:	490f      	ldr	r1, [pc, #60]	; (8004f20 <showSchedule1Panel+0x124>)
 8004ee4:	480a      	ldr	r0, [pc, #40]	; (8004f10 <showSchedule1Panel+0x114>)
 8004ee6:	f00d febf 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004eea:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004eee:	9301      	str	r3, [sp, #4]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	22da      	movs	r2, #218	; 0xda
 8004ef8:	210d      	movs	r1, #13
 8004efa:	4805      	ldr	r0, [pc, #20]	; (8004f10 <showSchedule1Panel+0x114>)
 8004efc:	f7fc ff50 	bl	8001da0 <EF_PutString>
}
 8004f00:	bf00      	nop
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	0802a4cc 	.word	0x0802a4cc
 8004f0c:	08016d74 	.word	0x08016d74
 8004f10:	200002cc 	.word	0x200002cc
 8004f14:	08028554 	.word	0x08028554
 8004f18:	08016d84 	.word	0x08016d84
 8004f1c:	08016d90 	.word	0x08016d90
 8004f20:	08016d98 	.word	0x08016d98

08004f24 <showSchedule2Panel>:

void showSchedule2Panel()
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004f2a:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004f2e:	f7fd f921 	bl	8002174 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004f32:	4832      	ldr	r0, [pc, #200]	; (8004ffc <showSchedule2Panel+0xd8>)
 8004f34:	f7fc fd1a 	bl	800196c <EF_SetFont>
	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 2");
 8004f38:	4931      	ldr	r1, [pc, #196]	; (8005000 <showSchedule2Panel+0xdc>)
 8004f3a:	4832      	ldr	r0, [pc, #200]	; (8005004 <showSchedule2Panel+0xe0>)
 8004f3c:	f00d fe94 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004f40:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	2300      	movs	r3, #0
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004f4e:	220a      	movs	r2, #10
 8004f50:	212a      	movs	r1, #42	; 0x2a
 8004f52:	482c      	ldr	r0, [pc, #176]	; (8005004 <showSchedule2Panel+0xe0>)
 8004f54:	f7fc ff24 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004f58:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	2329      	movs	r3, #41	; 0x29
 8004f60:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004f64:	2129      	movs	r1, #41	; 0x29
 8004f66:	2000      	movs	r0, #0
 8004f68:	f7fc fa50 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004f6c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	232b      	movs	r3, #43	; 0x2b
 8004f74:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004f78:	212b      	movs	r1, #43	; 0x2b
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	f7fc fa46 	bl	800140c <GFX_DrawLine>

	  drawschedulePanel(2);
 8004f80:	2002      	movs	r0, #2
 8004f82:	f7ff fbb9 	bl	80046f8 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004f86:	4820      	ldr	r0, [pc, #128]	; (8005008 <showSchedule2Panel+0xe4>)
 8004f88:	f7fc fcf0 	bl	800196c <EF_SetFont>
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004f8c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004f90:	9301      	str	r3, [sp, #4]
 8004f92:	2305      	movs	r3, #5
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	2314      	movs	r3, #20
 8004f98:	225a      	movs	r2, #90	; 0x5a
 8004f9a:	21d8      	movs	r1, #216	; 0xd8
 8004f9c:	2078      	movs	r0, #120	; 0x78
 8004f9e:	f7fc fc94 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004fa2:	491a      	ldr	r1, [pc, #104]	; (800500c <showSchedule2Panel+0xe8>)
 8004fa4:	4817      	ldr	r0, [pc, #92]	; (8005004 <showSchedule2Panel+0xe0>)
 8004fa6:	f00d fe5f 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004faa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004fae:	9301      	str	r3, [sp, #4]
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	22da      	movs	r2, #218	; 0xda
 8004fb8:	217e      	movs	r1, #126	; 0x7e
 8004fba:	4812      	ldr	r0, [pc, #72]	; (8005004 <showSchedule2Panel+0xe0>)
 8004fbc:	f7fc fef0 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004fc0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004fc4:	9301      	str	r3, [sp, #4]
 8004fc6:	2305      	movs	r3, #5
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	2314      	movs	r3, #20
 8004fcc:	2264      	movs	r2, #100	; 0x64
 8004fce:	21d8      	movs	r1, #216	; 0xd8
 8004fd0:	200a      	movs	r0, #10
 8004fd2:	f7fc fc7a 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004fd6:	490e      	ldr	r1, [pc, #56]	; (8005010 <showSchedule2Panel+0xec>)
 8004fd8:	480a      	ldr	r0, [pc, #40]	; (8005004 <showSchedule2Panel+0xe0>)
 8004fda:	f00d fe45 	bl	8012c68 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004fde:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004fe2:	9301      	str	r3, [sp, #4]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	2300      	movs	r3, #0
 8004fea:	22da      	movs	r2, #218	; 0xda
 8004fec:	210d      	movs	r1, #13
 8004fee:	4805      	ldr	r0, [pc, #20]	; (8005004 <showSchedule2Panel+0xe0>)
 8004ff0:	f7fc fed6 	bl	8001da0 <EF_PutString>
}
 8004ff4:	bf00      	nop
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	0802a4cc 	.word	0x0802a4cc
 8005000:	08016da4 	.word	0x08016da4
 8005004:	200002cc 	.word	0x200002cc
 8005008:	08028554 	.word	0x08028554
 800500c:	08016d90 	.word	0x08016d90
 8005010:	08016d98 	.word	0x08016d98

08005014 <ChangeHourOnScreen>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Change displayed time, if is other than current time
//
void ChangeHourOnScreen()
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 800501a:	f7fd fd37 	bl	8002a8c <DS3231_GetHour>
 800501e:	4603      	mov	r3, r0
 8005020:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 8005022:	f7fd fd3f 	bl	8002aa4 <DS3231_GetMinute>
 8005026:	4603      	mov	r3, r0
 8005028:	71bb      	strb	r3, [r7, #6]

	  EF_SetFont(&arialBlack_20ptFontInfo);
 800502a:	482f      	ldr	r0, [pc, #188]	; (80050e8 <ChangeHourOnScreen+0xd4>)
 800502c:	f7fc fc9e 	bl	800196c <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 8005030:	4b2e      	ldr	r3, [pc, #184]	; (80050ec <ChangeHourOnScreen+0xd8>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	79fa      	ldrb	r2, [r7, #7]
 8005036:	429a      	cmp	r2, r3
 8005038:	d021      	beq.n	800507e <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 800503a:	4b2d      	ldr	r3, [pc, #180]	; (80050f0 <ChangeHourOnScreen+0xdc>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d11a      	bne.n	8005078 <ChangeHourOnScreen+0x64>
		  {
			  if(CHour < 10)
 8005042:	79fb      	ldrb	r3, [r7, #7]
 8005044:	2b09      	cmp	r3, #9
 8005046:	d806      	bhi.n	8005056 <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 8005048:	79fb      	ldrb	r3, [r7, #7]
 800504a:	461a      	mov	r2, r3
 800504c:	4929      	ldr	r1, [pc, #164]	; (80050f4 <ChangeHourOnScreen+0xe0>)
 800504e:	482a      	ldr	r0, [pc, #168]	; (80050f8 <ChangeHourOnScreen+0xe4>)
 8005050:	f00d fe0a 	bl	8012c68 <siprintf>
 8005054:	e005      	b.n	8005062 <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 8005056:	79fb      	ldrb	r3, [r7, #7]
 8005058:	461a      	mov	r2, r3
 800505a:	4928      	ldr	r1, [pc, #160]	; (80050fc <ChangeHourOnScreen+0xe8>)
 800505c:	4826      	ldr	r0, [pc, #152]	; (80050f8 <ChangeHourOnScreen+0xe4>)
 800505e:	f00d fe03 	bl	8012c68 <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005062:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005066:	9301      	str	r3, [sp, #4]
 8005068:	2301      	movs	r3, #1
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	2300      	movs	r3, #0
 800506e:	2232      	movs	r2, #50	; 0x32
 8005070:	2161      	movs	r1, #97	; 0x61
 8005072:	4821      	ldr	r0, [pc, #132]	; (80050f8 <ChangeHourOnScreen+0xe4>)
 8005074:	f7fc fe94 	bl	8001da0 <EF_PutString>
		  }
		  OldHours = CHour;
 8005078:	4a1c      	ldr	r2, [pc, #112]	; (80050ec <ChangeHourOnScreen+0xd8>)
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	7013      	strb	r3, [r2, #0]
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 800507e:	4b20      	ldr	r3, [pc, #128]	; (8005100 <ChangeHourOnScreen+0xec>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	79ba      	ldrb	r2, [r7, #6]
 8005084:	429a      	cmp	r2, r3
 8005086:	d02b      	beq.n	80050e0 <ChangeHourOnScreen+0xcc>
	  {
		  uint8_t  CDayOfWeek = DS3231_GetDayOfWeek();
 8005088:	f7fd fcf4 	bl	8002a74 <DS3231_GetDayOfWeek>
 800508c:	4603      	mov	r3, r0
 800508e:	717b      	strb	r3, [r7, #5]
		makeScheduleActivity(CHour, CMinute, CDayOfWeek); // Check if changed hour and minute are set in schedules
 8005090:	797a      	ldrb	r2, [r7, #5]
 8005092:	79b9      	ldrb	r1, [r7, #6]
 8005094:	79fb      	ldrb	r3, [r7, #7]
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fba4 	bl	80057e4 <makeScheduleActivity>

		  if(State == MENUTFT_PARAMETERS)
 800509c:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <ChangeHourOnScreen+0xdc>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d11a      	bne.n	80050da <ChangeHourOnScreen+0xc6>
		  {
			  if(CMinute < 10)
 80050a4:	79bb      	ldrb	r3, [r7, #6]
 80050a6:	2b09      	cmp	r3, #9
 80050a8:	d806      	bhi.n	80050b8 <ChangeHourOnScreen+0xa4>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 80050aa:	79bb      	ldrb	r3, [r7, #6]
 80050ac:	461a      	mov	r2, r3
 80050ae:	4915      	ldr	r1, [pc, #84]	; (8005104 <ChangeHourOnScreen+0xf0>)
 80050b0:	4811      	ldr	r0, [pc, #68]	; (80050f8 <ChangeHourOnScreen+0xe4>)
 80050b2:	f00d fdd9 	bl	8012c68 <siprintf>
 80050b6:	e005      	b.n	80050c4 <ChangeHourOnScreen+0xb0>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 80050b8:	79bb      	ldrb	r3, [r7, #6]
 80050ba:	461a      	mov	r2, r3
 80050bc:	4912      	ldr	r1, [pc, #72]	; (8005108 <ChangeHourOnScreen+0xf4>)
 80050be:	480e      	ldr	r0, [pc, #56]	; (80050f8 <ChangeHourOnScreen+0xe4>)
 80050c0:	f00d fdd2 	bl	8012c68 <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80050c4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80050c8:	9301      	str	r3, [sp, #4]
 80050ca:	2301      	movs	r3, #1
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	2300      	movs	r3, #0
 80050d0:	2232      	movs	r2, #50	; 0x32
 80050d2:	2196      	movs	r1, #150	; 0x96
 80050d4:	4808      	ldr	r0, [pc, #32]	; (80050f8 <ChangeHourOnScreen+0xe4>)
 80050d6:	f7fc fe63 	bl	8001da0 <EF_PutString>
		  }
		  OldMinutes = CMinute;
 80050da:	4a09      	ldr	r2, [pc, #36]	; (8005100 <ChangeHourOnScreen+0xec>)
 80050dc:	79bb      	ldrb	r3, [r7, #6]
 80050de:	7013      	strb	r3, [r2, #0]
	  }

}
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	0802a4cc 	.word	0x0802a4cc
 80050ec:	20000252 	.word	0x20000252
 80050f0:	200002a0 	.word	0x200002a0
 80050f4:	08016db4 	.word	0x08016db4
 80050f8:	200002cc 	.word	0x200002cc
 80050fc:	08016dbc 	.word	0x08016dbc
 8005100:	20000253 	.word	0x20000253
 8005104:	08016dc0 	.word	0x08016dc0
 8005108:	08016dc8 	.word	0x08016dc8

0800510c <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	4603      	mov	r3, r0
 8005114:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8005116:	79fb      	ldrb	r3, [r7, #7]
 8005118:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 800511a:	7bfb      	ldrb	r3, [r7, #15]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d104      	bne.n	800512a <predefinedActivityCzyszczenie+0x1e>
	{
		// Read which Relay was ON before turn on activity and restore state before activity
		EEPROM_RelayStateRestore();
 8005120:	f7fd fe88 	bl	8002e34 <EEPROM_RelayStateRestore>
		EEPROM_LightStateRestore();
 8005124:	f7fd febe 	bl	8002ea4 <EEPROM_LightStateRestore>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 8005128:	e005      	b.n	8005136 <predefinedActivityCzyszczenie+0x2a>
		SendComand(UCMD_RELAY_ALL_OFF);
 800512a:	2018      	movs	r0, #24
 800512c:	f004 fdcc 	bl	8009cc8 <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 8005130:	2019      	movs	r0, #25
 8005132:	f004 fdc9 	bl	8009cc8 <SendComand>
}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af02      	add	r7, sp, #8
 8005146:	4603      	mov	r3, r0
 8005148:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d13e      	bne.n	80051d2 <predefinedActivityKarmienie+0x92>
	{
		EEPROM_RelayStateRestore();
 8005154:	f7fd fe6e 	bl	8002e34 <EEPROM_RelayStateRestore>
		ActivityButtonState[0] = 0;
 8005158:	4b24      	ldr	r3, [pc, #144]	; (80051ec <predefinedActivityKarmienie+0xac>)
 800515a:	2200      	movs	r2, #0
 800515c:	701a      	strb	r2, [r3, #0]

		EF_SetFont(&arial_11ptFontInfo);
 800515e:	4824      	ldr	r0, [pc, #144]	; (80051f0 <predefinedActivityKarmienie+0xb0>)
 8005160:	f7fc fc04 	bl	800196c <EF_SetFont>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005164:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005168:	9301      	str	r3, [sp, #4]
 800516a:	230a      	movs	r3, #10
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	2328      	movs	r3, #40	; 0x28
 8005170:	2278      	movs	r2, #120	; 0x78
 8005172:	213c      	movs	r1, #60	; 0x3c
 8005174:	2064      	movs	r0, #100	; 0x64
 8005176:	f7fc fba8 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 800517a:	491e      	ldr	r1, [pc, #120]	; (80051f4 <predefinedActivityKarmienie+0xb4>)
 800517c:	481e      	ldr	r0, [pc, #120]	; (80051f8 <predefinedActivityKarmienie+0xb8>)
 800517e:	f00d fd73 	bl	8012c68 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005182:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005186:	9301      	str	r3, [sp, #4]
 8005188:	2300      	movs	r3, #0
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	2300      	movs	r3, #0
 800518e:	223e      	movs	r2, #62	; 0x3e
 8005190:	2177      	movs	r1, #119	; 0x77
 8005192:	4819      	ldr	r0, [pc, #100]	; (80051f8 <predefinedActivityKarmienie+0xb8>)
 8005194:	f7fc fe04 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8005198:	4918      	ldr	r1, [pc, #96]	; (80051fc <predefinedActivityKarmienie+0xbc>)
 800519a:	4817      	ldr	r0, [pc, #92]	; (80051f8 <predefinedActivityKarmienie+0xb8>)
 800519c:	f00d fd64 	bl	8012c68 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80051a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051a4:	9301      	str	r3, [sp, #4]
 80051a6:	2300      	movs	r3, #0
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	2300      	movs	r3, #0
 80051ac:	2250      	movs	r2, #80	; 0x50
 80051ae:	2193      	movs	r1, #147	; 0x93
 80051b0:	4811      	ldr	r0, [pc, #68]	; (80051f8 <predefinedActivityKarmienie+0xb8>)
 80051b2:	f7fc fdf5 	bl	8001da0 <EF_PutString>

		if(State == MENUTFT_LIGHTS)
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	2b05      	cmp	r3, #5
 80051ba:	d103      	bne.n	80051c4 <predefinedActivityKarmienie+0x84>
		{
			SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 80051bc:	2016      	movs	r0, #22
 80051be:	f004 fd83 	bl	8009cc8 <SendComand>
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
		ActivityButtonState[0] = 1;
	}

}
 80051c2:	e00f      	b.n	80051e4 <predefinedActivityKarmienie+0xa4>
		else if(State == MENUTFT_SWITCH)
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d10c      	bne.n	80051e4 <predefinedActivityKarmienie+0xa4>
			SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current lights state
 80051ca:	2015      	movs	r0, #21
 80051cc:	f004 fd7c 	bl	8009cc8 <SendComand>
}
 80051d0:	e008      	b.n	80051e4 <predefinedActivityKarmienie+0xa4>
		SendComand(UCMD_RELAY_ALL_OFF);
 80051d2:	2018      	movs	r0, #24
 80051d4:	f004 fd78 	bl	8009cc8 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 80051d8:	4809      	ldr	r0, [pc, #36]	; (8005200 <predefinedActivityKarmienie+0xc0>)
 80051da:	f00b f92d 	bl	8010438 <HAL_TIM_Base_Start_IT>
		ActivityButtonState[0] = 1;
 80051de:	4b03      	ldr	r3, [pc, #12]	; (80051ec <predefinedActivityKarmienie+0xac>)
 80051e0:	2201      	movs	r2, #1
 80051e2:	701a      	strb	r2, [r3, #0]
}
 80051e4:	bf00      	nop
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	20000250 	.word	0x20000250
 80051f0:	08028554 	.word	0x08028554
 80051f4:	08016b94 	.word	0x08016b94
 80051f8:	200002cc 	.word	0x200002cc
 80051fc:	08016ba4 	.word	0x08016ba4
 8005200:	2000099c 	.word	0x2000099c

08005204 <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button
//
void drawCurrentStateOfSwitches()
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 800520a:	487d      	ldr	r0, [pc, #500]	; (8005400 <drawCurrentStateOfSwitches+0x1fc>)
 800520c:	f7fc fbae 	bl	800196c <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 8005210:	4b7c      	ldr	r3, [pc, #496]	; (8005404 <drawCurrentStateOfSwitches+0x200>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d01c      	beq.n	8005252 <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005218:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800521c:	9301      	str	r3, [sp, #4]
 800521e:	2305      	movs	r3, #5
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	2315      	movs	r3, #21
 8005224:	2221      	movs	r2, #33	; 0x21
 8005226:	2141      	movs	r1, #65	; 0x41
 8005228:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800522c:	f7fc fb4d 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005230:	4975      	ldr	r1, [pc, #468]	; (8005408 <drawCurrentStateOfSwitches+0x204>)
 8005232:	4876      	ldr	r0, [pc, #472]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 8005234:	f00d fd18 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005238:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800523c:	9301      	str	r3, [sp, #4]
 800523e:	2300      	movs	r3, #0
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	2300      	movs	r3, #0
 8005244:	2243      	movs	r2, #67	; 0x43
 8005246:	f240 1111 	movw	r1, #273	; 0x111
 800524a:	4870      	ldr	r0, [pc, #448]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 800524c:	f7fc fda8 	bl	8001da0 <EF_PutString>
 8005250:	e01b      	b.n	800528a <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005252:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005256:	9301      	str	r3, [sp, #4]
 8005258:	2305      	movs	r3, #5
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	2315      	movs	r3, #21
 800525e:	2221      	movs	r2, #33	; 0x21
 8005260:	2141      	movs	r1, #65	; 0x41
 8005262:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005266:	f7fc fb30 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 800526a:	4969      	ldr	r1, [pc, #420]	; (8005410 <drawCurrentStateOfSwitches+0x20c>)
 800526c:	4867      	ldr	r0, [pc, #412]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 800526e:	f00d fcfb 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005272:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	2300      	movs	r3, #0
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	2300      	movs	r3, #0
 800527e:	2243      	movs	r2, #67	; 0x43
 8005280:	f240 1111 	movw	r1, #273	; 0x111
 8005284:	4861      	ldr	r0, [pc, #388]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 8005286:	f7fc fd8b 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 800528a:	4b5e      	ldr	r3, [pc, #376]	; (8005404 <drawCurrentStateOfSwitches+0x200>)
 800528c:	785b      	ldrb	r3, [r3, #1]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d01c      	beq.n	80052cc <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005292:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005296:	9301      	str	r3, [sp, #4]
 8005298:	2305      	movs	r3, #5
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	2315      	movs	r3, #21
 800529e:	2221      	movs	r2, #33	; 0x21
 80052a0:	215f      	movs	r1, #95	; 0x5f
 80052a2:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80052a6:	f7fc fb10 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80052aa:	4957      	ldr	r1, [pc, #348]	; (8005408 <drawCurrentStateOfSwitches+0x204>)
 80052ac:	4857      	ldr	r0, [pc, #348]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 80052ae:	f00d fcdb 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80052b2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	2300      	movs	r3, #0
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	2300      	movs	r3, #0
 80052be:	2261      	movs	r2, #97	; 0x61
 80052c0:	f240 1111 	movw	r1, #273	; 0x111
 80052c4:	4851      	ldr	r0, [pc, #324]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 80052c6:	f7fc fd6b 	bl	8001da0 <EF_PutString>
 80052ca:	e01b      	b.n	8005304 <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80052cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052d0:	9301      	str	r3, [sp, #4]
 80052d2:	2305      	movs	r3, #5
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	2315      	movs	r3, #21
 80052d8:	2221      	movs	r2, #33	; 0x21
 80052da:	215f      	movs	r1, #95	; 0x5f
 80052dc:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80052e0:	f7fc faf3 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80052e4:	494a      	ldr	r1, [pc, #296]	; (8005410 <drawCurrentStateOfSwitches+0x20c>)
 80052e6:	4849      	ldr	r0, [pc, #292]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 80052e8:	f00d fcbe 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80052ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052f0:	9301      	str	r3, [sp, #4]
 80052f2:	2300      	movs	r3, #0
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	2300      	movs	r3, #0
 80052f8:	2261      	movs	r2, #97	; 0x61
 80052fa:	f240 1111 	movw	r1, #273	; 0x111
 80052fe:	4843      	ldr	r0, [pc, #268]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 8005300:	f7fc fd4e 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 8005304:	4b3f      	ldr	r3, [pc, #252]	; (8005404 <drawCurrentStateOfSwitches+0x200>)
 8005306:	789b      	ldrb	r3, [r3, #2]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01c      	beq.n	8005346 <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800530c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005310:	9301      	str	r3, [sp, #4]
 8005312:	2305      	movs	r3, #5
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	2315      	movs	r3, #21
 8005318:	2221      	movs	r2, #33	; 0x21
 800531a:	217d      	movs	r1, #125	; 0x7d
 800531c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005320:	f7fc fad3 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005324:	4938      	ldr	r1, [pc, #224]	; (8005408 <drawCurrentStateOfSwitches+0x204>)
 8005326:	4839      	ldr	r0, [pc, #228]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 8005328:	f00d fc9e 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 800532c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	2300      	movs	r3, #0
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	2300      	movs	r3, #0
 8005338:	227f      	movs	r2, #127	; 0x7f
 800533a:	f240 1111 	movw	r1, #273	; 0x111
 800533e:	4833      	ldr	r0, [pc, #204]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 8005340:	f7fc fd2e 	bl	8001da0 <EF_PutString>
 8005344:	e01b      	b.n	800537e <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005346:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800534a:	9301      	str	r3, [sp, #4]
 800534c:	2305      	movs	r3, #5
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	2315      	movs	r3, #21
 8005352:	2221      	movs	r2, #33	; 0x21
 8005354:	217d      	movs	r1, #125	; 0x7d
 8005356:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800535a:	f7fc fab6 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 800535e:	492c      	ldr	r1, [pc, #176]	; (8005410 <drawCurrentStateOfSwitches+0x20c>)
 8005360:	482a      	ldr	r0, [pc, #168]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 8005362:	f00d fc81 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005366:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800536a:	9301      	str	r3, [sp, #4]
 800536c:	2300      	movs	r3, #0
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	2300      	movs	r3, #0
 8005372:	227f      	movs	r2, #127	; 0x7f
 8005374:	f240 1111 	movw	r1, #273	; 0x111
 8005378:	4824      	ldr	r0, [pc, #144]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 800537a:	f7fc fd11 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 800537e:	4b21      	ldr	r3, [pc, #132]	; (8005404 <drawCurrentStateOfSwitches+0x200>)
 8005380:	78db      	ldrb	r3, [r3, #3]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d01c      	beq.n	80053c0 <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005386:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800538a:	9301      	str	r3, [sp, #4]
 800538c:	2305      	movs	r3, #5
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	2315      	movs	r3, #21
 8005392:	2221      	movs	r2, #33	; 0x21
 8005394:	219b      	movs	r1, #155	; 0x9b
 8005396:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800539a:	f7fc fa96 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800539e:	491a      	ldr	r1, [pc, #104]	; (8005408 <drawCurrentStateOfSwitches+0x204>)
 80053a0:	481a      	ldr	r0, [pc, #104]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 80053a2:	f00d fc61 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80053a6:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80053aa:	9301      	str	r3, [sp, #4]
 80053ac:	2300      	movs	r3, #0
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	2300      	movs	r3, #0
 80053b2:	229d      	movs	r2, #157	; 0x9d
 80053b4:	f240 1111 	movw	r1, #273	; 0x111
 80053b8:	4814      	ldr	r0, [pc, #80]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 80053ba:	f7fc fcf1 	bl	8001da0 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 80053be:	e01b      	b.n	80053f8 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80053c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80053c4:	9301      	str	r3, [sp, #4]
 80053c6:	2305      	movs	r3, #5
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	2315      	movs	r3, #21
 80053cc:	2221      	movs	r2, #33	; 0x21
 80053ce:	219b      	movs	r1, #155	; 0x9b
 80053d0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80053d4:	f7fc fa79 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80053d8:	490d      	ldr	r1, [pc, #52]	; (8005410 <drawCurrentStateOfSwitches+0x20c>)
 80053da:	480c      	ldr	r0, [pc, #48]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 80053dc:	f00d fc44 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80053e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	2300      	movs	r3, #0
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	2300      	movs	r3, #0
 80053ec:	229d      	movs	r2, #157	; 0x9d
 80053ee:	f240 1111 	movw	r1, #273	; 0x111
 80053f2:	4806      	ldr	r0, [pc, #24]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 80053f4:	f7fc fcd4 	bl	8001da0 <EF_PutString>
}
 80053f8:	bf00      	nop
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	08028554 	.word	0x08028554
 8005404:	200002b8 	.word	0x200002b8
 8005408:	08016ba0 	.word	0x08016ba0
 800540c:	200002cc 	.word	0x200002cc
 8005410:	08016ba4 	.word	0x08016ba4

08005414 <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 800541a:	4875      	ldr	r0, [pc, #468]	; (80055f0 <drawCurrentStateOfLights+0x1dc>)
 800541c:	f7fc faa6 	bl	800196c <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 8005420:	4b74      	ldr	r3, [pc, #464]	; (80055f4 <drawCurrentStateOfLights+0x1e0>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01a      	beq.n	800545e <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005428:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800542c:	9301      	str	r3, [sp, #4]
 800542e:	2305      	movs	r3, #5
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	2315      	movs	r3, #21
 8005434:	2221      	movs	r2, #33	; 0x21
 8005436:	2141      	movs	r1, #65	; 0x41
 8005438:	20c8      	movs	r0, #200	; 0xc8
 800543a:	f7fc fa46 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800543e:	496e      	ldr	r1, [pc, #440]	; (80055f8 <drawCurrentStateOfLights+0x1e4>)
 8005440:	486e      	ldr	r0, [pc, #440]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 8005442:	f00d fc11 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005446:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800544a:	9301      	str	r3, [sp, #4]
 800544c:	2300      	movs	r3, #0
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	2300      	movs	r3, #0
 8005452:	2243      	movs	r2, #67	; 0x43
 8005454:	21cb      	movs	r1, #203	; 0xcb
 8005456:	4869      	ldr	r0, [pc, #420]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 8005458:	f7fc fca2 	bl	8001da0 <EF_PutString>
 800545c:	e019      	b.n	8005492 <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800545e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005462:	9301      	str	r3, [sp, #4]
 8005464:	2305      	movs	r3, #5
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	2315      	movs	r3, #21
 800546a:	2221      	movs	r2, #33	; 0x21
 800546c:	2141      	movs	r1, #65	; 0x41
 800546e:	20c8      	movs	r0, #200	; 0xc8
 8005470:	f7fc fa2b 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005474:	4962      	ldr	r1, [pc, #392]	; (8005600 <drawCurrentStateOfLights+0x1ec>)
 8005476:	4861      	ldr	r0, [pc, #388]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 8005478:	f00d fbf6 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800547c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	2300      	movs	r3, #0
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	2300      	movs	r3, #0
 8005488:	2243      	movs	r2, #67	; 0x43
 800548a:	21cb      	movs	r1, #203	; 0xcb
 800548c:	485b      	ldr	r0, [pc, #364]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 800548e:	f7fc fc87 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 8005492:	4b58      	ldr	r3, [pc, #352]	; (80055f4 <drawCurrentStateOfLights+0x1e0>)
 8005494:	785b      	ldrb	r3, [r3, #1]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d01a      	beq.n	80054d0 <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800549a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800549e:	9301      	str	r3, [sp, #4]
 80054a0:	2305      	movs	r3, #5
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	2315      	movs	r3, #21
 80054a6:	2221      	movs	r2, #33	; 0x21
 80054a8:	215f      	movs	r1, #95	; 0x5f
 80054aa:	20c8      	movs	r0, #200	; 0xc8
 80054ac:	f7fc fa0d 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80054b0:	4951      	ldr	r1, [pc, #324]	; (80055f8 <drawCurrentStateOfLights+0x1e4>)
 80054b2:	4852      	ldr	r0, [pc, #328]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 80054b4:	f00d fbd8 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80054b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	2300      	movs	r3, #0
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	2300      	movs	r3, #0
 80054c4:	2261      	movs	r2, #97	; 0x61
 80054c6:	21cb      	movs	r1, #203	; 0xcb
 80054c8:	484c      	ldr	r0, [pc, #304]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 80054ca:	f7fc fc69 	bl	8001da0 <EF_PutString>
 80054ce:	e019      	b.n	8005504 <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80054d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80054d4:	9301      	str	r3, [sp, #4]
 80054d6:	2305      	movs	r3, #5
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	2315      	movs	r3, #21
 80054dc:	2221      	movs	r2, #33	; 0x21
 80054de:	215f      	movs	r1, #95	; 0x5f
 80054e0:	20c8      	movs	r0, #200	; 0xc8
 80054e2:	f7fc f9f2 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80054e6:	4946      	ldr	r1, [pc, #280]	; (8005600 <drawCurrentStateOfLights+0x1ec>)
 80054e8:	4844      	ldr	r0, [pc, #272]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 80054ea:	f00d fbbd 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80054ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80054f2:	9301      	str	r3, [sp, #4]
 80054f4:	2300      	movs	r3, #0
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	2300      	movs	r3, #0
 80054fa:	2261      	movs	r2, #97	; 0x61
 80054fc:	21cb      	movs	r1, #203	; 0xcb
 80054fe:	483f      	ldr	r0, [pc, #252]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 8005500:	f7fc fc4e 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 8005504:	4b3b      	ldr	r3, [pc, #236]	; (80055f4 <drawCurrentStateOfLights+0x1e0>)
 8005506:	789b      	ldrb	r3, [r3, #2]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01a      	beq.n	8005542 <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800550c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005510:	9301      	str	r3, [sp, #4]
 8005512:	2305      	movs	r3, #5
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	2315      	movs	r3, #21
 8005518:	2221      	movs	r2, #33	; 0x21
 800551a:	217d      	movs	r1, #125	; 0x7d
 800551c:	20c8      	movs	r0, #200	; 0xc8
 800551e:	f7fc f9d4 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005522:	4935      	ldr	r1, [pc, #212]	; (80055f8 <drawCurrentStateOfLights+0x1e4>)
 8005524:	4835      	ldr	r0, [pc, #212]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 8005526:	f00d fb9f 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800552a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800552e:	9301      	str	r3, [sp, #4]
 8005530:	2300      	movs	r3, #0
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	2300      	movs	r3, #0
 8005536:	227f      	movs	r2, #127	; 0x7f
 8005538:	21cb      	movs	r1, #203	; 0xcb
 800553a:	4830      	ldr	r0, [pc, #192]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 800553c:	f7fc fc30 	bl	8001da0 <EF_PutString>
 8005540:	e019      	b.n	8005576 <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005542:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005546:	9301      	str	r3, [sp, #4]
 8005548:	2305      	movs	r3, #5
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	2315      	movs	r3, #21
 800554e:	2221      	movs	r2, #33	; 0x21
 8005550:	217d      	movs	r1, #125	; 0x7d
 8005552:	20c8      	movs	r0, #200	; 0xc8
 8005554:	f7fc f9b9 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005558:	4929      	ldr	r1, [pc, #164]	; (8005600 <drawCurrentStateOfLights+0x1ec>)
 800555a:	4828      	ldr	r0, [pc, #160]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 800555c:	f00d fb84 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005560:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005564:	9301      	str	r3, [sp, #4]
 8005566:	2300      	movs	r3, #0
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	2300      	movs	r3, #0
 800556c:	227f      	movs	r2, #127	; 0x7f
 800556e:	21cb      	movs	r1, #203	; 0xcb
 8005570:	4822      	ldr	r0, [pc, #136]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 8005572:	f7fc fc15 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 8005576:	4b1f      	ldr	r3, [pc, #124]	; (80055f4 <drawCurrentStateOfLights+0x1e0>)
 8005578:	78db      	ldrb	r3, [r3, #3]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d01a      	beq.n	80055b4 <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800557e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005582:	9301      	str	r3, [sp, #4]
 8005584:	2305      	movs	r3, #5
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	2315      	movs	r3, #21
 800558a:	2221      	movs	r2, #33	; 0x21
 800558c:	219b      	movs	r1, #155	; 0x9b
 800558e:	20c8      	movs	r0, #200	; 0xc8
 8005590:	f7fc f99b 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005594:	4918      	ldr	r1, [pc, #96]	; (80055f8 <drawCurrentStateOfLights+0x1e4>)
 8005596:	4819      	ldr	r0, [pc, #100]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 8005598:	f00d fb66 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800559c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80055a0:	9301      	str	r3, [sp, #4]
 80055a2:	2300      	movs	r3, #0
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	2300      	movs	r3, #0
 80055a8:	229d      	movs	r2, #157	; 0x9d
 80055aa:	21cb      	movs	r1, #203	; 0xcb
 80055ac:	4813      	ldr	r0, [pc, #76]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 80055ae:	f7fc fbf7 	bl	8001da0 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 80055b2:	e019      	b.n	80055e8 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80055b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80055b8:	9301      	str	r3, [sp, #4]
 80055ba:	2305      	movs	r3, #5
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	2315      	movs	r3, #21
 80055c0:	2221      	movs	r2, #33	; 0x21
 80055c2:	219b      	movs	r1, #155	; 0x9b
 80055c4:	20c8      	movs	r0, #200	; 0xc8
 80055c6:	f7fc f980 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80055ca:	490d      	ldr	r1, [pc, #52]	; (8005600 <drawCurrentStateOfLights+0x1ec>)
 80055cc:	480b      	ldr	r0, [pc, #44]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 80055ce:	f00d fb4b 	bl	8012c68 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80055d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80055d6:	9301      	str	r3, [sp, #4]
 80055d8:	2300      	movs	r3, #0
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	2300      	movs	r3, #0
 80055de:	229d      	movs	r2, #157	; 0x9d
 80055e0:	21cb      	movs	r1, #203	; 0xcb
 80055e2:	4806      	ldr	r0, [pc, #24]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 80055e4:	f7fc fbdc 	bl	8001da0 <EF_PutString>
}
 80055e8:	bf00      	nop
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	08028554 	.word	0x08028554
 80055f4:	200002bc 	.word	0x200002bc
 80055f8:	08016ba0 	.word	0x08016ba0
 80055fc:	200002cc 	.word	0x200002cc
 8005600:	08016ba4 	.word	0x08016ba4

08005604 <restoreTFTScheduleDayOfWeek>:


//
// Restore on TFT screen rectangle indicate each day of week, from EEPROM
void restoreTFTScheduleDayOfWeek(uint8_t NrOfSchedule)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayTab[7] = {0};
 800560e:	2300      	movs	r3, #0
 8005610:	60bb      	str	r3, [r7, #8]
 8005612:	f107 030c 	add.w	r3, r7, #12
 8005616:	2100      	movs	r1, #0
 8005618:	460a      	mov	r2, r1
 800561a:	801a      	strh	r2, [r3, #0]
 800561c:	460a      	mov	r2, r1
 800561e:	709a      	strb	r2, [r3, #2]
	EEPROM_ScheduleDayInWeekRead(NrOfSchedule, TempDayTab);
 8005620:	f107 0208 	add.w	r2, r7, #8
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	4611      	mov	r1, r2
 8005628:	4618      	mov	r0, r3
 800562a:	f7fd fc73 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>

	if(TempDayTab[0]) changeTFTScheduleDayOfWeek(1, 1);
 800562e:	7a3b      	ldrb	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d004      	beq.n	800563e <restoreTFTScheduleDayOfWeek+0x3a>
 8005634:	2101      	movs	r1, #1
 8005636:	2001      	movs	r0, #1
 8005638:	f001 fcee 	bl	8007018 <changeTFTScheduleDayOfWeek>
 800563c:	e003      	b.n	8005646 <restoreTFTScheduleDayOfWeek+0x42>
	else changeTFTScheduleDayOfWeek(1, 0);
 800563e:	2100      	movs	r1, #0
 8005640:	2001      	movs	r0, #1
 8005642:	f001 fce9 	bl	8007018 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[1]) changeTFTScheduleDayOfWeek(2, 1);
 8005646:	7a7b      	ldrb	r3, [r7, #9]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d004      	beq.n	8005656 <restoreTFTScheduleDayOfWeek+0x52>
 800564c:	2101      	movs	r1, #1
 800564e:	2002      	movs	r0, #2
 8005650:	f001 fce2 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8005654:	e003      	b.n	800565e <restoreTFTScheduleDayOfWeek+0x5a>
	else changeTFTScheduleDayOfWeek(2, 0);
 8005656:	2100      	movs	r1, #0
 8005658:	2002      	movs	r0, #2
 800565a:	f001 fcdd 	bl	8007018 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[2]) changeTFTScheduleDayOfWeek(3, 1);
 800565e:	7abb      	ldrb	r3, [r7, #10]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d004      	beq.n	800566e <restoreTFTScheduleDayOfWeek+0x6a>
 8005664:	2101      	movs	r1, #1
 8005666:	2003      	movs	r0, #3
 8005668:	f001 fcd6 	bl	8007018 <changeTFTScheduleDayOfWeek>
 800566c:	e003      	b.n	8005676 <restoreTFTScheduleDayOfWeek+0x72>
	else changeTFTScheduleDayOfWeek(3, 0);
 800566e:	2100      	movs	r1, #0
 8005670:	2003      	movs	r0, #3
 8005672:	f001 fcd1 	bl	8007018 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[3]) changeTFTScheduleDayOfWeek(4, 1);
 8005676:	7afb      	ldrb	r3, [r7, #11]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d004      	beq.n	8005686 <restoreTFTScheduleDayOfWeek+0x82>
 800567c:	2101      	movs	r1, #1
 800567e:	2004      	movs	r0, #4
 8005680:	f001 fcca 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8005684:	e003      	b.n	800568e <restoreTFTScheduleDayOfWeek+0x8a>
	else changeTFTScheduleDayOfWeek(4, 0);
 8005686:	2100      	movs	r1, #0
 8005688:	2004      	movs	r0, #4
 800568a:	f001 fcc5 	bl	8007018 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[4]) changeTFTScheduleDayOfWeek(5, 1);
 800568e:	7b3b      	ldrb	r3, [r7, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d004      	beq.n	800569e <restoreTFTScheduleDayOfWeek+0x9a>
 8005694:	2101      	movs	r1, #1
 8005696:	2005      	movs	r0, #5
 8005698:	f001 fcbe 	bl	8007018 <changeTFTScheduleDayOfWeek>
 800569c:	e003      	b.n	80056a6 <restoreTFTScheduleDayOfWeek+0xa2>
	else changeTFTScheduleDayOfWeek(5, 0);
 800569e:	2100      	movs	r1, #0
 80056a0:	2005      	movs	r0, #5
 80056a2:	f001 fcb9 	bl	8007018 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[5]) changeTFTScheduleDayOfWeek(6, 1);
 80056a6:	7b7b      	ldrb	r3, [r7, #13]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d004      	beq.n	80056b6 <restoreTFTScheduleDayOfWeek+0xb2>
 80056ac:	2101      	movs	r1, #1
 80056ae:	2006      	movs	r0, #6
 80056b0:	f001 fcb2 	bl	8007018 <changeTFTScheduleDayOfWeek>
 80056b4:	e003      	b.n	80056be <restoreTFTScheduleDayOfWeek+0xba>
	else changeTFTScheduleDayOfWeek(6, 0);
 80056b6:	2100      	movs	r1, #0
 80056b8:	2006      	movs	r0, #6
 80056ba:	f001 fcad 	bl	8007018 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[6]) changeTFTScheduleDayOfWeek(7, 1);
 80056be:	7bbb      	ldrb	r3, [r7, #14]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d004      	beq.n	80056ce <restoreTFTScheduleDayOfWeek+0xca>
 80056c4:	2101      	movs	r1, #1
 80056c6:	2007      	movs	r0, #7
 80056c8:	f001 fca6 	bl	8007018 <changeTFTScheduleDayOfWeek>
	else changeTFTScheduleDayOfWeek(7, 0);

}
 80056cc:	e003      	b.n	80056d6 <restoreTFTScheduleDayOfWeek+0xd2>
	else changeTFTScheduleDayOfWeek(7, 0);
 80056ce:	2100      	movs	r1, #0
 80056d0:	2007      	movs	r0, #7
 80056d2:	f001 fca1 	bl	8007018 <changeTFTScheduleDayOfWeek>
}
 80056d6:	bf00      	nop
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <restoreTFTScheduleRelayLights>:

//
// Restore on TFT screen rectangle indicate each Relay and Light, from EEPROM
void restoreTFTScheduleRelayLights(uint8_t NrOfSchedule)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b086      	sub	sp, #24
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	4603      	mov	r3, r0
 80056e6:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelayLIghtsTab[9] = {0};
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	f107 0310 	add.w	r3, r7, #16
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	711a      	strb	r2, [r3, #4]
	EEPROM_ScheduleRelayAndSwitchTabRead(NrOfSchedule, TempRelayLIghtsTab);
 80056f6:	f107 020c 	add.w	r2, r7, #12
 80056fa:	79fb      	ldrb	r3, [r7, #7]
 80056fc:	4611      	mov	r1, r2
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fd fc84 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>

	if(TempRelayLIghtsTab[0]) changeTFTScheduleRelayLights (1, 1);
 8005704:	7b3b      	ldrb	r3, [r7, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d004      	beq.n	8005714 <restoreTFTScheduleRelayLights+0x36>
 800570a:	2101      	movs	r1, #1
 800570c:	2001      	movs	r0, #1
 800570e:	f001 fd60 	bl	80071d2 <changeTFTScheduleRelayLights>
 8005712:	e003      	b.n	800571c <restoreTFTScheduleRelayLights+0x3e>
	else changeTFTScheduleRelayLights(1, 0);
 8005714:	2100      	movs	r1, #0
 8005716:	2001      	movs	r0, #1
 8005718:	f001 fd5b 	bl	80071d2 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[1]) changeTFTScheduleRelayLights(2, 1);
 800571c:	7b7b      	ldrb	r3, [r7, #13]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d004      	beq.n	800572c <restoreTFTScheduleRelayLights+0x4e>
 8005722:	2101      	movs	r1, #1
 8005724:	2002      	movs	r0, #2
 8005726:	f001 fd54 	bl	80071d2 <changeTFTScheduleRelayLights>
 800572a:	e003      	b.n	8005734 <restoreTFTScheduleRelayLights+0x56>
	else changeTFTScheduleRelayLights(2, 0);
 800572c:	2100      	movs	r1, #0
 800572e:	2002      	movs	r0, #2
 8005730:	f001 fd4f 	bl	80071d2 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[2]) changeTFTScheduleRelayLights(3, 1);
 8005734:	7bbb      	ldrb	r3, [r7, #14]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d004      	beq.n	8005744 <restoreTFTScheduleRelayLights+0x66>
 800573a:	2101      	movs	r1, #1
 800573c:	2003      	movs	r0, #3
 800573e:	f001 fd48 	bl	80071d2 <changeTFTScheduleRelayLights>
 8005742:	e003      	b.n	800574c <restoreTFTScheduleRelayLights+0x6e>
	else changeTFTScheduleRelayLights(3, 0);
 8005744:	2100      	movs	r1, #0
 8005746:	2003      	movs	r0, #3
 8005748:	f001 fd43 	bl	80071d2 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[3]) changeTFTScheduleRelayLights(4, 1);
 800574c:	7bfb      	ldrb	r3, [r7, #15]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d004      	beq.n	800575c <restoreTFTScheduleRelayLights+0x7e>
 8005752:	2101      	movs	r1, #1
 8005754:	2004      	movs	r0, #4
 8005756:	f001 fd3c 	bl	80071d2 <changeTFTScheduleRelayLights>
 800575a:	e003      	b.n	8005764 <restoreTFTScheduleRelayLights+0x86>
	else changeTFTScheduleRelayLights(4, 0);
 800575c:	2100      	movs	r1, #0
 800575e:	2004      	movs	r0, #4
 8005760:	f001 fd37 	bl	80071d2 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[4]) changeTFTScheduleRelayLights(5, 1);
 8005764:	7c3b      	ldrb	r3, [r7, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d004      	beq.n	8005774 <restoreTFTScheduleRelayLights+0x96>
 800576a:	2101      	movs	r1, #1
 800576c:	2005      	movs	r0, #5
 800576e:	f001 fd30 	bl	80071d2 <changeTFTScheduleRelayLights>
 8005772:	e003      	b.n	800577c <restoreTFTScheduleRelayLights+0x9e>
	else changeTFTScheduleRelayLights(5, 0);
 8005774:	2100      	movs	r1, #0
 8005776:	2005      	movs	r0, #5
 8005778:	f001 fd2b 	bl	80071d2 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[5]) changeTFTScheduleRelayLights(6, 1);
 800577c:	7c7b      	ldrb	r3, [r7, #17]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d004      	beq.n	800578c <restoreTFTScheduleRelayLights+0xae>
 8005782:	2101      	movs	r1, #1
 8005784:	2006      	movs	r0, #6
 8005786:	f001 fd24 	bl	80071d2 <changeTFTScheduleRelayLights>
 800578a:	e003      	b.n	8005794 <restoreTFTScheduleRelayLights+0xb6>
	else changeTFTScheduleRelayLights(6, 0);
 800578c:	2100      	movs	r1, #0
 800578e:	2006      	movs	r0, #6
 8005790:	f001 fd1f 	bl	80071d2 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[6]) changeTFTScheduleRelayLights(7, 1);
 8005794:	7cbb      	ldrb	r3, [r7, #18]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d004      	beq.n	80057a4 <restoreTFTScheduleRelayLights+0xc6>
 800579a:	2101      	movs	r1, #1
 800579c:	2007      	movs	r0, #7
 800579e:	f001 fd18 	bl	80071d2 <changeTFTScheduleRelayLights>
 80057a2:	e003      	b.n	80057ac <restoreTFTScheduleRelayLights+0xce>
	else changeTFTScheduleRelayLights(7, 0);
 80057a4:	2100      	movs	r1, #0
 80057a6:	2007      	movs	r0, #7
 80057a8:	f001 fd13 	bl	80071d2 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[7]) changeTFTScheduleRelayLights(8, 1);
 80057ac:	7cfb      	ldrb	r3, [r7, #19]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d004      	beq.n	80057bc <restoreTFTScheduleRelayLights+0xde>
 80057b2:	2101      	movs	r1, #1
 80057b4:	2008      	movs	r0, #8
 80057b6:	f001 fd0c 	bl	80071d2 <changeTFTScheduleRelayLights>
 80057ba:	e003      	b.n	80057c4 <restoreTFTScheduleRelayLights+0xe6>
	else changeTFTScheduleRelayLights(8, 0);
 80057bc:	2100      	movs	r1, #0
 80057be:	2008      	movs	r0, #8
 80057c0:	f001 fd07 	bl	80071d2 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[8]) changeTFTScheduleRelayLights(9, 1);
 80057c4:	7d3b      	ldrb	r3, [r7, #20]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d004      	beq.n	80057d4 <restoreTFTScheduleRelayLights+0xf6>
 80057ca:	2101      	movs	r1, #1
 80057cc:	2009      	movs	r0, #9
 80057ce:	f001 fd00 	bl	80071d2 <changeTFTScheduleRelayLights>
	else changeTFTScheduleRelayLights(9, 0);

}
 80057d2:	e003      	b.n	80057dc <restoreTFTScheduleRelayLights+0xfe>
	else changeTFTScheduleRelayLights(9, 0);
 80057d4:	2100      	movs	r1, #0
 80057d6:	2009      	movs	r0, #9
 80057d8:	f001 fcfb 	bl	80071d2 <changeTFTScheduleRelayLights>
}
 80057dc:	bf00      	nop
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <makeScheduleActivity>:


void makeScheduleActivity(uint8_t CurrentHour, uint8_t CurrentMinute, uint8_t CurrentDayOfWeek)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	4603      	mov	r3, r0
 80057ec:	71fb      	strb	r3, [r7, #7]
 80057ee:	460b      	mov	r3, r1
 80057f0:	71bb      	strb	r3, [r7, #6]
 80057f2:	4613      	mov	r3, r2
 80057f4:	717b      	strb	r3, [r7, #5]

	for(uint8_t i = 1 ; i <= NumberOfSchedules ; i++ ) // 'i' is a number of checking schedule
 80057f6:	2301      	movs	r3, #1
 80057f8:	75fb      	strb	r3, [r7, #23]
 80057fa:	e056      	b.n	80058aa <makeScheduleActivity+0xc6>
	{
		uint8_t ScheduleDayOfWeekTab[7]= {0}; // Tab to handle information about day of the week to which the schedule applies
 80057fc:	2300      	movs	r3, #0
 80057fe:	613b      	str	r3, [r7, #16]
 8005800:	f107 0314 	add.w	r3, r7, #20
 8005804:	2100      	movs	r1, #0
 8005806:	460a      	mov	r2, r1
 8005808:	801a      	strh	r2, [r3, #0]
 800580a:	460a      	mov	r2, r1
 800580c:	709a      	strb	r2, [r3, #2]
		EEPROM_ScheduleDayInWeekRead(i, ScheduleDayOfWeekTab); // Get day of week from 'i' Schedule
 800580e:	f107 0210 	add.w	r2, r7, #16
 8005812:	7dfb      	ldrb	r3, [r7, #23]
 8005814:	4611      	mov	r1, r2
 8005816:	4618      	mov	r0, r3
 8005818:	f7fd fb7c 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>

		if(1 == ScheduleDayOfWeekTab[CurrentDayOfWeek]) // If the current day of week the schedule 'i' applies
 800581c:	797b      	ldrb	r3, [r7, #5]
 800581e:	f107 0218 	add.w	r2, r7, #24
 8005822:	4413      	add	r3, r2
 8005824:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d13b      	bne.n	80058a4 <makeScheduleActivity+0xc0>
		{
			// Check if some relays should be turn on
			uint8_t MinuteOnFromEEPROM = 67;
 800582c:	2343      	movs	r3, #67	; 0x43
 800582e:	73fb      	strb	r3, [r7, #15]
			EEPROM_ScheduleMinuteOnRead(i, &MinuteOnFromEEPROM); // Get set Minute ON from EEPROM
 8005830:	f107 020f 	add.w	r2, r7, #15
 8005834:	7dfb      	ldrb	r3, [r7, #23]
 8005836:	4611      	mov	r1, r2
 8005838:	4618      	mov	r0, r3
 800583a:	f7fd fce0 	bl	80031fe <EEPROM_ScheduleMinuteOnRead>
			if(CurrentMinute == MinuteOnFromEEPROM) // If Hour, Minute and Day of Week is set in this schedule
 800583e:	7bfb      	ldrb	r3, [r7, #15]
 8005840:	79ba      	ldrb	r2, [r7, #6]
 8005842:	429a      	cmp	r2, r3
 8005844:	d110      	bne.n	8005868 <makeScheduleActivity+0x84>
			{
				uint8_t HourOnFromEEPROM = 27;
 8005846:	231b      	movs	r3, #27
 8005848:	737b      	strb	r3, [r7, #13]
				EEPROM_ScheduleHourOnRead(i, &HourOnFromEEPROM); // Get set Hour ON from EEPROM
 800584a:	f107 020d 	add.w	r2, r7, #13
 800584e:	7dfb      	ldrb	r3, [r7, #23]
 8005850:	4611      	mov	r1, r2
 8005852:	4618      	mov	r0, r3
 8005854:	f7fd fcaf 	bl	80031b6 <EEPROM_ScheduleHourOnRead>
				if(CurrentHour == HourOnFromEEPROM)
 8005858:	7b7b      	ldrb	r3, [r7, #13]
 800585a:	79fa      	ldrb	r2, [r7, #7]
 800585c:	429a      	cmp	r2, r3
 800585e:	d103      	bne.n	8005868 <makeScheduleActivity+0x84>
				{
					makeRelayOn2(i);
 8005860:	7dfb      	ldrb	r3, [r7, #23]
 8005862:	4618      	mov	r0, r3
 8005864:	f000 f82e 	bl	80058c4 <makeRelayOn2>
				}
			}

			// Check if some relays should be turn off
			uint8_t MinuteOffFromEEPROM = 67;
 8005868:	2343      	movs	r3, #67	; 0x43
 800586a:	73bb      	strb	r3, [r7, #14]
			EEPROM_ScheduleMinuteOffRead(i, &MinuteOffFromEEPROM);
 800586c:	f107 020e 	add.w	r2, r7, #14
 8005870:	7dfb      	ldrb	r3, [r7, #23]
 8005872:	4611      	mov	r1, r2
 8005874:	4618      	mov	r0, r3
 8005876:	f7fd fd0a 	bl	800328e <EEPROM_ScheduleMinuteOffRead>
			if(CurrentMinute == MinuteOffFromEEPROM) // If Hour, Minute and Day of Week is set in this schedule
 800587a:	7bbb      	ldrb	r3, [r7, #14]
 800587c:	79ba      	ldrb	r2, [r7, #6]
 800587e:	429a      	cmp	r2, r3
 8005880:	d110      	bne.n	80058a4 <makeScheduleActivity+0xc0>
			{
				uint8_t HourOfFromEEPROM = 27;
 8005882:	231b      	movs	r3, #27
 8005884:	733b      	strb	r3, [r7, #12]
				EEPROM_ScheduleHourOffRead(i, &HourOfFromEEPROM);
 8005886:	f107 020c 	add.w	r2, r7, #12
 800588a:	7dfb      	ldrb	r3, [r7, #23]
 800588c:	4611      	mov	r1, r2
 800588e:	4618      	mov	r0, r3
 8005890:	f7fd fcd9 	bl	8003246 <EEPROM_ScheduleHourOffRead>
				if(CurrentHour == HourOfFromEEPROM)
 8005894:	7b3b      	ldrb	r3, [r7, #12]
 8005896:	79fa      	ldrb	r2, [r7, #7]
 8005898:	429a      	cmp	r2, r3
 800589a:	d103      	bne.n	80058a4 <makeScheduleActivity+0xc0>
				{
					makeRelayOff2(i);
 800589c:	7dfb      	ldrb	r3, [r7, #23]
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 f8a6 	bl	80059f0 <makeRelayOff2>
	for(uint8_t i = 1 ; i <= NumberOfSchedules ; i++ ) // 'i' is a number of checking schedule
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
 80058a6:	3301      	adds	r3, #1
 80058a8:	75fb      	strb	r3, [r7, #23]
 80058aa:	4b05      	ldr	r3, [pc, #20]	; (80058c0 <makeScheduleActivity+0xdc>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	7dfa      	ldrb	r2, [r7, #23]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d9a3      	bls.n	80057fc <makeScheduleActivity+0x18>
				}
			}
		}
	}
}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	20000030 	.word	0x20000030

080058c4 <makeRelayOn2>:

void makeRelayOn2(uint8_t NumberOfShedule)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	71fb      	strb	r3, [r7, #7]
		uint8_t ScheduleRelayAppliesTab[9] = {0};  // { R1, R2, R3, R4, WS, L1, L2, L3, L4}
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	f107 0310 	add.w	r3, r7, #16
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	711a      	strb	r2, [r3, #4]
		EEPROM_ScheduleRelayAndSwitchTabRead(NumberOfShedule, ScheduleRelayAppliesTab);
 80058dc:	f107 020c 	add.w	r2, r7, #12
 80058e0:	79fb      	ldrb	r3, [r7, #7]
 80058e2:	4611      	mov	r1, r2
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fd fb91 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>
		if(ScheduleRelayAppliesTab[0] == 1)
 80058ea:	7b3b      	ldrb	r3, [r7, #12]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d109      	bne.n	8005904 <makeRelayOn2+0x40>
		{
			SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 80058f0:	2005      	movs	r0, #5
 80058f2:	f004 f9e9 	bl	8009cc8 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=1\n"); // Print message to ESP
 80058f6:	4933      	ldr	r1, [pc, #204]	; (80059c4 <makeRelayOn2+0x100>)
 80058f8:	4833      	ldr	r0, [pc, #204]	; (80059c8 <makeRelayOn2+0x104>)
 80058fa:	f005 f90d 	bl	800ab18 <UARTDMA_Print>
			SwitchesButtonState[0] = 1;
 80058fe:	4b33      	ldr	r3, [pc, #204]	; (80059cc <makeRelayOn2+0x108>)
 8005900:	2201      	movs	r2, #1
 8005902:	701a      	strb	r2, [r3, #0]
			//EEPROM_RelayStateUpdate(1, 1);
		}

		if(ScheduleRelayAppliesTab[1] == 1)
 8005904:	7b7b      	ldrb	r3, [r7, #13]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d109      	bne.n	800591e <makeRelayOn2+0x5a>
		{
			SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 800590a:	2007      	movs	r0, #7
 800590c:	f004 f9dc 	bl	8009cc8 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=2\n"); // Print message to ESP
 8005910:	492f      	ldr	r1, [pc, #188]	; (80059d0 <makeRelayOn2+0x10c>)
 8005912:	482d      	ldr	r0, [pc, #180]	; (80059c8 <makeRelayOn2+0x104>)
 8005914:	f005 f900 	bl	800ab18 <UARTDMA_Print>
			SwitchesButtonState[1] = 1;
 8005918:	4b2c      	ldr	r3, [pc, #176]	; (80059cc <makeRelayOn2+0x108>)
 800591a:	2201      	movs	r2, #1
 800591c:	705a      	strb	r2, [r3, #1]
			//EEPROM_RelayStateUpdate(2, 1);
		}

		if(ScheduleRelayAppliesTab[2] == 1)
 800591e:	7bbb      	ldrb	r3, [r7, #14]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d109      	bne.n	8005938 <makeRelayOn2+0x74>
		{
			SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 8005924:	2009      	movs	r0, #9
 8005926:	f004 f9cf 	bl	8009cc8 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=3\n"); // Print message to ESP
 800592a:	492a      	ldr	r1, [pc, #168]	; (80059d4 <makeRelayOn2+0x110>)
 800592c:	4826      	ldr	r0, [pc, #152]	; (80059c8 <makeRelayOn2+0x104>)
 800592e:	f005 f8f3 	bl	800ab18 <UARTDMA_Print>
			SwitchesButtonState[2] = 1;
 8005932:	4b26      	ldr	r3, [pc, #152]	; (80059cc <makeRelayOn2+0x108>)
 8005934:	2201      	movs	r2, #1
 8005936:	709a      	strb	r2, [r3, #2]
			//EEPROM_RelayStateUpdate(3, 1);
		}

		if(ScheduleRelayAppliesTab[3] == 1)
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d109      	bne.n	8005952 <makeRelayOn2+0x8e>
		{
			SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 800593e:	200b      	movs	r0, #11
 8005940:	f004 f9c2 	bl	8009cc8 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=4\n"); // Print message to ESP
 8005944:	4924      	ldr	r1, [pc, #144]	; (80059d8 <makeRelayOn2+0x114>)
 8005946:	4820      	ldr	r0, [pc, #128]	; (80059c8 <makeRelayOn2+0x104>)
 8005948:	f005 f8e6 	bl	800ab18 <UARTDMA_Print>
			SwitchesButtonState[3] = 1;
 800594c:	4b1f      	ldr	r3, [pc, #124]	; (80059cc <makeRelayOn2+0x108>)
 800594e:	2201      	movs	r2, #1
 8005950:	70da      	strb	r2, [r3, #3]
		if(ScheduleRelayAppliesTab[4] == 1)
		{
			//TODO! WS ON
		}

		if(ScheduleRelayAppliesTab[5] == 1)
 8005952:	7c7b      	ldrb	r3, [r7, #17]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d109      	bne.n	800596c <makeRelayOn2+0xa8>
		{
			SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8005958:	200d      	movs	r0, #13
 800595a:	f004 f9b5 	bl	8009cc8 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=5\n"); // Print message to ESP
 800595e:	491f      	ldr	r1, [pc, #124]	; (80059dc <makeRelayOn2+0x118>)
 8005960:	4819      	ldr	r0, [pc, #100]	; (80059c8 <makeRelayOn2+0x104>)
 8005962:	f005 f8d9 	bl	800ab18 <UARTDMA_Print>
			LightsButtonState[0] = 1;
 8005966:	4b1e      	ldr	r3, [pc, #120]	; (80059e0 <makeRelayOn2+0x11c>)
 8005968:	2201      	movs	r2, #1
 800596a:	701a      	strb	r2, [r3, #0]
			//EEPROM_LightStateUpdate(1, 1);
		}

		if(ScheduleRelayAppliesTab[6] == 1)
 800596c:	7cbb      	ldrb	r3, [r7, #18]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d109      	bne.n	8005986 <makeRelayOn2+0xc2>
		{
			SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 8005972:	200f      	movs	r0, #15
 8005974:	f004 f9a8 	bl	8009cc8 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=6\n"); // Print message to ESP
 8005978:	491a      	ldr	r1, [pc, #104]	; (80059e4 <makeRelayOn2+0x120>)
 800597a:	4813      	ldr	r0, [pc, #76]	; (80059c8 <makeRelayOn2+0x104>)
 800597c:	f005 f8cc 	bl	800ab18 <UARTDMA_Print>
			LightsButtonState[1] = 1;
 8005980:	4b17      	ldr	r3, [pc, #92]	; (80059e0 <makeRelayOn2+0x11c>)
 8005982:	2201      	movs	r2, #1
 8005984:	705a      	strb	r2, [r3, #1]
			//EEPROM_LightStateUpdate(2, 1);
		}

		if(ScheduleRelayAppliesTab[7] == 1)
 8005986:	7cfb      	ldrb	r3, [r7, #19]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d109      	bne.n	80059a0 <makeRelayOn2+0xdc>
		{
			SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 800598c:	2011      	movs	r0, #17
 800598e:	f004 f99b 	bl	8009cc8 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=7\n"); // Print message to ESP
 8005992:	4915      	ldr	r1, [pc, #84]	; (80059e8 <makeRelayOn2+0x124>)
 8005994:	480c      	ldr	r0, [pc, #48]	; (80059c8 <makeRelayOn2+0x104>)
 8005996:	f005 f8bf 	bl	800ab18 <UARTDMA_Print>
			LightsButtonState[2] = 1;
 800599a:	4b11      	ldr	r3, [pc, #68]	; (80059e0 <makeRelayOn2+0x11c>)
 800599c:	2201      	movs	r2, #1
 800599e:	709a      	strb	r2, [r3, #2]
			//EEPROM_LightStateUpdate(3, 1);
		}

		if(ScheduleRelayAppliesTab[8] == 1)
 80059a0:	7d3b      	ldrb	r3, [r7, #20]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d109      	bne.n	80059ba <makeRelayOn2+0xf6>
		{
			SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 80059a6:	2013      	movs	r0, #19
 80059a8:	f004 f98e 	bl	8009cc8 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=8\n"); // Print message to ESP
 80059ac:	490f      	ldr	r1, [pc, #60]	; (80059ec <makeRelayOn2+0x128>)
 80059ae:	4806      	ldr	r0, [pc, #24]	; (80059c8 <makeRelayOn2+0x104>)
 80059b0:	f005 f8b2 	bl	800ab18 <UARTDMA_Print>
			LightsButtonState[3] = 1;
 80059b4:	4b0a      	ldr	r3, [pc, #40]	; (80059e0 <makeRelayOn2+0x11c>)
 80059b6:	2201      	movs	r2, #1
 80059b8:	70da      	strb	r2, [r3, #3]
			//EEPROM_LightStateUpdate(4, 1);
		}

}
 80059ba:	bf00      	nop
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	08016dd0 	.word	0x08016dd0
 80059c8:	200006c8 	.word	0x200006c8
 80059cc:	200002b8 	.word	0x200002b8
 80059d0:	08016ddc 	.word	0x08016ddc
 80059d4:	08016de8 	.word	0x08016de8
 80059d8:	08016df4 	.word	0x08016df4
 80059dc:	08016e00 	.word	0x08016e00
 80059e0:	200002bc 	.word	0x200002bc
 80059e4:	08016e0c 	.word	0x08016e0c
 80059e8:	08016e18 	.word	0x08016e18
 80059ec:	08016e24 	.word	0x08016e24

080059f0 <makeRelayOff2>:
void makeRelayOff2(uint8_t NumberOfShedule)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	4603      	mov	r3, r0
 80059f8:	71fb      	strb	r3, [r7, #7]
		uint8_t ScheduleRelayAppliesTab[9] = {0};  // { R1, R2, R3, R4, WS, L1, L2, L3, L4}
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	f107 0310 	add.w	r3, r7, #16
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	711a      	strb	r2, [r3, #4]
		EEPROM_ScheduleRelayAndSwitchTabRead(NumberOfShedule, ScheduleRelayAppliesTab);
 8005a08:	f107 020c 	add.w	r2, r7, #12
 8005a0c:	79fb      	ldrb	r3, [r7, #7]
 8005a0e:	4611      	mov	r1, r2
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fd fafb 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>
		if(ScheduleRelayAppliesTab[0] == 1)
 8005a16:	7b3b      	ldrb	r3, [r7, #12]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d109      	bne.n	8005a30 <makeRelayOff2+0x40>
		{
			SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8005a1c:	2006      	movs	r0, #6
 8005a1e:	f004 f953 	bl	8009cc8 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=1\n"); // Print message to ESP
 8005a22:	4933      	ldr	r1, [pc, #204]	; (8005af0 <makeRelayOff2+0x100>)
 8005a24:	4833      	ldr	r0, [pc, #204]	; (8005af4 <makeRelayOff2+0x104>)
 8005a26:	f005 f877 	bl	800ab18 <UARTDMA_Print>
			SwitchesButtonState[0] = 0;
 8005a2a:	4b33      	ldr	r3, [pc, #204]	; (8005af8 <makeRelayOff2+0x108>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	701a      	strb	r2, [r3, #0]
			//EEPROM_RelayStateUpdate(1, 0);
		}

		if(ScheduleRelayAppliesTab[1] == 1)
 8005a30:	7b7b      	ldrb	r3, [r7, #13]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d109      	bne.n	8005a4a <makeRelayOff2+0x5a>
		{
			SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8005a36:	2008      	movs	r0, #8
 8005a38:	f004 f946 	bl	8009cc8 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=2\n"); // Print message to ESP
 8005a3c:	492f      	ldr	r1, [pc, #188]	; (8005afc <makeRelayOff2+0x10c>)
 8005a3e:	482d      	ldr	r0, [pc, #180]	; (8005af4 <makeRelayOff2+0x104>)
 8005a40:	f005 f86a 	bl	800ab18 <UARTDMA_Print>
			SwitchesButtonState[1] = 0;
 8005a44:	4b2c      	ldr	r3, [pc, #176]	; (8005af8 <makeRelayOff2+0x108>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	705a      	strb	r2, [r3, #1]
			//EEPROM_RelayStateUpdate(2, 0);
		}

		if(ScheduleRelayAppliesTab[2] == 1)
 8005a4a:	7bbb      	ldrb	r3, [r7, #14]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d109      	bne.n	8005a64 <makeRelayOff2+0x74>
		{
			SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8005a50:	200a      	movs	r0, #10
 8005a52:	f004 f939 	bl	8009cc8 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=3\n"); // Print message to ESP
 8005a56:	492a      	ldr	r1, [pc, #168]	; (8005b00 <makeRelayOff2+0x110>)
 8005a58:	4826      	ldr	r0, [pc, #152]	; (8005af4 <makeRelayOff2+0x104>)
 8005a5a:	f005 f85d 	bl	800ab18 <UARTDMA_Print>
			SwitchesButtonState[2] = 0;
 8005a5e:	4b26      	ldr	r3, [pc, #152]	; (8005af8 <makeRelayOff2+0x108>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	709a      	strb	r2, [r3, #2]
			//EEPROM_RelayStateUpdate(3, 0);
		}

		if(ScheduleRelayAppliesTab[3] == 1)
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d109      	bne.n	8005a7e <makeRelayOff2+0x8e>
		{
			SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8005a6a:	200c      	movs	r0, #12
 8005a6c:	f004 f92c 	bl	8009cc8 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=4\n"); // Print message to ESP
 8005a70:	4924      	ldr	r1, [pc, #144]	; (8005b04 <makeRelayOff2+0x114>)
 8005a72:	4820      	ldr	r0, [pc, #128]	; (8005af4 <makeRelayOff2+0x104>)
 8005a74:	f005 f850 	bl	800ab18 <UARTDMA_Print>
			SwitchesButtonState[3] = 0;
 8005a78:	4b1f      	ldr	r3, [pc, #124]	; (8005af8 <makeRelayOff2+0x108>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	70da      	strb	r2, [r3, #3]
		if(ScheduleRelayAppliesTab[4] == 1)
		{
			//TODO! WS OFF
		}

		if(ScheduleRelayAppliesTab[5] == 1)
 8005a7e:	7c7b      	ldrb	r3, [r7, #17]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d109      	bne.n	8005a98 <makeRelayOff2+0xa8>
		{
			SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8005a84:	200e      	movs	r0, #14
 8005a86:	f004 f91f 	bl	8009cc8 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=5\n"); // Print message to ESP
 8005a8a:	491f      	ldr	r1, [pc, #124]	; (8005b08 <makeRelayOff2+0x118>)
 8005a8c:	4819      	ldr	r0, [pc, #100]	; (8005af4 <makeRelayOff2+0x104>)
 8005a8e:	f005 f843 	bl	800ab18 <UARTDMA_Print>
			LightsButtonState[0] = 0;
 8005a92:	4b1e      	ldr	r3, [pc, #120]	; (8005b0c <makeRelayOff2+0x11c>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	701a      	strb	r2, [r3, #0]
			//EEPROM_LightStateUpdate(1, 0);
		}

		if(ScheduleRelayAppliesTab[6] == 1)
 8005a98:	7cbb      	ldrb	r3, [r7, #18]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d109      	bne.n	8005ab2 <makeRelayOff2+0xc2>
		{
			SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8005a9e:	2010      	movs	r0, #16
 8005aa0:	f004 f912 	bl	8009cc8 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=6\n"); // Print message to ESP
 8005aa4:	491a      	ldr	r1, [pc, #104]	; (8005b10 <makeRelayOff2+0x120>)
 8005aa6:	4813      	ldr	r0, [pc, #76]	; (8005af4 <makeRelayOff2+0x104>)
 8005aa8:	f005 f836 	bl	800ab18 <UARTDMA_Print>
			LightsButtonState[1] = 0;
 8005aac:	4b17      	ldr	r3, [pc, #92]	; (8005b0c <makeRelayOff2+0x11c>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	705a      	strb	r2, [r3, #1]
			//EEPROM_LightStateUpdate(2, 0);
		}

		if(ScheduleRelayAppliesTab[7] == 1)
 8005ab2:	7cfb      	ldrb	r3, [r7, #19]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d109      	bne.n	8005acc <makeRelayOff2+0xdc>
		{
			SendComand(UCMD_LIGHT_3_ON); // Send comannd to OFF
 8005ab8:	2011      	movs	r0, #17
 8005aba:	f004 f905 	bl	8009cc8 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=7\n"); // Print message to ESP
 8005abe:	4915      	ldr	r1, [pc, #84]	; (8005b14 <makeRelayOff2+0x124>)
 8005ac0:	480c      	ldr	r0, [pc, #48]	; (8005af4 <makeRelayOff2+0x104>)
 8005ac2:	f005 f829 	bl	800ab18 <UARTDMA_Print>
			LightsButtonState[2] = 0;
 8005ac6:	4b11      	ldr	r3, [pc, #68]	; (8005b0c <makeRelayOff2+0x11c>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	709a      	strb	r2, [r3, #2]
			//EEPROM_LightStateUpdate(3, 0);
		}

		if(ScheduleRelayAppliesTab[8] == 1)
 8005acc:	7d3b      	ldrb	r3, [r7, #20]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d109      	bne.n	8005ae6 <makeRelayOff2+0xf6>
		{
			SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 8005ad2:	2014      	movs	r0, #20
 8005ad4:	f004 f8f8 	bl	8009cc8 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=8\n"); // Print message to ESP
 8005ad8:	490f      	ldr	r1, [pc, #60]	; (8005b18 <makeRelayOff2+0x128>)
 8005ada:	4806      	ldr	r0, [pc, #24]	; (8005af4 <makeRelayOff2+0x104>)
 8005adc:	f005 f81c 	bl	800ab18 <UARTDMA_Print>
			LightsButtonState[3] = 0;
 8005ae0:	4b0a      	ldr	r3, [pc, #40]	; (8005b0c <makeRelayOff2+0x11c>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	70da      	strb	r2, [r3, #3]
			//EEPROM_LightStateUpdate(4, 0);
		}
}
 8005ae6:	bf00      	nop
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	08016e30 	.word	0x08016e30
 8005af4:	200006c8 	.word	0x200006c8
 8005af8:	200002b8 	.word	0x200002b8
 8005afc:	08016e3c 	.word	0x08016e3c
 8005b00:	08016e48 	.word	0x08016e48
 8005b04:	08016e54 	.word	0x08016e54
 8005b08:	08016e60 	.word	0x08016e60
 8005b0c:	200002bc 	.word	0x200002bc
 8005b10:	08016e6c 	.word	0x08016e6c
 8005b14:	08016e78 	.word	0x08016e78
 8005b18:	08016e84 	.word	0x08016e84

08005b1c <initWait>:


//
// Function to wait but only if it is necessary
void initWait(uint32_t TimeInMs)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - LastTime <= TimeInMs)
 8005b24:	bf00      	nop
 8005b26:	f005 fb0f 	bl	800b148 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <initWait+0x28>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d2f6      	bcs.n	8005b26 <initWait+0xa>
    {

    }
}
 8005b38:	bf00      	nop
 8005b3a:	bf00      	nop
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20000254 	.word	0x20000254

08005b48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08a      	sub	sp, #40	; 0x28
 8005b4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b4e:	f107 0314 	add.w	r3, r7, #20
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	605a      	str	r2, [r3, #4]
 8005b58:	609a      	str	r2, [r3, #8]
 8005b5a:	60da      	str	r2, [r3, #12]
 8005b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b5e:	2300      	movs	r3, #0
 8005b60:	613b      	str	r3, [r7, #16]
 8005b62:	4b5f      	ldr	r3, [pc, #380]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	4a5e      	ldr	r2, [pc, #376]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005b68:	f043 0304 	orr.w	r3, r3, #4
 8005b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b6e:	4b5c      	ldr	r3, [pc, #368]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	f003 0304 	and.w	r3, r3, #4
 8005b76:	613b      	str	r3, [r7, #16]
 8005b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	4b58      	ldr	r3, [pc, #352]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	4a57      	ldr	r2, [pc, #348]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b88:	6313      	str	r3, [r2, #48]	; 0x30
 8005b8a:	4b55      	ldr	r3, [pc, #340]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b96:	2300      	movs	r3, #0
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	4b51      	ldr	r3, [pc, #324]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9e:	4a50      	ldr	r2, [pc, #320]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005ba0:	f043 0301 	orr.w	r3, r3, #1
 8005ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ba6:	4b4e      	ldr	r3, [pc, #312]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	60bb      	str	r3, [r7, #8]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	607b      	str	r3, [r7, #4]
 8005bb6:	4b4a      	ldr	r3, [pc, #296]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bba:	4a49      	ldr	r2, [pc, #292]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005bbc:	f043 0302 	orr.w	r3, r3, #2
 8005bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8005bc2:	4b47      	ldr	r3, [pc, #284]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	607b      	str	r3, [r7, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005bd4:	4843      	ldr	r0, [pc, #268]	; (8005ce4 <MX_GPIO_Init+0x19c>)
 8005bd6:	f006 fa33 	bl	800c040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f247 4102 	movw	r1, #29698	; 0x7402
 8005be0:	4841      	ldr	r0, [pc, #260]	; (8005ce8 <MX_GPIO_Init+0x1a0>)
 8005be2:	f006 fa2d 	bl	800c040 <HAL_GPIO_WritePin>
                          |TFT_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_nRF_GPIO_Port, CSN_nRF_Pin, GPIO_PIN_RESET);
 8005be6:	2200      	movs	r2, #0
 8005be8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005bec:	483f      	ldr	r0, [pc, #252]	; (8005cec <MX_GPIO_Init+0x1a4>)
 8005bee:	f006 fa27 	bl	800c040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8005bf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c00:	2300      	movs	r3, #0
 8005c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8005c04:	f107 0314 	add.w	r3, r7, #20
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4836      	ldr	r0, [pc, #216]	; (8005ce4 <MX_GPIO_Init+0x19c>)
 8005c0c:	f006 f87c 	bl	800bd08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_DS3231_RTC_Pin;
 8005c10:	2310      	movs	r3, #16
 8005c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005c14:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 8005c1e:	f107 0314 	add.w	r3, r7, #20
 8005c22:	4619      	mov	r1, r3
 8005c24:	4831      	ldr	r0, [pc, #196]	; (8005cec <MX_GPIO_Init+0x1a4>)
 8005c26:	f006 f86f 	bl	800bd08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 8005c2a:	f247 4302 	movw	r3, #29698	; 0x7402
 8005c2e:	617b      	str	r3, [r7, #20]
                          |TFT_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c30:	2301      	movs	r3, #1
 8005c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c34:	2300      	movs	r3, #0
 8005c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c3c:	f107 0314 	add.w	r3, r7, #20
 8005c40:	4619      	mov	r1, r3
 8005c42:	4829      	ldr	r0, [pc, #164]	; (8005ce8 <MX_GPIO_Init+0x1a0>)
 8005c44:	f006 f860 	bl	800bd08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRF_IRQ_Pin;
 8005c48:	2304      	movs	r3, #4
 8005c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005c4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c52:	2300      	movs	r3, #0
 8005c54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005c56:	f107 0314 	add.w	r3, r7, #20
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	4822      	ldr	r0, [pc, #136]	; (8005ce8 <MX_GPIO_Init+0x1a0>)
 8005c5e:	f006 f853 	bl	800bd08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_DS3231_RTC_Pin;
 8005c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 8005c70:	f107 0314 	add.w	r3, r7, #20
 8005c74:	4619      	mov	r1, r3
 8005c76:	481c      	ldr	r0, [pc, #112]	; (8005ce8 <MX_GPIO_Init+0x1a0>)
 8005c78:	f006 f846 	bl	800bd08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8005c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005c82:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005c8c:	f107 0314 	add.w	r3, r7, #20
 8005c90:	4619      	mov	r1, r3
 8005c92:	4816      	ldr	r0, [pc, #88]	; (8005cec <MX_GPIO_Init+0x1a4>)
 8005c94:	f006 f838 	bl	800bd08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_nRF_Pin;
 8005c98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CSN_nRF_GPIO_Port, &GPIO_InitStruct);
 8005caa:	f107 0314 	add.w	r3, r7, #20
 8005cae:	4619      	mov	r1, r3
 8005cb0:	480e      	ldr	r0, [pc, #56]	; (8005cec <MX_GPIO_Init+0x1a4>)
 8005cb2:	f006 f829 	bl	800bd08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2100      	movs	r1, #0
 8005cba:	2008      	movs	r0, #8
 8005cbc:	f005 fbb3 	bl	800b426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005cc0:	2008      	movs	r0, #8
 8005cc2:	f005 fbcc 	bl	800b45e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2100      	movs	r1, #0
 8005cca:	2017      	movs	r0, #23
 8005ccc:	f005 fbab 	bl	800b426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005cd0:	2017      	movs	r0, #23
 8005cd2:	f005 fbc4 	bl	800b45e <HAL_NVIC_EnableIRQ>

}
 8005cd6:	bf00      	nop
 8005cd8:	3728      	adds	r7, #40	; 0x28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	40023800 	.word	0x40023800
 8005ce4:	40020800 	.word	0x40020800
 8005ce8:	40020400 	.word	0x40020400
 8005cec:	40020000 	.word	0x40020000

08005cf0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005cf4:	4b12      	ldr	r3, [pc, #72]	; (8005d40 <MX_I2C1_Init+0x50>)
 8005cf6:	4a13      	ldr	r2, [pc, #76]	; (8005d44 <MX_I2C1_Init+0x54>)
 8005cf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005cfa:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <MX_I2C1_Init+0x50>)
 8005cfc:	4a12      	ldr	r2, [pc, #72]	; (8005d48 <MX_I2C1_Init+0x58>)
 8005cfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005d00:	4b0f      	ldr	r3, [pc, #60]	; (8005d40 <MX_I2C1_Init+0x50>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005d06:	4b0e      	ldr	r3, [pc, #56]	; (8005d40 <MX_I2C1_Init+0x50>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d0c:	4b0c      	ldr	r3, [pc, #48]	; (8005d40 <MX_I2C1_Init+0x50>)
 8005d0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d14:	4b0a      	ldr	r3, [pc, #40]	; (8005d40 <MX_I2C1_Init+0x50>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005d1a:	4b09      	ldr	r3, [pc, #36]	; (8005d40 <MX_I2C1_Init+0x50>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d20:	4b07      	ldr	r3, [pc, #28]	; (8005d40 <MX_I2C1_Init+0x50>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d26:	4b06      	ldr	r3, [pc, #24]	; (8005d40 <MX_I2C1_Init+0x50>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005d2c:	4804      	ldr	r0, [pc, #16]	; (8005d40 <MX_I2C1_Init+0x50>)
 8005d2e:	f006 f9d3 	bl	800c0d8 <HAL_I2C_Init>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005d38:	f000 faa2 	bl	8006280 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005d3c:	bf00      	nop
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	20000448 	.word	0x20000448
 8005d44:	40005400 	.word	0x40005400
 8005d48:	00061a80 	.word	0x00061a80

08005d4c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005d50:	4b12      	ldr	r3, [pc, #72]	; (8005d9c <MX_I2C3_Init+0x50>)
 8005d52:	4a13      	ldr	r2, [pc, #76]	; (8005da0 <MX_I2C3_Init+0x54>)
 8005d54:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8005d56:	4b11      	ldr	r3, [pc, #68]	; (8005d9c <MX_I2C3_Init+0x50>)
 8005d58:	4a12      	ldr	r2, [pc, #72]	; (8005da4 <MX_I2C3_Init+0x58>)
 8005d5a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005d5c:	4b0f      	ldr	r3, [pc, #60]	; (8005d9c <MX_I2C3_Init+0x50>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005d62:	4b0e      	ldr	r3, [pc, #56]	; (8005d9c <MX_I2C3_Init+0x50>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d68:	4b0c      	ldr	r3, [pc, #48]	; (8005d9c <MX_I2C3_Init+0x50>)
 8005d6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d6e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d70:	4b0a      	ldr	r3, [pc, #40]	; (8005d9c <MX_I2C3_Init+0x50>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005d76:	4b09      	ldr	r3, [pc, #36]	; (8005d9c <MX_I2C3_Init+0x50>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d7c:	4b07      	ldr	r3, [pc, #28]	; (8005d9c <MX_I2C3_Init+0x50>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d82:	4b06      	ldr	r3, [pc, #24]	; (8005d9c <MX_I2C3_Init+0x50>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005d88:	4804      	ldr	r0, [pc, #16]	; (8005d9c <MX_I2C3_Init+0x50>)
 8005d8a:	f006 f9a5 	bl	800c0d8 <HAL_I2C_Init>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005d94:	f000 fa74 	bl	8006280 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005d98:	bf00      	nop
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20000394 	.word	0x20000394
 8005da0:	40005c00 	.word	0x40005c00
 8005da4:	000186a0 	.word	0x000186a0

08005da8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08c      	sub	sp, #48	; 0x30
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005db0:	f107 031c 	add.w	r3, r7, #28
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	605a      	str	r2, [r3, #4]
 8005dba:	609a      	str	r2, [r3, #8]
 8005dbc:	60da      	str	r2, [r3, #12]
 8005dbe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a74      	ldr	r2, [pc, #464]	; (8005f98 <HAL_I2C_MspInit+0x1f0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	f040 8091 	bne.w	8005eee <HAL_I2C_MspInit+0x146>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dcc:	2300      	movs	r3, #0
 8005dce:	61bb      	str	r3, [r7, #24]
 8005dd0:	4b72      	ldr	r3, [pc, #456]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd4:	4a71      	ldr	r2, [pc, #452]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005dd6:	f043 0302 	orr.w	r3, r3, #2
 8005dda:	6313      	str	r3, [r2, #48]	; 0x30
 8005ddc:	4b6f      	ldr	r3, [pc, #444]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	61bb      	str	r3, [r7, #24]
 8005de6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_DS3231_RTC_Pin|I2C1_SDA_DS3231_RTC_Pin;
 8005de8:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005dee:	2312      	movs	r3, #18
 8005df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df2:	2300      	movs	r3, #0
 8005df4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005df6:	2303      	movs	r3, #3
 8005df8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005dfa:	2304      	movs	r3, #4
 8005dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dfe:	f107 031c 	add.w	r3, r7, #28
 8005e02:	4619      	mov	r1, r3
 8005e04:	4866      	ldr	r0, [pc, #408]	; (8005fa0 <HAL_I2C_MspInit+0x1f8>)
 8005e06:	f005 ff7f 	bl	800bd08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]
 8005e0e:	4b63      	ldr	r3, [pc, #396]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	4a62      	ldr	r2, [pc, #392]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005e14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e18:	6413      	str	r3, [r2, #64]	; 0x40
 8005e1a:	4b60      	ldr	r3, [pc, #384]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8005e26:	4b5f      	ldr	r3, [pc, #380]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e28:	4a5f      	ldr	r2, [pc, #380]	; (8005fa8 <HAL_I2C_MspInit+0x200>)
 8005e2a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8005e2c:	4b5d      	ldr	r3, [pc, #372]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e32:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e34:	4b5b      	ldr	r3, [pc, #364]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e3a:	4b5a      	ldr	r3, [pc, #360]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e40:	4b58      	ldr	r3, [pc, #352]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e46:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e48:	4b56      	ldr	r3, [pc, #344]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e4e:	4b55      	ldr	r3, [pc, #340]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005e54:	4b53      	ldr	r3, [pc, #332]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005e5a:	4b52      	ldr	r3, [pc, #328]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e60:	4b50      	ldr	r3, [pc, #320]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005e66:	484f      	ldr	r0, [pc, #316]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e68:	f005 fb3e 	bl	800b4e8 <HAL_DMA_Init>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8005e72:	f000 fa05 	bl	8006280 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a4a      	ldr	r2, [pc, #296]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e7a:	639a      	str	r2, [r3, #56]	; 0x38
 8005e7c:	4a49      	ldr	r2, [pc, #292]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8005e82:	4b4a      	ldr	r3, [pc, #296]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005e84:	4a4a      	ldr	r2, [pc, #296]	; (8005fb0 <HAL_I2C_MspInit+0x208>)
 8005e86:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8005e88:	4b48      	ldr	r3, [pc, #288]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005e8e:	4b47      	ldr	r3, [pc, #284]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005e90:	2240      	movs	r2, #64	; 0x40
 8005e92:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e94:	4b45      	ldr	r3, [pc, #276]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005e9a:	4b44      	ldr	r3, [pc, #272]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ea0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ea2:	4b42      	ldr	r3, [pc, #264]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ea8:	4b40      	ldr	r3, [pc, #256]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005eae:	4b3f      	ldr	r3, [pc, #252]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005eb4:	4b3d      	ldr	r3, [pc, #244]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005eba:	4b3c      	ldr	r3, [pc, #240]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005ec0:	483a      	ldr	r0, [pc, #232]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005ec2:	f005 fb11 	bl	800b4e8 <HAL_DMA_Init>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8005ecc:	f000 f9d8 	bl	8006280 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a36      	ldr	r2, [pc, #216]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005ed4:	635a      	str	r2, [r3, #52]	; 0x34
 8005ed6:	4a35      	ldr	r2, [pc, #212]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005edc:	2200      	movs	r2, #0
 8005ede:	2100      	movs	r1, #0
 8005ee0:	2020      	movs	r0, #32
 8005ee2:	f005 faa0 	bl	800b426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005ee6:	2020      	movs	r0, #32
 8005ee8:	f005 fab9 	bl	800b45e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8005eec:	e050      	b.n	8005f90 <HAL_I2C_MspInit+0x1e8>
  else if(i2cHandle->Instance==I2C3)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a30      	ldr	r2, [pc, #192]	; (8005fb4 <HAL_I2C_MspInit+0x20c>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d14b      	bne.n	8005f90 <HAL_I2C_MspInit+0x1e8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ef8:	2300      	movs	r3, #0
 8005efa:	613b      	str	r3, [r7, #16]
 8005efc:	4b27      	ldr	r3, [pc, #156]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f00:	4a26      	ldr	r2, [pc, #152]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005f02:	f043 0301 	orr.w	r3, r3, #1
 8005f06:	6313      	str	r3, [r2, #48]	; 0x30
 8005f08:	4b24      	ldr	r3, [pc, #144]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	613b      	str	r3, [r7, #16]
 8005f12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f14:	2300      	movs	r3, #0
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	4b20      	ldr	r3, [pc, #128]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1c:	4a1f      	ldr	r2, [pc, #124]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005f1e:	f043 0302 	orr.w	r3, r3, #2
 8005f22:	6313      	str	r3, [r2, #48]	; 0x30
 8005f24:	4b1d      	ldr	r3, [pc, #116]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SCL_EEPROM_Pin;
 8005f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f36:	2312      	movs	r3, #18
 8005f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005f42:	2304      	movs	r3, #4
 8005f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8005f46:	f107 031c 	add.w	r3, r7, #28
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	481a      	ldr	r0, [pc, #104]	; (8005fb8 <HAL_I2C_MspInit+0x210>)
 8005f4e:	f005 fedb 	bl	800bd08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SDA_EEPROM_Pin;
 8005f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f58:	2312      	movs	r3, #18
 8005f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f60:	2303      	movs	r3, #3
 8005f62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8005f64:	2309      	movs	r3, #9
 8005f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8005f68:	f107 031c 	add.w	r3, r7, #28
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	480c      	ldr	r0, [pc, #48]	; (8005fa0 <HAL_I2C_MspInit+0x1f8>)
 8005f70:	f005 feca 	bl	800bd08 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005f74:	2300      	movs	r3, #0
 8005f76:	60bb      	str	r3, [r7, #8]
 8005f78:	4b08      	ldr	r3, [pc, #32]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7c:	4a07      	ldr	r2, [pc, #28]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005f7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005f82:	6413      	str	r3, [r2, #64]	; 0x40
 8005f84:	4b05      	ldr	r3, [pc, #20]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f8c:	60bb      	str	r3, [r7, #8]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
}
 8005f90:	bf00      	nop
 8005f92:	3730      	adds	r7, #48	; 0x30
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	40005400 	.word	0x40005400
 8005f9c:	40023800 	.word	0x40023800
 8005fa0:	40020400 	.word	0x40020400
 8005fa4:	2000049c 	.word	0x2000049c
 8005fa8:	40026010 	.word	0x40026010
 8005fac:	200003e8 	.word	0x200003e8
 8005fb0:	40026028 	.word	0x40026028
 8005fb4:	40005c00 	.word	0x40005c00
 8005fb8:	40020000 	.word	0x40020000

08005fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005fc2:	f005 f85b 	bl	800b07c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005fc6:	f000 f87f 	bl	80060c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005fca:	f7ff fdbd 	bl	8005b48 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005fce:	f004 f85d 	bl	800a08c <MX_SPI1_Init>
  MX_DMA_Init();
 8005fd2:	f7fc fbcd 	bl	8002770 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8005fd6:	f004 fe8b 	bl	800acf0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8005fda:	f004 f88d 	bl	800a0f8 <MX_SPI3_Init>
  MX_I2C1_Init();
 8005fde:	f7ff fe87 	bl	8005cf0 <MX_I2C1_Init>
  MX_TIM11_Init();
 8005fe2:	f004 fc07 	bl	800a7f4 <MX_TIM11_Init>
  MX_TIM10_Init();
 8005fe6:	f004 fbe1 	bl	800a7ac <MX_TIM10_Init>
  MX_I2C3_Init();
 8005fea:	f7ff feaf 	bl	8005d4c <MX_I2C3_Init>
  MX_SPI5_Init();
 8005fee:	f004 f8b9 	bl	800a164 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8005ff2:	f004 fe53 	bl	800ac9c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8005ff6:	f004 fb85 	bl	800a704 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8005ffa:	f000 f8cd 	bl	8006198 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 8005ffe:	4829      	ldr	r0, [pc, #164]	; (80060a4 <main+0xe8>)
 8006000:	f7fc f916 	bl	8002230 <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 8006004:	4928      	ldr	r1, [pc, #160]	; (80060a8 <main+0xec>)
 8006006:	4829      	ldr	r0, [pc, #164]	; (80060ac <main+0xf0>)
 8006008:	f004 fdf9 	bl	800abfe <UARTDMA_Init>
  UARTDMA_Init(&huartdma1, &huart1);
 800600c:	4928      	ldr	r1, [pc, #160]	; (80060b0 <main+0xf4>)
 800600e:	4829      	ldr	r0, [pc, #164]	; (80060b4 <main+0xf8>)
 8006010:	f004 fdf5 	bl	800abfe <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 8006014:	2117      	movs	r1, #23
 8006016:	4828      	ldr	r0, [pc, #160]	; (80060b8 <main+0xfc>)
 8006018:	f7fc fb5a 	bl	80026d0 <XPT2046_Init>
  // RTC Initialization - I2C1
  DS3231_Init(&hi2c1);
 800601c:	4827      	ldr	r0, [pc, #156]	; (80060bc <main+0x100>)
 800601e:	f7fc fbfd 	bl	800281c <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8006022:	2001      	movs	r0, #1
 8006024:	f7fc fc54 	bl	80028d0 <DS3231_SetInterruptMode>
  DS3231_SetRateSelect(DS3231_1HZ);
 8006028:	2000      	movs	r0, #0
 800602a:	f7fc fc71 	bl	8002910 <DS3231_SetRateSelect>
  DS3231_EnableOscillator(DS3231_ENABLED);
 800602e:	2001      	movs	r0, #1
 8006030:	f7fc fc8e 	bl	8002950 <DS3231_EnableOscillator>
  // EEPROM CHECK TODO! Add check of eeprom and informing on screen about results
  uint8_t result = 0;
 8006034:	2300      	movs	r3, #0
 8006036:	71fb      	strb	r3, [r7, #7]
  eeprom_read(0x01, &result, sizeof(result));
 8006038:	1dfb      	adds	r3, r7, #7
 800603a:	2201      	movs	r2, #1
 800603c:	4619      	mov	r1, r3
 800603e:	2001      	movs	r0, #1
 8006040:	f7fc fdd2 	bl	8002be8 <eeprom_read>

  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 8006044:	481e      	ldr	r0, [pc, #120]	; (80060c0 <main+0x104>)
 8006046:	f00a f9f7 	bl	8010438 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800604a:	213c      	movs	r1, #60	; 0x3c
 800604c:	481d      	ldr	r0, [pc, #116]	; (80060c4 <main+0x108>)
 800604e:	f00a fb2a 	bl	80106a6 <HAL_TIM_Encoder_Start>

  int16_t EncoderValue = 0;
 8006052:	2300      	movs	r3, #0
 8006054:	80bb      	strh	r3, [r7, #4]
  {

	  //////////////////////////////////////////////////////
	  // RECEIVE DATA FROM SECUND uC
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8006056:	4815      	ldr	r0, [pc, #84]	; (80060ac <main+0xf0>)
 8006058:	f004 fd84 	bl	800ab64 <UARTDMA_IsDataReceivedReady>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <main+0xac>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 8006062:	4812      	ldr	r0, [pc, #72]	; (80060ac <main+0xf0>)
 8006064:	f003 fb3a 	bl	80096dc <UART_ParseLine>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO SECOND uC
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 8006068:	4810      	ldr	r0, [pc, #64]	; (80060ac <main+0xf0>)
 800606a:	f004 fd8d 	bl	800ab88 <UARTDMA_TransmitEvent>

	  //////////////////////////////////////////////////////
	  // RECEIVE DATA FROM ESP
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma1))
 800606e:	4811      	ldr	r0, [pc, #68]	; (80060b4 <main+0xf8>)
 8006070:	f004 fd78 	bl	800ab64 <UARTDMA_IsDataReceivedReady>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d002      	beq.n	8006080 <main+0xc4>
	  {
		  UART_ESP_ParseLine(&huartdma1); // Parsing function
 800607a:	480e      	ldr	r0, [pc, #56]	; (80060b4 <main+0xf8>)
 800607c:	f7fa ffce 	bl	800101c <UART_ESP_ParseLine>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO ESP
	  //
	  UARTDMA_TransmitEvent(&huartdma1);
 8006080:	480c      	ldr	r0, [pc, #48]	; (80060b4 <main+0xf8>)
 8006082:	f004 fd81 	bl	800ab88 <UARTDMA_TransmitEvent>

	  ////////////////////////////////////////////////////////
	  // TOUCH SCREEN
	  //
	  XPT2046_Task();
 8006086:	f7fc fa51 	bl	800252c <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  //
	  MenuTFT();
 800608a:	f000 f935 	bl	80062f8 <MenuTFT>
	  ////////////////////////////////////////////////////////

	  EncoderValue = __HAL_TIM_GET_COUNTER(&htim2);
 800608e:	4b0d      	ldr	r3, [pc, #52]	; (80060c4 <main+0x108>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006094:	b21b      	sxth	r3, r3
 8006096:	80bb      	strh	r3, [r7, #4]
	  encoderUpgrade(&EncoderValue);
 8006098:	1d3b      	adds	r3, r7, #4
 800609a:	4618      	mov	r0, r3
 800609c:	f003 fa0e 	bl	80094bc <encoderUpgrade>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 80060a0:	e7d9      	b.n	8006056 <main+0x9a>
 80060a2:	bf00      	nop
 80060a4:	20000944 	.word	0x20000944
 80060a8:	20000c38 	.word	0x20000c38
 80060ac:	200004fc 	.word	0x200004fc
 80060b0:	20000bf4 	.word	0x20000bf4
 80060b4:	200006c8 	.word	0x200006c8
 80060b8:	200008ec 	.word	0x200008ec
 80060bc:	20000448 	.word	0x20000448
 80060c0:	200009e4 	.word	0x200009e4
 80060c4:	20000a2c 	.word	0x20000a2c

080060c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b094      	sub	sp, #80	; 0x50
 80060cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80060ce:	f107 0320 	add.w	r3, r7, #32
 80060d2:	2230      	movs	r2, #48	; 0x30
 80060d4:	2100      	movs	r1, #0
 80060d6:	4618      	mov	r0, r3
 80060d8:	f00b ff3e 	bl	8011f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80060dc:	f107 030c 	add.w	r3, r7, #12
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	605a      	str	r2, [r3, #4]
 80060e6:	609a      	str	r2, [r3, #8]
 80060e8:	60da      	str	r2, [r3, #12]
 80060ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80060ec:	2300      	movs	r3, #0
 80060ee:	60bb      	str	r3, [r7, #8]
 80060f0:	4b27      	ldr	r3, [pc, #156]	; (8006190 <SystemClock_Config+0xc8>)
 80060f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f4:	4a26      	ldr	r2, [pc, #152]	; (8006190 <SystemClock_Config+0xc8>)
 80060f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060fa:	6413      	str	r3, [r2, #64]	; 0x40
 80060fc:	4b24      	ldr	r3, [pc, #144]	; (8006190 <SystemClock_Config+0xc8>)
 80060fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006104:	60bb      	str	r3, [r7, #8]
 8006106:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006108:	2300      	movs	r3, #0
 800610a:	607b      	str	r3, [r7, #4]
 800610c:	4b21      	ldr	r3, [pc, #132]	; (8006194 <SystemClock_Config+0xcc>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a20      	ldr	r2, [pc, #128]	; (8006194 <SystemClock_Config+0xcc>)
 8006112:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	4b1e      	ldr	r3, [pc, #120]	; (8006194 <SystemClock_Config+0xcc>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006120:	607b      	str	r3, [r7, #4]
 8006122:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006124:	2301      	movs	r3, #1
 8006126:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006128:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800612e:	2302      	movs	r3, #2
 8006130:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006132:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006136:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8006138:	230c      	movs	r3, #12
 800613a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800613c:	2360      	movs	r3, #96	; 0x60
 800613e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006140:	2302      	movs	r3, #2
 8006142:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006144:	2304      	movs	r3, #4
 8006146:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006148:	f107 0320 	add.w	r3, r7, #32
 800614c:	4618      	mov	r0, r3
 800614e:	f009 f8c7 	bl	800f2e0 <HAL_RCC_OscConfig>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006158:	f000 f892 	bl	8006280 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800615c:	230f      	movs	r3, #15
 800615e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006160:	2302      	movs	r3, #2
 8006162:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006164:	2300      	movs	r3, #0
 8006166:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800616c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800616e:	2300      	movs	r3, #0
 8006170:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006172:	f107 030c 	add.w	r3, r7, #12
 8006176:	2103      	movs	r1, #3
 8006178:	4618      	mov	r0, r3
 800617a:	f009 fb29 	bl	800f7d0 <HAL_RCC_ClockConfig>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8006184:	f000 f87c 	bl	8006280 <Error_Handler>
  }
}
 8006188:	bf00      	nop
 800618a:	3750      	adds	r7, #80	; 0x50
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	40023800 	.word	0x40023800
 8006194:	40007000 	.word	0x40007000

08006198 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800619c:	2200      	movs	r2, #0
 800619e:	2100      	movs	r1, #0
 80061a0:	200a      	movs	r0, #10
 80061a2:	f005 f940 	bl	800b426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80061a6:	200a      	movs	r0, #10
 80061a8:	f005 f959 	bl	800b45e <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80061ac:	2200      	movs	r2, #0
 80061ae:	2100      	movs	r1, #0
 80061b0:	201f      	movs	r0, #31
 80061b2:	f005 f938 	bl	800b426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80061b6:	201f      	movs	r0, #31
 80061b8:	f005 f951 	bl	800b45e <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80061bc:	2200      	movs	r2, #0
 80061be:	2100      	movs	r1, #0
 80061c0:	2026      	movs	r0, #38	; 0x26
 80061c2:	f005 f930 	bl	800b426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80061c6:	2026      	movs	r0, #38	; 0x26
 80061c8:	f005 f949 	bl	800b45e <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80061cc:	2200      	movs	r2, #0
 80061ce:	2100      	movs	r1, #0
 80061d0:	2033      	movs	r0, #51	; 0x33
 80061d2:	f005 f928 	bl	800b426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80061d6:	2033      	movs	r0, #51	; 0x33
 80061d8:	f005 f941 	bl	800b45e <HAL_NVIC_EnableIRQ>
}
 80061dc:	bf00      	nop
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a14      	ldr	r2, [pc, #80]	; (8006240 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d101      	bne.n	80061f6 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen(); // Check if current showing hour are different from this from RTC and change it
 80061f2:	f7fe ff0f 	bl	8005014 <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a12      	ldr	r2, [pc, #72]	; (8006244 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d11a      	bne.n	8006236 <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		//TODO! Make possibility to change FEEDING_TIME_IN_S
		if(FeedingCounter >= activitiesDurationTimeInSeconds) // timer to count seconds from start feeding to turn off this activity
 8006200:	4b11      	ldr	r3, [pc, #68]	; (8006248 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	461a      	mov	r2, r3
 8006206:	4b11      	ldr	r3, [pc, #68]	; (800624c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	d30d      	bcc.n	800622a <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 800620e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006212:	480f      	ldr	r0, [pc, #60]	; (8006250 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8006214:	f005 ff2d 	bl	800c072 <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 8006218:	2000      	movs	r0, #0
 800621a:	f7fe ff91 	bl	8005140 <predefinedActivityKarmienie>
			FeedingCounter = 0;
 800621e:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8006220:	2200      	movs	r2, #0
 8006222:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 8006224:	480b      	ldr	r0, [pc, #44]	; (8006254 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8006226:	f00a f969 	bl	80104fc <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 800622a:	4b07      	ldr	r3, [pc, #28]	; (8006248 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	3301      	adds	r3, #1
 8006230:	b2da      	uxtb	r2, r3
 8006232:	4b05      	ldr	r3, [pc, #20]	; (8006248 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8006234:	701a      	strb	r2, [r3, #0]
	}
}
 8006236:	bf00      	nop
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	40014800 	.word	0x40014800
 8006244:	40014400 	.word	0x40014400
 8006248:	20000258 	.word	0x20000258
 800624c:	20000290 	.word	0x20000290
 8006250:	40020800 	.word	0x40020800
 8006254:	2000099c 	.word	0x2000099c

08006258 <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	4603      	mov	r3, r0
 8006260:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin) // Interrupt from XPT2046 - touch screen controler
 8006262:	88fb      	ldrh	r3, [r7, #6]
 8006264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006268:	d101      	bne.n	800626e <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 800626a:	f7fc fa25 	bl	80026b8 <XPT2046_IRQ>
	}

	if(GPIO_Pin == IRQ_DS3231_RTC_Pin) // Interrupt from RTC - alarm one per minute
 800626e:	88fb      	ldrh	r3, [r7, #6]
 8006270:	2b10      	cmp	r3, #16
 8006272:	d101      	bne.n	8006278 <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 8006274:	f7fc fbb0 	bl	80029d8 <DS3231_ClearAlarm2Flag>
	}
}
 8006278:	bf00      	nop
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	ILI9341_ClearDisplay(ILI9341_RED);
 8006286:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800628a:	f7fb ff73 	bl	8002174 <ILI9341_ClearDisplay>
	EF_SetFont(&arial_11ptFontInfo);
 800628e:	4814      	ldr	r0, [pc, #80]	; (80062e0 <Error_Handler+0x60>)
 8006290:	f7fb fb6c 	bl	800196c <EF_SetFont>
	sprintf((char*)Msg, "Error in Function: %s\n", __FILE__);
 8006294:	4a13      	ldr	r2, [pc, #76]	; (80062e4 <Error_Handler+0x64>)
 8006296:	4914      	ldr	r1, [pc, #80]	; (80062e8 <Error_Handler+0x68>)
 8006298:	4814      	ldr	r0, [pc, #80]	; (80062ec <Error_Handler+0x6c>)
 800629a:	f00c fce5 	bl	8012c68 <siprintf>
	EF_PutString(Msg, ERROR_FILE_POZ_X, ERROR_FILE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 800629e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	2301      	movs	r3, #1
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	2300      	movs	r3, #0
 80062aa:	2214      	movs	r2, #20
 80062ac:	210a      	movs	r1, #10
 80062ae:	480f      	ldr	r0, [pc, #60]	; (80062ec <Error_Handler+0x6c>)
 80062b0:	f7fb fd76 	bl	8001da0 <EF_PutString>
	sprintf((char*)Msg, "Function: %s, Line: %d\n",__func__, (int)__LINE__);
 80062b4:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 80062b8:	4a0d      	ldr	r2, [pc, #52]	; (80062f0 <Error_Handler+0x70>)
 80062ba:	490e      	ldr	r1, [pc, #56]	; (80062f4 <Error_Handler+0x74>)
 80062bc:	480b      	ldr	r0, [pc, #44]	; (80062ec <Error_Handler+0x6c>)
 80062be:	f00c fcd3 	bl	8012c68 <siprintf>
	EF_PutString(Msg, ERROR_FUNC_AND_LINE_POZ_X, ERROR_FUNC_AND_LINE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 80062c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80062c6:	9301      	str	r3, [sp, #4]
 80062c8:	2301      	movs	r3, #1
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	2300      	movs	r3, #0
 80062ce:	2232      	movs	r2, #50	; 0x32
 80062d0:	210a      	movs	r1, #10
 80062d2:	4806      	ldr	r0, [pc, #24]	; (80062ec <Error_Handler+0x6c>)
 80062d4:	f7fb fd64 	bl	8001da0 <EF_PutString>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80062d8:	b672      	cpsid	i
}
 80062da:	bf00      	nop

  __disable_irq();

  while (1)
 80062dc:	e7fe      	b.n	80062dc <Error_Handler+0x5c>
 80062de:	bf00      	nop
 80062e0:	08028554 	.word	0x08028554
 80062e4:	08016e90 	.word	0x08016e90
 80062e8:	08016ea4 	.word	0x08016ea4
 80062ec:	200002cc 	.word	0x200002cc
 80062f0:	08027a84 	.word	0x08027a84
 80062f4:	08016ebc 	.word	0x08016ebc

080062f8 <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
	switch(State)
 80062fc:	4b5b      	ldr	r3, [pc, #364]	; (800646c <MenuTFT+0x174>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b08      	cmp	r3, #8
 8006302:	f200 80b0 	bhi.w	8006466 <MenuTFT+0x16e>
 8006306:	a201      	add	r2, pc, #4	; (adr r2, 800630c <MenuTFT+0x14>)
 8006308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630c:	08006331 	.word	0x08006331
 8006310:	08006343 	.word	0x08006343
 8006314:	0800637d 	.word	0x0800637d
 8006318:	080063b9 	.word	0x080063b9
 800631c:	080063dd 	.word	0x080063dd
 8006320:	0800639b 	.word	0x0800639b
 8006324:	080063fb 	.word	0x080063fb
 8006328:	0800641f 	.word	0x0800641f
 800632c:	08006443 	.word	0x08006443
	{
	case MENUTFT_INIT:
		system_init();
 8006330:	f7fd f898 	bl	8003464 <system_init>
		State = MENUTFT_PARAMETERS;
 8006334:	4b4d      	ldr	r3, [pc, #308]	; (800646c <MenuTFT+0x174>)
 8006336:	2201      	movs	r2, #1
 8006338:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 800633a:	4b4d      	ldr	r3, [pc, #308]	; (8006470 <MenuTFT+0x178>)
 800633c:	2201      	movs	r2, #1
 800633e:	701a      	strb	r2, [r3, #0]
		break;
 8006340:	e091      	b.n	8006466 <MenuTFT+0x16e>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 8006342:	4b4b      	ldr	r3, [pc, #300]	; (8006470 <MenuTFT+0x178>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d115      	bne.n	8006376 <MenuTFT+0x7e>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 800634a:	4b4a      	ldr	r3, [pc, #296]	; (8006474 <MenuTFT+0x17c>)
 800634c:	edd3 7a00 	vldr	s15, [r3]
 8006350:	4b49      	ldr	r3, [pc, #292]	; (8006478 <MenuTFT+0x180>)
 8006352:	ed93 7a00 	vldr	s14, [r3]
 8006356:	eeb0 1a47 	vmov.f32	s2, s14
 800635a:	2100      	movs	r1, #0
 800635c:	2000      	movs	r0, #0
 800635e:	eddf 0a47 	vldr	s1, [pc, #284]	; 800647c <MenuTFT+0x184>
 8006362:	eeb0 0a67 	vmov.f32	s0, s15
 8006366:	f7fd f9fb 	bl	8003760 <showCurrentParameters>
			EncoderState = ENCODER_IDLE;
 800636a:	4b45      	ldr	r3, [pc, #276]	; (8006480 <MenuTFT+0x188>)
 800636c:	2200      	movs	r2, #0
 800636e:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8006370:	4b3f      	ldr	r3, [pc, #252]	; (8006470 <MenuTFT+0x178>)
 8006372:	2200      	movs	r2, #0
 8006374:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 8006376:	f000 f88b 	bl	8006490 <TouchParametersActivity>
		break;
 800637a:	e074      	b.n	8006466 <MenuTFT+0x16e>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 800637c:	4b3c      	ldr	r3, [pc, #240]	; (8006470 <MenuTFT+0x178>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d107      	bne.n	8006394 <MenuTFT+0x9c>
		{
			showControlPanel();
 8006384:	f7fd fb36 	bl	80039f4 <showControlPanel>
			EncoderState = ENCODER_IDLE;
 8006388:	4b3d      	ldr	r3, [pc, #244]	; (8006480 <MenuTFT+0x188>)
 800638a:	2200      	movs	r2, #0
 800638c:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 800638e:	4b38      	ldr	r3, [pc, #224]	; (8006470 <MenuTFT+0x178>)
 8006390:	2200      	movs	r2, #0
 8006392:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 8006394:	f000 f8dc 	bl	8006550 <TouchSwitchActivity>
		break;
 8006398:	e065      	b.n	8006466 <MenuTFT+0x16e>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 800639a:	4b35      	ldr	r3, [pc, #212]	; (8006470 <MenuTFT+0x178>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d107      	bne.n	80063b2 <MenuTFT+0xba>
		{
			showLightsControlPanel();
 80063a2:	f7fd fc01 	bl	8003ba8 <showLightsControlPanel>
			EncoderState = ENCODER_IDLE;
 80063a6:	4b36      	ldr	r3, [pc, #216]	; (8006480 <MenuTFT+0x188>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 80063ac:	4b30      	ldr	r3, [pc, #192]	; (8006470 <MenuTFT+0x178>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 80063b2:	f000 f93f 	bl	8006634 <TouchLightsActivity>
		break;
 80063b6:	e056      	b.n	8006466 <MenuTFT+0x16e>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 80063b8:	4b2d      	ldr	r3, [pc, #180]	; (8006470 <MenuTFT+0x178>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d10a      	bne.n	80063d6 <MenuTFT+0xde>
		{
			showClockSetPanel();
 80063c0:	f7fd fcca 	bl	8003d58 <showClockSetPanel>
			EncoderState = ENCODER_IDLE;
 80063c4:	4b2e      	ldr	r3, [pc, #184]	; (8006480 <MenuTFT+0x188>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	701a      	strb	r2, [r3, #0]
			ClockChangeFlag = 1;
 80063ca:	4b2e      	ldr	r3, [pc, #184]	; (8006484 <MenuTFT+0x18c>)
 80063cc:	2201      	movs	r2, #1
 80063ce:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 80063d0:	4b27      	ldr	r3, [pc, #156]	; (8006470 <MenuTFT+0x178>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 80063d6:	f000 f99d 	bl	8006714 <TouchClockActivity>
		break;
 80063da:	e044      	b.n	8006466 <MenuTFT+0x16e>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 80063dc:	4b24      	ldr	r3, [pc, #144]	; (8006470 <MenuTFT+0x178>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d107      	bne.n	80063f4 <MenuTFT+0xfc>
		{
			showPreparedActivitiesPanel();
 80063e4:	f7fd fe20 	bl	8004028 <showPreparedActivitiesPanel>
			EncoderState = ENCODER_ACTIVITIES;
 80063e8:	4b25      	ldr	r3, [pc, #148]	; (8006480 <MenuTFT+0x188>)
 80063ea:	2205      	movs	r2, #5
 80063ec:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 80063ee:	4b20      	ldr	r3, [pc, #128]	; (8006470 <MenuTFT+0x178>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 80063f4:	f000 fa5a 	bl	80068ac <TouchPredefinedActivityActivity>
		break;
 80063f8:	e035      	b.n	8006466 <MenuTFT+0x16e>
	case MENUTFT_WS_LED:
		if(StateChangeFlag == 1) // make only one time
 80063fa:	4b1d      	ldr	r3, [pc, #116]	; (8006470 <MenuTFT+0x178>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d10a      	bne.n	8006418 <MenuTFT+0x120>
		{
			showWSLedPanel();
 8006402:	f7fd ff5f 	bl	80042c4 <showWSLedPanel>
			EncoderState = ENCODER_WS_LED;
 8006406:	4b1e      	ldr	r3, [pc, #120]	; (8006480 <MenuTFT+0x188>)
 8006408:	2204      	movs	r2, #4
 800640a:	701a      	strb	r2, [r3, #0]
			WSLedChangeFlag = 1;
 800640c:	4b1e      	ldr	r3, [pc, #120]	; (8006488 <MenuTFT+0x190>)
 800640e:	2201      	movs	r2, #1
 8006410:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8006412:	4b17      	ldr	r3, [pc, #92]	; (8006470 <MenuTFT+0x178>)
 8006414:	2200      	movs	r2, #0
 8006416:	701a      	strb	r2, [r3, #0]
		}
		TouchWSLedActivity();
 8006418:	f000 fac0 	bl	800699c <TouchWSLedActivity>
		break;
 800641c:	e023      	b.n	8006466 <MenuTFT+0x16e>
	case MENUTFT_SCHEDULE_1:
		if(StateChangeFlag == 1) // make only one time
 800641e:	4b14      	ldr	r3, [pc, #80]	; (8006470 <MenuTFT+0x178>)
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d10a      	bne.n	800643c <MenuTFT+0x144>
		{
			showSchedule1Panel();
 8006426:	f7fe fce9 	bl	8004dfc <showSchedule1Panel>
			EncoderState = ENCODER_IDLE;
 800642a:	4b15      	ldr	r3, [pc, #84]	; (8006480 <MenuTFT+0x188>)
 800642c:	2200      	movs	r2, #0
 800642e:	701a      	strb	r2, [r3, #0]
			ScheduleChangeFlag = 1;
 8006430:	4b16      	ldr	r3, [pc, #88]	; (800648c <MenuTFT+0x194>)
 8006432:	2201      	movs	r2, #1
 8006434:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8006436:	4b0e      	ldr	r3, [pc, #56]	; (8006470 <MenuTFT+0x178>)
 8006438:	2200      	movs	r2, #0
 800643a:	701a      	strb	r2, [r3, #0]
		}
		Schedule1Activity();
 800643c:	f000 fb1a 	bl	8006a74 <Schedule1Activity>
		break;
 8006440:	e011      	b.n	8006466 <MenuTFT+0x16e>
	case MENUTFT_SCHEDULE_2:
		if(StateChangeFlag == 1) // make only one time
 8006442:	4b0b      	ldr	r3, [pc, #44]	; (8006470 <MenuTFT+0x178>)
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d10a      	bne.n	8006460 <MenuTFT+0x168>
		{
			showSchedule2Panel();
 800644a:	f7fe fd6b 	bl	8004f24 <showSchedule2Panel>
			EncoderState = ENCODER_IDLE;
 800644e:	4b0c      	ldr	r3, [pc, #48]	; (8006480 <MenuTFT+0x188>)
 8006450:	2200      	movs	r2, #0
 8006452:	701a      	strb	r2, [r3, #0]
			ScheduleChangeFlag = 1;
 8006454:	4b0d      	ldr	r3, [pc, #52]	; (800648c <MenuTFT+0x194>)
 8006456:	2201      	movs	r2, #1
 8006458:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 800645a:	4b05      	ldr	r3, [pc, #20]	; (8006470 <MenuTFT+0x178>)
 800645c:	2200      	movs	r2, #0
 800645e:	701a      	strb	r2, [r3, #0]
		}
		Schedule2Activity();
 8006460:	f000 fc0a 	bl	8006c78 <Schedule2Activity>
		break;
 8006464:	bf00      	nop
	}
}
 8006466:	bf00      	nop
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	200002a0 	.word	0x200002a0
 8006470:	20000259 	.word	0x20000259
 8006474:	200002a4 	.word	0x200002a4
 8006478:	200002ac 	.word	0x200002ac
 800647c:	00000000 	.word	0x00000000
 8006480:	200002a1 	.word	0x200002a1
 8006484:	2000025a 	.word	0x2000025a
 8006488:	2000025b 	.word	0x2000025b
 800648c:	2000025c 	.word	0x2000025c

08006490 <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006496:	f7fc f837 	bl	8002508 <XPT2046_IsTouched>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d04c      	beq.n	800653a <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80064a0:	f004 fe52 	bl	800b148 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	4b27      	ldr	r3, [pc, #156]	; (8006544 <TouchParametersActivity+0xb4>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064b0:	d343      	bcc.n	800653a <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80064b2:	1d3a      	adds	r2, r7, #4
 80064b4:	1dbb      	adds	r3, r7, #6
 80064b6:	4611      	mov	r1, r2
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7fb ffe7 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80064be:	88fb      	ldrh	r3, [r7, #6]
 80064c0:	2b09      	cmp	r3, #9
 80064c2:	d90f      	bls.n	80064e4 <TouchParametersActivity+0x54>
 80064c4:	88fb      	ldrh	r3, [r7, #6]
 80064c6:	2b6e      	cmp	r3, #110	; 0x6e
 80064c8:	d80c      	bhi.n	80064e4 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80064ca:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80064cc:	2bd7      	cmp	r3, #215	; 0xd7
 80064ce:	d909      	bls.n	80064e4 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80064d0:	88bb      	ldrh	r3, [r7, #4]
 80064d2:	2bec      	cmp	r3, #236	; 0xec
 80064d4:	d806      	bhi.n	80064e4 <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 80064d6:	4b1c      	ldr	r3, [pc, #112]	; (8006548 <TouchParametersActivity+0xb8>)
 80064d8:	2205      	movs	r2, #5
 80064da:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80064dc:	4b1b      	ldr	r3, [pc, #108]	; (800654c <TouchParametersActivity+0xbc>)
 80064de:	2201      	movs	r2, #1
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	e025      	b.n	8006530 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80064e4:	88fb      	ldrh	r3, [r7, #6]
 80064e6:	2bdb      	cmp	r3, #219	; 0xdb
 80064e8:	d910      	bls.n	800650c <TouchParametersActivity+0x7c>
 80064ea:	88fb      	ldrh	r3, [r7, #6]
 80064ec:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80064f0:	d20c      	bcs.n	800650c <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80064f2:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80064f4:	2bd7      	cmp	r3, #215	; 0xd7
 80064f6:	d909      	bls.n	800650c <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80064f8:	88bb      	ldrh	r3, [r7, #4]
 80064fa:	2bec      	cmp	r3, #236	; 0xec
 80064fc:	d806      	bhi.n	800650c <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 80064fe:	4b12      	ldr	r3, [pc, #72]	; (8006548 <TouchParametersActivity+0xb8>)
 8006500:	2202      	movs	r2, #2
 8006502:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006504:	4b11      	ldr	r3, [pc, #68]	; (800654c <TouchParametersActivity+0xbc>)
 8006506:	2201      	movs	r2, #1
 8006508:	701a      	strb	r2, [r3, #0]
 800650a:	e011      	b.n	8006530 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 800650c:	88fb      	ldrh	r3, [r7, #6]
 800650e:	2b77      	cmp	r3, #119	; 0x77
 8006510:	d90e      	bls.n	8006530 <TouchParametersActivity+0xa0>
 8006512:	88fb      	ldrh	r3, [r7, #6]
 8006514:	2bd2      	cmp	r3, #210	; 0xd2
 8006516:	d80b      	bhi.n	8006530 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006518:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 800651a:	2bd7      	cmp	r3, #215	; 0xd7
 800651c:	d908      	bls.n	8006530 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 800651e:	88bb      	ldrh	r3, [r7, #4]
 8006520:	2bec      	cmp	r3, #236	; 0xec
 8006522:	d805      	bhi.n	8006530 <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 8006524:	4b08      	ldr	r3, [pc, #32]	; (8006548 <TouchParametersActivity+0xb8>)
 8006526:	2203      	movs	r2, #3
 8006528:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800652a:	4b08      	ldr	r3, [pc, #32]	; (800654c <TouchParametersActivity+0xbc>)
 800652c:	2201      	movs	r2, #1
 800652e:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 8006530:	f004 fe0a 	bl	800b148 <HAL_GetTick>
 8006534:	4603      	mov	r3, r0
 8006536:	4a03      	ldr	r2, [pc, #12]	; (8006544 <TouchParametersActivity+0xb4>)
 8006538:	6013      	str	r3, [r2, #0]
		}
	}
}
 800653a:	bf00      	nop
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	2000029c 	.word	0x2000029c
 8006548:	200002a0 	.word	0x200002a0
 800654c:	20000259 	.word	0x20000259

08006550 <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006556:	f7fb ffd7 	bl	8002508 <XPT2046_IsTouched>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d05d      	beq.n	800661c <TouchSwitchActivity+0xcc>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006560:	f004 fdf2 	bl	800b148 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	4b2f      	ldr	r3, [pc, #188]	; (8006624 <TouchSwitchActivity+0xd4>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006570:	d354      	bcc.n	800661c <TouchSwitchActivity+0xcc>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006572:	1d3a      	adds	r2, r7, #4
 8006574:	1dbb      	adds	r3, r7, #6
 8006576:	4611      	mov	r1, r2
 8006578:	4618      	mov	r0, r3
 800657a:	f7fb ff87 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800657e:	88fb      	ldrh	r3, [r7, #6]
 8006580:	2b09      	cmp	r3, #9
 8006582:	d90f      	bls.n	80065a4 <TouchSwitchActivity+0x54>
 8006584:	88fb      	ldrh	r3, [r7, #6]
 8006586:	2b6e      	cmp	r3, #110	; 0x6e
 8006588:	d80c      	bhi.n	80065a4 <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800658a:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800658c:	2bd7      	cmp	r3, #215	; 0xd7
 800658e:	d909      	bls.n	80065a4 <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006590:	88bb      	ldrh	r3, [r7, #4]
 8006592:	2bec      	cmp	r3, #236	; 0xec
 8006594:	d806      	bhi.n	80065a4 <TouchSwitchActivity+0x54>
			{
				State = MENUTFT_PARAMETERS;
 8006596:	4b24      	ldr	r3, [pc, #144]	; (8006628 <TouchSwitchActivity+0xd8>)
 8006598:	2201      	movs	r2, #1
 800659a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800659c:	4b23      	ldr	r3, [pc, #140]	; (800662c <TouchSwitchActivity+0xdc>)
 800659e:	2201      	movs	r2, #1
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	e036      	b.n	8006612 <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80065a4:	88fb      	ldrh	r3, [r7, #6]
 80065a6:	2bdb      	cmp	r3, #219	; 0xdb
 80065a8:	d910      	bls.n	80065cc <TouchSwitchActivity+0x7c>
 80065aa:	88fb      	ldrh	r3, [r7, #6]
 80065ac:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80065b0:	d20c      	bcs.n	80065cc <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80065b2:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80065b4:	2bd7      	cmp	r3, #215	; 0xd7
 80065b6:	d909      	bls.n	80065cc <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80065b8:	88bb      	ldrh	r3, [r7, #4]
 80065ba:	2bec      	cmp	r3, #236	; 0xec
 80065bc:	d806      	bhi.n	80065cc <TouchSwitchActivity+0x7c>
			{
				State = MENUTFT_LIGHTS;
 80065be:	4b1a      	ldr	r3, [pc, #104]	; (8006628 <TouchSwitchActivity+0xd8>)
 80065c0:	2205      	movs	r2, #5
 80065c2:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80065c4:	4b19      	ldr	r3, [pc, #100]	; (800662c <TouchSwitchActivity+0xdc>)
 80065c6:	2201      	movs	r2, #1
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	e022      	b.n	8006612 <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80065cc:	88fb      	ldrh	r3, [r7, #6]
 80065ce:	2b77      	cmp	r3, #119	; 0x77
 80065d0:	d90f      	bls.n	80065f2 <TouchSwitchActivity+0xa2>
 80065d2:	88fb      	ldrh	r3, [r7, #6]
 80065d4:	2bd2      	cmp	r3, #210	; 0xd2
 80065d6:	d80c      	bhi.n	80065f2 <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80065d8:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80065da:	2bd7      	cmp	r3, #215	; 0xd7
 80065dc:	d909      	bls.n	80065f2 <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80065de:	88bb      	ldrh	r3, [r7, #4]
 80065e0:	2bec      	cmp	r3, #236	; 0xec
 80065e2:	d806      	bhi.n	80065f2 <TouchSwitchActivity+0xa2>
			{
				State = MENUTFT_ACTIVITIES;
 80065e4:	4b10      	ldr	r3, [pc, #64]	; (8006628 <TouchSwitchActivity+0xd8>)
 80065e6:	2204      	movs	r2, #4
 80065e8:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80065ea:	4b10      	ldr	r3, [pc, #64]	; (800662c <TouchSwitchActivity+0xdc>)
 80065ec:	2201      	movs	r2, #1
 80065ee:	701a      	strb	r2, [r3, #0]
 80065f0:	e00f      	b.n	8006612 <TouchSwitchActivity+0xc2>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 80065f2:	88fb      	ldrh	r3, [r7, #6]
 80065f4:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80065f8:	d30b      	bcc.n	8006612 <TouchSwitchActivity+0xc2>
 80065fa:	88fb      	ldrh	r3, [r7, #6]
 80065fc:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8006600:	d207      	bcs.n	8006612 <TouchSwitchActivity+0xc2>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8006602:	480b      	ldr	r0, [pc, #44]	; (8006630 <TouchSwitchActivity+0xe0>)
 8006604:	f7fb f9b2 	bl	800196c <EF_SetFont>
				changeSwitchStatusTouch(y);
 8006608:	88bb      	ldrh	r3, [r7, #4]
 800660a:	b2db      	uxtb	r3, r3
 800660c:	4618      	mov	r0, r3
 800660e:	f001 fed7 	bl	80083c0 <changeSwitchStatusTouch>
			}
			TimerTouch = HAL_GetTick();
 8006612:	f004 fd99 	bl	800b148 <HAL_GetTick>
 8006616:	4603      	mov	r3, r0
 8006618:	4a02      	ldr	r2, [pc, #8]	; (8006624 <TouchSwitchActivity+0xd4>)
 800661a:	6013      	str	r3, [r2, #0]
		}
	}
}
 800661c:	bf00      	nop
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	2000029c 	.word	0x2000029c
 8006628:	200002a0 	.word	0x200002a0
 800662c:	20000259 	.word	0x20000259
 8006630:	08028554 	.word	0x08028554

08006634 <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 800663a:	f7fb ff65 	bl	8002508 <XPT2046_IsTouched>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d05b      	beq.n	80066fc <TouchLightsActivity+0xc8>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006644:	f004 fd80 	bl	800b148 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	4b2e      	ldr	r3, [pc, #184]	; (8006704 <TouchLightsActivity+0xd0>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006654:	d352      	bcc.n	80066fc <TouchLightsActivity+0xc8>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006656:	1d3a      	adds	r2, r7, #4
 8006658:	1dbb      	adds	r3, r7, #6
 800665a:	4611      	mov	r1, r2
 800665c:	4618      	mov	r0, r3
 800665e:	f7fb ff15 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006662:	88fb      	ldrh	r3, [r7, #6]
 8006664:	2b09      	cmp	r3, #9
 8006666:	d90f      	bls.n	8006688 <TouchLightsActivity+0x54>
 8006668:	88fb      	ldrh	r3, [r7, #6]
 800666a:	2b6e      	cmp	r3, #110	; 0x6e
 800666c:	d80c      	bhi.n	8006688 <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800666e:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006670:	2bd7      	cmp	r3, #215	; 0xd7
 8006672:	d909      	bls.n	8006688 <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006674:	88bb      	ldrh	r3, [r7, #4]
 8006676:	2bec      	cmp	r3, #236	; 0xec
 8006678:	d806      	bhi.n	8006688 <TouchLightsActivity+0x54>
			{
				State = MENUTFT_SWITCH;
 800667a:	4b23      	ldr	r3, [pc, #140]	; (8006708 <TouchLightsActivity+0xd4>)
 800667c:	2202      	movs	r2, #2
 800667e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006680:	4b22      	ldr	r3, [pc, #136]	; (800670c <TouchLightsActivity+0xd8>)
 8006682:	2201      	movs	r2, #1
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	e034      	b.n	80066f2 <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006688:	88fb      	ldrh	r3, [r7, #6]
 800668a:	2bdb      	cmp	r3, #219	; 0xdb
 800668c:	d910      	bls.n	80066b0 <TouchLightsActivity+0x7c>
 800668e:	88fb      	ldrh	r3, [r7, #6]
 8006690:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006694:	d20c      	bcs.n	80066b0 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006696:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006698:	2bd7      	cmp	r3, #215	; 0xd7
 800669a:	d909      	bls.n	80066b0 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800669c:	88bb      	ldrh	r3, [r7, #4]
 800669e:	2bec      	cmp	r3, #236	; 0xec
 80066a0:	d806      	bhi.n	80066b0 <TouchLightsActivity+0x7c>
			{
				State = MENUTFT_PARAMETERS;
 80066a2:	4b19      	ldr	r3, [pc, #100]	; (8006708 <TouchLightsActivity+0xd4>)
 80066a4:	2201      	movs	r2, #1
 80066a6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80066a8:	4b18      	ldr	r3, [pc, #96]	; (800670c <TouchLightsActivity+0xd8>)
 80066aa:	2201      	movs	r2, #1
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	e020      	b.n	80066f2 <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80066b0:	88fb      	ldrh	r3, [r7, #6]
 80066b2:	2b77      	cmp	r3, #119	; 0x77
 80066b4:	d90f      	bls.n	80066d6 <TouchLightsActivity+0xa2>
 80066b6:	88fb      	ldrh	r3, [r7, #6]
 80066b8:	2bd2      	cmp	r3, #210	; 0xd2
 80066ba:	d80c      	bhi.n	80066d6 <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80066bc:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80066be:	2bd7      	cmp	r3, #215	; 0xd7
 80066c0:	d909      	bls.n	80066d6 <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80066c2:	88bb      	ldrh	r3, [r7, #4]
 80066c4:	2bec      	cmp	r3, #236	; 0xec
 80066c6:	d806      	bhi.n	80066d6 <TouchLightsActivity+0xa2>
			{
				State = MENUTFT_WS_LED;
 80066c8:	4b0f      	ldr	r3, [pc, #60]	; (8006708 <TouchLightsActivity+0xd4>)
 80066ca:	2206      	movs	r2, #6
 80066cc:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80066ce:	4b0f      	ldr	r3, [pc, #60]	; (800670c <TouchLightsActivity+0xd8>)
 80066d0:	2201      	movs	r2, #1
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	e00d      	b.n	80066f2 <TouchLightsActivity+0xbe>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 80066d6:	88fb      	ldrh	r3, [r7, #6]
 80066d8:	2bc7      	cmp	r3, #199	; 0xc7
 80066da:	d90a      	bls.n	80066f2 <TouchLightsActivity+0xbe>
 80066dc:	88fb      	ldrh	r3, [r7, #6]
 80066de:	2be9      	cmp	r3, #233	; 0xe9
 80066e0:	d807      	bhi.n	80066f2 <TouchLightsActivity+0xbe>
			{
				EF_SetFont(&arial_11ptFontInfo);
 80066e2:	480b      	ldr	r0, [pc, #44]	; (8006710 <TouchLightsActivity+0xdc>)
 80066e4:	f7fb f942 	bl	800196c <EF_SetFont>
				changeLightsStatusTouch(y);
 80066e8:	88bb      	ldrh	r3, [r7, #4]
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	4618      	mov	r0, r3
 80066ee:	f001 febf 	bl	8008470 <changeLightsStatusTouch>
			}

			TimerTouch = HAL_GetTick();
 80066f2:	f004 fd29 	bl	800b148 <HAL_GetTick>
 80066f6:	4603      	mov	r3, r0
 80066f8:	4a02      	ldr	r2, [pc, #8]	; (8006704 <TouchLightsActivity+0xd0>)
 80066fa:	6013      	str	r3, [r2, #0]
		}
	}
}
 80066fc:	bf00      	nop
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	2000029c 	.word	0x2000029c
 8006708:	200002a0 	.word	0x200002a0
 800670c:	20000259 	.word	0x20000259
 8006710:	08028554 	.word	0x08028554

08006714 <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af02      	add	r7, sp, #8

	// Check if screen was touched
		if(XPT2046_IsTouched())
 800671a:	f7fb fef5 	bl	8002508 <XPT2046_IsTouched>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 80a9 	beq.w	8006878 <TouchClockActivity+0x164>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8006726:	4856      	ldr	r0, [pc, #344]	; (8006880 <TouchClockActivity+0x16c>)
 8006728:	f7fb f920 	bl	800196c <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800672c:	f004 fd0c 	bl	800b148 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	4b54      	ldr	r3, [pc, #336]	; (8006884 <TouchClockActivity+0x170>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800673c:	f0c0 809c 	bcc.w	8006878 <TouchClockActivity+0x164>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006740:	1d3a      	adds	r2, r7, #4
 8006742:	1dbb      	adds	r3, r7, #6
 8006744:	4611      	mov	r1, r2
 8006746:	4618      	mov	r0, r3
 8006748:	f7fb fea0 	bl	800248c <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 800674c:	4b4e      	ldr	r3, [pc, #312]	; (8006888 <TouchClockActivity+0x174>)
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d114      	bne.n	800677e <TouchClockActivity+0x6a>
				{
					Hours = DS3231_GetHour();
 8006754:	f7fc f99a 	bl	8002a8c <DS3231_GetHour>
 8006758:	4603      	mov	r3, r0
 800675a:	461a      	mov	r2, r3
 800675c:	4b4b      	ldr	r3, [pc, #300]	; (800688c <TouchClockActivity+0x178>)
 800675e:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 8006760:	f7fc f9a0 	bl	8002aa4 <DS3231_GetMinute>
 8006764:	4603      	mov	r3, r0
 8006766:	461a      	mov	r2, r3
 8006768:	4b49      	ldr	r3, [pc, #292]	; (8006890 <TouchClockActivity+0x17c>)
 800676a:	701a      	strb	r2, [r3, #0]
					DayOfWeek = DS3231_GetDayOfWeek();
 800676c:	f7fc f982 	bl	8002a74 <DS3231_GetDayOfWeek>
 8006770:	4603      	mov	r3, r0
 8006772:	461a      	mov	r2, r3
 8006774:	4b47      	ldr	r3, [pc, #284]	; (8006894 <TouchClockActivity+0x180>)
 8006776:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 8006778:	4b43      	ldr	r3, [pc, #268]	; (8006888 <TouchClockActivity+0x174>)
 800677a:	2200      	movs	r2, #0
 800677c:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	2b09      	cmp	r3, #9
 8006782:	d912      	bls.n	80067aa <TouchClockActivity+0x96>
 8006784:	88fb      	ldrh	r3, [r7, #6]
 8006786:	2b6e      	cmp	r3, #110	; 0x6e
 8006788:	d80f      	bhi.n	80067aa <TouchClockActivity+0x96>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800678a:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800678c:	2bd7      	cmp	r3, #215	; 0xd7
 800678e:	d90c      	bls.n	80067aa <TouchClockActivity+0x96>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006790:	88bb      	ldrh	r3, [r7, #4]
 8006792:	2bec      	cmp	r3, #236	; 0xec
 8006794:	d809      	bhi.n	80067aa <TouchClockActivity+0x96>
				{
					State = MENUTFT_PARAMETERS;
 8006796:	4b40      	ldr	r3, [pc, #256]	; (8006898 <TouchClockActivity+0x184>)
 8006798:	2201      	movs	r2, #1
 800679a:	701a      	strb	r2, [r3, #0]
					EncoderState = ENCODER_IDLE;
 800679c:	4b3f      	ldr	r3, [pc, #252]	; (800689c <TouchClockActivity+0x188>)
 800679e:	2200      	movs	r2, #0
 80067a0:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 80067a2:	4b3f      	ldr	r3, [pc, #252]	; (80068a0 <TouchClockActivity+0x18c>)
 80067a4:	2201      	movs	r2, #1
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	e061      	b.n	800686e <TouchClockActivity+0x15a>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80067aa:	88fb      	ldrh	r3, [r7, #6]
 80067ac:	2bdb      	cmp	r3, #219	; 0xdb
 80067ae:	d92c      	bls.n	800680a <TouchClockActivity+0xf6>
 80067b0:	88fb      	ldrh	r3, [r7, #6]
 80067b2:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80067b6:	d228      	bcs.n	800680a <TouchClockActivity+0xf6>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80067b8:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80067ba:	2bd7      	cmp	r3, #215	; 0xd7
 80067bc:	d925      	bls.n	800680a <TouchClockActivity+0xf6>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80067be:	88bb      	ldrh	r3, [r7, #4]
 80067c0:	2bec      	cmp	r3, #236	; 0xec
 80067c2:	d822      	bhi.n	800680a <TouchClockActivity+0xf6>
				{
					DS3231_SetDayOfWeek(DayOfWeek);
 80067c4:	4b33      	ldr	r3, [pc, #204]	; (8006894 <TouchClockActivity+0x180>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fc f977 	bl	8002abc <DS3231_SetDayOfWeek>
					DS3231_SetHour(Hours);
 80067ce:	4b2f      	ldr	r3, [pc, #188]	; (800688c <TouchClockActivity+0x178>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fc f984 	bl	8002ae0 <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 80067d8:	4b2d      	ldr	r3, [pc, #180]	; (8006890 <TouchClockActivity+0x17c>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fc f994 	bl	8002b0a <DS3231_SetMinute>
					DS3231_SetSecond(50);
 80067e2:	2032      	movs	r0, #50	; 0x32
 80067e4:	f7fc f9a3 	bl	8002b2e <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 80067e8:	492e      	ldr	r1, [pc, #184]	; (80068a4 <TouchClockActivity+0x190>)
 80067ea:	482f      	ldr	r0, [pc, #188]	; (80068a8 <TouchClockActivity+0x194>)
 80067ec:	f00c fa3c 	bl	8012c68 <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 80067f0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80067f4:	9301      	str	r3, [sp, #4]
 80067f6:	2301      	movs	r3, #1
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80067fe:	220a      	movs	r2, #10
 8006800:	212f      	movs	r1, #47	; 0x2f
 8006802:	4829      	ldr	r0, [pc, #164]	; (80068a8 <TouchClockActivity+0x194>)
 8006804:	f7fb facc 	bl	8001da0 <EF_PutString>
 8006808:	e031      	b.n	800686e <TouchClockActivity+0x15a>
				}

				// Check if that point is inside the Medium Button - change screen to Schedule  screen
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 800680a:	88fb      	ldrh	r3, [r7, #6]
 800680c:	2b6d      	cmp	r3, #109	; 0x6d
 800680e:	d912      	bls.n	8006836 <TouchClockActivity+0x122>
 8006810:	88fb      	ldrh	r3, [r7, #6]
 8006812:	2bdc      	cmp	r3, #220	; 0xdc
 8006814:	d80f      	bhi.n	8006836 <TouchClockActivity+0x122>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8006816:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8006818:	2bbd      	cmp	r3, #189	; 0xbd
 800681a:	d90c      	bls.n	8006836 <TouchClockActivity+0x122>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 800681c:	88bb      	ldrh	r3, [r7, #4]
 800681e:	2bd4      	cmp	r3, #212	; 0xd4
 8006820:	d809      	bhi.n	8006836 <TouchClockActivity+0x122>
				{
					State = MENUTFT_SCHEDULE_1;
 8006822:	4b1d      	ldr	r3, [pc, #116]	; (8006898 <TouchClockActivity+0x184>)
 8006824:	2207      	movs	r2, #7
 8006826:	701a      	strb	r2, [r3, #0]
					EncoderState = ENCODER_IDLE;
 8006828:	4b1c      	ldr	r3, [pc, #112]	; (800689c <TouchClockActivity+0x188>)
 800682a:	2200      	movs	r2, #0
 800682c:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 800682e:	4b1c      	ldr	r3, [pc, #112]	; (80068a0 <TouchClockActivity+0x18c>)
 8006830:	2201      	movs	r2, #1
 8006832:	701a      	strb	r2, [r3, #0]
 8006834:	e01b      	b.n	800686e <TouchClockActivity+0x15a>


				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 8006836:	88fb      	ldrh	r3, [r7, #6]
 8006838:	2bef      	cmp	r3, #239	; 0xef
 800683a:	d90a      	bls.n	8006852 <TouchClockActivity+0x13e>
 800683c:	88fb      	ldrh	r3, [r7, #6]
 800683e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8006842:	d806      	bhi.n	8006852 <TouchClockActivity+0x13e>
				{
					clockIncreaseOneHourAndMinute(x, y);
 8006844:	88fb      	ldrh	r3, [r7, #6]
 8006846:	88ba      	ldrh	r2, [r7, #4]
 8006848:	4611      	mov	r1, r2
 800684a:	4618      	mov	r0, r3
 800684c:	f001 fd06 	bl	800825c <clockIncreaseOneHourAndMinute>
 8006850:	e00d      	b.n	800686e <TouchClockActivity+0x15a>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 8006852:	88fb      	ldrh	r3, [r7, #6]
 8006854:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8006858:	d309      	bcc.n	800686e <TouchClockActivity+0x15a>
 800685a:	88fb      	ldrh	r3, [r7, #6]
 800685c:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8006860:	d805      	bhi.n	800686e <TouchClockActivity+0x15a>
				{
					clockIncreaseSixHoursTenMinutes(x,y);
 8006862:	88fb      	ldrh	r3, [r7, #6]
 8006864:	88ba      	ldrh	r2, [r7, #4]
 8006866:	4611      	mov	r1, r2
 8006868:	4618      	mov	r0, r3
 800686a:	f001 fd29 	bl	80082c0 <clockIncreaseSixHoursTenMinutes>
				}
				TimerTouch = HAL_GetTick();
 800686e:	f004 fc6b 	bl	800b148 <HAL_GetTick>
 8006872:	4603      	mov	r3, r0
 8006874:	4a03      	ldr	r2, [pc, #12]	; (8006884 <TouchClockActivity+0x170>)
 8006876:	6013      	str	r3, [r2, #0]
			}
		}
}
 8006878:	bf00      	nop
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	0802a4cc 	.word	0x0802a4cc
 8006884:	2000029c 	.word	0x2000029c
 8006888:	2000025a 	.word	0x2000025a
 800688c:	20000032 	.word	0x20000032
 8006890:	20000033 	.word	0x20000033
 8006894:	20000031 	.word	0x20000031
 8006898:	200002a0 	.word	0x200002a0
 800689c:	200002a1 	.word	0x200002a1
 80068a0:	20000259 	.word	0x20000259
 80068a4:	08016ed4 	.word	0x08016ed4
 80068a8:	200002cc 	.word	0x200002cc

080068ac <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af02      	add	r7, sp, #8
	if(XPT2046_IsTouched())
 80068b2:	f7fb fe29 	bl	8002508 <XPT2046_IsTouched>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d05b      	beq.n	8006974 <TouchPredefinedActivityActivity+0xc8>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80068bc:	f004 fc44 	bl	800b148 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	4b2e      	ldr	r3, [pc, #184]	; (800697c <TouchPredefinedActivityActivity+0xd0>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068cc:	d352      	bcc.n	8006974 <TouchPredefinedActivityActivity+0xc8>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80068ce:	1d3a      	adds	r2, r7, #4
 80068d0:	1dbb      	adds	r3, r7, #6
 80068d2:	4611      	mov	r1, r2
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fb fdd9 	bl	800248c <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 80068da:	4829      	ldr	r0, [pc, #164]	; (8006980 <TouchPredefinedActivityActivity+0xd4>)
 80068dc:	f7fb f846 	bl	800196c <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80068e0:	88fb      	ldrh	r3, [r7, #6]
 80068e2:	2b09      	cmp	r3, #9
 80068e4:	d90f      	bls.n	8006906 <TouchPredefinedActivityActivity+0x5a>
 80068e6:	88fb      	ldrh	r3, [r7, #6]
 80068e8:	2b6e      	cmp	r3, #110	; 0x6e
 80068ea:	d80c      	bhi.n	8006906 <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80068ec:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80068ee:	2bd7      	cmp	r3, #215	; 0xd7
 80068f0:	d909      	bls.n	8006906 <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80068f2:	88bb      	ldrh	r3, [r7, #4]
 80068f4:	2bec      	cmp	r3, #236	; 0xec
 80068f6:	d806      	bhi.n	8006906 <TouchPredefinedActivityActivity+0x5a>
			{
				State = MENUTFT_SWITCH;
 80068f8:	4b22      	ldr	r3, [pc, #136]	; (8006984 <TouchPredefinedActivityActivity+0xd8>)
 80068fa:	2202      	movs	r2, #2
 80068fc:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80068fe:	4b22      	ldr	r3, [pc, #136]	; (8006988 <TouchPredefinedActivityActivity+0xdc>)
 8006900:	2201      	movs	r2, #1
 8006902:	701a      	strb	r2, [r3, #0]
 8006904:	e031      	b.n	800696a <TouchPredefinedActivityActivity+0xbe>
			}

			// Check if that point is inside the RIGHT Button - Confirmed changed clock
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006906:	88fb      	ldrh	r3, [r7, #6]
 8006908:	2bdb      	cmp	r3, #219	; 0xdb
 800690a:	d923      	bls.n	8006954 <TouchPredefinedActivityActivity+0xa8>
 800690c:	88fb      	ldrh	r3, [r7, #6]
 800690e:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006912:	d21f      	bcs.n	8006954 <TouchPredefinedActivityActivity+0xa8>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006914:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006916:	2bd7      	cmp	r3, #215	; 0xd7
 8006918:	d91c      	bls.n	8006954 <TouchPredefinedActivityActivity+0xa8>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800691a:	88bb      	ldrh	r3, [r7, #4]
 800691c:	2bec      	cmp	r3, #236	; 0xec
 800691e:	d819      	bhi.n	8006954 <TouchPredefinedActivityActivity+0xa8>
			{
				EF_SetFont(&arialBlack_20ptFontInfo);
 8006920:	481a      	ldr	r0, [pc, #104]	; (800698c <TouchPredefinedActivityActivity+0xe0>)
 8006922:	f7fb f823 	bl	800196c <EF_SetFont>
				EEPROM_ActivitiesTimeUpdate(1, activitiesDurationTimeInSeconds);
 8006926:	4b1a      	ldr	r3, [pc, #104]	; (8006990 <TouchPredefinedActivityActivity+0xe4>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4619      	mov	r1, r3
 800692c:	2001      	movs	r0, #1
 800692e:	f7fc fd7b 	bl	8003428 <EEPROM_ActivitiesTimeUpdate>
				sprintf((char*)Msg, "-Time Changed-");
 8006932:	4918      	ldr	r1, [pc, #96]	; (8006994 <TouchPredefinedActivityActivity+0xe8>)
 8006934:	4818      	ldr	r0, [pc, #96]	; (8006998 <TouchPredefinedActivityActivity+0xec>)
 8006936:	f00c f997 	bl	8012c68 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 800693a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800693e:	9301      	str	r3, [sp, #4]
 8006940:	2301      	movs	r3, #1
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006948:	220a      	movs	r2, #10
 800694a:	212f      	movs	r1, #47	; 0x2f
 800694c:	4812      	ldr	r0, [pc, #72]	; (8006998 <TouchPredefinedActivityActivity+0xec>)
 800694e:	f7fb fa27 	bl	8001da0 <EF_PutString>
 8006952:	e00a      	b.n	800696a <TouchPredefinedActivityActivity+0xbe>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 8006954:	88fb      	ldrh	r3, [r7, #6]
 8006956:	2b63      	cmp	r3, #99	; 0x63
 8006958:	d907      	bls.n	800696a <TouchPredefinedActivityActivity+0xbe>
 800695a:	88fb      	ldrh	r3, [r7, #6]
 800695c:	2bdc      	cmp	r3, #220	; 0xdc
 800695e:	d804      	bhi.n	800696a <TouchPredefinedActivityActivity+0xbe>
			{
				predefinedActivityTouchAction(y);
 8006960:	88bb      	ldrh	r3, [r7, #4]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	4618      	mov	r0, r3
 8006966:	f001 fddb 	bl	8008520 <predefinedActivityTouchAction>
			}
			TimerTouch = HAL_GetTick();
 800696a:	f004 fbed 	bl	800b148 <HAL_GetTick>
 800696e:	4603      	mov	r3, r0
 8006970:	4a02      	ldr	r2, [pc, #8]	; (800697c <TouchPredefinedActivityActivity+0xd0>)
 8006972:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006974:	bf00      	nop
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	2000029c 	.word	0x2000029c
 8006980:	08028554 	.word	0x08028554
 8006984:	200002a0 	.word	0x200002a0
 8006988:	20000259 	.word	0x20000259
 800698c:	0802a4cc 	.word	0x0802a4cc
 8006990:	20000290 	.word	0x20000290
 8006994:	08016ed4 	.word	0x08016ed4
 8006998:	200002cc 	.word	0x200002cc

0800699c <TouchWSLedActivity>:
//
// Function to handling touch on LEDs WS2812b controlling screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchWSLedActivity(void)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
	// Check if screen was touched
		if(XPT2046_IsTouched())
 80069a2:	f7fb fdb1 	bl	8002508 <XPT2046_IsTouched>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d050      	beq.n	8006a4e <TouchWSLedActivity+0xb2>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 80069ac:	482a      	ldr	r0, [pc, #168]	; (8006a58 <TouchWSLedActivity+0xbc>)
 80069ae:	f7fa ffdd 	bl	800196c <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80069b2:	f004 fbc9 	bl	800b148 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	4b28      	ldr	r3, [pc, #160]	; (8006a5c <TouchWSLedActivity+0xc0>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069c2:	d344      	bcc.n	8006a4e <TouchWSLedActivity+0xb2>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80069c4:	1d3a      	adds	r2, r7, #4
 80069c6:	1dbb      	adds	r3, r7, #6
 80069c8:	4611      	mov	r1, r2
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fb fd5e 	bl	800248c <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get number of LEDs, but we do it only once
 80069d0:	4b23      	ldr	r3, [pc, #140]	; (8006a60 <TouchWSLedActivity+0xc4>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d10b      	bne.n	80069f0 <TouchWSLedActivity+0x54>
				{
					while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 80069d8:	bf00      	nop
 80069da:	2201      	movs	r2, #1
 80069dc:	4921      	ldr	r1, [pc, #132]	; (8006a64 <TouchWSLedActivity+0xc8>)
 80069de:	2001      	movs	r0, #1
 80069e0:	f7fc f902 	bl	8002be8 <eeprom_read>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1f7      	bne.n	80069da <TouchWSLedActivity+0x3e>
					WSLedChangeFlag = 0;
 80069ea:	4b1f      	ldr	r3, [pc, #124]	; (8006a68 <TouchWSLedActivity+0xcc>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80069f0:	88fb      	ldrh	r3, [r7, #6]
 80069f2:	2b09      	cmp	r3, #9
 80069f4:	d90f      	bls.n	8006a16 <TouchWSLedActivity+0x7a>
 80069f6:	88fb      	ldrh	r3, [r7, #6]
 80069f8:	2b6e      	cmp	r3, #110	; 0x6e
 80069fa:	d80c      	bhi.n	8006a16 <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80069fc:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80069fe:	2bd7      	cmp	r3, #215	; 0xd7
 8006a00:	d909      	bls.n	8006a16 <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006a02:	88bb      	ldrh	r3, [r7, #4]
 8006a04:	2bec      	cmp	r3, #236	; 0xec
 8006a06:	d806      	bhi.n	8006a16 <TouchWSLedActivity+0x7a>
				{
					State = MENUTFT_LIGHTS;
 8006a08:	4b18      	ldr	r3, [pc, #96]	; (8006a6c <TouchWSLedActivity+0xd0>)
 8006a0a:	2205      	movs	r2, #5
 8006a0c:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8006a0e:	4b18      	ldr	r3, [pc, #96]	; (8006a70 <TouchWSLedActivity+0xd4>)
 8006a10:	2201      	movs	r2, #1
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	e016      	b.n	8006a44 <TouchWSLedActivity+0xa8>


				//
				// Check if it is button to increase number of LEDs - first line
				//
				else if((y >= WS_B_1_POZ_Y)&&(y <= (WS_B_1_POZ_Y + WS_LED_BUTTON_H)))
 8006a16:	88bb      	ldrh	r3, [r7, #4]
 8006a18:	2b40      	cmp	r3, #64	; 0x40
 8006a1a:	d90b      	bls.n	8006a34 <TouchWSLedActivity+0x98>
 8006a1c:	88bb      	ldrh	r3, [r7, #4]
 8006a1e:	2b56      	cmp	r3, #86	; 0x56
 8006a20:	d808      	bhi.n	8006a34 <TouchWSLedActivity+0x98>
				{
					increaseNumberOfWSLedOnTFT(x,y);
 8006a22:	88fb      	ldrh	r3, [r7, #6]
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	88ba      	ldrh	r2, [r7, #4]
 8006a28:	b2d2      	uxtb	r2, r2
 8006a2a:	4611      	mov	r1, r2
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f001 fed5 	bl	80087dc <increaseNumberOfWSLedOnTFT>
 8006a32:	e007      	b.n	8006a44 <TouchWSLedActivity+0xa8>
				//
				// Check if it is second line button to change LEDs to WHITE // BLUE // ETC
				//
				else
				{
					changeTypeOfWSLights(x, y);
 8006a34:	88fb      	ldrh	r3, [r7, #6]
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	88ba      	ldrh	r2, [r7, #4]
 8006a3a:	b2d2      	uxtb	r2, r2
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f001 ff2c 	bl	800889c <changeTypeOfWSLights>
				}

				TimerTouch = HAL_GetTick();
 8006a44:	f004 fb80 	bl	800b148 <HAL_GetTick>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	4a04      	ldr	r2, [pc, #16]	; (8006a5c <TouchWSLedActivity+0xc0>)
 8006a4c:	6013      	str	r3, [r2, #0]
			}
		}
}
 8006a4e:	bf00      	nop
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	0802a4cc 	.word	0x0802a4cc
 8006a5c:	2000029c 	.word	0x2000029c
 8006a60:	2000025a 	.word	0x2000025a
 8006a64:	20000034 	.word	0x20000034
 8006a68:	2000025b 	.word	0x2000025b
 8006a6c:	200002a0 	.word	0x200002a0
 8006a70:	20000259 	.word	0x20000259

08006a74 <Schedule1Activity>:
//
// Function to handling touch on Schedule 1 (ONE) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule1Activity()
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af02      	add	r7, sp, #8
	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006a7a:	4b70      	ldr	r3, [pc, #448]	; (8006c3c <Schedule1Activity+0x1c8>)
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d105      	bne.n	8006a8e <Schedule1Activity+0x1a>
	{
		updateAllSchedulesInfo(1);
 8006a82:	2001      	movs	r0, #1
 8006a84:	f001 fb96 	bl	80081b4 <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 8006a88:	4b6c      	ldr	r3, [pc, #432]	; (8006c3c <Schedule1Activity+0x1c8>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006a8e:	f7fb fd3b 	bl	8002508 <XPT2046_IsTouched>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 80cc 	beq.w	8006c32 <Schedule1Activity+0x1be>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006a9a:	f004 fb55 	bl	800b148 <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	4b67      	ldr	r3, [pc, #412]	; (8006c40 <Schedule1Activity+0x1cc>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aaa:	f0c0 80c2 	bcc.w	8006c32 <Schedule1Activity+0x1be>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006aae:	1d3a      	adds	r2, r7, #4
 8006ab0:	1dbb      	adds	r3, r7, #6
 8006ab2:	4611      	mov	r1, r2
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7fb fce9 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006aba:	88fb      	ldrh	r3, [r7, #6]
 8006abc:	2b09      	cmp	r3, #9
 8006abe:	d90f      	bls.n	8006ae0 <Schedule1Activity+0x6c>
 8006ac0:	88fb      	ldrh	r3, [r7, #6]
 8006ac2:	2b6e      	cmp	r3, #110	; 0x6e
 8006ac4:	d80c      	bhi.n	8006ae0 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006ac6:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006ac8:	2bd7      	cmp	r3, #215	; 0xd7
 8006aca:	d909      	bls.n	8006ae0 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006acc:	88bb      	ldrh	r3, [r7, #4]
 8006ace:	2bec      	cmp	r3, #236	; 0xec
 8006ad0:	d806      	bhi.n	8006ae0 <Schedule1Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 8006ad2:	4b5c      	ldr	r3, [pc, #368]	; (8006c44 <Schedule1Activity+0x1d0>)
 8006ad4:	2203      	movs	r2, #3
 8006ad6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006ad8:	4b5b      	ldr	r3, [pc, #364]	; (8006c48 <Schedule1Activity+0x1d4>)
 8006ada:	2201      	movs	r2, #1
 8006adc:	701a      	strb	r2, [r3, #0]
 8006ade:	e0a3      	b.n	8006c28 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006ae0:	88fb      	ldrh	r3, [r7, #6]
 8006ae2:	2bdb      	cmp	r3, #219	; 0xdb
 8006ae4:	d910      	bls.n	8006b08 <Schedule1Activity+0x94>
 8006ae6:	88fb      	ldrh	r3, [r7, #6]
 8006ae8:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006aec:	d20c      	bcs.n	8006b08 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006aee:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006af0:	2bd7      	cmp	r3, #215	; 0xd7
 8006af2:	d909      	bls.n	8006b08 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006af4:	88bb      	ldrh	r3, [r7, #4]
 8006af6:	2bec      	cmp	r3, #236	; 0xec
 8006af8:	d806      	bhi.n	8006b08 <Schedule1Activity+0x94>
			{
				State = MENUTFT_SCHEDULE_2;
 8006afa:	4b52      	ldr	r3, [pc, #328]	; (8006c44 <Schedule1Activity+0x1d0>)
 8006afc:	2208      	movs	r2, #8
 8006afe:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006b00:	4b51      	ldr	r3, [pc, #324]	; (8006c48 <Schedule1Activity+0x1d4>)
 8006b02:	2201      	movs	r2, #1
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	e08f      	b.n	8006c28 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006b08:	88bb      	ldrh	r3, [r7, #4]
 8006b0a:	2b31      	cmp	r3, #49	; 0x31
 8006b0c:	d909      	bls.n	8006b22 <Schedule1Activity+0xae>
 8006b0e:	88bb      	ldrh	r3, [r7, #4]
 8006b10:	2b46      	cmp	r3, #70	; 0x46
 8006b12:	d806      	bhi.n	8006b22 <Schedule1Activity+0xae>
			{
				MenuTFTSchedule1ActivityDayOfWeekRow(x,y);
 8006b14:	88fb      	ldrh	r3, [r7, #6]
 8006b16:	88ba      	ldrh	r2, [r7, #4]
 8006b18:	4611      	mov	r1, r2
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 f99a 	bl	8006e54 <MenuTFTSchedule1ActivityDayOfWeekRow>
 8006b20:	e082      	b.n	8006c28 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006b22:	88bb      	ldrh	r3, [r7, #4]
 8006b24:	2b64      	cmp	r3, #100	; 0x64
 8006b26:	d909      	bls.n	8006b3c <Schedule1Activity+0xc8>
 8006b28:	88bb      	ldrh	r3, [r7, #4]
 8006b2a:	2b79      	cmp	r3, #121	; 0x79
 8006b2c:	d806      	bhi.n	8006b3c <Schedule1Activity+0xc8>
			{
				MenuTFTSchedule1ActivityHourMinuteONAdd(x,y);
 8006b2e:	88fb      	ldrh	r3, [r7, #6]
 8006b30:	88ba      	ldrh	r2, [r7, #4]
 8006b32:	4611      	mov	r1, r2
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 fd4f 	bl	80075d8 <MenuTFTSchedule1ActivityHourMinuteONAdd>
 8006b3a:	e075      	b.n	8006c28 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006b3c:	88bb      	ldrh	r3, [r7, #4]
 8006b3e:	2b87      	cmp	r3, #135	; 0x87
 8006b40:	d909      	bls.n	8006b56 <Schedule1Activity+0xe2>
 8006b42:	88bb      	ldrh	r3, [r7, #4]
 8006b44:	2b9c      	cmp	r3, #156	; 0x9c
 8006b46:	d806      	bhi.n	8006b56 <Schedule1Activity+0xe2>
			{
				MenuTFTSchedule1ActivityHourMinuteOFFAdd(x,y);
 8006b48:	88fb      	ldrh	r3, [r7, #6]
 8006b4a:	88ba      	ldrh	r2, [r7, #4]
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 fdc0 	bl	80076d4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>
 8006b54:	e068      	b.n	8006c28 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006b56:	88bb      	ldrh	r3, [r7, #4]
 8006b58:	2ba9      	cmp	r3, #169	; 0xa9
 8006b5a:	d909      	bls.n	8006b70 <Schedule1Activity+0xfc>
 8006b5c:	88bb      	ldrh	r3, [r7, #4]
 8006b5e:	2bbe      	cmp	r3, #190	; 0xbe
 8006b60:	d806      	bhi.n	8006b70 <Schedule1Activity+0xfc>
			{
				MenuTFTSchedule1ActivityRelaysAndLightsRow(x,y);
 8006b62:	88fb      	ldrh	r3, [r7, #6]
 8006b64:	88ba      	ldrh	r2, [r7, #4]
 8006b66:	4611      	mov	r1, r2
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f001 f8f7 	bl	8007d5c <MenuTFTSchedule1ActivityRelaysAndLightsRow>
 8006b6e:	e05b      	b.n	8006c28 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006b70:	88fb      	ldrh	r3, [r7, #6]
 8006b72:	2b77      	cmp	r3, #119	; 0x77
 8006b74:	d958      	bls.n	8006c28 <Schedule1Activity+0x1b4>
 8006b76:	88fb      	ldrh	r3, [r7, #6]
 8006b78:	2bd2      	cmp	r3, #210	; 0xd2
 8006b7a:	d855      	bhi.n	8006c28 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006b7c:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006b7e:	2bd7      	cmp	r3, #215	; 0xd7
 8006b80:	d952      	bls.n	8006c28 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006b82:	88bb      	ldrh	r3, [r7, #4]
 8006b84:	2bec      	cmp	r3, #236	; 0xec
 8006b86:	d84f      	bhi.n	8006c28 <Schedule1Activity+0x1b4>
			{
				EEPROM_ScheduleHourOnUpdate(1, hourOnSchedule1);
 8006b88:	4b30      	ldr	r3, [pc, #192]	; (8006c4c <Schedule1Activity+0x1d8>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	2001      	movs	r0, #1
 8006b90:	f7fc fba1 	bl	80032d6 <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(1, minuteOnSchedule1);
 8006b94:	4b2e      	ldr	r3, [pc, #184]	; (8006c50 <Schedule1Activity+0x1dc>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	4619      	mov	r1, r3
 8006b9a:	2001      	movs	r0, #1
 8006b9c:	f7fc fbbe 	bl	800331c <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(1, hourOffSchedule1);
 8006ba0:	4b2c      	ldr	r3, [pc, #176]	; (8006c54 <Schedule1Activity+0x1e0>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	2001      	movs	r0, #1
 8006ba8:	f7fc fbdb 	bl	8003362 <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(1, minuteOffSchedule1);
 8006bac:	4b2a      	ldr	r3, [pc, #168]	; (8006c58 <Schedule1Activity+0x1e4>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	2001      	movs	r0, #1
 8006bb4:	f7fc fbf8 	bl	80033a8 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(1,  schedule1DayInWeekTab);
 8006bb8:	4928      	ldr	r1, [pc, #160]	; (8006c5c <Schedule1Activity+0x1e8>)
 8006bba:	2001      	movs	r0, #1
 8006bbc:	f7fc f9eb 	bl	8002f96 <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(1, schedule1RelayAndSwitchTab);
 8006bc0:	4927      	ldr	r1, [pc, #156]	; (8006c60 <Schedule1Activity+0x1ec>)
 8006bc2:	2001      	movs	r0, #1
 8006bc4:	f7fc fa92 	bl	80030ec <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 8006bc8:	4826      	ldr	r0, [pc, #152]	; (8006c64 <Schedule1Activity+0x1f0>)
 8006bca:	f7fa fecf 	bl	800196c <EF_SetFont>
				sprintf((char*)Msg, " H1 ZMIENIONY      ");
 8006bce:	4926      	ldr	r1, [pc, #152]	; (8006c68 <Schedule1Activity+0x1f4>)
 8006bd0:	4826      	ldr	r0, [pc, #152]	; (8006c6c <Schedule1Activity+0x1f8>)
 8006bd2:	f00c f849 	bl	8012c68 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 8006bd6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006bda:	9301      	str	r3, [sp, #4]
 8006bdc:	2301      	movs	r3, #1
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006be4:	220a      	movs	r2, #10
 8006be6:	2128      	movs	r1, #40	; 0x28
 8006be8:	4820      	ldr	r0, [pc, #128]	; (8006c6c <Schedule1Activity+0x1f8>)
 8006bea:	f7fb f8d9 	bl	8001da0 <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 8006bee:	4820      	ldr	r0, [pc, #128]	; (8006c70 <Schedule1Activity+0x1fc>)
 8006bf0:	f7fa febc 	bl	800196c <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8006bf4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006bf8:	9301      	str	r3, [sp, #4]
 8006bfa:	2305      	movs	r3, #5
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	2314      	movs	r3, #20
 8006c00:	225a      	movs	r2, #90	; 0x5a
 8006c02:	21d8      	movs	r1, #216	; 0xd8
 8006c04:	2078      	movs	r0, #120	; 0x78
 8006c06:	f7fa fe60 	bl	80018ca <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 8006c0a:	491a      	ldr	r1, [pc, #104]	; (8006c74 <Schedule1Activity+0x200>)
 8006c0c:	4817      	ldr	r0, [pc, #92]	; (8006c6c <Schedule1Activity+0x1f8>)
 8006c0e:	f00c f82b 	bl	8012c68 <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8006c12:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c16:	9301      	str	r3, [sp, #4]
 8006c18:	2300      	movs	r3, #0
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	22da      	movs	r2, #218	; 0xda
 8006c20:	217e      	movs	r1, #126	; 0x7e
 8006c22:	4812      	ldr	r0, [pc, #72]	; (8006c6c <Schedule1Activity+0x1f8>)
 8006c24:	f7fb f8bc 	bl	8001da0 <EF_PutString>
				//TODO! Day of week
			}
			TimerTouch = HAL_GetTick();
 8006c28:	f004 fa8e 	bl	800b148 <HAL_GetTick>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	4a04      	ldr	r2, [pc, #16]	; (8006c40 <Schedule1Activity+0x1cc>)
 8006c30:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	2000025c 	.word	0x2000025c
 8006c40:	2000029c 	.word	0x2000029c
 8006c44:	200002a0 	.word	0x200002a0
 8006c48:	20000259 	.word	0x20000259
 8006c4c:	20000285 	.word	0x20000285
 8006c50:	20000287 	.word	0x20000287
 8006c54:	20000286 	.word	0x20000286
 8006c58:	20000288 	.word	0x20000288
 8006c5c:	20000260 	.word	0x20000260
 8006c60:	20000268 	.word	0x20000268
 8006c64:	0802a4cc 	.word	0x0802a4cc
 8006c68:	08016ee4 	.word	0x08016ee4
 8006c6c:	200002cc 	.word	0x200002cc
 8006c70:	08028554 	.word	0x08028554
 8006c74:	08016ef8 	.word	0x08016ef8

08006c78 <Schedule2Activity>:
//
// Function to handling touch on Schedule 2 (TWO) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule2Activity()
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af02      	add	r7, sp, #8

	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006c7e:	4b66      	ldr	r3, [pc, #408]	; (8006e18 <Schedule2Activity+0x1a0>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d105      	bne.n	8006c92 <Schedule2Activity+0x1a>
	{
		updateAllSchedulesInfo(2);
 8006c86:	2002      	movs	r0, #2
 8006c88:	f001 fa94 	bl	80081b4 <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 8006c8c:	4b62      	ldr	r3, [pc, #392]	; (8006e18 <Schedule2Activity+0x1a0>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006c92:	f7fb fc39 	bl	8002508 <XPT2046_IsTouched>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 80b8 	beq.w	8006e0e <Schedule2Activity+0x196>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006c9e:	f004 fa53 	bl	800b148 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	4b5d      	ldr	r3, [pc, #372]	; (8006e1c <Schedule2Activity+0x1a4>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cae:	f0c0 80ae 	bcc.w	8006e0e <Schedule2Activity+0x196>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006cb2:	1d3a      	adds	r2, r7, #4
 8006cb4:	1dbb      	adds	r3, r7, #6
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fb fbe7 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006cbe:	88fb      	ldrh	r3, [r7, #6]
 8006cc0:	2b09      	cmp	r3, #9
 8006cc2:	d90f      	bls.n	8006ce4 <Schedule2Activity+0x6c>
 8006cc4:	88fb      	ldrh	r3, [r7, #6]
 8006cc6:	2b6e      	cmp	r3, #110	; 0x6e
 8006cc8:	d80c      	bhi.n	8006ce4 <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006cca:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006ccc:	2bd7      	cmp	r3, #215	; 0xd7
 8006cce:	d909      	bls.n	8006ce4 <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006cd0:	88bb      	ldrh	r3, [r7, #4]
 8006cd2:	2bec      	cmp	r3, #236	; 0xec
 8006cd4:	d806      	bhi.n	8006ce4 <Schedule2Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 8006cd6:	4b52      	ldr	r3, [pc, #328]	; (8006e20 <Schedule2Activity+0x1a8>)
 8006cd8:	2203      	movs	r2, #3
 8006cda:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006cdc:	4b51      	ldr	r3, [pc, #324]	; (8006e24 <Schedule2Activity+0x1ac>)
 8006cde:	2201      	movs	r2, #1
 8006ce0:	701a      	strb	r2, [r3, #0]
 8006ce2:	e08f      	b.n	8006e04 <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006ce4:	88bb      	ldrh	r3, [r7, #4]
 8006ce6:	2b31      	cmp	r3, #49	; 0x31
 8006ce8:	d909      	bls.n	8006cfe <Schedule2Activity+0x86>
 8006cea:	88bb      	ldrh	r3, [r7, #4]
 8006cec:	2b46      	cmp	r3, #70	; 0x46
 8006cee:	d806      	bhi.n	8006cfe <Schedule2Activity+0x86>
			{
				MenuTFTSchedule2ActivityDayOfWeekRow(x,y);
 8006cf0:	88fb      	ldrh	r3, [r7, #6]
 8006cf2:	88ba      	ldrh	r2, [r7, #4]
 8006cf4:	4611      	mov	r1, r2
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 fd6a 	bl	80077d0 <MenuTFTSchedule2ActivityDayOfWeekRow>
 8006cfc:	e082      	b.n	8006e04 <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006cfe:	88bb      	ldrh	r3, [r7, #4]
 8006d00:	2b64      	cmp	r3, #100	; 0x64
 8006d02:	d909      	bls.n	8006d18 <Schedule2Activity+0xa0>
 8006d04:	88bb      	ldrh	r3, [r7, #4]
 8006d06:	2b79      	cmp	r3, #121	; 0x79
 8006d08:	d806      	bhi.n	8006d18 <Schedule2Activity+0xa0>
			{
				MenuTFTSchedule2ActivityHourMinuteONAdd(x,y);
 8006d0a:	88fb      	ldrh	r3, [r7, #6]
 8006d0c:	88ba      	ldrh	r2, [r7, #4]
 8006d0e:	4611      	mov	r1, r2
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 ff27 	bl	8007b64 <MenuTFTSchedule2ActivityHourMinuteONAdd>
 8006d16:	e075      	b.n	8006e04 <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006d18:	88bb      	ldrh	r3, [r7, #4]
 8006d1a:	2b87      	cmp	r3, #135	; 0x87
 8006d1c:	d909      	bls.n	8006d32 <Schedule2Activity+0xba>
 8006d1e:	88bb      	ldrh	r3, [r7, #4]
 8006d20:	2b9c      	cmp	r3, #156	; 0x9c
 8006d22:	d806      	bhi.n	8006d32 <Schedule2Activity+0xba>
			{
				MenuTFTSchedule2ActivityHourMinuteOFFAdd(x,y);
 8006d24:	88fb      	ldrh	r3, [r7, #6]
 8006d26:	88ba      	ldrh	r2, [r7, #4]
 8006d28:	4611      	mov	r1, r2
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 ff98 	bl	8007c60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>
 8006d30:	e068      	b.n	8006e04 <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006d32:	88bb      	ldrh	r3, [r7, #4]
 8006d34:	2ba9      	cmp	r3, #169	; 0xa9
 8006d36:	d909      	bls.n	8006d4c <Schedule2Activity+0xd4>
 8006d38:	88bb      	ldrh	r3, [r7, #4]
 8006d3a:	2bbe      	cmp	r3, #190	; 0xbe
 8006d3c:	d806      	bhi.n	8006d4c <Schedule2Activity+0xd4>
			{
				MenuTFTSchedule2ActivityRelaysAndLightsRow(x,y);
 8006d3e:	88fb      	ldrh	r3, [r7, #6]
 8006d40:	88ba      	ldrh	r2, [r7, #4]
 8006d42:	4611      	mov	r1, r2
 8006d44:	4618      	mov	r0, r3
 8006d46:	f001 f91f 	bl	8007f88 <MenuTFTSchedule2ActivityRelaysAndLightsRow>
 8006d4a:	e05b      	b.n	8006e04 <Schedule2Activity+0x18c>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006d4c:	88fb      	ldrh	r3, [r7, #6]
 8006d4e:	2b77      	cmp	r3, #119	; 0x77
 8006d50:	d958      	bls.n	8006e04 <Schedule2Activity+0x18c>
 8006d52:	88fb      	ldrh	r3, [r7, #6]
 8006d54:	2bd2      	cmp	r3, #210	; 0xd2
 8006d56:	d855      	bhi.n	8006e04 <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006d58:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006d5a:	2bd7      	cmp	r3, #215	; 0xd7
 8006d5c:	d952      	bls.n	8006e04 <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006d5e:	88bb      	ldrh	r3, [r7, #4]
 8006d60:	2bec      	cmp	r3, #236	; 0xec
 8006d62:	d84f      	bhi.n	8006e04 <Schedule2Activity+0x18c>
			{
				EEPROM_ScheduleHourOnUpdate(2, hourOnSchedule2);
 8006d64:	4b30      	ldr	r3, [pc, #192]	; (8006e28 <Schedule2Activity+0x1b0>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	4619      	mov	r1, r3
 8006d6a:	2002      	movs	r0, #2
 8006d6c:	f7fc fab3 	bl	80032d6 <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(2, minuteOnSchedule2);
 8006d70:	4b2e      	ldr	r3, [pc, #184]	; (8006e2c <Schedule2Activity+0x1b4>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	4619      	mov	r1, r3
 8006d76:	2002      	movs	r0, #2
 8006d78:	f7fc fad0 	bl	800331c <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(2, hourOffSchedule2);
 8006d7c:	4b2c      	ldr	r3, [pc, #176]	; (8006e30 <Schedule2Activity+0x1b8>)
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	4619      	mov	r1, r3
 8006d82:	2002      	movs	r0, #2
 8006d84:	f7fc faed 	bl	8003362 <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(2, minuteOffSchedule2);
 8006d88:	4b2a      	ldr	r3, [pc, #168]	; (8006e34 <Schedule2Activity+0x1bc>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	2002      	movs	r0, #2
 8006d90:	f7fc fb0a 	bl	80033a8 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(2,  schedule2DayInWeekTab);
 8006d94:	4928      	ldr	r1, [pc, #160]	; (8006e38 <Schedule2Activity+0x1c0>)
 8006d96:	2002      	movs	r0, #2
 8006d98:	f7fc f8fd 	bl	8002f96 <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(2, schedule2RelayAndSwitchTab);
 8006d9c:	4927      	ldr	r1, [pc, #156]	; (8006e3c <Schedule2Activity+0x1c4>)
 8006d9e:	2002      	movs	r0, #2
 8006da0:	f7fc f9a4 	bl	80030ec <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 8006da4:	4826      	ldr	r0, [pc, #152]	; (8006e40 <Schedule2Activity+0x1c8>)
 8006da6:	f7fa fde1 	bl	800196c <EF_SetFont>
				sprintf((char*)Msg, " H2 ZMIENIONY       ");
 8006daa:	4926      	ldr	r1, [pc, #152]	; (8006e44 <Schedule2Activity+0x1cc>)
 8006dac:	4826      	ldr	r0, [pc, #152]	; (8006e48 <Schedule2Activity+0x1d0>)
 8006dae:	f00b ff5b 	bl	8012c68 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 8006db2:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006db6:	9301      	str	r3, [sp, #4]
 8006db8:	2301      	movs	r3, #1
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006dc0:	220a      	movs	r2, #10
 8006dc2:	2128      	movs	r1, #40	; 0x28
 8006dc4:	4820      	ldr	r0, [pc, #128]	; (8006e48 <Schedule2Activity+0x1d0>)
 8006dc6:	f7fa ffeb 	bl	8001da0 <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 8006dca:	4820      	ldr	r0, [pc, #128]	; (8006e4c <Schedule2Activity+0x1d4>)
 8006dcc:	f7fa fdce 	bl	800196c <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8006dd0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006dd4:	9301      	str	r3, [sp, #4]
 8006dd6:	2305      	movs	r3, #5
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	2314      	movs	r3, #20
 8006ddc:	225a      	movs	r2, #90	; 0x5a
 8006dde:	21d8      	movs	r1, #216	; 0xd8
 8006de0:	2078      	movs	r0, #120	; 0x78
 8006de2:	f7fa fd72 	bl	80018ca <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 8006de6:	491a      	ldr	r1, [pc, #104]	; (8006e50 <Schedule2Activity+0x1d8>)
 8006de8:	4817      	ldr	r0, [pc, #92]	; (8006e48 <Schedule2Activity+0x1d0>)
 8006dea:	f00b ff3d 	bl	8012c68 <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8006dee:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006df2:	9301      	str	r3, [sp, #4]
 8006df4:	2300      	movs	r3, #0
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	2300      	movs	r3, #0
 8006dfa:	22da      	movs	r2, #218	; 0xda
 8006dfc:	217e      	movs	r1, #126	; 0x7e
 8006dfe:	4812      	ldr	r0, [pc, #72]	; (8006e48 <Schedule2Activity+0x1d0>)
 8006e00:	f7fa ffce 	bl	8001da0 <EF_PutString>
				// TODO! Add day of week
			}
			TimerTouch = HAL_GetTick();
 8006e04:	f004 f9a0 	bl	800b148 <HAL_GetTick>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	4a04      	ldr	r2, [pc, #16]	; (8006e1c <Schedule2Activity+0x1a4>)
 8006e0c:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006e0e:	bf00      	nop
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	2000025c 	.word	0x2000025c
 8006e1c:	2000029c 	.word	0x2000029c
 8006e20:	200002a0 	.word	0x200002a0
 8006e24:	20000259 	.word	0x20000259
 8006e28:	20000289 	.word	0x20000289
 8006e2c:	2000028b 	.word	0x2000028b
 8006e30:	2000028a 	.word	0x2000028a
 8006e34:	2000028c 	.word	0x2000028c
 8006e38:	20000274 	.word	0x20000274
 8006e3c:	2000027c 	.word	0x2000027c
 8006e40:	0802a4cc 	.word	0x0802a4cc
 8006e44:	08016f00 	.word	0x08016f00
 8006e48:	200002cc 	.word	0x200002cc
 8006e4c:	08028554 	.word	0x08028554
 8006e50:	08016ef8 	.word	0x08016ef8

08006e54 <MenuTFTSchedule1ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule1Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule1ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	460a      	mov	r2, r1
 8006e5e:	80fb      	strh	r3, [r7, #6]
 8006e60:	4613      	mov	r3, r2
 8006e62:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8006e64:	88fb      	ldrh	r3, [r7, #6]
 8006e66:	2b3b      	cmp	r3, #59	; 0x3b
 8006e68:	d91a      	bls.n	8006ea0 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
 8006e6a:	88fb      	ldrh	r3, [r7, #6]
 8006e6c:	2b50      	cmp	r3, #80	; 0x50
 8006e6e:	d817      	bhi.n	8006ea0 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
	{
		if(schedule1DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8006e70:	4b68      	ldr	r3, [pc, #416]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d004      	beq.n	8006e82 <MenuTFTSchedule1ActivityDayOfWeekRow+0x2e>
 8006e78:	2100      	movs	r1, #0
 8006e7a:	2001      	movs	r0, #1
 8006e7c:	f000 f8cc 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8006e80:	e003      	b.n	8006e8a <MenuTFTSchedule1ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 8006e82:	2101      	movs	r1, #1
 8006e84:	2001      	movs	r0, #1
 8006e86:	f000 f8c7 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[0] = !schedule1DayInWeekTab[0]; // update current state in tab holding state of day in week
 8006e8a:	4b62      	ldr	r3, [pc, #392]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	bf0c      	ite	eq
 8006e92:	2301      	moveq	r3, #1
 8006e94:	2300      	movne	r3, #0
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	461a      	mov	r2, r3
 8006e9a:	4b5e      	ldr	r3, [pc, #376]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006e9c:	701a      	strb	r2, [r3, #0]
 8006e9e:	e0b4      	b.n	800700a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8006ea0:	88fb      	ldrh	r3, [r7, #6]
 8006ea2:	2b59      	cmp	r3, #89	; 0x59
 8006ea4:	d91a      	bls.n	8006edc <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
 8006ea6:	88fb      	ldrh	r3, [r7, #6]
 8006ea8:	2b6e      	cmp	r3, #110	; 0x6e
 8006eaa:	d817      	bhi.n	8006edc <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
	{
		if(schedule1DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8006eac:	4b59      	ldr	r3, [pc, #356]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006eae:	785b      	ldrb	r3, [r3, #1]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d004      	beq.n	8006ebe <MenuTFTSchedule1ActivityDayOfWeekRow+0x6a>
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	2002      	movs	r0, #2
 8006eb8:	f000 f8ae 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8006ebc:	e003      	b.n	8006ec6 <MenuTFTSchedule1ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	2002      	movs	r0, #2
 8006ec2:	f000 f8a9 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[1] = !schedule1DayInWeekTab[1];
 8006ec6:	4b53      	ldr	r3, [pc, #332]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006ec8:	785b      	ldrb	r3, [r3, #1]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	bf0c      	ite	eq
 8006ece:	2301      	moveq	r3, #1
 8006ed0:	2300      	movne	r3, #0
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	4b4f      	ldr	r3, [pc, #316]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006ed8:	705a      	strb	r2, [r3, #1]
 8006eda:	e096      	b.n	800700a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8006edc:	88fb      	ldrh	r3, [r7, #6]
 8006ede:	2b77      	cmp	r3, #119	; 0x77
 8006ee0:	d91a      	bls.n	8006f18 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
 8006ee2:	88fb      	ldrh	r3, [r7, #6]
 8006ee4:	2b8c      	cmp	r3, #140	; 0x8c
 8006ee6:	d817      	bhi.n	8006f18 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
	{
		if(schedule1DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8006ee8:	4b4a      	ldr	r3, [pc, #296]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006eea:	789b      	ldrb	r3, [r3, #2]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d004      	beq.n	8006efa <MenuTFTSchedule1ActivityDayOfWeekRow+0xa6>
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	2003      	movs	r0, #3
 8006ef4:	f000 f890 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8006ef8:	e003      	b.n	8006f02 <MenuTFTSchedule1ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 8006efa:	2101      	movs	r1, #1
 8006efc:	2003      	movs	r0, #3
 8006efe:	f000 f88b 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[2] = !schedule1DayInWeekTab[2];
 8006f02:	4b44      	ldr	r3, [pc, #272]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f04:	789b      	ldrb	r3, [r3, #2]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	bf0c      	ite	eq
 8006f0a:	2301      	moveq	r3, #1
 8006f0c:	2300      	movne	r3, #0
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	461a      	mov	r2, r3
 8006f12:	4b40      	ldr	r3, [pc, #256]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f14:	709a      	strb	r2, [r3, #2]
 8006f16:	e078      	b.n	800700a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8006f18:	88fb      	ldrh	r3, [r7, #6]
 8006f1a:	2b95      	cmp	r3, #149	; 0x95
 8006f1c:	d91a      	bls.n	8006f54 <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
 8006f1e:	88fb      	ldrh	r3, [r7, #6]
 8006f20:	2baa      	cmp	r3, #170	; 0xaa
 8006f22:	d817      	bhi.n	8006f54 <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
	{
		if(schedule1DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 8006f24:	4b3b      	ldr	r3, [pc, #236]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f26:	78db      	ldrb	r3, [r3, #3]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d004      	beq.n	8006f36 <MenuTFTSchedule1ActivityDayOfWeekRow+0xe2>
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	2004      	movs	r0, #4
 8006f30:	f000 f872 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8006f34:	e003      	b.n	8006f3e <MenuTFTSchedule1ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 8006f36:	2101      	movs	r1, #1
 8006f38:	2004      	movs	r0, #4
 8006f3a:	f000 f86d 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[3] = !schedule1DayInWeekTab[3];
 8006f3e:	4b35      	ldr	r3, [pc, #212]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f40:	78db      	ldrb	r3, [r3, #3]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	bf0c      	ite	eq
 8006f46:	2301      	moveq	r3, #1
 8006f48:	2300      	movne	r3, #0
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	4b31      	ldr	r3, [pc, #196]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f50:	70da      	strb	r2, [r3, #3]
 8006f52:	e05a      	b.n	800700a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8006f54:	88fb      	ldrh	r3, [r7, #6]
 8006f56:	2bb3      	cmp	r3, #179	; 0xb3
 8006f58:	d91a      	bls.n	8006f90 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
 8006f5a:	88fb      	ldrh	r3, [r7, #6]
 8006f5c:	2bc8      	cmp	r3, #200	; 0xc8
 8006f5e:	d817      	bhi.n	8006f90 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
	{
		if(schedule1DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8006f60:	4b2c      	ldr	r3, [pc, #176]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f62:	791b      	ldrb	r3, [r3, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d004      	beq.n	8006f72 <MenuTFTSchedule1ActivityDayOfWeekRow+0x11e>
 8006f68:	2100      	movs	r1, #0
 8006f6a:	2005      	movs	r0, #5
 8006f6c:	f000 f854 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8006f70:	e003      	b.n	8006f7a <MenuTFTSchedule1ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 8006f72:	2101      	movs	r1, #1
 8006f74:	2005      	movs	r0, #5
 8006f76:	f000 f84f 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[4] = !schedule1DayInWeekTab[4];
 8006f7a:	4b26      	ldr	r3, [pc, #152]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f7c:	791b      	ldrb	r3, [r3, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	bf0c      	ite	eq
 8006f82:	2301      	moveq	r3, #1
 8006f84:	2300      	movne	r3, #0
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	461a      	mov	r2, r3
 8006f8a:	4b22      	ldr	r3, [pc, #136]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f8c:	711a      	strb	r2, [r3, #4]
 8006f8e:	e03c      	b.n	800700a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8006f90:	88fb      	ldrh	r3, [r7, #6]
 8006f92:	2bd1      	cmp	r3, #209	; 0xd1
 8006f94:	d91a      	bls.n	8006fcc <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
 8006f96:	88fb      	ldrh	r3, [r7, #6]
 8006f98:	2be6      	cmp	r3, #230	; 0xe6
 8006f9a:	d817      	bhi.n	8006fcc <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
	{
		if(schedule1DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8006f9c:	4b1d      	ldr	r3, [pc, #116]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f9e:	795b      	ldrb	r3, [r3, #5]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d004      	beq.n	8006fae <MenuTFTSchedule1ActivityDayOfWeekRow+0x15a>
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	2006      	movs	r0, #6
 8006fa8:	f000 f836 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8006fac:	e003      	b.n	8006fb6 <MenuTFTSchedule1ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 8006fae:	2101      	movs	r1, #1
 8006fb0:	2006      	movs	r0, #6
 8006fb2:	f000 f831 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[5] = !schedule1DayInWeekTab[5];
 8006fb6:	4b17      	ldr	r3, [pc, #92]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006fb8:	795b      	ldrb	r3, [r3, #5]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	bf0c      	ite	eq
 8006fbe:	2301      	moveq	r3, #1
 8006fc0:	2300      	movne	r3, #0
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	4b13      	ldr	r3, [pc, #76]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006fc8:	715a      	strb	r2, [r3, #5]
 8006fca:	e01e      	b.n	800700a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8006fcc:	88fb      	ldrh	r3, [r7, #6]
 8006fce:	2bef      	cmp	r3, #239	; 0xef
 8006fd0:	d91b      	bls.n	800700a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 8006fd2:	88fb      	ldrh	r3, [r7, #6]
 8006fd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fd8:	d817      	bhi.n	800700a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule1DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 8006fda:	4b0e      	ldr	r3, [pc, #56]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006fdc:	799b      	ldrb	r3, [r3, #6]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d004      	beq.n	8006fec <MenuTFTSchedule1ActivityDayOfWeekRow+0x198>
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	2007      	movs	r0, #7
 8006fe6:	f000 f817 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8006fea:	e003      	b.n	8006ff4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8006fec:	2101      	movs	r1, #1
 8006fee:	2007      	movs	r0, #7
 8006ff0:	f000 f812 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[6] = !schedule1DayInWeekTab[6];
 8006ff4:	4b07      	ldr	r3, [pc, #28]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006ff6:	799b      	ldrb	r3, [r3, #6]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	bf0c      	ite	eq
 8006ffc:	2301      	moveq	r3, #1
 8006ffe:	2300      	movne	r3, #0
 8007000:	b2db      	uxtb	r3, r3
 8007002:	461a      	mov	r2, r3
 8007004:	4b03      	ldr	r3, [pc, #12]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8007006:	719a      	strb	r2, [r3, #6]
	}
}
 8007008:	e7ff      	b.n	800700a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 800700a:	bf00      	nop
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20000260 	.word	0x20000260

08007018 <changeTFTScheduleDayOfWeek>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleDayOfWeek(uint8_t NrOfDay, uint8_t NewState)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af02      	add	r7, sp, #8
 800701e:	4603      	mov	r3, r0
 8007020:	460a      	mov	r2, r1
 8007022:	71fb      	strb	r3, [r7, #7]
 8007024:	4613      	mov	r3, r2
 8007026:	71bb      	strb	r3, [r7, #6]
	if (1 == NrOfDay)	// if Monday
 8007028:	79fb      	ldrb	r3, [r7, #7]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d11a      	bne.n	8007064 <changeTFTScheduleDayOfWeek+0x4c>
	{
		if(0 == NewState)	// if turn off
 800702e:	79bb      	ldrb	r3, [r7, #6]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10b      	bne.n	800704c <changeTFTScheduleDayOfWeek+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007034:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007038:	9301      	str	r3, [sp, #4]
 800703a:	2305      	movs	r3, #5
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	2312      	movs	r3, #18
 8007040:	2212      	movs	r2, #18
 8007042:	2133      	movs	r1, #51	; 0x33
 8007044:	203d      	movs	r0, #61	; 0x3d
 8007046:	f7fa fc40 	bl	80018ca <GFX_DrawFillRoundRectangle>
		else	// if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 800704a:	e0be      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800704c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007050:	9301      	str	r3, [sp, #4]
 8007052:	2305      	movs	r3, #5
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	2312      	movs	r3, #18
 8007058:	2212      	movs	r2, #18
 800705a:	2133      	movs	r1, #51	; 0x33
 800705c:	203d      	movs	r0, #61	; 0x3d
 800705e:	f7fa fc34 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007062:	e0b2      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
	else if (2== NrOfDay)	// if Tuesday
 8007064:	79fb      	ldrb	r3, [r7, #7]
 8007066:	2b02      	cmp	r3, #2
 8007068:	d11a      	bne.n	80070a0 <changeTFTScheduleDayOfWeek+0x88>
		if(0 == NewState)	// if turn off
 800706a:	79bb      	ldrb	r3, [r7, #6]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10b      	bne.n	8007088 <changeTFTScheduleDayOfWeek+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007070:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007074:	9301      	str	r3, [sp, #4]
 8007076:	2305      	movs	r3, #5
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	2312      	movs	r3, #18
 800707c:	2212      	movs	r2, #18
 800707e:	2133      	movs	r1, #51	; 0x33
 8007080:	205b      	movs	r0, #91	; 0x5b
 8007082:	f7fa fc22 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007086:	e0a0      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007088:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800708c:	9301      	str	r3, [sp, #4]
 800708e:	2305      	movs	r3, #5
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	2312      	movs	r3, #18
 8007094:	2212      	movs	r2, #18
 8007096:	2133      	movs	r1, #51	; 0x33
 8007098:	205b      	movs	r0, #91	; 0x5b
 800709a:	f7fa fc16 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800709e:	e094      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
	else if (3== NrOfDay)	// if Wednesday
 80070a0:	79fb      	ldrb	r3, [r7, #7]
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	d11a      	bne.n	80070dc <changeTFTScheduleDayOfWeek+0xc4>
		if(0 == NewState)	// if turn off
 80070a6:	79bb      	ldrb	r3, [r7, #6]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10b      	bne.n	80070c4 <changeTFTScheduleDayOfWeek+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80070ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80070b0:	9301      	str	r3, [sp, #4]
 80070b2:	2305      	movs	r3, #5
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	2312      	movs	r3, #18
 80070b8:	2212      	movs	r2, #18
 80070ba:	2133      	movs	r1, #51	; 0x33
 80070bc:	2079      	movs	r0, #121	; 0x79
 80070be:	f7fa fc04 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80070c2:	e082      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80070c4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	2305      	movs	r3, #5
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	2312      	movs	r3, #18
 80070d0:	2212      	movs	r2, #18
 80070d2:	2133      	movs	r1, #51	; 0x33
 80070d4:	2079      	movs	r0, #121	; 0x79
 80070d6:	f7fa fbf8 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80070da:	e076      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
	else if (4== NrOfDay)	// if Thursday
 80070dc:	79fb      	ldrb	r3, [r7, #7]
 80070de:	2b04      	cmp	r3, #4
 80070e0:	d11a      	bne.n	8007118 <changeTFTScheduleDayOfWeek+0x100>
		if(0 == NewState)	// if turn off
 80070e2:	79bb      	ldrb	r3, [r7, #6]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10b      	bne.n	8007100 <changeTFTScheduleDayOfWeek+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80070e8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80070ec:	9301      	str	r3, [sp, #4]
 80070ee:	2305      	movs	r3, #5
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	2312      	movs	r3, #18
 80070f4:	2212      	movs	r2, #18
 80070f6:	2133      	movs	r1, #51	; 0x33
 80070f8:	2097      	movs	r0, #151	; 0x97
 80070fa:	f7fa fbe6 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80070fe:	e064      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007100:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007104:	9301      	str	r3, [sp, #4]
 8007106:	2305      	movs	r3, #5
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	2312      	movs	r3, #18
 800710c:	2212      	movs	r2, #18
 800710e:	2133      	movs	r1, #51	; 0x33
 8007110:	2097      	movs	r0, #151	; 0x97
 8007112:	f7fa fbda 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007116:	e058      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
	else if (5== NrOfDay)	// if Friday
 8007118:	79fb      	ldrb	r3, [r7, #7]
 800711a:	2b05      	cmp	r3, #5
 800711c:	d11a      	bne.n	8007154 <changeTFTScheduleDayOfWeek+0x13c>
		if(0 == NewState)	// if turn off
 800711e:	79bb      	ldrb	r3, [r7, #6]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10b      	bne.n	800713c <changeTFTScheduleDayOfWeek+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007124:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007128:	9301      	str	r3, [sp, #4]
 800712a:	2305      	movs	r3, #5
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	2312      	movs	r3, #18
 8007130:	2212      	movs	r2, #18
 8007132:	2133      	movs	r1, #51	; 0x33
 8007134:	20b5      	movs	r0, #181	; 0xb5
 8007136:	f7fa fbc8 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800713a:	e046      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800713c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007140:	9301      	str	r3, [sp, #4]
 8007142:	2305      	movs	r3, #5
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	2312      	movs	r3, #18
 8007148:	2212      	movs	r2, #18
 800714a:	2133      	movs	r1, #51	; 0x33
 800714c:	20b5      	movs	r0, #181	; 0xb5
 800714e:	f7fa fbbc 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007152:	e03a      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
	else if (6== NrOfDay)	// if Saturday
 8007154:	79fb      	ldrb	r3, [r7, #7]
 8007156:	2b06      	cmp	r3, #6
 8007158:	d11a      	bne.n	8007190 <changeTFTScheduleDayOfWeek+0x178>
		if(0 == NewState)	// if turn off
 800715a:	79bb      	ldrb	r3, [r7, #6]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10b      	bne.n	8007178 <changeTFTScheduleDayOfWeek+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007160:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007164:	9301      	str	r3, [sp, #4]
 8007166:	2305      	movs	r3, #5
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	2312      	movs	r3, #18
 800716c:	2212      	movs	r2, #18
 800716e:	2133      	movs	r1, #51	; 0x33
 8007170:	20d3      	movs	r0, #211	; 0xd3
 8007172:	f7fa fbaa 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007176:	e028      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007178:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800717c:	9301      	str	r3, [sp, #4]
 800717e:	2305      	movs	r3, #5
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	2312      	movs	r3, #18
 8007184:	2212      	movs	r2, #18
 8007186:	2133      	movs	r1, #51	; 0x33
 8007188:	20d3      	movs	r0, #211	; 0xd3
 800718a:	f7fa fb9e 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800718e:	e01c      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
	else if (7== NrOfDay)	// If Sunday
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	2b07      	cmp	r3, #7
 8007194:	d119      	bne.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
		if(0 == NewState)	// if turn off
 8007196:	79bb      	ldrb	r3, [r7, #6]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10b      	bne.n	80071b4 <changeTFTScheduleDayOfWeek+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800719c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80071a0:	9301      	str	r3, [sp, #4]
 80071a2:	2305      	movs	r3, #5
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	2312      	movs	r3, #18
 80071a8:	2212      	movs	r2, #18
 80071aa:	2133      	movs	r1, #51	; 0x33
 80071ac:	20f1      	movs	r0, #241	; 0xf1
 80071ae:	f7fa fb8c 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80071b2:	e00a      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80071b4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	2305      	movs	r3, #5
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	2312      	movs	r3, #18
 80071c0:	2212      	movs	r2, #18
 80071c2:	2133      	movs	r1, #51	; 0x33
 80071c4:	20f1      	movs	r0, #241	; 0xf1
 80071c6:	f7fa fb80 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80071ca:	bf00      	nop
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <changeTFTScheduleRelayLights>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleRelayLights(uint8_t NrOfRS, uint8_t NewState)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b084      	sub	sp, #16
 80071d6:	af02      	add	r7, sp, #8
 80071d8:	4603      	mov	r3, r0
 80071da:	460a      	mov	r2, r1
 80071dc:	71fb      	strb	r3, [r7, #7]
 80071de:	4613      	mov	r3, r2
 80071e0:	71bb      	strb	r3, [r7, #6]
	if(1 == NrOfRS) // R1
 80071e2:	79fb      	ldrb	r3, [r7, #7]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d11a      	bne.n	800721e <changeTFTScheduleRelayLights+0x4c>
	{
		if (0 == NewState) // if turn off
 80071e8:	79bb      	ldrb	r3, [r7, #6]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10b      	bne.n	8007206 <changeTFTScheduleRelayLights+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80071ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80071f2:	9301      	str	r3, [sp, #4]
 80071f4:	2305      	movs	r3, #5
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	2312      	movs	r3, #18
 80071fa:	2212      	movs	r2, #18
 80071fc:	21ab      	movs	r1, #171	; 0xab
 80071fe:	2016      	movs	r0, #22
 8007200:	f7fa fb63 	bl	80018ca <GFX_DrawFillRoundRectangle>
		else // if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 8007204:	e0fc      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007206:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800720a:	9301      	str	r3, [sp, #4]
 800720c:	2305      	movs	r3, #5
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	2312      	movs	r3, #18
 8007212:	2212      	movs	r2, #18
 8007214:	21ab      	movs	r1, #171	; 0xab
 8007216:	2016      	movs	r0, #22
 8007218:	f7fa fb57 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800721c:	e0f0      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
	else if(2 == NrOfRS) // R2
 800721e:	79fb      	ldrb	r3, [r7, #7]
 8007220:	2b02      	cmp	r3, #2
 8007222:	d11a      	bne.n	800725a <changeTFTScheduleRelayLights+0x88>
		if (0 == NewState) // if turn off
 8007224:	79bb      	ldrb	r3, [r7, #6]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10b      	bne.n	8007242 <changeTFTScheduleRelayLights+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800722a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800722e:	9301      	str	r3, [sp, #4]
 8007230:	2305      	movs	r3, #5
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	2312      	movs	r3, #18
 8007236:	2212      	movs	r2, #18
 8007238:	21ab      	movs	r1, #171	; 0xab
 800723a:	2036      	movs	r0, #54	; 0x36
 800723c:	f7fa fb45 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007240:	e0de      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007242:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007246:	9301      	str	r3, [sp, #4]
 8007248:	2305      	movs	r3, #5
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	2312      	movs	r3, #18
 800724e:	2212      	movs	r2, #18
 8007250:	21ab      	movs	r1, #171	; 0xab
 8007252:	2036      	movs	r0, #54	; 0x36
 8007254:	f7fa fb39 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007258:	e0d2      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
	else if(3 == NrOfRS) // R3
 800725a:	79fb      	ldrb	r3, [r7, #7]
 800725c:	2b03      	cmp	r3, #3
 800725e:	d11a      	bne.n	8007296 <changeTFTScheduleRelayLights+0xc4>
		if (0 == NewState) // if turn off
 8007260:	79bb      	ldrb	r3, [r7, #6]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10b      	bne.n	800727e <changeTFTScheduleRelayLights+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007266:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800726a:	9301      	str	r3, [sp, #4]
 800726c:	2305      	movs	r3, #5
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	2312      	movs	r3, #18
 8007272:	2212      	movs	r2, #18
 8007274:	21ab      	movs	r1, #171	; 0xab
 8007276:	2056      	movs	r0, #86	; 0x56
 8007278:	f7fa fb27 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800727c:	e0c0      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800727e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007282:	9301      	str	r3, [sp, #4]
 8007284:	2305      	movs	r3, #5
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	2312      	movs	r3, #18
 800728a:	2212      	movs	r2, #18
 800728c:	21ab      	movs	r1, #171	; 0xab
 800728e:	2056      	movs	r0, #86	; 0x56
 8007290:	f7fa fb1b 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007294:	e0b4      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
	else if(4 == NrOfRS) // R4
 8007296:	79fb      	ldrb	r3, [r7, #7]
 8007298:	2b04      	cmp	r3, #4
 800729a:	d11a      	bne.n	80072d2 <changeTFTScheduleRelayLights+0x100>
		if (0 == NewState) // if turn off
 800729c:	79bb      	ldrb	r3, [r7, #6]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10b      	bne.n	80072ba <changeTFTScheduleRelayLights+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80072a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80072a6:	9301      	str	r3, [sp, #4]
 80072a8:	2305      	movs	r3, #5
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	2312      	movs	r3, #18
 80072ae:	2212      	movs	r2, #18
 80072b0:	21ab      	movs	r1, #171	; 0xab
 80072b2:	2076      	movs	r0, #118	; 0x76
 80072b4:	f7fa fb09 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80072b8:	e0a2      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80072ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	2305      	movs	r3, #5
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	2312      	movs	r3, #18
 80072c6:	2212      	movs	r2, #18
 80072c8:	21ab      	movs	r1, #171	; 0xab
 80072ca:	2076      	movs	r0, #118	; 0x76
 80072cc:	f7fa fafd 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80072d0:	e096      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
	else if(5 == NrOfRS) // WS2812b
 80072d2:	79fb      	ldrb	r3, [r7, #7]
 80072d4:	2b05      	cmp	r3, #5
 80072d6:	d11a      	bne.n	800730e <changeTFTScheduleRelayLights+0x13c>
		if (0 == NewState) // if turn off
 80072d8:	79bb      	ldrb	r3, [r7, #6]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10b      	bne.n	80072f6 <changeTFTScheduleRelayLights+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80072de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80072e2:	9301      	str	r3, [sp, #4]
 80072e4:	2305      	movs	r3, #5
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	2312      	movs	r3, #18
 80072ea:	2212      	movs	r2, #18
 80072ec:	21ab      	movs	r1, #171	; 0xab
 80072ee:	2096      	movs	r0, #150	; 0x96
 80072f0:	f7fa faeb 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80072f4:	e084      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80072f6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80072fa:	9301      	str	r3, [sp, #4]
 80072fc:	2305      	movs	r3, #5
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	2312      	movs	r3, #18
 8007302:	2212      	movs	r2, #18
 8007304:	21ab      	movs	r1, #171	; 0xab
 8007306:	2096      	movs	r0, #150	; 0x96
 8007308:	f7fa fadf 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800730c:	e078      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
	else if(6 == NrOfRS) // L1
 800730e:	79fb      	ldrb	r3, [r7, #7]
 8007310:	2b06      	cmp	r3, #6
 8007312:	d11a      	bne.n	800734a <changeTFTScheduleRelayLights+0x178>
		if (0 == NewState) // if turn off
 8007314:	79bb      	ldrb	r3, [r7, #6]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10b      	bne.n	8007332 <changeTFTScheduleRelayLights+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800731a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800731e:	9301      	str	r3, [sp, #4]
 8007320:	2305      	movs	r3, #5
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	2312      	movs	r3, #18
 8007326:	2212      	movs	r2, #18
 8007328:	21ab      	movs	r1, #171	; 0xab
 800732a:	20b6      	movs	r0, #182	; 0xb6
 800732c:	f7fa facd 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007330:	e066      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007332:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007336:	9301      	str	r3, [sp, #4]
 8007338:	2305      	movs	r3, #5
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	2312      	movs	r3, #18
 800733e:	2212      	movs	r2, #18
 8007340:	21ab      	movs	r1, #171	; 0xab
 8007342:	20b6      	movs	r0, #182	; 0xb6
 8007344:	f7fa fac1 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007348:	e05a      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
	else if(7 == NrOfRS) // L2
 800734a:	79fb      	ldrb	r3, [r7, #7]
 800734c:	2b07      	cmp	r3, #7
 800734e:	d11a      	bne.n	8007386 <changeTFTScheduleRelayLights+0x1b4>
		if (0 == NewState) // if turn off
 8007350:	79bb      	ldrb	r3, [r7, #6]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10b      	bne.n	800736e <changeTFTScheduleRelayLights+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007356:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800735a:	9301      	str	r3, [sp, #4]
 800735c:	2305      	movs	r3, #5
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	2312      	movs	r3, #18
 8007362:	2212      	movs	r2, #18
 8007364:	21ab      	movs	r1, #171	; 0xab
 8007366:	20d6      	movs	r0, #214	; 0xd6
 8007368:	f7fa faaf 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800736c:	e048      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800736e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007372:	9301      	str	r3, [sp, #4]
 8007374:	2305      	movs	r3, #5
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	2312      	movs	r3, #18
 800737a:	2212      	movs	r2, #18
 800737c:	21ab      	movs	r1, #171	; 0xab
 800737e:	20d6      	movs	r0, #214	; 0xd6
 8007380:	f7fa faa3 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007384:	e03c      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
	else if(8 == NrOfRS) // L3
 8007386:	79fb      	ldrb	r3, [r7, #7]
 8007388:	2b08      	cmp	r3, #8
 800738a:	d11a      	bne.n	80073c2 <changeTFTScheduleRelayLights+0x1f0>
		if (0 == NewState) // if turn off
 800738c:	79bb      	ldrb	r3, [r7, #6]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10b      	bne.n	80073aa <changeTFTScheduleRelayLights+0x1d8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007392:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007396:	9301      	str	r3, [sp, #4]
 8007398:	2305      	movs	r3, #5
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	2312      	movs	r3, #18
 800739e:	2212      	movs	r2, #18
 80073a0:	21ab      	movs	r1, #171	; 0xab
 80073a2:	20f6      	movs	r0, #246	; 0xf6
 80073a4:	f7fa fa91 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80073a8:	e02a      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80073aa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80073ae:	9301      	str	r3, [sp, #4]
 80073b0:	2305      	movs	r3, #5
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	2312      	movs	r3, #18
 80073b6:	2212      	movs	r2, #18
 80073b8:	21ab      	movs	r1, #171	; 0xab
 80073ba:	20f6      	movs	r0, #246	; 0xf6
 80073bc:	f7fa fa85 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80073c0:	e01e      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
	else if(9 == NrOfRS) // L4
 80073c2:	79fb      	ldrb	r3, [r7, #7]
 80073c4:	2b09      	cmp	r3, #9
 80073c6:	d11b      	bne.n	8007400 <changeTFTScheduleRelayLights+0x22e>
		if (0 == NewState) // if turn off
 80073c8:	79bb      	ldrb	r3, [r7, #6]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10c      	bne.n	80073e8 <changeTFTScheduleRelayLights+0x216>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80073ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80073d2:	9301      	str	r3, [sp, #4]
 80073d4:	2305      	movs	r3, #5
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	2312      	movs	r3, #18
 80073da:	2212      	movs	r2, #18
 80073dc:	21ab      	movs	r1, #171	; 0xab
 80073de:	f44f 708b 	mov.w	r0, #278	; 0x116
 80073e2:	f7fa fa72 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80073e6:	e00b      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80073e8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80073ec:	9301      	str	r3, [sp, #4]
 80073ee:	2305      	movs	r3, #5
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	2312      	movs	r3, #18
 80073f4:	2212      	movs	r2, #18
 80073f6:	21ab      	movs	r1, #171	; 0xab
 80073f8:	f44f 708b 	mov.w	r0, #278	; 0x116
 80073fc:	f7fa fa65 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007400:	bf00      	nop
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <schedule1HourOnIncrease>:

//
// Functions to change on screen hour and minute ON/OFF  1 schedule
void schedule1HourOnIncrease(void)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af02      	add	r7, sp, #8
	if(hourOnSchedule1 < 24)
 800740e:	4b17      	ldr	r3, [pc, #92]	; (800746c <schedule1HourOnIncrease+0x64>)
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	2b17      	cmp	r3, #23
 8007414:	d806      	bhi.n	8007424 <schedule1HourOnIncrease+0x1c>
	{
		hourOnSchedule1++;
 8007416:	4b15      	ldr	r3, [pc, #84]	; (800746c <schedule1HourOnIncrease+0x64>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	3301      	adds	r3, #1
 800741c:	b2da      	uxtb	r2, r3
 800741e:	4b13      	ldr	r3, [pc, #76]	; (800746c <schedule1HourOnIncrease+0x64>)
 8007420:	701a      	strb	r2, [r3, #0]
 8007422:	e002      	b.n	800742a <schedule1HourOnIncrease+0x22>
	}
	else
	{
		hourOnSchedule1 = 1;
 8007424:	4b11      	ldr	r3, [pc, #68]	; (800746c <schedule1HourOnIncrease+0x64>)
 8007426:	2201      	movs	r2, #1
 8007428:	701a      	strb	r2, [r3, #0]
	}
	if(hourOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule1);
 800742a:	4b10      	ldr	r3, [pc, #64]	; (800746c <schedule1HourOnIncrease+0x64>)
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	2b09      	cmp	r3, #9
 8007430:	d907      	bls.n	8007442 <schedule1HourOnIncrease+0x3a>
 8007432:	4b0e      	ldr	r3, [pc, #56]	; (800746c <schedule1HourOnIncrease+0x64>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	490d      	ldr	r1, [pc, #52]	; (8007470 <schedule1HourOnIncrease+0x68>)
 800743a:	480e      	ldr	r0, [pc, #56]	; (8007474 <schedule1HourOnIncrease+0x6c>)
 800743c:	f00b fc14 	bl	8012c68 <siprintf>
 8007440:	e006      	b.n	8007450 <schedule1HourOnIncrease+0x48>
	else sprintf((char*)Msg, " 0%d ", hourOnSchedule1);
 8007442:	4b0a      	ldr	r3, [pc, #40]	; (800746c <schedule1HourOnIncrease+0x64>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	490b      	ldr	r1, [pc, #44]	; (8007478 <schedule1HourOnIncrease+0x70>)
 800744a:	480a      	ldr	r0, [pc, #40]	; (8007474 <schedule1HourOnIncrease+0x6c>)
 800744c:	f00b fc0c 	bl	8012c68 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007450:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007454:	9301      	str	r3, [sp, #4]
 8007456:	2301      	movs	r3, #1
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	2300      	movs	r3, #0
 800745c:	2264      	movs	r2, #100	; 0x64
 800745e:	2150      	movs	r1, #80	; 0x50
 8007460:	4804      	ldr	r0, [pc, #16]	; (8007474 <schedule1HourOnIncrease+0x6c>)
 8007462:	f7fa fc9d 	bl	8001da0 <EF_PutString>
}
 8007466:	bf00      	nop
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	20000285 	.word	0x20000285
 8007470:	08016f18 	.word	0x08016f18
 8007474:	200002cc 	.word	0x200002cc
 8007478:	08016f20 	.word	0x08016f20

0800747c <schedule1MinuteOnIncrease>:
	if(hourOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule1);
	else sprintf((char*)Msg, " 0%d ", hourOnSchedule1);
	EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
}
void schedule1MinuteOnIncrease(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af02      	add	r7, sp, #8
	if(minuteOnSchedule1 < 59)
 8007482:	4b17      	ldr	r3, [pc, #92]	; (80074e0 <schedule1MinuteOnIncrease+0x64>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	2b3a      	cmp	r3, #58	; 0x3a
 8007488:	d806      	bhi.n	8007498 <schedule1MinuteOnIncrease+0x1c>
	{
		minuteOnSchedule1++;
 800748a:	4b15      	ldr	r3, [pc, #84]	; (80074e0 <schedule1MinuteOnIncrease+0x64>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	3301      	adds	r3, #1
 8007490:	b2da      	uxtb	r2, r3
 8007492:	4b13      	ldr	r3, [pc, #76]	; (80074e0 <schedule1MinuteOnIncrease+0x64>)
 8007494:	701a      	strb	r2, [r3, #0]
 8007496:	e002      	b.n	800749e <schedule1MinuteOnIncrease+0x22>
	}
	else
	{
		minuteOnSchedule1 = 0;
 8007498:	4b11      	ldr	r3, [pc, #68]	; (80074e0 <schedule1MinuteOnIncrease+0x64>)
 800749a:	2200      	movs	r2, #0
 800749c:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 800749e:	4b10      	ldr	r3, [pc, #64]	; (80074e0 <schedule1MinuteOnIncrease+0x64>)
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b09      	cmp	r3, #9
 80074a4:	d907      	bls.n	80074b6 <schedule1MinuteOnIncrease+0x3a>
 80074a6:	4b0e      	ldr	r3, [pc, #56]	; (80074e0 <schedule1MinuteOnIncrease+0x64>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	490d      	ldr	r1, [pc, #52]	; (80074e4 <schedule1MinuteOnIncrease+0x68>)
 80074ae:	480e      	ldr	r0, [pc, #56]	; (80074e8 <schedule1MinuteOnIncrease+0x6c>)
 80074b0:	f00b fbda 	bl	8012c68 <siprintf>
 80074b4:	e006      	b.n	80074c4 <schedule1MinuteOnIncrease+0x48>
	else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 80074b6:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <schedule1MinuteOnIncrease+0x64>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	490b      	ldr	r1, [pc, #44]	; (80074ec <schedule1MinuteOnIncrease+0x70>)
 80074be:	480a      	ldr	r0, [pc, #40]	; (80074e8 <schedule1MinuteOnIncrease+0x6c>)
 80074c0:	f00b fbd2 	bl	8012c68 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80074c4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80074c8:	9301      	str	r3, [sp, #4]
 80074ca:	2301      	movs	r3, #1
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	2300      	movs	r3, #0
 80074d0:	2264      	movs	r2, #100	; 0x64
 80074d2:	218a      	movs	r1, #138	; 0x8a
 80074d4:	4804      	ldr	r0, [pc, #16]	; (80074e8 <schedule1MinuteOnIncrease+0x6c>)
 80074d6:	f7fa fc63 	bl	8001da0 <EF_PutString>
}
 80074da:	bf00      	nop
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20000287 	.word	0x20000287
 80074e4:	08016f18 	.word	0x08016f18
 80074e8:	200002cc 	.word	0x200002cc
 80074ec:	08016f20 	.word	0x08016f20

080074f0 <schedule1HourOffIncrease>:
	else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
	EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
}

void schedule1HourOffIncrease(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af02      	add	r7, sp, #8
	if(hourOffSchedule1 < 24)
 80074f6:	4b17      	ldr	r3, [pc, #92]	; (8007554 <schedule1HourOffIncrease+0x64>)
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	2b17      	cmp	r3, #23
 80074fc:	d806      	bhi.n	800750c <schedule1HourOffIncrease+0x1c>
	{
		hourOffSchedule1++;
 80074fe:	4b15      	ldr	r3, [pc, #84]	; (8007554 <schedule1HourOffIncrease+0x64>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	3301      	adds	r3, #1
 8007504:	b2da      	uxtb	r2, r3
 8007506:	4b13      	ldr	r3, [pc, #76]	; (8007554 <schedule1HourOffIncrease+0x64>)
 8007508:	701a      	strb	r2, [r3, #0]
 800750a:	e002      	b.n	8007512 <schedule1HourOffIncrease+0x22>
	}
	else
	{
		hourOffSchedule1 = 1;
 800750c:	4b11      	ldr	r3, [pc, #68]	; (8007554 <schedule1HourOffIncrease+0x64>)
 800750e:	2201      	movs	r2, #1
 8007510:	701a      	strb	r2, [r3, #0]
	}
	if(hourOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule1);
 8007512:	4b10      	ldr	r3, [pc, #64]	; (8007554 <schedule1HourOffIncrease+0x64>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b09      	cmp	r3, #9
 8007518:	d907      	bls.n	800752a <schedule1HourOffIncrease+0x3a>
 800751a:	4b0e      	ldr	r3, [pc, #56]	; (8007554 <schedule1HourOffIncrease+0x64>)
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	490d      	ldr	r1, [pc, #52]	; (8007558 <schedule1HourOffIncrease+0x68>)
 8007522:	480e      	ldr	r0, [pc, #56]	; (800755c <schedule1HourOffIncrease+0x6c>)
 8007524:	f00b fba0 	bl	8012c68 <siprintf>
 8007528:	e006      	b.n	8007538 <schedule1HourOffIncrease+0x48>
	else sprintf((char*)Msg, " 0%d ", hourOffSchedule1);
 800752a:	4b0a      	ldr	r3, [pc, #40]	; (8007554 <schedule1HourOffIncrease+0x64>)
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	461a      	mov	r2, r3
 8007530:	490b      	ldr	r1, [pc, #44]	; (8007560 <schedule1HourOffIncrease+0x70>)
 8007532:	480a      	ldr	r0, [pc, #40]	; (800755c <schedule1HourOffIncrease+0x6c>)
 8007534:	f00b fb98 	bl	8012c68 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007538:	f24c 6318 	movw	r3, #50712	; 0xc618
 800753c:	9301      	str	r3, [sp, #4]
 800753e:	2301      	movs	r3, #1
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	2300      	movs	r3, #0
 8007544:	2287      	movs	r2, #135	; 0x87
 8007546:	214e      	movs	r1, #78	; 0x4e
 8007548:	4804      	ldr	r0, [pc, #16]	; (800755c <schedule1HourOffIncrease+0x6c>)
 800754a:	f7fa fc29 	bl	8001da0 <EF_PutString>
}
 800754e:	bf00      	nop
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	20000286 	.word	0x20000286
 8007558:	08016f18 	.word	0x08016f18
 800755c:	200002cc 	.word	0x200002cc
 8007560:	08016f20 	.word	0x08016f20

08007564 <schedule1MinuteOffIncrease>:
	if(hourOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule1);
	else sprintf((char*)Msg, " 0%d ", hourOffSchedule1);
	EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
}
void schedule1MinuteOffIncrease(void)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af02      	add	r7, sp, #8
	if(minuteOffSchedule1 < 59)
 800756a:	4b17      	ldr	r3, [pc, #92]	; (80075c8 <schedule1MinuteOffIncrease+0x64>)
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	2b3a      	cmp	r3, #58	; 0x3a
 8007570:	d806      	bhi.n	8007580 <schedule1MinuteOffIncrease+0x1c>
	{
		minuteOffSchedule1++;
 8007572:	4b15      	ldr	r3, [pc, #84]	; (80075c8 <schedule1MinuteOffIncrease+0x64>)
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	3301      	adds	r3, #1
 8007578:	b2da      	uxtb	r2, r3
 800757a:	4b13      	ldr	r3, [pc, #76]	; (80075c8 <schedule1MinuteOffIncrease+0x64>)
 800757c:	701a      	strb	r2, [r3, #0]
 800757e:	e002      	b.n	8007586 <schedule1MinuteOffIncrease+0x22>
	}
	else
	{
		minuteOffSchedule1 = 0;
 8007580:	4b11      	ldr	r3, [pc, #68]	; (80075c8 <schedule1MinuteOffIncrease+0x64>)
 8007582:	2200      	movs	r2, #0
 8007584:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 8007586:	4b10      	ldr	r3, [pc, #64]	; (80075c8 <schedule1MinuteOffIncrease+0x64>)
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	2b09      	cmp	r3, #9
 800758c:	d907      	bls.n	800759e <schedule1MinuteOffIncrease+0x3a>
 800758e:	4b0e      	ldr	r3, [pc, #56]	; (80075c8 <schedule1MinuteOffIncrease+0x64>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	461a      	mov	r2, r3
 8007594:	490d      	ldr	r1, [pc, #52]	; (80075cc <schedule1MinuteOffIncrease+0x68>)
 8007596:	480e      	ldr	r0, [pc, #56]	; (80075d0 <schedule1MinuteOffIncrease+0x6c>)
 8007598:	f00b fb66 	bl	8012c68 <siprintf>
 800759c:	e006      	b.n	80075ac <schedule1MinuteOffIncrease+0x48>
	else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 800759e:	4b0a      	ldr	r3, [pc, #40]	; (80075c8 <schedule1MinuteOffIncrease+0x64>)
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	461a      	mov	r2, r3
 80075a4:	490b      	ldr	r1, [pc, #44]	; (80075d4 <schedule1MinuteOffIncrease+0x70>)
 80075a6:	480a      	ldr	r0, [pc, #40]	; (80075d0 <schedule1MinuteOffIncrease+0x6c>)
 80075a8:	f00b fb5e 	bl	8012c68 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80075ac:	f24c 6318 	movw	r3, #50712	; 0xc618
 80075b0:	9301      	str	r3, [sp, #4]
 80075b2:	2301      	movs	r3, #1
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	2300      	movs	r3, #0
 80075b8:	2287      	movs	r2, #135	; 0x87
 80075ba:	218a      	movs	r1, #138	; 0x8a
 80075bc:	4804      	ldr	r0, [pc, #16]	; (80075d0 <schedule1MinuteOffIncrease+0x6c>)
 80075be:	f7fa fbef 	bl	8001da0 <EF_PutString>
}
 80075c2:	bf00      	nop
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	20000288 	.word	0x20000288
 80075cc:	08016f18 	.word	0x08016f18
 80075d0:	200002cc 	.word	0x200002cc
 80075d4:	08016f20 	.word	0x08016f20

080075d8 <MenuTFTSchedule1ActivityHourMinuteONAdd>:


//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af02      	add	r7, sp, #8
 80075de:	4603      	mov	r3, r0
 80075e0:	460a      	mov	r2, r1
 80075e2:	80fb      	strh	r3, [r7, #6]
 80075e4:	4613      	mov	r3, r2
 80075e6:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 80075e8:	4833      	ldr	r0, [pc, #204]	; (80076b8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe0>)
 80075ea:	f7fa f9bf 	bl	800196c <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80075ee:	88fb      	ldrh	r3, [r7, #6]
 80075f0:	2bba      	cmp	r3, #186	; 0xba
 80075f2:	d908      	bls.n	8007606 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x2e>
 80075f4:	88fb      	ldrh	r3, [r7, #6]
 80075f6:	2bdd      	cmp	r3, #221	; 0xdd
 80075f8:	d805      	bhi.n	8007606 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x2e>
	{
		EncoderState = ENCODER_SCHEDULE_1_HOUR_ON;
 80075fa:	4b30      	ldr	r3, [pc, #192]	; (80076bc <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>)
 80075fc:	2206      	movs	r2, #6
 80075fe:	701a      	strb	r2, [r3, #0]
		schedule1HourOnIncrease();
 8007600:	f7ff ff02 	bl	8007408 <schedule1HourOnIncrease>
 8007604:	e054      	b.n	80076b0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xd8>

	}

	// Check if it is Minute to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007606:	88fb      	ldrh	r3, [r7, #6]
 8007608:	2be8      	cmp	r3, #232	; 0xe8
 800760a:	d909      	bls.n	8007620 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x48>
 800760c:	88fb      	ldrh	r3, [r7, #6]
 800760e:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8007612:	d205      	bcs.n	8007620 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x48>
	{
		schedule1MinuteOnIncrease();
 8007614:	f7ff ff32 	bl	800747c <schedule1MinuteOnIncrease>
		EncoderState = ENCODER_SCHEDULE_1_MINUTE_ON;
 8007618:	4b28      	ldr	r3, [pc, #160]	; (80076bc <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>)
 800761a:	2208      	movs	r2, #8
 800761c:	701a      	strb	r2, [r3, #0]
 800761e:	e047      	b.n	80076b0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xd8>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007620:	88fb      	ldrh	r3, [r7, #6]
 8007622:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8007626:	d943      	bls.n	80076b0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xd8>
 8007628:	88fb      	ldrh	r3, [r7, #6]
 800762a:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800762e:	d23f      	bcs.n	80076b0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xd8>
	{
		EncoderState = ENCODER_SCHEDULE_1_MINUTE_ON;
 8007630:	4b22      	ldr	r3, [pc, #136]	; (80076bc <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>)
 8007632:	2208      	movs	r2, #8
 8007634:	701a      	strb	r2, [r3, #0]
		if(minuteOnSchedule1 < 49)
 8007636:	4b22      	ldr	r3, [pc, #136]	; (80076c0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	2b30      	cmp	r3, #48	; 0x30
 800763c:	d806      	bhi.n	800764c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x74>
		{
			minuteOnSchedule1 = minuteOnSchedule1 + 10;
 800763e:	4b20      	ldr	r3, [pc, #128]	; (80076c0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	330a      	adds	r3, #10
 8007644:	b2da      	uxtb	r2, r3
 8007646:	4b1e      	ldr	r3, [pc, #120]	; (80076c0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007648:	701a      	strb	r2, [r3, #0]
 800764a:	e012      	b.n	8007672 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x9a>
		}
		else
		{
			minuteOnSchedule1 = (minuteOnSchedule1 + 10) % 60;
 800764c:	4b1c      	ldr	r3, [pc, #112]	; (80076c0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	f103 020a 	add.w	r2, r3, #10
 8007654:	4b1b      	ldr	r3, [pc, #108]	; (80076c4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xec>)
 8007656:	fb83 1302 	smull	r1, r3, r3, r2
 800765a:	4413      	add	r3, r2
 800765c:	1159      	asrs	r1, r3, #5
 800765e:	17d3      	asrs	r3, r2, #31
 8007660:	1ac9      	subs	r1, r1, r3
 8007662:	460b      	mov	r3, r1
 8007664:	011b      	lsls	r3, r3, #4
 8007666:	1a5b      	subs	r3, r3, r1
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	1ad1      	subs	r1, r2, r3
 800766c:	b2ca      	uxtb	r2, r1
 800766e:	4b14      	ldr	r3, [pc, #80]	; (80076c0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007670:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 8007672:	4b13      	ldr	r3, [pc, #76]	; (80076c0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	2b09      	cmp	r3, #9
 8007678:	d907      	bls.n	800768a <MenuTFTSchedule1ActivityHourMinuteONAdd+0xb2>
 800767a:	4b11      	ldr	r3, [pc, #68]	; (80076c0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	461a      	mov	r2, r3
 8007680:	4911      	ldr	r1, [pc, #68]	; (80076c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xf0>)
 8007682:	4812      	ldr	r0, [pc, #72]	; (80076cc <MenuTFTSchedule1ActivityHourMinuteONAdd+0xf4>)
 8007684:	f00b faf0 	bl	8012c68 <siprintf>
 8007688:	e006      	b.n	8007698 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xc0>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 800768a:	4b0d      	ldr	r3, [pc, #52]	; (80076c0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	490f      	ldr	r1, [pc, #60]	; (80076d0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xf8>)
 8007692:	480e      	ldr	r0, [pc, #56]	; (80076cc <MenuTFTSchedule1ActivityHourMinuteONAdd+0xf4>)
 8007694:	f00b fae8 	bl	8012c68 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007698:	f24c 6318 	movw	r3, #50712	; 0xc618
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	2301      	movs	r3, #1
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	2300      	movs	r3, #0
 80076a4:	2264      	movs	r2, #100	; 0x64
 80076a6:	218a      	movs	r1, #138	; 0x8a
 80076a8:	4808      	ldr	r0, [pc, #32]	; (80076cc <MenuTFTSchedule1ActivityHourMinuteONAdd+0xf4>)
 80076aa:	f7fa fb79 	bl	8001da0 <EF_PutString>
	}
}
 80076ae:	e7ff      	b.n	80076b0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xd8>
 80076b0:	bf00      	nop
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	0802a4cc 	.word	0x0802a4cc
 80076bc:	200002a1 	.word	0x200002a1
 80076c0:	20000287 	.word	0x20000287
 80076c4:	88888889 	.word	0x88888889
 80076c8:	08016f18 	.word	0x08016f18
 80076cc:	200002cc 	.word	0x200002cc
 80076d0:	08016f20 	.word	0x08016f20

080076d4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af02      	add	r7, sp, #8
 80076da:	4603      	mov	r3, r0
 80076dc:	460a      	mov	r2, r1
 80076de:	80fb      	strh	r3, [r7, #6]
 80076e0:	4613      	mov	r3, r2
 80076e2:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 80076e4:	4833      	ldr	r0, [pc, #204]	; (80077b4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe0>)
 80076e6:	f7fa f941 	bl	800196c <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80076ea:	88fb      	ldrh	r3, [r7, #6]
 80076ec:	2bba      	cmp	r3, #186	; 0xba
 80076ee:	d908      	bls.n	8007702 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x2e>
 80076f0:	88fb      	ldrh	r3, [r7, #6]
 80076f2:	2bdd      	cmp	r3, #221	; 0xdd
 80076f4:	d805      	bhi.n	8007702 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x2e>
	{
		schedule1HourOffIncrease();
 80076f6:	f7ff fefb 	bl	80074f0 <schedule1HourOffIncrease>
		EncoderState = ENCODER_SCHEDULE_1_HOUR_OFF;
 80076fa:	4b2f      	ldr	r3, [pc, #188]	; (80077b8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>)
 80076fc:	2207      	movs	r2, #7
 80076fe:	701a      	strb	r2, [r3, #0]
 8007700:	e054      	b.n	80077ac <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xd8>

	}

	// Check if it is Minute to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007702:	88fb      	ldrh	r3, [r7, #6]
 8007704:	2be8      	cmp	r3, #232	; 0xe8
 8007706:	d909      	bls.n	800771c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x48>
 8007708:	88fb      	ldrh	r3, [r7, #6]
 800770a:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 800770e:	d205      	bcs.n	800771c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x48>
	{
		EncoderState = ENCODER_SCHEDULE_1_MINUTE_OFF;
 8007710:	4b29      	ldr	r3, [pc, #164]	; (80077b8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>)
 8007712:	2209      	movs	r2, #9
 8007714:	701a      	strb	r2, [r3, #0]
		schedule1MinuteOffIncrease();
 8007716:	f7ff ff25 	bl	8007564 <schedule1MinuteOffIncrease>
 800771a:	e047      	b.n	80077ac <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xd8>

	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 800771c:	88fb      	ldrh	r3, [r7, #6]
 800771e:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8007722:	d943      	bls.n	80077ac <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xd8>
 8007724:	88fb      	ldrh	r3, [r7, #6]
 8007726:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800772a:	d23f      	bcs.n	80077ac <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xd8>
	{
		EncoderState = ENCODER_SCHEDULE_1_MINUTE_OFF;
 800772c:	4b22      	ldr	r3, [pc, #136]	; (80077b8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>)
 800772e:	2209      	movs	r2, #9
 8007730:	701a      	strb	r2, [r3, #0]
		if(minuteOffSchedule1 < 49)
 8007732:	4b22      	ldr	r3, [pc, #136]	; (80077bc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	2b30      	cmp	r3, #48	; 0x30
 8007738:	d806      	bhi.n	8007748 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x74>
		{
			minuteOffSchedule1 = minuteOffSchedule1 + 10;
 800773a:	4b20      	ldr	r3, [pc, #128]	; (80077bc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	330a      	adds	r3, #10
 8007740:	b2da      	uxtb	r2, r3
 8007742:	4b1e      	ldr	r3, [pc, #120]	; (80077bc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 8007744:	701a      	strb	r2, [r3, #0]
 8007746:	e012      	b.n	800776e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x9a>
		}
		else
		{
			minuteOffSchedule1 = (minuteOffSchedule1 + 10) % 60;
 8007748:	4b1c      	ldr	r3, [pc, #112]	; (80077bc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	f103 020a 	add.w	r2, r3, #10
 8007750:	4b1b      	ldr	r3, [pc, #108]	; (80077c0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xec>)
 8007752:	fb83 1302 	smull	r1, r3, r3, r2
 8007756:	4413      	add	r3, r2
 8007758:	1159      	asrs	r1, r3, #5
 800775a:	17d3      	asrs	r3, r2, #31
 800775c:	1ac9      	subs	r1, r1, r3
 800775e:	460b      	mov	r3, r1
 8007760:	011b      	lsls	r3, r3, #4
 8007762:	1a5b      	subs	r3, r3, r1
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	1ad1      	subs	r1, r2, r3
 8007768:	b2ca      	uxtb	r2, r1
 800776a:	4b14      	ldr	r3, [pc, #80]	; (80077bc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 800776c:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 800776e:	4b13      	ldr	r3, [pc, #76]	; (80077bc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	2b09      	cmp	r3, #9
 8007774:	d907      	bls.n	8007786 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xb2>
 8007776:	4b11      	ldr	r3, [pc, #68]	; (80077bc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	461a      	mov	r2, r3
 800777c:	4911      	ldr	r1, [pc, #68]	; (80077c4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xf0>)
 800777e:	4812      	ldr	r0, [pc, #72]	; (80077c8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xf4>)
 8007780:	f00b fa72 	bl	8012c68 <siprintf>
 8007784:	e006      	b.n	8007794 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xc0>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 8007786:	4b0d      	ldr	r3, [pc, #52]	; (80077bc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	490f      	ldr	r1, [pc, #60]	; (80077cc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xf8>)
 800778e:	480e      	ldr	r0, [pc, #56]	; (80077c8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xf4>)
 8007790:	f00b fa6a 	bl	8012c68 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007794:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007798:	9301      	str	r3, [sp, #4]
 800779a:	2301      	movs	r3, #1
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	2300      	movs	r3, #0
 80077a0:	2287      	movs	r2, #135	; 0x87
 80077a2:	218a      	movs	r1, #138	; 0x8a
 80077a4:	4808      	ldr	r0, [pc, #32]	; (80077c8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xf4>)
 80077a6:	f7fa fafb 	bl	8001da0 <EF_PutString>
	}
}
 80077aa:	e7ff      	b.n	80077ac <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xd8>
 80077ac:	bf00      	nop
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	0802a4cc 	.word	0x0802a4cc
 80077b8:	200002a1 	.word	0x200002a1
 80077bc:	20000288 	.word	0x20000288
 80077c0:	88888889 	.word	0x88888889
 80077c4:	08016f18 	.word	0x08016f18
 80077c8:	200002cc 	.word	0x200002cc
 80077cc:	08016f20 	.word	0x08016f20

080077d0 <MenuTFTSchedule2ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule2Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule2ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	4603      	mov	r3, r0
 80077d8:	460a      	mov	r2, r1
 80077da:	80fb      	strh	r3, [r7, #6]
 80077dc:	4613      	mov	r3, r2
 80077de:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 80077e0:	88fb      	ldrh	r3, [r7, #6]
 80077e2:	2b3b      	cmp	r3, #59	; 0x3b
 80077e4:	d91a      	bls.n	800781c <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
 80077e6:	88fb      	ldrh	r3, [r7, #6]
 80077e8:	2b50      	cmp	r3, #80	; 0x50
 80077ea:	d817      	bhi.n	800781c <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
	{
		if(schedule2DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 80077ec:	4b68      	ldr	r3, [pc, #416]	; (8007990 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d004      	beq.n	80077fe <MenuTFTSchedule2ActivityDayOfWeekRow+0x2e>
 80077f4:	2100      	movs	r1, #0
 80077f6:	2001      	movs	r0, #1
 80077f8:	f7ff fc0e 	bl	8007018 <changeTFTScheduleDayOfWeek>
 80077fc:	e003      	b.n	8007806 <MenuTFTSchedule2ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 80077fe:	2101      	movs	r1, #1
 8007800:	2001      	movs	r0, #1
 8007802:	f7ff fc09 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[0] = !schedule2DayInWeekTab[0]; // update current state in tab holding state of day in week
 8007806:	4b62      	ldr	r3, [pc, #392]	; (8007990 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	bf0c      	ite	eq
 800780e:	2301      	moveq	r3, #1
 8007810:	2300      	movne	r3, #0
 8007812:	b2db      	uxtb	r3, r3
 8007814:	461a      	mov	r2, r3
 8007816:	4b5e      	ldr	r3, [pc, #376]	; (8007990 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007818:	701a      	strb	r2, [r3, #0]
 800781a:	e0b4      	b.n	8007986 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 800781c:	88fb      	ldrh	r3, [r7, #6]
 800781e:	2b59      	cmp	r3, #89	; 0x59
 8007820:	d91a      	bls.n	8007858 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
 8007822:	88fb      	ldrh	r3, [r7, #6]
 8007824:	2b6e      	cmp	r3, #110	; 0x6e
 8007826:	d817      	bhi.n	8007858 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
	{
		if(schedule2DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8007828:	4b59      	ldr	r3, [pc, #356]	; (8007990 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800782a:	785b      	ldrb	r3, [r3, #1]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d004      	beq.n	800783a <MenuTFTSchedule2ActivityDayOfWeekRow+0x6a>
 8007830:	2100      	movs	r1, #0
 8007832:	2002      	movs	r0, #2
 8007834:	f7ff fbf0 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8007838:	e003      	b.n	8007842 <MenuTFTSchedule2ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 800783a:	2101      	movs	r1, #1
 800783c:	2002      	movs	r0, #2
 800783e:	f7ff fbeb 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[1] = !schedule2DayInWeekTab[1]; // update current state in tab holding state of day in week
 8007842:	4b53      	ldr	r3, [pc, #332]	; (8007990 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007844:	785b      	ldrb	r3, [r3, #1]
 8007846:	2b00      	cmp	r3, #0
 8007848:	bf0c      	ite	eq
 800784a:	2301      	moveq	r3, #1
 800784c:	2300      	movne	r3, #0
 800784e:	b2db      	uxtb	r3, r3
 8007850:	461a      	mov	r2, r3
 8007852:	4b4f      	ldr	r3, [pc, #316]	; (8007990 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007854:	705a      	strb	r2, [r3, #1]
 8007856:	e096      	b.n	8007986 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007858:	88fb      	ldrh	r3, [r7, #6]
 800785a:	2b77      	cmp	r3, #119	; 0x77
 800785c:	d91a      	bls.n	8007894 <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
 800785e:	88fb      	ldrh	r3, [r7, #6]
 8007860:	2b8c      	cmp	r3, #140	; 0x8c
 8007862:	d817      	bhi.n	8007894 <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
	{
		if(schedule2DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8007864:	4b4a      	ldr	r3, [pc, #296]	; (8007990 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007866:	789b      	ldrb	r3, [r3, #2]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d004      	beq.n	8007876 <MenuTFTSchedule2ActivityDayOfWeekRow+0xa6>
 800786c:	2100      	movs	r1, #0
 800786e:	2003      	movs	r0, #3
 8007870:	f7ff fbd2 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8007874:	e003      	b.n	800787e <MenuTFTSchedule2ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 8007876:	2101      	movs	r1, #1
 8007878:	2003      	movs	r0, #3
 800787a:	f7ff fbcd 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[2] = !schedule2DayInWeekTab[2]; // update current state in tab holding state of day in week
 800787e:	4b44      	ldr	r3, [pc, #272]	; (8007990 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007880:	789b      	ldrb	r3, [r3, #2]
 8007882:	2b00      	cmp	r3, #0
 8007884:	bf0c      	ite	eq
 8007886:	2301      	moveq	r3, #1
 8007888:	2300      	movne	r3, #0
 800788a:	b2db      	uxtb	r3, r3
 800788c:	461a      	mov	r2, r3
 800788e:	4b40      	ldr	r3, [pc, #256]	; (8007990 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007890:	709a      	strb	r2, [r3, #2]
 8007892:	e078      	b.n	8007986 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8007894:	88fb      	ldrh	r3, [r7, #6]
 8007896:	2b95      	cmp	r3, #149	; 0x95
 8007898:	d91a      	bls.n	80078d0 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
 800789a:	88fb      	ldrh	r3, [r7, #6]
 800789c:	2baa      	cmp	r3, #170	; 0xaa
 800789e:	d817      	bhi.n	80078d0 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
	{
		if(schedule2DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 80078a0:	4b3b      	ldr	r3, [pc, #236]	; (8007990 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80078a2:	78db      	ldrb	r3, [r3, #3]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d004      	beq.n	80078b2 <MenuTFTSchedule2ActivityDayOfWeekRow+0xe2>
 80078a8:	2100      	movs	r1, #0
 80078aa:	2004      	movs	r0, #4
 80078ac:	f7ff fbb4 	bl	8007018 <changeTFTScheduleDayOfWeek>
 80078b0:	e003      	b.n	80078ba <MenuTFTSchedule2ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 80078b2:	2101      	movs	r1, #1
 80078b4:	2004      	movs	r0, #4
 80078b6:	f7ff fbaf 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[3] = !schedule2DayInWeekTab[3]; // update current state in tab holding state of day in week
 80078ba:	4b35      	ldr	r3, [pc, #212]	; (8007990 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80078bc:	78db      	ldrb	r3, [r3, #3]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	bf0c      	ite	eq
 80078c2:	2301      	moveq	r3, #1
 80078c4:	2300      	movne	r3, #0
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	461a      	mov	r2, r3
 80078ca:	4b31      	ldr	r3, [pc, #196]	; (8007990 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80078cc:	70da      	strb	r2, [r3, #3]
 80078ce:	e05a      	b.n	8007986 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 80078d0:	88fb      	ldrh	r3, [r7, #6]
 80078d2:	2bb3      	cmp	r3, #179	; 0xb3
 80078d4:	d91a      	bls.n	800790c <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
 80078d6:	88fb      	ldrh	r3, [r7, #6]
 80078d8:	2bc8      	cmp	r3, #200	; 0xc8
 80078da:	d817      	bhi.n	800790c <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
	{
		if(schedule2DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 80078dc:	4b2c      	ldr	r3, [pc, #176]	; (8007990 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80078de:	791b      	ldrb	r3, [r3, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d004      	beq.n	80078ee <MenuTFTSchedule2ActivityDayOfWeekRow+0x11e>
 80078e4:	2100      	movs	r1, #0
 80078e6:	2005      	movs	r0, #5
 80078e8:	f7ff fb96 	bl	8007018 <changeTFTScheduleDayOfWeek>
 80078ec:	e003      	b.n	80078f6 <MenuTFTSchedule2ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 80078ee:	2101      	movs	r1, #1
 80078f0:	2005      	movs	r0, #5
 80078f2:	f7ff fb91 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[4] = !schedule2DayInWeekTab[4]; // update current state in tab holding state of day in week
 80078f6:	4b26      	ldr	r3, [pc, #152]	; (8007990 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80078f8:	791b      	ldrb	r3, [r3, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	bf0c      	ite	eq
 80078fe:	2301      	moveq	r3, #1
 8007900:	2300      	movne	r3, #0
 8007902:	b2db      	uxtb	r3, r3
 8007904:	461a      	mov	r2, r3
 8007906:	4b22      	ldr	r3, [pc, #136]	; (8007990 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007908:	711a      	strb	r2, [r3, #4]
 800790a:	e03c      	b.n	8007986 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 800790c:	88fb      	ldrh	r3, [r7, #6]
 800790e:	2bd1      	cmp	r3, #209	; 0xd1
 8007910:	d91a      	bls.n	8007948 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
 8007912:	88fb      	ldrh	r3, [r7, #6]
 8007914:	2be6      	cmp	r3, #230	; 0xe6
 8007916:	d817      	bhi.n	8007948 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
	{
		if(schedule2DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8007918:	4b1d      	ldr	r3, [pc, #116]	; (8007990 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800791a:	795b      	ldrb	r3, [r3, #5]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d004      	beq.n	800792a <MenuTFTSchedule2ActivityDayOfWeekRow+0x15a>
 8007920:	2100      	movs	r1, #0
 8007922:	2006      	movs	r0, #6
 8007924:	f7ff fb78 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8007928:	e003      	b.n	8007932 <MenuTFTSchedule2ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 800792a:	2101      	movs	r1, #1
 800792c:	2006      	movs	r0, #6
 800792e:	f7ff fb73 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[5] = !schedule2DayInWeekTab[5]; // update current state in tab holding state of day in week
 8007932:	4b17      	ldr	r3, [pc, #92]	; (8007990 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007934:	795b      	ldrb	r3, [r3, #5]
 8007936:	2b00      	cmp	r3, #0
 8007938:	bf0c      	ite	eq
 800793a:	2301      	moveq	r3, #1
 800793c:	2300      	movne	r3, #0
 800793e:	b2db      	uxtb	r3, r3
 8007940:	461a      	mov	r2, r3
 8007942:	4b13      	ldr	r3, [pc, #76]	; (8007990 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007944:	715a      	strb	r2, [r3, #5]
 8007946:	e01e      	b.n	8007986 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007948:	88fb      	ldrh	r3, [r7, #6]
 800794a:	2bef      	cmp	r3, #239	; 0xef
 800794c:	d91b      	bls.n	8007986 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 800794e:	88fb      	ldrh	r3, [r7, #6]
 8007950:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007954:	d817      	bhi.n	8007986 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule2DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 8007956:	4b0e      	ldr	r3, [pc, #56]	; (8007990 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007958:	799b      	ldrb	r3, [r3, #6]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d004      	beq.n	8007968 <MenuTFTSchedule2ActivityDayOfWeekRow+0x198>
 800795e:	2100      	movs	r1, #0
 8007960:	2007      	movs	r0, #7
 8007962:	f7ff fb59 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8007966:	e003      	b.n	8007970 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8007968:	2101      	movs	r1, #1
 800796a:	2007      	movs	r0, #7
 800796c:	f7ff fb54 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[6] = !schedule2DayInWeekTab[6]; // update current state in tab holding state of day in week
 8007970:	4b07      	ldr	r3, [pc, #28]	; (8007990 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007972:	799b      	ldrb	r3, [r3, #6]
 8007974:	2b00      	cmp	r3, #0
 8007976:	bf0c      	ite	eq
 8007978:	2301      	moveq	r3, #1
 800797a:	2300      	movne	r3, #0
 800797c:	b2db      	uxtb	r3, r3
 800797e:	461a      	mov	r2, r3
 8007980:	4b03      	ldr	r3, [pc, #12]	; (8007990 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007982:	719a      	strb	r2, [r3, #6]
	}
}
 8007984:	e7ff      	b.n	8007986 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 8007986:	bf00      	nop
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	20000274 	.word	0x20000274

08007994 <schedule2HourOnIncrease>:

//
// Functions to change on screen hour and minute ON/OFF 2 schedule
void schedule2HourOnIncrease(void)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af02      	add	r7, sp, #8
	if(hourOnSchedule2 < 24)
 800799a:	4b17      	ldr	r3, [pc, #92]	; (80079f8 <schedule2HourOnIncrease+0x64>)
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	2b17      	cmp	r3, #23
 80079a0:	d806      	bhi.n	80079b0 <schedule2HourOnIncrease+0x1c>
	{
		hourOnSchedule2++;
 80079a2:	4b15      	ldr	r3, [pc, #84]	; (80079f8 <schedule2HourOnIncrease+0x64>)
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	3301      	adds	r3, #1
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	4b13      	ldr	r3, [pc, #76]	; (80079f8 <schedule2HourOnIncrease+0x64>)
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	e002      	b.n	80079b6 <schedule2HourOnIncrease+0x22>
	}
	else
	{
		hourOnSchedule2 = 1;
 80079b0:	4b11      	ldr	r3, [pc, #68]	; (80079f8 <schedule2HourOnIncrease+0x64>)
 80079b2:	2201      	movs	r2, #1
 80079b4:	701a      	strb	r2, [r3, #0]
	}
	if(hourOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule2);
 80079b6:	4b10      	ldr	r3, [pc, #64]	; (80079f8 <schedule2HourOnIncrease+0x64>)
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	2b09      	cmp	r3, #9
 80079bc:	d907      	bls.n	80079ce <schedule2HourOnIncrease+0x3a>
 80079be:	4b0e      	ldr	r3, [pc, #56]	; (80079f8 <schedule2HourOnIncrease+0x64>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	490d      	ldr	r1, [pc, #52]	; (80079fc <schedule2HourOnIncrease+0x68>)
 80079c6:	480e      	ldr	r0, [pc, #56]	; (8007a00 <schedule2HourOnIncrease+0x6c>)
 80079c8:	f00b f94e 	bl	8012c68 <siprintf>
 80079cc:	e006      	b.n	80079dc <schedule2HourOnIncrease+0x48>
	else sprintf((char*)Msg, " 0%d ", hourOnSchedule2);
 80079ce:	4b0a      	ldr	r3, [pc, #40]	; (80079f8 <schedule2HourOnIncrease+0x64>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	490b      	ldr	r1, [pc, #44]	; (8007a04 <schedule2HourOnIncrease+0x70>)
 80079d6:	480a      	ldr	r0, [pc, #40]	; (8007a00 <schedule2HourOnIncrease+0x6c>)
 80079d8:	f00b f946 	bl	8012c68 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80079dc:	f24c 6318 	movw	r3, #50712	; 0xc618
 80079e0:	9301      	str	r3, [sp, #4]
 80079e2:	2301      	movs	r3, #1
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	2300      	movs	r3, #0
 80079e8:	2264      	movs	r2, #100	; 0x64
 80079ea:	2150      	movs	r1, #80	; 0x50
 80079ec:	4804      	ldr	r0, [pc, #16]	; (8007a00 <schedule2HourOnIncrease+0x6c>)
 80079ee:	f7fa f9d7 	bl	8001da0 <EF_PutString>
}
 80079f2:	bf00      	nop
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	20000289 	.word	0x20000289
 80079fc:	08016f18 	.word	0x08016f18
 8007a00:	200002cc 	.word	0x200002cc
 8007a04:	08016f20 	.word	0x08016f20

08007a08 <schedule2MinuteOnIncrease>:
	if(hourOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule2);
	else sprintf((char*)Msg, " 0%d ", hourOnSchedule2);
	EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
}
void schedule2MinuteOnIncrease(void)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af02      	add	r7, sp, #8
	if(minuteOnSchedule2 < 59)
 8007a0e:	4b17      	ldr	r3, [pc, #92]	; (8007a6c <schedule2MinuteOnIncrease+0x64>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	2b3a      	cmp	r3, #58	; 0x3a
 8007a14:	d806      	bhi.n	8007a24 <schedule2MinuteOnIncrease+0x1c>
	{
		minuteOnSchedule2++;
 8007a16:	4b15      	ldr	r3, [pc, #84]	; (8007a6c <schedule2MinuteOnIncrease+0x64>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	4b13      	ldr	r3, [pc, #76]	; (8007a6c <schedule2MinuteOnIncrease+0x64>)
 8007a20:	701a      	strb	r2, [r3, #0]
 8007a22:	e002      	b.n	8007a2a <schedule2MinuteOnIncrease+0x22>
	}
	else
	{
		minuteOnSchedule2 = 0;
 8007a24:	4b11      	ldr	r3, [pc, #68]	; (8007a6c <schedule2MinuteOnIncrease+0x64>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 8007a2a:	4b10      	ldr	r3, [pc, #64]	; (8007a6c <schedule2MinuteOnIncrease+0x64>)
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	2b09      	cmp	r3, #9
 8007a30:	d907      	bls.n	8007a42 <schedule2MinuteOnIncrease+0x3a>
 8007a32:	4b0e      	ldr	r3, [pc, #56]	; (8007a6c <schedule2MinuteOnIncrease+0x64>)
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	461a      	mov	r2, r3
 8007a38:	490d      	ldr	r1, [pc, #52]	; (8007a70 <schedule2MinuteOnIncrease+0x68>)
 8007a3a:	480e      	ldr	r0, [pc, #56]	; (8007a74 <schedule2MinuteOnIncrease+0x6c>)
 8007a3c:	f00b f914 	bl	8012c68 <siprintf>
 8007a40:	e006      	b.n	8007a50 <schedule2MinuteOnIncrease+0x48>
	else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 8007a42:	4b0a      	ldr	r3, [pc, #40]	; (8007a6c <schedule2MinuteOnIncrease+0x64>)
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	461a      	mov	r2, r3
 8007a48:	490b      	ldr	r1, [pc, #44]	; (8007a78 <schedule2MinuteOnIncrease+0x70>)
 8007a4a:	480a      	ldr	r0, [pc, #40]	; (8007a74 <schedule2MinuteOnIncrease+0x6c>)
 8007a4c:	f00b f90c 	bl	8012c68 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007a50:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007a54:	9301      	str	r3, [sp, #4]
 8007a56:	2301      	movs	r3, #1
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	2264      	movs	r2, #100	; 0x64
 8007a5e:	218a      	movs	r1, #138	; 0x8a
 8007a60:	4804      	ldr	r0, [pc, #16]	; (8007a74 <schedule2MinuteOnIncrease+0x6c>)
 8007a62:	f7fa f99d 	bl	8001da0 <EF_PutString>
}
 8007a66:	bf00      	nop
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	2000028b 	.word	0x2000028b
 8007a70:	08016f18 	.word	0x08016f18
 8007a74:	200002cc 	.word	0x200002cc
 8007a78:	08016f20 	.word	0x08016f20

08007a7c <schedule2HourOffIncrease>:
	else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
	EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
}

void schedule2HourOffIncrease(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af02      	add	r7, sp, #8
	if(hourOffSchedule2 < 24)
 8007a82:	4b17      	ldr	r3, [pc, #92]	; (8007ae0 <schedule2HourOffIncrease+0x64>)
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	2b17      	cmp	r3, #23
 8007a88:	d806      	bhi.n	8007a98 <schedule2HourOffIncrease+0x1c>
	{
		hourOffSchedule2++;
 8007a8a:	4b15      	ldr	r3, [pc, #84]	; (8007ae0 <schedule2HourOffIncrease+0x64>)
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	4b13      	ldr	r3, [pc, #76]	; (8007ae0 <schedule2HourOffIncrease+0x64>)
 8007a94:	701a      	strb	r2, [r3, #0]
 8007a96:	e002      	b.n	8007a9e <schedule2HourOffIncrease+0x22>
	}
	else
	{
		hourOffSchedule2 = 1;
 8007a98:	4b11      	ldr	r3, [pc, #68]	; (8007ae0 <schedule2HourOffIncrease+0x64>)
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	701a      	strb	r2, [r3, #0]
	}
	if(hourOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule2);
 8007a9e:	4b10      	ldr	r3, [pc, #64]	; (8007ae0 <schedule2HourOffIncrease+0x64>)
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	2b09      	cmp	r3, #9
 8007aa4:	d907      	bls.n	8007ab6 <schedule2HourOffIncrease+0x3a>
 8007aa6:	4b0e      	ldr	r3, [pc, #56]	; (8007ae0 <schedule2HourOffIncrease+0x64>)
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	490d      	ldr	r1, [pc, #52]	; (8007ae4 <schedule2HourOffIncrease+0x68>)
 8007aae:	480e      	ldr	r0, [pc, #56]	; (8007ae8 <schedule2HourOffIncrease+0x6c>)
 8007ab0:	f00b f8da 	bl	8012c68 <siprintf>
 8007ab4:	e006      	b.n	8007ac4 <schedule2HourOffIncrease+0x48>
	else sprintf((char*)Msg, " 0%d ", hourOffSchedule2);
 8007ab6:	4b0a      	ldr	r3, [pc, #40]	; (8007ae0 <schedule2HourOffIncrease+0x64>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	461a      	mov	r2, r3
 8007abc:	490b      	ldr	r1, [pc, #44]	; (8007aec <schedule2HourOffIncrease+0x70>)
 8007abe:	480a      	ldr	r0, [pc, #40]	; (8007ae8 <schedule2HourOffIncrease+0x6c>)
 8007ac0:	f00b f8d2 	bl	8012c68 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007ac4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007ac8:	9301      	str	r3, [sp, #4]
 8007aca:	2301      	movs	r3, #1
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	2300      	movs	r3, #0
 8007ad0:	2287      	movs	r2, #135	; 0x87
 8007ad2:	214e      	movs	r1, #78	; 0x4e
 8007ad4:	4804      	ldr	r0, [pc, #16]	; (8007ae8 <schedule2HourOffIncrease+0x6c>)
 8007ad6:	f7fa f963 	bl	8001da0 <EF_PutString>
}
 8007ada:	bf00      	nop
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	2000028a 	.word	0x2000028a
 8007ae4:	08016f18 	.word	0x08016f18
 8007ae8:	200002cc 	.word	0x200002cc
 8007aec:	08016f20 	.word	0x08016f20

08007af0 <schedule2MinuteOffIncrease>:
	if(hourOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule2);
	else sprintf((char*)Msg, " 0%d ", hourOffSchedule2);
	EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
}
void schedule2MinuteOffIncrease(void)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af02      	add	r7, sp, #8
	if(minuteOffSchedule2 < 59)
 8007af6:	4b17      	ldr	r3, [pc, #92]	; (8007b54 <schedule2MinuteOffIncrease+0x64>)
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	2b3a      	cmp	r3, #58	; 0x3a
 8007afc:	d806      	bhi.n	8007b0c <schedule2MinuteOffIncrease+0x1c>
	{
		minuteOffSchedule2++;
 8007afe:	4b15      	ldr	r3, [pc, #84]	; (8007b54 <schedule2MinuteOffIncrease+0x64>)
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	3301      	adds	r3, #1
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	4b13      	ldr	r3, [pc, #76]	; (8007b54 <schedule2MinuteOffIncrease+0x64>)
 8007b08:	701a      	strb	r2, [r3, #0]
 8007b0a:	e002      	b.n	8007b12 <schedule2MinuteOffIncrease+0x22>
	}
	else
	{
		minuteOffSchedule2 = 0;
 8007b0c:	4b11      	ldr	r3, [pc, #68]	; (8007b54 <schedule2MinuteOffIncrease+0x64>)
 8007b0e:	2200      	movs	r2, #0
 8007b10:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 8007b12:	4b10      	ldr	r3, [pc, #64]	; (8007b54 <schedule2MinuteOffIncrease+0x64>)
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	2b09      	cmp	r3, #9
 8007b18:	d907      	bls.n	8007b2a <schedule2MinuteOffIncrease+0x3a>
 8007b1a:	4b0e      	ldr	r3, [pc, #56]	; (8007b54 <schedule2MinuteOffIncrease+0x64>)
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	490d      	ldr	r1, [pc, #52]	; (8007b58 <schedule2MinuteOffIncrease+0x68>)
 8007b22:	480e      	ldr	r0, [pc, #56]	; (8007b5c <schedule2MinuteOffIncrease+0x6c>)
 8007b24:	f00b f8a0 	bl	8012c68 <siprintf>
 8007b28:	e006      	b.n	8007b38 <schedule2MinuteOffIncrease+0x48>
	else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 8007b2a:	4b0a      	ldr	r3, [pc, #40]	; (8007b54 <schedule2MinuteOffIncrease+0x64>)
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	490b      	ldr	r1, [pc, #44]	; (8007b60 <schedule2MinuteOffIncrease+0x70>)
 8007b32:	480a      	ldr	r0, [pc, #40]	; (8007b5c <schedule2MinuteOffIncrease+0x6c>)
 8007b34:	f00b f898 	bl	8012c68 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007b38:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007b3c:	9301      	str	r3, [sp, #4]
 8007b3e:	2301      	movs	r3, #1
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	2300      	movs	r3, #0
 8007b44:	2287      	movs	r2, #135	; 0x87
 8007b46:	218a      	movs	r1, #138	; 0x8a
 8007b48:	4804      	ldr	r0, [pc, #16]	; (8007b5c <schedule2MinuteOffIncrease+0x6c>)
 8007b4a:	f7fa f929 	bl	8001da0 <EF_PutString>
}
 8007b4e:	bf00      	nop
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	2000028c 	.word	0x2000028c
 8007b58:	08016f18 	.word	0x08016f18
 8007b5c:	200002cc 	.word	0x200002cc
 8007b60:	08016f20 	.word	0x08016f20

08007b64 <MenuTFTSchedule2ActivityHourMinuteONAdd>:
	EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
}
//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule2ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af02      	add	r7, sp, #8
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	460a      	mov	r2, r1
 8007b6e:	80fb      	strh	r3, [r7, #6]
 8007b70:	4613      	mov	r3, r2
 8007b72:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007b74:	4833      	ldr	r0, [pc, #204]	; (8007c44 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe0>)
 8007b76:	f7f9 fef9 	bl	800196c <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007b7a:	88fb      	ldrh	r3, [r7, #6]
 8007b7c:	2bba      	cmp	r3, #186	; 0xba
 8007b7e:	d908      	bls.n	8007b92 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x2e>
 8007b80:	88fb      	ldrh	r3, [r7, #6]
 8007b82:	2bdd      	cmp	r3, #221	; 0xdd
 8007b84:	d805      	bhi.n	8007b92 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x2e>
	{
		schedule2HourOnIncrease();
 8007b86:	f7ff ff05 	bl	8007994 <schedule2HourOnIncrease>
		EncoderState = ENCODER_SCHEDULE_2_HOUR_ON;
 8007b8a:	4b2f      	ldr	r3, [pc, #188]	; (8007c48 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>)
 8007b8c:	220a      	movs	r2, #10
 8007b8e:	701a      	strb	r2, [r3, #0]
 8007b90:	e054      	b.n	8007c3c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xd8>
	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007b92:	88fb      	ldrh	r3, [r7, #6]
 8007b94:	2be8      	cmp	r3, #232	; 0xe8
 8007b96:	d909      	bls.n	8007bac <MenuTFTSchedule2ActivityHourMinuteONAdd+0x48>
 8007b98:	88fb      	ldrh	r3, [r7, #6]
 8007b9a:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8007b9e:	d205      	bcs.n	8007bac <MenuTFTSchedule2ActivityHourMinuteONAdd+0x48>
	{
		schedule2MinuteOnIncrease();
 8007ba0:	f7ff ff32 	bl	8007a08 <schedule2MinuteOnIncrease>
		EncoderState = ENCODER_SCHEDULE_2_MINUTE_ON;
 8007ba4:	4b28      	ldr	r3, [pc, #160]	; (8007c48 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>)
 8007ba6:	220c      	movs	r2, #12
 8007ba8:	701a      	strb	r2, [r3, #0]
 8007baa:	e047      	b.n	8007c3c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xd8>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007bac:	88fb      	ldrh	r3, [r7, #6]
 8007bae:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8007bb2:	d943      	bls.n	8007c3c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xd8>
 8007bb4:	88fb      	ldrh	r3, [r7, #6]
 8007bb6:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007bba:	d23f      	bcs.n	8007c3c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xd8>
	{
		EncoderState = ENCODER_SCHEDULE_2_MINUTE_ON;
 8007bbc:	4b22      	ldr	r3, [pc, #136]	; (8007c48 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>)
 8007bbe:	220c      	movs	r2, #12
 8007bc0:	701a      	strb	r2, [r3, #0]
		if(minuteOnSchedule2 < 49)
 8007bc2:	4b22      	ldr	r3, [pc, #136]	; (8007c4c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	2b30      	cmp	r3, #48	; 0x30
 8007bc8:	d806      	bhi.n	8007bd8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x74>
		{
			minuteOnSchedule2 = minuteOnSchedule2 + 10;
 8007bca:	4b20      	ldr	r3, [pc, #128]	; (8007c4c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	330a      	adds	r3, #10
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	4b1e      	ldr	r3, [pc, #120]	; (8007c4c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007bd4:	701a      	strb	r2, [r3, #0]
 8007bd6:	e012      	b.n	8007bfe <MenuTFTSchedule2ActivityHourMinuteONAdd+0x9a>
		}
		else
		{
			minuteOnSchedule2 = (minuteOnSchedule2 + 10) % 60;
 8007bd8:	4b1c      	ldr	r3, [pc, #112]	; (8007c4c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	f103 020a 	add.w	r2, r3, #10
 8007be0:	4b1b      	ldr	r3, [pc, #108]	; (8007c50 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xec>)
 8007be2:	fb83 1302 	smull	r1, r3, r3, r2
 8007be6:	4413      	add	r3, r2
 8007be8:	1159      	asrs	r1, r3, #5
 8007bea:	17d3      	asrs	r3, r2, #31
 8007bec:	1ac9      	subs	r1, r1, r3
 8007bee:	460b      	mov	r3, r1
 8007bf0:	011b      	lsls	r3, r3, #4
 8007bf2:	1a5b      	subs	r3, r3, r1
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	1ad1      	subs	r1, r2, r3
 8007bf8:	b2ca      	uxtb	r2, r1
 8007bfa:	4b14      	ldr	r3, [pc, #80]	; (8007c4c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007bfc:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 8007bfe:	4b13      	ldr	r3, [pc, #76]	; (8007c4c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	2b09      	cmp	r3, #9
 8007c04:	d907      	bls.n	8007c16 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xb2>
 8007c06:	4b11      	ldr	r3, [pc, #68]	; (8007c4c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	4911      	ldr	r1, [pc, #68]	; (8007c54 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xf0>)
 8007c0e:	4812      	ldr	r0, [pc, #72]	; (8007c58 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xf4>)
 8007c10:	f00b f82a 	bl	8012c68 <siprintf>
 8007c14:	e006      	b.n	8007c24 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xc0>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 8007c16:	4b0d      	ldr	r3, [pc, #52]	; (8007c4c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	490f      	ldr	r1, [pc, #60]	; (8007c5c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xf8>)
 8007c1e:	480e      	ldr	r0, [pc, #56]	; (8007c58 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xf4>)
 8007c20:	f00b f822 	bl	8012c68 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007c24:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	2264      	movs	r2, #100	; 0x64
 8007c32:	218a      	movs	r1, #138	; 0x8a
 8007c34:	4808      	ldr	r0, [pc, #32]	; (8007c58 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xf4>)
 8007c36:	f7fa f8b3 	bl	8001da0 <EF_PutString>
	}
}
 8007c3a:	e7ff      	b.n	8007c3c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xd8>
 8007c3c:	bf00      	nop
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	0802a4cc 	.word	0x0802a4cc
 8007c48:	200002a1 	.word	0x200002a1
 8007c4c:	2000028b 	.word	0x2000028b
 8007c50:	88888889 	.word	0x88888889
 8007c54:	08016f18 	.word	0x08016f18
 8007c58:	200002cc 	.word	0x200002cc
 8007c5c:	08016f20 	.word	0x08016f20

08007c60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute OFF section
void MenuTFTSchedule2ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af02      	add	r7, sp, #8
 8007c66:	4603      	mov	r3, r0
 8007c68:	460a      	mov	r2, r1
 8007c6a:	80fb      	strh	r3, [r7, #6]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007c70:	4833      	ldr	r0, [pc, #204]	; (8007d40 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe0>)
 8007c72:	f7f9 fe7b 	bl	800196c <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007c76:	88fb      	ldrh	r3, [r7, #6]
 8007c78:	2bba      	cmp	r3, #186	; 0xba
 8007c7a:	d908      	bls.n	8007c8e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x2e>
 8007c7c:	88fb      	ldrh	r3, [r7, #6]
 8007c7e:	2bdd      	cmp	r3, #221	; 0xdd
 8007c80:	d805      	bhi.n	8007c8e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x2e>
	{
		schedule2HourOffIncrease();
 8007c82:	f7ff fefb 	bl	8007a7c <schedule2HourOffIncrease>
		EncoderState = ENCODER_SCHEDULE_2_HOUR_OFF;
 8007c86:	4b2f      	ldr	r3, [pc, #188]	; (8007d44 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>)
 8007c88:	220b      	movs	r2, #11
 8007c8a:	701a      	strb	r2, [r3, #0]
 8007c8c:	e054      	b.n	8007d38 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xd8>
	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007c8e:	88fb      	ldrh	r3, [r7, #6]
 8007c90:	2be8      	cmp	r3, #232	; 0xe8
 8007c92:	d909      	bls.n	8007ca8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x48>
 8007c94:	88fb      	ldrh	r3, [r7, #6]
 8007c96:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8007c9a:	d205      	bcs.n	8007ca8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x48>
	{
		schedule2MinuteOffIncrease();
 8007c9c:	f7ff ff28 	bl	8007af0 <schedule2MinuteOffIncrease>
		EncoderState = ENCODER_SCHEDULE_2_MINUTE_OFF;
 8007ca0:	4b28      	ldr	r3, [pc, #160]	; (8007d44 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>)
 8007ca2:	220d      	movs	r2, #13
 8007ca4:	701a      	strb	r2, [r3, #0]
 8007ca6:	e047      	b.n	8007d38 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xd8>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007ca8:	88fb      	ldrh	r3, [r7, #6]
 8007caa:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8007cae:	d943      	bls.n	8007d38 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xd8>
 8007cb0:	88fb      	ldrh	r3, [r7, #6]
 8007cb2:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007cb6:	d23f      	bcs.n	8007d38 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xd8>
	{
		EncoderState = ENCODER_SCHEDULE_2_MINUTE_OFF;
 8007cb8:	4b22      	ldr	r3, [pc, #136]	; (8007d44 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>)
 8007cba:	220d      	movs	r2, #13
 8007cbc:	701a      	strb	r2, [r3, #0]
		if(minuteOffSchedule2 < 49)
 8007cbe:	4b22      	ldr	r3, [pc, #136]	; (8007d48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	2b30      	cmp	r3, #48	; 0x30
 8007cc4:	d806      	bhi.n	8007cd4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x74>
		{
			minuteOffSchedule2 = minuteOffSchedule2 + 10;
 8007cc6:	4b20      	ldr	r3, [pc, #128]	; (8007d48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	330a      	adds	r3, #10
 8007ccc:	b2da      	uxtb	r2, r3
 8007cce:	4b1e      	ldr	r3, [pc, #120]	; (8007d48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 8007cd0:	701a      	strb	r2, [r3, #0]
 8007cd2:	e012      	b.n	8007cfa <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x9a>
		}
		else
		{
			minuteOffSchedule2 = (minuteOffSchedule2 + 10) % 60;
 8007cd4:	4b1c      	ldr	r3, [pc, #112]	; (8007d48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	f103 020a 	add.w	r2, r3, #10
 8007cdc:	4b1b      	ldr	r3, [pc, #108]	; (8007d4c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xec>)
 8007cde:	fb83 1302 	smull	r1, r3, r3, r2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	1159      	asrs	r1, r3, #5
 8007ce6:	17d3      	asrs	r3, r2, #31
 8007ce8:	1ac9      	subs	r1, r1, r3
 8007cea:	460b      	mov	r3, r1
 8007cec:	011b      	lsls	r3, r3, #4
 8007cee:	1a5b      	subs	r3, r3, r1
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	1ad1      	subs	r1, r2, r3
 8007cf4:	b2ca      	uxtb	r2, r1
 8007cf6:	4b14      	ldr	r3, [pc, #80]	; (8007d48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 8007cf8:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 8007cfa:	4b13      	ldr	r3, [pc, #76]	; (8007d48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	2b09      	cmp	r3, #9
 8007d00:	d907      	bls.n	8007d12 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xb2>
 8007d02:	4b11      	ldr	r3, [pc, #68]	; (8007d48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	4911      	ldr	r1, [pc, #68]	; (8007d50 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xf0>)
 8007d0a:	4812      	ldr	r0, [pc, #72]	; (8007d54 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xf4>)
 8007d0c:	f00a ffac 	bl	8012c68 <siprintf>
 8007d10:	e006      	b.n	8007d20 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xc0>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 8007d12:	4b0d      	ldr	r3, [pc, #52]	; (8007d48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	461a      	mov	r2, r3
 8007d18:	490f      	ldr	r1, [pc, #60]	; (8007d58 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xf8>)
 8007d1a:	480e      	ldr	r0, [pc, #56]	; (8007d54 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xf4>)
 8007d1c:	f00a ffa4 	bl	8012c68 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007d20:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007d24:	9301      	str	r3, [sp, #4]
 8007d26:	2301      	movs	r3, #1
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	2287      	movs	r2, #135	; 0x87
 8007d2e:	218a      	movs	r1, #138	; 0x8a
 8007d30:	4808      	ldr	r0, [pc, #32]	; (8007d54 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xf4>)
 8007d32:	f7fa f835 	bl	8001da0 <EF_PutString>
	}
}
 8007d36:	e7ff      	b.n	8007d38 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xd8>
 8007d38:	bf00      	nop
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	0802a4cc 	.word	0x0802a4cc
 8007d44:	200002a1 	.word	0x200002a1
 8007d48:	2000028c 	.word	0x2000028c
 8007d4c:	88888889 	.word	0x88888889
 8007d50:	08016f18 	.word	0x08016f18
 8007d54:	200002cc 	.word	0x200002cc
 8007d58:	08016f20 	.word	0x08016f20

08007d5c <MenuTFTSchedule1ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 1 section
//
void MenuTFTSchedule1ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	4603      	mov	r3, r0
 8007d64:	460a      	mov	r2, r1
 8007d66:	80fb      	strh	r3, [r7, #6]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8007d6c:	88fb      	ldrh	r3, [r7, #6]
 8007d6e:	2b14      	cmp	r3, #20
 8007d70:	d919      	bls.n	8007da6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
 8007d72:	88fb      	ldrh	r3, [r7, #6]
 8007d74:	2b29      	cmp	r3, #41	; 0x29
 8007d76:	d816      	bhi.n	8007da6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule1RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 8007d78:	4b82      	ldr	r3, [pc, #520]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d004      	beq.n	8007d8a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x2e>
 8007d80:	2100      	movs	r1, #0
 8007d82:	2001      	movs	r0, #1
 8007d84:	f7ff fa25 	bl	80071d2 <changeTFTScheduleRelayLights>
 8007d88:	e003      	b.n	8007d92 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	2001      	movs	r0, #1
 8007d8e:	f7ff fa20 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[0] = !schedule1RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 8007d92:	4b7c      	ldr	r3, [pc, #496]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	bf0c      	ite	eq
 8007d9a:	2301      	moveq	r3, #1
 8007d9c:	2300      	movne	r3, #0
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	461a      	mov	r2, r3
 8007da2:	4b78      	ldr	r3, [pc, #480]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007da4:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8007da6:	88fb      	ldrh	r3, [r7, #6]
 8007da8:	2b34      	cmp	r3, #52	; 0x34
 8007daa:	d919      	bls.n	8007de0 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
 8007dac:	88fb      	ldrh	r3, [r7, #6]
 8007dae:	2b49      	cmp	r3, #73	; 0x49
 8007db0:	d816      	bhi.n	8007de0 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule1RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 8007db2:	4b74      	ldr	r3, [pc, #464]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007db4:	785b      	ldrb	r3, [r3, #1]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d004      	beq.n	8007dc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x68>
 8007dba:	2100      	movs	r1, #0
 8007dbc:	2002      	movs	r0, #2
 8007dbe:	f7ff fa08 	bl	80071d2 <changeTFTScheduleRelayLights>
 8007dc2:	e003      	b.n	8007dcc <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	2002      	movs	r0, #2
 8007dc8:	f7ff fa03 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[1] = !schedule1RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 8007dcc:	4b6d      	ldr	r3, [pc, #436]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007dce:	785b      	ldrb	r3, [r3, #1]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	bf0c      	ite	eq
 8007dd4:	2301      	moveq	r3, #1
 8007dd6:	2300      	movne	r3, #0
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	461a      	mov	r2, r3
 8007ddc:	4b69      	ldr	r3, [pc, #420]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007dde:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007de0:	88fb      	ldrh	r3, [r7, #6]
 8007de2:	2b54      	cmp	r3, #84	; 0x54
 8007de4:	d919      	bls.n	8007e1a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
 8007de6:	88fb      	ldrh	r3, [r7, #6]
 8007de8:	2b69      	cmp	r3, #105	; 0x69
 8007dea:	d816      	bhi.n	8007e1a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule1RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 8007dec:	4b65      	ldr	r3, [pc, #404]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007dee:	789b      	ldrb	r3, [r3, #2]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d004      	beq.n	8007dfe <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xa2>
 8007df4:	2100      	movs	r1, #0
 8007df6:	2003      	movs	r0, #3
 8007df8:	f7ff f9eb 	bl	80071d2 <changeTFTScheduleRelayLights>
 8007dfc:	e003      	b.n	8007e06 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 8007dfe:	2101      	movs	r1, #1
 8007e00:	2003      	movs	r0, #3
 8007e02:	f7ff f9e6 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[2] = !schedule1RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 8007e06:	4b5f      	ldr	r3, [pc, #380]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007e08:	789b      	ldrb	r3, [r3, #2]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	bf0c      	ite	eq
 8007e0e:	2301      	moveq	r3, #1
 8007e10:	2300      	movne	r3, #0
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	461a      	mov	r2, r3
 8007e16:	4b5b      	ldr	r3, [pc, #364]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007e18:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8007e1a:	88fb      	ldrh	r3, [r7, #6]
 8007e1c:	2b74      	cmp	r3, #116	; 0x74
 8007e1e:	d919      	bls.n	8007e54 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
 8007e20:	88fb      	ldrh	r3, [r7, #6]
 8007e22:	2b89      	cmp	r3, #137	; 0x89
 8007e24:	d816      	bhi.n	8007e54 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule1RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 8007e26:	4b57      	ldr	r3, [pc, #348]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007e28:	78db      	ldrb	r3, [r3, #3]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d004      	beq.n	8007e38 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xdc>
 8007e2e:	2100      	movs	r1, #0
 8007e30:	2004      	movs	r0, #4
 8007e32:	f7ff f9ce 	bl	80071d2 <changeTFTScheduleRelayLights>
 8007e36:	e003      	b.n	8007e40 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 8007e38:	2101      	movs	r1, #1
 8007e3a:	2004      	movs	r0, #4
 8007e3c:	f7ff f9c9 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[3] = !schedule1RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 8007e40:	4b50      	ldr	r3, [pc, #320]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007e42:	78db      	ldrb	r3, [r3, #3]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	bf0c      	ite	eq
 8007e48:	2301      	moveq	r3, #1
 8007e4a:	2300      	movne	r3, #0
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	461a      	mov	r2, r3
 8007e50:	4b4c      	ldr	r3, [pc, #304]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007e52:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8007e54:	88fb      	ldrh	r3, [r7, #6]
 8007e56:	2b94      	cmp	r3, #148	; 0x94
 8007e58:	d919      	bls.n	8007e8e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
 8007e5a:	88fb      	ldrh	r3, [r7, #6]
 8007e5c:	2ba9      	cmp	r3, #169	; 0xa9
 8007e5e:	d816      	bhi.n	8007e8e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule1RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 8007e60:	4b48      	ldr	r3, [pc, #288]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007e62:	791b      	ldrb	r3, [r3, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d004      	beq.n	8007e72 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x116>
 8007e68:	2100      	movs	r1, #0
 8007e6a:	2005      	movs	r0, #5
 8007e6c:	f7ff f9b1 	bl	80071d2 <changeTFTScheduleRelayLights>
 8007e70:	e003      	b.n	8007e7a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 8007e72:	2101      	movs	r1, #1
 8007e74:	2005      	movs	r0, #5
 8007e76:	f7ff f9ac 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[4] = !schedule1RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 8007e7a:	4b42      	ldr	r3, [pc, #264]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007e7c:	791b      	ldrb	r3, [r3, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	bf0c      	ite	eq
 8007e82:	2301      	moveq	r3, #1
 8007e84:	2300      	movne	r3, #0
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	461a      	mov	r2, r3
 8007e8a:	4b3e      	ldr	r3, [pc, #248]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007e8c:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007e8e:	88fb      	ldrh	r3, [r7, #6]
 8007e90:	2bb4      	cmp	r3, #180	; 0xb4
 8007e92:	d919      	bls.n	8007ec8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
 8007e94:	88fb      	ldrh	r3, [r7, #6]
 8007e96:	2bc9      	cmp	r3, #201	; 0xc9
 8007e98:	d816      	bhi.n	8007ec8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule1RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 8007e9a:	4b3a      	ldr	r3, [pc, #232]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007e9c:	795b      	ldrb	r3, [r3, #5]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d004      	beq.n	8007eac <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x150>
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	2006      	movs	r0, #6
 8007ea6:	f7ff f994 	bl	80071d2 <changeTFTScheduleRelayLights>
 8007eaa:	e003      	b.n	8007eb4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 8007eac:	2101      	movs	r1, #1
 8007eae:	2006      	movs	r0, #6
 8007eb0:	f7ff f98f 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[5] = !schedule1RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 8007eb4:	4b33      	ldr	r3, [pc, #204]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007eb6:	795b      	ldrb	r3, [r3, #5]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	bf0c      	ite	eq
 8007ebc:	2301      	moveq	r3, #1
 8007ebe:	2300      	movne	r3, #0
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	4b2f      	ldr	r3, [pc, #188]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007ec6:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007ec8:	88fb      	ldrh	r3, [r7, #6]
 8007eca:	2bd4      	cmp	r3, #212	; 0xd4
 8007ecc:	d919      	bls.n	8007f02 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
 8007ece:	88fb      	ldrh	r3, [r7, #6]
 8007ed0:	2be9      	cmp	r3, #233	; 0xe9
 8007ed2:	d816      	bhi.n	8007f02 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule1RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 8007ed4:	4b2b      	ldr	r3, [pc, #172]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007ed6:	799b      	ldrb	r3, [r3, #6]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d004      	beq.n	8007ee6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x18a>
 8007edc:	2100      	movs	r1, #0
 8007ede:	2007      	movs	r0, #7
 8007ee0:	f7ff f977 	bl	80071d2 <changeTFTScheduleRelayLights>
 8007ee4:	e003      	b.n	8007eee <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	2007      	movs	r0, #7
 8007eea:	f7ff f972 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[6] = !schedule1RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 8007eee:	4b25      	ldr	r3, [pc, #148]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007ef0:	799b      	ldrb	r3, [r3, #6]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	bf0c      	ite	eq
 8007ef6:	2301      	moveq	r3, #1
 8007ef8:	2300      	movne	r3, #0
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	461a      	mov	r2, r3
 8007efe:	4b21      	ldr	r3, [pc, #132]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007f00:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 8007f02:	88fb      	ldrh	r3, [r7, #6]
 8007f04:	2bf4      	cmp	r3, #244	; 0xf4
 8007f06:	d91a      	bls.n	8007f3e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
 8007f08:	88fb      	ldrh	r3, [r7, #6]
 8007f0a:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8007f0e:	d216      	bcs.n	8007f3e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule1RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 8007f10:	4b1c      	ldr	r3, [pc, #112]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007f12:	79db      	ldrb	r3, [r3, #7]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d004      	beq.n	8007f22 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1c6>
 8007f18:	2100      	movs	r1, #0
 8007f1a:	2008      	movs	r0, #8
 8007f1c:	f7ff f959 	bl	80071d2 <changeTFTScheduleRelayLights>
 8007f20:	e003      	b.n	8007f2a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 8007f22:	2101      	movs	r1, #1
 8007f24:	2008      	movs	r0, #8
 8007f26:	f7ff f954 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[7] = !schedule1RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 8007f2a:	4b16      	ldr	r3, [pc, #88]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007f2c:	79db      	ldrb	r3, [r3, #7]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	bf0c      	ite	eq
 8007f32:	2301      	moveq	r3, #1
 8007f34:	2300      	movne	r3, #0
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	461a      	mov	r2, r3
 8007f3a:	4b12      	ldr	r3, [pc, #72]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007f3c:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 8007f3e:	88fb      	ldrh	r3, [r7, #6]
 8007f40:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8007f44:	d91a      	bls.n	8007f7c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
 8007f46:	88fb      	ldrh	r3, [r7, #6]
 8007f48:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8007f4c:	d216      	bcs.n	8007f7c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule1RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 8007f4e:	4b0d      	ldr	r3, [pc, #52]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007f50:	7a1b      	ldrb	r3, [r3, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d004      	beq.n	8007f60 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x204>
 8007f56:	2100      	movs	r1, #0
 8007f58:	2009      	movs	r0, #9
 8007f5a:	f7ff f93a 	bl	80071d2 <changeTFTScheduleRelayLights>
 8007f5e:	e003      	b.n	8007f68 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 8007f60:	2101      	movs	r1, #1
 8007f62:	2009      	movs	r0, #9
 8007f64:	f7ff f935 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[8] = !schedule1RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 8007f68:	4b06      	ldr	r3, [pc, #24]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007f6a:	7a1b      	ldrb	r3, [r3, #8]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	bf0c      	ite	eq
 8007f70:	2301      	moveq	r3, #1
 8007f72:	2300      	movne	r3, #0
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	461a      	mov	r2, r3
 8007f78:	4b02      	ldr	r3, [pc, #8]	; (8007f84 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007f7a:	721a      	strb	r2, [r3, #8]
	}

}
 8007f7c:	bf00      	nop
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	20000268 	.word	0x20000268

08007f88 <MenuTFTSchedule2ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 2 section
//
void MenuTFTSchedule2ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	460a      	mov	r2, r1
 8007f92:	80fb      	strh	r3, [r7, #6]
 8007f94:	4613      	mov	r3, r2
 8007f96:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8007f98:	88fb      	ldrh	r3, [r7, #6]
 8007f9a:	2b14      	cmp	r3, #20
 8007f9c:	d919      	bls.n	8007fd2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
 8007f9e:	88fb      	ldrh	r3, [r7, #6]
 8007fa0:	2b29      	cmp	r3, #41	; 0x29
 8007fa2:	d816      	bhi.n	8007fd2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule2RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 8007fa4:	4b82      	ldr	r3, [pc, #520]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d004      	beq.n	8007fb6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x2e>
 8007fac:	2100      	movs	r1, #0
 8007fae:	2001      	movs	r0, #1
 8007fb0:	f7ff f90f 	bl	80071d2 <changeTFTScheduleRelayLights>
 8007fb4:	e003      	b.n	8007fbe <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	2001      	movs	r0, #1
 8007fba:	f7ff f90a 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[0] = !schedule2RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 8007fbe:	4b7c      	ldr	r3, [pc, #496]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	bf0c      	ite	eq
 8007fc6:	2301      	moveq	r3, #1
 8007fc8:	2300      	movne	r3, #0
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	461a      	mov	r2, r3
 8007fce:	4b78      	ldr	r3, [pc, #480]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007fd0:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8007fd2:	88fb      	ldrh	r3, [r7, #6]
 8007fd4:	2b34      	cmp	r3, #52	; 0x34
 8007fd6:	d919      	bls.n	800800c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
 8007fd8:	88fb      	ldrh	r3, [r7, #6]
 8007fda:	2b49      	cmp	r3, #73	; 0x49
 8007fdc:	d816      	bhi.n	800800c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule2RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 8007fde:	4b74      	ldr	r3, [pc, #464]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007fe0:	785b      	ldrb	r3, [r3, #1]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d004      	beq.n	8007ff0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x68>
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	2002      	movs	r0, #2
 8007fea:	f7ff f8f2 	bl	80071d2 <changeTFTScheduleRelayLights>
 8007fee:	e003      	b.n	8007ff8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 8007ff0:	2101      	movs	r1, #1
 8007ff2:	2002      	movs	r0, #2
 8007ff4:	f7ff f8ed 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[1] = !schedule2RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 8007ff8:	4b6d      	ldr	r3, [pc, #436]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007ffa:	785b      	ldrb	r3, [r3, #1]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	bf0c      	ite	eq
 8008000:	2301      	moveq	r3, #1
 8008002:	2300      	movne	r3, #0
 8008004:	b2db      	uxtb	r3, r3
 8008006:	461a      	mov	r2, r3
 8008008:	4b69      	ldr	r3, [pc, #420]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800800a:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 800800c:	88fb      	ldrh	r3, [r7, #6]
 800800e:	2b54      	cmp	r3, #84	; 0x54
 8008010:	d919      	bls.n	8008046 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
 8008012:	88fb      	ldrh	r3, [r7, #6]
 8008014:	2b69      	cmp	r3, #105	; 0x69
 8008016:	d816      	bhi.n	8008046 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule2RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 8008018:	4b65      	ldr	r3, [pc, #404]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800801a:	789b      	ldrb	r3, [r3, #2]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d004      	beq.n	800802a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xa2>
 8008020:	2100      	movs	r1, #0
 8008022:	2003      	movs	r0, #3
 8008024:	f7ff f8d5 	bl	80071d2 <changeTFTScheduleRelayLights>
 8008028:	e003      	b.n	8008032 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 800802a:	2101      	movs	r1, #1
 800802c:	2003      	movs	r0, #3
 800802e:	f7ff f8d0 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[2] = !schedule2RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 8008032:	4b5f      	ldr	r3, [pc, #380]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008034:	789b      	ldrb	r3, [r3, #2]
 8008036:	2b00      	cmp	r3, #0
 8008038:	bf0c      	ite	eq
 800803a:	2301      	moveq	r3, #1
 800803c:	2300      	movne	r3, #0
 800803e:	b2db      	uxtb	r3, r3
 8008040:	461a      	mov	r2, r3
 8008042:	4b5b      	ldr	r3, [pc, #364]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008044:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8008046:	88fb      	ldrh	r3, [r7, #6]
 8008048:	2b74      	cmp	r3, #116	; 0x74
 800804a:	d919      	bls.n	8008080 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
 800804c:	88fb      	ldrh	r3, [r7, #6]
 800804e:	2b89      	cmp	r3, #137	; 0x89
 8008050:	d816      	bhi.n	8008080 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule2RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 8008052:	4b57      	ldr	r3, [pc, #348]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008054:	78db      	ldrb	r3, [r3, #3]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d004      	beq.n	8008064 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xdc>
 800805a:	2100      	movs	r1, #0
 800805c:	2004      	movs	r0, #4
 800805e:	f7ff f8b8 	bl	80071d2 <changeTFTScheduleRelayLights>
 8008062:	e003      	b.n	800806c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 8008064:	2101      	movs	r1, #1
 8008066:	2004      	movs	r0, #4
 8008068:	f7ff f8b3 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[3] = !schedule2RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 800806c:	4b50      	ldr	r3, [pc, #320]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800806e:	78db      	ldrb	r3, [r3, #3]
 8008070:	2b00      	cmp	r3, #0
 8008072:	bf0c      	ite	eq
 8008074:	2301      	moveq	r3, #1
 8008076:	2300      	movne	r3, #0
 8008078:	b2db      	uxtb	r3, r3
 800807a:	461a      	mov	r2, r3
 800807c:	4b4c      	ldr	r3, [pc, #304]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800807e:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8008080:	88fb      	ldrh	r3, [r7, #6]
 8008082:	2b94      	cmp	r3, #148	; 0x94
 8008084:	d919      	bls.n	80080ba <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
 8008086:	88fb      	ldrh	r3, [r7, #6]
 8008088:	2ba9      	cmp	r3, #169	; 0xa9
 800808a:	d816      	bhi.n	80080ba <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule2RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 800808c:	4b48      	ldr	r3, [pc, #288]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800808e:	791b      	ldrb	r3, [r3, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d004      	beq.n	800809e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x116>
 8008094:	2100      	movs	r1, #0
 8008096:	2005      	movs	r0, #5
 8008098:	f7ff f89b 	bl	80071d2 <changeTFTScheduleRelayLights>
 800809c:	e003      	b.n	80080a6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 800809e:	2101      	movs	r1, #1
 80080a0:	2005      	movs	r0, #5
 80080a2:	f7ff f896 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[4] = !schedule2RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 80080a6:	4b42      	ldr	r3, [pc, #264]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80080a8:	791b      	ldrb	r3, [r3, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	bf0c      	ite	eq
 80080ae:	2301      	moveq	r3, #1
 80080b0:	2300      	movne	r3, #0
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	461a      	mov	r2, r3
 80080b6:	4b3e      	ldr	r3, [pc, #248]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80080b8:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 80080ba:	88fb      	ldrh	r3, [r7, #6]
 80080bc:	2bb4      	cmp	r3, #180	; 0xb4
 80080be:	d919      	bls.n	80080f4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
 80080c0:	88fb      	ldrh	r3, [r7, #6]
 80080c2:	2bc9      	cmp	r3, #201	; 0xc9
 80080c4:	d816      	bhi.n	80080f4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule2RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 80080c6:	4b3a      	ldr	r3, [pc, #232]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80080c8:	795b      	ldrb	r3, [r3, #5]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d004      	beq.n	80080d8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x150>
 80080ce:	2100      	movs	r1, #0
 80080d0:	2006      	movs	r0, #6
 80080d2:	f7ff f87e 	bl	80071d2 <changeTFTScheduleRelayLights>
 80080d6:	e003      	b.n	80080e0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 80080d8:	2101      	movs	r1, #1
 80080da:	2006      	movs	r0, #6
 80080dc:	f7ff f879 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[5] = !schedule2RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 80080e0:	4b33      	ldr	r3, [pc, #204]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80080e2:	795b      	ldrb	r3, [r3, #5]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	bf0c      	ite	eq
 80080e8:	2301      	moveq	r3, #1
 80080ea:	2300      	movne	r3, #0
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	461a      	mov	r2, r3
 80080f0:	4b2f      	ldr	r3, [pc, #188]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80080f2:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 80080f4:	88fb      	ldrh	r3, [r7, #6]
 80080f6:	2bd4      	cmp	r3, #212	; 0xd4
 80080f8:	d919      	bls.n	800812e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
 80080fa:	88fb      	ldrh	r3, [r7, #6]
 80080fc:	2be9      	cmp	r3, #233	; 0xe9
 80080fe:	d816      	bhi.n	800812e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule2RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 8008100:	4b2b      	ldr	r3, [pc, #172]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008102:	799b      	ldrb	r3, [r3, #6]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d004      	beq.n	8008112 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x18a>
 8008108:	2100      	movs	r1, #0
 800810a:	2007      	movs	r0, #7
 800810c:	f7ff f861 	bl	80071d2 <changeTFTScheduleRelayLights>
 8008110:	e003      	b.n	800811a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 8008112:	2101      	movs	r1, #1
 8008114:	2007      	movs	r0, #7
 8008116:	f7ff f85c 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[6] = !schedule2RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 800811a:	4b25      	ldr	r3, [pc, #148]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800811c:	799b      	ldrb	r3, [r3, #6]
 800811e:	2b00      	cmp	r3, #0
 8008120:	bf0c      	ite	eq
 8008122:	2301      	moveq	r3, #1
 8008124:	2300      	movne	r3, #0
 8008126:	b2db      	uxtb	r3, r3
 8008128:	461a      	mov	r2, r3
 800812a:	4b21      	ldr	r3, [pc, #132]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800812c:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 800812e:	88fb      	ldrh	r3, [r7, #6]
 8008130:	2bf4      	cmp	r3, #244	; 0xf4
 8008132:	d91a      	bls.n	800816a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
 8008134:	88fb      	ldrh	r3, [r7, #6]
 8008136:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 800813a:	d216      	bcs.n	800816a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule2RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 800813c:	4b1c      	ldr	r3, [pc, #112]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800813e:	79db      	ldrb	r3, [r3, #7]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d004      	beq.n	800814e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1c6>
 8008144:	2100      	movs	r1, #0
 8008146:	2008      	movs	r0, #8
 8008148:	f7ff f843 	bl	80071d2 <changeTFTScheduleRelayLights>
 800814c:	e003      	b.n	8008156 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 800814e:	2101      	movs	r1, #1
 8008150:	2008      	movs	r0, #8
 8008152:	f7ff f83e 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[7] = !schedule2RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 8008156:	4b16      	ldr	r3, [pc, #88]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008158:	79db      	ldrb	r3, [r3, #7]
 800815a:	2b00      	cmp	r3, #0
 800815c:	bf0c      	ite	eq
 800815e:	2301      	moveq	r3, #1
 8008160:	2300      	movne	r3, #0
 8008162:	b2db      	uxtb	r3, r3
 8008164:	461a      	mov	r2, r3
 8008166:	4b12      	ldr	r3, [pc, #72]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008168:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 800816a:	88fb      	ldrh	r3, [r7, #6]
 800816c:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8008170:	d91a      	bls.n	80081a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
 8008172:	88fb      	ldrh	r3, [r7, #6]
 8008174:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8008178:	d216      	bcs.n	80081a8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule2RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 800817a:	4b0d      	ldr	r3, [pc, #52]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800817c:	7a1b      	ldrb	r3, [r3, #8]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d004      	beq.n	800818c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x204>
 8008182:	2100      	movs	r1, #0
 8008184:	2009      	movs	r0, #9
 8008186:	f7ff f824 	bl	80071d2 <changeTFTScheduleRelayLights>
 800818a:	e003      	b.n	8008194 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 800818c:	2101      	movs	r1, #1
 800818e:	2009      	movs	r0, #9
 8008190:	f7ff f81f 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[8] = !schedule2RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 8008194:	4b06      	ldr	r3, [pc, #24]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008196:	7a1b      	ldrb	r3, [r3, #8]
 8008198:	2b00      	cmp	r3, #0
 800819a:	bf0c      	ite	eq
 800819c:	2301      	moveq	r3, #1
 800819e:	2300      	movne	r3, #0
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	461a      	mov	r2, r3
 80081a4:	4b02      	ldr	r3, [pc, #8]	; (80081b0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80081a6:	721a      	strb	r2, [r3, #8]
	}
}
 80081a8:	bf00      	nop
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	2000027c 	.word	0x2000027c

080081b4 <updateAllSchedulesInfo>:

//
//Read All info about schedules
void updateAllSchedulesInfo(uint8_t NrOfSchedule)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	4603      	mov	r3, r0
 80081bc:	71fb      	strb	r3, [r7, #7]
	if( 1 == NrOfSchedule)
 80081be:	79fb      	ldrb	r3, [r7, #7]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d118      	bne.n	80081f6 <updateAllSchedulesInfo+0x42>
	{
	  EEPROM_ScheduleHourOnRead(1, &hourOnSchedule1);
 80081c4:	491b      	ldr	r1, [pc, #108]	; (8008234 <updateAllSchedulesInfo+0x80>)
 80081c6:	2001      	movs	r0, #1
 80081c8:	f7fa fff5 	bl	80031b6 <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(1, &minuteOnSchedule1);
 80081cc:	491a      	ldr	r1, [pc, #104]	; (8008238 <updateAllSchedulesInfo+0x84>)
 80081ce:	2001      	movs	r0, #1
 80081d0:	f7fb f815 	bl	80031fe <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(1, &hourOffSchedule1);
 80081d4:	4919      	ldr	r1, [pc, #100]	; (800823c <updateAllSchedulesInfo+0x88>)
 80081d6:	2001      	movs	r0, #1
 80081d8:	f7fb f835 	bl	8003246 <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(1, &minuteOffSchedule1);
 80081dc:	4918      	ldr	r1, [pc, #96]	; (8008240 <updateAllSchedulesInfo+0x8c>)
 80081de:	2001      	movs	r0, #1
 80081e0:	f7fb f855 	bl	800328e <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 80081e4:	4917      	ldr	r1, [pc, #92]	; (8008244 <updateAllSchedulesInfo+0x90>)
 80081e6:	2001      	movs	r0, #1
 80081e8:	f7fa fe94 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 80081ec:	4916      	ldr	r1, [pc, #88]	; (8008248 <updateAllSchedulesInfo+0x94>)
 80081ee:	2001      	movs	r0, #1
 80081f0:	f7fa ff0c 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
	}

}
 80081f4:	e01a      	b.n	800822c <updateAllSchedulesInfo+0x78>
	else if ( 2 == NrOfSchedule)
 80081f6:	79fb      	ldrb	r3, [r7, #7]
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d117      	bne.n	800822c <updateAllSchedulesInfo+0x78>
	  EEPROM_ScheduleHourOnRead(2, &hourOnSchedule2);
 80081fc:	4913      	ldr	r1, [pc, #76]	; (800824c <updateAllSchedulesInfo+0x98>)
 80081fe:	2002      	movs	r0, #2
 8008200:	f7fa ffd9 	bl	80031b6 <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(2, &minuteOnSchedule2);
 8008204:	4912      	ldr	r1, [pc, #72]	; (8008250 <updateAllSchedulesInfo+0x9c>)
 8008206:	2002      	movs	r0, #2
 8008208:	f7fa fff9 	bl	80031fe <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(2, &hourOffSchedule2);
 800820c:	4911      	ldr	r1, [pc, #68]	; (8008254 <updateAllSchedulesInfo+0xa0>)
 800820e:	2002      	movs	r0, #2
 8008210:	f7fb f819 	bl	8003246 <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
 8008214:	4910      	ldr	r1, [pc, #64]	; (8008258 <updateAllSchedulesInfo+0xa4>)
 8008216:	2002      	movs	r0, #2
 8008218:	f7fb f839 	bl	800328e <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
 800821c:	4909      	ldr	r1, [pc, #36]	; (8008244 <updateAllSchedulesInfo+0x90>)
 800821e:	2002      	movs	r0, #2
 8008220:	f7fa fe78 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
 8008224:	4908      	ldr	r1, [pc, #32]	; (8008248 <updateAllSchedulesInfo+0x94>)
 8008226:	2002      	movs	r0, #2
 8008228:	f7fa fef0 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>
}
 800822c:	bf00      	nop
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	20000285 	.word	0x20000285
 8008238:	20000287 	.word	0x20000287
 800823c:	20000286 	.word	0x20000286
 8008240:	20000288 	.word	0x20000288
 8008244:	20000260 	.word	0x20000260
 8008248:	20000268 	.word	0x20000268
 800824c:	20000289 	.word	0x20000289
 8008250:	2000028b 	.word	0x2000028b
 8008254:	2000028a 	.word	0x2000028a
 8008258:	2000028c 	.word	0x2000028c

0800825c <clockIncreaseOneHourAndMinute>:

//
// Functions to update Hour and Minute after touch
//
void clockIncreaseOneHourAndMinute(uint16_t x, uint16_t y)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	4603      	mov	r3, r0
 8008264:	460a      	mov	r2, r1
 8008266:	80fb      	strh	r3, [r7, #6]
 8008268:	4613      	mov	r3, r2
 800826a:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 800826c:	88bb      	ldrh	r3, [r7, #4]
 800826e:	2b4a      	cmp	r3, #74	; 0x4a
 8008270:	d908      	bls.n	8008284 <clockIncreaseOneHourAndMinute+0x28>
 8008272:	88bb      	ldrh	r3, [r7, #4]
 8008274:	2b60      	cmp	r3, #96	; 0x60
 8008276:	d805      	bhi.n	8008284 <clockIncreaseOneHourAndMinute+0x28>
	{
		EncoderState = ENCODER_CLOCK_HOUR;
 8008278:	4b10      	ldr	r3, [pc, #64]	; (80082bc <clockIncreaseOneHourAndMinute+0x60>)
 800827a:	2201      	movs	r2, #1
 800827c:	701a      	strb	r2, [r3, #0]

		OneHourIncrease();
 800827e:	f000 ffcb 	bl	8009218 <OneHourIncrease>
 8008282:	e017      	b.n	80082b4 <clockIncreaseOneHourAndMinute+0x58>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 8008284:	88bb      	ldrh	r3, [r7, #4]
 8008286:	2b72      	cmp	r3, #114	; 0x72
 8008288:	d908      	bls.n	800829c <clockIncreaseOneHourAndMinute+0x40>
 800828a:	88bb      	ldrh	r3, [r7, #4]
 800828c:	2b88      	cmp	r3, #136	; 0x88
 800828e:	d805      	bhi.n	800829c <clockIncreaseOneHourAndMinute+0x40>
	{
		EncoderState = ENCODER_CLOCK_MINUTE;
 8008290:	4b0a      	ldr	r3, [pc, #40]	; (80082bc <clockIncreaseOneHourAndMinute+0x60>)
 8008292:	2202      	movs	r2, #2
 8008294:	701a      	strb	r2, [r3, #0]

		OneMinuteIncrease();
 8008296:	f000 ff93 	bl	80091c0 <OneMinuteIncrease>
 800829a:	e00b      	b.n	80082b4 <clockIncreaseOneHourAndMinute+0x58>
	}
	else if((y >= CLOCK_B_3_POZ_Y)&&(y <= (CLOCK_B_3_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Day
 800829c:	88bb      	ldrh	r3, [r7, #4]
 800829e:	2b9a      	cmp	r3, #154	; 0x9a
 80082a0:	d908      	bls.n	80082b4 <clockIncreaseOneHourAndMinute+0x58>
 80082a2:	88bb      	ldrh	r3, [r7, #4]
 80082a4:	2bb0      	cmp	r3, #176	; 0xb0
 80082a6:	d805      	bhi.n	80082b4 <clockIncreaseOneHourAndMinute+0x58>
	{
		EncoderState = ENCODER_CLOCK_DAY;
 80082a8:	4b04      	ldr	r3, [pc, #16]	; (80082bc <clockIncreaseOneHourAndMinute+0x60>)
 80082aa:	2203      	movs	r2, #3
 80082ac:	701a      	strb	r2, [r3, #0]

		OneDayIncrease();
 80082ae:	f000 ffdf 	bl	8009270 <OneDayIncrease>
	}
}
 80082b2:	e7ff      	b.n	80082b4 <clockIncreaseOneHourAndMinute+0x58>
 80082b4:	bf00      	nop
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	200002a1 	.word	0x200002a1

080082c0 <clockIncreaseSixHoursTenMinutes>:

void clockIncreaseSixHoursTenMinutes(uint16_t x, uint16_t y)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af02      	add	r7, sp, #8
 80082c6:	4603      	mov	r3, r0
 80082c8:	460a      	mov	r2, r1
 80082ca:	80fb      	strh	r3, [r7, #6]
 80082cc:	4613      	mov	r3, r2
 80082ce:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 80082d0:	88bb      	ldrh	r3, [r7, #4]
 80082d2:	2b4a      	cmp	r3, #74	; 0x4a
 80082d4:	d926      	bls.n	8008324 <clockIncreaseSixHoursTenMinutes+0x64>
 80082d6:	88bb      	ldrh	r3, [r7, #4]
 80082d8:	2b60      	cmp	r3, #96	; 0x60
 80082da:	d823      	bhi.n	8008324 <clockIncreaseSixHoursTenMinutes+0x64>
	{
		EncoderState = ENCODER_CLOCK_HOUR;
 80082dc:	4b31      	ldr	r3, [pc, #196]	; (80083a4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 80082de:	2201      	movs	r2, #1
 80082e0:	701a      	strb	r2, [r3, #0]

		if(Hours < 19)
 80082e2:	4b31      	ldr	r3, [pc, #196]	; (80083a8 <clockIncreaseSixHoursTenMinutes+0xe8>)
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	2b12      	cmp	r3, #18
 80082e8:	d806      	bhi.n	80082f8 <clockIncreaseSixHoursTenMinutes+0x38>
		{
			Hours = Hours + 6;
 80082ea:	4b2f      	ldr	r3, [pc, #188]	; (80083a8 <clockIncreaseSixHoursTenMinutes+0xe8>)
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	3306      	adds	r3, #6
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	4b2d      	ldr	r3, [pc, #180]	; (80083a8 <clockIncreaseSixHoursTenMinutes+0xe8>)
 80082f4:	701a      	strb	r2, [r3, #0]
 80082f6:	e002      	b.n	80082fe <clockIncreaseSixHoursTenMinutes+0x3e>
		}
		else
		{
			Hours = 1;
 80082f8:	4b2b      	ldr	r3, [pc, #172]	; (80083a8 <clockIncreaseSixHoursTenMinutes+0xe8>)
 80082fa:	2201      	movs	r2, #1
 80082fc:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Hours);
 80082fe:	4b2a      	ldr	r3, [pc, #168]	; (80083a8 <clockIncreaseSixHoursTenMinutes+0xe8>)
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	461a      	mov	r2, r3
 8008304:	4929      	ldr	r1, [pc, #164]	; (80083ac <clockIncreaseSixHoursTenMinutes+0xec>)
 8008306:	482a      	ldr	r0, [pc, #168]	; (80083b0 <clockIncreaseSixHoursTenMinutes+0xf0>)
 8008308:	f00a fcae 	bl	8012c68 <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800830c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	2301      	movs	r3, #1
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	2300      	movs	r3, #0
 8008318:	2246      	movs	r2, #70	; 0x46
 800831a:	219d      	movs	r1, #157	; 0x9d
 800831c:	4824      	ldr	r0, [pc, #144]	; (80083b0 <clockIncreaseSixHoursTenMinutes+0xf0>)
 800831e:	f7f9 fd3f 	bl	8001da0 <EF_PutString>
 8008322:	e038      	b.n	8008396 <clockIncreaseSixHoursTenMinutes+0xd6>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 8008324:	88bb      	ldrh	r3, [r7, #4]
 8008326:	2b72      	cmp	r3, #114	; 0x72
 8008328:	d935      	bls.n	8008396 <clockIncreaseSixHoursTenMinutes+0xd6>
 800832a:	88bb      	ldrh	r3, [r7, #4]
 800832c:	2b88      	cmp	r3, #136	; 0x88
 800832e:	d832      	bhi.n	8008396 <clockIncreaseSixHoursTenMinutes+0xd6>
	{
		EncoderState = ENCODER_CLOCK_MINUTE;
 8008330:	4b1c      	ldr	r3, [pc, #112]	; (80083a4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8008332:	2202      	movs	r2, #2
 8008334:	701a      	strb	r2, [r3, #0]

		if(Minutes < 49)
 8008336:	4b1f      	ldr	r3, [pc, #124]	; (80083b4 <clockIncreaseSixHoursTenMinutes+0xf4>)
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	2b30      	cmp	r3, #48	; 0x30
 800833c:	d806      	bhi.n	800834c <clockIncreaseSixHoursTenMinutes+0x8c>
		{
			Minutes = Minutes +10;
 800833e:	4b1d      	ldr	r3, [pc, #116]	; (80083b4 <clockIncreaseSixHoursTenMinutes+0xf4>)
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	330a      	adds	r3, #10
 8008344:	b2da      	uxtb	r2, r3
 8008346:	4b1b      	ldr	r3, [pc, #108]	; (80083b4 <clockIncreaseSixHoursTenMinutes+0xf4>)
 8008348:	701a      	strb	r2, [r3, #0]
 800834a:	e012      	b.n	8008372 <clockIncreaseSixHoursTenMinutes+0xb2>
		}
		else
		{
			Minutes = (Minutes + 10) % 60;
 800834c:	4b19      	ldr	r3, [pc, #100]	; (80083b4 <clockIncreaseSixHoursTenMinutes+0xf4>)
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	f103 020a 	add.w	r2, r3, #10
 8008354:	4b18      	ldr	r3, [pc, #96]	; (80083b8 <clockIncreaseSixHoursTenMinutes+0xf8>)
 8008356:	fb83 1302 	smull	r1, r3, r3, r2
 800835a:	4413      	add	r3, r2
 800835c:	1159      	asrs	r1, r3, #5
 800835e:	17d3      	asrs	r3, r2, #31
 8008360:	1ac9      	subs	r1, r1, r3
 8008362:	460b      	mov	r3, r1
 8008364:	011b      	lsls	r3, r3, #4
 8008366:	1a5b      	subs	r3, r3, r1
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	1ad1      	subs	r1, r2, r3
 800836c:	b2ca      	uxtb	r2, r1
 800836e:	4b11      	ldr	r3, [pc, #68]	; (80083b4 <clockIncreaseSixHoursTenMinutes+0xf4>)
 8008370:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Minutes);
 8008372:	4b10      	ldr	r3, [pc, #64]	; (80083b4 <clockIncreaseSixHoursTenMinutes+0xf4>)
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	490c      	ldr	r1, [pc, #48]	; (80083ac <clockIncreaseSixHoursTenMinutes+0xec>)
 800837a:	480d      	ldr	r0, [pc, #52]	; (80083b0 <clockIncreaseSixHoursTenMinutes+0xf0>)
 800837c:	f00a fc74 	bl	8012c68 <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008380:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008384:	9301      	str	r3, [sp, #4]
 8008386:	2301      	movs	r3, #1
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	2300      	movs	r3, #0
 800838c:	226e      	movs	r2, #110	; 0x6e
 800838e:	219c      	movs	r1, #156	; 0x9c
 8008390:	4807      	ldr	r0, [pc, #28]	; (80083b0 <clockIncreaseSixHoursTenMinutes+0xf0>)
 8008392:	f7f9 fd05 	bl	8001da0 <EF_PutString>

	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8008396:	4809      	ldr	r0, [pc, #36]	; (80083bc <clockIncreaseSixHoursTenMinutes+0xfc>)
 8008398:	f7f9 fae8 	bl	800196c <EF_SetFont>
}
 800839c:	bf00      	nop
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	200002a1 	.word	0x200002a1
 80083a8:	20000032 	.word	0x20000032
 80083ac:	08016f28 	.word	0x08016f28
 80083b0:	200002cc 	.word	0x200002cc
 80083b4:	20000033 	.word	0x20000033
 80083b8:	88888889 	.word	0x88888889
 80083bc:	0802a4cc 	.word	0x0802a4cc

080083c0 <changeSwitchStatusTouch>:

//
// Change status of Switch after touch them
//
void changeSwitchStatusTouch(uint8_t y)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	4603      	mov	r3, r0
 80083c8:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST SWITCH
	if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 80083ca:	79fb      	ldrb	r3, [r7, #7]
 80083cc:	2b40      	cmp	r3, #64	; 0x40
 80083ce:	d90e      	bls.n	80083ee <changeSwitchStatusTouch+0x2e>
 80083d0:	79fb      	ldrb	r3, [r7, #7]
 80083d2:	2b56      	cmp	r3, #86	; 0x56
 80083d4:	d80b      	bhi.n	80083ee <changeSwitchStatusTouch+0x2e>
	{
		if(SwitchesButtonState[0] >= 1) // if is ON
 80083d6:	4b24      	ldr	r3, [pc, #144]	; (8008468 <changeSwitchStatusTouch+0xa8>)
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d003      	beq.n	80083e6 <changeSwitchStatusTouch+0x26>
		{
			firstSwitchTurn(0);
 80083de:	2000      	movs	r0, #0
 80083e0:	f000 faee 	bl	80089c0 <firstSwitchTurn>
		if(SwitchesButtonState[0] >= 1) // if is ON
 80083e4:	e038      	b.n	8008458 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			firstSwitchTurn(1);
 80083e6:	2001      	movs	r0, #1
 80083e8:	f000 faea 	bl	80089c0 <firstSwitchTurn>
		if(SwitchesButtonState[0] >= 1) // if is ON
 80083ec:	e034      	b.n	8008458 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// SECOND SWITCH
	else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 80083ee:	79fb      	ldrb	r3, [r7, #7]
 80083f0:	2b5e      	cmp	r3, #94	; 0x5e
 80083f2:	d90e      	bls.n	8008412 <changeSwitchStatusTouch+0x52>
 80083f4:	79fb      	ldrb	r3, [r7, #7]
 80083f6:	2b74      	cmp	r3, #116	; 0x74
 80083f8:	d80b      	bhi.n	8008412 <changeSwitchStatusTouch+0x52>
	{
		if(SwitchesButtonState[1] >= 1) // if is ON
 80083fa:	4b1b      	ldr	r3, [pc, #108]	; (8008468 <changeSwitchStatusTouch+0xa8>)
 80083fc:	785b      	ldrb	r3, [r3, #1]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d003      	beq.n	800840a <changeSwitchStatusTouch+0x4a>
		{
			secondSwitchTurn(0);
 8008402:	2000      	movs	r0, #0
 8008404:	f000 fb5e 	bl	8008ac4 <secondSwitchTurn>
		if(SwitchesButtonState[1] >= 1) // if is ON
 8008408:	e026      	b.n	8008458 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			secondSwitchTurn(1);
 800840a:	2001      	movs	r0, #1
 800840c:	f000 fb5a 	bl	8008ac4 <secondSwitchTurn>
		if(SwitchesButtonState[1] >= 1) // if is ON
 8008410:	e022      	b.n	8008458 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// THIRD SWITCH
	else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 8008412:	79fb      	ldrb	r3, [r7, #7]
 8008414:	2b7c      	cmp	r3, #124	; 0x7c
 8008416:	d90e      	bls.n	8008436 <changeSwitchStatusTouch+0x76>
 8008418:	79fb      	ldrb	r3, [r7, #7]
 800841a:	2b92      	cmp	r3, #146	; 0x92
 800841c:	d80b      	bhi.n	8008436 <changeSwitchStatusTouch+0x76>
	{
		if(SwitchesButtonState[2] >= 1) // if is ON
 800841e:	4b12      	ldr	r3, [pc, #72]	; (8008468 <changeSwitchStatusTouch+0xa8>)
 8008420:	789b      	ldrb	r3, [r3, #2]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <changeSwitchStatusTouch+0x6e>
		{
			thirdSwitchTurn(0);
 8008426:	2000      	movs	r0, #0
 8008428:	f000 fbce 	bl	8008bc8 <thirdSwitchTurn>
		if(SwitchesButtonState[2] >= 1) // if is ON
 800842c:	e014      	b.n	8008458 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			thirdSwitchTurn(1);
 800842e:	2001      	movs	r0, #1
 8008430:	f000 fbca 	bl	8008bc8 <thirdSwitchTurn>
		if(SwitchesButtonState[2] >= 1) // if is ON
 8008434:	e010      	b.n	8008458 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// FOURTH SWITCH
	else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 8008436:	79fb      	ldrb	r3, [r7, #7]
 8008438:	2b9a      	cmp	r3, #154	; 0x9a
 800843a:	d90d      	bls.n	8008458 <changeSwitchStatusTouch+0x98>
 800843c:	79fb      	ldrb	r3, [r7, #7]
 800843e:	2bb0      	cmp	r3, #176	; 0xb0
 8008440:	d80a      	bhi.n	8008458 <changeSwitchStatusTouch+0x98>
	{
		if(SwitchesButtonState[3] >= 1) // if is ON
 8008442:	4b09      	ldr	r3, [pc, #36]	; (8008468 <changeSwitchStatusTouch+0xa8>)
 8008444:	78db      	ldrb	r3, [r3, #3]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <changeSwitchStatusTouch+0x92>
		{
			fourthSwitchTurn(0);
 800844a:	2000      	movs	r0, #0
 800844c:	f000 fc3e 	bl	8008ccc <fourthSwitchTurn>
 8008450:	e002      	b.n	8008458 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			fourthSwitchTurn(1);
 8008452:	2001      	movs	r0, #1
 8008454:	f000 fc3a 	bl	8008ccc <fourthSwitchTurn>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8008458:	4804      	ldr	r0, [pc, #16]	; (800846c <changeSwitchStatusTouch+0xac>)
 800845a:	f7f9 fa87 	bl	800196c <EF_SetFont>
}
 800845e:	bf00      	nop
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	200002b8 	.word	0x200002b8
 800846c:	0802a4cc 	.word	0x0802a4cc

08008470 <changeLightsStatusTouch>:

//
// Change status of Lights after touch them
//
void changeLightsStatusTouch(uint8_t y)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	4603      	mov	r3, r0
 8008478:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST LIGHT
	if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 800847a:	79fb      	ldrb	r3, [r7, #7]
 800847c:	2b40      	cmp	r3, #64	; 0x40
 800847e:	d90e      	bls.n	800849e <changeLightsStatusTouch+0x2e>
 8008480:	79fb      	ldrb	r3, [r7, #7]
 8008482:	2b56      	cmp	r3, #86	; 0x56
 8008484:	d80b      	bhi.n	800849e <changeLightsStatusTouch+0x2e>
	{
		if(LightsButtonState[0] >= 1) // if is ON
 8008486:	4b24      	ldr	r3, [pc, #144]	; (8008518 <changeLightsStatusTouch+0xa8>)
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d003      	beq.n	8008496 <changeLightsStatusTouch+0x26>
		{
			firstLightTurn(0);
 800848e:	2000      	movs	r0, #0
 8008490:	f000 fc9e 	bl	8008dd0 <firstLightTurn>
		if(LightsButtonState[0] >= 1) // if is ON
 8008494:	e038      	b.n	8008508 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			firstLightTurn(1);
 8008496:	2001      	movs	r0, #1
 8008498:	f000 fc9a 	bl	8008dd0 <firstLightTurn>
		if(LightsButtonState[0] >= 1) // if is ON
 800849c:	e034      	b.n	8008508 <changeLightsStatusTouch+0x98>
		}
	}
	//
	// SECOND LIGHT
	else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 800849e:	79fb      	ldrb	r3, [r7, #7]
 80084a0:	2b5e      	cmp	r3, #94	; 0x5e
 80084a2:	d90e      	bls.n	80084c2 <changeLightsStatusTouch+0x52>
 80084a4:	79fb      	ldrb	r3, [r7, #7]
 80084a6:	2b74      	cmp	r3, #116	; 0x74
 80084a8:	d80b      	bhi.n	80084c2 <changeLightsStatusTouch+0x52>
	{
		if(LightsButtonState[1] >= 1) // if is ON
 80084aa:	4b1b      	ldr	r3, [pc, #108]	; (8008518 <changeLightsStatusTouch+0xa8>)
 80084ac:	785b      	ldrb	r3, [r3, #1]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d003      	beq.n	80084ba <changeLightsStatusTouch+0x4a>
		{
			secondLightTurn(0);
 80084b2:	2000      	movs	r0, #0
 80084b4:	f000 fd0a 	bl	8008ecc <secondLightTurn>
		if(LightsButtonState[1] >= 1) // if is ON
 80084b8:	e026      	b.n	8008508 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			secondLightTurn(1);
 80084ba:	2001      	movs	r0, #1
 80084bc:	f000 fd06 	bl	8008ecc <secondLightTurn>
		if(LightsButtonState[1] >= 1) // if is ON
 80084c0:	e022      	b.n	8008508 <changeLightsStatusTouch+0x98>
		}
	}

	//
	// THIRD LIGHT
	else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 80084c2:	79fb      	ldrb	r3, [r7, #7]
 80084c4:	2b7c      	cmp	r3, #124	; 0x7c
 80084c6:	d90e      	bls.n	80084e6 <changeLightsStatusTouch+0x76>
 80084c8:	79fb      	ldrb	r3, [r7, #7]
 80084ca:	2b92      	cmp	r3, #146	; 0x92
 80084cc:	d80b      	bhi.n	80084e6 <changeLightsStatusTouch+0x76>
	{
		if(LightsButtonState[2] >= 1) // if is ON
 80084ce:	4b12      	ldr	r3, [pc, #72]	; (8008518 <changeLightsStatusTouch+0xa8>)
 80084d0:	789b      	ldrb	r3, [r3, #2]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d003      	beq.n	80084de <changeLightsStatusTouch+0x6e>
		{
			thirdLightTurn(0);
 80084d6:	2000      	movs	r0, #0
 80084d8:	f000 fd76 	bl	8008fc8 <thirdLightTurn>
		if(LightsButtonState[2] >= 1) // if is ON
 80084dc:	e014      	b.n	8008508 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			thirdLightTurn(1);
 80084de:	2001      	movs	r0, #1
 80084e0:	f000 fd72 	bl	8008fc8 <thirdLightTurn>
		if(LightsButtonState[2] >= 1) // if is ON
 80084e4:	e010      	b.n	8008508 <changeLightsStatusTouch+0x98>
		}
	}

	//
	// FOURTH LIGHT
	else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 80084e6:	79fb      	ldrb	r3, [r7, #7]
 80084e8:	2b9a      	cmp	r3, #154	; 0x9a
 80084ea:	d90d      	bls.n	8008508 <changeLightsStatusTouch+0x98>
 80084ec:	79fb      	ldrb	r3, [r7, #7]
 80084ee:	2bb0      	cmp	r3, #176	; 0xb0
 80084f0:	d80a      	bhi.n	8008508 <changeLightsStatusTouch+0x98>
	{
		if(LightsButtonState[3] >= 1) // if is ON
 80084f2:	4b09      	ldr	r3, [pc, #36]	; (8008518 <changeLightsStatusTouch+0xa8>)
 80084f4:	78db      	ldrb	r3, [r3, #3]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d003      	beq.n	8008502 <changeLightsStatusTouch+0x92>
		{
			fourthLightTurn(0);
 80084fa:	2000      	movs	r0, #0
 80084fc:	f000 fde2 	bl	80090c4 <fourthLightTurn>
 8008500:	e002      	b.n	8008508 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			fourthLightTurn(1);
 8008502:	2001      	movs	r0, #1
 8008504:	f000 fdde 	bl	80090c4 <fourthLightTurn>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8008508:	4804      	ldr	r0, [pc, #16]	; (800851c <changeLightsStatusTouch+0xac>)
 800850a:	f7f9 fa2f 	bl	800196c <EF_SetFont>
}
 800850e:	bf00      	nop
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	200002bc 	.word	0x200002bc
 800851c:	0802a4cc 	.word	0x0802a4cc

08008520 <predefinedActivityTouchAction>:

//
// Handling touch button to ON/OFF predefined activity
//
void predefinedActivityTouchAction(uint8_t y)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af02      	add	r7, sp, #8
 8008526:	4603      	mov	r3, r0
 8008528:	71fb      	strb	r3, [r7, #7]
	if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 800852a:	79fb      	ldrb	r3, [r7, #7]
 800852c:	2b3b      	cmp	r3, #59	; 0x3b
 800852e:	d966      	bls.n	80085fe <predefinedActivityTouchAction+0xde>
 8008530:	79fb      	ldrb	r3, [r7, #7]
 8008532:	2b64      	cmp	r3, #100	; 0x64
 8008534:	d863      	bhi.n	80085fe <predefinedActivityTouchAction+0xde>
	{
		if(ActivityButtonState[0] >= 1) // if is ON
 8008536:	4b69      	ldr	r3, [pc, #420]	; (80086dc <predefinedActivityTouchAction+0x1bc>)
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d02f      	beq.n	800859e <predefinedActivityTouchAction+0x7e>
		{
			ActivityButtonState[0] = 0;
 800853e:	4b67      	ldr	r3, [pc, #412]	; (80086dc <predefinedActivityTouchAction+0x1bc>)
 8008540:	2200      	movs	r2, #0
 8008542:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008544:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008548:	9301      	str	r3, [sp, #4]
 800854a:	230a      	movs	r3, #10
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	2328      	movs	r3, #40	; 0x28
 8008550:	2278      	movs	r2, #120	; 0x78
 8008552:	213c      	movs	r1, #60	; 0x3c
 8008554:	2064      	movs	r0, #100	; 0x64
 8008556:	f7f9 f9b8 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 800855a:	4961      	ldr	r1, [pc, #388]	; (80086e0 <predefinedActivityTouchAction+0x1c0>)
 800855c:	4861      	ldr	r0, [pc, #388]	; (80086e4 <predefinedActivityTouchAction+0x1c4>)
 800855e:	f00a fb83 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008562:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008566:	9301      	str	r3, [sp, #4]
 8008568:	2300      	movs	r3, #0
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	2300      	movs	r3, #0
 800856e:	223e      	movs	r2, #62	; 0x3e
 8008570:	2177      	movs	r1, #119	; 0x77
 8008572:	485c      	ldr	r0, [pc, #368]	; (80086e4 <predefinedActivityTouchAction+0x1c4>)
 8008574:	f7f9 fc14 	bl	8001da0 <EF_PutString>
			sprintf((char*)Msg, "OFF");
 8008578:	495b      	ldr	r1, [pc, #364]	; (80086e8 <predefinedActivityTouchAction+0x1c8>)
 800857a:	485a      	ldr	r0, [pc, #360]	; (80086e4 <predefinedActivityTouchAction+0x1c4>)
 800857c:	f00a fb74 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008580:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008584:	9301      	str	r3, [sp, #4]
 8008586:	2300      	movs	r3, #0
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	2300      	movs	r3, #0
 800858c:	2250      	movs	r2, #80	; 0x50
 800858e:	2193      	movs	r1, #147	; 0x93
 8008590:	4854      	ldr	r0, [pc, #336]	; (80086e4 <predefinedActivityTouchAction+0x1c4>)
 8008592:	f7f9 fc05 	bl	8001da0 <EF_PutString>
			predefinedActivityKarmienie(0); // Turn Activity OFF
 8008596:	2000      	movs	r0, #0
 8008598:	f7fc fdd2 	bl	8005140 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 800859c:	e099      	b.n	80086d2 <predefinedActivityTouchAction+0x1b2>
		}
		else // if is OFF
		{
			ActivityButtonState[0] = 1;
 800859e:	4b4f      	ldr	r3, [pc, #316]	; (80086dc <predefinedActivityTouchAction+0x1bc>)
 80085a0:	2201      	movs	r2, #1
 80085a2:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80085a4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80085a8:	9301      	str	r3, [sp, #4]
 80085aa:	230a      	movs	r3, #10
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	2328      	movs	r3, #40	; 0x28
 80085b0:	2278      	movs	r2, #120	; 0x78
 80085b2:	213c      	movs	r1, #60	; 0x3c
 80085b4:	2064      	movs	r0, #100	; 0x64
 80085b6:	f7f9 f988 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 80085ba:	4949      	ldr	r1, [pc, #292]	; (80086e0 <predefinedActivityTouchAction+0x1c0>)
 80085bc:	4849      	ldr	r0, [pc, #292]	; (80086e4 <predefinedActivityTouchAction+0x1c4>)
 80085be:	f00a fb53 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80085c2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80085c6:	9301      	str	r3, [sp, #4]
 80085c8:	2300      	movs	r3, #0
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	2300      	movs	r3, #0
 80085ce:	223e      	movs	r2, #62	; 0x3e
 80085d0:	2177      	movs	r1, #119	; 0x77
 80085d2:	4844      	ldr	r0, [pc, #272]	; (80086e4 <predefinedActivityTouchAction+0x1c4>)
 80085d4:	f7f9 fbe4 	bl	8001da0 <EF_PutString>
			sprintf((char*)Msg, "ON");
 80085d8:	4944      	ldr	r1, [pc, #272]	; (80086ec <predefinedActivityTouchAction+0x1cc>)
 80085da:	4842      	ldr	r0, [pc, #264]	; (80086e4 <predefinedActivityTouchAction+0x1c4>)
 80085dc:	f00a fb44 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80085e0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80085e4:	9301      	str	r3, [sp, #4]
 80085e6:	2300      	movs	r3, #0
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	2300      	movs	r3, #0
 80085ec:	2250      	movs	r2, #80	; 0x50
 80085ee:	2193      	movs	r1, #147	; 0x93
 80085f0:	483c      	ldr	r0, [pc, #240]	; (80086e4 <predefinedActivityTouchAction+0x1c4>)
 80085f2:	f7f9 fbd5 	bl	8001da0 <EF_PutString>
			predefinedActivityKarmienie(1);
 80085f6:	2001      	movs	r0, #1
 80085f8:	f7fc fda2 	bl	8005140 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 80085fc:	e069      	b.n	80086d2 <predefinedActivityTouchAction+0x1b2>
		}

	}

	else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 80085fe:	79fb      	ldrb	r3, [r7, #7]
 8008600:	2b77      	cmp	r3, #119	; 0x77
 8008602:	d966      	bls.n	80086d2 <predefinedActivityTouchAction+0x1b2>
 8008604:	79fb      	ldrb	r3, [r7, #7]
 8008606:	2ba0      	cmp	r3, #160	; 0xa0
 8008608:	d863      	bhi.n	80086d2 <predefinedActivityTouchAction+0x1b2>
	{
		if(ActivityButtonState[1] >= 1) // if is ON
 800860a:	4b34      	ldr	r3, [pc, #208]	; (80086dc <predefinedActivityTouchAction+0x1bc>)
 800860c:	785b      	ldrb	r3, [r3, #1]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d02f      	beq.n	8008672 <predefinedActivityTouchAction+0x152>
		{
			ActivityButtonState[1] = 0;
 8008612:	4b32      	ldr	r3, [pc, #200]	; (80086dc <predefinedActivityTouchAction+0x1bc>)
 8008614:	2200      	movs	r2, #0
 8008616:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008618:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800861c:	9301      	str	r3, [sp, #4]
 800861e:	230a      	movs	r3, #10
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	2328      	movs	r3, #40	; 0x28
 8008624:	2278      	movs	r2, #120	; 0x78
 8008626:	2178      	movs	r1, #120	; 0x78
 8008628:	2064      	movs	r0, #100	; 0x64
 800862a:	f7f9 f94e 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 800862e:	4930      	ldr	r1, [pc, #192]	; (80086f0 <predefinedActivityTouchAction+0x1d0>)
 8008630:	482c      	ldr	r0, [pc, #176]	; (80086e4 <predefinedActivityTouchAction+0x1c4>)
 8008632:	f00a fb19 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008636:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800863a:	9301      	str	r3, [sp, #4]
 800863c:	2300      	movs	r3, #0
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	2300      	movs	r3, #0
 8008642:	227a      	movs	r2, #122	; 0x7a
 8008644:	2169      	movs	r1, #105	; 0x69
 8008646:	4827      	ldr	r0, [pc, #156]	; (80086e4 <predefinedActivityTouchAction+0x1c4>)
 8008648:	f7f9 fbaa 	bl	8001da0 <EF_PutString>
			sprintf((char*)Msg, "OFF");
 800864c:	4926      	ldr	r1, [pc, #152]	; (80086e8 <predefinedActivityTouchAction+0x1c8>)
 800864e:	4825      	ldr	r0, [pc, #148]	; (80086e4 <predefinedActivityTouchAction+0x1c4>)
 8008650:	f00a fb0a 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008654:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008658:	9301      	str	r3, [sp, #4]
 800865a:	2300      	movs	r3, #0
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	2300      	movs	r3, #0
 8008660:	228c      	movs	r2, #140	; 0x8c
 8008662:	2193      	movs	r1, #147	; 0x93
 8008664:	481f      	ldr	r0, [pc, #124]	; (80086e4 <predefinedActivityTouchAction+0x1c4>)
 8008666:	f7f9 fb9b 	bl	8001da0 <EF_PutString>
			predefinedActivityCzyszczenie(0);
 800866a:	2000      	movs	r0, #0
 800866c:	f7fc fd4e 	bl	800510c <predefinedActivityCzyszczenie>
			sprintf((char*)Msg, "ON");
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
			predefinedActivityCzyszczenie(1);
		}
	}
}
 8008670:	e02f      	b.n	80086d2 <predefinedActivityTouchAction+0x1b2>
			ActivityButtonState[1] = 1;
 8008672:	4b1a      	ldr	r3, [pc, #104]	; (80086dc <predefinedActivityTouchAction+0x1bc>)
 8008674:	2201      	movs	r2, #1
 8008676:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008678:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800867c:	9301      	str	r3, [sp, #4]
 800867e:	230a      	movs	r3, #10
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	2328      	movs	r3, #40	; 0x28
 8008684:	2278      	movs	r2, #120	; 0x78
 8008686:	2178      	movs	r1, #120	; 0x78
 8008688:	2064      	movs	r0, #100	; 0x64
 800868a:	f7f9 f91e 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 800868e:	4918      	ldr	r1, [pc, #96]	; (80086f0 <predefinedActivityTouchAction+0x1d0>)
 8008690:	4814      	ldr	r0, [pc, #80]	; (80086e4 <predefinedActivityTouchAction+0x1c4>)
 8008692:	f00a fae9 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008696:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800869a:	9301      	str	r3, [sp, #4]
 800869c:	2300      	movs	r3, #0
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	2300      	movs	r3, #0
 80086a2:	227a      	movs	r2, #122	; 0x7a
 80086a4:	2169      	movs	r1, #105	; 0x69
 80086a6:	480f      	ldr	r0, [pc, #60]	; (80086e4 <predefinedActivityTouchAction+0x1c4>)
 80086a8:	f7f9 fb7a 	bl	8001da0 <EF_PutString>
			sprintf((char*)Msg, "ON");
 80086ac:	490f      	ldr	r1, [pc, #60]	; (80086ec <predefinedActivityTouchAction+0x1cc>)
 80086ae:	480d      	ldr	r0, [pc, #52]	; (80086e4 <predefinedActivityTouchAction+0x1c4>)
 80086b0:	f00a fada 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80086b4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	2300      	movs	r3, #0
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	2300      	movs	r3, #0
 80086c0:	228c      	movs	r2, #140	; 0x8c
 80086c2:	2193      	movs	r1, #147	; 0x93
 80086c4:	4807      	ldr	r0, [pc, #28]	; (80086e4 <predefinedActivityTouchAction+0x1c4>)
 80086c6:	f7f9 fb6b 	bl	8001da0 <EF_PutString>
			predefinedActivityCzyszczenie(1);
 80086ca:	2001      	movs	r0, #1
 80086cc:	f7fc fd1e 	bl	800510c <predefinedActivityCzyszczenie>
}
 80086d0:	e7ff      	b.n	80086d2 <predefinedActivityTouchAction+0x1b2>
 80086d2:	bf00      	nop
 80086d4:	3708      	adds	r7, #8
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	20000250 	.word	0x20000250
 80086e0:	08016f30 	.word	0x08016f30
 80086e4:	200002cc 	.word	0x200002cc
 80086e8:	08016f3c 	.word	0x08016f3c
 80086ec:	08016f40 	.word	0x08016f40
 80086f0:	08016f44 	.word	0x08016f44

080086f4 <WSONEincreaseNumberOfLedOnTFT>:
//
// Handling Touch to increase number of WS LED
//

void WSONEincreaseNumberOfLedOnTFT(void)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af02      	add	r7, sp, #8
	if(NrOfLeds < 98)
 80086fa:	4b17      	ldr	r3, [pc, #92]	; (8008758 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	2b61      	cmp	r3, #97	; 0x61
 8008700:	d806      	bhi.n	8008710 <WSONEincreaseNumberOfLedOnTFT+0x1c>
			{
				NrOfLeds++;
 8008702:	4b15      	ldr	r3, [pc, #84]	; (8008758 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	3301      	adds	r3, #1
 8008708:	b2da      	uxtb	r2, r3
 800870a:	4b13      	ldr	r3, [pc, #76]	; (8008758 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 800870c:	701a      	strb	r2, [r3, #0]
 800870e:	e002      	b.n	8008716 <WSONEincreaseNumberOfLedOnTFT+0x22>
			}
			else
			{
				NrOfLeds = 1;
 8008710:	4b11      	ldr	r3, [pc, #68]	; (8008758 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008712:	2201      	movs	r2, #1
 8008714:	701a      	strb	r2, [r3, #0]
			}
			if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8008716:	4b10      	ldr	r3, [pc, #64]	; (8008758 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	2b09      	cmp	r3, #9
 800871c:	d807      	bhi.n	800872e <WSONEincreaseNumberOfLedOnTFT+0x3a>
 800871e:	4b0e      	ldr	r3, [pc, #56]	; (8008758 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	461a      	mov	r2, r3
 8008724:	490d      	ldr	r1, [pc, #52]	; (800875c <WSONEincreaseNumberOfLedOnTFT+0x68>)
 8008726:	480e      	ldr	r0, [pc, #56]	; (8008760 <WSONEincreaseNumberOfLedOnTFT+0x6c>)
 8008728:	f00a fa9e 	bl	8012c68 <siprintf>
 800872c:	e006      	b.n	800873c <WSONEincreaseNumberOfLedOnTFT+0x48>
			else sprintf((char*)Msg, " %d", NrOfLeds);
 800872e:	4b0a      	ldr	r3, [pc, #40]	; (8008758 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	461a      	mov	r2, r3
 8008734:	490b      	ldr	r1, [pc, #44]	; (8008764 <WSONEincreaseNumberOfLedOnTFT+0x70>)
 8008736:	480a      	ldr	r0, [pc, #40]	; (8008760 <WSONEincreaseNumberOfLedOnTFT+0x6c>)
 8008738:	f00a fa96 	bl	8012c68 <siprintf>
			EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800873c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008740:	9301      	str	r3, [sp, #4]
 8008742:	2301      	movs	r3, #1
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	2300      	movs	r3, #0
 8008748:	223c      	movs	r2, #60	; 0x3c
 800874a:	21ac      	movs	r1, #172	; 0xac
 800874c:	4804      	ldr	r0, [pc, #16]	; (8008760 <WSONEincreaseNumberOfLedOnTFT+0x6c>)
 800874e:	f7f9 fb27 	bl	8001da0 <EF_PutString>
}
 8008752:	bf00      	nop
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	20000034 	.word	0x20000034
 800875c:	08016f50 	.word	0x08016f50
 8008760:	200002cc 	.word	0x200002cc
 8008764:	08016f58 	.word	0x08016f58

08008768 <WSONEdecreaseNumberOfLedOnTFT>:

void WSONEdecreaseNumberOfLedOnTFT(void)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af02      	add	r7, sp, #8
	if(NrOfLeds > 0)
 800876e:	4b17      	ldr	r3, [pc, #92]	; (80087cc <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d006      	beq.n	8008784 <WSONEdecreaseNumberOfLedOnTFT+0x1c>
			{
				NrOfLeds--;
 8008776:	4b15      	ldr	r3, [pc, #84]	; (80087cc <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	3b01      	subs	r3, #1
 800877c:	b2da      	uxtb	r2, r3
 800877e:	4b13      	ldr	r3, [pc, #76]	; (80087cc <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008780:	701a      	strb	r2, [r3, #0]
 8008782:	e002      	b.n	800878a <WSONEdecreaseNumberOfLedOnTFT+0x22>
			}
			else
			{
				NrOfLeds = 99;
 8008784:	4b11      	ldr	r3, [pc, #68]	; (80087cc <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008786:	2263      	movs	r2, #99	; 0x63
 8008788:	701a      	strb	r2, [r3, #0]
			}
			if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 800878a:	4b10      	ldr	r3, [pc, #64]	; (80087cc <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	2b09      	cmp	r3, #9
 8008790:	d807      	bhi.n	80087a2 <WSONEdecreaseNumberOfLedOnTFT+0x3a>
 8008792:	4b0e      	ldr	r3, [pc, #56]	; (80087cc <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	461a      	mov	r2, r3
 8008798:	490d      	ldr	r1, [pc, #52]	; (80087d0 <WSONEdecreaseNumberOfLedOnTFT+0x68>)
 800879a:	480e      	ldr	r0, [pc, #56]	; (80087d4 <WSONEdecreaseNumberOfLedOnTFT+0x6c>)
 800879c:	f00a fa64 	bl	8012c68 <siprintf>
 80087a0:	e006      	b.n	80087b0 <WSONEdecreaseNumberOfLedOnTFT+0x48>
			else sprintf((char*)Msg, " %d", NrOfLeds);
 80087a2:	4b0a      	ldr	r3, [pc, #40]	; (80087cc <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	461a      	mov	r2, r3
 80087a8:	490b      	ldr	r1, [pc, #44]	; (80087d8 <WSONEdecreaseNumberOfLedOnTFT+0x70>)
 80087aa:	480a      	ldr	r0, [pc, #40]	; (80087d4 <WSONEdecreaseNumberOfLedOnTFT+0x6c>)
 80087ac:	f00a fa5c 	bl	8012c68 <siprintf>
			EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80087b0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80087b4:	9301      	str	r3, [sp, #4]
 80087b6:	2301      	movs	r3, #1
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	2300      	movs	r3, #0
 80087bc:	223c      	movs	r2, #60	; 0x3c
 80087be:	21ac      	movs	r1, #172	; 0xac
 80087c0:	4804      	ldr	r0, [pc, #16]	; (80087d4 <WSONEdecreaseNumberOfLedOnTFT+0x6c>)
 80087c2:	f7f9 faed 	bl	8001da0 <EF_PutString>
}
 80087c6:	bf00      	nop
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	20000034 	.word	0x20000034
 80087d0:	08016f50 	.word	0x08016f50
 80087d4:	200002cc 	.word	0x200002cc
 80087d8:	08016f58 	.word	0x08016f58

080087dc <increaseNumberOfWSLedOnTFT>:

void increaseNumberOfWSLedOnTFT(uint8_t x, uint8_t y)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af02      	add	r7, sp, #8
 80087e2:	4603      	mov	r3, r0
 80087e4:	460a      	mov	r2, r1
 80087e6:	71fb      	strb	r3, [r7, #7]
 80087e8:	4613      	mov	r3, r2
 80087ea:	71bb      	strb	r3, [r7, #6]
	if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 80087ec:	79fb      	ldrb	r3, [r7, #7]
 80087ee:	2bd8      	cmp	r3, #216	; 0xd8
 80087f0:	d905      	bls.n	80087fe <increaseNumberOfWSLedOnTFT+0x22>
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	2bf7      	cmp	r3, #247	; 0xf7
 80087f6:	d802      	bhi.n	80087fe <increaseNumberOfWSLedOnTFT+0x22>
	{
		WSONEincreaseNumberOfLedOnTFT();
 80087f8:	f7ff ff7c 	bl	80086f4 <WSONEincreaseNumberOfLedOnTFT>
		sprintf((char*)Msg, "OK");
		EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+1), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		// Write chosen number of LEDs to EEPROM memory
		eeprom_write(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds));
	}
}
 80087fc:	e03f      	b.n	800887e <increaseNumberOfWSLedOnTFT+0xa2>
	else if((x >= WS_LED_BUTTON_2_X)&&(x <= (WS_LED_BUTTON_2_X + WS_LED_BUTTON_W))) // Add +10 LED
 80087fe:	79fb      	ldrb	r3, [r7, #7]
 8008800:	2bfb      	cmp	r3, #251	; 0xfb
 8008802:	d93c      	bls.n	800887e <increaseNumberOfWSLedOnTFT+0xa2>
		if(NrOfLeds < 90)
 8008804:	4b20      	ldr	r3, [pc, #128]	; (8008888 <increaseNumberOfWSLedOnTFT+0xac>)
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	2b59      	cmp	r3, #89	; 0x59
 800880a:	d806      	bhi.n	800881a <increaseNumberOfWSLedOnTFT+0x3e>
			NrOfLeds = NrOfLeds + 10;
 800880c:	4b1e      	ldr	r3, [pc, #120]	; (8008888 <increaseNumberOfWSLedOnTFT+0xac>)
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	330a      	adds	r3, #10
 8008812:	b2da      	uxtb	r2, r3
 8008814:	4b1c      	ldr	r3, [pc, #112]	; (8008888 <increaseNumberOfWSLedOnTFT+0xac>)
 8008816:	701a      	strb	r2, [r3, #0]
 8008818:	e013      	b.n	8008842 <increaseNumberOfWSLedOnTFT+0x66>
			NrOfLeds = (NrOfLeds + 10) % 99;
 800881a:	4b1b      	ldr	r3, [pc, #108]	; (8008888 <increaseNumberOfWSLedOnTFT+0xac>)
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	f103 020a 	add.w	r2, r3, #10
 8008822:	4b1a      	ldr	r3, [pc, #104]	; (800888c <increaseNumberOfWSLedOnTFT+0xb0>)
 8008824:	fb83 1302 	smull	r1, r3, r3, r2
 8008828:	4413      	add	r3, r2
 800882a:	1199      	asrs	r1, r3, #6
 800882c:	17d3      	asrs	r3, r2, #31
 800882e:	1ac9      	subs	r1, r1, r3
 8008830:	460b      	mov	r3, r1
 8008832:	005b      	lsls	r3, r3, #1
 8008834:	440b      	add	r3, r1
 8008836:	0159      	lsls	r1, r3, #5
 8008838:	440b      	add	r3, r1
 800883a:	1ad1      	subs	r1, r2, r3
 800883c:	b2ca      	uxtb	r2, r1
 800883e:	4b12      	ldr	r3, [pc, #72]	; (8008888 <increaseNumberOfWSLedOnTFT+0xac>)
 8008840:	701a      	strb	r2, [r3, #0]
	if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8008842:	4b11      	ldr	r3, [pc, #68]	; (8008888 <increaseNumberOfWSLedOnTFT+0xac>)
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	2b09      	cmp	r3, #9
 8008848:	d807      	bhi.n	800885a <increaseNumberOfWSLedOnTFT+0x7e>
 800884a:	4b0f      	ldr	r3, [pc, #60]	; (8008888 <increaseNumberOfWSLedOnTFT+0xac>)
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	461a      	mov	r2, r3
 8008850:	490f      	ldr	r1, [pc, #60]	; (8008890 <increaseNumberOfWSLedOnTFT+0xb4>)
 8008852:	4810      	ldr	r0, [pc, #64]	; (8008894 <increaseNumberOfWSLedOnTFT+0xb8>)
 8008854:	f00a fa08 	bl	8012c68 <siprintf>
 8008858:	e006      	b.n	8008868 <increaseNumberOfWSLedOnTFT+0x8c>
	else sprintf((char*)Msg, " %d", NrOfLeds);
 800885a:	4b0b      	ldr	r3, [pc, #44]	; (8008888 <increaseNumberOfWSLedOnTFT+0xac>)
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	490d      	ldr	r1, [pc, #52]	; (8008898 <increaseNumberOfWSLedOnTFT+0xbc>)
 8008862:	480c      	ldr	r0, [pc, #48]	; (8008894 <increaseNumberOfWSLedOnTFT+0xb8>)
 8008864:	f00a fa00 	bl	8012c68 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008868:	f24c 6318 	movw	r3, #50712	; 0xc618
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	2301      	movs	r3, #1
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	2300      	movs	r3, #0
 8008874:	223c      	movs	r2, #60	; 0x3c
 8008876:	21ac      	movs	r1, #172	; 0xac
 8008878:	4806      	ldr	r0, [pc, #24]	; (8008894 <increaseNumberOfWSLedOnTFT+0xb8>)
 800887a:	f7f9 fa91 	bl	8001da0 <EF_PutString>
}
 800887e:	bf00      	nop
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	20000034 	.word	0x20000034
 800888c:	a57eb503 	.word	0xa57eb503
 8008890:	08016f50 	.word	0x08016f50
 8008894:	200002cc 	.word	0x200002cc
 8008898:	08016f58 	.word	0x08016f58

0800889c <changeTypeOfWSLights>:

void changeTypeOfWSLights(uint8_t x, uint8_t y)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	4603      	mov	r3, r0
 80088a4:	460a      	mov	r2, r1
 80088a6:	71fb      	strb	r3, [r7, #7]
 80088a8:	4613      	mov	r3, r2
 80088aa:	71bb      	strb	r3, [r7, #6]
	if((y >= WS_B_2_POZ_Y)&&(y <= (WS_B_2_POZ_Y + WS_LED_BUTTON_H)))
 80088ac:	79bb      	ldrb	r3, [r7, #6]
 80088ae:	2b5e      	cmp	r3, #94	; 0x5e
 80088b0:	d91e      	bls.n	80088f0 <changeTypeOfWSLights+0x54>
 80088b2:	79bb      	ldrb	r3, [r7, #6]
 80088b4:	2b74      	cmp	r3, #116	; 0x74
 80088b6:	d81b      	bhi.n	80088f0 <changeTypeOfWSLights+0x54>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80088b8:	79fb      	ldrb	r3, [r7, #7]
 80088ba:	2b95      	cmp	r3, #149	; 0x95
 80088bc:	d906      	bls.n	80088cc <changeTypeOfWSLights+0x30>
 80088be:	79fb      	ldrb	r3, [r7, #7]
 80088c0:	2bbe      	cmp	r3, #190	; 0xbe
 80088c2:	d803      	bhi.n	80088cc <changeTypeOfWSLights+0x30>
		{
			SendComand(UCMD_WS_LED_WHITE_MAX);
 80088c4:	201d      	movs	r0, #29
 80088c6:	f001 f9ff 	bl	8009cc8 <SendComand>
 80088ca:	e010      	b.n	80088ee <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 80088cc:	79fb      	ldrb	r3, [r7, #7]
 80088ce:	2bc9      	cmp	r3, #201	; 0xc9
 80088d0:	d906      	bls.n	80088e0 <changeTypeOfWSLights+0x44>
 80088d2:	79fb      	ldrb	r3, [r7, #7]
 80088d4:	2bf2      	cmp	r3, #242	; 0xf2
 80088d6:	d803      	bhi.n	80088e0 <changeTypeOfWSLights+0x44>
		{
			SendComand(UCMD_WS_LED_WHITE_MID);
 80088d8:	201e      	movs	r0, #30
 80088da:	f001 f9f5 	bl	8009cc8 <SendComand>
 80088de:	e006      	b.n	80088ee <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 80088e0:	79fb      	ldrb	r3, [r7, #7]
 80088e2:	2bfd      	cmp	r3, #253	; 0xfd
 80088e4:	d962      	bls.n	80089ac <changeTypeOfWSLights+0x110>
		{
			SendComand(UCMD_WS_LED_WHITE_MIN);
 80088e6:	201f      	movs	r0, #31
 80088e8:	f001 f9ee 	bl	8009cc8 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80088ec:	e05e      	b.n	80089ac <changeTypeOfWSLights+0x110>
 80088ee:	e05d      	b.n	80089ac <changeTypeOfWSLights+0x110>
	}

	//
	// Check if it is third line button to change LEDs to BLUE
	//
	else if((y >= WS_B_3_POZ_Y)&&(y <= (WS_B_3_POZ_Y + WS_LED_BUTTON_H)))
 80088f0:	79bb      	ldrb	r3, [r7, #6]
 80088f2:	2b7c      	cmp	r3, #124	; 0x7c
 80088f4:	d91e      	bls.n	8008934 <changeTypeOfWSLights+0x98>
 80088f6:	79bb      	ldrb	r3, [r7, #6]
 80088f8:	2b92      	cmp	r3, #146	; 0x92
 80088fa:	d81b      	bhi.n	8008934 <changeTypeOfWSLights+0x98>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80088fc:	79fb      	ldrb	r3, [r7, #7]
 80088fe:	2b95      	cmp	r3, #149	; 0x95
 8008900:	d906      	bls.n	8008910 <changeTypeOfWSLights+0x74>
 8008902:	79fb      	ldrb	r3, [r7, #7]
 8008904:	2bbe      	cmp	r3, #190	; 0xbe
 8008906:	d803      	bhi.n	8008910 <changeTypeOfWSLights+0x74>
		{
			SendComand(UCMD_WS_LED_BLUE_MAX);
 8008908:	2020      	movs	r0, #32
 800890a:	f001 f9dd 	bl	8009cc8 <SendComand>
 800890e:	e010      	b.n	8008932 <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8008910:	79fb      	ldrb	r3, [r7, #7]
 8008912:	2bc9      	cmp	r3, #201	; 0xc9
 8008914:	d906      	bls.n	8008924 <changeTypeOfWSLights+0x88>
 8008916:	79fb      	ldrb	r3, [r7, #7]
 8008918:	2bf2      	cmp	r3, #242	; 0xf2
 800891a:	d803      	bhi.n	8008924 <changeTypeOfWSLights+0x88>
		{
			SendComand(UCMD_WS_LED_BLUE_MID);
 800891c:	2021      	movs	r0, #33	; 0x21
 800891e:	f001 f9d3 	bl	8009cc8 <SendComand>
 8008922:	e006      	b.n	8008932 <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 8008924:	79fb      	ldrb	r3, [r7, #7]
 8008926:	2bfd      	cmp	r3, #253	; 0xfd
 8008928:	d942      	bls.n	80089b0 <changeTypeOfWSLights+0x114>
		{
			SendComand(UCMD_WS_LED_BLUE_MIN);
 800892a:	2022      	movs	r0, #34	; 0x22
 800892c:	f001 f9cc 	bl	8009cc8 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008930:	e03e      	b.n	80089b0 <changeTypeOfWSLights+0x114>
 8008932:	e03d      	b.n	80089b0 <changeTypeOfWSLights+0x114>
	}

	//
	// Check if it is fourth line button to change LEDs to Predefined
	//
	else if((y >= WS_B_4_POZ_Y)&&(y <= (WS_B_4_POZ_Y + WS_LED_BUTTON_H)))
 8008934:	79bb      	ldrb	r3, [r7, #6]
 8008936:	2b9b      	cmp	r3, #155	; 0x9b
 8008938:	d91e      	bls.n	8008978 <changeTypeOfWSLights+0xdc>
 800893a:	79bb      	ldrb	r3, [r7, #6]
 800893c:	2bb1      	cmp	r3, #177	; 0xb1
 800893e:	d81b      	bhi.n	8008978 <changeTypeOfWSLights+0xdc>
	{
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008940:	79fb      	ldrb	r3, [r7, #7]
 8008942:	2b13      	cmp	r3, #19
 8008944:	d906      	bls.n	8008954 <changeTypeOfWSLights+0xb8>
 8008946:	79fb      	ldrb	r3, [r7, #7]
 8008948:	2b64      	cmp	r3, #100	; 0x64
 800894a:	d803      	bhi.n	8008954 <changeTypeOfWSLights+0xb8>
		{
			SendComand(UCMD_WS_LED_DAILY);
 800894c:	2023      	movs	r0, #35	; 0x23
 800894e:	f001 f9bb 	bl	8009cc8 <SendComand>
 8008952:	e010      	b.n	8008976 <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_2_X)&&(x <= (WS_PREDEFINED_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8008954:	79fb      	ldrb	r3, [r7, #7]
 8008956:	2b77      	cmp	r3, #119	; 0x77
 8008958:	d906      	bls.n	8008968 <changeTypeOfWSLights+0xcc>
 800895a:	79fb      	ldrb	r3, [r7, #7]
 800895c:	2bc8      	cmp	r3, #200	; 0xc8
 800895e:	d803      	bhi.n	8008968 <changeTypeOfWSLights+0xcc>
		{
			SendComand(UCMD_WS_LED_WHITE_OFF);
 8008960:	201c      	movs	r0, #28
 8008962:	f001 f9b1 	bl	8009cc8 <SendComand>
 8008966:	e006      	b.n	8008976 <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_3_X)&&(x <= (WS_PREDEFINED_BUTTON_3_X + WS_PREDEFINED_BUTTON_W))) // MIN
 8008968:	79fb      	ldrb	r3, [r7, #7]
 800896a:	2bdb      	cmp	r3, #219	; 0xdb
 800896c:	d922      	bls.n	80089b4 <changeTypeOfWSLights+0x118>
		{
			SendComand(UCMD_WS_LED_NIGHT);
 800896e:	2024      	movs	r0, #36	; 0x24
 8008970:	f001 f9aa 	bl	8009cc8 <SendComand>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008974:	e01e      	b.n	80089b4 <changeTypeOfWSLights+0x118>
 8008976:	e01d      	b.n	80089b4 <changeTypeOfWSLights+0x118>
	}

	//
	// Check if it is fifth line button to change LEDs to Predefined animations
	//
	else if((y >= WS_B_5_POZ_Y)&&(y <= (WS_B_5_POZ_Y + WS_LED_BUTTON_H)))
 8008978:	79bb      	ldrb	r3, [r7, #6]
 800897a:	2bba      	cmp	r3, #186	; 0xba
 800897c:	d91b      	bls.n	80089b6 <changeTypeOfWSLights+0x11a>
 800897e:	79bb      	ldrb	r3, [r7, #6]
 8008980:	2bd0      	cmp	r3, #208	; 0xd0
 8008982:	d818      	bhi.n	80089b6 <changeTypeOfWSLights+0x11a>
	{
		if((x >= WS_PREDEFINED_ACT_BUTTON_1_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008984:	79fb      	ldrb	r3, [r7, #7]
 8008986:	2b45      	cmp	r3, #69	; 0x45
 8008988:	d906      	bls.n	8008998 <changeTypeOfWSLights+0xfc>
 800898a:	79fb      	ldrb	r3, [r7, #7]
 800898c:	2b96      	cmp	r3, #150	; 0x96
 800898e:	d803      	bhi.n	8008998 <changeTypeOfWSLights+0xfc>
		{
			SendComand(UCMD_WS_ANIMATION_SUNRISE);
 8008990:	2026      	movs	r0, #38	; 0x26
 8008992:	f001 f999 	bl	8009cc8 <SendComand>
 8008996:	e00e      	b.n	80089b6 <changeTypeOfWSLights+0x11a>
		}
		else if((x >= WS_PREDEFINED_ACT_BUTTON_2_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8008998:	79fb      	ldrb	r3, [r7, #7]
 800899a:	2ba9      	cmp	r3, #169	; 0xa9
 800899c:	d90b      	bls.n	80089b6 <changeTypeOfWSLights+0x11a>
 800899e:	79fb      	ldrb	r3, [r7, #7]
 80089a0:	2bfa      	cmp	r3, #250	; 0xfa
 80089a2:	d808      	bhi.n	80089b6 <changeTypeOfWSLights+0x11a>
		{
			SendComand(UCMD_WS_ANIMATION_SUNSET);
 80089a4:	2027      	movs	r0, #39	; 0x27
 80089a6:	f001 f98f 	bl	8009cc8 <SendComand>
		}
	}
}
 80089aa:	e004      	b.n	80089b6 <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80089ac:	bf00      	nop
 80089ae:	e002      	b.n	80089b6 <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80089b0:	bf00      	nop
 80089b2:	e000      	b.n	80089b6 <changeTypeOfWSLights+0x11a>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 80089b4:	bf00      	nop
}
 80089b6:	bf00      	nop
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
	...

080089c0 <firstSwitchTurn>:
////////////////////////////////////////////////////////////////////
//
// Functions to change state of relays to manage switches and lights
//
void firstSwitchTurn(uint8_t NewState)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af02      	add	r7, sp, #8
 80089c6:	4603      	mov	r3, r0
 80089c8:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 80089ca:	79fb      	ldrb	r3, [r7, #7]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d131      	bne.n	8008a34 <firstSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 80089d0:	2006      	movs	r0, #6
 80089d2:	f001 f979 	bl	8009cc8 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=1\n"); // Print message to ESP
 80089d6:	4932      	ldr	r1, [pc, #200]	; (8008aa0 <firstSwitchTurn+0xe0>)
 80089d8:	4832      	ldr	r0, [pc, #200]	; (8008aa4 <firstSwitchTurn+0xe4>)
 80089da:	f002 f89d 	bl	800ab18 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 80089de:	4b32      	ldr	r3, [pc, #200]	; (8008aa8 <firstSwitchTurn+0xe8>)
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d11e      	bne.n	8008a24 <firstSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 80089e6:	4831      	ldr	r0, [pc, #196]	; (8008aac <firstSwitchTurn+0xec>)
 80089e8:	f7f8 ffc0 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80089ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80089f0:	9301      	str	r3, [sp, #4]
 80089f2:	2305      	movs	r3, #5
 80089f4:	9300      	str	r3, [sp, #0]
 80089f6:	2315      	movs	r3, #21
 80089f8:	2221      	movs	r2, #33	; 0x21
 80089fa:	2141      	movs	r1, #65	; 0x41
 80089fc:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008a00:	f7f8 ff63 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008a04:	492a      	ldr	r1, [pc, #168]	; (8008ab0 <firstSwitchTurn+0xf0>)
 8008a06:	482b      	ldr	r0, [pc, #172]	; (8008ab4 <firstSwitchTurn+0xf4>)
 8008a08:	f00a f92e 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008a0c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	2300      	movs	r3, #0
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	2300      	movs	r3, #0
 8008a18:	2243      	movs	r2, #67	; 0x43
 8008a1a:	f240 1111 	movw	r1, #273	; 0x111
 8008a1e:	4825      	ldr	r0, [pc, #148]	; (8008ab4 <firstSwitchTurn+0xf4>)
 8008a20:	f7f9 f9be 	bl	8001da0 <EF_PutString>
		}
		SwitchesButtonState[0] = 0;
 8008a24:	4b24      	ldr	r3, [pc, #144]	; (8008ab8 <firstSwitchTurn+0xf8>)
 8008a26:	2200      	movs	r2, #0
 8008a28:	701a      	strb	r2, [r3, #0]
		EEPROM_RelayStateUpdate(1, 0);
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	2001      	movs	r0, #1
 8008a2e:	f7fa f921 	bl	8002c74 <EEPROM_RelayStateUpdate>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[0] = 1;
		EEPROM_RelayStateUpdate(1, 1);
	}
}
 8008a32:	e030      	b.n	8008a96 <firstSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 8008a34:	2005      	movs	r0, #5
 8008a36:	f001 f947 	bl	8009cc8 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=1\n"); // Print message to ESP
 8008a3a:	4920      	ldr	r1, [pc, #128]	; (8008abc <firstSwitchTurn+0xfc>)
 8008a3c:	4819      	ldr	r0, [pc, #100]	; (8008aa4 <firstSwitchTurn+0xe4>)
 8008a3e:	f002 f86b 	bl	800ab18 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008a42:	4b19      	ldr	r3, [pc, #100]	; (8008aa8 <firstSwitchTurn+0xe8>)
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d11e      	bne.n	8008a88 <firstSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 8008a4a:	4818      	ldr	r0, [pc, #96]	; (8008aac <firstSwitchTurn+0xec>)
 8008a4c:	f7f8 ff8e 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008a50:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008a54:	9301      	str	r3, [sp, #4]
 8008a56:	2305      	movs	r3, #5
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	2315      	movs	r3, #21
 8008a5c:	2221      	movs	r2, #33	; 0x21
 8008a5e:	2141      	movs	r1, #65	; 0x41
 8008a60:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008a64:	f7f8 ff31 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008a68:	4915      	ldr	r1, [pc, #84]	; (8008ac0 <firstSwitchTurn+0x100>)
 8008a6a:	4812      	ldr	r0, [pc, #72]	; (8008ab4 <firstSwitchTurn+0xf4>)
 8008a6c:	f00a f8fc 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8008a70:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008a74:	9301      	str	r3, [sp, #4]
 8008a76:	2300      	movs	r3, #0
 8008a78:	9300      	str	r3, [sp, #0]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	2243      	movs	r2, #67	; 0x43
 8008a7e:	f240 1111 	movw	r1, #273	; 0x111
 8008a82:	480c      	ldr	r0, [pc, #48]	; (8008ab4 <firstSwitchTurn+0xf4>)
 8008a84:	f7f9 f98c 	bl	8001da0 <EF_PutString>
		SwitchesButtonState[0] = 1;
 8008a88:	4b0b      	ldr	r3, [pc, #44]	; (8008ab8 <firstSwitchTurn+0xf8>)
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	701a      	strb	r2, [r3, #0]
		EEPROM_RelayStateUpdate(1, 1);
 8008a8e:	2101      	movs	r1, #1
 8008a90:	2001      	movs	r0, #1
 8008a92:	f7fa f8ef 	bl	8002c74 <EEPROM_RelayStateUpdate>
}
 8008a96:	bf00      	nop
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	08016f5c 	.word	0x08016f5c
 8008aa4:	200006c8 	.word	0x200006c8
 8008aa8:	200002a0 	.word	0x200002a0
 8008aac:	08028554 	.word	0x08028554
 8008ab0:	08016f3c 	.word	0x08016f3c
 8008ab4:	200002cc 	.word	0x200002cc
 8008ab8:	200002b8 	.word	0x200002b8
 8008abc:	08016f68 	.word	0x08016f68
 8008ac0:	08016f40 	.word	0x08016f40

08008ac4 <secondSwitchTurn>:
void secondSwitchTurn(uint8_t NewState)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af02      	add	r7, sp, #8
 8008aca:	4603      	mov	r3, r0
 8008acc:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008ace:	79fb      	ldrb	r3, [r7, #7]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d131      	bne.n	8008b38 <secondSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8008ad4:	2008      	movs	r0, #8
 8008ad6:	f001 f8f7 	bl	8009cc8 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=2\n"); // Print message to ESP
 8008ada:	4932      	ldr	r1, [pc, #200]	; (8008ba4 <secondSwitchTurn+0xe0>)
 8008adc:	4832      	ldr	r0, [pc, #200]	; (8008ba8 <secondSwitchTurn+0xe4>)
 8008ade:	f002 f81b 	bl	800ab18 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008ae2:	4b32      	ldr	r3, [pc, #200]	; (8008bac <secondSwitchTurn+0xe8>)
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d11e      	bne.n	8008b28 <secondSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008aea:	4831      	ldr	r0, [pc, #196]	; (8008bb0 <secondSwitchTurn+0xec>)
 8008aec:	f7f8 ff3e 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008af0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008af4:	9301      	str	r3, [sp, #4]
 8008af6:	2305      	movs	r3, #5
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	2315      	movs	r3, #21
 8008afc:	2221      	movs	r2, #33	; 0x21
 8008afe:	215f      	movs	r1, #95	; 0x5f
 8008b00:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008b04:	f7f8 fee1 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008b08:	492a      	ldr	r1, [pc, #168]	; (8008bb4 <secondSwitchTurn+0xf0>)
 8008b0a:	482b      	ldr	r0, [pc, #172]	; (8008bb8 <secondSwitchTurn+0xf4>)
 8008b0c:	f00a f8ac 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008b10:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008b14:	9301      	str	r3, [sp, #4]
 8008b16:	2300      	movs	r3, #0
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	2261      	movs	r2, #97	; 0x61
 8008b1e:	f240 1111 	movw	r1, #273	; 0x111
 8008b22:	4825      	ldr	r0, [pc, #148]	; (8008bb8 <secondSwitchTurn+0xf4>)
 8008b24:	f7f9 f93c 	bl	8001da0 <EF_PutString>
		}
		SwitchesButtonState[1] = 0;
 8008b28:	4b24      	ldr	r3, [pc, #144]	; (8008bbc <secondSwitchTurn+0xf8>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	705a      	strb	r2, [r3, #1]
		EEPROM_RelayStateUpdate(2, 0);
 8008b2e:	2100      	movs	r1, #0
 8008b30:	2002      	movs	r0, #2
 8008b32:	f7fa f89f 	bl	8002c74 <EEPROM_RelayStateUpdate>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[1] = 1;
		EEPROM_RelayStateUpdate(2, 1);
	}
}
 8008b36:	e030      	b.n	8008b9a <secondSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 8008b38:	2007      	movs	r0, #7
 8008b3a:	f001 f8c5 	bl	8009cc8 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=2\n"); // Print message to ESP
 8008b3e:	4920      	ldr	r1, [pc, #128]	; (8008bc0 <secondSwitchTurn+0xfc>)
 8008b40:	4819      	ldr	r0, [pc, #100]	; (8008ba8 <secondSwitchTurn+0xe4>)
 8008b42:	f001 ffe9 	bl	800ab18 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008b46:	4b19      	ldr	r3, [pc, #100]	; (8008bac <secondSwitchTurn+0xe8>)
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d11e      	bne.n	8008b8c <secondSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 8008b4e:	4818      	ldr	r0, [pc, #96]	; (8008bb0 <secondSwitchTurn+0xec>)
 8008b50:	f7f8 ff0c 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008b54:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008b58:	9301      	str	r3, [sp, #4]
 8008b5a:	2305      	movs	r3, #5
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	2315      	movs	r3, #21
 8008b60:	2221      	movs	r2, #33	; 0x21
 8008b62:	215f      	movs	r1, #95	; 0x5f
 8008b64:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008b68:	f7f8 feaf 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008b6c:	4915      	ldr	r1, [pc, #84]	; (8008bc4 <secondSwitchTurn+0x100>)
 8008b6e:	4812      	ldr	r0, [pc, #72]	; (8008bb8 <secondSwitchTurn+0xf4>)
 8008b70:	f00a f87a 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8008b74:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008b78:	9301      	str	r3, [sp, #4]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	2261      	movs	r2, #97	; 0x61
 8008b82:	f240 1111 	movw	r1, #273	; 0x111
 8008b86:	480c      	ldr	r0, [pc, #48]	; (8008bb8 <secondSwitchTurn+0xf4>)
 8008b88:	f7f9 f90a 	bl	8001da0 <EF_PutString>
		SwitchesButtonState[1] = 1;
 8008b8c:	4b0b      	ldr	r3, [pc, #44]	; (8008bbc <secondSwitchTurn+0xf8>)
 8008b8e:	2201      	movs	r2, #1
 8008b90:	705a      	strb	r2, [r3, #1]
		EEPROM_RelayStateUpdate(2, 1);
 8008b92:	2101      	movs	r1, #1
 8008b94:	2002      	movs	r0, #2
 8008b96:	f7fa f86d 	bl	8002c74 <EEPROM_RelayStateUpdate>
}
 8008b9a:	bf00      	nop
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	08016f74 	.word	0x08016f74
 8008ba8:	200006c8 	.word	0x200006c8
 8008bac:	200002a0 	.word	0x200002a0
 8008bb0:	08028554 	.word	0x08028554
 8008bb4:	08016f3c 	.word	0x08016f3c
 8008bb8:	200002cc 	.word	0x200002cc
 8008bbc:	200002b8 	.word	0x200002b8
 8008bc0:	08016f80 	.word	0x08016f80
 8008bc4:	08016f40 	.word	0x08016f40

08008bc8 <thirdSwitchTurn>:
void thirdSwitchTurn(uint8_t NewState)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af02      	add	r7, sp, #8
 8008bce:	4603      	mov	r3, r0
 8008bd0:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008bd2:	79fb      	ldrb	r3, [r7, #7]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d131      	bne.n	8008c3c <thirdSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8008bd8:	200a      	movs	r0, #10
 8008bda:	f001 f875 	bl	8009cc8 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=3\n"); // Print message to ESP
 8008bde:	4932      	ldr	r1, [pc, #200]	; (8008ca8 <thirdSwitchTurn+0xe0>)
 8008be0:	4832      	ldr	r0, [pc, #200]	; (8008cac <thirdSwitchTurn+0xe4>)
 8008be2:	f001 ff99 	bl	800ab18 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008be6:	4b32      	ldr	r3, [pc, #200]	; (8008cb0 <thirdSwitchTurn+0xe8>)
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d11e      	bne.n	8008c2c <thirdSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008bee:	4831      	ldr	r0, [pc, #196]	; (8008cb4 <thirdSwitchTurn+0xec>)
 8008bf0:	f7f8 febc 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008bf4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008bf8:	9301      	str	r3, [sp, #4]
 8008bfa:	2305      	movs	r3, #5
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	2315      	movs	r3, #21
 8008c00:	2221      	movs	r2, #33	; 0x21
 8008c02:	217d      	movs	r1, #125	; 0x7d
 8008c04:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008c08:	f7f8 fe5f 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008c0c:	492a      	ldr	r1, [pc, #168]	; (8008cb8 <thirdSwitchTurn+0xf0>)
 8008c0e:	482b      	ldr	r0, [pc, #172]	; (8008cbc <thirdSwitchTurn+0xf4>)
 8008c10:	f00a f82a 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008c14:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008c18:	9301      	str	r3, [sp, #4]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	2300      	movs	r3, #0
 8008c20:	227f      	movs	r2, #127	; 0x7f
 8008c22:	f240 1111 	movw	r1, #273	; 0x111
 8008c26:	4825      	ldr	r0, [pc, #148]	; (8008cbc <thirdSwitchTurn+0xf4>)
 8008c28:	f7f9 f8ba 	bl	8001da0 <EF_PutString>
		}
		SwitchesButtonState[2] = 0;
 8008c2c:	4b24      	ldr	r3, [pc, #144]	; (8008cc0 <thirdSwitchTurn+0xf8>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	709a      	strb	r2, [r3, #2]
		EEPROM_RelayStateUpdate(3, 0);
 8008c32:	2100      	movs	r1, #0
 8008c34:	2003      	movs	r0, #3
 8008c36:	f7fa f81d 	bl	8002c74 <EEPROM_RelayStateUpdate>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[2] = 1;
		EEPROM_RelayStateUpdate(3, 1);
	}
}
 8008c3a:	e030      	b.n	8008c9e <thirdSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 8008c3c:	2009      	movs	r0, #9
 8008c3e:	f001 f843 	bl	8009cc8 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=3\n"); // Print message to ESP
 8008c42:	4920      	ldr	r1, [pc, #128]	; (8008cc4 <thirdSwitchTurn+0xfc>)
 8008c44:	4819      	ldr	r0, [pc, #100]	; (8008cac <thirdSwitchTurn+0xe4>)
 8008c46:	f001 ff67 	bl	800ab18 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008c4a:	4b19      	ldr	r3, [pc, #100]	; (8008cb0 <thirdSwitchTurn+0xe8>)
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d11e      	bne.n	8008c90 <thirdSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 8008c52:	4818      	ldr	r0, [pc, #96]	; (8008cb4 <thirdSwitchTurn+0xec>)
 8008c54:	f7f8 fe8a 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008c58:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008c5c:	9301      	str	r3, [sp, #4]
 8008c5e:	2305      	movs	r3, #5
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	2315      	movs	r3, #21
 8008c64:	2221      	movs	r2, #33	; 0x21
 8008c66:	217d      	movs	r1, #125	; 0x7d
 8008c68:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008c6c:	f7f8 fe2d 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008c70:	4915      	ldr	r1, [pc, #84]	; (8008cc8 <thirdSwitchTurn+0x100>)
 8008c72:	4812      	ldr	r0, [pc, #72]	; (8008cbc <thirdSwitchTurn+0xf4>)
 8008c74:	f009 fff8 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8008c78:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008c7c:	9301      	str	r3, [sp, #4]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	9300      	str	r3, [sp, #0]
 8008c82:	2300      	movs	r3, #0
 8008c84:	227f      	movs	r2, #127	; 0x7f
 8008c86:	f240 1111 	movw	r1, #273	; 0x111
 8008c8a:	480c      	ldr	r0, [pc, #48]	; (8008cbc <thirdSwitchTurn+0xf4>)
 8008c8c:	f7f9 f888 	bl	8001da0 <EF_PutString>
		SwitchesButtonState[2] = 1;
 8008c90:	4b0b      	ldr	r3, [pc, #44]	; (8008cc0 <thirdSwitchTurn+0xf8>)
 8008c92:	2201      	movs	r2, #1
 8008c94:	709a      	strb	r2, [r3, #2]
		EEPROM_RelayStateUpdate(3, 1);
 8008c96:	2101      	movs	r1, #1
 8008c98:	2003      	movs	r0, #3
 8008c9a:	f7f9 ffeb 	bl	8002c74 <EEPROM_RelayStateUpdate>
}
 8008c9e:	bf00      	nop
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	08016f8c 	.word	0x08016f8c
 8008cac:	200006c8 	.word	0x200006c8
 8008cb0:	200002a0 	.word	0x200002a0
 8008cb4:	08028554 	.word	0x08028554
 8008cb8:	08016f3c 	.word	0x08016f3c
 8008cbc:	200002cc 	.word	0x200002cc
 8008cc0:	200002b8 	.word	0x200002b8
 8008cc4:	08016f98 	.word	0x08016f98
 8008cc8:	08016f40 	.word	0x08016f40

08008ccc <fourthSwitchTurn>:
void fourthSwitchTurn(uint8_t NewState)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af02      	add	r7, sp, #8
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008cd6:	79fb      	ldrb	r3, [r7, #7]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d131      	bne.n	8008d40 <fourthSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8008cdc:	200c      	movs	r0, #12
 8008cde:	f000 fff3 	bl	8009cc8 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=4\n"); // Print message to ESP
 8008ce2:	4932      	ldr	r1, [pc, #200]	; (8008dac <fourthSwitchTurn+0xe0>)
 8008ce4:	4832      	ldr	r0, [pc, #200]	; (8008db0 <fourthSwitchTurn+0xe4>)
 8008ce6:	f001 ff17 	bl	800ab18 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008cea:	4b32      	ldr	r3, [pc, #200]	; (8008db4 <fourthSwitchTurn+0xe8>)
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	d11e      	bne.n	8008d30 <fourthSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008cf2:	4831      	ldr	r0, [pc, #196]	; (8008db8 <fourthSwitchTurn+0xec>)
 8008cf4:	f7f8 fe3a 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008cf8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008cfc:	9301      	str	r3, [sp, #4]
 8008cfe:	2305      	movs	r3, #5
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	2315      	movs	r3, #21
 8008d04:	2221      	movs	r2, #33	; 0x21
 8008d06:	219b      	movs	r1, #155	; 0x9b
 8008d08:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008d0c:	f7f8 fddd 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008d10:	492a      	ldr	r1, [pc, #168]	; (8008dbc <fourthSwitchTurn+0xf0>)
 8008d12:	482b      	ldr	r0, [pc, #172]	; (8008dc0 <fourthSwitchTurn+0xf4>)
 8008d14:	f009 ffa8 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008d18:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008d1c:	9301      	str	r3, [sp, #4]
 8008d1e:	2300      	movs	r3, #0
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	2300      	movs	r3, #0
 8008d24:	229d      	movs	r2, #157	; 0x9d
 8008d26:	f240 1111 	movw	r1, #273	; 0x111
 8008d2a:	4825      	ldr	r0, [pc, #148]	; (8008dc0 <fourthSwitchTurn+0xf4>)
 8008d2c:	f7f9 f838 	bl	8001da0 <EF_PutString>
		}
		SwitchesButtonState[3] = 0;
 8008d30:	4b24      	ldr	r3, [pc, #144]	; (8008dc4 <fourthSwitchTurn+0xf8>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	70da      	strb	r2, [r3, #3]
		EEPROM_RelayStateUpdate(4, 0);
 8008d36:	2100      	movs	r1, #0
 8008d38:	2004      	movs	r0, #4
 8008d3a:	f7f9 ff9b 	bl	8002c74 <EEPROM_RelayStateUpdate>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[3] = 1;
		EEPROM_RelayStateUpdate(4, 1);
	}
}
 8008d3e:	e030      	b.n	8008da2 <fourthSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 8008d40:	200b      	movs	r0, #11
 8008d42:	f000 ffc1 	bl	8009cc8 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=4\n"); // Print message to ESP
 8008d46:	4920      	ldr	r1, [pc, #128]	; (8008dc8 <fourthSwitchTurn+0xfc>)
 8008d48:	4819      	ldr	r0, [pc, #100]	; (8008db0 <fourthSwitchTurn+0xe4>)
 8008d4a:	f001 fee5 	bl	800ab18 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008d4e:	4b19      	ldr	r3, [pc, #100]	; (8008db4 <fourthSwitchTurn+0xe8>)
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d11e      	bne.n	8008d94 <fourthSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 8008d56:	4818      	ldr	r0, [pc, #96]	; (8008db8 <fourthSwitchTurn+0xec>)
 8008d58:	f7f8 fe08 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008d5c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008d60:	9301      	str	r3, [sp, #4]
 8008d62:	2305      	movs	r3, #5
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	2315      	movs	r3, #21
 8008d68:	2221      	movs	r2, #33	; 0x21
 8008d6a:	219b      	movs	r1, #155	; 0x9b
 8008d6c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008d70:	f7f8 fdab 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008d74:	4915      	ldr	r1, [pc, #84]	; (8008dcc <fourthSwitchTurn+0x100>)
 8008d76:	4812      	ldr	r0, [pc, #72]	; (8008dc0 <fourthSwitchTurn+0xf4>)
 8008d78:	f009 ff76 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8008d7c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	2300      	movs	r3, #0
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	2300      	movs	r3, #0
 8008d88:	229d      	movs	r2, #157	; 0x9d
 8008d8a:	f240 1111 	movw	r1, #273	; 0x111
 8008d8e:	480c      	ldr	r0, [pc, #48]	; (8008dc0 <fourthSwitchTurn+0xf4>)
 8008d90:	f7f9 f806 	bl	8001da0 <EF_PutString>
		SwitchesButtonState[3] = 1;
 8008d94:	4b0b      	ldr	r3, [pc, #44]	; (8008dc4 <fourthSwitchTurn+0xf8>)
 8008d96:	2201      	movs	r2, #1
 8008d98:	70da      	strb	r2, [r3, #3]
		EEPROM_RelayStateUpdate(4, 1);
 8008d9a:	2101      	movs	r1, #1
 8008d9c:	2004      	movs	r0, #4
 8008d9e:	f7f9 ff69 	bl	8002c74 <EEPROM_RelayStateUpdate>
}
 8008da2:	bf00      	nop
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	08016fa4 	.word	0x08016fa4
 8008db0:	200006c8 	.word	0x200006c8
 8008db4:	200002a0 	.word	0x200002a0
 8008db8:	08028554 	.word	0x08028554
 8008dbc:	08016f3c 	.word	0x08016f3c
 8008dc0:	200002cc 	.word	0x200002cc
 8008dc4:	200002b8 	.word	0x200002b8
 8008dc8:	08016fb0 	.word	0x08016fb0
 8008dcc:	08016f40 	.word	0x08016f40

08008dd0 <firstLightTurn>:


void firstLightTurn(uint8_t NewState)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af02      	add	r7, sp, #8
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008dda:	79fb      	ldrb	r3, [r7, #7]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d12f      	bne.n	8008e40 <firstLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8008de0:	200e      	movs	r0, #14
 8008de2:	f000 ff71 	bl	8009cc8 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=5\n"); // Print message to ESP
 8008de6:	4930      	ldr	r1, [pc, #192]	; (8008ea8 <firstLightTurn+0xd8>)
 8008de8:	4830      	ldr	r0, [pc, #192]	; (8008eac <firstLightTurn+0xdc>)
 8008dea:	f001 fe95 	bl	800ab18 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008dee:	4b30      	ldr	r3, [pc, #192]	; (8008eb0 <firstLightTurn+0xe0>)
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	2b05      	cmp	r3, #5
 8008df4:	d11c      	bne.n	8008e30 <firstLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008df6:	482f      	ldr	r0, [pc, #188]	; (8008eb4 <firstLightTurn+0xe4>)
 8008df8:	f7f8 fdb8 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008dfc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	2305      	movs	r3, #5
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	2315      	movs	r3, #21
 8008e08:	2221      	movs	r2, #33	; 0x21
 8008e0a:	2141      	movs	r1, #65	; 0x41
 8008e0c:	20c8      	movs	r0, #200	; 0xc8
 8008e0e:	f7f8 fd5c 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008e12:	4929      	ldr	r1, [pc, #164]	; (8008eb8 <firstLightTurn+0xe8>)
 8008e14:	4829      	ldr	r0, [pc, #164]	; (8008ebc <firstLightTurn+0xec>)
 8008e16:	f009 ff27 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008e1a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008e1e:	9301      	str	r3, [sp, #4]
 8008e20:	2300      	movs	r3, #0
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	2300      	movs	r3, #0
 8008e26:	2243      	movs	r2, #67	; 0x43
 8008e28:	21cb      	movs	r1, #203	; 0xcb
 8008e2a:	4824      	ldr	r0, [pc, #144]	; (8008ebc <firstLightTurn+0xec>)
 8008e2c:	f7f8 ffb8 	bl	8001da0 <EF_PutString>
		}
		LightsButtonState[0] = 0;
 8008e30:	4b23      	ldr	r3, [pc, #140]	; (8008ec0 <firstLightTurn+0xf0>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	701a      	strb	r2, [r3, #0]
		EEPROM_LightStateUpdate(1, 0);
 8008e36:	2100      	movs	r1, #0
 8008e38:	2001      	movs	r0, #1
 8008e3a:	f7f9 ff54 	bl	8002ce6 <EEPROM_LightStateUpdate>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[0] = 1;
		EEPROM_LightStateUpdate(1, 1);
	}
}
 8008e3e:	e02e      	b.n	8008e9e <firstLightTurn+0xce>
		SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8008e40:	200d      	movs	r0, #13
 8008e42:	f000 ff41 	bl	8009cc8 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=5\n"); // Print message to ESP
 8008e46:	491f      	ldr	r1, [pc, #124]	; (8008ec4 <firstLightTurn+0xf4>)
 8008e48:	4818      	ldr	r0, [pc, #96]	; (8008eac <firstLightTurn+0xdc>)
 8008e4a:	f001 fe65 	bl	800ab18 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008e4e:	4b18      	ldr	r3, [pc, #96]	; (8008eb0 <firstLightTurn+0xe0>)
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	2b05      	cmp	r3, #5
 8008e54:	d11c      	bne.n	8008e90 <firstLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 8008e56:	4817      	ldr	r0, [pc, #92]	; (8008eb4 <firstLightTurn+0xe4>)
 8008e58:	f7f8 fd88 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008e5c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008e60:	9301      	str	r3, [sp, #4]
 8008e62:	2305      	movs	r3, #5
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	2315      	movs	r3, #21
 8008e68:	2221      	movs	r2, #33	; 0x21
 8008e6a:	2141      	movs	r1, #65	; 0x41
 8008e6c:	20c8      	movs	r0, #200	; 0xc8
 8008e6e:	f7f8 fd2c 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008e72:	4915      	ldr	r1, [pc, #84]	; (8008ec8 <firstLightTurn+0xf8>)
 8008e74:	4811      	ldr	r0, [pc, #68]	; (8008ebc <firstLightTurn+0xec>)
 8008e76:	f009 fef7 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008e7a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008e7e:	9301      	str	r3, [sp, #4]
 8008e80:	2300      	movs	r3, #0
 8008e82:	9300      	str	r3, [sp, #0]
 8008e84:	2300      	movs	r3, #0
 8008e86:	2243      	movs	r2, #67	; 0x43
 8008e88:	21cb      	movs	r1, #203	; 0xcb
 8008e8a:	480c      	ldr	r0, [pc, #48]	; (8008ebc <firstLightTurn+0xec>)
 8008e8c:	f7f8 ff88 	bl	8001da0 <EF_PutString>
		LightsButtonState[0] = 1;
 8008e90:	4b0b      	ldr	r3, [pc, #44]	; (8008ec0 <firstLightTurn+0xf0>)
 8008e92:	2201      	movs	r2, #1
 8008e94:	701a      	strb	r2, [r3, #0]
		EEPROM_LightStateUpdate(1, 1);
 8008e96:	2101      	movs	r1, #1
 8008e98:	2001      	movs	r0, #1
 8008e9a:	f7f9 ff24 	bl	8002ce6 <EEPROM_LightStateUpdate>
}
 8008e9e:	bf00      	nop
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	08016fbc 	.word	0x08016fbc
 8008eac:	200006c8 	.word	0x200006c8
 8008eb0:	200002a0 	.word	0x200002a0
 8008eb4:	08028554 	.word	0x08028554
 8008eb8:	08016f3c 	.word	0x08016f3c
 8008ebc:	200002cc 	.word	0x200002cc
 8008ec0:	200002bc 	.word	0x200002bc
 8008ec4:	08016fc8 	.word	0x08016fc8
 8008ec8:	08016f40 	.word	0x08016f40

08008ecc <secondLightTurn>:
void secondLightTurn(uint8_t NewState)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af02      	add	r7, sp, #8
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008ed6:	79fb      	ldrb	r3, [r7, #7]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d12f      	bne.n	8008f3c <secondLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8008edc:	2010      	movs	r0, #16
 8008ede:	f000 fef3 	bl	8009cc8 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=6\n"); // Print message to ESP
 8008ee2:	4930      	ldr	r1, [pc, #192]	; (8008fa4 <secondLightTurn+0xd8>)
 8008ee4:	4830      	ldr	r0, [pc, #192]	; (8008fa8 <secondLightTurn+0xdc>)
 8008ee6:	f001 fe17 	bl	800ab18 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008eea:	4b30      	ldr	r3, [pc, #192]	; (8008fac <secondLightTurn+0xe0>)
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	2b05      	cmp	r3, #5
 8008ef0:	d11c      	bne.n	8008f2c <secondLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008ef2:	482f      	ldr	r0, [pc, #188]	; (8008fb0 <secondLightTurn+0xe4>)
 8008ef4:	f7f8 fd3a 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008ef8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008efc:	9301      	str	r3, [sp, #4]
 8008efe:	2305      	movs	r3, #5
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	2315      	movs	r3, #21
 8008f04:	2221      	movs	r2, #33	; 0x21
 8008f06:	215f      	movs	r1, #95	; 0x5f
 8008f08:	20c8      	movs	r0, #200	; 0xc8
 8008f0a:	f7f8 fcde 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008f0e:	4929      	ldr	r1, [pc, #164]	; (8008fb4 <secondLightTurn+0xe8>)
 8008f10:	4829      	ldr	r0, [pc, #164]	; (8008fb8 <secondLightTurn+0xec>)
 8008f12:	f009 fea9 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008f16:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008f1a:	9301      	str	r3, [sp, #4]
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	2300      	movs	r3, #0
 8008f22:	2261      	movs	r2, #97	; 0x61
 8008f24:	21cb      	movs	r1, #203	; 0xcb
 8008f26:	4824      	ldr	r0, [pc, #144]	; (8008fb8 <secondLightTurn+0xec>)
 8008f28:	f7f8 ff3a 	bl	8001da0 <EF_PutString>
		}
		LightsButtonState[1] = 0;
 8008f2c:	4b23      	ldr	r3, [pc, #140]	; (8008fbc <secondLightTurn+0xf0>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	705a      	strb	r2, [r3, #1]
		EEPROM_LightStateUpdate(2, 0);
 8008f32:	2100      	movs	r1, #0
 8008f34:	2002      	movs	r0, #2
 8008f36:	f7f9 fed6 	bl	8002ce6 <EEPROM_LightStateUpdate>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[1] = 1;
		EEPROM_LightStateUpdate(2, 1);
	}
}
 8008f3a:	e02e      	b.n	8008f9a <secondLightTurn+0xce>
		SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 8008f3c:	200f      	movs	r0, #15
 8008f3e:	f000 fec3 	bl	8009cc8 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=6\n"); // Print message to ESP
 8008f42:	491f      	ldr	r1, [pc, #124]	; (8008fc0 <secondLightTurn+0xf4>)
 8008f44:	4818      	ldr	r0, [pc, #96]	; (8008fa8 <secondLightTurn+0xdc>)
 8008f46:	f001 fde7 	bl	800ab18 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008f4a:	4b18      	ldr	r3, [pc, #96]	; (8008fac <secondLightTurn+0xe0>)
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b05      	cmp	r3, #5
 8008f50:	d11c      	bne.n	8008f8c <secondLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 8008f52:	4817      	ldr	r0, [pc, #92]	; (8008fb0 <secondLightTurn+0xe4>)
 8008f54:	f7f8 fd0a 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008f58:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008f5c:	9301      	str	r3, [sp, #4]
 8008f5e:	2305      	movs	r3, #5
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	2315      	movs	r3, #21
 8008f64:	2221      	movs	r2, #33	; 0x21
 8008f66:	215f      	movs	r1, #95	; 0x5f
 8008f68:	20c8      	movs	r0, #200	; 0xc8
 8008f6a:	f7f8 fcae 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008f6e:	4915      	ldr	r1, [pc, #84]	; (8008fc4 <secondLightTurn+0xf8>)
 8008f70:	4811      	ldr	r0, [pc, #68]	; (8008fb8 <secondLightTurn+0xec>)
 8008f72:	f009 fe79 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008f76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008f7a:	9301      	str	r3, [sp, #4]
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	2300      	movs	r3, #0
 8008f82:	2261      	movs	r2, #97	; 0x61
 8008f84:	21cb      	movs	r1, #203	; 0xcb
 8008f86:	480c      	ldr	r0, [pc, #48]	; (8008fb8 <secondLightTurn+0xec>)
 8008f88:	f7f8 ff0a 	bl	8001da0 <EF_PutString>
		LightsButtonState[1] = 1;
 8008f8c:	4b0b      	ldr	r3, [pc, #44]	; (8008fbc <secondLightTurn+0xf0>)
 8008f8e:	2201      	movs	r2, #1
 8008f90:	705a      	strb	r2, [r3, #1]
		EEPROM_LightStateUpdate(2, 1);
 8008f92:	2101      	movs	r1, #1
 8008f94:	2002      	movs	r0, #2
 8008f96:	f7f9 fea6 	bl	8002ce6 <EEPROM_LightStateUpdate>
}
 8008f9a:	bf00      	nop
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	08016fd4 	.word	0x08016fd4
 8008fa8:	200006c8 	.word	0x200006c8
 8008fac:	200002a0 	.word	0x200002a0
 8008fb0:	08028554 	.word	0x08028554
 8008fb4:	08016f3c 	.word	0x08016f3c
 8008fb8:	200002cc 	.word	0x200002cc
 8008fbc:	200002bc 	.word	0x200002bc
 8008fc0:	08016fe0 	.word	0x08016fe0
 8008fc4:	08016f40 	.word	0x08016f40

08008fc8 <thirdLightTurn>:
void thirdLightTurn(uint8_t NewState)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af02      	add	r7, sp, #8
 8008fce:	4603      	mov	r3, r0
 8008fd0:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d12f      	bne.n	8009038 <thirdLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 8008fd8:	2012      	movs	r0, #18
 8008fda:	f000 fe75 	bl	8009cc8 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=7\n"); // Print message to ESP
 8008fde:	4930      	ldr	r1, [pc, #192]	; (80090a0 <thirdLightTurn+0xd8>)
 8008fe0:	4830      	ldr	r0, [pc, #192]	; (80090a4 <thirdLightTurn+0xdc>)
 8008fe2:	f001 fd99 	bl	800ab18 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008fe6:	4b30      	ldr	r3, [pc, #192]	; (80090a8 <thirdLightTurn+0xe0>)
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	2b05      	cmp	r3, #5
 8008fec:	d11c      	bne.n	8009028 <thirdLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008fee:	482f      	ldr	r0, [pc, #188]	; (80090ac <thirdLightTurn+0xe4>)
 8008ff0:	f7f8 fcbc 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008ff4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008ff8:	9301      	str	r3, [sp, #4]
 8008ffa:	2305      	movs	r3, #5
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	2315      	movs	r3, #21
 8009000:	2221      	movs	r2, #33	; 0x21
 8009002:	217d      	movs	r1, #125	; 0x7d
 8009004:	20c8      	movs	r0, #200	; 0xc8
 8009006:	f7f8 fc60 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 800900a:	4929      	ldr	r1, [pc, #164]	; (80090b0 <thirdLightTurn+0xe8>)
 800900c:	4829      	ldr	r0, [pc, #164]	; (80090b4 <thirdLightTurn+0xec>)
 800900e:	f009 fe2b 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8009012:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8009016:	9301      	str	r3, [sp, #4]
 8009018:	2300      	movs	r3, #0
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	2300      	movs	r3, #0
 800901e:	227f      	movs	r2, #127	; 0x7f
 8009020:	21cb      	movs	r1, #203	; 0xcb
 8009022:	4824      	ldr	r0, [pc, #144]	; (80090b4 <thirdLightTurn+0xec>)
 8009024:	f7f8 febc 	bl	8001da0 <EF_PutString>
		}
		LightsButtonState[2] = 0;
 8009028:	4b23      	ldr	r3, [pc, #140]	; (80090b8 <thirdLightTurn+0xf0>)
 800902a:	2200      	movs	r2, #0
 800902c:	709a      	strb	r2, [r3, #2]
		EEPROM_LightStateUpdate(3, 0);
 800902e:	2100      	movs	r1, #0
 8009030:	2003      	movs	r0, #3
 8009032:	f7f9 fe58 	bl	8002ce6 <EEPROM_LightStateUpdate>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[2] = 1;
		EEPROM_LightStateUpdate(3, 1);
	}
}
 8009036:	e02e      	b.n	8009096 <thirdLightTurn+0xce>
		SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 8009038:	2011      	movs	r0, #17
 800903a:	f000 fe45 	bl	8009cc8 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=7\n"); // Print message to ESP
 800903e:	491f      	ldr	r1, [pc, #124]	; (80090bc <thirdLightTurn+0xf4>)
 8009040:	4818      	ldr	r0, [pc, #96]	; (80090a4 <thirdLightTurn+0xdc>)
 8009042:	f001 fd69 	bl	800ab18 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8009046:	4b18      	ldr	r3, [pc, #96]	; (80090a8 <thirdLightTurn+0xe0>)
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	2b05      	cmp	r3, #5
 800904c:	d11c      	bne.n	8009088 <thirdLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 800904e:	4817      	ldr	r0, [pc, #92]	; (80090ac <thirdLightTurn+0xe4>)
 8009050:	f7f8 fc8c 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8009054:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8009058:	9301      	str	r3, [sp, #4]
 800905a:	2305      	movs	r3, #5
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	2315      	movs	r3, #21
 8009060:	2221      	movs	r2, #33	; 0x21
 8009062:	217d      	movs	r1, #125	; 0x7d
 8009064:	20c8      	movs	r0, #200	; 0xc8
 8009066:	f7f8 fc30 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 800906a:	4915      	ldr	r1, [pc, #84]	; (80090c0 <thirdLightTurn+0xf8>)
 800906c:	4811      	ldr	r0, [pc, #68]	; (80090b4 <thirdLightTurn+0xec>)
 800906e:	f009 fdfb 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8009072:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8009076:	9301      	str	r3, [sp, #4]
 8009078:	2300      	movs	r3, #0
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	2300      	movs	r3, #0
 800907e:	227f      	movs	r2, #127	; 0x7f
 8009080:	21cb      	movs	r1, #203	; 0xcb
 8009082:	480c      	ldr	r0, [pc, #48]	; (80090b4 <thirdLightTurn+0xec>)
 8009084:	f7f8 fe8c 	bl	8001da0 <EF_PutString>
		LightsButtonState[2] = 1;
 8009088:	4b0b      	ldr	r3, [pc, #44]	; (80090b8 <thirdLightTurn+0xf0>)
 800908a:	2201      	movs	r2, #1
 800908c:	709a      	strb	r2, [r3, #2]
		EEPROM_LightStateUpdate(3, 1);
 800908e:	2101      	movs	r1, #1
 8009090:	2003      	movs	r0, #3
 8009092:	f7f9 fe28 	bl	8002ce6 <EEPROM_LightStateUpdate>
}
 8009096:	bf00      	nop
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	08016fec 	.word	0x08016fec
 80090a4:	200006c8 	.word	0x200006c8
 80090a8:	200002a0 	.word	0x200002a0
 80090ac:	08028554 	.word	0x08028554
 80090b0:	08016f3c 	.word	0x08016f3c
 80090b4:	200002cc 	.word	0x200002cc
 80090b8:	200002bc 	.word	0x200002bc
 80090bc:	08016ff8 	.word	0x08016ff8
 80090c0:	08016f40 	.word	0x08016f40

080090c4 <fourthLightTurn>:
void fourthLightTurn(uint8_t NewState)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af02      	add	r7, sp, #8
 80090ca:	4603      	mov	r3, r0
 80090cc:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 80090ce:	79fb      	ldrb	r3, [r7, #7]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d12f      	bne.n	8009134 <fourthLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 80090d4:	2014      	movs	r0, #20
 80090d6:	f000 fdf7 	bl	8009cc8 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=8\n"); // Print message to ESP
 80090da:	4930      	ldr	r1, [pc, #192]	; (800919c <fourthLightTurn+0xd8>)
 80090dc:	4830      	ldr	r0, [pc, #192]	; (80091a0 <fourthLightTurn+0xdc>)
 80090de:	f001 fd1b 	bl	800ab18 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 80090e2:	4b30      	ldr	r3, [pc, #192]	; (80091a4 <fourthLightTurn+0xe0>)
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	2b05      	cmp	r3, #5
 80090e8:	d11c      	bne.n	8009124 <fourthLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 80090ea:	482f      	ldr	r0, [pc, #188]	; (80091a8 <fourthLightTurn+0xe4>)
 80090ec:	f7f8 fc3e 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80090f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80090f4:	9301      	str	r3, [sp, #4]
 80090f6:	2305      	movs	r3, #5
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	2315      	movs	r3, #21
 80090fc:	2221      	movs	r2, #33	; 0x21
 80090fe:	219b      	movs	r1, #155	; 0x9b
 8009100:	20c8      	movs	r0, #200	; 0xc8
 8009102:	f7f8 fbe2 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8009106:	4929      	ldr	r1, [pc, #164]	; (80091ac <fourthLightTurn+0xe8>)
 8009108:	4829      	ldr	r0, [pc, #164]	; (80091b0 <fourthLightTurn+0xec>)
 800910a:	f009 fdad 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800910e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8009112:	9301      	str	r3, [sp, #4]
 8009114:	2300      	movs	r3, #0
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	2300      	movs	r3, #0
 800911a:	229d      	movs	r2, #157	; 0x9d
 800911c:	21cb      	movs	r1, #203	; 0xcb
 800911e:	4824      	ldr	r0, [pc, #144]	; (80091b0 <fourthLightTurn+0xec>)
 8009120:	f7f8 fe3e 	bl	8001da0 <EF_PutString>
		}
		LightsButtonState[3] = 0;
 8009124:	4b23      	ldr	r3, [pc, #140]	; (80091b4 <fourthLightTurn+0xf0>)
 8009126:	2200      	movs	r2, #0
 8009128:	70da      	strb	r2, [r3, #3]
		EEPROM_LightStateUpdate(4, 0);
 800912a:	2100      	movs	r1, #0
 800912c:	2004      	movs	r0, #4
 800912e:	f7f9 fdda 	bl	8002ce6 <EEPROM_LightStateUpdate>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[3] = 1;
		EEPROM_LightStateUpdate(4, 1);
	}
}
 8009132:	e02e      	b.n	8009192 <fourthLightTurn+0xce>
		SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 8009134:	2013      	movs	r0, #19
 8009136:	f000 fdc7 	bl	8009cc8 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=8\n"); // Print message to ESP
 800913a:	491f      	ldr	r1, [pc, #124]	; (80091b8 <fourthLightTurn+0xf4>)
 800913c:	4818      	ldr	r0, [pc, #96]	; (80091a0 <fourthLightTurn+0xdc>)
 800913e:	f001 fceb 	bl	800ab18 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8009142:	4b18      	ldr	r3, [pc, #96]	; (80091a4 <fourthLightTurn+0xe0>)
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	2b05      	cmp	r3, #5
 8009148:	d11c      	bne.n	8009184 <fourthLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 800914a:	4817      	ldr	r0, [pc, #92]	; (80091a8 <fourthLightTurn+0xe4>)
 800914c:	f7f8 fc0e 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8009150:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8009154:	9301      	str	r3, [sp, #4]
 8009156:	2305      	movs	r3, #5
 8009158:	9300      	str	r3, [sp, #0]
 800915a:	2315      	movs	r3, #21
 800915c:	2221      	movs	r2, #33	; 0x21
 800915e:	219b      	movs	r1, #155	; 0x9b
 8009160:	20c8      	movs	r0, #200	; 0xc8
 8009162:	f7f8 fbb2 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8009166:	4915      	ldr	r1, [pc, #84]	; (80091bc <fourthLightTurn+0xf8>)
 8009168:	4811      	ldr	r0, [pc, #68]	; (80091b0 <fourthLightTurn+0xec>)
 800916a:	f009 fd7d 	bl	8012c68 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800916e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8009172:	9301      	str	r3, [sp, #4]
 8009174:	2300      	movs	r3, #0
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	2300      	movs	r3, #0
 800917a:	229d      	movs	r2, #157	; 0x9d
 800917c:	21cb      	movs	r1, #203	; 0xcb
 800917e:	480c      	ldr	r0, [pc, #48]	; (80091b0 <fourthLightTurn+0xec>)
 8009180:	f7f8 fe0e 	bl	8001da0 <EF_PutString>
		LightsButtonState[3] = 1;
 8009184:	4b0b      	ldr	r3, [pc, #44]	; (80091b4 <fourthLightTurn+0xf0>)
 8009186:	2201      	movs	r2, #1
 8009188:	70da      	strb	r2, [r3, #3]
		EEPROM_LightStateUpdate(4, 1);
 800918a:	2101      	movs	r1, #1
 800918c:	2004      	movs	r0, #4
 800918e:	f7f9 fdaa 	bl	8002ce6 <EEPROM_LightStateUpdate>
}
 8009192:	bf00      	nop
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	08017004 	.word	0x08017004
 80091a0:	200006c8 	.word	0x200006c8
 80091a4:	200002a0 	.word	0x200002a0
 80091a8:	08028554 	.word	0x08028554
 80091ac:	08016f3c 	.word	0x08016f3c
 80091b0:	200002cc 	.word	0x200002cc
 80091b4:	200002bc 	.word	0x200002bc
 80091b8:	08017010 	.word	0x08017010
 80091bc:	08016f40 	.word	0x08016f40

080091c0 <OneMinuteIncrease>:

void OneMinuteIncrease(void)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af02      	add	r7, sp, #8
	if(Minutes < 59)
 80091c6:	4b11      	ldr	r3, [pc, #68]	; (800920c <OneMinuteIncrease+0x4c>)
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	2b3a      	cmp	r3, #58	; 0x3a
 80091cc:	d806      	bhi.n	80091dc <OneMinuteIncrease+0x1c>
	{
		Minutes++;
 80091ce:	4b0f      	ldr	r3, [pc, #60]	; (800920c <OneMinuteIncrease+0x4c>)
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	3301      	adds	r3, #1
 80091d4:	b2da      	uxtb	r2, r3
 80091d6:	4b0d      	ldr	r3, [pc, #52]	; (800920c <OneMinuteIncrease+0x4c>)
 80091d8:	701a      	strb	r2, [r3, #0]
 80091da:	e002      	b.n	80091e2 <OneMinuteIncrease+0x22>
	}
	else
	{
		Minutes = 0;
 80091dc:	4b0b      	ldr	r3, [pc, #44]	; (800920c <OneMinuteIncrease+0x4c>)
 80091de:	2200      	movs	r2, #0
 80091e0:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)Msg, " %d  ", Minutes);
 80091e2:	4b0a      	ldr	r3, [pc, #40]	; (800920c <OneMinuteIncrease+0x4c>)
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	461a      	mov	r2, r3
 80091e8:	4909      	ldr	r1, [pc, #36]	; (8009210 <OneMinuteIncrease+0x50>)
 80091ea:	480a      	ldr	r0, [pc, #40]	; (8009214 <OneMinuteIncrease+0x54>)
 80091ec:	f009 fd3c 	bl	8012c68 <siprintf>
	EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80091f0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80091f4:	9301      	str	r3, [sp, #4]
 80091f6:	2301      	movs	r3, #1
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	2300      	movs	r3, #0
 80091fc:	226e      	movs	r2, #110	; 0x6e
 80091fe:	21a0      	movs	r1, #160	; 0xa0
 8009200:	4804      	ldr	r0, [pc, #16]	; (8009214 <OneMinuteIncrease+0x54>)
 8009202:	f7f8 fdcd 	bl	8001da0 <EF_PutString>
}
 8009206:	bf00      	nop
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	20000033 	.word	0x20000033
 8009210:	08016f28 	.word	0x08016f28
 8009214:	200002cc 	.word	0x200002cc

08009218 <OneHourIncrease>:

void OneHourIncrease(void)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af02      	add	r7, sp, #8
	if(Hours < 24)
 800921e:	4b11      	ldr	r3, [pc, #68]	; (8009264 <OneHourIncrease+0x4c>)
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	2b17      	cmp	r3, #23
 8009224:	d806      	bhi.n	8009234 <OneHourIncrease+0x1c>
	{
		Hours++;
 8009226:	4b0f      	ldr	r3, [pc, #60]	; (8009264 <OneHourIncrease+0x4c>)
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	3301      	adds	r3, #1
 800922c:	b2da      	uxtb	r2, r3
 800922e:	4b0d      	ldr	r3, [pc, #52]	; (8009264 <OneHourIncrease+0x4c>)
 8009230:	701a      	strb	r2, [r3, #0]
 8009232:	e002      	b.n	800923a <OneHourIncrease+0x22>
	}
	else
	{
		Hours = 1;
 8009234:	4b0b      	ldr	r3, [pc, #44]	; (8009264 <OneHourIncrease+0x4c>)
 8009236:	2201      	movs	r2, #1
 8009238:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)Msg, " %d  ", Hours);
 800923a:	4b0a      	ldr	r3, [pc, #40]	; (8009264 <OneHourIncrease+0x4c>)
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	461a      	mov	r2, r3
 8009240:	4909      	ldr	r1, [pc, #36]	; (8009268 <OneHourIncrease+0x50>)
 8009242:	480a      	ldr	r0, [pc, #40]	; (800926c <OneHourIncrease+0x54>)
 8009244:	f009 fd10 	bl	8012c68 <siprintf>
	EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009248:	f24c 6318 	movw	r3, #50712	; 0xc618
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	2301      	movs	r3, #1
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	2300      	movs	r3, #0
 8009254:	2246      	movs	r2, #70	; 0x46
 8009256:	21a0      	movs	r1, #160	; 0xa0
 8009258:	4804      	ldr	r0, [pc, #16]	; (800926c <OneHourIncrease+0x54>)
 800925a:	f7f8 fda1 	bl	8001da0 <EF_PutString>
}
 800925e:	bf00      	nop
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	20000032 	.word	0x20000032
 8009268:	08016f28 	.word	0x08016f28
 800926c:	200002cc 	.word	0x200002cc

08009270 <OneDayIncrease>:

void OneDayIncrease(void)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af02      	add	r7, sp, #8
	if(DayOfWeek < 7)
 8009276:	4b11      	ldr	r3, [pc, #68]	; (80092bc <OneDayIncrease+0x4c>)
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	2b06      	cmp	r3, #6
 800927c:	d806      	bhi.n	800928c <OneDayIncrease+0x1c>
	{
		DayOfWeek++;
 800927e:	4b0f      	ldr	r3, [pc, #60]	; (80092bc <OneDayIncrease+0x4c>)
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	3301      	adds	r3, #1
 8009284:	b2da      	uxtb	r2, r3
 8009286:	4b0d      	ldr	r3, [pc, #52]	; (80092bc <OneDayIncrease+0x4c>)
 8009288:	701a      	strb	r2, [r3, #0]
 800928a:	e002      	b.n	8009292 <OneDayIncrease+0x22>
	}
	else
	{
		DayOfWeek = 1;
 800928c:	4b0b      	ldr	r3, [pc, #44]	; (80092bc <OneDayIncrease+0x4c>)
 800928e:	2201      	movs	r2, #1
 8009290:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)Msg, "DZIEŃ TYG:  %d ", DayOfWeek);
 8009292:	4b0a      	ldr	r3, [pc, #40]	; (80092bc <OneDayIncrease+0x4c>)
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	461a      	mov	r2, r3
 8009298:	4909      	ldr	r1, [pc, #36]	; (80092c0 <OneDayIncrease+0x50>)
 800929a:	480a      	ldr	r0, [pc, #40]	; (80092c4 <OneDayIncrease+0x54>)
 800929c:	f009 fce4 	bl	8012c68 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80092a0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80092a4:	9301      	str	r3, [sp, #4]
 80092a6:	2301      	movs	r3, #1
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	2300      	movs	r3, #0
 80092ac:	2296      	movs	r2, #150	; 0x96
 80092ae:	2114      	movs	r1, #20
 80092b0:	4804      	ldr	r0, [pc, #16]	; (80092c4 <OneDayIncrease+0x54>)
 80092b2:	f7f8 fd75 	bl	8001da0 <EF_PutString>
}
 80092b6:	bf00      	nop
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	20000031 	.word	0x20000031
 80092c0:	0801701c 	.word	0x0801701c
 80092c4:	200002cc 	.word	0x200002cc

080092c8 <OneMinuteDecrease>:

void OneMinuteDecrease(void)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af02      	add	r7, sp, #8
	if(Minutes > 0)
 80092ce:	4b11      	ldr	r3, [pc, #68]	; (8009314 <OneMinuteDecrease+0x4c>)
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d006      	beq.n	80092e4 <OneMinuteDecrease+0x1c>
	{
		Minutes--;
 80092d6:	4b0f      	ldr	r3, [pc, #60]	; (8009314 <OneMinuteDecrease+0x4c>)
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	3b01      	subs	r3, #1
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	4b0d      	ldr	r3, [pc, #52]	; (8009314 <OneMinuteDecrease+0x4c>)
 80092e0:	701a      	strb	r2, [r3, #0]
 80092e2:	e002      	b.n	80092ea <OneMinuteDecrease+0x22>
	}
	else
	{
		Minutes = 59;
 80092e4:	4b0b      	ldr	r3, [pc, #44]	; (8009314 <OneMinuteDecrease+0x4c>)
 80092e6:	223b      	movs	r2, #59	; 0x3b
 80092e8:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)Msg, " %d  ", Minutes);
 80092ea:	4b0a      	ldr	r3, [pc, #40]	; (8009314 <OneMinuteDecrease+0x4c>)
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	461a      	mov	r2, r3
 80092f0:	4909      	ldr	r1, [pc, #36]	; (8009318 <OneMinuteDecrease+0x50>)
 80092f2:	480a      	ldr	r0, [pc, #40]	; (800931c <OneMinuteDecrease+0x54>)
 80092f4:	f009 fcb8 	bl	8012c68 <siprintf>
	EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80092f8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	2301      	movs	r3, #1
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	2300      	movs	r3, #0
 8009304:	226e      	movs	r2, #110	; 0x6e
 8009306:	21a0      	movs	r1, #160	; 0xa0
 8009308:	4804      	ldr	r0, [pc, #16]	; (800931c <OneMinuteDecrease+0x54>)
 800930a:	f7f8 fd49 	bl	8001da0 <EF_PutString>

}
 800930e:	bf00      	nop
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	20000033 	.word	0x20000033
 8009318:	08016f28 	.word	0x08016f28
 800931c:	200002cc 	.word	0x200002cc

08009320 <OneHourDecrease>:

void OneHourDecrease(void)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af02      	add	r7, sp, #8
	if(Hours > 0)
 8009326:	4b11      	ldr	r3, [pc, #68]	; (800936c <OneHourDecrease+0x4c>)
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d006      	beq.n	800933c <OneHourDecrease+0x1c>
	{
		Hours--;
 800932e:	4b0f      	ldr	r3, [pc, #60]	; (800936c <OneHourDecrease+0x4c>)
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	3b01      	subs	r3, #1
 8009334:	b2da      	uxtb	r2, r3
 8009336:	4b0d      	ldr	r3, [pc, #52]	; (800936c <OneHourDecrease+0x4c>)
 8009338:	701a      	strb	r2, [r3, #0]
 800933a:	e002      	b.n	8009342 <OneHourDecrease+0x22>
	}
	else
	{
		Hours = 24;
 800933c:	4b0b      	ldr	r3, [pc, #44]	; (800936c <OneHourDecrease+0x4c>)
 800933e:	2218      	movs	r2, #24
 8009340:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)Msg, " %d  ", Hours);
 8009342:	4b0a      	ldr	r3, [pc, #40]	; (800936c <OneHourDecrease+0x4c>)
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	4909      	ldr	r1, [pc, #36]	; (8009370 <OneHourDecrease+0x50>)
 800934a:	480a      	ldr	r0, [pc, #40]	; (8009374 <OneHourDecrease+0x54>)
 800934c:	f009 fc8c 	bl	8012c68 <siprintf>
	EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009350:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009354:	9301      	str	r3, [sp, #4]
 8009356:	2301      	movs	r3, #1
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	2300      	movs	r3, #0
 800935c:	2246      	movs	r2, #70	; 0x46
 800935e:	21a0      	movs	r1, #160	; 0xa0
 8009360:	4804      	ldr	r0, [pc, #16]	; (8009374 <OneHourDecrease+0x54>)
 8009362:	f7f8 fd1d 	bl	8001da0 <EF_PutString>

}
 8009366:	bf00      	nop
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	20000032 	.word	0x20000032
 8009370:	08016f28 	.word	0x08016f28
 8009374:	200002cc 	.word	0x200002cc

08009378 <OneDayDecrease>:

void OneDayDecrease(void)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af02      	add	r7, sp, #8
	if(DayOfWeek > 0)
 800937e:	4b11      	ldr	r3, [pc, #68]	; (80093c4 <OneDayDecrease+0x4c>)
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d006      	beq.n	8009394 <OneDayDecrease+0x1c>
	{
		DayOfWeek--;
 8009386:	4b0f      	ldr	r3, [pc, #60]	; (80093c4 <OneDayDecrease+0x4c>)
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	3b01      	subs	r3, #1
 800938c:	b2da      	uxtb	r2, r3
 800938e:	4b0d      	ldr	r3, [pc, #52]	; (80093c4 <OneDayDecrease+0x4c>)
 8009390:	701a      	strb	r2, [r3, #0]
 8009392:	e002      	b.n	800939a <OneDayDecrease+0x22>
	}
	else
	{
		DayOfWeek = 7;
 8009394:	4b0b      	ldr	r3, [pc, #44]	; (80093c4 <OneDayDecrease+0x4c>)
 8009396:	2207      	movs	r2, #7
 8009398:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)Msg, "DZIEŃ TYG:  %d ", DayOfWeek);
 800939a:	4b0a      	ldr	r3, [pc, #40]	; (80093c4 <OneDayDecrease+0x4c>)
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	461a      	mov	r2, r3
 80093a0:	4909      	ldr	r1, [pc, #36]	; (80093c8 <OneDayDecrease+0x50>)
 80093a2:	480a      	ldr	r0, [pc, #40]	; (80093cc <OneDayDecrease+0x54>)
 80093a4:	f009 fc60 	bl	8012c68 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80093a8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80093ac:	9301      	str	r3, [sp, #4]
 80093ae:	2301      	movs	r3, #1
 80093b0:	9300      	str	r3, [sp, #0]
 80093b2:	2300      	movs	r3, #0
 80093b4:	2296      	movs	r2, #150	; 0x96
 80093b6:	2114      	movs	r1, #20
 80093b8:	4804      	ldr	r0, [pc, #16]	; (80093cc <OneDayDecrease+0x54>)
 80093ba:	f7f8 fcf1 	bl	8001da0 <EF_PutString>

}
 80093be:	bf00      	nop
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	20000031 	.word	0x20000031
 80093c8:	0801701c 	.word	0x0801701c
 80093cc:	200002cc 	.word	0x200002cc

080093d0 <TenSecondsActivitiesDurationIncrease>:

void TenSecondsActivitiesDurationIncrease(void)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af02      	add	r7, sp, #8
	if(activitiesDurationTimeInSeconds < 990)
 80093d6:	4b18      	ldr	r3, [pc, #96]	; (8009438 <TenSecondsActivitiesDurationIncrease+0x68>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f240 32dd 	movw	r2, #989	; 0x3dd
 80093de:	4293      	cmp	r3, r2
 80093e0:	d805      	bhi.n	80093ee <TenSecondsActivitiesDurationIncrease+0x1e>
	{
		activitiesDurationTimeInSeconds = activitiesDurationTimeInSeconds + 10;
 80093e2:	4b15      	ldr	r3, [pc, #84]	; (8009438 <TenSecondsActivitiesDurationIncrease+0x68>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	330a      	adds	r3, #10
 80093e8:	4a13      	ldr	r2, [pc, #76]	; (8009438 <TenSecondsActivitiesDurationIncrease+0x68>)
 80093ea:	6013      	str	r3, [r2, #0]
 80093ec:	e002      	b.n	80093f4 <TenSecondsActivitiesDurationIncrease+0x24>
	}
	else
	{
		activitiesDurationTimeInSeconds = 10;
 80093ee:	4b12      	ldr	r3, [pc, #72]	; (8009438 <TenSecondsActivitiesDurationIncrease+0x68>)
 80093f0:	220a      	movs	r2, #10
 80093f2:	601a      	str	r2, [r3, #0]
	}
	if(activitiesDurationTimeInSeconds < 100) sprintf((char*)Msg, " %ld s ", activitiesDurationTimeInSeconds);
 80093f4:	4b10      	ldr	r3, [pc, #64]	; (8009438 <TenSecondsActivitiesDurationIncrease+0x68>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b63      	cmp	r3, #99	; 0x63
 80093fa:	d807      	bhi.n	800940c <TenSecondsActivitiesDurationIncrease+0x3c>
 80093fc:	4b0e      	ldr	r3, [pc, #56]	; (8009438 <TenSecondsActivitiesDurationIncrease+0x68>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	461a      	mov	r2, r3
 8009402:	490e      	ldr	r1, [pc, #56]	; (800943c <TenSecondsActivitiesDurationIncrease+0x6c>)
 8009404:	480e      	ldr	r0, [pc, #56]	; (8009440 <TenSecondsActivitiesDurationIncrease+0x70>)
 8009406:	f009 fc2f 	bl	8012c68 <siprintf>
 800940a:	e006      	b.n	800941a <TenSecondsActivitiesDurationIncrease+0x4a>
	else sprintf((char*)Msg, "%ld s", activitiesDurationTimeInSeconds);
 800940c:	4b0a      	ldr	r3, [pc, #40]	; (8009438 <TenSecondsActivitiesDurationIncrease+0x68>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	461a      	mov	r2, r3
 8009412:	490c      	ldr	r1, [pc, #48]	; (8009444 <TenSecondsActivitiesDurationIncrease+0x74>)
 8009414:	480a      	ldr	r0, [pc, #40]	; (8009440 <TenSecondsActivitiesDurationIncrease+0x70>)
 8009416:	f009 fc27 	bl	8012c68 <siprintf>
	EF_PutString(Msg, ACTIVITIES_TIME_DURATION_NUMBER_X, ACTIVITIES_TIME_DURATION_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800941a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800941e:	9301      	str	r3, [sp, #4]
 8009420:	2301      	movs	r3, #1
 8009422:	9300      	str	r3, [sp, #0]
 8009424:	2300      	movs	r3, #0
 8009426:	22b4      	movs	r2, #180	; 0xb4
 8009428:	21e7      	movs	r1, #231	; 0xe7
 800942a:	4805      	ldr	r0, [pc, #20]	; (8009440 <TenSecondsActivitiesDurationIncrease+0x70>)
 800942c:	f7f8 fcb8 	bl	8001da0 <EF_PutString>
}
 8009430:	bf00      	nop
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	20000290 	.word	0x20000290
 800943c:	08017030 	.word	0x08017030
 8009440:	200002cc 	.word	0x200002cc
 8009444:	08017038 	.word	0x08017038

08009448 <TenSecondsActivitiesDurationDecrease>:

void TenSecondsActivitiesDurationDecrease(void)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af02      	add	r7, sp, #8
	if(activitiesDurationTimeInSeconds > 10)
 800944e:	4b17      	ldr	r3, [pc, #92]	; (80094ac <TenSecondsActivitiesDurationDecrease+0x64>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b0a      	cmp	r3, #10
 8009454:	d905      	bls.n	8009462 <TenSecondsActivitiesDurationDecrease+0x1a>
	{
		activitiesDurationTimeInSeconds = activitiesDurationTimeInSeconds - 10;
 8009456:	4b15      	ldr	r3, [pc, #84]	; (80094ac <TenSecondsActivitiesDurationDecrease+0x64>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3b0a      	subs	r3, #10
 800945c:	4a13      	ldr	r2, [pc, #76]	; (80094ac <TenSecondsActivitiesDurationDecrease+0x64>)
 800945e:	6013      	str	r3, [r2, #0]
 8009460:	e003      	b.n	800946a <TenSecondsActivitiesDurationDecrease+0x22>
	}
	else
	{
		activitiesDurationTimeInSeconds = 990;
 8009462:	4b12      	ldr	r3, [pc, #72]	; (80094ac <TenSecondsActivitiesDurationDecrease+0x64>)
 8009464:	f240 32de 	movw	r2, #990	; 0x3de
 8009468:	601a      	str	r2, [r3, #0]
	}

	if(activitiesDurationTimeInSeconds < 100) sprintf((char*)Msg, " %ld s ", activitiesDurationTimeInSeconds);
 800946a:	4b10      	ldr	r3, [pc, #64]	; (80094ac <TenSecondsActivitiesDurationDecrease+0x64>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b63      	cmp	r3, #99	; 0x63
 8009470:	d807      	bhi.n	8009482 <TenSecondsActivitiesDurationDecrease+0x3a>
 8009472:	4b0e      	ldr	r3, [pc, #56]	; (80094ac <TenSecondsActivitiesDurationDecrease+0x64>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	461a      	mov	r2, r3
 8009478:	490d      	ldr	r1, [pc, #52]	; (80094b0 <TenSecondsActivitiesDurationDecrease+0x68>)
 800947a:	480e      	ldr	r0, [pc, #56]	; (80094b4 <TenSecondsActivitiesDurationDecrease+0x6c>)
 800947c:	f009 fbf4 	bl	8012c68 <siprintf>
 8009480:	e006      	b.n	8009490 <TenSecondsActivitiesDurationDecrease+0x48>
	else sprintf((char*)Msg, "%ld s", activitiesDurationTimeInSeconds);
 8009482:	4b0a      	ldr	r3, [pc, #40]	; (80094ac <TenSecondsActivitiesDurationDecrease+0x64>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	461a      	mov	r2, r3
 8009488:	490b      	ldr	r1, [pc, #44]	; (80094b8 <TenSecondsActivitiesDurationDecrease+0x70>)
 800948a:	480a      	ldr	r0, [pc, #40]	; (80094b4 <TenSecondsActivitiesDurationDecrease+0x6c>)
 800948c:	f009 fbec 	bl	8012c68 <siprintf>
	EF_PutString(Msg, ACTIVITIES_TIME_DURATION_NUMBER_X, ACTIVITIES_TIME_DURATION_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009490:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009494:	9301      	str	r3, [sp, #4]
 8009496:	2301      	movs	r3, #1
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	2300      	movs	r3, #0
 800949c:	22b4      	movs	r2, #180	; 0xb4
 800949e:	21e7      	movs	r1, #231	; 0xe7
 80094a0:	4804      	ldr	r0, [pc, #16]	; (80094b4 <TenSecondsActivitiesDurationDecrease+0x6c>)
 80094a2:	f7f8 fc7d 	bl	8001da0 <EF_PutString>
}
 80094a6:	bf00      	nop
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	20000290 	.word	0x20000290
 80094b0:	08017030 	.word	0x08017030
 80094b4:	200002cc 	.word	0x200002cc
 80094b8:	08017038 	.word	0x08017038

080094bc <encoderUpgrade>:

void encoderUpgrade(int16_t *EncoderCntWsk)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
	EncoderCounter = *EncoderCntWsk;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80094ca:	4b7e      	ldr	r3, [pc, #504]	; (80096c4 <encoderUpgrade+0x208>)
 80094cc:	801a      	strh	r2, [r3, #0]
	if(EncoderCounter != EncoderCounterPrevious) // if was rotated
 80094ce:	4b7d      	ldr	r3, [pc, #500]	; (80096c4 <encoderUpgrade+0x208>)
 80094d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80094d4:	4b7c      	ldr	r3, [pc, #496]	; (80096c8 <encoderUpgrade+0x20c>)
 80094d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094da:	429a      	cmp	r2, r3
 80094dc:	f000 80ed 	beq.w	80096ba <encoderUpgrade+0x1fe>
	{
		if (EncoderCounter > EncoderCounterPrevious) // if increase
 80094e0:	4b78      	ldr	r3, [pc, #480]	; (80096c4 <encoderUpgrade+0x208>)
 80094e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80094e6:	4b78      	ldr	r3, [pc, #480]	; (80096c8 <encoderUpgrade+0x20c>)
 80094e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	dd74      	ble.n	80095da <encoderUpgrade+0x11e>
		{
			if((EncoderCounter - EncoderCounterPrevious >= 2)) // if full rotate was done
 80094f0:	4b74      	ldr	r3, [pc, #464]	; (80096c4 <encoderUpgrade+0x208>)
 80094f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094f6:	461a      	mov	r2, r3
 80094f8:	4b73      	ldr	r3, [pc, #460]	; (80096c8 <encoderUpgrade+0x20c>)
 80094fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	2b01      	cmp	r3, #1
 8009502:	f340 80da 	ble.w	80096ba <encoderUpgrade+0x1fe>
			{
				RotateUpgradeNumber = (EncoderCounter - EncoderCounterPrevious)/2;
 8009506:	4b6f      	ldr	r3, [pc, #444]	; (80096c4 <encoderUpgrade+0x208>)
 8009508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800950c:	461a      	mov	r2, r3
 800950e:	4b6e      	ldr	r3, [pc, #440]	; (80096c8 <encoderUpgrade+0x20c>)
 8009510:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	0fda      	lsrs	r2, r3, #31
 8009518:	4413      	add	r3, r2
 800951a:	105b      	asrs	r3, r3, #1
 800951c:	b21a      	sxth	r2, r3
 800951e:	4b6b      	ldr	r3, [pc, #428]	; (80096cc <encoderUpgrade+0x210>)
 8009520:	801a      	strh	r2, [r3, #0]
				for(uint8_t i = 1 ; i <= RotateUpgradeNumber ; i++)
 8009522:	2301      	movs	r3, #1
 8009524:	73fb      	strb	r3, [r7, #15]
 8009526:	e049      	b.n	80095bc <encoderUpgrade+0x100>
				{
					if(EncoderState == ENCODER_IDLE)
 8009528:	4b69      	ldr	r3, [pc, #420]	; (80096d0 <encoderUpgrade+0x214>)
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d120      	bne.n	8009572 <encoderUpgrade+0xb6>
					{
						if(State == MENUTFT_PARAMETERS)
 8009530:	4b68      	ldr	r3, [pc, #416]	; (80096d4 <encoderUpgrade+0x218>)
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d106      	bne.n	8009546 <encoderUpgrade+0x8a>
							{
							State = MENUTFT_SWITCH;
 8009538:	4b66      	ldr	r3, [pc, #408]	; (80096d4 <encoderUpgrade+0x218>)
 800953a:	2202      	movs	r2, #2
 800953c:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 800953e:	4b66      	ldr	r3, [pc, #408]	; (80096d8 <encoderUpgrade+0x21c>)
 8009540:	2201      	movs	r2, #1
 8009542:	701a      	strb	r2, [r3, #0]
 8009544:	e037      	b.n	80095b6 <encoderUpgrade+0xfa>
							}
						else if (State == MENUTFT_SWITCH)
 8009546:	4b63      	ldr	r3, [pc, #396]	; (80096d4 <encoderUpgrade+0x218>)
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	2b02      	cmp	r3, #2
 800954c:	d106      	bne.n	800955c <encoderUpgrade+0xa0>
						{
							State = MENUTFT_LIGHTS;
 800954e:	4b61      	ldr	r3, [pc, #388]	; (80096d4 <encoderUpgrade+0x218>)
 8009550:	2205      	movs	r2, #5
 8009552:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 8009554:	4b60      	ldr	r3, [pc, #384]	; (80096d8 <encoderUpgrade+0x21c>)
 8009556:	2201      	movs	r2, #1
 8009558:	701a      	strb	r2, [r3, #0]
 800955a:	e02c      	b.n	80095b6 <encoderUpgrade+0xfa>
						}
						else if (State == MENUTFT_LIGHTS)
 800955c:	4b5d      	ldr	r3, [pc, #372]	; (80096d4 <encoderUpgrade+0x218>)
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	2b05      	cmp	r3, #5
 8009562:	d128      	bne.n	80095b6 <encoderUpgrade+0xfa>
							{
							State = MENUTFT_PARAMETERS;
 8009564:	4b5b      	ldr	r3, [pc, #364]	; (80096d4 <encoderUpgrade+0x218>)
 8009566:	2201      	movs	r2, #1
 8009568:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 800956a:	4b5b      	ldr	r3, [pc, #364]	; (80096d8 <encoderUpgrade+0x21c>)
 800956c:	2201      	movs	r2, #1
 800956e:	701a      	strb	r2, [r3, #0]
 8009570:	e021      	b.n	80095b6 <encoderUpgrade+0xfa>
							}
					}
					else if(EncoderState == ENCODER_CLOCK_MINUTE)
 8009572:	4b57      	ldr	r3, [pc, #348]	; (80096d0 <encoderUpgrade+0x214>)
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	2b02      	cmp	r3, #2
 8009578:	d102      	bne.n	8009580 <encoderUpgrade+0xc4>
					{
						OneMinuteIncrease();
 800957a:	f7ff fe21 	bl	80091c0 <OneMinuteIncrease>
 800957e:	e01a      	b.n	80095b6 <encoderUpgrade+0xfa>
					}
					else if(EncoderState == ENCODER_CLOCK_HOUR)
 8009580:	4b53      	ldr	r3, [pc, #332]	; (80096d0 <encoderUpgrade+0x214>)
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d102      	bne.n	800958e <encoderUpgrade+0xd2>
					{
						OneHourIncrease();
 8009588:	f7ff fe46 	bl	8009218 <OneHourIncrease>
 800958c:	e013      	b.n	80095b6 <encoderUpgrade+0xfa>
					}
					else if (EncoderState == ENCODER_CLOCK_DAY)
 800958e:	4b50      	ldr	r3, [pc, #320]	; (80096d0 <encoderUpgrade+0x214>)
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	2b03      	cmp	r3, #3
 8009594:	d102      	bne.n	800959c <encoderUpgrade+0xe0>
					{
						OneDayIncrease();
 8009596:	f7ff fe6b 	bl	8009270 <OneDayIncrease>
 800959a:	e00c      	b.n	80095b6 <encoderUpgrade+0xfa>
					}
					else if (EncoderState == ENCODER_WS_LED)
 800959c:	4b4c      	ldr	r3, [pc, #304]	; (80096d0 <encoderUpgrade+0x214>)
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	2b04      	cmp	r3, #4
 80095a2:	d102      	bne.n	80095aa <encoderUpgrade+0xee>
					{
						WSONEincreaseNumberOfLedOnTFT();
 80095a4:	f7ff f8a6 	bl	80086f4 <WSONEincreaseNumberOfLedOnTFT>
 80095a8:	e005      	b.n	80095b6 <encoderUpgrade+0xfa>
					}
					else if(EncoderState == ENCODER_ACTIVITIES)
 80095aa:	4b49      	ldr	r3, [pc, #292]	; (80096d0 <encoderUpgrade+0x214>)
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	2b05      	cmp	r3, #5
 80095b0:	d101      	bne.n	80095b6 <encoderUpgrade+0xfa>
					{
						TenSecondsActivitiesDurationIncrease();
 80095b2:	f7ff ff0d 	bl	80093d0 <TenSecondsActivitiesDurationIncrease>
				for(uint8_t i = 1 ; i <= RotateUpgradeNumber ; i++)
 80095b6:	7bfb      	ldrb	r3, [r7, #15]
 80095b8:	3301      	adds	r3, #1
 80095ba:	73fb      	strb	r3, [r7, #15]
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
 80095be:	4a43      	ldr	r2, [pc, #268]	; (80096cc <encoderUpgrade+0x210>)
 80095c0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80095c4:	4293      	cmp	r3, r2
 80095c6:	ddaf      	ble.n	8009528 <encoderUpgrade+0x6c>
					}
				}
				RotateUpgradeNumber = 0;
 80095c8:	4b40      	ldr	r3, [pc, #256]	; (80096cc <encoderUpgrade+0x210>)
 80095ca:	2200      	movs	r2, #0
 80095cc:	801a      	strh	r2, [r3, #0]
				EncoderCounterPrevious = EncoderCounter;
 80095ce:	4b3d      	ldr	r3, [pc, #244]	; (80096c4 <encoderUpgrade+0x208>)
 80095d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80095d4:	4b3c      	ldr	r3, [pc, #240]	; (80096c8 <encoderUpgrade+0x20c>)
 80095d6:	801a      	strh	r2, [r3, #0]
				}
				EncoderCounterPrevious = EncoderCounter;
			}
		}
	}
}
 80095d8:	e06f      	b.n	80096ba <encoderUpgrade+0x1fe>
			if(EncoderCounterPrevious - EncoderCounter >= 2) // if full rotate was done
 80095da:	4b3b      	ldr	r3, [pc, #236]	; (80096c8 <encoderUpgrade+0x20c>)
 80095dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095e0:	461a      	mov	r2, r3
 80095e2:	4b38      	ldr	r3, [pc, #224]	; (80096c4 <encoderUpgrade+0x208>)
 80095e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	dd65      	ble.n	80096ba <encoderUpgrade+0x1fe>
				RotateUpgradeNumber = (EncoderCounterPrevious - EncoderCounter)/2;
 80095ee:	4b36      	ldr	r3, [pc, #216]	; (80096c8 <encoderUpgrade+0x20c>)
 80095f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095f4:	461a      	mov	r2, r3
 80095f6:	4b33      	ldr	r3, [pc, #204]	; (80096c4 <encoderUpgrade+0x208>)
 80095f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	0fda      	lsrs	r2, r3, #31
 8009600:	4413      	add	r3, r2
 8009602:	105b      	asrs	r3, r3, #1
 8009604:	b21a      	sxth	r2, r3
 8009606:	4b31      	ldr	r3, [pc, #196]	; (80096cc <encoderUpgrade+0x210>)
 8009608:	801a      	strh	r2, [r3, #0]
				for(uint8_t i = 1 ; i <= RotateUpgradeNumber ; i++)
 800960a:	2301      	movs	r3, #1
 800960c:	73bb      	strb	r3, [r7, #14]
 800960e:	e049      	b.n	80096a4 <encoderUpgrade+0x1e8>
					if(EncoderState == ENCODER_IDLE)
 8009610:	4b2f      	ldr	r3, [pc, #188]	; (80096d0 <encoderUpgrade+0x214>)
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d120      	bne.n	800965a <encoderUpgrade+0x19e>
						if(State == MENUTFT_PARAMETERS)
 8009618:	4b2e      	ldr	r3, [pc, #184]	; (80096d4 <encoderUpgrade+0x218>)
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	2b01      	cmp	r3, #1
 800961e:	d106      	bne.n	800962e <encoderUpgrade+0x172>
							State = MENUTFT_LIGHTS;
 8009620:	4b2c      	ldr	r3, [pc, #176]	; (80096d4 <encoderUpgrade+0x218>)
 8009622:	2205      	movs	r2, #5
 8009624:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 8009626:	4b2c      	ldr	r3, [pc, #176]	; (80096d8 <encoderUpgrade+0x21c>)
 8009628:	2201      	movs	r2, #1
 800962a:	701a      	strb	r2, [r3, #0]
 800962c:	e037      	b.n	800969e <encoderUpgrade+0x1e2>
						else if (State == MENUTFT_SWITCH)
 800962e:	4b29      	ldr	r3, [pc, #164]	; (80096d4 <encoderUpgrade+0x218>)
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	2b02      	cmp	r3, #2
 8009634:	d106      	bne.n	8009644 <encoderUpgrade+0x188>
							State = MENUTFT_PARAMETERS;
 8009636:	4b27      	ldr	r3, [pc, #156]	; (80096d4 <encoderUpgrade+0x218>)
 8009638:	2201      	movs	r2, #1
 800963a:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 800963c:	4b26      	ldr	r3, [pc, #152]	; (80096d8 <encoderUpgrade+0x21c>)
 800963e:	2201      	movs	r2, #1
 8009640:	701a      	strb	r2, [r3, #0]
 8009642:	e02c      	b.n	800969e <encoderUpgrade+0x1e2>
						else if (State == MENUTFT_LIGHTS)
 8009644:	4b23      	ldr	r3, [pc, #140]	; (80096d4 <encoderUpgrade+0x218>)
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	2b05      	cmp	r3, #5
 800964a:	d128      	bne.n	800969e <encoderUpgrade+0x1e2>
							State = MENUTFT_SWITCH;
 800964c:	4b21      	ldr	r3, [pc, #132]	; (80096d4 <encoderUpgrade+0x218>)
 800964e:	2202      	movs	r2, #2
 8009650:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 8009652:	4b21      	ldr	r3, [pc, #132]	; (80096d8 <encoderUpgrade+0x21c>)
 8009654:	2201      	movs	r2, #1
 8009656:	701a      	strb	r2, [r3, #0]
 8009658:	e021      	b.n	800969e <encoderUpgrade+0x1e2>
					else if(EncoderState == ENCODER_CLOCK_MINUTE)
 800965a:	4b1d      	ldr	r3, [pc, #116]	; (80096d0 <encoderUpgrade+0x214>)
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	2b02      	cmp	r3, #2
 8009660:	d102      	bne.n	8009668 <encoderUpgrade+0x1ac>
						OneMinuteDecrease();
 8009662:	f7ff fe31 	bl	80092c8 <OneMinuteDecrease>
 8009666:	e01a      	b.n	800969e <encoderUpgrade+0x1e2>
					else if(EncoderState == ENCODER_CLOCK_HOUR)
 8009668:	4b19      	ldr	r3, [pc, #100]	; (80096d0 <encoderUpgrade+0x214>)
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	2b01      	cmp	r3, #1
 800966e:	d102      	bne.n	8009676 <encoderUpgrade+0x1ba>
						OneHourDecrease();
 8009670:	f7ff fe56 	bl	8009320 <OneHourDecrease>
 8009674:	e013      	b.n	800969e <encoderUpgrade+0x1e2>
					else if (EncoderState == ENCODER_CLOCK_DAY)
 8009676:	4b16      	ldr	r3, [pc, #88]	; (80096d0 <encoderUpgrade+0x214>)
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	2b03      	cmp	r3, #3
 800967c:	d102      	bne.n	8009684 <encoderUpgrade+0x1c8>
						OneDayDecrease();
 800967e:	f7ff fe7b 	bl	8009378 <OneDayDecrease>
 8009682:	e00c      	b.n	800969e <encoderUpgrade+0x1e2>
					else if (EncoderState == ENCODER_WS_LED)
 8009684:	4b12      	ldr	r3, [pc, #72]	; (80096d0 <encoderUpgrade+0x214>)
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	2b04      	cmp	r3, #4
 800968a:	d102      	bne.n	8009692 <encoderUpgrade+0x1d6>
						WSONEdecreaseNumberOfLedOnTFT();
 800968c:	f7ff f86c 	bl	8008768 <WSONEdecreaseNumberOfLedOnTFT>
 8009690:	e005      	b.n	800969e <encoderUpgrade+0x1e2>
					else if(EncoderState == ENCODER_ACTIVITIES)
 8009692:	4b0f      	ldr	r3, [pc, #60]	; (80096d0 <encoderUpgrade+0x214>)
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	2b05      	cmp	r3, #5
 8009698:	d101      	bne.n	800969e <encoderUpgrade+0x1e2>
						TenSecondsActivitiesDurationDecrease();
 800969a:	f7ff fed5 	bl	8009448 <TenSecondsActivitiesDurationDecrease>
				for(uint8_t i = 1 ; i <= RotateUpgradeNumber ; i++)
 800969e:	7bbb      	ldrb	r3, [r7, #14]
 80096a0:	3301      	adds	r3, #1
 80096a2:	73bb      	strb	r3, [r7, #14]
 80096a4:	7bbb      	ldrb	r3, [r7, #14]
 80096a6:	4a09      	ldr	r2, [pc, #36]	; (80096cc <encoderUpgrade+0x210>)
 80096a8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80096ac:	4293      	cmp	r3, r2
 80096ae:	ddaf      	ble.n	8009610 <encoderUpgrade+0x154>
				EncoderCounterPrevious = EncoderCounter;
 80096b0:	4b04      	ldr	r3, [pc, #16]	; (80096c4 <encoderUpgrade+0x208>)
 80096b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80096b6:	4b04      	ldr	r3, [pc, #16]	; (80096c8 <encoderUpgrade+0x20c>)
 80096b8:	801a      	strh	r2, [r3, #0]
}
 80096ba:	bf00      	nop
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	20000294 	.word	0x20000294
 80096c8:	20000296 	.word	0x20000296
 80096cc:	20000298 	.word	0x20000298
 80096d0:	200002a1 	.word	0x200002a1
 80096d4:	200002a0 	.word	0x200002a0
 80096d8:	20000259 	.word	0x20000259

080096dc <UART_ParseLine>:
 * 		DIST=%lu\n				// Current distance to water
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b094      	sub	sp, #80	; 0x50
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 80096e4:	f107 0308 	add.w	r3, r7, #8
 80096e8:	4619      	mov	r1, r3
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f001 f9e3 	bl	800aab6 <UARTDMA_GetLineFromReceiveBuffer>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d15f      	bne.n	80097b6 <UART_ParseLine+0xda>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 80096f6:	f107 0308 	add.w	r3, r7, #8
 80096fa:	4931      	ldr	r1, [pc, #196]	; (80097c0 <UART_ParseLine+0xe4>)
 80096fc:	4618      	mov	r0, r3
 80096fe:	f00a f90b 	bl	8013918 <strtok>
 8009702:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 8009704:	492f      	ldr	r1, [pc, #188]	; (80097c4 <UART_ParseLine+0xe8>)
 8009706:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009708:	f7f6 fd6a 	bl	80001e0 <strcmp>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d102      	bne.n	8009718 <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 8009712:	f000 f869 	bl	80097e8 <UART_ParseLED>
	  {
		  UART_ParseAnswDist();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 8009716:	e04e      	b.n	80097b6 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 8009718:	492b      	ldr	r1, [pc, #172]	; (80097c8 <UART_ParseLine+0xec>)
 800971a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800971c:	f7f6 fd60 	bl	80001e0 <strcmp>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d102      	bne.n	800972c <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 8009726:	f000 f8ad 	bl	8009884 <UART_ParseAnswStatus>
}
 800972a:	e044      	b.n	80097b6 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 800972c:	4927      	ldr	r1, [pc, #156]	; (80097cc <UART_ParseLine+0xf0>)
 800972e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009730:	f7f6 fd56 	bl	80001e0 <strcmp>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d102      	bne.n	8009740 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 800973a:	f000 f8ab 	bl	8009894 <UART_ParseAnswTemp>
}
 800973e:	e03a      	b.n	80097b6 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 8009740:	4923      	ldr	r1, [pc, #140]	; (80097d0 <UART_ParseLine+0xf4>)
 8009742:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009744:	f7f6 fd4c 	bl	80001e0 <strcmp>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d102      	bne.n	8009754 <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 800974e:	f000 f953 	bl	80099f8 <UART_ParseAnswPres>
}
 8009752:	e030      	b.n	80097b6 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 8009754:	491f      	ldr	r1, [pc, #124]	; (80097d4 <UART_ParseLine+0xf8>)
 8009756:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009758:	f7f6 fd42 	bl	80001e0 <strcmp>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d102      	bne.n	8009768 <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 8009762:	f000 f9d7 	bl	8009b14 <UART_ParseAnswChangeRelayState>
}
 8009766:	e026      	b.n	80097b6 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 8009768:	491b      	ldr	r1, [pc, #108]	; (80097d8 <UART_ParseLine+0xfc>)
 800976a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800976c:	f7f6 fd38 	bl	80001e0 <strcmp>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d102      	bne.n	800977c <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 8009776:	f000 f9d4 	bl	8009b22 <UART_ParseAnswChangeLightState>
}
 800977a:	e01c      	b.n	80097b6 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 800977c:	4917      	ldr	r1, [pc, #92]	; (80097dc <UART_ParseLine+0x100>)
 800977e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009780:	f7f6 fd2e 	bl	80001e0 <strcmp>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d102      	bne.n	8009790 <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 800978a:	f000 f9d1 	bl	8009b30 <UART_ParseAnswRelayStateStatus>
}
 800978e:	e012      	b.n	80097b6 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 8009790:	4913      	ldr	r1, [pc, #76]	; (80097e0 <UART_ParseLine+0x104>)
 8009792:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009794:	f7f6 fd24 	bl	80001e0 <strcmp>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d102      	bne.n	80097a4 <UART_ParseLine+0xc8>
		  UART_ParseAnswLightsStateStatus();
 800979e:	f000 fa2d 	bl	8009bfc <UART_ParseAnswLightsStateStatus>
}
 80097a2:	e008      	b.n	80097b6 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "DIST") == 0) // Answear about current Switch Status
 80097a4:	490f      	ldr	r1, [pc, #60]	; (80097e4 <UART_ParseLine+0x108>)
 80097a6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80097a8:	f7f6 fd1a 	bl	80001e0 <strcmp>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d101      	bne.n	80097b6 <UART_ParseLine+0xda>
		  UART_ParseAnswDist();
 80097b2:	f000 f96d 	bl	8009a90 <UART_ParseAnswDist>
}
 80097b6:	bf00      	nop
 80097b8:	3750      	adds	r7, #80	; 0x50
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	08017040 	.word	0x08017040
 80097c4:	08017044 	.word	0x08017044
 80097c8:	08017048 	.word	0x08017048
 80097cc:	08017050 	.word	0x08017050
 80097d0:	08017058 	.word	0x08017058
 80097d4:	08017060 	.word	0x08017060
 80097d8:	0801706c 	.word	0x0801706c
 80097dc:	08017078 	.word	0x08017078
 80097e0:	08017084 	.word	0x08017084
 80097e4:	08017090 	.word	0x08017090

080097e8 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80097ee:	491f      	ldr	r1, [pc, #124]	; (800986c <UART_ParseLED+0x84>)
 80097f0:	2000      	movs	r0, #0
 80097f2:	f00a f891 	bl	8013918 <strtok>
 80097f6:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d031      	beq.n	8009864 <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	2b2f      	cmp	r3, #47	; 0x2f
 8009806:	d903      	bls.n	8009810 <UART_ParseLED+0x28>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	2b39      	cmp	r3, #57	; 0x39
 800980e:	d904      	bls.n	800981a <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 8009810:	4917      	ldr	r1, [pc, #92]	; (8009870 <UART_ParseLED+0x88>)
 8009812:	4818      	ldr	r0, [pc, #96]	; (8009874 <UART_ParseLED+0x8c>)
 8009814:	f001 f980 	bl	800ab18 <UARTDMA_Print>
			return;	// And exit parsing
 8009818:	e024      	b.n	8009864 <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f008 fb6d 	bl	8011efa <atoi>
 8009820:	4603      	mov	r3, r0
 8009822:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 8009824:	78fb      	ldrb	r3, [r7, #3]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d10a      	bne.n	8009840 <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800982a:	2200      	movs	r2, #0
 800982c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009830:	4811      	ldr	r0, [pc, #68]	; (8009878 <UART_ParseLED+0x90>)
 8009832:	f002 fc05 	bl	800c040 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 8009836:	4911      	ldr	r1, [pc, #68]	; (800987c <UART_ParseLED+0x94>)
 8009838:	480e      	ldr	r0, [pc, #56]	; (8009874 <UART_ParseLED+0x8c>)
 800983a:	f001 f96d 	bl	800ab18 <UARTDMA_Print>
 800983e:	e011      	b.n	8009864 <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 8009840:	78fb      	ldrb	r3, [r7, #3]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10a      	bne.n	800985c <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8009846:	2201      	movs	r2, #1
 8009848:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800984c:	480a      	ldr	r0, [pc, #40]	; (8009878 <UART_ParseLED+0x90>)
 800984e:	f002 fbf7 	bl	800c040 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 8009852:	490b      	ldr	r1, [pc, #44]	; (8009880 <UART_ParseLED+0x98>)
 8009854:	4807      	ldr	r0, [pc, #28]	; (8009874 <UART_ParseLED+0x8c>)
 8009856:	f001 f95f 	bl	800ab18 <UARTDMA_Print>
 800985a:	e003      	b.n	8009864 <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 800985c:	4904      	ldr	r1, [pc, #16]	; (8009870 <UART_ParseLED+0x88>)
 800985e:	4805      	ldr	r0, [pc, #20]	; (8009874 <UART_ParseLED+0x8c>)
 8009860:	f001 f95a 	bl	800ab18 <UARTDMA_Print>
		}
	}
}
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	08017098 	.word	0x08017098
 8009870:	0801709c 	.word	0x0801709c
 8009874:	200004fc 	.word	0x200004fc
 8009878:	40020800 	.word	0x40020800
 800987c:	080170ac 	.word	0x080170ac
 8009880:	080170b8 	.word	0x080170b8

08009884 <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 8009884:	b480      	push	{r7}
 8009886:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 8009888:	bf00      	nop
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
	...

08009894 <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 800989a:	2300      	movs	r3, #0
 800989c:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 800989e:	494e      	ldr	r1, [pc, #312]	; (80099d8 <UART_ParseAnswTemp+0x144>)
 80098a0:	2000      	movs	r0, #0
 80098a2:	f00a f839 	bl	8013918 <strtok>
 80098a6:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f000 808f 	beq.w	80099d0 <UART_ParseAnswTemp+0x13c>
	{
			NrCzujnika = atoi(ParsePointer);
 80098b2:	68b8      	ldr	r0, [r7, #8]
 80098b4:	f008 fb21 	bl	8011efa <atoi>
 80098b8:	4603      	mov	r3, r0
 80098ba:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d010      	beq.n	80098e6 <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80098c4:	4944      	ldr	r1, [pc, #272]	; (80099d8 <UART_ParseAnswTemp+0x144>)
 80098c6:	2000      	movs	r0, #0
 80098c8:	f00a f826 	bl	8013918 <strtok>
 80098cc:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f008 fb10 	bl	8011ef4 <atof>
 80098d4:	ec53 2b10 	vmov	r2, r3, d0
 80098d8:	4610      	mov	r0, r2
 80098da:	4619      	mov	r1, r3
 80098dc:	f7f7 f99c 	bl	8000c18 <__aeabi_d2f>
 80098e0:	4603      	mov	r3, r0
 80098e2:	4a3e      	ldr	r2, [pc, #248]	; (80099dc <UART_ParseAnswTemp+0x148>)
 80098e4:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 80098e6:	4b3e      	ldr	r3, [pc, #248]	; (80099e0 <UART_ParseAnswTemp+0x14c>)
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d170      	bne.n	80099d0 <UART_ParseAnswTemp+0x13c>
			{
				if(NrCzujnika == 1)
 80098ee:	7bfb      	ldrb	r3, [r7, #15]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d120      	bne.n	8009936 <UART_ParseAnswTemp+0xa2>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 80098f4:	483b      	ldr	r0, [pc, #236]	; (80099e4 <UART_ParseAnswTemp+0x150>)
 80098f6:	f7f8 f839 	bl	800196c <EF_SetFont>
						sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 80098fa:	4b38      	ldr	r3, [pc, #224]	; (80099dc <UART_ParseAnswTemp+0x148>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4618      	mov	r0, r3
 8009900:	f7f6 fe3a 	bl	8000578 <__aeabi_f2d>
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
 8009908:	4937      	ldr	r1, [pc, #220]	; (80099e8 <UART_ParseAnswTemp+0x154>)
 800990a:	4838      	ldr	r0, [pc, #224]	; (80099ec <UART_ParseAnswTemp+0x158>)
 800990c:	f009 f9ac 	bl	8012c68 <siprintf>
						EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009910:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009914:	9301      	str	r3, [sp, #4]
 8009916:	2301      	movs	r3, #1
 8009918:	9300      	str	r3, [sp, #0]
 800991a:	2300      	movs	r3, #0
 800991c:	2250      	movs	r2, #80	; 0x50
 800991e:	2114      	movs	r1, #20
 8009920:	4832      	ldr	r0, [pc, #200]	; (80099ec <UART_ParseAnswTemp+0x158>)
 8009922:	f7f8 fa3d 	bl	8001da0 <EF_PutString>
						ESP_SendCurrentTempOutside(CTemp);
 8009926:	4b2d      	ldr	r3, [pc, #180]	; (80099dc <UART_ParseAnswTemp+0x148>)
 8009928:	edd3 7a00 	vldr	s15, [r3]
 800992c:	eeb0 0a67 	vmov.f32	s0, s15
 8009930:	f7f7 fc62 	bl	80011f8 <ESP_SendCurrentTempOutside>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 8009934:	e04c      	b.n	80099d0 <UART_ParseAnswTemp+0x13c>
				else if(NrCzujnika == 2)
 8009936:	7bfb      	ldrb	r3, [r7, #15]
 8009938:	2b02      	cmp	r3, #2
 800993a:	d149      	bne.n	80099d0 <UART_ParseAnswTemp+0x13c>
						if (CTemp == 0.0) // Error in connection to ds18b20 - TODO! Send information about error in connection
 800993c:	4b27      	ldr	r3, [pc, #156]	; (80099dc <UART_ParseAnswTemp+0x148>)
 800993e:	edd3 7a00 	vldr	s15, [r3]
 8009942:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800994a:	d11d      	bne.n	8009988 <UART_ParseAnswTemp+0xf4>
							CTemp = LCTemp;
 800994c:	4b28      	ldr	r3, [pc, #160]	; (80099f0 <UART_ParseAnswTemp+0x15c>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a22      	ldr	r2, [pc, #136]	; (80099dc <UART_ParseAnswTemp+0x148>)
 8009952:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 8009954:	4823      	ldr	r0, [pc, #140]	; (80099e4 <UART_ParseAnswTemp+0x150>)
 8009956:	f7f8 f809 	bl	800196c <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 800995a:	4b20      	ldr	r3, [pc, #128]	; (80099dc <UART_ParseAnswTemp+0x148>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4618      	mov	r0, r3
 8009960:	f7f6 fe0a 	bl	8000578 <__aeabi_f2d>
 8009964:	4602      	mov	r2, r0
 8009966:	460b      	mov	r3, r1
 8009968:	4922      	ldr	r1, [pc, #136]	; (80099f4 <UART_ParseAnswTemp+0x160>)
 800996a:	4820      	ldr	r0, [pc, #128]	; (80099ec <UART_ParseAnswTemp+0x158>)
 800996c:	f009 f97c 	bl	8012c68 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009970:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009974:	9301      	str	r3, [sp, #4]
 8009976:	2301      	movs	r3, #1
 8009978:	9300      	str	r3, [sp, #0]
 800997a:	2300      	movs	r3, #0
 800997c:	226e      	movs	r2, #110	; 0x6e
 800997e:	2114      	movs	r1, #20
 8009980:	481a      	ldr	r0, [pc, #104]	; (80099ec <UART_ParseAnswTemp+0x158>)
 8009982:	f7f8 fa0d 	bl	8001da0 <EF_PutString>
	}
 8009986:	e023      	b.n	80099d0 <UART_ParseAnswTemp+0x13c>
							EF_SetFont(&arialBlack_20ptFontInfo);
 8009988:	4816      	ldr	r0, [pc, #88]	; (80099e4 <UART_ParseAnswTemp+0x150>)
 800998a:	f7f7 ffef 	bl	800196c <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 800998e:	4b13      	ldr	r3, [pc, #76]	; (80099dc <UART_ParseAnswTemp+0x148>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4618      	mov	r0, r3
 8009994:	f7f6 fdf0 	bl	8000578 <__aeabi_f2d>
 8009998:	4602      	mov	r2, r0
 800999a:	460b      	mov	r3, r1
 800999c:	4915      	ldr	r1, [pc, #84]	; (80099f4 <UART_ParseAnswTemp+0x160>)
 800999e:	4813      	ldr	r0, [pc, #76]	; (80099ec <UART_ParseAnswTemp+0x158>)
 80099a0:	f009 f962 	bl	8012c68 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80099a4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80099a8:	9301      	str	r3, [sp, #4]
 80099aa:	2301      	movs	r3, #1
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	2300      	movs	r3, #0
 80099b0:	226e      	movs	r2, #110	; 0x6e
 80099b2:	2114      	movs	r1, #20
 80099b4:	480d      	ldr	r0, [pc, #52]	; (80099ec <UART_ParseAnswTemp+0x158>)
 80099b6:	f7f8 f9f3 	bl	8001da0 <EF_PutString>
							LCTemp = CTemp;
 80099ba:	4b08      	ldr	r3, [pc, #32]	; (80099dc <UART_ParseAnswTemp+0x148>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a0c      	ldr	r2, [pc, #48]	; (80099f0 <UART_ParseAnswTemp+0x15c>)
 80099c0:	6013      	str	r3, [r2, #0]
							ESP_SendCurrentTempInside(CTemp);
 80099c2:	4b06      	ldr	r3, [pc, #24]	; (80099dc <UART_ParseAnswTemp+0x148>)
 80099c4:	edd3 7a00 	vldr	s15, [r3]
 80099c8:	eeb0 0a67 	vmov.f32	s0, s15
 80099cc:	f7f7 fbf8 	bl	80011c0 <ESP_SendCurrentTempInside>
	}
 80099d0:	bf00      	nop
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	08017098 	.word	0x08017098
 80099dc:	200002a4 	.word	0x200002a4
 80099e0:	200002a0 	.word	0x200002a0
 80099e4:	0802a4cc 	.word	0x0802a4cc
 80099e8:	080170c4 	.word	0x080170c4
 80099ec:	200002cc 	.word	0x200002cc
 80099f0:	200002a8 	.word	0x200002a8
 80099f4:	080170d8 	.word	0x080170d8

080099f8 <UART_ParseAnswPres>:

//
// Parsing information about current pressure
// "APRES=1014.200\n"
void UART_ParseAnswPres()
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 80099fe:	491e      	ldr	r1, [pc, #120]	; (8009a78 <UART_ParseAnswPres+0x80>)
 8009a00:	2000      	movs	r0, #0
 8009a02:	f009 ff89 	bl	8013918 <strtok>
 8009a06:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d02f      	beq.n	8009a70 <UART_ParseAnswPres+0x78>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f008 fa6f 	bl	8011ef4 <atof>
 8009a16:	ec53 2b10 	vmov	r2, r3, d0
 8009a1a:	4610      	mov	r0, r2
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	f7f7 f8fb 	bl	8000c18 <__aeabi_d2f>
 8009a22:	4603      	mov	r3, r0
 8009a24:	4a15      	ldr	r2, [pc, #84]	; (8009a7c <UART_ParseAnswPres+0x84>)
 8009a26:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8009a28:	4b15      	ldr	r3, [pc, #84]	; (8009a80 <UART_ParseAnswPres+0x88>)
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d11f      	bne.n	8009a70 <UART_ParseAnswPres+0x78>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8009a30:	4814      	ldr	r0, [pc, #80]	; (8009a84 <UART_ParseAnswPres+0x8c>)
 8009a32:	f7f7 ff9b 	bl	800196c <EF_SetFont>
			sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8009a36:	4b11      	ldr	r3, [pc, #68]	; (8009a7c <UART_ParseAnswPres+0x84>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7f6 fd9c 	bl	8000578 <__aeabi_f2d>
 8009a40:	4602      	mov	r2, r0
 8009a42:	460b      	mov	r3, r1
 8009a44:	4910      	ldr	r1, [pc, #64]	; (8009a88 <UART_ParseAnswPres+0x90>)
 8009a46:	4811      	ldr	r0, [pc, #68]	; (8009a8c <UART_ParseAnswPres+0x94>)
 8009a48:	f009 f90e 	bl	8012c68 <siprintf>
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009a4c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009a50:	9301      	str	r3, [sp, #4]
 8009a52:	2301      	movs	r3, #1
 8009a54:	9300      	str	r3, [sp, #0]
 8009a56:	2300      	movs	r3, #0
 8009a58:	22aa      	movs	r2, #170	; 0xaa
 8009a5a:	2114      	movs	r1, #20
 8009a5c:	480b      	ldr	r0, [pc, #44]	; (8009a8c <UART_ParseAnswPres+0x94>)
 8009a5e:	f7f8 f99f 	bl	8001da0 <EF_PutString>
			ESP_SendCurrentPressure(CPres);
 8009a62:	4b06      	ldr	r3, [pc, #24]	; (8009a7c <UART_ParseAnswPres+0x84>)
 8009a64:	edd3 7a00 	vldr	s15, [r3]
 8009a68:	eeb0 0a67 	vmov.f32	s0, s15
 8009a6c:	f7f7 fbe0 	bl	8001230 <ESP_SendCurrentPressure>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	08017098 	.word	0x08017098
 8009a7c:	200002ac 	.word	0x200002ac
 8009a80:	200002a0 	.word	0x200002a0
 8009a84:	0802a4cc 	.word	0x0802a4cc
 8009a88:	080170ec 	.word	0x080170ec
 8009a8c:	200002cc 	.word	0x200002cc

08009a90 <UART_ParseAnswDist>:

//
// Parsing information about current distance between sensor and water - water lvl
// "DIST=320\n"
void UART_ParseAnswDist()
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8009a96:	4919      	ldr	r1, [pc, #100]	; (8009afc <UART_ParseAnswDist+0x6c>)
 8009a98:	2000      	movs	r0, #0
 8009a9a:	f009 ff3d 	bl	8013918 <strtok>
 8009a9e:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d024      	beq.n	8009af2 <UART_ParseAnswDist+0x62>
	{
		CDist2water = atoi(ParsePointer); // If there are no chars, change string to integer
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f008 fa26 	bl	8011efa <atoi>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	4b13      	ldr	r3, [pc, #76]	; (8009b00 <UART_ParseAnswDist+0x70>)
 8009ab4:	601a      	str	r2, [r3, #0]
		// TODO: CHECK IF WATER LVL IS CORRECT

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8009ab6:	4b13      	ldr	r3, [pc, #76]	; (8009b04 <UART_ParseAnswDist+0x74>)
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d119      	bne.n	8009af2 <UART_ParseAnswDist+0x62>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8009abe:	4812      	ldr	r0, [pc, #72]	; (8009b08 <UART_ParseAnswDist+0x78>)
 8009ac0:	f7f7 ff54 	bl	800196c <EF_SetFont>
			sprintf((char*)Msg, "-%ldmm  ", CDist2water);
 8009ac4:	4b0e      	ldr	r3, [pc, #56]	; (8009b00 <UART_ParseAnswDist+0x70>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	461a      	mov	r2, r3
 8009aca:	4910      	ldr	r1, [pc, #64]	; (8009b0c <UART_ParseAnswDist+0x7c>)
 8009acc:	4810      	ldr	r0, [pc, #64]	; (8009b10 <UART_ParseAnswDist+0x80>)
 8009ace:	f009 f8cb 	bl	8012c68 <siprintf>
			EF_PutString(Msg, POZ_WODY_POZ_X+153, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009ad2:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009ad6:	9301      	str	r3, [sp, #4]
 8009ad8:	2301      	movs	r3, #1
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	2300      	movs	r3, #0
 8009ade:	228c      	movs	r2, #140	; 0x8c
 8009ae0:	21ad      	movs	r1, #173	; 0xad
 8009ae2:	480b      	ldr	r0, [pc, #44]	; (8009b10 <UART_ParseAnswDist+0x80>)
 8009ae4:	f7f8 f95c 	bl	8001da0 <EF_PutString>
			ESP_SendCurrentWaterLvl(CDist2water);
 8009ae8:	4b05      	ldr	r3, [pc, #20]	; (8009b00 <UART_ParseAnswDist+0x70>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7f7 fbbb 	bl	8001268 <ESP_SendCurrentWaterLvl>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8009af2:	bf00      	nop
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	08017098 	.word	0x08017098
 8009b00:	200002b4 	.word	0x200002b4
 8009b04:	200002a0 	.word	0x200002a0
 8009b08:	0802a4cc 	.word	0x0802a4cc
 8009b0c:	08017104 	.word	0x08017104
 8009b10:	200002cc 	.word	0x200002cc

08009b14 <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 8009b14:	b480      	push	{r7}
 8009b16:	af00      	add	r7, sp, #0
	//TODO!
}
 8009b18:	bf00      	nop
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr

08009b22 <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 8009b22:	b480      	push	{r7}
 8009b24:	af00      	add	r7, sp, #0
	//TODO!
}
 8009b26:	bf00      	nop
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8009b36:	2300      	movs	r3, #0
 8009b38:	71fb      	strb	r3, [r7, #7]
 8009b3a:	e04a      	b.n	8009bd2 <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8009b3c:	4928      	ldr	r1, [pc, #160]	; (8009be0 <UART_ParseAnswRelayStateStatus+0xb0>)
 8009b3e:	2000      	movs	r0, #0
 8009b40:	f009 feea 	bl	8013918 <strtok>
 8009b44:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d02f      	beq.n	8009bae <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8009b4e:	2300      	movs	r3, #0
 8009b50:	71bb      	strb	r3, [r7, #6]
 8009b52:	e025      	b.n	8009ba0 <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8009b54:	79bb      	ldrb	r3, [r7, #6]
 8009b56:	683a      	ldr	r2, [r7, #0]
 8009b58:	4413      	add	r3, r2
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	2b2f      	cmp	r3, #47	; 0x2f
 8009b5e:	d905      	bls.n	8009b6c <UART_ParseAnswRelayStateStatus+0x3c>
 8009b60:	79bb      	ldrb	r3, [r7, #6]
 8009b62:	683a      	ldr	r2, [r7, #0]
 8009b64:	4413      	add	r3, r2
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	2b39      	cmp	r3, #57	; 0x39
 8009b6a:	d90e      	bls.n	8009b8a <UART_ParseAnswRelayStateStatus+0x5a>
 8009b6c:	79bb      	ldrb	r3, [r7, #6]
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	4413      	add	r3, r2
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	2b2e      	cmp	r3, #46	; 0x2e
 8009b76:	d008      	beq.n	8009b8a <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8009b78:	491a      	ldr	r1, [pc, #104]	; (8009be4 <UART_ParseAnswRelayStateStatus+0xb4>)
 8009b7a:	481b      	ldr	r0, [pc, #108]	; (8009be8 <UART_ParseAnswRelayStateStatus+0xb8>)
 8009b7c:	f009 f874 	bl	8012c68 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8009b80:	4919      	ldr	r1, [pc, #100]	; (8009be8 <UART_ParseAnswRelayStateStatus+0xb8>)
 8009b82:	481a      	ldr	r0, [pc, #104]	; (8009bec <UART_ParseAnswRelayStateStatus+0xbc>)
 8009b84:	f000 ffc8 	bl	800ab18 <UARTDMA_Print>
					return;	// And exit parsing
 8009b88:	e026      	b.n	8009bd8 <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8009b8a:	6838      	ldr	r0, [r7, #0]
 8009b8c:	f008 f9b5 	bl	8011efa <atoi>
 8009b90:	4602      	mov	r2, r0
 8009b92:	79fb      	ldrb	r3, [r7, #7]
 8009b94:	b2d1      	uxtb	r1, r2
 8009b96:	4a16      	ldr	r2, [pc, #88]	; (8009bf0 <UART_ParseAnswRelayStateStatus+0xc0>)
 8009b98:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8009b9a:	79bb      	ldrb	r3, [r7, #6]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	71bb      	strb	r3, [r7, #6]
 8009ba0:	79bb      	ldrb	r3, [r7, #6]
 8009ba2:	683a      	ldr	r2, [r7, #0]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1d3      	bne.n	8009b54 <UART_ParseAnswRelayStateStatus+0x24>
 8009bac:	e008      	b.n	8009bc0 <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8009bae:	4911      	ldr	r1, [pc, #68]	; (8009bf4 <UART_ParseAnswRelayStateStatus+0xc4>)
 8009bb0:	480d      	ldr	r0, [pc, #52]	; (8009be8 <UART_ParseAnswRelayStateStatus+0xb8>)
 8009bb2:	f009 f859 	bl	8012c68 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8009bb6:	490c      	ldr	r1, [pc, #48]	; (8009be8 <UART_ParseAnswRelayStateStatus+0xb8>)
 8009bb8:	480c      	ldr	r0, [pc, #48]	; (8009bec <UART_ParseAnswRelayStateStatus+0xbc>)
 8009bba:	f000 ffad 	bl	800ab18 <UARTDMA_Print>
			return;	// And exit parsing
 8009bbe:	e00b      	b.n	8009bd8 <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 8009bc0:	4b0d      	ldr	r3, [pc, #52]	; (8009bf8 <UART_ParseAnswRelayStateStatus+0xc8>)
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d101      	bne.n	8009bcc <UART_ParseAnswRelayStateStatus+0x9c>
 8009bc8:	f7fb fb1c 	bl	8005204 <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8009bcc:	79fb      	ldrb	r3, [r7, #7]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	71fb      	strb	r3, [r7, #7]
 8009bd2:	79fb      	ldrb	r3, [r7, #7]
 8009bd4:	2b03      	cmp	r3, #3
 8009bd6:	d9b1      	bls.n	8009b3c <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 8009bd8:	3708      	adds	r7, #8
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	08017098 	.word	0x08017098
 8009be4:	08017110 	.word	0x08017110
 8009be8:	2000030c 	.word	0x2000030c
 8009bec:	200004fc 	.word	0x200004fc
 8009bf0:	200002b8 	.word	0x200002b8
 8009bf4:	08017124 	.word	0x08017124
 8009bf8:	200002a0 	.word	0x200002a0

08009bfc <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8009c02:	2300      	movs	r3, #0
 8009c04:	71fb      	strb	r3, [r7, #7]
 8009c06:	e04a      	b.n	8009c9e <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8009c08:	4928      	ldr	r1, [pc, #160]	; (8009cac <UART_ParseAnswLightsStateStatus+0xb0>)
 8009c0a:	2000      	movs	r0, #0
 8009c0c:	f009 fe84 	bl	8013918 <strtok>
 8009c10:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d02f      	beq.n	8009c7a <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	71bb      	strb	r3, [r7, #6]
 8009c1e:	e025      	b.n	8009c6c <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8009c20:	79bb      	ldrb	r3, [r7, #6]
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	4413      	add	r3, r2
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	2b2f      	cmp	r3, #47	; 0x2f
 8009c2a:	d905      	bls.n	8009c38 <UART_ParseAnswLightsStateStatus+0x3c>
 8009c2c:	79bb      	ldrb	r3, [r7, #6]
 8009c2e:	683a      	ldr	r2, [r7, #0]
 8009c30:	4413      	add	r3, r2
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	2b39      	cmp	r3, #57	; 0x39
 8009c36:	d90e      	bls.n	8009c56 <UART_ParseAnswLightsStateStatus+0x5a>
 8009c38:	79bb      	ldrb	r3, [r7, #6]
 8009c3a:	683a      	ldr	r2, [r7, #0]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	2b2e      	cmp	r3, #46	; 0x2e
 8009c42:	d008      	beq.n	8009c56 <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8009c44:	491a      	ldr	r1, [pc, #104]	; (8009cb0 <UART_ParseAnswLightsStateStatus+0xb4>)
 8009c46:	481b      	ldr	r0, [pc, #108]	; (8009cb4 <UART_ParseAnswLightsStateStatus+0xb8>)
 8009c48:	f009 f80e 	bl	8012c68 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8009c4c:	4919      	ldr	r1, [pc, #100]	; (8009cb4 <UART_ParseAnswLightsStateStatus+0xb8>)
 8009c4e:	481a      	ldr	r0, [pc, #104]	; (8009cb8 <UART_ParseAnswLightsStateStatus+0xbc>)
 8009c50:	f000 ff62 	bl	800ab18 <UARTDMA_Print>
					return;	// And exit parsing
 8009c54:	e026      	b.n	8009ca4 <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8009c56:	6838      	ldr	r0, [r7, #0]
 8009c58:	f008 f94f 	bl	8011efa <atoi>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	79fb      	ldrb	r3, [r7, #7]
 8009c60:	b2d1      	uxtb	r1, r2
 8009c62:	4a16      	ldr	r2, [pc, #88]	; (8009cbc <UART_ParseAnswLightsStateStatus+0xc0>)
 8009c64:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8009c66:	79bb      	ldrb	r3, [r7, #6]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	71bb      	strb	r3, [r7, #6]
 8009c6c:	79bb      	ldrb	r3, [r7, #6]
 8009c6e:	683a      	ldr	r2, [r7, #0]
 8009c70:	4413      	add	r3, r2
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1d3      	bne.n	8009c20 <UART_ParseAnswLightsStateStatus+0x24>
 8009c78:	e008      	b.n	8009c8c <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8009c7a:	4911      	ldr	r1, [pc, #68]	; (8009cc0 <UART_ParseAnswLightsStateStatus+0xc4>)
 8009c7c:	480d      	ldr	r0, [pc, #52]	; (8009cb4 <UART_ParseAnswLightsStateStatus+0xb8>)
 8009c7e:	f008 fff3 	bl	8012c68 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8009c82:	490c      	ldr	r1, [pc, #48]	; (8009cb4 <UART_ParseAnswLightsStateStatus+0xb8>)
 8009c84:	480c      	ldr	r0, [pc, #48]	; (8009cb8 <UART_ParseAnswLightsStateStatus+0xbc>)
 8009c86:	f000 ff47 	bl	800ab18 <UARTDMA_Print>
			return;	// And exit parsing
 8009c8a:	e00b      	b.n	8009ca4 <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 8009c8c:	4b0d      	ldr	r3, [pc, #52]	; (8009cc4 <UART_ParseAnswLightsStateStatus+0xc8>)
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	2b05      	cmp	r3, #5
 8009c92:	d101      	bne.n	8009c98 <UART_ParseAnswLightsStateStatus+0x9c>
 8009c94:	f7fb fbbe 	bl	8005414 <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8009c98:	79fb      	ldrb	r3, [r7, #7]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	71fb      	strb	r3, [r7, #7]
 8009c9e:	79fb      	ldrb	r3, [r7, #7]
 8009ca0:	2b03      	cmp	r3, #3
 8009ca2:	d9b1      	bls.n	8009c08 <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	08017098 	.word	0x08017098
 8009cb0:	08017110 	.word	0x08017110
 8009cb4:	2000030c 	.word	0x2000030c
 8009cb8:	200004fc 	.word	0x200004fc
 8009cbc:	200002bc 	.word	0x200002bc
 8009cc0:	08017124 	.word	0x08017124
 8009cc4:	200002a0 	.word	0x200002a0

08009cc8 <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	4603      	mov	r3, r0
 8009cd0:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 8009cd2:	79fb      	ldrb	r3, [r7, #7]
 8009cd4:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
 8009cd8:	2b27      	cmp	r3, #39	; 0x27
 8009cda:	f200 8129 	bhi.w	8009f30 <SendComand+0x268>
 8009cde:	a201      	add	r2, pc, #4	; (adr r2, 8009ce4 <SendComand+0x1c>)
 8009ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce4:	08009d85 	.word	0x08009d85
 8009ce8:	08009d8f 	.word	0x08009d8f
 8009cec:	08009d99 	.word	0x08009d99
 8009cf0:	08009da3 	.word	0x08009da3
 8009cf4:	08009db7 	.word	0x08009db7
 8009cf8:	08009dc1 	.word	0x08009dc1
 8009cfc:	08009dcb 	.word	0x08009dcb
 8009d00:	08009dd5 	.word	0x08009dd5
 8009d04:	08009ddf 	.word	0x08009ddf
 8009d08:	08009de9 	.word	0x08009de9
 8009d0c:	08009df3 	.word	0x08009df3
 8009d10:	08009dfd 	.word	0x08009dfd
 8009d14:	08009e07 	.word	0x08009e07
 8009d18:	08009e2f 	.word	0x08009e2f
 8009d1c:	08009e39 	.word	0x08009e39
 8009d20:	08009e43 	.word	0x08009e43
 8009d24:	08009e4d 	.word	0x08009e4d
 8009d28:	08009e57 	.word	0x08009e57
 8009d2c:	08009e61 	.word	0x08009e61
 8009d30:	08009e6b 	.word	0x08009e6b
 8009d34:	08009e75 	.word	0x08009e75
 8009d38:	08009e25 	.word	0x08009e25
 8009d3c:	08009e93 	.word	0x08009e93
 8009d40:	08009e11 	.word	0x08009e11
 8009d44:	08009e1b 	.word	0x08009e1b
 8009d48:	08009e7f 	.word	0x08009e7f
 8009d4c:	08009e89 	.word	0x08009e89
 8009d50:	08009dad 	.word	0x08009dad
 8009d54:	08009e9d 	.word	0x08009e9d
 8009d58:	08009ea7 	.word	0x08009ea7
 8009d5c:	08009eb1 	.word	0x08009eb1
 8009d60:	08009ebb 	.word	0x08009ebb
 8009d64:	08009ec5 	.word	0x08009ec5
 8009d68:	08009ecf 	.word	0x08009ecf
 8009d6c:	08009ed9 	.word	0x08009ed9
 8009d70:	08009ee3 	.word	0x08009ee3
 8009d74:	08009eed 	.word	0x08009eed
 8009d78:	08009ef7 	.word	0x08009ef7
 8009d7c:	08009f1d 	.word	0x08009f1d
 8009d80:	08009f27 	.word	0x08009f27
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 8009d84:	496d      	ldr	r1, [pc, #436]	; (8009f3c <SendComand+0x274>)
 8009d86:	486e      	ldr	r0, [pc, #440]	; (8009f40 <SendComand+0x278>)
 8009d88:	f000 fec6 	bl	800ab18 <UARTDMA_Print>
			break;
 8009d8c:	e0d0      	b.n	8009f30 <SendComand+0x268>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 8009d8e:	496d      	ldr	r1, [pc, #436]	; (8009f44 <SendComand+0x27c>)
 8009d90:	486b      	ldr	r0, [pc, #428]	; (8009f40 <SendComand+0x278>)
 8009d92:	f000 fec1 	bl	800ab18 <UARTDMA_Print>
			break;
 8009d96:	e0cb      	b.n	8009f30 <SendComand+0x268>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 8009d98:	496b      	ldr	r1, [pc, #428]	; (8009f48 <SendComand+0x280>)
 8009d9a:	4869      	ldr	r0, [pc, #420]	; (8009f40 <SendComand+0x278>)
 8009d9c:	f000 febc 	bl	800ab18 <UARTDMA_Print>
			break;
 8009da0:	e0c6      	b.n	8009f30 <SendComand+0x268>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 8009da2:	496a      	ldr	r1, [pc, #424]	; (8009f4c <SendComand+0x284>)
 8009da4:	4866      	ldr	r0, [pc, #408]	; (8009f40 <SendComand+0x278>)
 8009da6:	f000 feb7 	bl	800ab18 <UARTDMA_Print>
			break;
 8009daa:	e0c1      	b.n	8009f30 <SendComand+0x268>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 8009dac:	4968      	ldr	r1, [pc, #416]	; (8009f50 <SendComand+0x288>)
 8009dae:	4864      	ldr	r0, [pc, #400]	; (8009f40 <SendComand+0x278>)
 8009db0:	f000 feb2 	bl	800ab18 <UARTDMA_Print>
			break;
 8009db4:	e0bc      	b.n	8009f30 <SendComand+0x268>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 8009db6:	4967      	ldr	r1, [pc, #412]	; (8009f54 <SendComand+0x28c>)
 8009db8:	4861      	ldr	r0, [pc, #388]	; (8009f40 <SendComand+0x278>)
 8009dba:	f000 fead 	bl	800ab18 <UARTDMA_Print>
			break;
 8009dbe:	e0b7      	b.n	8009f30 <SendComand+0x268>

		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 8009dc0:	4965      	ldr	r1, [pc, #404]	; (8009f58 <SendComand+0x290>)
 8009dc2:	485f      	ldr	r0, [pc, #380]	; (8009f40 <SendComand+0x278>)
 8009dc4:	f000 fea8 	bl	800ab18 <UARTDMA_Print>
			break;
 8009dc8:	e0b2      	b.n	8009f30 <SendComand+0x268>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 8009dca:	4964      	ldr	r1, [pc, #400]	; (8009f5c <SendComand+0x294>)
 8009dcc:	485c      	ldr	r0, [pc, #368]	; (8009f40 <SendComand+0x278>)
 8009dce:	f000 fea3 	bl	800ab18 <UARTDMA_Print>
			break;
 8009dd2:	e0ad      	b.n	8009f30 <SendComand+0x268>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 8009dd4:	4962      	ldr	r1, [pc, #392]	; (8009f60 <SendComand+0x298>)
 8009dd6:	485a      	ldr	r0, [pc, #360]	; (8009f40 <SendComand+0x278>)
 8009dd8:	f000 fe9e 	bl	800ab18 <UARTDMA_Print>
			break;
 8009ddc:	e0a8      	b.n	8009f30 <SendComand+0x268>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 8009dde:	4961      	ldr	r1, [pc, #388]	; (8009f64 <SendComand+0x29c>)
 8009de0:	4857      	ldr	r0, [pc, #348]	; (8009f40 <SendComand+0x278>)
 8009de2:	f000 fe99 	bl	800ab18 <UARTDMA_Print>
			break;
 8009de6:	e0a3      	b.n	8009f30 <SendComand+0x268>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 8009de8:	495f      	ldr	r1, [pc, #380]	; (8009f68 <SendComand+0x2a0>)
 8009dea:	4855      	ldr	r0, [pc, #340]	; (8009f40 <SendComand+0x278>)
 8009dec:	f000 fe94 	bl	800ab18 <UARTDMA_Print>
			break;
 8009df0:	e09e      	b.n	8009f30 <SendComand+0x268>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 8009df2:	495e      	ldr	r1, [pc, #376]	; (8009f6c <SendComand+0x2a4>)
 8009df4:	4852      	ldr	r0, [pc, #328]	; (8009f40 <SendComand+0x278>)
 8009df6:	f000 fe8f 	bl	800ab18 <UARTDMA_Print>
			break;
 8009dfa:	e099      	b.n	8009f30 <SendComand+0x268>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 8009dfc:	495c      	ldr	r1, [pc, #368]	; (8009f70 <SendComand+0x2a8>)
 8009dfe:	4850      	ldr	r0, [pc, #320]	; (8009f40 <SendComand+0x278>)
 8009e00:	f000 fe8a 	bl	800ab18 <UARTDMA_Print>
			break;
 8009e04:	e094      	b.n	8009f30 <SendComand+0x268>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 8009e06:	495b      	ldr	r1, [pc, #364]	; (8009f74 <SendComand+0x2ac>)
 8009e08:	484d      	ldr	r0, [pc, #308]	; (8009f40 <SendComand+0x278>)
 8009e0a:	f000 fe85 	bl	800ab18 <UARTDMA_Print>
			break;
 8009e0e:	e08f      	b.n	8009f30 <SendComand+0x268>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 8009e10:	4959      	ldr	r1, [pc, #356]	; (8009f78 <SendComand+0x2b0>)
 8009e12:	484b      	ldr	r0, [pc, #300]	; (8009f40 <SendComand+0x278>)
 8009e14:	f000 fe80 	bl	800ab18 <UARTDMA_Print>
			break;
 8009e18:	e08a      	b.n	8009f30 <SendComand+0x268>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 8009e1a:	4958      	ldr	r1, [pc, #352]	; (8009f7c <SendComand+0x2b4>)
 8009e1c:	4848      	ldr	r0, [pc, #288]	; (8009f40 <SendComand+0x278>)
 8009e1e:	f000 fe7b 	bl	800ab18 <UARTDMA_Print>
			break;
 8009e22:	e085      	b.n	8009f30 <SendComand+0x268>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 8009e24:	4956      	ldr	r1, [pc, #344]	; (8009f80 <SendComand+0x2b8>)
 8009e26:	4846      	ldr	r0, [pc, #280]	; (8009f40 <SendComand+0x278>)
 8009e28:	f000 fe76 	bl	800ab18 <UARTDMA_Print>
			break;
 8009e2c:	e080      	b.n	8009f30 <SendComand+0x268>

		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 8009e2e:	4955      	ldr	r1, [pc, #340]	; (8009f84 <SendComand+0x2bc>)
 8009e30:	4843      	ldr	r0, [pc, #268]	; (8009f40 <SendComand+0x278>)
 8009e32:	f000 fe71 	bl	800ab18 <UARTDMA_Print>
			break;
 8009e36:	e07b      	b.n	8009f30 <SendComand+0x268>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 8009e38:	4953      	ldr	r1, [pc, #332]	; (8009f88 <SendComand+0x2c0>)
 8009e3a:	4841      	ldr	r0, [pc, #260]	; (8009f40 <SendComand+0x278>)
 8009e3c:	f000 fe6c 	bl	800ab18 <UARTDMA_Print>
			break;
 8009e40:	e076      	b.n	8009f30 <SendComand+0x268>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 8009e42:	4952      	ldr	r1, [pc, #328]	; (8009f8c <SendComand+0x2c4>)
 8009e44:	483e      	ldr	r0, [pc, #248]	; (8009f40 <SendComand+0x278>)
 8009e46:	f000 fe67 	bl	800ab18 <UARTDMA_Print>
			break;
 8009e4a:	e071      	b.n	8009f30 <SendComand+0x268>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 8009e4c:	4950      	ldr	r1, [pc, #320]	; (8009f90 <SendComand+0x2c8>)
 8009e4e:	483c      	ldr	r0, [pc, #240]	; (8009f40 <SendComand+0x278>)
 8009e50:	f000 fe62 	bl	800ab18 <UARTDMA_Print>
			break;
 8009e54:	e06c      	b.n	8009f30 <SendComand+0x268>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 8009e56:	494f      	ldr	r1, [pc, #316]	; (8009f94 <SendComand+0x2cc>)
 8009e58:	4839      	ldr	r0, [pc, #228]	; (8009f40 <SendComand+0x278>)
 8009e5a:	f000 fe5d 	bl	800ab18 <UARTDMA_Print>
			break;
 8009e5e:	e067      	b.n	8009f30 <SendComand+0x268>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 8009e60:	494d      	ldr	r1, [pc, #308]	; (8009f98 <SendComand+0x2d0>)
 8009e62:	4837      	ldr	r0, [pc, #220]	; (8009f40 <SendComand+0x278>)
 8009e64:	f000 fe58 	bl	800ab18 <UARTDMA_Print>
			break;
 8009e68:	e062      	b.n	8009f30 <SendComand+0x268>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 8009e6a:	494c      	ldr	r1, [pc, #304]	; (8009f9c <SendComand+0x2d4>)
 8009e6c:	4834      	ldr	r0, [pc, #208]	; (8009f40 <SendComand+0x278>)
 8009e6e:	f000 fe53 	bl	800ab18 <UARTDMA_Print>
			break;
 8009e72:	e05d      	b.n	8009f30 <SendComand+0x268>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 8009e74:	494a      	ldr	r1, [pc, #296]	; (8009fa0 <SendComand+0x2d8>)
 8009e76:	4832      	ldr	r0, [pc, #200]	; (8009f40 <SendComand+0x278>)
 8009e78:	f000 fe4e 	bl	800ab18 <UARTDMA_Print>
			break;
 8009e7c:	e058      	b.n	8009f30 <SendComand+0x268>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 8009e7e:	4949      	ldr	r1, [pc, #292]	; (8009fa4 <SendComand+0x2dc>)
 8009e80:	482f      	ldr	r0, [pc, #188]	; (8009f40 <SendComand+0x278>)
 8009e82:	f000 fe49 	bl	800ab18 <UARTDMA_Print>
			break;
 8009e86:	e053      	b.n	8009f30 <SendComand+0x268>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 8009e88:	4947      	ldr	r1, [pc, #284]	; (8009fa8 <SendComand+0x2e0>)
 8009e8a:	482d      	ldr	r0, [pc, #180]	; (8009f40 <SendComand+0x278>)
 8009e8c:	f000 fe44 	bl	800ab18 <UARTDMA_Print>
			break;
 8009e90:	e04e      	b.n	8009f30 <SendComand+0x268>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 8009e92:	4946      	ldr	r1, [pc, #280]	; (8009fac <SendComand+0x2e4>)
 8009e94:	482a      	ldr	r0, [pc, #168]	; (8009f40 <SendComand+0x278>)
 8009e96:	f000 fe3f 	bl	800ab18 <UARTDMA_Print>
			break;
 8009e9a:	e049      	b.n	8009f30 <SendComand+0x268>

		case UCMD_WS_LED_WHITE_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,0\n");
 8009e9c:	4944      	ldr	r1, [pc, #272]	; (8009fb0 <SendComand+0x2e8>)
 8009e9e:	4828      	ldr	r0, [pc, #160]	; (8009f40 <SendComand+0x278>)
 8009ea0:	f000 fe3a 	bl	800ab18 <UARTDMA_Print>
			break;
 8009ea4:	e044      	b.n	8009f30 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,1\n");
 8009ea6:	4943      	ldr	r1, [pc, #268]	; (8009fb4 <SendComand+0x2ec>)
 8009ea8:	4825      	ldr	r0, [pc, #148]	; (8009f40 <SendComand+0x278>)
 8009eaa:	f000 fe35 	bl	800ab18 <UARTDMA_Print>
			break;
 8009eae:	e03f      	b.n	8009f30 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,2\n");
 8009eb0:	4941      	ldr	r1, [pc, #260]	; (8009fb8 <SendComand+0x2f0>)
 8009eb2:	4823      	ldr	r0, [pc, #140]	; (8009f40 <SendComand+0x278>)
 8009eb4:	f000 fe30 	bl	800ab18 <UARTDMA_Print>
			break;
 8009eb8:	e03a      	b.n	8009f30 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,3\n");
 8009eba:	4940      	ldr	r1, [pc, #256]	; (8009fbc <SendComand+0x2f4>)
 8009ebc:	4820      	ldr	r0, [pc, #128]	; (8009f40 <SendComand+0x278>)
 8009ebe:	f000 fe2b 	bl	800ab18 <UARTDMA_Print>
			break;
 8009ec2:	e035      	b.n	8009f30 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,4\n");
 8009ec4:	493e      	ldr	r1, [pc, #248]	; (8009fc0 <SendComand+0x2f8>)
 8009ec6:	481e      	ldr	r0, [pc, #120]	; (8009f40 <SendComand+0x278>)
 8009ec8:	f000 fe26 	bl	800ab18 <UARTDMA_Print>
			break;
 8009ecc:	e030      	b.n	8009f30 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,5\n");
 8009ece:	493d      	ldr	r1, [pc, #244]	; (8009fc4 <SendComand+0x2fc>)
 8009ed0:	481b      	ldr	r0, [pc, #108]	; (8009f40 <SendComand+0x278>)
 8009ed2:	f000 fe21 	bl	800ab18 <UARTDMA_Print>
			break;
 8009ed6:	e02b      	b.n	8009f30 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,6\n");
 8009ed8:	493b      	ldr	r1, [pc, #236]	; (8009fc8 <SendComand+0x300>)
 8009eda:	4819      	ldr	r0, [pc, #100]	; (8009f40 <SendComand+0x278>)
 8009edc:	f000 fe1c 	bl	800ab18 <UARTDMA_Print>
			break;
 8009ee0:	e026      	b.n	8009f30 <SendComand+0x268>
		case UCMD_WS_LED_DAILY:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,7\n");
 8009ee2:	493a      	ldr	r1, [pc, #232]	; (8009fcc <SendComand+0x304>)
 8009ee4:	4816      	ldr	r0, [pc, #88]	; (8009f40 <SendComand+0x278>)
 8009ee6:	f000 fe17 	bl	800ab18 <UARTDMA_Print>
			break;
 8009eea:	e021      	b.n	8009f30 <SendComand+0x268>
		case UCMD_WS_LED_NIGHT:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,8\n");
 8009eec:	4938      	ldr	r1, [pc, #224]	; (8009fd0 <SendComand+0x308>)
 8009eee:	4814      	ldr	r0, [pc, #80]	; (8009f40 <SendComand+0x278>)
 8009ef0:	f000 fe12 	bl	800ab18 <UARTDMA_Print>
			break;
 8009ef4:	e01c      	b.n	8009f30 <SendComand+0x268>
		case UCMD_WS_NUMBER_LED:
			if(NrOfLeds < 9) NrOfLeds = 9; // Minimum number of Leds is 9
 8009ef6:	4b37      	ldr	r3, [pc, #220]	; (8009fd4 <SendComand+0x30c>)
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	2b08      	cmp	r3, #8
 8009efc:	d802      	bhi.n	8009f04 <SendComand+0x23c>
 8009efe:	4b35      	ldr	r3, [pc, #212]	; (8009fd4 <SendComand+0x30c>)
 8009f00:	2209      	movs	r2, #9
 8009f02:	701a      	strb	r2, [r3, #0]
			sprintf(Message, "CHLIGHT=9,%d\n", NrOfLeds);
 8009f04:	4b33      	ldr	r3, [pc, #204]	; (8009fd4 <SendComand+0x30c>)
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	4933      	ldr	r1, [pc, #204]	; (8009fd8 <SendComand+0x310>)
 8009f0c:	4833      	ldr	r0, [pc, #204]	; (8009fdc <SendComand+0x314>)
 8009f0e:	f008 feab 	bl	8012c68 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8009f12:	4932      	ldr	r1, [pc, #200]	; (8009fdc <SendComand+0x314>)
 8009f14:	480a      	ldr	r0, [pc, #40]	; (8009f40 <SendComand+0x278>)
 8009f16:	f000 fdff 	bl	800ab18 <UARTDMA_Print>
			break;
 8009f1a:	e009      	b.n	8009f30 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNRISE:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,1\n");
 8009f1c:	4930      	ldr	r1, [pc, #192]	; (8009fe0 <SendComand+0x318>)
 8009f1e:	4808      	ldr	r0, [pc, #32]	; (8009f40 <SendComand+0x278>)
 8009f20:	f000 fdfa 	bl	800ab18 <UARTDMA_Print>
			break;
 8009f24:	e004      	b.n	8009f30 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNSET:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,4\n");
 8009f26:	492f      	ldr	r1, [pc, #188]	; (8009fe4 <SendComand+0x31c>)
 8009f28:	4805      	ldr	r0, [pc, #20]	; (8009f40 <SendComand+0x278>)
 8009f2a:	f000 fdf5 	bl	800ab18 <UARTDMA_Print>
			break;
 8009f2e:	bf00      	nop
		}
	return 1;
 8009f30:	2301      	movs	r3, #1
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	08017140 	.word	0x08017140
 8009f40:	200004fc 	.word	0x200004fc
 8009f44:	08017148 	.word	0x08017148
 8009f48:	08017150 	.word	0x08017150
 8009f4c:	0801715c 	.word	0x0801715c
 8009f50:	08017164 	.word	0x08017164
 8009f54:	0801716c 	.word	0x0801716c
 8009f58:	08017174 	.word	0x08017174
 8009f5c:	08017184 	.word	0x08017184
 8009f60:	08017194 	.word	0x08017194
 8009f64:	080171a4 	.word	0x080171a4
 8009f68:	080171b4 	.word	0x080171b4
 8009f6c:	080171c4 	.word	0x080171c4
 8009f70:	080171d4 	.word	0x080171d4
 8009f74:	080171e4 	.word	0x080171e4
 8009f78:	080171f4 	.word	0x080171f4
 8009f7c:	08017204 	.word	0x08017204
 8009f80:	08017214 	.word	0x08017214
 8009f84:	08017224 	.word	0x08017224
 8009f88:	08017234 	.word	0x08017234
 8009f8c:	08017244 	.word	0x08017244
 8009f90:	08017254 	.word	0x08017254
 8009f94:	08017264 	.word	0x08017264
 8009f98:	08017274 	.word	0x08017274
 8009f9c:	08017284 	.word	0x08017284
 8009fa0:	08017294 	.word	0x08017294
 8009fa4:	080172a4 	.word	0x080172a4
 8009fa8:	080172b4 	.word	0x080172b4
 8009fac:	080172c4 	.word	0x080172c4
 8009fb0:	080172d4 	.word	0x080172d4
 8009fb4:	080172e4 	.word	0x080172e4
 8009fb8:	080172f4 	.word	0x080172f4
 8009fbc:	08017304 	.word	0x08017304
 8009fc0:	08017314 	.word	0x08017314
 8009fc4:	08017324 	.word	0x08017324
 8009fc8:	08017334 	.word	0x08017334
 8009fcc:	08017344 	.word	0x08017344
 8009fd0:	08017354 	.word	0x08017354
 8009fd4:	20000034 	.word	0x20000034
 8009fd8:	08017364 	.word	0x08017364
 8009fdc:	2000030c 	.word	0x2000030c
 8009fe0:	08017374 	.word	0x08017374
 8009fe4:	08017384 	.word	0x08017384

08009fe8 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	781a      	ldrb	r2, [r3, #0]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	785b      	ldrb	r3, [r3, #1]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d101      	bne.n	800a002 <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 8009ffe:	2301      	movs	r3, #1
 800a000:	e015      	b.n	800a02e <RB_Read+0x46>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	785b      	ldrb	r3, [r3, #1]
 800a006:	461a      	mov	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4413      	add	r3, r2
 800a00c:	789a      	ldrb	r2, [r3, #2]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	785b      	ldrb	r3, [r3, #1]
 800a016:	3301      	adds	r3, #1
 800a018:	425a      	negs	r2, r3
 800a01a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a01e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a022:	bf58      	it	pl
 800a024:	4253      	negpl	r3, r2
 800a026:	b2da      	uxtb	r2, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	370c      	adds	r7, #12
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 800a03a:	b480      	push	{r7}
 800a03c:	b085      	sub	sp, #20
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	460b      	mov	r3, r1
 800a044:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	3301      	adds	r3, #1
 800a04c:	425a      	negs	r2, r3
 800a04e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a052:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a056:	bf58      	it	pl
 800a058:	4253      	negpl	r3, r2
 800a05a:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	785b      	ldrb	r3, [r3, #1]
 800a060:	7bfa      	ldrb	r2, [r7, #15]
 800a062:	429a      	cmp	r2, r3
 800a064:	d101      	bne.n	800a06a <RB_Write+0x30>
	{
		return RB_ERROR; // No free space error
 800a066:	2301      	movs	r3, #1
 800a068:	e00a      	b.n	800a080 <RB_Write+0x46>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	461a      	mov	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4413      	add	r3, r2
 800a074:	78fa      	ldrb	r2, [r7, #3]
 800a076:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	7bfa      	ldrb	r2, [r7, #15]
 800a07c:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3714      	adds	r7, #20
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi5;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800a090:	4b17      	ldr	r3, [pc, #92]	; (800a0f0 <MX_SPI1_Init+0x64>)
 800a092:	4a18      	ldr	r2, [pc, #96]	; (800a0f4 <MX_SPI1_Init+0x68>)
 800a094:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a096:	4b16      	ldr	r3, [pc, #88]	; (800a0f0 <MX_SPI1_Init+0x64>)
 800a098:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a09c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a09e:	4b14      	ldr	r3, [pc, #80]	; (800a0f0 <MX_SPI1_Init+0x64>)
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a0a4:	4b12      	ldr	r3, [pc, #72]	; (800a0f0 <MX_SPI1_Init+0x64>)
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a0aa:	4b11      	ldr	r3, [pc, #68]	; (800a0f0 <MX_SPI1_Init+0x64>)
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a0b0:	4b0f      	ldr	r3, [pc, #60]	; (800a0f0 <MX_SPI1_Init+0x64>)
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a0b6:	4b0e      	ldr	r3, [pc, #56]	; (800a0f0 <MX_SPI1_Init+0x64>)
 800a0b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800a0be:	4b0c      	ldr	r3, [pc, #48]	; (800a0f0 <MX_SPI1_Init+0x64>)
 800a0c0:	2210      	movs	r2, #16
 800a0c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a0c4:	4b0a      	ldr	r3, [pc, #40]	; (800a0f0 <MX_SPI1_Init+0x64>)
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a0ca:	4b09      	ldr	r3, [pc, #36]	; (800a0f0 <MX_SPI1_Init+0x64>)
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a0d0:	4b07      	ldr	r3, [pc, #28]	; (800a0f0 <MX_SPI1_Init+0x64>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800a0d6:	4b06      	ldr	r3, [pc, #24]	; (800a0f0 <MX_SPI1_Init+0x64>)
 800a0d8:	220a      	movs	r2, #10
 800a0da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a0dc:	4804      	ldr	r0, [pc, #16]	; (800a0f0 <MX_SPI1_Init+0x64>)
 800a0de:	f005 fd47 	bl	800fb70 <HAL_SPI_Init>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d001      	beq.n	800a0ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800a0e8:	f7fc f8ca 	bl	8006280 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a0ec:	bf00      	nop
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	20000944 	.word	0x20000944
 800a0f4:	40013000 	.word	0x40013000

0800a0f8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800a0fc:	4b17      	ldr	r3, [pc, #92]	; (800a15c <MX_SPI3_Init+0x64>)
 800a0fe:	4a18      	ldr	r2, [pc, #96]	; (800a160 <MX_SPI3_Init+0x68>)
 800a100:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800a102:	4b16      	ldr	r3, [pc, #88]	; (800a15c <MX_SPI3_Init+0x64>)
 800a104:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a108:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800a10a:	4b14      	ldr	r3, [pc, #80]	; (800a15c <MX_SPI3_Init+0x64>)
 800a10c:	2200      	movs	r2, #0
 800a10e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800a110:	4b12      	ldr	r3, [pc, #72]	; (800a15c <MX_SPI3_Init+0x64>)
 800a112:	2200      	movs	r2, #0
 800a114:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a116:	4b11      	ldr	r3, [pc, #68]	; (800a15c <MX_SPI3_Init+0x64>)
 800a118:	2200      	movs	r2, #0
 800a11a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a11c:	4b0f      	ldr	r3, [pc, #60]	; (800a15c <MX_SPI3_Init+0x64>)
 800a11e:	2200      	movs	r2, #0
 800a120:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800a122:	4b0e      	ldr	r3, [pc, #56]	; (800a15c <MX_SPI3_Init+0x64>)
 800a124:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a128:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800a12a:	4b0c      	ldr	r3, [pc, #48]	; (800a15c <MX_SPI3_Init+0x64>)
 800a12c:	2220      	movs	r2, #32
 800a12e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a130:	4b0a      	ldr	r3, [pc, #40]	; (800a15c <MX_SPI3_Init+0x64>)
 800a132:	2200      	movs	r2, #0
 800a134:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800a136:	4b09      	ldr	r3, [pc, #36]	; (800a15c <MX_SPI3_Init+0x64>)
 800a138:	2200      	movs	r2, #0
 800a13a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a13c:	4b07      	ldr	r3, [pc, #28]	; (800a15c <MX_SPI3_Init+0x64>)
 800a13e:	2200      	movs	r2, #0
 800a140:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800a142:	4b06      	ldr	r3, [pc, #24]	; (800a15c <MX_SPI3_Init+0x64>)
 800a144:	220a      	movs	r2, #10
 800a146:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800a148:	4804      	ldr	r0, [pc, #16]	; (800a15c <MX_SPI3_Init+0x64>)
 800a14a:	f005 fd11 	bl	800fb70 <HAL_SPI_Init>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d001      	beq.n	800a158 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800a154:	f7fc f894 	bl	8006280 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800a158:	bf00      	nop
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	200008ec 	.word	0x200008ec
 800a160:	40003c00 	.word	0x40003c00

0800a164 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800a168:	4b17      	ldr	r3, [pc, #92]	; (800a1c8 <MX_SPI5_Init+0x64>)
 800a16a:	4a18      	ldr	r2, [pc, #96]	; (800a1cc <MX_SPI5_Init+0x68>)
 800a16c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800a16e:	4b16      	ldr	r3, [pc, #88]	; (800a1c8 <MX_SPI5_Init+0x64>)
 800a170:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a174:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800a176:	4b14      	ldr	r3, [pc, #80]	; (800a1c8 <MX_SPI5_Init+0x64>)
 800a178:	2200      	movs	r2, #0
 800a17a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800a17c:	4b12      	ldr	r3, [pc, #72]	; (800a1c8 <MX_SPI5_Init+0x64>)
 800a17e:	2200      	movs	r2, #0
 800a180:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a182:	4b11      	ldr	r3, [pc, #68]	; (800a1c8 <MX_SPI5_Init+0x64>)
 800a184:	2200      	movs	r2, #0
 800a186:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a188:	4b0f      	ldr	r3, [pc, #60]	; (800a1c8 <MX_SPI5_Init+0x64>)
 800a18a:	2200      	movs	r2, #0
 800a18c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800a18e:	4b0e      	ldr	r3, [pc, #56]	; (800a1c8 <MX_SPI5_Init+0x64>)
 800a190:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a194:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a196:	4b0c      	ldr	r3, [pc, #48]	; (800a1c8 <MX_SPI5_Init+0x64>)
 800a198:	2200      	movs	r2, #0
 800a19a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a19c:	4b0a      	ldr	r3, [pc, #40]	; (800a1c8 <MX_SPI5_Init+0x64>)
 800a19e:	2200      	movs	r2, #0
 800a1a0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800a1a2:	4b09      	ldr	r3, [pc, #36]	; (800a1c8 <MX_SPI5_Init+0x64>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1a8:	4b07      	ldr	r3, [pc, #28]	; (800a1c8 <MX_SPI5_Init+0x64>)
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800a1ae:	4b06      	ldr	r3, [pc, #24]	; (800a1c8 <MX_SPI5_Init+0x64>)
 800a1b0:	220a      	movs	r2, #10
 800a1b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800a1b4:	4804      	ldr	r0, [pc, #16]	; (800a1c8 <MX_SPI5_Init+0x64>)
 800a1b6:	f005 fcdb 	bl	800fb70 <HAL_SPI_Init>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800a1c0:	f7fc f85e 	bl	8006280 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800a1c4:	bf00      	nop
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	20000894 	.word	0x20000894
 800a1cc:	40015000 	.word	0x40015000

0800a1d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b08e      	sub	sp, #56	; 0x38
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1dc:	2200      	movs	r2, #0
 800a1de:	601a      	str	r2, [r3, #0]
 800a1e0:	605a      	str	r2, [r3, #4]
 800a1e2:	609a      	str	r2, [r3, #8]
 800a1e4:	60da      	str	r2, [r3, #12]
 800a1e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a5a      	ldr	r2, [pc, #360]	; (800a358 <HAL_SPI_MspInit+0x188>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d12c      	bne.n	800a24c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	623b      	str	r3, [r7, #32]
 800a1f6:	4b59      	ldr	r3, [pc, #356]	; (800a35c <HAL_SPI_MspInit+0x18c>)
 800a1f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1fa:	4a58      	ldr	r2, [pc, #352]	; (800a35c <HAL_SPI_MspInit+0x18c>)
 800a1fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a200:	6453      	str	r3, [r2, #68]	; 0x44
 800a202:	4b56      	ldr	r3, [pc, #344]	; (800a35c <HAL_SPI_MspInit+0x18c>)
 800a204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a206:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a20a:	623b      	str	r3, [r7, #32]
 800a20c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a20e:	2300      	movs	r3, #0
 800a210:	61fb      	str	r3, [r7, #28]
 800a212:	4b52      	ldr	r3, [pc, #328]	; (800a35c <HAL_SPI_MspInit+0x18c>)
 800a214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a216:	4a51      	ldr	r2, [pc, #324]	; (800a35c <HAL_SPI_MspInit+0x18c>)
 800a218:	f043 0301 	orr.w	r3, r3, #1
 800a21c:	6313      	str	r3, [r2, #48]	; 0x30
 800a21e:	4b4f      	ldr	r3, [pc, #316]	; (800a35c <HAL_SPI_MspInit+0x18c>)
 800a220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a222:	f003 0301 	and.w	r3, r3, #1
 800a226:	61fb      	str	r3, [r7, #28]
 800a228:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_ILI9341_Pin|SPI1_MISO_ILI9341_Pin|SPI1_MOSI_ILI9341_Pin;
 800a22a:	23e0      	movs	r3, #224	; 0xe0
 800a22c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a22e:	2302      	movs	r3, #2
 800a230:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a232:	2300      	movs	r3, #0
 800a234:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a236:	2303      	movs	r3, #3
 800a238:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a23a:	2305      	movs	r3, #5
 800a23c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a23e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a242:	4619      	mov	r1, r3
 800a244:	4846      	ldr	r0, [pc, #280]	; (800a360 <HAL_SPI_MspInit+0x190>)
 800a246:	f001 fd5f 	bl	800bd08 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800a24a:	e081      	b.n	800a350 <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI3)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a44      	ldr	r2, [pc, #272]	; (800a364 <HAL_SPI_MspInit+0x194>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d12c      	bne.n	800a2b0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a256:	2300      	movs	r3, #0
 800a258:	61bb      	str	r3, [r7, #24]
 800a25a:	4b40      	ldr	r3, [pc, #256]	; (800a35c <HAL_SPI_MspInit+0x18c>)
 800a25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25e:	4a3f      	ldr	r2, [pc, #252]	; (800a35c <HAL_SPI_MspInit+0x18c>)
 800a260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a264:	6413      	str	r3, [r2, #64]	; 0x40
 800a266:	4b3d      	ldr	r3, [pc, #244]	; (800a35c <HAL_SPI_MspInit+0x18c>)
 800a268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a26e:	61bb      	str	r3, [r7, #24]
 800a270:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a272:	2300      	movs	r3, #0
 800a274:	617b      	str	r3, [r7, #20]
 800a276:	4b39      	ldr	r3, [pc, #228]	; (800a35c <HAL_SPI_MspInit+0x18c>)
 800a278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a27a:	4a38      	ldr	r2, [pc, #224]	; (800a35c <HAL_SPI_MspInit+0x18c>)
 800a27c:	f043 0302 	orr.w	r3, r3, #2
 800a280:	6313      	str	r3, [r2, #48]	; 0x30
 800a282:	4b36      	ldr	r3, [pc, #216]	; (800a35c <HAL_SPI_MspInit+0x18c>)
 800a284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a286:	f003 0302 	and.w	r3, r3, #2
 800a28a:	617b      	str	r3, [r7, #20]
 800a28c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SPI3_SCK_XPT2046_Pin|SPI3_MISO_XPT_2046_Pin|SPI3_MOSI_XPT2046_Pin;
 800a28e:	2338      	movs	r3, #56	; 0x38
 800a290:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a292:	2302      	movs	r3, #2
 800a294:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a296:	2300      	movs	r3, #0
 800a298:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a29a:	2303      	movs	r3, #3
 800a29c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a29e:	2306      	movs	r3, #6
 800a2a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a2a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	482f      	ldr	r0, [pc, #188]	; (800a368 <HAL_SPI_MspInit+0x198>)
 800a2aa:	f001 fd2d 	bl	800bd08 <HAL_GPIO_Init>
}
 800a2ae:	e04f      	b.n	800a350 <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI5)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a2d      	ldr	r2, [pc, #180]	; (800a36c <HAL_SPI_MspInit+0x19c>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d14a      	bne.n	800a350 <HAL_SPI_MspInit+0x180>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	613b      	str	r3, [r7, #16]
 800a2be:	4b27      	ldr	r3, [pc, #156]	; (800a35c <HAL_SPI_MspInit+0x18c>)
 800a2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2c2:	4a26      	ldr	r2, [pc, #152]	; (800a35c <HAL_SPI_MspInit+0x18c>)
 800a2c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2c8:	6453      	str	r3, [r2, #68]	; 0x44
 800a2ca:	4b24      	ldr	r3, [pc, #144]	; (800a35c <HAL_SPI_MspInit+0x18c>)
 800a2cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2d2:	613b      	str	r3, [r7, #16]
 800a2d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	60fb      	str	r3, [r7, #12]
 800a2da:	4b20      	ldr	r3, [pc, #128]	; (800a35c <HAL_SPI_MspInit+0x18c>)
 800a2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2de:	4a1f      	ldr	r2, [pc, #124]	; (800a35c <HAL_SPI_MspInit+0x18c>)
 800a2e0:	f043 0302 	orr.w	r3, r3, #2
 800a2e4:	6313      	str	r3, [r2, #48]	; 0x30
 800a2e6:	4b1d      	ldr	r3, [pc, #116]	; (800a35c <HAL_SPI_MspInit+0x18c>)
 800a2e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ea:	f003 0302 	and.w	r3, r3, #2
 800a2ee:	60fb      	str	r3, [r7, #12]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	60bb      	str	r3, [r7, #8]
 800a2f6:	4b19      	ldr	r3, [pc, #100]	; (800a35c <HAL_SPI_MspInit+0x18c>)
 800a2f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2fa:	4a18      	ldr	r2, [pc, #96]	; (800a35c <HAL_SPI_MspInit+0x18c>)
 800a2fc:	f043 0301 	orr.w	r3, r3, #1
 800a300:	6313      	str	r3, [r2, #48]	; 0x30
 800a302:	4b16      	ldr	r3, [pc, #88]	; (800a35c <HAL_SPI_MspInit+0x18c>)
 800a304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a306:	f003 0301 	and.w	r3, r3, #1
 800a30a:	60bb      	str	r3, [r7, #8]
 800a30c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_nRF_Pin;
 800a30e:	2301      	movs	r3, #1
 800a310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a312:	2302      	movs	r3, #2
 800a314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a316:	2300      	movs	r3, #0
 800a318:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a31a:	2303      	movs	r3, #3
 800a31c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800a31e:	2306      	movs	r3, #6
 800a320:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI5_SCK_nRF_GPIO_Port, &GPIO_InitStruct);
 800a322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a326:	4619      	mov	r1, r3
 800a328:	480f      	ldr	r0, [pc, #60]	; (800a368 <HAL_SPI_MspInit+0x198>)
 800a32a:	f001 fced 	bl	800bd08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI5_MOSI_nRF_Pin|SPI5_MISO_nRF_Pin;
 800a32e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a334:	2302      	movs	r3, #2
 800a336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a338:	2300      	movs	r3, #0
 800a33a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a33c:	2303      	movs	r3, #3
 800a33e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800a340:	2306      	movs	r3, #6
 800a342:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a348:	4619      	mov	r1, r3
 800a34a:	4805      	ldr	r0, [pc, #20]	; (800a360 <HAL_SPI_MspInit+0x190>)
 800a34c:	f001 fcdc 	bl	800bd08 <HAL_GPIO_Init>
}
 800a350:	bf00      	nop
 800a352:	3738      	adds	r7, #56	; 0x38
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	40013000 	.word	0x40013000
 800a35c:	40023800 	.word	0x40023800
 800a360:	40020000 	.word	0x40020000
 800a364:	40003c00 	.word	0x40003c00
 800a368:	40020400 	.word	0x40020400
 800a36c:	40015000 	.word	0x40015000

0800a370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a376:	2300      	movs	r3, #0
 800a378:	607b      	str	r3, [r7, #4]
 800a37a:	4b10      	ldr	r3, [pc, #64]	; (800a3bc <HAL_MspInit+0x4c>)
 800a37c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a37e:	4a0f      	ldr	r2, [pc, #60]	; (800a3bc <HAL_MspInit+0x4c>)
 800a380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a384:	6453      	str	r3, [r2, #68]	; 0x44
 800a386:	4b0d      	ldr	r3, [pc, #52]	; (800a3bc <HAL_MspInit+0x4c>)
 800a388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a38a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a38e:	607b      	str	r3, [r7, #4]
 800a390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a392:	2300      	movs	r3, #0
 800a394:	603b      	str	r3, [r7, #0]
 800a396:	4b09      	ldr	r3, [pc, #36]	; (800a3bc <HAL_MspInit+0x4c>)
 800a398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39a:	4a08      	ldr	r2, [pc, #32]	; (800a3bc <HAL_MspInit+0x4c>)
 800a39c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3a0:	6413      	str	r3, [r2, #64]	; 0x40
 800a3a2:	4b06      	ldr	r3, [pc, #24]	; (800a3bc <HAL_MspInit+0x4c>)
 800a3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3aa:	603b      	str	r3, [r7, #0]
 800a3ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a3ae:	bf00      	nop
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	40023800 	.word	0x40023800

0800a3c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a3c4:	e7fe      	b.n	800a3c4 <NMI_Handler+0x4>

0800a3c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a3ca:	e7fe      	b.n	800a3ca <HardFault_Handler+0x4>

0800a3cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a3d0:	e7fe      	b.n	800a3d0 <MemManage_Handler+0x4>

0800a3d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a3d6:	e7fe      	b.n	800a3d6 <BusFault_Handler+0x4>

0800a3d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a3dc:	e7fe      	b.n	800a3dc <UsageFault_Handler+0x4>

0800a3de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a3de:	b480      	push	{r7}
 800a3e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a3e2:	bf00      	nop
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a3f0:	bf00      	nop
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a3fe:	bf00      	nop
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a40c:	f000 fe88 	bl	800b120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a410:	bf00      	nop
 800a412:	bd80      	pop	{r7, pc}

0800a414 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USART2_TX_2uC_Pin);
 800a418:	2004      	movs	r0, #4
 800a41a:	f001 fe45 	bl	800c0a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800a41e:	bf00      	nop
 800a420:	bd80      	pop	{r7, pc}

0800a422 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_DS3231_RTC_Pin);
 800a426:	2010      	movs	r0, #16
 800a428:	f001 fe3e 	bl	800c0a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800a42c:	bf00      	nop
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800a434:	4802      	ldr	r0, [pc, #8]	; (800a440 <DMA1_Stream0_IRQHandler+0x10>)
 800a436:	f001 f9ef 	bl	800b818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800a43a:	bf00      	nop
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	2000049c 	.word	0x2000049c

0800a444 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800a448:	4802      	ldr	r0, [pc, #8]	; (800a454 <DMA1_Stream1_IRQHandler+0x10>)
 800a44a:	f001 f9e5 	bl	800b818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800a44e:	bf00      	nop
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	200003e8 	.word	0x200003e8

0800a458 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 800a45c:	4802      	ldr	r0, [pc, #8]	; (800a468 <DMA1_Stream5_IRQHandler+0x10>)
 800a45e:	f000 faa5 	bl	800a9ac <UARTDMA_DmaReceiveIrqHandler>
	return;
 800a462:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	200004fc 	.word	0x200004fc

0800a46c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800a470:	4802      	ldr	r0, [pc, #8]	; (800a47c <DMA1_Stream6_IRQHandler+0x10>)
 800a472:	f001 f9d1 	bl	800b818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800a476:	bf00      	nop
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	20000b94 	.word	0x20000b94

0800a480 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 800a484:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a488:	f001 fe0e 	bl	800c0a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800a48c:	bf00      	nop
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800a494:	4802      	ldr	r0, [pc, #8]	; (800a4a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800a496:	f006 f994 	bl	80107c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800a49a:	bf00      	nop
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	2000099c 	.word	0x2000099c

0800a4a4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800a4a8:	4802      	ldr	r0, [pc, #8]	; (800a4b4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800a4aa:	f006 f98a 	bl	80107c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800a4ae:	bf00      	nop
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	200009e4 	.word	0x200009e4

0800a4b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800a4bc:	4802      	ldr	r0, [pc, #8]	; (800a4c8 <I2C1_EV_IRQHandler+0x10>)
 800a4be:	f002 fd93 	bl	800cfe8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800a4c2:	bf00      	nop
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	20000448 	.word	0x20000448

0800a4cc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800a4d0:	4802      	ldr	r0, [pc, #8]	; (800a4dc <I2C1_ER_IRQHandler+0x10>)
 800a4d2:	f002 fefa 	bl	800d2ca <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800a4d6:	bf00      	nop
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	20000448 	.word	0x20000448

0800a4e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma1);
 800a4e4:	4803      	ldr	r0, [pc, #12]	; (800a4f4 <USART1_IRQHandler+0x14>)
 800a4e6:	f000 fa37 	bl	800a958 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a4ea:	4803      	ldr	r0, [pc, #12]	; (800a4f8 <USART1_IRQHandler+0x18>)
 800a4ec:	f006 fcbe 	bl	8010e6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a4f0:	bf00      	nop
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	200006c8 	.word	0x200006c8
 800a4f8:	20000bf4 	.word	0x20000bf4

0800a4fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 800a500:	4803      	ldr	r0, [pc, #12]	; (800a510 <USART2_IRQHandler+0x14>)
 800a502:	f000 fa29 	bl	800a958 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a506:	4803      	ldr	r0, [pc, #12]	; (800a514 <USART2_IRQHandler+0x18>)
 800a508:	f006 fcb0 	bl	8010e6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a50c:	bf00      	nop
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	200004fc 	.word	0x200004fc
 800a514:	20000c38 	.word	0x20000c38

0800a518 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800a51c:	4802      	ldr	r0, [pc, #8]	; (800a528 <SPI3_IRQHandler+0x10>)
 800a51e:	f005 fd53 	bl	800ffc8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800a522:	bf00      	nop
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	200008ec 	.word	0x200008ec

0800a52c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma1);
 800a530:	4802      	ldr	r0, [pc, #8]	; (800a53c <DMA2_Stream2_IRQHandler+0x10>)
 800a532:	f000 fa3b 	bl	800a9ac <UARTDMA_DmaReceiveIrqHandler>
	return;
 800a536:	bf00      	nop
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	200006c8 	.word	0x200006c8

0800a540 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800a544:	4802      	ldr	r0, [pc, #8]	; (800a550 <DMA2_Stream7_IRQHandler+0x10>)
 800a546:	f001 f967 	bl	800b818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800a54a:	bf00      	nop
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	20000ad4 	.word	0x20000ad4

0800a554 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a554:	b480      	push	{r7}
 800a556:	af00      	add	r7, sp, #0
	return 1;
 800a558:	2301      	movs	r3, #1
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <_kill>:

int _kill(int pid, int sig)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a56e:	f007 fcc9 	bl	8011f04 <__errno>
 800a572:	4603      	mov	r3, r0
 800a574:	2216      	movs	r2, #22
 800a576:	601a      	str	r2, [r3, #0]
	return -1;
 800a578:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <_exit>:

void _exit (int status)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a58c:	f04f 31ff 	mov.w	r1, #4294967295
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f7ff ffe7 	bl	800a564 <_kill>
	while (1) {}		/* Make sure we hang here */
 800a596:	e7fe      	b.n	800a596 <_exit+0x12>

0800a598 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b086      	sub	sp, #24
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	617b      	str	r3, [r7, #20]
 800a5a8:	e00a      	b.n	800a5c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a5aa:	f3af 8000 	nop.w
 800a5ae:	4601      	mov	r1, r0
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	1c5a      	adds	r2, r3, #1
 800a5b4:	60ba      	str	r2, [r7, #8]
 800a5b6:	b2ca      	uxtb	r2, r1
 800a5b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	617b      	str	r3, [r7, #20]
 800a5c0:	697a      	ldr	r2, [r7, #20]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	dbf0      	blt.n	800a5aa <_read+0x12>
	}

return len;
 800a5c8:	687b      	ldr	r3, [r7, #4]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3718      	adds	r7, #24
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b086      	sub	sp, #24
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	60f8      	str	r0, [r7, #12]
 800a5da:	60b9      	str	r1, [r7, #8]
 800a5dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a5de:	2300      	movs	r3, #0
 800a5e0:	617b      	str	r3, [r7, #20]
 800a5e2:	e009      	b.n	800a5f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	1c5a      	adds	r2, r3, #1
 800a5e8:	60ba      	str	r2, [r7, #8]
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	617b      	str	r3, [r7, #20]
 800a5f8:	697a      	ldr	r2, [r7, #20]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	dbf1      	blt.n	800a5e4 <_write+0x12>
	}
	return len;
 800a600:	687b      	ldr	r3, [r7, #4]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3718      	adds	r7, #24
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <_close>:

int _close(int file)
{
 800a60a:	b480      	push	{r7}
 800a60c:	b083      	sub	sp, #12
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
	return -1;
 800a612:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a616:	4618      	mov	r0, r3
 800a618:	370c      	adds	r7, #12
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr

0800a622 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a622:	b480      	push	{r7}
 800a624:	b083      	sub	sp, #12
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
 800a62a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a632:	605a      	str	r2, [r3, #4]
	return 0;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr

0800a642 <_isatty>:

int _isatty(int file)
{
 800a642:	b480      	push	{r7}
 800a644:	b083      	sub	sp, #12
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
	return 1;
 800a64a:	2301      	movs	r3, #1
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
	return 0;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3714      	adds	r7, #20
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
	...

0800a674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b086      	sub	sp, #24
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a67c:	4a14      	ldr	r2, [pc, #80]	; (800a6d0 <_sbrk+0x5c>)
 800a67e:	4b15      	ldr	r3, [pc, #84]	; (800a6d4 <_sbrk+0x60>)
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a688:	4b13      	ldr	r3, [pc, #76]	; (800a6d8 <_sbrk+0x64>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d102      	bne.n	800a696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a690:	4b11      	ldr	r3, [pc, #68]	; (800a6d8 <_sbrk+0x64>)
 800a692:	4a12      	ldr	r2, [pc, #72]	; (800a6dc <_sbrk+0x68>)
 800a694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a696:	4b10      	ldr	r3, [pc, #64]	; (800a6d8 <_sbrk+0x64>)
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4413      	add	r3, r2
 800a69e:	693a      	ldr	r2, [r7, #16]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d207      	bcs.n	800a6b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a6a4:	f007 fc2e 	bl	8011f04 <__errno>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	220c      	movs	r2, #12
 800a6ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a6ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b2:	e009      	b.n	800a6c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a6b4:	4b08      	ldr	r3, [pc, #32]	; (800a6d8 <_sbrk+0x64>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a6ba:	4b07      	ldr	r3, [pc, #28]	; (800a6d8 <_sbrk+0x64>)
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	4a05      	ldr	r2, [pc, #20]	; (800a6d8 <_sbrk+0x64>)
 800a6c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3718      	adds	r7, #24
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	20020000 	.word	0x20020000
 800a6d4:	00000400 	.word	0x00000400
 800a6d8:	200002c0 	.word	0x200002c0
 800a6dc:	20000c90 	.word	0x20000c90

0800a6e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a6e4:	4b06      	ldr	r3, [pc, #24]	; (800a700 <SystemInit+0x20>)
 800a6e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ea:	4a05      	ldr	r2, [pc, #20]	; (800a700 <SystemInit+0x20>)
 800a6ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a6f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a6f4:	bf00      	nop
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	e000ed00 	.word	0xe000ed00

0800a704 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b08c      	sub	sp, #48	; 0x30
 800a708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a70a:	f107 030c 	add.w	r3, r7, #12
 800a70e:	2224      	movs	r2, #36	; 0x24
 800a710:	2100      	movs	r1, #0
 800a712:	4618      	mov	r0, r3
 800a714:	f007 fc20 	bl	8011f58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a718:	1d3b      	adds	r3, r7, #4
 800a71a:	2200      	movs	r2, #0
 800a71c:	601a      	str	r2, [r3, #0]
 800a71e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a720:	4b21      	ldr	r3, [pc, #132]	; (800a7a8 <MX_TIM2_Init+0xa4>)
 800a722:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a726:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800a728:	4b1f      	ldr	r3, [pc, #124]	; (800a7a8 <MX_TIM2_Init+0xa4>)
 800a72a:	2200      	movs	r2, #0
 800a72c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a72e:	4b1e      	ldr	r3, [pc, #120]	; (800a7a8 <MX_TIM2_Init+0xa4>)
 800a730:	2200      	movs	r2, #0
 800a732:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800a734:	4b1c      	ldr	r3, [pc, #112]	; (800a7a8 <MX_TIM2_Init+0xa4>)
 800a736:	f04f 32ff 	mov.w	r2, #4294967295
 800a73a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a73c:	4b1a      	ldr	r3, [pc, #104]	; (800a7a8 <MX_TIM2_Init+0xa4>)
 800a73e:	2200      	movs	r2, #0
 800a740:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a742:	4b19      	ldr	r3, [pc, #100]	; (800a7a8 <MX_TIM2_Init+0xa4>)
 800a744:	2200      	movs	r2, #0
 800a746:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800a748:	2301      	movs	r3, #1
 800a74a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a74c:	2300      	movs	r3, #0
 800a74e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a750:	2301      	movs	r3, #1
 800a752:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a754:	2300      	movs	r3, #0
 800a756:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a758:	2300      	movs	r3, #0
 800a75a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a75c:	2300      	movs	r3, #0
 800a75e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a760:	2301      	movs	r3, #1
 800a762:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a764:	2300      	movs	r3, #0
 800a766:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800a768:	2300      	movs	r3, #0
 800a76a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800a76c:	f107 030c 	add.w	r3, r7, #12
 800a770:	4619      	mov	r1, r3
 800a772:	480d      	ldr	r0, [pc, #52]	; (800a7a8 <MX_TIM2_Init+0xa4>)
 800a774:	f005 fef1 	bl	801055a <HAL_TIM_Encoder_Init>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d001      	beq.n	800a782 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800a77e:	f7fb fd7f 	bl	8006280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a782:	2300      	movs	r3, #0
 800a784:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a786:	2300      	movs	r3, #0
 800a788:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a78a:	1d3b      	adds	r3, r7, #4
 800a78c:	4619      	mov	r1, r3
 800a78e:	4806      	ldr	r0, [pc, #24]	; (800a7a8 <MX_TIM2_Init+0xa4>)
 800a790:	f006 f9ee 	bl	8010b70 <HAL_TIMEx_MasterConfigSynchronization>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d001      	beq.n	800a79e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800a79a:	f7fb fd71 	bl	8006280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a79e:	bf00      	nop
 800a7a0:	3730      	adds	r7, #48	; 0x30
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20000a2c 	.word	0x20000a2c

0800a7ac <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800a7b0:	4b0e      	ldr	r3, [pc, #56]	; (800a7ec <MX_TIM10_Init+0x40>)
 800a7b2:	4a0f      	ldr	r2, [pc, #60]	; (800a7f0 <MX_TIM10_Init+0x44>)
 800a7b4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 800a7b6:	4b0d      	ldr	r3, [pc, #52]	; (800a7ec <MX_TIM10_Init+0x40>)
 800a7b8:	f242 720f 	movw	r2, #9999	; 0x270f
 800a7bc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a7be:	4b0b      	ldr	r3, [pc, #44]	; (800a7ec <MX_TIM10_Init+0x40>)
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 800a7c4:	4b09      	ldr	r3, [pc, #36]	; (800a7ec <MX_TIM10_Init+0x40>)
 800a7c6:	f242 720f 	movw	r2, #9999	; 0x270f
 800a7ca:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a7cc:	4b07      	ldr	r3, [pc, #28]	; (800a7ec <MX_TIM10_Init+0x40>)
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a7d2:	4b06      	ldr	r3, [pc, #24]	; (800a7ec <MX_TIM10_Init+0x40>)
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800a7d8:	4804      	ldr	r0, [pc, #16]	; (800a7ec <MX_TIM10_Init+0x40>)
 800a7da:	f005 fddd 	bl	8010398 <HAL_TIM_Base_Init>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d001      	beq.n	800a7e8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800a7e4:	f7fb fd4c 	bl	8006280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800a7e8:	bf00      	nop
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	2000099c 	.word	0x2000099c
 800a7f0:	40014400 	.word	0x40014400

0800a7f4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800a7f8:	4b0f      	ldr	r3, [pc, #60]	; (800a838 <MX_TIM11_Init+0x44>)
 800a7fa:	4a10      	ldr	r2, [pc, #64]	; (800a83c <MX_TIM11_Init+0x48>)
 800a7fc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 800a7fe:	4b0e      	ldr	r3, [pc, #56]	; (800a838 <MX_TIM11_Init+0x44>)
 800a800:	f643 2297 	movw	r2, #14999	; 0x3a97
 800a804:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a806:	4b0c      	ldr	r3, [pc, #48]	; (800a838 <MX_TIM11_Init+0x44>)
 800a808:	2200      	movs	r2, #0
 800a80a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 800a80c:	4b0a      	ldr	r3, [pc, #40]	; (800a838 <MX_TIM11_Init+0x44>)
 800a80e:	f247 522f 	movw	r2, #29999	; 0x752f
 800a812:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800a814:	4b08      	ldr	r3, [pc, #32]	; (800a838 <MX_TIM11_Init+0x44>)
 800a816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a81a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a81c:	4b06      	ldr	r3, [pc, #24]	; (800a838 <MX_TIM11_Init+0x44>)
 800a81e:	2200      	movs	r2, #0
 800a820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800a822:	4805      	ldr	r0, [pc, #20]	; (800a838 <MX_TIM11_Init+0x44>)
 800a824:	f005 fdb8 	bl	8010398 <HAL_TIM_Base_Init>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d001      	beq.n	800a832 <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 800a82e:	f7fb fd27 	bl	8006280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800a832:	bf00      	nop
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	200009e4 	.word	0x200009e4
 800a83c:	40014800 	.word	0x40014800

0800a840 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b08a      	sub	sp, #40	; 0x28
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a848:	f107 0314 	add.w	r3, r7, #20
 800a84c:	2200      	movs	r2, #0
 800a84e:	601a      	str	r2, [r3, #0]
 800a850:	605a      	str	r2, [r3, #4]
 800a852:	609a      	str	r2, [r3, #8]
 800a854:	60da      	str	r2, [r3, #12]
 800a856:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a860:	d12b      	bne.n	800a8ba <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a862:	2300      	movs	r3, #0
 800a864:	613b      	str	r3, [r7, #16]
 800a866:	4b17      	ldr	r3, [pc, #92]	; (800a8c4 <HAL_TIM_Encoder_MspInit+0x84>)
 800a868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86a:	4a16      	ldr	r2, [pc, #88]	; (800a8c4 <HAL_TIM_Encoder_MspInit+0x84>)
 800a86c:	f043 0301 	orr.w	r3, r3, #1
 800a870:	6413      	str	r3, [r2, #64]	; 0x40
 800a872:	4b14      	ldr	r3, [pc, #80]	; (800a8c4 <HAL_TIM_Encoder_MspInit+0x84>)
 800a874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	613b      	str	r3, [r7, #16]
 800a87c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a87e:	2300      	movs	r3, #0
 800a880:	60fb      	str	r3, [r7, #12]
 800a882:	4b10      	ldr	r3, [pc, #64]	; (800a8c4 <HAL_TIM_Encoder_MspInit+0x84>)
 800a884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a886:	4a0f      	ldr	r2, [pc, #60]	; (800a8c4 <HAL_TIM_Encoder_MspInit+0x84>)
 800a888:	f043 0301 	orr.w	r3, r3, #1
 800a88c:	6313      	str	r3, [r2, #48]	; 0x30
 800a88e:	4b0d      	ldr	r3, [pc, #52]	; (800a8c4 <HAL_TIM_Encoder_MspInit+0x84>)
 800a890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a892:	f003 0301 	and.w	r3, r3, #1
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_ENC_DT_Pin|TIM2_ENC_CLK_Pin;
 800a89a:	2303      	movs	r3, #3
 800a89c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a89e:	2302      	movs	r3, #2
 800a8a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8ae:	f107 0314 	add.w	r3, r7, #20
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	4804      	ldr	r0, [pc, #16]	; (800a8c8 <HAL_TIM_Encoder_MspInit+0x88>)
 800a8b6:	f001 fa27 	bl	800bd08 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800a8ba:	bf00      	nop
 800a8bc:	3728      	adds	r7, #40	; 0x28
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	40023800 	.word	0x40023800
 800a8c8:	40020000 	.word	0x40020000

0800a8cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a1c      	ldr	r2, [pc, #112]	; (800a94c <HAL_TIM_Base_MspInit+0x80>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d116      	bne.n	800a90c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800a8de:	2300      	movs	r3, #0
 800a8e0:	60fb      	str	r3, [r7, #12]
 800a8e2:	4b1b      	ldr	r3, [pc, #108]	; (800a950 <HAL_TIM_Base_MspInit+0x84>)
 800a8e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8e6:	4a1a      	ldr	r2, [pc, #104]	; (800a950 <HAL_TIM_Base_MspInit+0x84>)
 800a8e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8ec:	6453      	str	r3, [r2, #68]	; 0x44
 800a8ee:	4b18      	ldr	r3, [pc, #96]	; (800a950 <HAL_TIM_Base_MspInit+0x84>)
 800a8f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8f6:	60fb      	str	r3, [r7, #12]
 800a8f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	2019      	movs	r0, #25
 800a900:	f000 fd91 	bl	800b426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a904:	2019      	movs	r0, #25
 800a906:	f000 fdaa 	bl	800b45e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800a90a:	e01a      	b.n	800a942 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a10      	ldr	r2, [pc, #64]	; (800a954 <HAL_TIM_Base_MspInit+0x88>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d115      	bne.n	800a942 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800a916:	2300      	movs	r3, #0
 800a918:	60bb      	str	r3, [r7, #8]
 800a91a:	4b0d      	ldr	r3, [pc, #52]	; (800a950 <HAL_TIM_Base_MspInit+0x84>)
 800a91c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a91e:	4a0c      	ldr	r2, [pc, #48]	; (800a950 <HAL_TIM_Base_MspInit+0x84>)
 800a920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a924:	6453      	str	r3, [r2, #68]	; 0x44
 800a926:	4b0a      	ldr	r3, [pc, #40]	; (800a950 <HAL_TIM_Base_MspInit+0x84>)
 800a928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a92a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a92e:	60bb      	str	r3, [r7, #8]
 800a930:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800a932:	2200      	movs	r2, #0
 800a934:	2100      	movs	r1, #0
 800a936:	201a      	movs	r0, #26
 800a938:	f000 fd75 	bl	800b426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800a93c:	201a      	movs	r0, #26
 800a93e:	f000 fd8e 	bl	800b45e <HAL_NVIC_EnableIRQ>
}
 800a942:	bf00      	nop
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	40014400 	.word	0x40014400
 800a950:	40023800 	.word	0x40023800
 800a954:	40014800 	.word	0x40014800

0800a958 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 0310 	and.w	r3, r3, #16
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d017      	beq.n	800a9a0 <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f022 0201 	bic.w	r2, r2, #1
 800a99a:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	60fb      	str	r3, [r7, #12]
	}
}
 800a9a0:	bf00      	nop
 800a9a2:	3714      	adds	r7, #20
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9bc:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f003 0310 	and.w	r3, r3, #16
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d056      	beq.n	800aa7e <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9d8:	2220      	movs	r2, #32
 800a9da:	409a      	lsls	r2, r3
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800a9f0:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	3304      	adds	r3, #4
 800a9f6:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	82fb      	strh	r3, [r7, #22]
 800a9fc:	e01a      	b.n	800aa34 <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f103 0044 	add.w	r0, r3, #68	; 0x44
 800aa04:	8afb      	ldrh	r3, [r7, #22]
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	4413      	add	r3, r2
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	f7ff fb14 	bl	800a03a <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 800aa12:	8afb      	ldrh	r3, [r7, #22]
 800aa14:	68ba      	ldr	r2, [r7, #8]
 800aa16:	4413      	add	r3, r2
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	2b0a      	cmp	r3, #10
 800aa1c:	d107      	bne.n	800aa2e <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800aa24:	3301      	adds	r3, #1
 800aa26:	b2da      	uxtb	r2, r3
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 800aa2e:	8afb      	ldrh	r3, [r7, #22]
 800aa30:	3301      	adds	r3, #1
 800aa32:	82fb      	strh	r3, [r7, #22]
 800aa34:	8afa      	ldrh	r2, [r7, #22]
 800aa36:	89fb      	ldrh	r3, [r7, #14]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d3e0      	bcc.n	800a9fe <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa44:	223f      	movs	r2, #63	; 0x3f
 800aa46:	409a      	lsls	r2, r3
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	1d1a      	adds	r2, r3, #4
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2240      	movs	r2, #64	; 0x40
 800aa64:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f042 0201 	orr.w	r2, r2, #1
 800aa7c:	601a      	str	r2, [r3, #0]
	}
}
 800aa7e:	bf00      	nop
 800aa80:	3718      	adds	r7, #24
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b082      	sub	sp, #8
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	460b      	mov	r3, r1
 800aa90:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f203 1347 	addw	r3, r3, #327	; 0x147
 800aa98:	78fa      	ldrb	r2, [r7, #3]
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7ff facc 	bl	800a03a <RB_Write>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d001      	beq.n	800aaac <UARTDMA_PutCharToTxBuffer+0x26>
	{
		return 1; // Error code
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	e000      	b.n	800aaae <UARTDMA_PutCharToTxBuffer+0x28>
	}
	return 0; // Success code
 800aaac:	2300      	movs	r3, #0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3708      	adds	r7, #8
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b084      	sub	sp, #16
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
 800aabe:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d01f      	beq.n	800ab0e <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 800aace:	e013      	b.n	800aaf8 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	2b0a      	cmp	r3, #10
 800aad6:	d10c      	bne.n	800aaf2 <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800aae4:	3b01      	subs	r3, #1
 800aae6:	b2da      	uxtb	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				return 0; // Exit if end line
 800aaee:	2300      	movs	r3, #0
 800aaf0:	e00e      	b.n	800ab10 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	3344      	adds	r3, #68	; 0x44
 800aafc:	68f9      	ldr	r1, [r7, #12]
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7ff fa72 	bl	8009fe8 <RB_Read>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d0e2      	beq.n	800aad0 <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	e000      	b.n	800ab10 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 800ab0e:	2301      	movs	r3, #1
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3710      	adds	r7, #16
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 800ab26:	e012      	b.n	800ab4e <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 800ab28:	7afb      	ldrb	r3, [r7, #11]
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f7ff ffaa 	bl	800aa86 <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	3301      	adds	r3, #1
 800ab36:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 800ab38:	7afb      	ldrb	r3, [r7, #11]
 800ab3a:	2b0a      	cmp	r3, #10
 800ab3c:	d107      	bne.n	800ab4e <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800ab44:	3301      	adds	r3, #1
 800ab46:	b2da      	uxtb	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	72fb      	strb	r3, [r7, #11]
 800ab54:	7afb      	ldrb	r3, [r7, #11]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1e6      	bne.n	800ab28 <UARTDMA_Print+0x10>
		}
	}
}
 800ab5a:	bf00      	nop
 800ab5c:	bf00      	nop
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d001      	beq.n	800ab7a <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 800ab76:	2301      	movs	r3, #1
 800ab78:	e000      	b.n	800ab7c <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	370c      	adds	r7, #12
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 800ab90:	2300      	movs	r3, #0
 800ab92:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d028      	beq.n	800abf6 <UARTDMA_TransmitEvent+0x6e>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 800aba4:	e013      	b.n	800abce <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 800aba6:	7b7b      	ldrb	r3, [r7, #13]
 800aba8:	2b0a      	cmp	r3, #10
 800abaa:	d107      	bne.n	800abbc <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800abb2:	3b01      	subs	r3, #1
 800abb4:	b2da      	uxtb	r2, r3
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 800abbc:	89fb      	ldrh	r3, [r7, #14]
 800abbe:	1c5a      	adds	r2, r3, #1
 800abc0:	81fa      	strh	r2, [r7, #14]
 800abc2:	4619      	mov	r1, r3
 800abc4:	7b7a      	ldrb	r2, [r7, #13]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	440b      	add	r3, r1
 800abca:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f203 1347 	addw	r3, r3, #327	; 0x147
 800abd4:	f107 020d 	add.w	r2, r7, #13
 800abd8:	4611      	mov	r1, r2
 800abda:	4618      	mov	r0, r3
 800abdc:	f7ff fa04 	bl	8009fe8 <RB_Read>
 800abe0:	4603      	mov	r3, r0
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d0df      	beq.n	800aba6 <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6818      	ldr	r0, [r3, #0]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	33c7      	adds	r3, #199	; 0xc7
 800abee:	89fa      	ldrh	r2, [r7, #14]
 800abf0:	4619      	mov	r1, r3
 800abf2:	f006 f88d 	bl	8010d10 <HAL_UART_Transmit_DMA>
	}
}
 800abf6:	bf00      	nop
 800abf8:	3710      	adds	r7, #16
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}

0800abfe <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 800abfe:	b580      	push	{r7, lr}
 800ac00:	b082      	sub	sp, #8
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
 800ac06:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	683a      	ldr	r2, [r7, #0]
 800ac0c:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	68da      	ldr	r2, [r3, #12]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f042 0210 	orr.w	r2, r2, #16
 800ac20:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f042 0210 	orr.w	r2, r2, #16
 800ac38:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f042 0210 	orr.w	r2, r2, #16
 800ac50:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6818      	ldr	r0, [r3, #0]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	3304      	adds	r3, #4
 800ac5a:	2240      	movs	r2, #64	; 0x40
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	f006 f8d5 	bl	8010e0c <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f022 0208 	bic.w	r2, r2, #8
 800ac78:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f022 0208 	bic.w	r2, r2, #8
 800ac90:	601a      	str	r2, [r3, #0]
}
 800ac92:	bf00      	nop
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
	...

0800ac9c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800aca0:	4b11      	ldr	r3, [pc, #68]	; (800ace8 <MX_USART1_UART_Init+0x4c>)
 800aca2:	4a12      	ldr	r2, [pc, #72]	; (800acec <MX_USART1_UART_Init+0x50>)
 800aca4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800aca6:	4b10      	ldr	r3, [pc, #64]	; (800ace8 <MX_USART1_UART_Init+0x4c>)
 800aca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800acac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800acae:	4b0e      	ldr	r3, [pc, #56]	; (800ace8 <MX_USART1_UART_Init+0x4c>)
 800acb0:	2200      	movs	r2, #0
 800acb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800acb4:	4b0c      	ldr	r3, [pc, #48]	; (800ace8 <MX_USART1_UART_Init+0x4c>)
 800acb6:	2200      	movs	r2, #0
 800acb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800acba:	4b0b      	ldr	r3, [pc, #44]	; (800ace8 <MX_USART1_UART_Init+0x4c>)
 800acbc:	2200      	movs	r2, #0
 800acbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800acc0:	4b09      	ldr	r3, [pc, #36]	; (800ace8 <MX_USART1_UART_Init+0x4c>)
 800acc2:	220c      	movs	r2, #12
 800acc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800acc6:	4b08      	ldr	r3, [pc, #32]	; (800ace8 <MX_USART1_UART_Init+0x4c>)
 800acc8:	2200      	movs	r2, #0
 800acca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800accc:	4b06      	ldr	r3, [pc, #24]	; (800ace8 <MX_USART1_UART_Init+0x4c>)
 800acce:	2200      	movs	r2, #0
 800acd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800acd2:	4805      	ldr	r0, [pc, #20]	; (800ace8 <MX_USART1_UART_Init+0x4c>)
 800acd4:	f005 ffce 	bl	8010c74 <HAL_UART_Init>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d001      	beq.n	800ace2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800acde:	f7fb facf 	bl	8006280 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800ace2:	bf00      	nop
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	20000bf4 	.word	0x20000bf4
 800acec:	40011000 	.word	0x40011000

0800acf0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800acf4:	4b11      	ldr	r3, [pc, #68]	; (800ad3c <MX_USART2_UART_Init+0x4c>)
 800acf6:	4a12      	ldr	r2, [pc, #72]	; (800ad40 <MX_USART2_UART_Init+0x50>)
 800acf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800acfa:	4b10      	ldr	r3, [pc, #64]	; (800ad3c <MX_USART2_UART_Init+0x4c>)
 800acfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ad00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800ad02:	4b0e      	ldr	r3, [pc, #56]	; (800ad3c <MX_USART2_UART_Init+0x4c>)
 800ad04:	2200      	movs	r2, #0
 800ad06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800ad08:	4b0c      	ldr	r3, [pc, #48]	; (800ad3c <MX_USART2_UART_Init+0x4c>)
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800ad0e:	4b0b      	ldr	r3, [pc, #44]	; (800ad3c <MX_USART2_UART_Init+0x4c>)
 800ad10:	2200      	movs	r2, #0
 800ad12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800ad14:	4b09      	ldr	r3, [pc, #36]	; (800ad3c <MX_USART2_UART_Init+0x4c>)
 800ad16:	220c      	movs	r2, #12
 800ad18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ad1a:	4b08      	ldr	r3, [pc, #32]	; (800ad3c <MX_USART2_UART_Init+0x4c>)
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800ad20:	4b06      	ldr	r3, [pc, #24]	; (800ad3c <MX_USART2_UART_Init+0x4c>)
 800ad22:	2200      	movs	r2, #0
 800ad24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800ad26:	4805      	ldr	r0, [pc, #20]	; (800ad3c <MX_USART2_UART_Init+0x4c>)
 800ad28:	f005 ffa4 	bl	8010c74 <HAL_UART_Init>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d001      	beq.n	800ad36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800ad32:	f7fb faa5 	bl	8006280 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800ad36:	bf00      	nop
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	20000c38 	.word	0x20000c38
 800ad40:	40004400 	.word	0x40004400

0800ad44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b08c      	sub	sp, #48	; 0x30
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad4c:	f107 031c 	add.w	r3, r7, #28
 800ad50:	2200      	movs	r2, #0
 800ad52:	601a      	str	r2, [r3, #0]
 800ad54:	605a      	str	r2, [r3, #4]
 800ad56:	609a      	str	r2, [r3, #8]
 800ad58:	60da      	str	r2, [r3, #12]
 800ad5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a59      	ldr	r2, [pc, #356]	; (800aec8 <HAL_UART_MspInit+0x184>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	f040 80c0 	bne.w	800aee8 <HAL_UART_MspInit+0x1a4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ad68:	2300      	movs	r3, #0
 800ad6a:	61bb      	str	r3, [r7, #24]
 800ad6c:	4b57      	ldr	r3, [pc, #348]	; (800aecc <HAL_UART_MspInit+0x188>)
 800ad6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad70:	4a56      	ldr	r2, [pc, #344]	; (800aecc <HAL_UART_MspInit+0x188>)
 800ad72:	f043 0310 	orr.w	r3, r3, #16
 800ad76:	6453      	str	r3, [r2, #68]	; 0x44
 800ad78:	4b54      	ldr	r3, [pc, #336]	; (800aecc <HAL_UART_MspInit+0x188>)
 800ad7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad7c:	f003 0310 	and.w	r3, r3, #16
 800ad80:	61bb      	str	r3, [r7, #24]
 800ad82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad84:	2300      	movs	r3, #0
 800ad86:	617b      	str	r3, [r7, #20]
 800ad88:	4b50      	ldr	r3, [pc, #320]	; (800aecc <HAL_UART_MspInit+0x188>)
 800ad8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad8c:	4a4f      	ldr	r2, [pc, #316]	; (800aecc <HAL_UART_MspInit+0x188>)
 800ad8e:	f043 0301 	orr.w	r3, r3, #1
 800ad92:	6313      	str	r3, [r2, #48]	; 0x30
 800ad94:	4b4d      	ldr	r3, [pc, #308]	; (800aecc <HAL_UART_MspInit+0x188>)
 800ad96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad98:	f003 0301 	and.w	r3, r3, #1
 800ad9c:	617b      	str	r3, [r7, #20]
 800ad9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ada0:	2300      	movs	r3, #0
 800ada2:	613b      	str	r3, [r7, #16]
 800ada4:	4b49      	ldr	r3, [pc, #292]	; (800aecc <HAL_UART_MspInit+0x188>)
 800ada6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada8:	4a48      	ldr	r2, [pc, #288]	; (800aecc <HAL_UART_MspInit+0x188>)
 800adaa:	f043 0302 	orr.w	r3, r3, #2
 800adae:	6313      	str	r3, [r2, #48]	; 0x30
 800adb0:	4b46      	ldr	r3, [pc, #280]	; (800aecc <HAL_UART_MspInit+0x188>)
 800adb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adb4:	f003 0302 	and.w	r3, r3, #2
 800adb8:	613b      	str	r3, [r7, #16]
 800adba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_ESP_Pin;
 800adbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adc2:	2302      	movs	r3, #2
 800adc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adc6:	2300      	movs	r3, #0
 800adc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800adca:	2303      	movs	r3, #3
 800adcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800adce:	2307      	movs	r3, #7
 800add0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_ESP_GPIO_Port, &GPIO_InitStruct);
 800add2:	f107 031c 	add.w	r3, r7, #28
 800add6:	4619      	mov	r1, r3
 800add8:	483d      	ldr	r0, [pc, #244]	; (800aed0 <HAL_UART_MspInit+0x18c>)
 800adda:	f000 ff95 	bl	800bd08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_ESP_Pin;
 800adde:	2380      	movs	r3, #128	; 0x80
 800ade0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ade2:	2302      	movs	r3, #2
 800ade4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ade6:	2300      	movs	r3, #0
 800ade8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800adea:	2303      	movs	r3, #3
 800adec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800adee:	2307      	movs	r3, #7
 800adf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_ESP_GPIO_Port, &GPIO_InitStruct);
 800adf2:	f107 031c 	add.w	r3, r7, #28
 800adf6:	4619      	mov	r1, r3
 800adf8:	4836      	ldr	r0, [pc, #216]	; (800aed4 <HAL_UART_MspInit+0x190>)
 800adfa:	f000 ff85 	bl	800bd08 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800adfe:	4b36      	ldr	r3, [pc, #216]	; (800aed8 <HAL_UART_MspInit+0x194>)
 800ae00:	4a36      	ldr	r2, [pc, #216]	; (800aedc <HAL_UART_MspInit+0x198>)
 800ae02:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800ae04:	4b34      	ldr	r3, [pc, #208]	; (800aed8 <HAL_UART_MspInit+0x194>)
 800ae06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ae0a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ae0c:	4b32      	ldr	r3, [pc, #200]	; (800aed8 <HAL_UART_MspInit+0x194>)
 800ae0e:	2200      	movs	r2, #0
 800ae10:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ae12:	4b31      	ldr	r3, [pc, #196]	; (800aed8 <HAL_UART_MspInit+0x194>)
 800ae14:	2200      	movs	r2, #0
 800ae16:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ae18:	4b2f      	ldr	r3, [pc, #188]	; (800aed8 <HAL_UART_MspInit+0x194>)
 800ae1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae1e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ae20:	4b2d      	ldr	r3, [pc, #180]	; (800aed8 <HAL_UART_MspInit+0x194>)
 800ae22:	2200      	movs	r2, #0
 800ae24:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ae26:	4b2c      	ldr	r3, [pc, #176]	; (800aed8 <HAL_UART_MspInit+0x194>)
 800ae28:	2200      	movs	r2, #0
 800ae2a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800ae2c:	4b2a      	ldr	r3, [pc, #168]	; (800aed8 <HAL_UART_MspInit+0x194>)
 800ae2e:	2200      	movs	r2, #0
 800ae30:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ae32:	4b29      	ldr	r3, [pc, #164]	; (800aed8 <HAL_UART_MspInit+0x194>)
 800ae34:	2200      	movs	r2, #0
 800ae36:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ae38:	4b27      	ldr	r3, [pc, #156]	; (800aed8 <HAL_UART_MspInit+0x194>)
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800ae3e:	4826      	ldr	r0, [pc, #152]	; (800aed8 <HAL_UART_MspInit+0x194>)
 800ae40:	f000 fb52 	bl	800b4e8 <HAL_DMA_Init>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800ae4a:	f7fb fa19 	bl	8006280 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a21      	ldr	r2, [pc, #132]	; (800aed8 <HAL_UART_MspInit+0x194>)
 800ae52:	639a      	str	r2, [r3, #56]	; 0x38
 800ae54:	4a20      	ldr	r2, [pc, #128]	; (800aed8 <HAL_UART_MspInit+0x194>)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800ae5a:	4b21      	ldr	r3, [pc, #132]	; (800aee0 <HAL_UART_MspInit+0x19c>)
 800ae5c:	4a21      	ldr	r2, [pc, #132]	; (800aee4 <HAL_UART_MspInit+0x1a0>)
 800ae5e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800ae60:	4b1f      	ldr	r3, [pc, #124]	; (800aee0 <HAL_UART_MspInit+0x19c>)
 800ae62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ae66:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ae68:	4b1d      	ldr	r3, [pc, #116]	; (800aee0 <HAL_UART_MspInit+0x19c>)
 800ae6a:	2240      	movs	r2, #64	; 0x40
 800ae6c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ae6e:	4b1c      	ldr	r3, [pc, #112]	; (800aee0 <HAL_UART_MspInit+0x19c>)
 800ae70:	2200      	movs	r2, #0
 800ae72:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ae74:	4b1a      	ldr	r3, [pc, #104]	; (800aee0 <HAL_UART_MspInit+0x19c>)
 800ae76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae7a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ae7c:	4b18      	ldr	r3, [pc, #96]	; (800aee0 <HAL_UART_MspInit+0x19c>)
 800ae7e:	2200      	movs	r2, #0
 800ae80:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ae82:	4b17      	ldr	r3, [pc, #92]	; (800aee0 <HAL_UART_MspInit+0x19c>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800ae88:	4b15      	ldr	r3, [pc, #84]	; (800aee0 <HAL_UART_MspInit+0x19c>)
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ae8e:	4b14      	ldr	r3, [pc, #80]	; (800aee0 <HAL_UART_MspInit+0x19c>)
 800ae90:	2200      	movs	r2, #0
 800ae92:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ae94:	4b12      	ldr	r3, [pc, #72]	; (800aee0 <HAL_UART_MspInit+0x19c>)
 800ae96:	2200      	movs	r2, #0
 800ae98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800ae9a:	4811      	ldr	r0, [pc, #68]	; (800aee0 <HAL_UART_MspInit+0x19c>)
 800ae9c:	f000 fb24 	bl	800b4e8 <HAL_DMA_Init>
 800aea0:	4603      	mov	r3, r0
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d001      	beq.n	800aeaa <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 800aea6:	f7fb f9eb 	bl	8006280 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4a0c      	ldr	r2, [pc, #48]	; (800aee0 <HAL_UART_MspInit+0x19c>)
 800aeae:	635a      	str	r2, [r3, #52]	; 0x34
 800aeb0:	4a0b      	ldr	r2, [pc, #44]	; (800aee0 <HAL_UART_MspInit+0x19c>)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	2100      	movs	r1, #0
 800aeba:	2025      	movs	r0, #37	; 0x25
 800aebc:	f000 fab3 	bl	800b426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800aec0:	2025      	movs	r0, #37	; 0x25
 800aec2:	f000 facc 	bl	800b45e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800aec6:	e09d      	b.n	800b004 <HAL_UART_MspInit+0x2c0>
 800aec8:	40011000 	.word	0x40011000
 800aecc:	40023800 	.word	0x40023800
 800aed0:	40020000 	.word	0x40020000
 800aed4:	40020400 	.word	0x40020400
 800aed8:	20000b34 	.word	0x20000b34
 800aedc:	40026440 	.word	0x40026440
 800aee0:	20000ad4 	.word	0x20000ad4
 800aee4:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART2)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a47      	ldr	r2, [pc, #284]	; (800b00c <HAL_UART_MspInit+0x2c8>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	f040 8088 	bne.w	800b004 <HAL_UART_MspInit+0x2c0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800aef4:	2300      	movs	r3, #0
 800aef6:	60fb      	str	r3, [r7, #12]
 800aef8:	4b45      	ldr	r3, [pc, #276]	; (800b010 <HAL_UART_MspInit+0x2cc>)
 800aefa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aefc:	4a44      	ldr	r2, [pc, #272]	; (800b010 <HAL_UART_MspInit+0x2cc>)
 800aefe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af02:	6413      	str	r3, [r2, #64]	; 0x40
 800af04:	4b42      	ldr	r3, [pc, #264]	; (800b010 <HAL_UART_MspInit+0x2cc>)
 800af06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af0c:	60fb      	str	r3, [r7, #12]
 800af0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af10:	2300      	movs	r3, #0
 800af12:	60bb      	str	r3, [r7, #8]
 800af14:	4b3e      	ldr	r3, [pc, #248]	; (800b010 <HAL_UART_MspInit+0x2cc>)
 800af16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af18:	4a3d      	ldr	r2, [pc, #244]	; (800b010 <HAL_UART_MspInit+0x2cc>)
 800af1a:	f043 0301 	orr.w	r3, r3, #1
 800af1e:	6313      	str	r3, [r2, #48]	; 0x30
 800af20:	4b3b      	ldr	r3, [pc, #236]	; (800b010 <HAL_UART_MspInit+0x2cc>)
 800af22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af24:	f003 0301 	and.w	r3, r3, #1
 800af28:	60bb      	str	r3, [r7, #8]
 800af2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_2uC_Pin|USART2_RX_2uC_Pin;
 800af2c:	230c      	movs	r3, #12
 800af2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af30:	2302      	movs	r3, #2
 800af32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af34:	2300      	movs	r3, #0
 800af36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af38:	2303      	movs	r3, #3
 800af3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800af3c:	2307      	movs	r3, #7
 800af3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af40:	f107 031c 	add.w	r3, r7, #28
 800af44:	4619      	mov	r1, r3
 800af46:	4833      	ldr	r0, [pc, #204]	; (800b014 <HAL_UART_MspInit+0x2d0>)
 800af48:	f000 fede 	bl	800bd08 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800af4c:	4b32      	ldr	r3, [pc, #200]	; (800b018 <HAL_UART_MspInit+0x2d4>)
 800af4e:	4a33      	ldr	r2, [pc, #204]	; (800b01c <HAL_UART_MspInit+0x2d8>)
 800af50:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800af52:	4b31      	ldr	r3, [pc, #196]	; (800b018 <HAL_UART_MspInit+0x2d4>)
 800af54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800af58:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800af5a:	4b2f      	ldr	r3, [pc, #188]	; (800b018 <HAL_UART_MspInit+0x2d4>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800af60:	4b2d      	ldr	r3, [pc, #180]	; (800b018 <HAL_UART_MspInit+0x2d4>)
 800af62:	2200      	movs	r2, #0
 800af64:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800af66:	4b2c      	ldr	r3, [pc, #176]	; (800b018 <HAL_UART_MspInit+0x2d4>)
 800af68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800af6c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800af6e:	4b2a      	ldr	r3, [pc, #168]	; (800b018 <HAL_UART_MspInit+0x2d4>)
 800af70:	2200      	movs	r2, #0
 800af72:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800af74:	4b28      	ldr	r3, [pc, #160]	; (800b018 <HAL_UART_MspInit+0x2d4>)
 800af76:	2200      	movs	r2, #0
 800af78:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800af7a:	4b27      	ldr	r3, [pc, #156]	; (800b018 <HAL_UART_MspInit+0x2d4>)
 800af7c:	2200      	movs	r2, #0
 800af7e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800af80:	4b25      	ldr	r3, [pc, #148]	; (800b018 <HAL_UART_MspInit+0x2d4>)
 800af82:	2200      	movs	r2, #0
 800af84:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800af86:	4b24      	ldr	r3, [pc, #144]	; (800b018 <HAL_UART_MspInit+0x2d4>)
 800af88:	2200      	movs	r2, #0
 800af8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800af8c:	4822      	ldr	r0, [pc, #136]	; (800b018 <HAL_UART_MspInit+0x2d4>)
 800af8e:	f000 faab 	bl	800b4e8 <HAL_DMA_Init>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d001      	beq.n	800af9c <HAL_UART_MspInit+0x258>
      Error_Handler();
 800af98:	f7fb f972 	bl	8006280 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4a1e      	ldr	r2, [pc, #120]	; (800b018 <HAL_UART_MspInit+0x2d4>)
 800afa0:	639a      	str	r2, [r3, #56]	; 0x38
 800afa2:	4a1d      	ldr	r2, [pc, #116]	; (800b018 <HAL_UART_MspInit+0x2d4>)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800afa8:	4b1d      	ldr	r3, [pc, #116]	; (800b020 <HAL_UART_MspInit+0x2dc>)
 800afaa:	4a1e      	ldr	r2, [pc, #120]	; (800b024 <HAL_UART_MspInit+0x2e0>)
 800afac:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800afae:	4b1c      	ldr	r3, [pc, #112]	; (800b020 <HAL_UART_MspInit+0x2dc>)
 800afb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800afb4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800afb6:	4b1a      	ldr	r3, [pc, #104]	; (800b020 <HAL_UART_MspInit+0x2dc>)
 800afb8:	2240      	movs	r2, #64	; 0x40
 800afba:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800afbc:	4b18      	ldr	r3, [pc, #96]	; (800b020 <HAL_UART_MspInit+0x2dc>)
 800afbe:	2200      	movs	r2, #0
 800afc0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800afc2:	4b17      	ldr	r3, [pc, #92]	; (800b020 <HAL_UART_MspInit+0x2dc>)
 800afc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800afc8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800afca:	4b15      	ldr	r3, [pc, #84]	; (800b020 <HAL_UART_MspInit+0x2dc>)
 800afcc:	2200      	movs	r2, #0
 800afce:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800afd0:	4b13      	ldr	r3, [pc, #76]	; (800b020 <HAL_UART_MspInit+0x2dc>)
 800afd2:	2200      	movs	r2, #0
 800afd4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800afd6:	4b12      	ldr	r3, [pc, #72]	; (800b020 <HAL_UART_MspInit+0x2dc>)
 800afd8:	2200      	movs	r2, #0
 800afda:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800afdc:	4b10      	ldr	r3, [pc, #64]	; (800b020 <HAL_UART_MspInit+0x2dc>)
 800afde:	2200      	movs	r2, #0
 800afe0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800afe2:	4b0f      	ldr	r3, [pc, #60]	; (800b020 <HAL_UART_MspInit+0x2dc>)
 800afe4:	2200      	movs	r2, #0
 800afe6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800afe8:	480d      	ldr	r0, [pc, #52]	; (800b020 <HAL_UART_MspInit+0x2dc>)
 800afea:	f000 fa7d 	bl	800b4e8 <HAL_DMA_Init>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d001      	beq.n	800aff8 <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 800aff4:	f7fb f944 	bl	8006280 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4a09      	ldr	r2, [pc, #36]	; (800b020 <HAL_UART_MspInit+0x2dc>)
 800affc:	635a      	str	r2, [r3, #52]	; 0x34
 800affe:	4a08      	ldr	r2, [pc, #32]	; (800b020 <HAL_UART_MspInit+0x2dc>)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6393      	str	r3, [r2, #56]	; 0x38
}
 800b004:	bf00      	nop
 800b006:	3730      	adds	r7, #48	; 0x30
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	40004400 	.word	0x40004400
 800b010:	40023800 	.word	0x40023800
 800b014:	40020000 	.word	0x40020000
 800b018:	20000a74 	.word	0x20000a74
 800b01c:	40026088 	.word	0x40026088
 800b020:	20000b94 	.word	0x20000b94
 800b024:	400260a0 	.word	0x400260a0

0800b028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800b028:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b060 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b02c:	480d      	ldr	r0, [pc, #52]	; (800b064 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800b02e:	490e      	ldr	r1, [pc, #56]	; (800b068 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800b030:	4a0e      	ldr	r2, [pc, #56]	; (800b06c <LoopFillZerobss+0x1e>)
  movs r3, #0
 800b032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b034:	e002      	b.n	800b03c <LoopCopyDataInit>

0800b036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b03a:	3304      	adds	r3, #4

0800b03c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b03c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b03e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b040:	d3f9      	bcc.n	800b036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b042:	4a0b      	ldr	r2, [pc, #44]	; (800b070 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800b044:	4c0b      	ldr	r4, [pc, #44]	; (800b074 <LoopFillZerobss+0x26>)
  movs r3, #0
 800b046:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b048:	e001      	b.n	800b04e <LoopFillZerobss>

0800b04a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b04a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b04c:	3204      	adds	r2, #4

0800b04e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b04e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b050:	d3fb      	bcc.n	800b04a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b052:	f7ff fb45 	bl	800a6e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b056:	f006 ff5b 	bl	8011f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b05a:	f7fa ffaf 	bl	8005fbc <main>
  bx  lr    
 800b05e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800b060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800b064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b068:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 800b06c:	0802aa00 	.word	0x0802aa00
  ldr r2, =_sbss
 800b070:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 800b074:	20000c90 	.word	0x20000c90

0800b078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b078:	e7fe      	b.n	800b078 <ADC_IRQHandler>
	...

0800b07c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b080:	4b0e      	ldr	r3, [pc, #56]	; (800b0bc <HAL_Init+0x40>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a0d      	ldr	r2, [pc, #52]	; (800b0bc <HAL_Init+0x40>)
 800b086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b08a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b08c:	4b0b      	ldr	r3, [pc, #44]	; (800b0bc <HAL_Init+0x40>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a0a      	ldr	r2, [pc, #40]	; (800b0bc <HAL_Init+0x40>)
 800b092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b098:	4b08      	ldr	r3, [pc, #32]	; (800b0bc <HAL_Init+0x40>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a07      	ldr	r2, [pc, #28]	; (800b0bc <HAL_Init+0x40>)
 800b09e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b0a4:	2003      	movs	r0, #3
 800b0a6:	f000 f9b3 	bl	800b410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b0aa:	2000      	movs	r0, #0
 800b0ac:	f000 f808 	bl	800b0c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b0b0:	f7ff f95e 	bl	800a370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	40023c00 	.word	0x40023c00

0800b0c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b0c8:	4b12      	ldr	r3, [pc, #72]	; (800b114 <HAL_InitTick+0x54>)
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	4b12      	ldr	r3, [pc, #72]	; (800b118 <HAL_InitTick+0x58>)
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b0d6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b0da:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f000 f9d9 	bl	800b496 <HAL_SYSTICK_Config>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d001      	beq.n	800b0ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	e00e      	b.n	800b10c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2b0f      	cmp	r3, #15
 800b0f2:	d80a      	bhi.n	800b10a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	6879      	ldr	r1, [r7, #4]
 800b0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0fc:	f000 f993 	bl	800b426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b100:	4a06      	ldr	r2, [pc, #24]	; (800b11c <HAL_InitTick+0x5c>)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b106:	2300      	movs	r3, #0
 800b108:	e000      	b.n	800b10c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b10a:	2301      	movs	r3, #1
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3708      	adds	r7, #8
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	20000038 	.word	0x20000038
 800b118:	20000040 	.word	0x20000040
 800b11c:	2000003c 	.word	0x2000003c

0800b120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b120:	b480      	push	{r7}
 800b122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b124:	4b06      	ldr	r3, [pc, #24]	; (800b140 <HAL_IncTick+0x20>)
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	461a      	mov	r2, r3
 800b12a:	4b06      	ldr	r3, [pc, #24]	; (800b144 <HAL_IncTick+0x24>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4413      	add	r3, r2
 800b130:	4a04      	ldr	r2, [pc, #16]	; (800b144 <HAL_IncTick+0x24>)
 800b132:	6013      	str	r3, [r2, #0]
}
 800b134:	bf00      	nop
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop
 800b140:	20000040 	.word	0x20000040
 800b144:	20000c7c 	.word	0x20000c7c

0800b148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b148:	b480      	push	{r7}
 800b14a:	af00      	add	r7, sp, #0
  return uwTick;
 800b14c:	4b03      	ldr	r3, [pc, #12]	; (800b15c <HAL_GetTick+0x14>)
 800b14e:	681b      	ldr	r3, [r3, #0]
}
 800b150:	4618      	mov	r0, r3
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr
 800b15a:	bf00      	nop
 800b15c:	20000c7c 	.word	0x20000c7c

0800b160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b168:	f7ff ffee 	bl	800b148 <HAL_GetTick>
 800b16c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b178:	d005      	beq.n	800b186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b17a:	4b0a      	ldr	r3, [pc, #40]	; (800b1a4 <HAL_Delay+0x44>)
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	461a      	mov	r2, r3
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	4413      	add	r3, r2
 800b184:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b186:	bf00      	nop
 800b188:	f7ff ffde 	bl	800b148 <HAL_GetTick>
 800b18c:	4602      	mov	r2, r0
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	1ad3      	subs	r3, r2, r3
 800b192:	68fa      	ldr	r2, [r7, #12]
 800b194:	429a      	cmp	r2, r3
 800b196:	d8f7      	bhi.n	800b188 <HAL_Delay+0x28>
  {
  }
}
 800b198:	bf00      	nop
 800b19a:	bf00      	nop
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	20000040 	.word	0x20000040

0800b1a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f003 0307 	and.w	r3, r3, #7
 800b1b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b1b8:	4b0c      	ldr	r3, [pc, #48]	; (800b1ec <__NVIC_SetPriorityGrouping+0x44>)
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b1be:	68ba      	ldr	r2, [r7, #8]
 800b1c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b1c4:	4013      	ands	r3, r2
 800b1c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b1d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b1d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b1da:	4a04      	ldr	r2, [pc, #16]	; (800b1ec <__NVIC_SetPriorityGrouping+0x44>)
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	60d3      	str	r3, [r2, #12]
}
 800b1e0:	bf00      	nop
 800b1e2:	3714      	adds	r7, #20
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr
 800b1ec:	e000ed00 	.word	0xe000ed00

0800b1f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b1f4:	4b04      	ldr	r3, [pc, #16]	; (800b208 <__NVIC_GetPriorityGrouping+0x18>)
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	0a1b      	lsrs	r3, r3, #8
 800b1fa:	f003 0307 	and.w	r3, r3, #7
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr
 800b208:	e000ed00 	.word	0xe000ed00

0800b20c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	4603      	mov	r3, r0
 800b214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	db0b      	blt.n	800b236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b21e:	79fb      	ldrb	r3, [r7, #7]
 800b220:	f003 021f 	and.w	r2, r3, #31
 800b224:	4907      	ldr	r1, [pc, #28]	; (800b244 <__NVIC_EnableIRQ+0x38>)
 800b226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b22a:	095b      	lsrs	r3, r3, #5
 800b22c:	2001      	movs	r0, #1
 800b22e:	fa00 f202 	lsl.w	r2, r0, r2
 800b232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b236:	bf00      	nop
 800b238:	370c      	adds	r7, #12
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	e000e100 	.word	0xe000e100

0800b248 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	4603      	mov	r3, r0
 800b250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b256:	2b00      	cmp	r3, #0
 800b258:	db12      	blt.n	800b280 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b25a:	79fb      	ldrb	r3, [r7, #7]
 800b25c:	f003 021f 	and.w	r2, r3, #31
 800b260:	490a      	ldr	r1, [pc, #40]	; (800b28c <__NVIC_DisableIRQ+0x44>)
 800b262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b266:	095b      	lsrs	r3, r3, #5
 800b268:	2001      	movs	r0, #1
 800b26a:	fa00 f202 	lsl.w	r2, r0, r2
 800b26e:	3320      	adds	r3, #32
 800b270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b274:	f3bf 8f4f 	dsb	sy
}
 800b278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b27a:	f3bf 8f6f 	isb	sy
}
 800b27e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800b280:	bf00      	nop
 800b282:	370c      	adds	r7, #12
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr
 800b28c:	e000e100 	.word	0xe000e100

0800b290 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
 800b296:	4603      	mov	r3, r0
 800b298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b29a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	db0e      	blt.n	800b2c0 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800b2a2:	4a0b      	ldr	r2, [pc, #44]	; (800b2d0 <__NVIC_GetPendingIRQ+0x40>)
 800b2a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2a8:	095b      	lsrs	r3, r3, #5
 800b2aa:	3340      	adds	r3, #64	; 0x40
 800b2ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b2b0:	79fb      	ldrb	r3, [r7, #7]
 800b2b2:	f003 031f 	and.w	r3, r3, #31
 800b2b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ba:	f003 0301 	and.w	r3, r3, #1
 800b2be:	e000      	b.n	800b2c2 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 800b2c0:	2300      	movs	r3, #0
  }
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	370c      	adds	r7, #12
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr
 800b2ce:	bf00      	nop
 800b2d0:	e000e100 	.word	0xe000e100

0800b2d4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	4603      	mov	r3, r0
 800b2dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b2de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	db0c      	blt.n	800b300 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b2e6:	79fb      	ldrb	r3, [r7, #7]
 800b2e8:	f003 021f 	and.w	r2, r3, #31
 800b2ec:	4907      	ldr	r1, [pc, #28]	; (800b30c <__NVIC_ClearPendingIRQ+0x38>)
 800b2ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2f2:	095b      	lsrs	r3, r3, #5
 800b2f4:	2001      	movs	r0, #1
 800b2f6:	fa00 f202 	lsl.w	r2, r0, r2
 800b2fa:	3360      	adds	r3, #96	; 0x60
 800b2fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b300:	bf00      	nop
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr
 800b30c:	e000e100 	.word	0xe000e100

0800b310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	4603      	mov	r3, r0
 800b318:	6039      	str	r1, [r7, #0]
 800b31a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b31c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b320:	2b00      	cmp	r3, #0
 800b322:	db0a      	blt.n	800b33a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	b2da      	uxtb	r2, r3
 800b328:	490c      	ldr	r1, [pc, #48]	; (800b35c <__NVIC_SetPriority+0x4c>)
 800b32a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b32e:	0112      	lsls	r2, r2, #4
 800b330:	b2d2      	uxtb	r2, r2
 800b332:	440b      	add	r3, r1
 800b334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b338:	e00a      	b.n	800b350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	b2da      	uxtb	r2, r3
 800b33e:	4908      	ldr	r1, [pc, #32]	; (800b360 <__NVIC_SetPriority+0x50>)
 800b340:	79fb      	ldrb	r3, [r7, #7]
 800b342:	f003 030f 	and.w	r3, r3, #15
 800b346:	3b04      	subs	r3, #4
 800b348:	0112      	lsls	r2, r2, #4
 800b34a:	b2d2      	uxtb	r2, r2
 800b34c:	440b      	add	r3, r1
 800b34e:	761a      	strb	r2, [r3, #24]
}
 800b350:	bf00      	nop
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr
 800b35c:	e000e100 	.word	0xe000e100
 800b360:	e000ed00 	.word	0xe000ed00

0800b364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b364:	b480      	push	{r7}
 800b366:	b089      	sub	sp, #36	; 0x24
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f003 0307 	and.w	r3, r3, #7
 800b376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	f1c3 0307 	rsb	r3, r3, #7
 800b37e:	2b04      	cmp	r3, #4
 800b380:	bf28      	it	cs
 800b382:	2304      	movcs	r3, #4
 800b384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	3304      	adds	r3, #4
 800b38a:	2b06      	cmp	r3, #6
 800b38c:	d902      	bls.n	800b394 <NVIC_EncodePriority+0x30>
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	3b03      	subs	r3, #3
 800b392:	e000      	b.n	800b396 <NVIC_EncodePriority+0x32>
 800b394:	2300      	movs	r3, #0
 800b396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b398:	f04f 32ff 	mov.w	r2, #4294967295
 800b39c:	69bb      	ldr	r3, [r7, #24]
 800b39e:	fa02 f303 	lsl.w	r3, r2, r3
 800b3a2:	43da      	mvns	r2, r3
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	401a      	ands	r2, r3
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b3ac:	f04f 31ff 	mov.w	r1, #4294967295
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	fa01 f303 	lsl.w	r3, r1, r3
 800b3b6:	43d9      	mvns	r1, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b3bc:	4313      	orrs	r3, r2
         );
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3724      	adds	r7, #36	; 0x24
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
	...

0800b3cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b3dc:	d301      	bcc.n	800b3e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b3de:	2301      	movs	r3, #1
 800b3e0:	e00f      	b.n	800b402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b3e2:	4a0a      	ldr	r2, [pc, #40]	; (800b40c <SysTick_Config+0x40>)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b3ea:	210f      	movs	r1, #15
 800b3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f0:	f7ff ff8e 	bl	800b310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b3f4:	4b05      	ldr	r3, [pc, #20]	; (800b40c <SysTick_Config+0x40>)
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b3fa:	4b04      	ldr	r3, [pc, #16]	; (800b40c <SysTick_Config+0x40>)
 800b3fc:	2207      	movs	r2, #7
 800b3fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b400:	2300      	movs	r3, #0
}
 800b402:	4618      	mov	r0, r3
 800b404:	3708      	adds	r7, #8
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	e000e010 	.word	0xe000e010

0800b410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f7ff fec5 	bl	800b1a8 <__NVIC_SetPriorityGrouping>
}
 800b41e:	bf00      	nop
 800b420:	3708      	adds	r7, #8
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b426:	b580      	push	{r7, lr}
 800b428:	b086      	sub	sp, #24
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	4603      	mov	r3, r0
 800b42e:	60b9      	str	r1, [r7, #8]
 800b430:	607a      	str	r2, [r7, #4]
 800b432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b434:	2300      	movs	r3, #0
 800b436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b438:	f7ff feda 	bl	800b1f0 <__NVIC_GetPriorityGrouping>
 800b43c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	68b9      	ldr	r1, [r7, #8]
 800b442:	6978      	ldr	r0, [r7, #20]
 800b444:	f7ff ff8e 	bl	800b364 <NVIC_EncodePriority>
 800b448:	4602      	mov	r2, r0
 800b44a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b44e:	4611      	mov	r1, r2
 800b450:	4618      	mov	r0, r3
 800b452:	f7ff ff5d 	bl	800b310 <__NVIC_SetPriority>
}
 800b456:	bf00      	nop
 800b458:	3718      	adds	r7, #24
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b082      	sub	sp, #8
 800b462:	af00      	add	r7, sp, #0
 800b464:	4603      	mov	r3, r0
 800b466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7ff fecd 	bl	800b20c <__NVIC_EnableIRQ>
}
 800b472:	bf00      	nop
 800b474:	3708      	adds	r7, #8
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b082      	sub	sp, #8
 800b47e:	af00      	add	r7, sp, #0
 800b480:	4603      	mov	r3, r0
 800b482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b488:	4618      	mov	r0, r3
 800b48a:	f7ff fedd 	bl	800b248 <__NVIC_DisableIRQ>
}
 800b48e:	bf00      	nop
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b082      	sub	sp, #8
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f7ff ff94 	bl	800b3cc <SysTick_Config>
 800b4a4:	4603      	mov	r3, r0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3708      	adds	r7, #8
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b082      	sub	sp, #8
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 800b4b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7ff fee7 	bl	800b290 <__NVIC_GetPendingIRQ>
 800b4c2:	4603      	mov	r3, r0
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800b4d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7ff fefa 	bl	800b2d4 <__NVIC_ClearPendingIRQ>
}
 800b4e0:	bf00      	nop
 800b4e2:	3708      	adds	r7, #8
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b086      	sub	sp, #24
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b4f4:	f7ff fe28 	bl	800b148 <HAL_GetTick>
 800b4f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d101      	bne.n	800b504 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b500:	2301      	movs	r3, #1
 800b502:	e099      	b.n	800b638 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2202      	movs	r2, #2
 800b508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2200      	movs	r2, #0
 800b510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f022 0201 	bic.w	r2, r2, #1
 800b522:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b524:	e00f      	b.n	800b546 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b526:	f7ff fe0f 	bl	800b148 <HAL_GetTick>
 800b52a:	4602      	mov	r2, r0
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	1ad3      	subs	r3, r2, r3
 800b530:	2b05      	cmp	r3, #5
 800b532:	d908      	bls.n	800b546 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2220      	movs	r2, #32
 800b538:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2203      	movs	r2, #3
 800b53e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b542:	2303      	movs	r3, #3
 800b544:	e078      	b.n	800b638 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f003 0301 	and.w	r3, r3, #1
 800b550:	2b00      	cmp	r3, #0
 800b552:	d1e8      	bne.n	800b526 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b55c:	697a      	ldr	r2, [r7, #20]
 800b55e:	4b38      	ldr	r3, [pc, #224]	; (800b640 <HAL_DMA_Init+0x158>)
 800b560:	4013      	ands	r3, r2
 800b562:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	685a      	ldr	r2, [r3, #4]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	689b      	ldr	r3, [r3, #8]
 800b56c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b572:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b57e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	699b      	ldr	r3, [r3, #24]
 800b584:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b58a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6a1b      	ldr	r3, [r3, #32]
 800b590:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b592:	697a      	ldr	r2, [r7, #20]
 800b594:	4313      	orrs	r3, r2
 800b596:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59c:	2b04      	cmp	r3, #4
 800b59e:	d107      	bne.n	800b5b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	697a      	ldr	r2, [r7, #20]
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	697a      	ldr	r2, [r7, #20]
 800b5b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	695b      	ldr	r3, [r3, #20]
 800b5be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	f023 0307 	bic.w	r3, r3, #7
 800b5c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5cc:	697a      	ldr	r2, [r7, #20]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d6:	2b04      	cmp	r3, #4
 800b5d8:	d117      	bne.n	800b60a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5de:	697a      	ldr	r2, [r7, #20]
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d00e      	beq.n	800b60a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fb0f 	bl	800bc10 <DMA_CheckFifoParam>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d008      	beq.n	800b60a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2240      	movs	r2, #64	; 0x40
 800b5fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2201      	movs	r2, #1
 800b602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b606:	2301      	movs	r3, #1
 800b608:	e016      	b.n	800b638 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 fac6 	bl	800bba4 <DMA_CalcBaseAndBitshift>
 800b618:	4603      	mov	r3, r0
 800b61a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b620:	223f      	movs	r2, #63	; 0x3f
 800b622:	409a      	lsls	r2, r3
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2200      	movs	r2, #0
 800b62c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2201      	movs	r2, #1
 800b632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b636:	2300      	movs	r3, #0
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3718      	adds	r7, #24
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	f010803f 	.word	0xf010803f

0800b644 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b086      	sub	sp, #24
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
 800b650:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b652:	2300      	movs	r3, #0
 800b654:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b65a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b662:	2b01      	cmp	r3, #1
 800b664:	d101      	bne.n	800b66a <HAL_DMA_Start_IT+0x26>
 800b666:	2302      	movs	r3, #2
 800b668:	e040      	b.n	800b6ec <HAL_DMA_Start_IT+0xa8>
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2201      	movs	r2, #1
 800b66e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d12f      	bne.n	800b6de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2202      	movs	r2, #2
 800b682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2200      	movs	r2, #0
 800b68a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	68b9      	ldr	r1, [r7, #8]
 800b692:	68f8      	ldr	r0, [r7, #12]
 800b694:	f000 fa58 	bl	800bb48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b69c:	223f      	movs	r2, #63	; 0x3f
 800b69e:	409a      	lsls	r2, r3
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f042 0216 	orr.w	r2, r2, #22
 800b6b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d007      	beq.n	800b6cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f042 0208 	orr.w	r2, r2, #8
 800b6ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f042 0201 	orr.w	r2, r2, #1
 800b6da:	601a      	str	r2, [r3, #0]
 800b6dc:	e005      	b.n	800b6ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b6e6:	2302      	movs	r3, #2
 800b6e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b6ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3718      	adds	r7, #24
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b700:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800b702:	f7ff fd21 	bl	800b148 <HAL_GetTick>
 800b706:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	2b02      	cmp	r3, #2
 800b712:	d008      	beq.n	800b726 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2280      	movs	r2, #128	; 0x80
 800b718:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2200      	movs	r2, #0
 800b71e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	e052      	b.n	800b7cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f022 0216 	bic.w	r2, r2, #22
 800b734:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	695a      	ldr	r2, [r3, #20]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b744:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d103      	bne.n	800b756 <HAL_DMA_Abort+0x62>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b752:	2b00      	cmp	r3, #0
 800b754:	d007      	beq.n	800b766 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f022 0208 	bic.w	r2, r2, #8
 800b764:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f022 0201 	bic.w	r2, r2, #1
 800b774:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b776:	e013      	b.n	800b7a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b778:	f7ff fce6 	bl	800b148 <HAL_GetTick>
 800b77c:	4602      	mov	r2, r0
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	1ad3      	subs	r3, r2, r3
 800b782:	2b05      	cmp	r3, #5
 800b784:	d90c      	bls.n	800b7a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2220      	movs	r2, #32
 800b78a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2203      	movs	r2, #3
 800b790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800b79c:	2303      	movs	r3, #3
 800b79e:	e015      	b.n	800b7cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f003 0301 	and.w	r3, r3, #1
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d1e4      	bne.n	800b778 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7b2:	223f      	movs	r2, #63	; 0x3f
 800b7b4:	409a      	lsls	r2, r3
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	2b02      	cmp	r3, #2
 800b7e6:	d004      	beq.n	800b7f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2280      	movs	r2, #128	; 0x80
 800b7ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	e00c      	b.n	800b80c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2205      	movs	r2, #5
 800b7f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	681a      	ldr	r2, [r3, #0]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f022 0201 	bic.w	r2, r2, #1
 800b808:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b80a:	2300      	movs	r3, #0
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	370c      	adds	r7, #12
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr

0800b818 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b086      	sub	sp, #24
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b820:	2300      	movs	r3, #0
 800b822:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b824:	4b92      	ldr	r3, [pc, #584]	; (800ba70 <HAL_DMA_IRQHandler+0x258>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4a92      	ldr	r2, [pc, #584]	; (800ba74 <HAL_DMA_IRQHandler+0x25c>)
 800b82a:	fba2 2303 	umull	r2, r3, r2, r3
 800b82e:	0a9b      	lsrs	r3, r3, #10
 800b830:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b836:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b842:	2208      	movs	r2, #8
 800b844:	409a      	lsls	r2, r3
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	4013      	ands	r3, r2
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d01a      	beq.n	800b884 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f003 0304 	and.w	r3, r3, #4
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d013      	beq.n	800b884 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f022 0204 	bic.w	r2, r2, #4
 800b86a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b870:	2208      	movs	r2, #8
 800b872:	409a      	lsls	r2, r3
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b87c:	f043 0201 	orr.w	r2, r3, #1
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b888:	2201      	movs	r2, #1
 800b88a:	409a      	lsls	r2, r3
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	4013      	ands	r3, r2
 800b890:	2b00      	cmp	r3, #0
 800b892:	d012      	beq.n	800b8ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	695b      	ldr	r3, [r3, #20]
 800b89a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00b      	beq.n	800b8ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	409a      	lsls	r2, r3
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8b2:	f043 0202 	orr.w	r2, r3, #2
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8be:	2204      	movs	r2, #4
 800b8c0:	409a      	lsls	r2, r3
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	4013      	ands	r3, r2
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d012      	beq.n	800b8f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f003 0302 	and.w	r3, r3, #2
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d00b      	beq.n	800b8f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8dc:	2204      	movs	r2, #4
 800b8de:	409a      	lsls	r2, r3
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8e8:	f043 0204 	orr.w	r2, r3, #4
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8f4:	2210      	movs	r2, #16
 800b8f6:	409a      	lsls	r2, r3
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	4013      	ands	r3, r2
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d043      	beq.n	800b988 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f003 0308 	and.w	r3, r3, #8
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d03c      	beq.n	800b988 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b912:	2210      	movs	r2, #16
 800b914:	409a      	lsls	r2, r3
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b924:	2b00      	cmp	r3, #0
 800b926:	d018      	beq.n	800b95a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b932:	2b00      	cmp	r3, #0
 800b934:	d108      	bne.n	800b948 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d024      	beq.n	800b988 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	4798      	blx	r3
 800b946:	e01f      	b.n	800b988 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d01b      	beq.n	800b988 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	4798      	blx	r3
 800b958:	e016      	b.n	800b988 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b964:	2b00      	cmp	r3, #0
 800b966:	d107      	bne.n	800b978 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	681a      	ldr	r2, [r3, #0]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f022 0208 	bic.w	r2, r2, #8
 800b976:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d003      	beq.n	800b988 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b98c:	2220      	movs	r2, #32
 800b98e:	409a      	lsls	r2, r3
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	4013      	ands	r3, r2
 800b994:	2b00      	cmp	r3, #0
 800b996:	f000 808e 	beq.w	800bab6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f003 0310 	and.w	r3, r3, #16
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	f000 8086 	beq.w	800bab6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9ae:	2220      	movs	r2, #32
 800b9b0:	409a      	lsls	r2, r3
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	2b05      	cmp	r3, #5
 800b9c0:	d136      	bne.n	800ba30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f022 0216 	bic.w	r2, r2, #22
 800b9d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	695a      	ldr	r2, [r3, #20]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b9e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d103      	bne.n	800b9f2 <HAL_DMA_IRQHandler+0x1da>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d007      	beq.n	800ba02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f022 0208 	bic.w	r2, r2, #8
 800ba00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba06:	223f      	movs	r2, #63	; 0x3f
 800ba08:	409a      	lsls	r2, r3
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2201      	movs	r2, #1
 800ba12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d07d      	beq.n	800bb22 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	4798      	blx	r3
        }
        return;
 800ba2e:	e078      	b.n	800bb22 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d01c      	beq.n	800ba78 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d108      	bne.n	800ba5e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d030      	beq.n	800bab6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	4798      	blx	r3
 800ba5c:	e02b      	b.n	800bab6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d027      	beq.n	800bab6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	4798      	blx	r3
 800ba6e:	e022      	b.n	800bab6 <HAL_DMA_IRQHandler+0x29e>
 800ba70:	20000038 	.word	0x20000038
 800ba74:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d10f      	bne.n	800baa6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f022 0210 	bic.w	r2, r2, #16
 800ba94:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2200      	movs	r2, #0
 800baa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d003      	beq.n	800bab6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baba:	2b00      	cmp	r3, #0
 800babc:	d032      	beq.n	800bb24 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bac2:	f003 0301 	and.w	r3, r3, #1
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d022      	beq.n	800bb10 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2205      	movs	r2, #5
 800bace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f022 0201 	bic.w	r2, r2, #1
 800bae0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	3301      	adds	r3, #1
 800bae6:	60bb      	str	r3, [r7, #8]
 800bae8:	697a      	ldr	r2, [r7, #20]
 800baea:	429a      	cmp	r2, r3
 800baec:	d307      	bcc.n	800bafe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f003 0301 	and.w	r3, r3, #1
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d1f2      	bne.n	800bae2 <HAL_DMA_IRQHandler+0x2ca>
 800bafc:	e000      	b.n	800bb00 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800bafe:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d005      	beq.n	800bb24 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	4798      	blx	r3
 800bb20:	e000      	b.n	800bb24 <HAL_DMA_IRQHandler+0x30c>
        return;
 800bb22:	bf00      	nop
    }
  }
}
 800bb24:	3718      	adds	r7, #24
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop

0800bb2c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bb3a:	b2db      	uxtb	r3, r3
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	370c      	adds	r7, #12
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr

0800bb48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b085      	sub	sp, #20
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	60b9      	str	r1, [r7, #8]
 800bb52:	607a      	str	r2, [r7, #4]
 800bb54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bb64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	683a      	ldr	r2, [r7, #0]
 800bb6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	2b40      	cmp	r3, #64	; 0x40
 800bb74:	d108      	bne.n	800bb88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bb86:	e007      	b.n	800bb98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	68ba      	ldr	r2, [r7, #8]
 800bb8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	60da      	str	r2, [r3, #12]
}
 800bb98:	bf00      	nop
 800bb9a:	3714      	adds	r7, #20
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b085      	sub	sp, #20
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	3b10      	subs	r3, #16
 800bbb4:	4a14      	ldr	r2, [pc, #80]	; (800bc08 <DMA_CalcBaseAndBitshift+0x64>)
 800bbb6:	fba2 2303 	umull	r2, r3, r2, r3
 800bbba:	091b      	lsrs	r3, r3, #4
 800bbbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bbbe:	4a13      	ldr	r2, [pc, #76]	; (800bc0c <DMA_CalcBaseAndBitshift+0x68>)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2b03      	cmp	r3, #3
 800bbd0:	d909      	bls.n	800bbe6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bbda:	f023 0303 	bic.w	r3, r3, #3
 800bbde:	1d1a      	adds	r2, r3, #4
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	659a      	str	r2, [r3, #88]	; 0x58
 800bbe4:	e007      	b.n	800bbf6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bbee:	f023 0303 	bic.w	r3, r3, #3
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3714      	adds	r7, #20
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop
 800bc08:	aaaaaaab 	.word	0xaaaaaaab
 800bc0c:	0802a4d8 	.word	0x0802a4d8

0800bc10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	699b      	ldr	r3, [r3, #24]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d11f      	bne.n	800bc6a <DMA_CheckFifoParam+0x5a>
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	2b03      	cmp	r3, #3
 800bc2e:	d856      	bhi.n	800bcde <DMA_CheckFifoParam+0xce>
 800bc30:	a201      	add	r2, pc, #4	; (adr r2, 800bc38 <DMA_CheckFifoParam+0x28>)
 800bc32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc36:	bf00      	nop
 800bc38:	0800bc49 	.word	0x0800bc49
 800bc3c:	0800bc5b 	.word	0x0800bc5b
 800bc40:	0800bc49 	.word	0x0800bc49
 800bc44:	0800bcdf 	.word	0x0800bcdf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d046      	beq.n	800bce2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800bc54:	2301      	movs	r3, #1
 800bc56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bc58:	e043      	b.n	800bce2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bc62:	d140      	bne.n	800bce6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bc68:	e03d      	b.n	800bce6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	699b      	ldr	r3, [r3, #24]
 800bc6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc72:	d121      	bne.n	800bcb8 <DMA_CheckFifoParam+0xa8>
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	2b03      	cmp	r3, #3
 800bc78:	d837      	bhi.n	800bcea <DMA_CheckFifoParam+0xda>
 800bc7a:	a201      	add	r2, pc, #4	; (adr r2, 800bc80 <DMA_CheckFifoParam+0x70>)
 800bc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc80:	0800bc91 	.word	0x0800bc91
 800bc84:	0800bc97 	.word	0x0800bc97
 800bc88:	0800bc91 	.word	0x0800bc91
 800bc8c:	0800bca9 	.word	0x0800bca9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800bc90:	2301      	movs	r3, #1
 800bc92:	73fb      	strb	r3, [r7, #15]
      break;
 800bc94:	e030      	b.n	800bcf8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d025      	beq.n	800bcee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800bca2:	2301      	movs	r3, #1
 800bca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bca6:	e022      	b.n	800bcee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bcb0:	d11f      	bne.n	800bcf2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800bcb6:	e01c      	b.n	800bcf2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	2b02      	cmp	r3, #2
 800bcbc:	d903      	bls.n	800bcc6 <DMA_CheckFifoParam+0xb6>
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	2b03      	cmp	r3, #3
 800bcc2:	d003      	beq.n	800bccc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800bcc4:	e018      	b.n	800bcf8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	73fb      	strb	r3, [r7, #15]
      break;
 800bcca:	e015      	b.n	800bcf8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d00e      	beq.n	800bcf6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	73fb      	strb	r3, [r7, #15]
      break;
 800bcdc:	e00b      	b.n	800bcf6 <DMA_CheckFifoParam+0xe6>
      break;
 800bcde:	bf00      	nop
 800bce0:	e00a      	b.n	800bcf8 <DMA_CheckFifoParam+0xe8>
      break;
 800bce2:	bf00      	nop
 800bce4:	e008      	b.n	800bcf8 <DMA_CheckFifoParam+0xe8>
      break;
 800bce6:	bf00      	nop
 800bce8:	e006      	b.n	800bcf8 <DMA_CheckFifoParam+0xe8>
      break;
 800bcea:	bf00      	nop
 800bcec:	e004      	b.n	800bcf8 <DMA_CheckFifoParam+0xe8>
      break;
 800bcee:	bf00      	nop
 800bcf0:	e002      	b.n	800bcf8 <DMA_CheckFifoParam+0xe8>
      break;   
 800bcf2:	bf00      	nop
 800bcf4:	e000      	b.n	800bcf8 <DMA_CheckFifoParam+0xe8>
      break;
 800bcf6:	bf00      	nop
    }
  } 
  
  return status; 
 800bcf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3714      	adds	r7, #20
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop

0800bd08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b089      	sub	sp, #36	; 0x24
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bd12:	2300      	movs	r3, #0
 800bd14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bd16:	2300      	movs	r3, #0
 800bd18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bd1e:	2300      	movs	r3, #0
 800bd20:	61fb      	str	r3, [r7, #28]
 800bd22:	e159      	b.n	800bfd8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bd24:	2201      	movs	r2, #1
 800bd26:	69fb      	ldr	r3, [r7, #28]
 800bd28:	fa02 f303 	lsl.w	r3, r2, r3
 800bd2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	697a      	ldr	r2, [r7, #20]
 800bd34:	4013      	ands	r3, r2
 800bd36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bd38:	693a      	ldr	r2, [r7, #16]
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	f040 8148 	bne.w	800bfd2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	f003 0303 	and.w	r3, r3, #3
 800bd4a:	2b01      	cmp	r3, #1
 800bd4c:	d005      	beq.n	800bd5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800bd56:	2b02      	cmp	r3, #2
 800bd58:	d130      	bne.n	800bdbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800bd60:	69fb      	ldr	r3, [r7, #28]
 800bd62:	005b      	lsls	r3, r3, #1
 800bd64:	2203      	movs	r2, #3
 800bd66:	fa02 f303 	lsl.w	r3, r2, r3
 800bd6a:	43db      	mvns	r3, r3
 800bd6c:	69ba      	ldr	r2, [r7, #24]
 800bd6e:	4013      	ands	r3, r2
 800bd70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	68da      	ldr	r2, [r3, #12]
 800bd76:	69fb      	ldr	r3, [r7, #28]
 800bd78:	005b      	lsls	r3, r3, #1
 800bd7a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd7e:	69ba      	ldr	r2, [r7, #24]
 800bd80:	4313      	orrs	r3, r2
 800bd82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	69ba      	ldr	r2, [r7, #24]
 800bd88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bd90:	2201      	movs	r2, #1
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	fa02 f303 	lsl.w	r3, r2, r3
 800bd98:	43db      	mvns	r3, r3
 800bd9a:	69ba      	ldr	r2, [r7, #24]
 800bd9c:	4013      	ands	r3, r2
 800bd9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	091b      	lsrs	r3, r3, #4
 800bda6:	f003 0201 	and.w	r2, r3, #1
 800bdaa:	69fb      	ldr	r3, [r7, #28]
 800bdac:	fa02 f303 	lsl.w	r3, r2, r3
 800bdb0:	69ba      	ldr	r2, [r7, #24]
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	69ba      	ldr	r2, [r7, #24]
 800bdba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	f003 0303 	and.w	r3, r3, #3
 800bdc4:	2b03      	cmp	r3, #3
 800bdc6:	d017      	beq.n	800bdf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800bdce:	69fb      	ldr	r3, [r7, #28]
 800bdd0:	005b      	lsls	r3, r3, #1
 800bdd2:	2203      	movs	r2, #3
 800bdd4:	fa02 f303 	lsl.w	r3, r2, r3
 800bdd8:	43db      	mvns	r3, r3
 800bdda:	69ba      	ldr	r2, [r7, #24]
 800bddc:	4013      	ands	r3, r2
 800bdde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	689a      	ldr	r2, [r3, #8]
 800bde4:	69fb      	ldr	r3, [r7, #28]
 800bde6:	005b      	lsls	r3, r3, #1
 800bde8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdec:	69ba      	ldr	r2, [r7, #24]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	69ba      	ldr	r2, [r7, #24]
 800bdf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	f003 0303 	and.w	r3, r3, #3
 800be00:	2b02      	cmp	r3, #2
 800be02:	d123      	bne.n	800be4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800be04:	69fb      	ldr	r3, [r7, #28]
 800be06:	08da      	lsrs	r2, r3, #3
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	3208      	adds	r2, #8
 800be0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	f003 0307 	and.w	r3, r3, #7
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	220f      	movs	r2, #15
 800be1c:	fa02 f303 	lsl.w	r3, r2, r3
 800be20:	43db      	mvns	r3, r3
 800be22:	69ba      	ldr	r2, [r7, #24]
 800be24:	4013      	ands	r3, r2
 800be26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	691a      	ldr	r2, [r3, #16]
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	f003 0307 	and.w	r3, r3, #7
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	fa02 f303 	lsl.w	r3, r2, r3
 800be38:	69ba      	ldr	r2, [r7, #24]
 800be3a:	4313      	orrs	r3, r2
 800be3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	08da      	lsrs	r2, r3, #3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	3208      	adds	r2, #8
 800be46:	69b9      	ldr	r1, [r7, #24]
 800be48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800be52:	69fb      	ldr	r3, [r7, #28]
 800be54:	005b      	lsls	r3, r3, #1
 800be56:	2203      	movs	r2, #3
 800be58:	fa02 f303 	lsl.w	r3, r2, r3
 800be5c:	43db      	mvns	r3, r3
 800be5e:	69ba      	ldr	r2, [r7, #24]
 800be60:	4013      	ands	r3, r2
 800be62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	f003 0203 	and.w	r2, r3, #3
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	005b      	lsls	r3, r3, #1
 800be70:	fa02 f303 	lsl.w	r3, r2, r3
 800be74:	69ba      	ldr	r2, [r7, #24]
 800be76:	4313      	orrs	r3, r2
 800be78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	69ba      	ldr	r2, [r7, #24]
 800be7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800be88:	2b00      	cmp	r3, #0
 800be8a:	f000 80a2 	beq.w	800bfd2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800be8e:	2300      	movs	r3, #0
 800be90:	60fb      	str	r3, [r7, #12]
 800be92:	4b57      	ldr	r3, [pc, #348]	; (800bff0 <HAL_GPIO_Init+0x2e8>)
 800be94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be96:	4a56      	ldr	r2, [pc, #344]	; (800bff0 <HAL_GPIO_Init+0x2e8>)
 800be98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800be9c:	6453      	str	r3, [r2, #68]	; 0x44
 800be9e:	4b54      	ldr	r3, [pc, #336]	; (800bff0 <HAL_GPIO_Init+0x2e8>)
 800bea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bea6:	60fb      	str	r3, [r7, #12]
 800bea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800beaa:	4a52      	ldr	r2, [pc, #328]	; (800bff4 <HAL_GPIO_Init+0x2ec>)
 800beac:	69fb      	ldr	r3, [r7, #28]
 800beae:	089b      	lsrs	r3, r3, #2
 800beb0:	3302      	adds	r3, #2
 800beb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800beb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800beb8:	69fb      	ldr	r3, [r7, #28]
 800beba:	f003 0303 	and.w	r3, r3, #3
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	220f      	movs	r2, #15
 800bec2:	fa02 f303 	lsl.w	r3, r2, r3
 800bec6:	43db      	mvns	r3, r3
 800bec8:	69ba      	ldr	r2, [r7, #24]
 800beca:	4013      	ands	r3, r2
 800becc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4a49      	ldr	r2, [pc, #292]	; (800bff8 <HAL_GPIO_Init+0x2f0>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d019      	beq.n	800bf0a <HAL_GPIO_Init+0x202>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	4a48      	ldr	r2, [pc, #288]	; (800bffc <HAL_GPIO_Init+0x2f4>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d013      	beq.n	800bf06 <HAL_GPIO_Init+0x1fe>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	4a47      	ldr	r2, [pc, #284]	; (800c000 <HAL_GPIO_Init+0x2f8>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d00d      	beq.n	800bf02 <HAL_GPIO_Init+0x1fa>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	4a46      	ldr	r2, [pc, #280]	; (800c004 <HAL_GPIO_Init+0x2fc>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d007      	beq.n	800befe <HAL_GPIO_Init+0x1f6>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	4a45      	ldr	r2, [pc, #276]	; (800c008 <HAL_GPIO_Init+0x300>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d101      	bne.n	800befa <HAL_GPIO_Init+0x1f2>
 800bef6:	2304      	movs	r3, #4
 800bef8:	e008      	b.n	800bf0c <HAL_GPIO_Init+0x204>
 800befa:	2307      	movs	r3, #7
 800befc:	e006      	b.n	800bf0c <HAL_GPIO_Init+0x204>
 800befe:	2303      	movs	r3, #3
 800bf00:	e004      	b.n	800bf0c <HAL_GPIO_Init+0x204>
 800bf02:	2302      	movs	r3, #2
 800bf04:	e002      	b.n	800bf0c <HAL_GPIO_Init+0x204>
 800bf06:	2301      	movs	r3, #1
 800bf08:	e000      	b.n	800bf0c <HAL_GPIO_Init+0x204>
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	69fa      	ldr	r2, [r7, #28]
 800bf0e:	f002 0203 	and.w	r2, r2, #3
 800bf12:	0092      	lsls	r2, r2, #2
 800bf14:	4093      	lsls	r3, r2
 800bf16:	69ba      	ldr	r2, [r7, #24]
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bf1c:	4935      	ldr	r1, [pc, #212]	; (800bff4 <HAL_GPIO_Init+0x2ec>)
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	089b      	lsrs	r3, r3, #2
 800bf22:	3302      	adds	r3, #2
 800bf24:	69ba      	ldr	r2, [r7, #24]
 800bf26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bf2a:	4b38      	ldr	r3, [pc, #224]	; (800c00c <HAL_GPIO_Init+0x304>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	43db      	mvns	r3, r3
 800bf34:	69ba      	ldr	r2, [r7, #24]
 800bf36:	4013      	ands	r3, r2
 800bf38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d003      	beq.n	800bf4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800bf46:	69ba      	ldr	r2, [r7, #24]
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bf4e:	4a2f      	ldr	r2, [pc, #188]	; (800c00c <HAL_GPIO_Init+0x304>)
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800bf54:	4b2d      	ldr	r3, [pc, #180]	; (800c00c <HAL_GPIO_Init+0x304>)
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	43db      	mvns	r3, r3
 800bf5e:	69ba      	ldr	r2, [r7, #24]
 800bf60:	4013      	ands	r3, r2
 800bf62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d003      	beq.n	800bf78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800bf70:	69ba      	ldr	r2, [r7, #24]
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	4313      	orrs	r3, r2
 800bf76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bf78:	4a24      	ldr	r2, [pc, #144]	; (800c00c <HAL_GPIO_Init+0x304>)
 800bf7a:	69bb      	ldr	r3, [r7, #24]
 800bf7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800bf7e:	4b23      	ldr	r3, [pc, #140]	; (800c00c <HAL_GPIO_Init+0x304>)
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	43db      	mvns	r3, r3
 800bf88:	69ba      	ldr	r2, [r7, #24]
 800bf8a:	4013      	ands	r3, r2
 800bf8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d003      	beq.n	800bfa2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800bf9a:	69ba      	ldr	r2, [r7, #24]
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800bfa2:	4a1a      	ldr	r2, [pc, #104]	; (800c00c <HAL_GPIO_Init+0x304>)
 800bfa4:	69bb      	ldr	r3, [r7, #24]
 800bfa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800bfa8:	4b18      	ldr	r3, [pc, #96]	; (800c00c <HAL_GPIO_Init+0x304>)
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	43db      	mvns	r3, r3
 800bfb2:	69ba      	ldr	r2, [r7, #24]
 800bfb4:	4013      	ands	r3, r2
 800bfb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d003      	beq.n	800bfcc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800bfc4:	69ba      	ldr	r2, [r7, #24]
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800bfcc:	4a0f      	ldr	r2, [pc, #60]	; (800c00c <HAL_GPIO_Init+0x304>)
 800bfce:	69bb      	ldr	r3, [r7, #24]
 800bfd0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	61fb      	str	r3, [r7, #28]
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	2b0f      	cmp	r3, #15
 800bfdc:	f67f aea2 	bls.w	800bd24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800bfe0:	bf00      	nop
 800bfe2:	bf00      	nop
 800bfe4:	3724      	adds	r7, #36	; 0x24
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	40023800 	.word	0x40023800
 800bff4:	40013800 	.word	0x40013800
 800bff8:	40020000 	.word	0x40020000
 800bffc:	40020400 	.word	0x40020400
 800c000:	40020800 	.word	0x40020800
 800c004:	40020c00 	.word	0x40020c00
 800c008:	40021000 	.word	0x40021000
 800c00c:	40013c00 	.word	0x40013c00

0800c010 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c010:	b480      	push	{r7}
 800c012:	b085      	sub	sp, #20
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	460b      	mov	r3, r1
 800c01a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	691a      	ldr	r2, [r3, #16]
 800c020:	887b      	ldrh	r3, [r7, #2]
 800c022:	4013      	ands	r3, r2
 800c024:	2b00      	cmp	r3, #0
 800c026:	d002      	beq.n	800c02e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c028:	2301      	movs	r3, #1
 800c02a:	73fb      	strb	r3, [r7, #15]
 800c02c:	e001      	b.n	800c032 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c02e:	2300      	movs	r3, #0
 800c030:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c032:	7bfb      	ldrb	r3, [r7, #15]
}
 800c034:	4618      	mov	r0, r3
 800c036:	3714      	adds	r7, #20
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr

0800c040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c040:	b480      	push	{r7}
 800c042:	b083      	sub	sp, #12
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	460b      	mov	r3, r1
 800c04a:	807b      	strh	r3, [r7, #2]
 800c04c:	4613      	mov	r3, r2
 800c04e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c050:	787b      	ldrb	r3, [r7, #1]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d003      	beq.n	800c05e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c056:	887a      	ldrh	r2, [r7, #2]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c05c:	e003      	b.n	800c066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c05e:	887b      	ldrh	r3, [r7, #2]
 800c060:	041a      	lsls	r2, r3, #16
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	619a      	str	r2, [r3, #24]
}
 800c066:	bf00      	nop
 800c068:	370c      	adds	r7, #12
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr

0800c072 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c072:	b480      	push	{r7}
 800c074:	b085      	sub	sp, #20
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
 800c07a:	460b      	mov	r3, r1
 800c07c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	695b      	ldr	r3, [r3, #20]
 800c082:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c084:	887a      	ldrh	r2, [r7, #2]
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	4013      	ands	r3, r2
 800c08a:	041a      	lsls	r2, r3, #16
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	43d9      	mvns	r1, r3
 800c090:	887b      	ldrh	r3, [r7, #2]
 800c092:	400b      	ands	r3, r1
 800c094:	431a      	orrs	r2, r3
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	619a      	str	r2, [r3, #24]
}
 800c09a:	bf00      	nop
 800c09c:	3714      	adds	r7, #20
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr
	...

0800c0a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800c0b2:	4b08      	ldr	r3, [pc, #32]	; (800c0d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c0b4:	695a      	ldr	r2, [r3, #20]
 800c0b6:	88fb      	ldrh	r3, [r7, #6]
 800c0b8:	4013      	ands	r3, r2
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d006      	beq.n	800c0cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c0be:	4a05      	ldr	r2, [pc, #20]	; (800c0d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c0c0:	88fb      	ldrh	r3, [r7, #6]
 800c0c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c0c4:	88fb      	ldrh	r3, [r7, #6]
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7fa f8c6 	bl	8006258 <HAL_GPIO_EXTI_Callback>
  }
}
 800c0cc:	bf00      	nop
 800c0ce:	3708      	adds	r7, #8
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	40013c00 	.word	0x40013c00

0800c0d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d101      	bne.n	800c0ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e12b      	b.n	800c342 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d106      	bne.n	800c104 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7f9 fe52 	bl	8005da8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2224      	movs	r2, #36	; 0x24
 800c108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f022 0201 	bic.w	r2, r2, #1
 800c11a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c12a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c13a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c13c:	f003 fcf0 	bl	800fb20 <HAL_RCC_GetPCLK1Freq>
 800c140:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	4a81      	ldr	r2, [pc, #516]	; (800c34c <HAL_I2C_Init+0x274>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d807      	bhi.n	800c15c <HAL_I2C_Init+0x84>
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	4a80      	ldr	r2, [pc, #512]	; (800c350 <HAL_I2C_Init+0x278>)
 800c150:	4293      	cmp	r3, r2
 800c152:	bf94      	ite	ls
 800c154:	2301      	movls	r3, #1
 800c156:	2300      	movhi	r3, #0
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	e006      	b.n	800c16a <HAL_I2C_Init+0x92>
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	4a7d      	ldr	r2, [pc, #500]	; (800c354 <HAL_I2C_Init+0x27c>)
 800c160:	4293      	cmp	r3, r2
 800c162:	bf94      	ite	ls
 800c164:	2301      	movls	r3, #1
 800c166:	2300      	movhi	r3, #0
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d001      	beq.n	800c172 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800c16e:	2301      	movs	r3, #1
 800c170:	e0e7      	b.n	800c342 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	4a78      	ldr	r2, [pc, #480]	; (800c358 <HAL_I2C_Init+0x280>)
 800c176:	fba2 2303 	umull	r2, r3, r2, r3
 800c17a:	0c9b      	lsrs	r3, r3, #18
 800c17c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	430a      	orrs	r2, r1
 800c190:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	6a1b      	ldr	r3, [r3, #32]
 800c198:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	4a6a      	ldr	r2, [pc, #424]	; (800c34c <HAL_I2C_Init+0x274>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d802      	bhi.n	800c1ac <HAL_I2C_Init+0xd4>
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	e009      	b.n	800c1c0 <HAL_I2C_Init+0xe8>
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c1b2:	fb02 f303 	mul.w	r3, r2, r3
 800c1b6:	4a69      	ldr	r2, [pc, #420]	; (800c35c <HAL_I2C_Init+0x284>)
 800c1b8:	fba2 2303 	umull	r2, r3, r2, r3
 800c1bc:	099b      	lsrs	r3, r3, #6
 800c1be:	3301      	adds	r3, #1
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	6812      	ldr	r2, [r2, #0]
 800c1c4:	430b      	orrs	r3, r1
 800c1c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	69db      	ldr	r3, [r3, #28]
 800c1ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800c1d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	495c      	ldr	r1, [pc, #368]	; (800c34c <HAL_I2C_Init+0x274>)
 800c1dc:	428b      	cmp	r3, r1
 800c1de:	d819      	bhi.n	800c214 <HAL_I2C_Init+0x13c>
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	1e59      	subs	r1, r3, #1
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	005b      	lsls	r3, r3, #1
 800c1ea:	fbb1 f3f3 	udiv	r3, r1, r3
 800c1ee:	1c59      	adds	r1, r3, #1
 800c1f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c1f4:	400b      	ands	r3, r1
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d00a      	beq.n	800c210 <HAL_I2C_Init+0x138>
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	1e59      	subs	r1, r3, #1
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	005b      	lsls	r3, r3, #1
 800c204:	fbb1 f3f3 	udiv	r3, r1, r3
 800c208:	3301      	adds	r3, #1
 800c20a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c20e:	e051      	b.n	800c2b4 <HAL_I2C_Init+0x1dc>
 800c210:	2304      	movs	r3, #4
 800c212:	e04f      	b.n	800c2b4 <HAL_I2C_Init+0x1dc>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	689b      	ldr	r3, [r3, #8]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d111      	bne.n	800c240 <HAL_I2C_Init+0x168>
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	1e58      	subs	r0, r3, #1
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6859      	ldr	r1, [r3, #4]
 800c224:	460b      	mov	r3, r1
 800c226:	005b      	lsls	r3, r3, #1
 800c228:	440b      	add	r3, r1
 800c22a:	fbb0 f3f3 	udiv	r3, r0, r3
 800c22e:	3301      	adds	r3, #1
 800c230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c234:	2b00      	cmp	r3, #0
 800c236:	bf0c      	ite	eq
 800c238:	2301      	moveq	r3, #1
 800c23a:	2300      	movne	r3, #0
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	e012      	b.n	800c266 <HAL_I2C_Init+0x18e>
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	1e58      	subs	r0, r3, #1
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6859      	ldr	r1, [r3, #4]
 800c248:	460b      	mov	r3, r1
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	440b      	add	r3, r1
 800c24e:	0099      	lsls	r1, r3, #2
 800c250:	440b      	add	r3, r1
 800c252:	fbb0 f3f3 	udiv	r3, r0, r3
 800c256:	3301      	adds	r3, #1
 800c258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	bf0c      	ite	eq
 800c260:	2301      	moveq	r3, #1
 800c262:	2300      	movne	r3, #0
 800c264:	b2db      	uxtb	r3, r3
 800c266:	2b00      	cmp	r3, #0
 800c268:	d001      	beq.n	800c26e <HAL_I2C_Init+0x196>
 800c26a:	2301      	movs	r3, #1
 800c26c:	e022      	b.n	800c2b4 <HAL_I2C_Init+0x1dc>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	689b      	ldr	r3, [r3, #8]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d10e      	bne.n	800c294 <HAL_I2C_Init+0x1bc>
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	1e58      	subs	r0, r3, #1
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6859      	ldr	r1, [r3, #4]
 800c27e:	460b      	mov	r3, r1
 800c280:	005b      	lsls	r3, r3, #1
 800c282:	440b      	add	r3, r1
 800c284:	fbb0 f3f3 	udiv	r3, r0, r3
 800c288:	3301      	adds	r3, #1
 800c28a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c28e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c292:	e00f      	b.n	800c2b4 <HAL_I2C_Init+0x1dc>
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	1e58      	subs	r0, r3, #1
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6859      	ldr	r1, [r3, #4]
 800c29c:	460b      	mov	r3, r1
 800c29e:	009b      	lsls	r3, r3, #2
 800c2a0:	440b      	add	r3, r1
 800c2a2:	0099      	lsls	r1, r3, #2
 800c2a4:	440b      	add	r3, r1
 800c2a6:	fbb0 f3f3 	udiv	r3, r0, r3
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c2b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c2b4:	6879      	ldr	r1, [r7, #4]
 800c2b6:	6809      	ldr	r1, [r1, #0]
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	69da      	ldr	r2, [r3, #28]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a1b      	ldr	r3, [r3, #32]
 800c2ce:	431a      	orrs	r2, r3
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	430a      	orrs	r2, r1
 800c2d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800c2e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	6911      	ldr	r1, [r2, #16]
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	68d2      	ldr	r2, [r2, #12]
 800c2ee:	4311      	orrs	r1, r2
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	6812      	ldr	r2, [r2, #0]
 800c2f4:	430b      	orrs	r3, r1
 800c2f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	68db      	ldr	r3, [r3, #12]
 800c2fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	695a      	ldr	r2, [r3, #20]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	699b      	ldr	r3, [r3, #24]
 800c30a:	431a      	orrs	r2, r3
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	430a      	orrs	r2, r1
 800c312:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f042 0201 	orr.w	r2, r2, #1
 800c322:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2200      	movs	r2, #0
 800c328:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2220      	movs	r2, #32
 800c32e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3710      	adds	r7, #16
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	000186a0 	.word	0x000186a0
 800c350:	001e847f 	.word	0x001e847f
 800c354:	003d08ff 	.word	0x003d08ff
 800c358:	431bde83 	.word	0x431bde83
 800c35c:	10624dd3 	.word	0x10624dd3

0800c360 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b088      	sub	sp, #32
 800c364:	af02      	add	r7, sp, #8
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	607a      	str	r2, [r7, #4]
 800c36a:	461a      	mov	r2, r3
 800c36c:	460b      	mov	r3, r1
 800c36e:	817b      	strh	r3, [r7, #10]
 800c370:	4613      	mov	r3, r2
 800c372:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c374:	f7fe fee8 	bl	800b148 <HAL_GetTick>
 800c378:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c380:	b2db      	uxtb	r3, r3
 800c382:	2b20      	cmp	r3, #32
 800c384:	f040 80e0 	bne.w	800c548 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	2319      	movs	r3, #25
 800c38e:	2201      	movs	r2, #1
 800c390:	4970      	ldr	r1, [pc, #448]	; (800c554 <HAL_I2C_Master_Transmit+0x1f4>)
 800c392:	68f8      	ldr	r0, [r7, #12]
 800c394:	f002 fd7a 	bl	800ee8c <I2C_WaitOnFlagUntilTimeout>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d001      	beq.n	800c3a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800c39e:	2302      	movs	r3, #2
 800c3a0:	e0d3      	b.n	800c54a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d101      	bne.n	800c3b0 <HAL_I2C_Master_Transmit+0x50>
 800c3ac:	2302      	movs	r3, #2
 800c3ae:	e0cc      	b.n	800c54a <HAL_I2C_Master_Transmit+0x1ea>
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f003 0301 	and.w	r3, r3, #1
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d007      	beq.n	800c3d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f042 0201 	orr.w	r2, r2, #1
 800c3d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c3e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	2221      	movs	r2, #33	; 0x21
 800c3ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2210      	movs	r2, #16
 800c3f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	893a      	ldrh	r2, [r7, #8]
 800c406:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c40c:	b29a      	uxth	r2, r3
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	4a50      	ldr	r2, [pc, #320]	; (800c558 <HAL_I2C_Master_Transmit+0x1f8>)
 800c416:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800c418:	8979      	ldrh	r1, [r7, #10]
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	6a3a      	ldr	r2, [r7, #32]
 800c41e:	68f8      	ldr	r0, [r7, #12]
 800c420:	f002 f9be 	bl	800e7a0 <I2C_MasterRequestWrite>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d001      	beq.n	800c42e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800c42a:	2301      	movs	r3, #1
 800c42c:	e08d      	b.n	800c54a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c42e:	2300      	movs	r3, #0
 800c430:	613b      	str	r3, [r7, #16]
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	695b      	ldr	r3, [r3, #20]
 800c438:	613b      	str	r3, [r7, #16]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	699b      	ldr	r3, [r3, #24]
 800c440:	613b      	str	r3, [r7, #16]
 800c442:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800c444:	e066      	b.n	800c514 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c446:	697a      	ldr	r2, [r7, #20]
 800c448:	6a39      	ldr	r1, [r7, #32]
 800c44a:	68f8      	ldr	r0, [r7, #12]
 800c44c:	f002 fdf4 	bl	800f038 <I2C_WaitOnTXEFlagUntilTimeout>
 800c450:	4603      	mov	r3, r0
 800c452:	2b00      	cmp	r3, #0
 800c454:	d00d      	beq.n	800c472 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c45a:	2b04      	cmp	r3, #4
 800c45c:	d107      	bne.n	800c46e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	681a      	ldr	r2, [r3, #0]
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c46c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c46e:	2301      	movs	r3, #1
 800c470:	e06b      	b.n	800c54a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c476:	781a      	ldrb	r2, [r3, #0]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c482:	1c5a      	adds	r2, r3, #1
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	3b01      	subs	r3, #1
 800c490:	b29a      	uxth	r2, r3
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c49a:	3b01      	subs	r3, #1
 800c49c:	b29a      	uxth	r2, r3
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	695b      	ldr	r3, [r3, #20]
 800c4a8:	f003 0304 	and.w	r3, r3, #4
 800c4ac:	2b04      	cmp	r3, #4
 800c4ae:	d11b      	bne.n	800c4e8 <HAL_I2C_Master_Transmit+0x188>
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d017      	beq.n	800c4e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4bc:	781a      	ldrb	r2, [r3, #0]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c8:	1c5a      	adds	r2, r3, #1
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	b29a      	uxth	r2, r3
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4e0:	3b01      	subs	r3, #1
 800c4e2:	b29a      	uxth	r2, r3
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c4e8:	697a      	ldr	r2, [r7, #20]
 800c4ea:	6a39      	ldr	r1, [r7, #32]
 800c4ec:	68f8      	ldr	r0, [r7, #12]
 800c4ee:	f002 fde4 	bl	800f0ba <I2C_WaitOnBTFFlagUntilTimeout>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00d      	beq.n	800c514 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4fc:	2b04      	cmp	r3, #4
 800c4fe:	d107      	bne.n	800c510 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c50e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c510:	2301      	movs	r3, #1
 800c512:	e01a      	b.n	800c54a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d194      	bne.n	800c446 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c52a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2220      	movs	r2, #32
 800c530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2200      	movs	r2, #0
 800c538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2200      	movs	r2, #0
 800c540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c544:	2300      	movs	r3, #0
 800c546:	e000      	b.n	800c54a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800c548:	2302      	movs	r3, #2
  }
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3718      	adds	r7, #24
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	00100002 	.word	0x00100002
 800c558:	ffff0000 	.word	0xffff0000

0800c55c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b08c      	sub	sp, #48	; 0x30
 800c560:	af02      	add	r7, sp, #8
 800c562:	60f8      	str	r0, [r7, #12]
 800c564:	607a      	str	r2, [r7, #4]
 800c566:	461a      	mov	r2, r3
 800c568:	460b      	mov	r3, r1
 800c56a:	817b      	strh	r3, [r7, #10]
 800c56c:	4613      	mov	r3, r2
 800c56e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c570:	f7fe fdea 	bl	800b148 <HAL_GetTick>
 800c574:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	2b20      	cmp	r3, #32
 800c580:	f040 820b 	bne.w	800c99a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c586:	9300      	str	r3, [sp, #0]
 800c588:	2319      	movs	r3, #25
 800c58a:	2201      	movs	r2, #1
 800c58c:	497c      	ldr	r1, [pc, #496]	; (800c780 <HAL_I2C_Master_Receive+0x224>)
 800c58e:	68f8      	ldr	r0, [r7, #12]
 800c590:	f002 fc7c 	bl	800ee8c <I2C_WaitOnFlagUntilTimeout>
 800c594:	4603      	mov	r3, r0
 800c596:	2b00      	cmp	r3, #0
 800c598:	d001      	beq.n	800c59e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800c59a:	2302      	movs	r3, #2
 800c59c:	e1fe      	b.n	800c99c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d101      	bne.n	800c5ac <HAL_I2C_Master_Receive+0x50>
 800c5a8:	2302      	movs	r3, #2
 800c5aa:	e1f7      	b.n	800c99c <HAL_I2C_Master_Receive+0x440>
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f003 0301 	and.w	r3, r3, #1
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d007      	beq.n	800c5d2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f042 0201 	orr.w	r2, r2, #1
 800c5d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c5e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2222      	movs	r2, #34	; 0x22
 800c5e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2210      	movs	r2, #16
 800c5ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	893a      	ldrh	r2, [r7, #8]
 800c602:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c608:	b29a      	uxth	r2, r3
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	4a5c      	ldr	r2, [pc, #368]	; (800c784 <HAL_I2C_Master_Receive+0x228>)
 800c612:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800c614:	8979      	ldrh	r1, [r7, #10]
 800c616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c61a:	68f8      	ldr	r0, [r7, #12]
 800c61c:	f002 f942 	bl	800e8a4 <I2C_MasterRequestRead>
 800c620:	4603      	mov	r3, r0
 800c622:	2b00      	cmp	r3, #0
 800c624:	d001      	beq.n	800c62a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800c626:	2301      	movs	r3, #1
 800c628:	e1b8      	b.n	800c99c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d113      	bne.n	800c65a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c632:	2300      	movs	r3, #0
 800c634:	623b      	str	r3, [r7, #32]
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	695b      	ldr	r3, [r3, #20]
 800c63c:	623b      	str	r3, [r7, #32]
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	699b      	ldr	r3, [r3, #24]
 800c644:	623b      	str	r3, [r7, #32]
 800c646:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	681a      	ldr	r2, [r3, #0]
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c656:	601a      	str	r2, [r3, #0]
 800c658:	e18c      	b.n	800c974 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d11b      	bne.n	800c69a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c670:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c672:	2300      	movs	r3, #0
 800c674:	61fb      	str	r3, [r7, #28]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	695b      	ldr	r3, [r3, #20]
 800c67c:	61fb      	str	r3, [r7, #28]
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	699b      	ldr	r3, [r3, #24]
 800c684:	61fb      	str	r3, [r7, #28]
 800c686:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c696:	601a      	str	r2, [r3, #0]
 800c698:	e16c      	b.n	800c974 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c69e:	2b02      	cmp	r3, #2
 800c6a0:	d11b      	bne.n	800c6da <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	681a      	ldr	r2, [r3, #0]
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c6c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	61bb      	str	r3, [r7, #24]
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	695b      	ldr	r3, [r3, #20]
 800c6cc:	61bb      	str	r3, [r7, #24]
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	699b      	ldr	r3, [r3, #24]
 800c6d4:	61bb      	str	r3, [r7, #24]
 800c6d6:	69bb      	ldr	r3, [r7, #24]
 800c6d8:	e14c      	b.n	800c974 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	681a      	ldr	r2, [r3, #0]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c6e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	617b      	str	r3, [r7, #20]
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	695b      	ldr	r3, [r3, #20]
 800c6f4:	617b      	str	r3, [r7, #20]
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	699b      	ldr	r3, [r3, #24]
 800c6fc:	617b      	str	r3, [r7, #20]
 800c6fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800c700:	e138      	b.n	800c974 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c706:	2b03      	cmp	r3, #3
 800c708:	f200 80f1 	bhi.w	800c8ee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c710:	2b01      	cmp	r3, #1
 800c712:	d123      	bne.n	800c75c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c716:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c718:	68f8      	ldr	r0, [r7, #12]
 800c71a:	f002 fd41 	bl	800f1a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d001      	beq.n	800c728 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800c724:	2301      	movs	r3, #1
 800c726:	e139      	b.n	800c99c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	691a      	ldr	r2, [r3, #16]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c732:	b2d2      	uxtb	r2, r2
 800c734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c73a:	1c5a      	adds	r2, r3, #1
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c744:	3b01      	subs	r3, #1
 800c746:	b29a      	uxth	r2, r3
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c750:	b29b      	uxth	r3, r3
 800c752:	3b01      	subs	r3, #1
 800c754:	b29a      	uxth	r2, r3
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c75a:	e10b      	b.n	800c974 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c760:	2b02      	cmp	r3, #2
 800c762:	d14e      	bne.n	800c802 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c766:	9300      	str	r3, [sp, #0]
 800c768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76a:	2200      	movs	r2, #0
 800c76c:	4906      	ldr	r1, [pc, #24]	; (800c788 <HAL_I2C_Master_Receive+0x22c>)
 800c76e:	68f8      	ldr	r0, [r7, #12]
 800c770:	f002 fb8c 	bl	800ee8c <I2C_WaitOnFlagUntilTimeout>
 800c774:	4603      	mov	r3, r0
 800c776:	2b00      	cmp	r3, #0
 800c778:	d008      	beq.n	800c78c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800c77a:	2301      	movs	r3, #1
 800c77c:	e10e      	b.n	800c99c <HAL_I2C_Master_Receive+0x440>
 800c77e:	bf00      	nop
 800c780:	00100002 	.word	0x00100002
 800c784:	ffff0000 	.word	0xffff0000
 800c788:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	681a      	ldr	r2, [r3, #0]
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c79a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	691a      	ldr	r2, [r3, #16]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a6:	b2d2      	uxtb	r2, r2
 800c7a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ae:	1c5a      	adds	r2, r3, #1
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	b29a      	uxth	r2, r3
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	3b01      	subs	r3, #1
 800c7c8:	b29a      	uxth	r2, r3
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	691a      	ldr	r2, [r3, #16]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7d8:	b2d2      	uxtb	r2, r2
 800c7da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e0:	1c5a      	adds	r2, r3, #1
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7ea:	3b01      	subs	r3, #1
 800c7ec:	b29a      	uxth	r2, r3
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7f6:	b29b      	uxth	r3, r3
 800c7f8:	3b01      	subs	r3, #1
 800c7fa:	b29a      	uxth	r2, r3
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c800:	e0b8      	b.n	800c974 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c804:	9300      	str	r3, [sp, #0]
 800c806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c808:	2200      	movs	r2, #0
 800c80a:	4966      	ldr	r1, [pc, #408]	; (800c9a4 <HAL_I2C_Master_Receive+0x448>)
 800c80c:	68f8      	ldr	r0, [r7, #12]
 800c80e:	f002 fb3d 	bl	800ee8c <I2C_WaitOnFlagUntilTimeout>
 800c812:	4603      	mov	r3, r0
 800c814:	2b00      	cmp	r3, #0
 800c816:	d001      	beq.n	800c81c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800c818:	2301      	movs	r3, #1
 800c81a:	e0bf      	b.n	800c99c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c82a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	691a      	ldr	r2, [r3, #16]
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c836:	b2d2      	uxtb	r2, r2
 800c838:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c83e:	1c5a      	adds	r2, r3, #1
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c848:	3b01      	subs	r3, #1
 800c84a:	b29a      	uxth	r2, r3
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c854:	b29b      	uxth	r3, r3
 800c856:	3b01      	subs	r3, #1
 800c858:	b29a      	uxth	r2, r3
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c860:	9300      	str	r3, [sp, #0]
 800c862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c864:	2200      	movs	r2, #0
 800c866:	494f      	ldr	r1, [pc, #316]	; (800c9a4 <HAL_I2C_Master_Receive+0x448>)
 800c868:	68f8      	ldr	r0, [r7, #12]
 800c86a:	f002 fb0f 	bl	800ee8c <I2C_WaitOnFlagUntilTimeout>
 800c86e:	4603      	mov	r3, r0
 800c870:	2b00      	cmp	r3, #0
 800c872:	d001      	beq.n	800c878 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800c874:	2301      	movs	r3, #1
 800c876:	e091      	b.n	800c99c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c886:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	691a      	ldr	r2, [r3, #16]
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c892:	b2d2      	uxtb	r2, r2
 800c894:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c89a:	1c5a      	adds	r2, r3, #1
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8a4:	3b01      	subs	r3, #1
 800c8a6:	b29a      	uxth	r2, r3
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	3b01      	subs	r3, #1
 800c8b4:	b29a      	uxth	r2, r3
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	691a      	ldr	r2, [r3, #16]
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c4:	b2d2      	uxtb	r2, r2
 800c8c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8cc:	1c5a      	adds	r2, r3, #1
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	b29a      	uxth	r2, r3
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	3b01      	subs	r3, #1
 800c8e6:	b29a      	uxth	r2, r3
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c8ec:	e042      	b.n	800c974 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c8ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c8f2:	68f8      	ldr	r0, [r7, #12]
 800c8f4:	f002 fc54 	bl	800f1a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d001      	beq.n	800c902 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800c8fe:	2301      	movs	r3, #1
 800c900:	e04c      	b.n	800c99c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	691a      	ldr	r2, [r3, #16]
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c90c:	b2d2      	uxtb	r2, r2
 800c90e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c914:	1c5a      	adds	r2, r3, #1
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c91e:	3b01      	subs	r3, #1
 800c920:	b29a      	uxth	r2, r3
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	3b01      	subs	r3, #1
 800c92e:	b29a      	uxth	r2, r3
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	695b      	ldr	r3, [r3, #20]
 800c93a:	f003 0304 	and.w	r3, r3, #4
 800c93e:	2b04      	cmp	r3, #4
 800c940:	d118      	bne.n	800c974 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	691a      	ldr	r2, [r3, #16]
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c94c:	b2d2      	uxtb	r2, r2
 800c94e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c954:	1c5a      	adds	r2, r3, #1
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c95e:	3b01      	subs	r3, #1
 800c960:	b29a      	uxth	r2, r3
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	3b01      	subs	r3, #1
 800c96e:	b29a      	uxth	r2, r3
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c978:	2b00      	cmp	r3, #0
 800c97a:	f47f aec2 	bne.w	800c702 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2220      	movs	r2, #32
 800c982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	2200      	movs	r2, #0
 800c98a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	2200      	movs	r2, #0
 800c992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c996:	2300      	movs	r3, #0
 800c998:	e000      	b.n	800c99c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800c99a:	2302      	movs	r3, #2
  }
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3728      	adds	r7, #40	; 0x28
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	00010004 	.word	0x00010004

0800c9a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b088      	sub	sp, #32
 800c9ac:	af02      	add	r7, sp, #8
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	4608      	mov	r0, r1
 800c9b2:	4611      	mov	r1, r2
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	817b      	strh	r3, [r7, #10]
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	813b      	strh	r3, [r7, #8]
 800c9be:	4613      	mov	r3, r2
 800c9c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c9c2:	f7fe fbc1 	bl	800b148 <HAL_GetTick>
 800c9c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	2b20      	cmp	r3, #32
 800c9d2:	f040 80d9 	bne.w	800cb88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	9300      	str	r3, [sp, #0]
 800c9da:	2319      	movs	r3, #25
 800c9dc:	2201      	movs	r2, #1
 800c9de:	496d      	ldr	r1, [pc, #436]	; (800cb94 <HAL_I2C_Mem_Write+0x1ec>)
 800c9e0:	68f8      	ldr	r0, [r7, #12]
 800c9e2:	f002 fa53 	bl	800ee8c <I2C_WaitOnFlagUntilTimeout>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d001      	beq.n	800c9f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800c9ec:	2302      	movs	r3, #2
 800c9ee:	e0cc      	b.n	800cb8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9f6:	2b01      	cmp	r3, #1
 800c9f8:	d101      	bne.n	800c9fe <HAL_I2C_Mem_Write+0x56>
 800c9fa:	2302      	movs	r3, #2
 800c9fc:	e0c5      	b.n	800cb8a <HAL_I2C_Mem_Write+0x1e2>
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2201      	movs	r2, #1
 800ca02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f003 0301 	and.w	r3, r3, #1
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d007      	beq.n	800ca24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	681a      	ldr	r2, [r3, #0]
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f042 0201 	orr.w	r2, r2, #1
 800ca22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	681a      	ldr	r2, [r3, #0]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ca32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2221      	movs	r2, #33	; 0x21
 800ca38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2240      	movs	r2, #64	; 0x40
 800ca40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2200      	movs	r2, #0
 800ca48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	6a3a      	ldr	r2, [r7, #32]
 800ca4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ca54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca5a:	b29a      	uxth	r2, r3
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	4a4d      	ldr	r2, [pc, #308]	; (800cb98 <HAL_I2C_Mem_Write+0x1f0>)
 800ca64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ca66:	88f8      	ldrh	r0, [r7, #6]
 800ca68:	893a      	ldrh	r2, [r7, #8]
 800ca6a:	8979      	ldrh	r1, [r7, #10]
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	9301      	str	r3, [sp, #4]
 800ca70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca72:	9300      	str	r3, [sp, #0]
 800ca74:	4603      	mov	r3, r0
 800ca76:	68f8      	ldr	r0, [r7, #12]
 800ca78:	f001 ffe2 	bl	800ea40 <I2C_RequestMemoryWrite>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d052      	beq.n	800cb28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800ca82:	2301      	movs	r3, #1
 800ca84:	e081      	b.n	800cb8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ca86:	697a      	ldr	r2, [r7, #20]
 800ca88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca8a:	68f8      	ldr	r0, [r7, #12]
 800ca8c:	f002 fad4 	bl	800f038 <I2C_WaitOnTXEFlagUntilTimeout>
 800ca90:	4603      	mov	r3, r0
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d00d      	beq.n	800cab2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca9a:	2b04      	cmp	r3, #4
 800ca9c:	d107      	bne.n	800caae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800caac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800caae:	2301      	movs	r3, #1
 800cab0:	e06b      	b.n	800cb8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab6:	781a      	ldrb	r2, [r3, #0]
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cac2:	1c5a      	adds	r2, r3, #1
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cacc:	3b01      	subs	r3, #1
 800cace:	b29a      	uxth	r2, r3
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cad8:	b29b      	uxth	r3, r3
 800cada:	3b01      	subs	r3, #1
 800cadc:	b29a      	uxth	r2, r3
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	695b      	ldr	r3, [r3, #20]
 800cae8:	f003 0304 	and.w	r3, r3, #4
 800caec:	2b04      	cmp	r3, #4
 800caee:	d11b      	bne.n	800cb28 <HAL_I2C_Mem_Write+0x180>
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d017      	beq.n	800cb28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cafc:	781a      	ldrb	r2, [r3, #0]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb08:	1c5a      	adds	r2, r3, #1
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb12:	3b01      	subs	r3, #1
 800cb14:	b29a      	uxth	r2, r3
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	3b01      	subs	r3, #1
 800cb22:	b29a      	uxth	r2, r3
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d1aa      	bne.n	800ca86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cb30:	697a      	ldr	r2, [r7, #20]
 800cb32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f002 fac0 	bl	800f0ba <I2C_WaitOnBTFFlagUntilTimeout>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d00d      	beq.n	800cb5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb44:	2b04      	cmp	r3, #4
 800cb46:	d107      	bne.n	800cb58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	681a      	ldr	r2, [r3, #0]
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	e016      	b.n	800cb8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	681a      	ldr	r2, [r3, #0]
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2220      	movs	r2, #32
 800cb70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2200      	movs	r2, #0
 800cb78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cb84:	2300      	movs	r3, #0
 800cb86:	e000      	b.n	800cb8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800cb88:	2302      	movs	r3, #2
  }
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3718      	adds	r7, #24
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	00100002 	.word	0x00100002
 800cb98:	ffff0000 	.word	0xffff0000

0800cb9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b08c      	sub	sp, #48	; 0x30
 800cba0:	af02      	add	r7, sp, #8
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	4608      	mov	r0, r1
 800cba6:	4611      	mov	r1, r2
 800cba8:	461a      	mov	r2, r3
 800cbaa:	4603      	mov	r3, r0
 800cbac:	817b      	strh	r3, [r7, #10]
 800cbae:	460b      	mov	r3, r1
 800cbb0:	813b      	strh	r3, [r7, #8]
 800cbb2:	4613      	mov	r3, r2
 800cbb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cbb6:	f7fe fac7 	bl	800b148 <HAL_GetTick>
 800cbba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	2b20      	cmp	r3, #32
 800cbc6:	f040 8208 	bne.w	800cfda <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbcc:	9300      	str	r3, [sp, #0]
 800cbce:	2319      	movs	r3, #25
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	497b      	ldr	r1, [pc, #492]	; (800cdc0 <HAL_I2C_Mem_Read+0x224>)
 800cbd4:	68f8      	ldr	r0, [r7, #12]
 800cbd6:	f002 f959 	bl	800ee8c <I2C_WaitOnFlagUntilTimeout>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d001      	beq.n	800cbe4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800cbe0:	2302      	movs	r3, #2
 800cbe2:	e1fb      	b.n	800cfdc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	d101      	bne.n	800cbf2 <HAL_I2C_Mem_Read+0x56>
 800cbee:	2302      	movs	r3, #2
 800cbf0:	e1f4      	b.n	800cfdc <HAL_I2C_Mem_Read+0x440>
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	2201      	movs	r2, #1
 800cbf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f003 0301 	and.w	r3, r3, #1
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d007      	beq.n	800cc18 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f042 0201 	orr.w	r2, r2, #1
 800cc16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	681a      	ldr	r2, [r3, #0]
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cc26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	2222      	movs	r2, #34	; 0x22
 800cc2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2240      	movs	r2, #64	; 0x40
 800cc34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800cc48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc4e:	b29a      	uxth	r2, r3
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	4a5b      	ldr	r2, [pc, #364]	; (800cdc4 <HAL_I2C_Mem_Read+0x228>)
 800cc58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cc5a:	88f8      	ldrh	r0, [r7, #6]
 800cc5c:	893a      	ldrh	r2, [r7, #8]
 800cc5e:	8979      	ldrh	r1, [r7, #10]
 800cc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc62:	9301      	str	r3, [sp, #4]
 800cc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc66:	9300      	str	r3, [sp, #0]
 800cc68:	4603      	mov	r3, r0
 800cc6a:	68f8      	ldr	r0, [r7, #12]
 800cc6c:	f001 ff7e 	bl	800eb6c <I2C_RequestMemoryRead>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d001      	beq.n	800cc7a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800cc76:	2301      	movs	r3, #1
 800cc78:	e1b0      	b.n	800cfdc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d113      	bne.n	800ccaa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc82:	2300      	movs	r3, #0
 800cc84:	623b      	str	r3, [r7, #32]
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	695b      	ldr	r3, [r3, #20]
 800cc8c:	623b      	str	r3, [r7, #32]
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	699b      	ldr	r3, [r3, #24]
 800cc94:	623b      	str	r3, [r7, #32]
 800cc96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	681a      	ldr	r2, [r3, #0]
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cca6:	601a      	str	r2, [r3, #0]
 800cca8:	e184      	b.n	800cfb4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d11b      	bne.n	800ccea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	681a      	ldr	r2, [r3, #0]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	61fb      	str	r3, [r7, #28]
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	695b      	ldr	r3, [r3, #20]
 800cccc:	61fb      	str	r3, [r7, #28]
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	699b      	ldr	r3, [r3, #24]
 800ccd4:	61fb      	str	r3, [r7, #28]
 800ccd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cce6:	601a      	str	r2, [r3, #0]
 800cce8:	e164      	b.n	800cfb4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccee:	2b02      	cmp	r3, #2
 800ccf0:	d11b      	bne.n	800cd2a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	681a      	ldr	r2, [r3, #0]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cd12:	2300      	movs	r3, #0
 800cd14:	61bb      	str	r3, [r7, #24]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	695b      	ldr	r3, [r3, #20]
 800cd1c:	61bb      	str	r3, [r7, #24]
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	699b      	ldr	r3, [r3, #24]
 800cd24:	61bb      	str	r3, [r7, #24]
 800cd26:	69bb      	ldr	r3, [r7, #24]
 800cd28:	e144      	b.n	800cfb4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	617b      	str	r3, [r7, #20]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	695b      	ldr	r3, [r3, #20]
 800cd34:	617b      	str	r3, [r7, #20]
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	699b      	ldr	r3, [r3, #24]
 800cd3c:	617b      	str	r3, [r7, #20]
 800cd3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800cd40:	e138      	b.n	800cfb4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd46:	2b03      	cmp	r3, #3
 800cd48:	f200 80f1 	bhi.w	800cf2e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	d123      	bne.n	800cd9c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cd54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cd58:	68f8      	ldr	r0, [r7, #12]
 800cd5a:	f002 fa21 	bl	800f1a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d001      	beq.n	800cd68 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800cd64:	2301      	movs	r3, #1
 800cd66:	e139      	b.n	800cfdc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	691a      	ldr	r2, [r3, #16]
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd72:	b2d2      	uxtb	r2, r2
 800cd74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd7a:	1c5a      	adds	r2, r3, #1
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd84:	3b01      	subs	r3, #1
 800cd86:	b29a      	uxth	r2, r3
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	3b01      	subs	r3, #1
 800cd94:	b29a      	uxth	r2, r3
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cd9a:	e10b      	b.n	800cfb4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cda0:	2b02      	cmp	r3, #2
 800cda2:	d14e      	bne.n	800ce42 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda6:	9300      	str	r3, [sp, #0]
 800cda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdaa:	2200      	movs	r2, #0
 800cdac:	4906      	ldr	r1, [pc, #24]	; (800cdc8 <HAL_I2C_Mem_Read+0x22c>)
 800cdae:	68f8      	ldr	r0, [r7, #12]
 800cdb0:	f002 f86c 	bl	800ee8c <I2C_WaitOnFlagUntilTimeout>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d008      	beq.n	800cdcc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	e10e      	b.n	800cfdc <HAL_I2C_Mem_Read+0x440>
 800cdbe:	bf00      	nop
 800cdc0:	00100002 	.word	0x00100002
 800cdc4:	ffff0000 	.word	0xffff0000
 800cdc8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cdda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	691a      	ldr	r2, [r3, #16]
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde6:	b2d2      	uxtb	r2, r2
 800cde8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdee:	1c5a      	adds	r2, r3, #1
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdf8:	3b01      	subs	r3, #1
 800cdfa:	b29a      	uxth	r2, r3
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	3b01      	subs	r3, #1
 800ce08:	b29a      	uxth	r2, r3
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	691a      	ldr	r2, [r3, #16]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce18:	b2d2      	uxtb	r2, r2
 800ce1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce20:	1c5a      	adds	r2, r3, #1
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce2a:	3b01      	subs	r3, #1
 800ce2c:	b29a      	uxth	r2, r3
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	3b01      	subs	r3, #1
 800ce3a:	b29a      	uxth	r2, r3
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ce40:	e0b8      	b.n	800cfb4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ce42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce44:	9300      	str	r3, [sp, #0]
 800ce46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce48:	2200      	movs	r2, #0
 800ce4a:	4966      	ldr	r1, [pc, #408]	; (800cfe4 <HAL_I2C_Mem_Read+0x448>)
 800ce4c:	68f8      	ldr	r0, [r7, #12]
 800ce4e:	f002 f81d 	bl	800ee8c <I2C_WaitOnFlagUntilTimeout>
 800ce52:	4603      	mov	r3, r0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d001      	beq.n	800ce5c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800ce58:	2301      	movs	r3, #1
 800ce5a:	e0bf      	b.n	800cfdc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	681a      	ldr	r2, [r3, #0]
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	691a      	ldr	r2, [r3, #16]
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce76:	b2d2      	uxtb	r2, r2
 800ce78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce7e:	1c5a      	adds	r2, r3, #1
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce88:	3b01      	subs	r3, #1
 800ce8a:	b29a      	uxth	r2, r3
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce94:	b29b      	uxth	r3, r3
 800ce96:	3b01      	subs	r3, #1
 800ce98:	b29a      	uxth	r2, r3
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ce9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea0:	9300      	str	r3, [sp, #0]
 800cea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea4:	2200      	movs	r2, #0
 800cea6:	494f      	ldr	r1, [pc, #316]	; (800cfe4 <HAL_I2C_Mem_Read+0x448>)
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f001 ffef 	bl	800ee8c <I2C_WaitOnFlagUntilTimeout>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d001      	beq.n	800ceb8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	e091      	b.n	800cfdc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cec6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	691a      	ldr	r2, [r3, #16]
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced2:	b2d2      	uxtb	r2, r2
 800ced4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceda:	1c5a      	adds	r2, r3, #1
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cee4:	3b01      	subs	r3, #1
 800cee6:	b29a      	uxth	r2, r3
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cef0:	b29b      	uxth	r3, r3
 800cef2:	3b01      	subs	r3, #1
 800cef4:	b29a      	uxth	r2, r3
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	691a      	ldr	r2, [r3, #16]
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf04:	b2d2      	uxtb	r2, r2
 800cf06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf0c:	1c5a      	adds	r2, r3, #1
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf16:	3b01      	subs	r3, #1
 800cf18:	b29a      	uxth	r2, r3
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	3b01      	subs	r3, #1
 800cf26:	b29a      	uxth	r2, r3
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cf2c:	e042      	b.n	800cfb4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cf2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf32:	68f8      	ldr	r0, [r7, #12]
 800cf34:	f002 f934 	bl	800f1a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d001      	beq.n	800cf42 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800cf3e:	2301      	movs	r3, #1
 800cf40:	e04c      	b.n	800cfdc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	691a      	ldr	r2, [r3, #16]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf4c:	b2d2      	uxtb	r2, r2
 800cf4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf54:	1c5a      	adds	r2, r3, #1
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf5e:	3b01      	subs	r3, #1
 800cf60:	b29a      	uxth	r2, r3
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	3b01      	subs	r3, #1
 800cf6e:	b29a      	uxth	r2, r3
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	695b      	ldr	r3, [r3, #20]
 800cf7a:	f003 0304 	and.w	r3, r3, #4
 800cf7e:	2b04      	cmp	r3, #4
 800cf80:	d118      	bne.n	800cfb4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	691a      	ldr	r2, [r3, #16]
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf8c:	b2d2      	uxtb	r2, r2
 800cf8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf94:	1c5a      	adds	r2, r3, #1
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf9e:	3b01      	subs	r3, #1
 800cfa0:	b29a      	uxth	r2, r3
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	3b01      	subs	r3, #1
 800cfae:	b29a      	uxth	r2, r3
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	f47f aec2 	bne.w	800cd42 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2220      	movs	r2, #32
 800cfc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	e000      	b.n	800cfdc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800cfda:	2302      	movs	r3, #2
  }
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3728      	adds	r7, #40	; 0x28
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}
 800cfe4:	00010004 	.word	0x00010004

0800cfe8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b088      	sub	sp, #32
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800cff0:	2300      	movs	r3, #0
 800cff2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d000:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d008:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d010:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800d012:	7bfb      	ldrb	r3, [r7, #15]
 800d014:	2b10      	cmp	r3, #16
 800d016:	d003      	beq.n	800d020 <HAL_I2C_EV_IRQHandler+0x38>
 800d018:	7bfb      	ldrb	r3, [r7, #15]
 800d01a:	2b40      	cmp	r3, #64	; 0x40
 800d01c:	f040 80c1 	bne.w	800d1a2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	699b      	ldr	r3, [r3, #24]
 800d026:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	695b      	ldr	r3, [r3, #20]
 800d02e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800d030:	69fb      	ldr	r3, [r7, #28]
 800d032:	f003 0301 	and.w	r3, r3, #1
 800d036:	2b00      	cmp	r3, #0
 800d038:	d10d      	bne.n	800d056 <HAL_I2C_EV_IRQHandler+0x6e>
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800d040:	d003      	beq.n	800d04a <HAL_I2C_EV_IRQHandler+0x62>
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800d048:	d101      	bne.n	800d04e <HAL_I2C_EV_IRQHandler+0x66>
 800d04a:	2301      	movs	r3, #1
 800d04c:	e000      	b.n	800d050 <HAL_I2C_EV_IRQHandler+0x68>
 800d04e:	2300      	movs	r3, #0
 800d050:	2b01      	cmp	r3, #1
 800d052:	f000 8132 	beq.w	800d2ba <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d056:	69fb      	ldr	r3, [r7, #28]
 800d058:	f003 0301 	and.w	r3, r3, #1
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d00c      	beq.n	800d07a <HAL_I2C_EV_IRQHandler+0x92>
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	0a5b      	lsrs	r3, r3, #9
 800d064:	f003 0301 	and.w	r3, r3, #1
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d006      	beq.n	800d07a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f002 f91c 	bl	800f2aa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 fd79 	bl	800db6a <I2C_Master_SB>
 800d078:	e092      	b.n	800d1a0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d07a:	69fb      	ldr	r3, [r7, #28]
 800d07c:	08db      	lsrs	r3, r3, #3
 800d07e:	f003 0301 	and.w	r3, r3, #1
 800d082:	2b00      	cmp	r3, #0
 800d084:	d009      	beq.n	800d09a <HAL_I2C_EV_IRQHandler+0xb2>
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	0a5b      	lsrs	r3, r3, #9
 800d08a:	f003 0301 	and.w	r3, r3, #1
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d003      	beq.n	800d09a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 fdef 	bl	800dc76 <I2C_Master_ADD10>
 800d098:	e082      	b.n	800d1a0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d09a:	69fb      	ldr	r3, [r7, #28]
 800d09c:	085b      	lsrs	r3, r3, #1
 800d09e:	f003 0301 	and.w	r3, r3, #1
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d009      	beq.n	800d0ba <HAL_I2C_EV_IRQHandler+0xd2>
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	0a5b      	lsrs	r3, r3, #9
 800d0aa:	f003 0301 	and.w	r3, r3, #1
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d003      	beq.n	800d0ba <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 fe09 	bl	800dcca <I2C_Master_ADDR>
 800d0b8:	e072      	b.n	800d1a0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	089b      	lsrs	r3, r3, #2
 800d0be:	f003 0301 	and.w	r3, r3, #1
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d03b      	beq.n	800d13e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d0d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d0d4:	f000 80f3 	beq.w	800d2be <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d0d8:	69fb      	ldr	r3, [r7, #28]
 800d0da:	09db      	lsrs	r3, r3, #7
 800d0dc:	f003 0301 	and.w	r3, r3, #1
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d00f      	beq.n	800d104 <HAL_I2C_EV_IRQHandler+0x11c>
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	0a9b      	lsrs	r3, r3, #10
 800d0e8:	f003 0301 	and.w	r3, r3, #1
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d009      	beq.n	800d104 <HAL_I2C_EV_IRQHandler+0x11c>
 800d0f0:	69fb      	ldr	r3, [r7, #28]
 800d0f2:	089b      	lsrs	r3, r3, #2
 800d0f4:	f003 0301 	and.w	r3, r3, #1
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d103      	bne.n	800d104 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 f9f3 	bl	800d4e8 <I2C_MasterTransmit_TXE>
 800d102:	e04d      	b.n	800d1a0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	089b      	lsrs	r3, r3, #2
 800d108:	f003 0301 	and.w	r3, r3, #1
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	f000 80d6 	beq.w	800d2be <HAL_I2C_EV_IRQHandler+0x2d6>
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	0a5b      	lsrs	r3, r3, #9
 800d116:	f003 0301 	and.w	r3, r3, #1
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	f000 80cf 	beq.w	800d2be <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800d120:	7bbb      	ldrb	r3, [r7, #14]
 800d122:	2b21      	cmp	r3, #33	; 0x21
 800d124:	d103      	bne.n	800d12e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 fa7a 	bl	800d620 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d12c:	e0c7      	b.n	800d2be <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800d12e:	7bfb      	ldrb	r3, [r7, #15]
 800d130:	2b40      	cmp	r3, #64	; 0x40
 800d132:	f040 80c4 	bne.w	800d2be <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f000 fae8 	bl	800d70c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d13c:	e0bf      	b.n	800d2be <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d14c:	f000 80b7 	beq.w	800d2be <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d150:	69fb      	ldr	r3, [r7, #28]
 800d152:	099b      	lsrs	r3, r3, #6
 800d154:	f003 0301 	and.w	r3, r3, #1
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00f      	beq.n	800d17c <HAL_I2C_EV_IRQHandler+0x194>
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	0a9b      	lsrs	r3, r3, #10
 800d160:	f003 0301 	and.w	r3, r3, #1
 800d164:	2b00      	cmp	r3, #0
 800d166:	d009      	beq.n	800d17c <HAL_I2C_EV_IRQHandler+0x194>
 800d168:	69fb      	ldr	r3, [r7, #28]
 800d16a:	089b      	lsrs	r3, r3, #2
 800d16c:	f003 0301 	and.w	r3, r3, #1
 800d170:	2b00      	cmp	r3, #0
 800d172:	d103      	bne.n	800d17c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f000 fb5d 	bl	800d834 <I2C_MasterReceive_RXNE>
 800d17a:	e011      	b.n	800d1a0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	089b      	lsrs	r3, r3, #2
 800d180:	f003 0301 	and.w	r3, r3, #1
 800d184:	2b00      	cmp	r3, #0
 800d186:	f000 809a 	beq.w	800d2be <HAL_I2C_EV_IRQHandler+0x2d6>
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	0a5b      	lsrs	r3, r3, #9
 800d18e:	f003 0301 	and.w	r3, r3, #1
 800d192:	2b00      	cmp	r3, #0
 800d194:	f000 8093 	beq.w	800d2be <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f000 fbfc 	bl	800d996 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d19e:	e08e      	b.n	800d2be <HAL_I2C_EV_IRQHandler+0x2d6>
 800d1a0:	e08d      	b.n	800d2be <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d004      	beq.n	800d1b4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	695b      	ldr	r3, [r3, #20]
 800d1b0:	61fb      	str	r3, [r7, #28]
 800d1b2:	e007      	b.n	800d1c4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	699b      	ldr	r3, [r3, #24]
 800d1ba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	695b      	ldr	r3, [r3, #20]
 800d1c2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d1c4:	69fb      	ldr	r3, [r7, #28]
 800d1c6:	085b      	lsrs	r3, r3, #1
 800d1c8:	f003 0301 	and.w	r3, r3, #1
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d012      	beq.n	800d1f6 <HAL_I2C_EV_IRQHandler+0x20e>
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	0a5b      	lsrs	r3, r3, #9
 800d1d4:	f003 0301 	and.w	r3, r3, #1
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d00c      	beq.n	800d1f6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d003      	beq.n	800d1ec <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	699b      	ldr	r3, [r3, #24]
 800d1ea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800d1ec:	69b9      	ldr	r1, [r7, #24]
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 ffba 	bl	800e168 <I2C_Slave_ADDR>
 800d1f4:	e066      	b.n	800d2c4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	091b      	lsrs	r3, r3, #4
 800d1fa:	f003 0301 	and.w	r3, r3, #1
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d009      	beq.n	800d216 <HAL_I2C_EV_IRQHandler+0x22e>
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	0a5b      	lsrs	r3, r3, #9
 800d206:	f003 0301 	and.w	r3, r3, #1
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d003      	beq.n	800d216 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 fff4 	bl	800e1fc <I2C_Slave_STOPF>
 800d214:	e056      	b.n	800d2c4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d216:	7bbb      	ldrb	r3, [r7, #14]
 800d218:	2b21      	cmp	r3, #33	; 0x21
 800d21a:	d002      	beq.n	800d222 <HAL_I2C_EV_IRQHandler+0x23a>
 800d21c:	7bbb      	ldrb	r3, [r7, #14]
 800d21e:	2b29      	cmp	r3, #41	; 0x29
 800d220:	d125      	bne.n	800d26e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	09db      	lsrs	r3, r3, #7
 800d226:	f003 0301 	and.w	r3, r3, #1
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00f      	beq.n	800d24e <HAL_I2C_EV_IRQHandler+0x266>
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	0a9b      	lsrs	r3, r3, #10
 800d232:	f003 0301 	and.w	r3, r3, #1
 800d236:	2b00      	cmp	r3, #0
 800d238:	d009      	beq.n	800d24e <HAL_I2C_EV_IRQHandler+0x266>
 800d23a:	69fb      	ldr	r3, [r7, #28]
 800d23c:	089b      	lsrs	r3, r3, #2
 800d23e:	f003 0301 	and.w	r3, r3, #1
 800d242:	2b00      	cmp	r3, #0
 800d244:	d103      	bne.n	800d24e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f000 fed0 	bl	800dfec <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d24c:	e039      	b.n	800d2c2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d24e:	69fb      	ldr	r3, [r7, #28]
 800d250:	089b      	lsrs	r3, r3, #2
 800d252:	f003 0301 	and.w	r3, r3, #1
 800d256:	2b00      	cmp	r3, #0
 800d258:	d033      	beq.n	800d2c2 <HAL_I2C_EV_IRQHandler+0x2da>
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	0a5b      	lsrs	r3, r3, #9
 800d25e:	f003 0301 	and.w	r3, r3, #1
 800d262:	2b00      	cmp	r3, #0
 800d264:	d02d      	beq.n	800d2c2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f000 fefd 	bl	800e066 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d26c:	e029      	b.n	800d2c2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	099b      	lsrs	r3, r3, #6
 800d272:	f003 0301 	and.w	r3, r3, #1
 800d276:	2b00      	cmp	r3, #0
 800d278:	d00f      	beq.n	800d29a <HAL_I2C_EV_IRQHandler+0x2b2>
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	0a9b      	lsrs	r3, r3, #10
 800d27e:	f003 0301 	and.w	r3, r3, #1
 800d282:	2b00      	cmp	r3, #0
 800d284:	d009      	beq.n	800d29a <HAL_I2C_EV_IRQHandler+0x2b2>
 800d286:	69fb      	ldr	r3, [r7, #28]
 800d288:	089b      	lsrs	r3, r3, #2
 800d28a:	f003 0301 	and.w	r3, r3, #1
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d103      	bne.n	800d29a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 ff08 	bl	800e0a8 <I2C_SlaveReceive_RXNE>
 800d298:	e014      	b.n	800d2c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d29a:	69fb      	ldr	r3, [r7, #28]
 800d29c:	089b      	lsrs	r3, r3, #2
 800d29e:	f003 0301 	and.w	r3, r3, #1
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d00e      	beq.n	800d2c4 <HAL_I2C_EV_IRQHandler+0x2dc>
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	0a5b      	lsrs	r3, r3, #9
 800d2aa:	f003 0301 	and.w	r3, r3, #1
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d008      	beq.n	800d2c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f000 ff36 	bl	800e124 <I2C_SlaveReceive_BTF>
 800d2b8:	e004      	b.n	800d2c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800d2ba:	bf00      	nop
 800d2bc:	e002      	b.n	800d2c4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d2be:	bf00      	nop
 800d2c0:	e000      	b.n	800d2c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d2c2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800d2c4:	3720      	adds	r7, #32
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}

0800d2ca <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b08a      	sub	sp, #40	; 0x28
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	695b      	ldr	r3, [r3, #20]
 800d2d8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d2ec:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d2ee:	6a3b      	ldr	r3, [r7, #32]
 800d2f0:	0a1b      	lsrs	r3, r3, #8
 800d2f2:	f003 0301 	and.w	r3, r3, #1
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d00e      	beq.n	800d318 <HAL_I2C_ER_IRQHandler+0x4e>
 800d2fa:	69fb      	ldr	r3, [r7, #28]
 800d2fc:	0a1b      	lsrs	r3, r3, #8
 800d2fe:	f003 0301 	and.w	r3, r3, #1
 800d302:	2b00      	cmp	r3, #0
 800d304:	d008      	beq.n	800d318 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800d306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d308:	f043 0301 	orr.w	r3, r3, #1
 800d30c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d316:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d318:	6a3b      	ldr	r3, [r7, #32]
 800d31a:	0a5b      	lsrs	r3, r3, #9
 800d31c:	f003 0301 	and.w	r3, r3, #1
 800d320:	2b00      	cmp	r3, #0
 800d322:	d00e      	beq.n	800d342 <HAL_I2C_ER_IRQHandler+0x78>
 800d324:	69fb      	ldr	r3, [r7, #28]
 800d326:	0a1b      	lsrs	r3, r3, #8
 800d328:	f003 0301 	and.w	r3, r3, #1
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d008      	beq.n	800d342 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800d330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d332:	f043 0302 	orr.w	r3, r3, #2
 800d336:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800d340:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d342:	6a3b      	ldr	r3, [r7, #32]
 800d344:	0a9b      	lsrs	r3, r3, #10
 800d346:	f003 0301 	and.w	r3, r3, #1
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d03f      	beq.n	800d3ce <HAL_I2C_ER_IRQHandler+0x104>
 800d34e:	69fb      	ldr	r3, [r7, #28]
 800d350:	0a1b      	lsrs	r3, r3, #8
 800d352:	f003 0301 	and.w	r3, r3, #1
 800d356:	2b00      	cmp	r3, #0
 800d358:	d039      	beq.n	800d3ce <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800d35a:	7efb      	ldrb	r3, [r7, #27]
 800d35c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d362:	b29b      	uxth	r3, r3
 800d364:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d36c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d372:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800d374:	7ebb      	ldrb	r3, [r7, #26]
 800d376:	2b20      	cmp	r3, #32
 800d378:	d112      	bne.n	800d3a0 <HAL_I2C_ER_IRQHandler+0xd6>
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d10f      	bne.n	800d3a0 <HAL_I2C_ER_IRQHandler+0xd6>
 800d380:	7cfb      	ldrb	r3, [r7, #19]
 800d382:	2b21      	cmp	r3, #33	; 0x21
 800d384:	d008      	beq.n	800d398 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800d386:	7cfb      	ldrb	r3, [r7, #19]
 800d388:	2b29      	cmp	r3, #41	; 0x29
 800d38a:	d005      	beq.n	800d398 <HAL_I2C_ER_IRQHandler+0xce>
 800d38c:	7cfb      	ldrb	r3, [r7, #19]
 800d38e:	2b28      	cmp	r3, #40	; 0x28
 800d390:	d106      	bne.n	800d3a0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2b21      	cmp	r3, #33	; 0x21
 800d396:	d103      	bne.n	800d3a0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f001 f85f 	bl	800e45c <I2C_Slave_AF>
 800d39e:	e016      	b.n	800d3ce <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d3a8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800d3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ac:	f043 0304 	orr.w	r3, r3, #4
 800d3b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800d3b2:	7efb      	ldrb	r3, [r7, #27]
 800d3b4:	2b10      	cmp	r3, #16
 800d3b6:	d002      	beq.n	800d3be <HAL_I2C_ER_IRQHandler+0xf4>
 800d3b8:	7efb      	ldrb	r3, [r7, #27]
 800d3ba:	2b40      	cmp	r3, #64	; 0x40
 800d3bc:	d107      	bne.n	800d3ce <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3cc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d3ce:	6a3b      	ldr	r3, [r7, #32]
 800d3d0:	0adb      	lsrs	r3, r3, #11
 800d3d2:	f003 0301 	and.w	r3, r3, #1
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d00e      	beq.n	800d3f8 <HAL_I2C_ER_IRQHandler+0x12e>
 800d3da:	69fb      	ldr	r3, [r7, #28]
 800d3dc:	0a1b      	lsrs	r3, r3, #8
 800d3de:	f003 0301 	and.w	r3, r3, #1
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d008      	beq.n	800d3f8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800d3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e8:	f043 0308 	orr.w	r3, r3, #8
 800d3ec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800d3f6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800d3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d008      	beq.n	800d410 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d404:	431a      	orrs	r2, r3
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f001 f896 	bl	800e53c <I2C_ITError>
  }
}
 800d410:	bf00      	nop
 800d412:	3728      	adds	r7, #40	; 0x28
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d418:	b480      	push	{r7}
 800d41a:	b083      	sub	sp, #12
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800d420:	bf00      	nop
 800d422:	370c      	adds	r7, #12
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr

0800d42c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b083      	sub	sp, #12
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800d434:	bf00      	nop
 800d436:	370c      	adds	r7, #12
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr

0800d440 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800d448:	bf00      	nop
 800d44a:	370c      	adds	r7, #12
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr

0800d454 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d454:	b480      	push	{r7}
 800d456:	b083      	sub	sp, #12
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800d45c:	bf00      	nop
 800d45e:	370c      	adds	r7, #12
 800d460:	46bd      	mov	sp, r7
 800d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d466:	4770      	bx	lr

0800d468 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	460b      	mov	r3, r1
 800d472:	70fb      	strb	r3, [r7, #3]
 800d474:	4613      	mov	r3, r2
 800d476:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800d478:	bf00      	nop
 800d47a:	370c      	adds	r7, #12
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr

0800d484 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800d48c:	bf00      	nop
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr

0800d498 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800d4a0:	bf00      	nop
 800d4a2:	370c      	adds	r7, #12
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr

0800d4ac <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800d4b4:	bf00      	nop
 800d4b6:	370c      	adds	r7, #12
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr

0800d4c0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800d4c8:	bf00      	nop
 800d4ca:	370c      	adds	r7, #12
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr

0800d4d4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b083      	sub	sp, #12
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800d4dc:	bf00      	nop
 800d4de:	370c      	adds	r7, #12
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr

0800d4e8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b084      	sub	sp, #16
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d4fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d504:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d150      	bne.n	800d5b0 <I2C_MasterTransmit_TXE+0xc8>
 800d50e:	7bfb      	ldrb	r3, [r7, #15]
 800d510:	2b21      	cmp	r3, #33	; 0x21
 800d512:	d14d      	bne.n	800d5b0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	2b08      	cmp	r3, #8
 800d518:	d01d      	beq.n	800d556 <I2C_MasterTransmit_TXE+0x6e>
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	2b20      	cmp	r3, #32
 800d51e:	d01a      	beq.n	800d556 <I2C_MasterTransmit_TXE+0x6e>
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d526:	d016      	beq.n	800d556 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	685a      	ldr	r2, [r3, #4]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d536:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2211      	movs	r2, #17
 800d53c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2200      	movs	r2, #0
 800d542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2220      	movs	r2, #32
 800d54a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f7ff ff62 	bl	800d418 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d554:	e060      	b.n	800d618 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	685a      	ldr	r2, [r3, #4]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d564:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d574:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2200      	movs	r2, #0
 800d57a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2220      	movs	r2, #32
 800d580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	2b40      	cmp	r3, #64	; 0x40
 800d58e:	d107      	bne.n	800d5a0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2200      	movs	r2, #0
 800d594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f7ff ff7d 	bl	800d498 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d59e:	e03b      	b.n	800d618 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f7ff ff35 	bl	800d418 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d5ae:	e033      	b.n	800d618 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800d5b0:	7bfb      	ldrb	r3, [r7, #15]
 800d5b2:	2b21      	cmp	r3, #33	; 0x21
 800d5b4:	d005      	beq.n	800d5c2 <I2C_MasterTransmit_TXE+0xda>
 800d5b6:	7bbb      	ldrb	r3, [r7, #14]
 800d5b8:	2b40      	cmp	r3, #64	; 0x40
 800d5ba:	d12d      	bne.n	800d618 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800d5bc:	7bfb      	ldrb	r3, [r7, #15]
 800d5be:	2b22      	cmp	r3, #34	; 0x22
 800d5c0:	d12a      	bne.n	800d618 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d108      	bne.n	800d5de <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	685a      	ldr	r2, [r3, #4]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5da:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800d5dc:	e01c      	b.n	800d618 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	2b40      	cmp	r3, #64	; 0x40
 800d5e8:	d103      	bne.n	800d5f2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 f88e 	bl	800d70c <I2C_MemoryTransmit_TXE_BTF>
}
 800d5f0:	e012      	b.n	800d618 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f6:	781a      	ldrb	r2, [r3, #0]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d602:	1c5a      	adds	r2, r3, #1
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	3b01      	subs	r3, #1
 800d610:	b29a      	uxth	r2, r3
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d616:	e7ff      	b.n	800d618 <I2C_MasterTransmit_TXE+0x130>
 800d618:	bf00      	nop
 800d61a:	3710      	adds	r7, #16
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d62c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d634:	b2db      	uxtb	r3, r3
 800d636:	2b21      	cmp	r3, #33	; 0x21
 800d638:	d164      	bne.n	800d704 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d63e:	b29b      	uxth	r3, r3
 800d640:	2b00      	cmp	r3, #0
 800d642:	d012      	beq.n	800d66a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d648:	781a      	ldrb	r2, [r3, #0]
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d654:	1c5a      	adds	r2, r3, #1
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d65e:	b29b      	uxth	r3, r3
 800d660:	3b01      	subs	r3, #1
 800d662:	b29a      	uxth	r2, r3
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800d668:	e04c      	b.n	800d704 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	2b08      	cmp	r3, #8
 800d66e:	d01d      	beq.n	800d6ac <I2C_MasterTransmit_BTF+0x8c>
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2b20      	cmp	r3, #32
 800d674:	d01a      	beq.n	800d6ac <I2C_MasterTransmit_BTF+0x8c>
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d67c:	d016      	beq.n	800d6ac <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	685a      	ldr	r2, [r3, #4]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d68c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2211      	movs	r2, #17
 800d692:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2200      	movs	r2, #0
 800d698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2220      	movs	r2, #32
 800d6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f7ff feb7 	bl	800d418 <HAL_I2C_MasterTxCpltCallback>
}
 800d6aa:	e02b      	b.n	800d704 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	685a      	ldr	r2, [r3, #4]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d6ba:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d6ca:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2220      	movs	r2, #32
 800d6d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	2b40      	cmp	r3, #64	; 0x40
 800d6e4:	d107      	bne.n	800d6f6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f7ff fed2 	bl	800d498 <HAL_I2C_MemTxCpltCallback>
}
 800d6f4:	e006      	b.n	800d704 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f7ff fe8a 	bl	800d418 <HAL_I2C_MasterTxCpltCallback>
}
 800d704:	bf00      	nop
 800d706:	3710      	adds	r7, #16
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d71a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d720:	2b00      	cmp	r3, #0
 800d722:	d11d      	bne.n	800d760 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d10b      	bne.n	800d744 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d730:	b2da      	uxtb	r2, r3
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d73c:	1c9a      	adds	r2, r3, #2
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800d742:	e073      	b.n	800d82c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d748:	b29b      	uxth	r3, r3
 800d74a:	121b      	asrs	r3, r3, #8
 800d74c:	b2da      	uxtb	r2, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d758:	1c5a      	adds	r2, r3, #1
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d75e:	e065      	b.n	800d82c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d764:	2b01      	cmp	r3, #1
 800d766:	d10b      	bne.n	800d780 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d76c:	b2da      	uxtb	r2, r3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d778:	1c5a      	adds	r2, r3, #1
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d77e:	e055      	b.n	800d82c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d784:	2b02      	cmp	r3, #2
 800d786:	d151      	bne.n	800d82c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800d788:	7bfb      	ldrb	r3, [r7, #15]
 800d78a:	2b22      	cmp	r3, #34	; 0x22
 800d78c:	d10d      	bne.n	800d7aa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d79c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7a2:	1c5a      	adds	r2, r3, #1
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d7a8:	e040      	b.n	800d82c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d015      	beq.n	800d7e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800d7b4:	7bfb      	ldrb	r3, [r7, #15]
 800d7b6:	2b21      	cmp	r3, #33	; 0x21
 800d7b8:	d112      	bne.n	800d7e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7be:	781a      	ldrb	r2, [r3, #0]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ca:	1c5a      	adds	r2, r3, #1
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7d4:	b29b      	uxth	r3, r3
 800d7d6:	3b01      	subs	r3, #1
 800d7d8:	b29a      	uxth	r2, r3
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d7de:	e025      	b.n	800d82c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7e4:	b29b      	uxth	r3, r3
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d120      	bne.n	800d82c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800d7ea:	7bfb      	ldrb	r3, [r7, #15]
 800d7ec:	2b21      	cmp	r3, #33	; 0x21
 800d7ee:	d11d      	bne.n	800d82c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	685a      	ldr	r2, [r3, #4]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d7fe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	681a      	ldr	r2, [r3, #0]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d80e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2200      	movs	r2, #0
 800d814:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2220      	movs	r2, #32
 800d81a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2200      	movs	r2, #0
 800d822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f7ff fe36 	bl	800d498 <HAL_I2C_MemTxCpltCallback>
}
 800d82c:	bf00      	nop
 800d82e:	3710      	adds	r7, #16
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d842:	b2db      	uxtb	r3, r3
 800d844:	2b22      	cmp	r3, #34	; 0x22
 800d846:	f040 80a2 	bne.w	800d98e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d84e:	b29b      	uxth	r3, r3
 800d850:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2b03      	cmp	r3, #3
 800d856:	d921      	bls.n	800d89c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	691a      	ldr	r2, [r3, #16]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d862:	b2d2      	uxtb	r2, r2
 800d864:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d86a:	1c5a      	adds	r2, r3, #1
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d874:	b29b      	uxth	r3, r3
 800d876:	3b01      	subs	r3, #1
 800d878:	b29a      	uxth	r2, r3
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d882:	b29b      	uxth	r3, r3
 800d884:	2b03      	cmp	r3, #3
 800d886:	f040 8082 	bne.w	800d98e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	685a      	ldr	r2, [r3, #4]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d898:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800d89a:	e078      	b.n	800d98e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a0:	2b02      	cmp	r3, #2
 800d8a2:	d074      	beq.n	800d98e <I2C_MasterReceive_RXNE+0x15a>
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2b01      	cmp	r3, #1
 800d8a8:	d002      	beq.n	800d8b0 <I2C_MasterReceive_RXNE+0x7c>
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d16e      	bne.n	800d98e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f001 fc43 	bl	800f13c <I2C_WaitOnSTOPRequestThroughIT>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d142      	bne.n	800d942 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d8ca:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	685a      	ldr	r2, [r3, #4]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d8da:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	691a      	ldr	r2, [r3, #16]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8e6:	b2d2      	uxtb	r2, r2
 800d8e8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ee:	1c5a      	adds	r2, r3, #1
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	3b01      	subs	r3, #1
 800d8fc:	b29a      	uxth	r2, r3
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2220      	movs	r2, #32
 800d906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d910:	b2db      	uxtb	r3, r3
 800d912:	2b40      	cmp	r3, #64	; 0x40
 800d914:	d10a      	bne.n	800d92c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2200      	movs	r2, #0
 800d922:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f7ff fdc1 	bl	800d4ac <HAL_I2C_MemRxCpltCallback>
}
 800d92a:	e030      	b.n	800d98e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2200      	movs	r2, #0
 800d930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2212      	movs	r2, #18
 800d938:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f7ff fd76 	bl	800d42c <HAL_I2C_MasterRxCpltCallback>
}
 800d940:	e025      	b.n	800d98e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	685a      	ldr	r2, [r3, #4]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d950:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	691a      	ldr	r2, [r3, #16]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d95c:	b2d2      	uxtb	r2, r2
 800d95e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d964:	1c5a      	adds	r2, r3, #1
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d96e:	b29b      	uxth	r3, r3
 800d970:	3b01      	subs	r3, #1
 800d972:	b29a      	uxth	r2, r3
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2220      	movs	r2, #32
 800d97c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f7ff fd99 	bl	800d4c0 <HAL_I2C_ErrorCallback>
}
 800d98e:	bf00      	nop
 800d990:	3710      	adds	r7, #16
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}

0800d996 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800d996:	b580      	push	{r7, lr}
 800d998:	b084      	sub	sp, #16
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	2b04      	cmp	r3, #4
 800d9ac:	d11b      	bne.n	800d9e6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	685a      	ldr	r2, [r3, #4]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9bc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	691a      	ldr	r2, [r3, #16]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9c8:	b2d2      	uxtb	r2, r2
 800d9ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9d0:	1c5a      	adds	r2, r3, #1
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	3b01      	subs	r3, #1
 800d9de:	b29a      	uxth	r2, r3
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800d9e4:	e0bd      	b.n	800db62 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9ea:	b29b      	uxth	r3, r3
 800d9ec:	2b03      	cmp	r3, #3
 800d9ee:	d129      	bne.n	800da44 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	685a      	ldr	r2, [r3, #4]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9fe:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2b04      	cmp	r3, #4
 800da04:	d00a      	beq.n	800da1c <I2C_MasterReceive_BTF+0x86>
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2b02      	cmp	r3, #2
 800da0a:	d007      	beq.n	800da1c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	681a      	ldr	r2, [r3, #0]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da1a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	691a      	ldr	r2, [r3, #16]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da26:	b2d2      	uxtb	r2, r2
 800da28:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da2e:	1c5a      	adds	r2, r3, #1
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da38:	b29b      	uxth	r3, r3
 800da3a:	3b01      	subs	r3, #1
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800da42:	e08e      	b.n	800db62 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da48:	b29b      	uxth	r3, r3
 800da4a:	2b02      	cmp	r3, #2
 800da4c:	d176      	bne.n	800db3c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	2b01      	cmp	r3, #1
 800da52:	d002      	beq.n	800da5a <I2C_MasterReceive_BTF+0xc4>
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	2b10      	cmp	r3, #16
 800da58:	d108      	bne.n	800da6c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	681a      	ldr	r2, [r3, #0]
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da68:	601a      	str	r2, [r3, #0]
 800da6a:	e019      	b.n	800daa0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2b04      	cmp	r3, #4
 800da70:	d002      	beq.n	800da78 <I2C_MasterReceive_BTF+0xe2>
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	2b02      	cmp	r3, #2
 800da76:	d108      	bne.n	800da8a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	681a      	ldr	r2, [r3, #0]
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800da86:	601a      	str	r2, [r3, #0]
 800da88:	e00a      	b.n	800daa0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	2b10      	cmp	r3, #16
 800da8e:	d007      	beq.n	800daa0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	681a      	ldr	r2, [r3, #0]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da9e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	691a      	ldr	r2, [r3, #16]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daaa:	b2d2      	uxtb	r2, r2
 800daac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dab2:	1c5a      	adds	r2, r3, #1
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	3b01      	subs	r3, #1
 800dac0:	b29a      	uxth	r2, r3
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	691a      	ldr	r2, [r3, #16]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad0:	b2d2      	uxtb	r2, r2
 800dad2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad8:	1c5a      	adds	r2, r3, #1
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dae2:	b29b      	uxth	r3, r3
 800dae4:	3b01      	subs	r3, #1
 800dae6:	b29a      	uxth	r2, r3
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	685a      	ldr	r2, [r3, #4]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800dafa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2220      	movs	r2, #32
 800db00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	2b40      	cmp	r3, #64	; 0x40
 800db0e:	d10a      	bne.n	800db26 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2200      	movs	r2, #0
 800db14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2200      	movs	r2, #0
 800db1c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f7ff fcc4 	bl	800d4ac <HAL_I2C_MemRxCpltCallback>
}
 800db24:	e01d      	b.n	800db62 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2200      	movs	r2, #0
 800db2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2212      	movs	r2, #18
 800db32:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f7ff fc79 	bl	800d42c <HAL_I2C_MasterRxCpltCallback>
}
 800db3a:	e012      	b.n	800db62 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	691a      	ldr	r2, [r3, #16]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db46:	b2d2      	uxtb	r2, r2
 800db48:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db4e:	1c5a      	adds	r2, r3, #1
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db58:	b29b      	uxth	r3, r3
 800db5a:	3b01      	subs	r3, #1
 800db5c:	b29a      	uxth	r2, r3
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800db62:	bf00      	nop
 800db64:	3710      	adds	r7, #16
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}

0800db6a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800db6a:	b480      	push	{r7}
 800db6c:	b083      	sub	sp, #12
 800db6e:	af00      	add	r7, sp, #0
 800db70:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	2b40      	cmp	r3, #64	; 0x40
 800db7c:	d117      	bne.n	800dbae <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db82:	2b00      	cmp	r3, #0
 800db84:	d109      	bne.n	800db9a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	461a      	mov	r2, r3
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800db96:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800db98:	e067      	b.n	800dc6a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	f043 0301 	orr.w	r3, r3, #1
 800dba4:	b2da      	uxtb	r2, r3
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	611a      	str	r2, [r3, #16]
}
 800dbac:	e05d      	b.n	800dc6a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	691b      	ldr	r3, [r3, #16]
 800dbb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dbb6:	d133      	bne.n	800dc20 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dbbe:	b2db      	uxtb	r3, r3
 800dbc0:	2b21      	cmp	r3, #33	; 0x21
 800dbc2:	d109      	bne.n	800dbd8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	461a      	mov	r2, r3
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800dbd4:	611a      	str	r2, [r3, #16]
 800dbd6:	e008      	b.n	800dbea <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	f043 0301 	orr.w	r3, r3, #1
 800dbe2:	b2da      	uxtb	r2, r3
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d004      	beq.n	800dbfc <I2C_Master_SB+0x92>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d108      	bne.n	800dc0e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d032      	beq.n	800dc6a <I2C_Master_SB+0x100>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d02d      	beq.n	800dc6a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	685a      	ldr	r2, [r3, #4]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc1c:	605a      	str	r2, [r3, #4]
}
 800dc1e:	e024      	b.n	800dc6a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d10e      	bne.n	800dc46 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc2c:	b29b      	uxth	r3, r3
 800dc2e:	11db      	asrs	r3, r3, #7
 800dc30:	b2db      	uxtb	r3, r3
 800dc32:	f003 0306 	and.w	r3, r3, #6
 800dc36:	b2db      	uxtb	r3, r3
 800dc38:	f063 030f 	orn	r3, r3, #15
 800dc3c:	b2da      	uxtb	r2, r3
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	611a      	str	r2, [r3, #16]
}
 800dc44:	e011      	b.n	800dc6a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d10d      	bne.n	800dc6a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	11db      	asrs	r3, r3, #7
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	f003 0306 	and.w	r3, r3, #6
 800dc5c:	b2db      	uxtb	r3, r3
 800dc5e:	f063 030e 	orn	r3, r3, #14
 800dc62:	b2da      	uxtb	r2, r3
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	611a      	str	r2, [r3, #16]
}
 800dc6a:	bf00      	nop
 800dc6c:	370c      	adds	r7, #12
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc74:	4770      	bx	lr

0800dc76 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800dc76:	b480      	push	{r7}
 800dc78:	b083      	sub	sp, #12
 800dc7a:	af00      	add	r7, sp, #0
 800dc7c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc82:	b2da      	uxtb	r2, r3
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d004      	beq.n	800dc9c <I2C_Master_ADD10+0x26>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d108      	bne.n	800dcae <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d00c      	beq.n	800dcbe <I2C_Master_ADD10+0x48>
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d007      	beq.n	800dcbe <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	685a      	ldr	r2, [r3, #4]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dcbc:	605a      	str	r2, [r3, #4]
  }
}
 800dcbe:	bf00      	nop
 800dcc0:	370c      	adds	r7, #12
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc8:	4770      	bx	lr

0800dcca <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800dcca:	b480      	push	{r7}
 800dccc:	b091      	sub	sp, #68	; 0x44
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dcd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dce0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dce6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dcee:	b2db      	uxtb	r3, r3
 800dcf0:	2b22      	cmp	r3, #34	; 0x22
 800dcf2:	f040 8169 	bne.w	800dfc8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d10f      	bne.n	800dd1e <I2C_Master_ADDR+0x54>
 800dcfe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dd02:	2b40      	cmp	r3, #64	; 0x40
 800dd04:	d10b      	bne.n	800dd1e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dd06:	2300      	movs	r3, #0
 800dd08:	633b      	str	r3, [r7, #48]	; 0x30
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	695b      	ldr	r3, [r3, #20]
 800dd10:	633b      	str	r3, [r7, #48]	; 0x30
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	699b      	ldr	r3, [r3, #24]
 800dd18:	633b      	str	r3, [r7, #48]	; 0x30
 800dd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd1c:	e160      	b.n	800dfe0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d11d      	bne.n	800dd62 <I2C_Master_ADDR+0x98>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	691b      	ldr	r3, [r3, #16]
 800dd2a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800dd2e:	d118      	bne.n	800dd62 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dd30:	2300      	movs	r3, #0
 800dd32:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	695b      	ldr	r3, [r3, #20]
 800dd3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	699b      	ldr	r3, [r3, #24]
 800dd42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dd54:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd5a:	1c5a      	adds	r2, r3, #1
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	651a      	str	r2, [r3, #80]	; 0x50
 800dd60:	e13e      	b.n	800dfe0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd66:	b29b      	uxth	r3, r3
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d113      	bne.n	800dd94 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	695b      	ldr	r3, [r3, #20]
 800dd76:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	699b      	ldr	r3, [r3, #24]
 800dd7e:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd80:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd90:	601a      	str	r2, [r3, #0]
 800dd92:	e115      	b.n	800dfc0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd98:	b29b      	uxth	r3, r3
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	f040 808a 	bne.w	800deb4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800dda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800dda6:	d137      	bne.n	800de18 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	681a      	ldr	r2, [r3, #0]
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ddb6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ddc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ddc6:	d113      	bne.n	800ddf0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ddd6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ddd8:	2300      	movs	r3, #0
 800ddda:	627b      	str	r3, [r7, #36]	; 0x24
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	695b      	ldr	r3, [r3, #20]
 800dde2:	627b      	str	r3, [r7, #36]	; 0x24
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	699b      	ldr	r3, [r3, #24]
 800ddea:	627b      	str	r3, [r7, #36]	; 0x24
 800ddec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddee:	e0e7      	b.n	800dfc0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	623b      	str	r3, [r7, #32]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	695b      	ldr	r3, [r3, #20]
 800ddfa:	623b      	str	r3, [r7, #32]
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	699b      	ldr	r3, [r3, #24]
 800de02:	623b      	str	r3, [r7, #32]
 800de04:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	681a      	ldr	r2, [r3, #0]
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de14:	601a      	str	r2, [r3, #0]
 800de16:	e0d3      	b.n	800dfc0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800de18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de1a:	2b08      	cmp	r3, #8
 800de1c:	d02e      	beq.n	800de7c <I2C_Master_ADDR+0x1b2>
 800de1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de20:	2b20      	cmp	r3, #32
 800de22:	d02b      	beq.n	800de7c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800de24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de26:	2b12      	cmp	r3, #18
 800de28:	d102      	bne.n	800de30 <I2C_Master_ADDR+0x166>
 800de2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2c:	2b01      	cmp	r3, #1
 800de2e:	d125      	bne.n	800de7c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800de30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de32:	2b04      	cmp	r3, #4
 800de34:	d00e      	beq.n	800de54 <I2C_Master_ADDR+0x18a>
 800de36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de38:	2b02      	cmp	r3, #2
 800de3a:	d00b      	beq.n	800de54 <I2C_Master_ADDR+0x18a>
 800de3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de3e:	2b10      	cmp	r3, #16
 800de40:	d008      	beq.n	800de54 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	681a      	ldr	r2, [r3, #0]
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de50:	601a      	str	r2, [r3, #0]
 800de52:	e007      	b.n	800de64 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800de62:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800de64:	2300      	movs	r3, #0
 800de66:	61fb      	str	r3, [r7, #28]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	695b      	ldr	r3, [r3, #20]
 800de6e:	61fb      	str	r3, [r7, #28]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	699b      	ldr	r3, [r3, #24]
 800de76:	61fb      	str	r3, [r7, #28]
 800de78:	69fb      	ldr	r3, [r7, #28]
 800de7a:	e0a1      	b.n	800dfc0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	681a      	ldr	r2, [r3, #0]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de8a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800de8c:	2300      	movs	r3, #0
 800de8e:	61bb      	str	r3, [r7, #24]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	695b      	ldr	r3, [r3, #20]
 800de96:	61bb      	str	r3, [r7, #24]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	699b      	ldr	r3, [r3, #24]
 800de9e:	61bb      	str	r3, [r7, #24]
 800dea0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800deb0:	601a      	str	r2, [r3, #0]
 800deb2:	e085      	b.n	800dfc0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800deb8:	b29b      	uxth	r3, r3
 800deba:	2b02      	cmp	r3, #2
 800debc:	d14d      	bne.n	800df5a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800debe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec0:	2b04      	cmp	r3, #4
 800dec2:	d016      	beq.n	800def2 <I2C_Master_ADDR+0x228>
 800dec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec6:	2b02      	cmp	r3, #2
 800dec8:	d013      	beq.n	800def2 <I2C_Master_ADDR+0x228>
 800deca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800decc:	2b10      	cmp	r3, #16
 800dece:	d010      	beq.n	800def2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	681a      	ldr	r2, [r3, #0]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dede:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	681a      	ldr	r2, [r3, #0]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800deee:	601a      	str	r2, [r3, #0]
 800def0:	e007      	b.n	800df02 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800df00:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	685b      	ldr	r3, [r3, #4]
 800df08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df10:	d117      	bne.n	800df42 <I2C_Master_ADDR+0x278>
 800df12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800df18:	d00b      	beq.n	800df32 <I2C_Master_ADDR+0x268>
 800df1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d008      	beq.n	800df32 <I2C_Master_ADDR+0x268>
 800df20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df22:	2b08      	cmp	r3, #8
 800df24:	d005      	beq.n	800df32 <I2C_Master_ADDR+0x268>
 800df26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df28:	2b10      	cmp	r3, #16
 800df2a:	d002      	beq.n	800df32 <I2C_Master_ADDR+0x268>
 800df2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2e:	2b20      	cmp	r3, #32
 800df30:	d107      	bne.n	800df42 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	685a      	ldr	r2, [r3, #4]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800df40:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800df42:	2300      	movs	r3, #0
 800df44:	617b      	str	r3, [r7, #20]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	695b      	ldr	r3, [r3, #20]
 800df4c:	617b      	str	r3, [r7, #20]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	699b      	ldr	r3, [r3, #24]
 800df54:	617b      	str	r3, [r7, #20]
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	e032      	b.n	800dfc0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	681a      	ldr	r2, [r3, #0]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800df68:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df78:	d117      	bne.n	800dfaa <I2C_Master_ADDR+0x2e0>
 800df7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800df80:	d00b      	beq.n	800df9a <I2C_Master_ADDR+0x2d0>
 800df82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df84:	2b01      	cmp	r3, #1
 800df86:	d008      	beq.n	800df9a <I2C_Master_ADDR+0x2d0>
 800df88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8a:	2b08      	cmp	r3, #8
 800df8c:	d005      	beq.n	800df9a <I2C_Master_ADDR+0x2d0>
 800df8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df90:	2b10      	cmp	r3, #16
 800df92:	d002      	beq.n	800df9a <I2C_Master_ADDR+0x2d0>
 800df94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df96:	2b20      	cmp	r3, #32
 800df98:	d107      	bne.n	800dfaa <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	685a      	ldr	r2, [r3, #4]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dfa8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dfaa:	2300      	movs	r3, #0
 800dfac:	613b      	str	r3, [r7, #16]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	695b      	ldr	r3, [r3, #20]
 800dfb4:	613b      	str	r3, [r7, #16]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	699b      	ldr	r3, [r3, #24]
 800dfbc:	613b      	str	r3, [r7, #16]
 800dfbe:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800dfc6:	e00b      	b.n	800dfe0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dfc8:	2300      	movs	r3, #0
 800dfca:	60fb      	str	r3, [r7, #12]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	695b      	ldr	r3, [r3, #20]
 800dfd2:	60fb      	str	r3, [r7, #12]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	699b      	ldr	r3, [r3, #24]
 800dfda:	60fb      	str	r3, [r7, #12]
 800dfdc:	68fb      	ldr	r3, [r7, #12]
}
 800dfde:	e7ff      	b.n	800dfe0 <I2C_Master_ADDR+0x316>
 800dfe0:	bf00      	nop
 800dfe2:	3744      	adds	r7, #68	; 0x44
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfea:	4770      	bx	lr

0800dfec <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b084      	sub	sp, #16
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dffa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e000:	b29b      	uxth	r3, r3
 800e002:	2b00      	cmp	r3, #0
 800e004:	d02b      	beq.n	800e05e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e00a:	781a      	ldrb	r2, [r3, #0]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e016:	1c5a      	adds	r2, r3, #1
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e020:	b29b      	uxth	r3, r3
 800e022:	3b01      	subs	r3, #1
 800e024:	b29a      	uxth	r2, r3
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e02e:	b29b      	uxth	r3, r3
 800e030:	2b00      	cmp	r3, #0
 800e032:	d114      	bne.n	800e05e <I2C_SlaveTransmit_TXE+0x72>
 800e034:	7bfb      	ldrb	r3, [r7, #15]
 800e036:	2b29      	cmp	r3, #41	; 0x29
 800e038:	d111      	bne.n	800e05e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	685a      	ldr	r2, [r3, #4]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e048:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2221      	movs	r2, #33	; 0x21
 800e04e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2228      	movs	r2, #40	; 0x28
 800e054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f7ff f9f1 	bl	800d440 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800e05e:	bf00      	nop
 800e060:	3710      	adds	r7, #16
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}

0800e066 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800e066:	b480      	push	{r7}
 800e068:	b083      	sub	sp, #12
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e072:	b29b      	uxth	r3, r3
 800e074:	2b00      	cmp	r3, #0
 800e076:	d011      	beq.n	800e09c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e07c:	781a      	ldrb	r2, [r3, #0]
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e088:	1c5a      	adds	r2, r3, #1
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e092:	b29b      	uxth	r3, r3
 800e094:	3b01      	subs	r3, #1
 800e096:	b29a      	uxth	r2, r3
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800e09c:	bf00      	nop
 800e09e:	370c      	adds	r7, #12
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a6:	4770      	bx	lr

0800e0a8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b084      	sub	sp, #16
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d02c      	beq.n	800e11c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	691a      	ldr	r2, [r3, #16]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0cc:	b2d2      	uxtb	r2, r2
 800e0ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d4:	1c5a      	adds	r2, r3, #1
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0de:	b29b      	uxth	r3, r3
 800e0e0:	3b01      	subs	r3, #1
 800e0e2:	b29a      	uxth	r2, r3
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d114      	bne.n	800e11c <I2C_SlaveReceive_RXNE+0x74>
 800e0f2:	7bfb      	ldrb	r3, [r7, #15]
 800e0f4:	2b2a      	cmp	r3, #42	; 0x2a
 800e0f6:	d111      	bne.n	800e11c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	685a      	ldr	r2, [r3, #4]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e106:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2222      	movs	r2, #34	; 0x22
 800e10c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2228      	movs	r2, #40	; 0x28
 800e112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f7ff f99c 	bl	800d454 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800e11c:	bf00      	nop
 800e11e:	3710      	adds	r7, #16
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800e124:	b480      	push	{r7}
 800e126:	b083      	sub	sp, #12
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e130:	b29b      	uxth	r3, r3
 800e132:	2b00      	cmp	r3, #0
 800e134:	d012      	beq.n	800e15c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	691a      	ldr	r2, [r3, #16]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e140:	b2d2      	uxtb	r2, r2
 800e142:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e148:	1c5a      	adds	r2, r3, #1
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e152:	b29b      	uxth	r3, r3
 800e154:	3b01      	subs	r3, #1
 800e156:	b29a      	uxth	r2, r3
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800e15c:	bf00      	nop
 800e15e:	370c      	adds	r7, #12
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr

0800e168 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b084      	sub	sp, #16
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800e172:	2300      	movs	r3, #0
 800e174:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e17c:	b2db      	uxtb	r3, r3
 800e17e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e182:	2b28      	cmp	r3, #40	; 0x28
 800e184:	d127      	bne.n	800e1d6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	685a      	ldr	r2, [r3, #4]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e194:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	089b      	lsrs	r3, r3, #2
 800e19a:	f003 0301 	and.w	r3, r3, #1
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d101      	bne.n	800e1a6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	09db      	lsrs	r3, r3, #7
 800e1aa:	f003 0301 	and.w	r3, r3, #1
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d103      	bne.n	800e1ba <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	68db      	ldr	r3, [r3, #12]
 800e1b6:	81bb      	strh	r3, [r7, #12]
 800e1b8:	e002      	b.n	800e1c0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	699b      	ldr	r3, [r3, #24]
 800e1be:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800e1c8:	89ba      	ldrh	r2, [r7, #12]
 800e1ca:	7bfb      	ldrb	r3, [r7, #15]
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f7ff f94a 	bl	800d468 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800e1d4:	e00e      	b.n	800e1f4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	60bb      	str	r3, [r7, #8]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	695b      	ldr	r3, [r3, #20]
 800e1e0:	60bb      	str	r3, [r7, #8]
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	699b      	ldr	r3, [r3, #24]
 800e1e8:	60bb      	str	r3, [r7, #8]
 800e1ea:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800e1f4:	bf00      	nop
 800e1f6:	3710      	adds	r7, #16
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}

0800e1fc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b084      	sub	sp, #16
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e20a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	685a      	ldr	r2, [r3, #4]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e21a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800e21c:	2300      	movs	r3, #0
 800e21e:	60bb      	str	r3, [r7, #8]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	695b      	ldr	r3, [r3, #20]
 800e226:	60bb      	str	r3, [r7, #8]
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	681a      	ldr	r2, [r3, #0]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f042 0201 	orr.w	r2, r2, #1
 800e236:	601a      	str	r2, [r3, #0]
 800e238:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	681a      	ldr	r2, [r3, #0]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e248:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	685b      	ldr	r3, [r3, #4]
 800e250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e258:	d172      	bne.n	800e340 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e25a:	7bfb      	ldrb	r3, [r7, #15]
 800e25c:	2b22      	cmp	r3, #34	; 0x22
 800e25e:	d002      	beq.n	800e266 <I2C_Slave_STOPF+0x6a>
 800e260:	7bfb      	ldrb	r3, [r7, #15]
 800e262:	2b2a      	cmp	r3, #42	; 0x2a
 800e264:	d135      	bne.n	800e2d2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	685b      	ldr	r3, [r3, #4]
 800e26e:	b29a      	uxth	r2, r3
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e278:	b29b      	uxth	r3, r3
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d005      	beq.n	800e28a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e282:	f043 0204 	orr.w	r2, r3, #4
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	685a      	ldr	r2, [r3, #4]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e298:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7fd fc44 	bl	800bb2c <HAL_DMA_GetState>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	2b01      	cmp	r3, #1
 800e2a8:	d049      	beq.n	800e33e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ae:	4a69      	ldr	r2, [pc, #420]	; (800e454 <I2C_Slave_STOPF+0x258>)
 800e2b0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f7fd fa8c 	bl	800b7d4 <HAL_DMA_Abort_IT>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d03d      	beq.n	800e33e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2c8:	687a      	ldr	r2, [r7, #4]
 800e2ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e2cc:	4610      	mov	r0, r2
 800e2ce:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e2d0:	e035      	b.n	800e33e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	b29a      	uxth	r2, r3
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e2e4:	b29b      	uxth	r3, r3
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d005      	beq.n	800e2f6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ee:	f043 0204 	orr.w	r2, r3, #4
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	685a      	ldr	r2, [r3, #4]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e304:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7fd fc0e 	bl	800bb2c <HAL_DMA_GetState>
 800e310:	4603      	mov	r3, r0
 800e312:	2b01      	cmp	r3, #1
 800e314:	d014      	beq.n	800e340 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e31a:	4a4e      	ldr	r2, [pc, #312]	; (800e454 <I2C_Slave_STOPF+0x258>)
 800e31c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e322:	4618      	mov	r0, r3
 800e324:	f7fd fa56 	bl	800b7d4 <HAL_DMA_Abort_IT>
 800e328:	4603      	mov	r3, r0
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d008      	beq.n	800e340 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e334:	687a      	ldr	r2, [r7, #4]
 800e336:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e338:	4610      	mov	r0, r2
 800e33a:	4798      	blx	r3
 800e33c:	e000      	b.n	800e340 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e33e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e344:	b29b      	uxth	r3, r3
 800e346:	2b00      	cmp	r3, #0
 800e348:	d03e      	beq.n	800e3c8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	695b      	ldr	r3, [r3, #20]
 800e350:	f003 0304 	and.w	r3, r3, #4
 800e354:	2b04      	cmp	r3, #4
 800e356:	d112      	bne.n	800e37e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	691a      	ldr	r2, [r3, #16]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e362:	b2d2      	uxtb	r2, r2
 800e364:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e36a:	1c5a      	adds	r2, r3, #1
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e374:	b29b      	uxth	r3, r3
 800e376:	3b01      	subs	r3, #1
 800e378:	b29a      	uxth	r2, r3
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	695b      	ldr	r3, [r3, #20]
 800e384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e388:	2b40      	cmp	r3, #64	; 0x40
 800e38a:	d112      	bne.n	800e3b2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	691a      	ldr	r2, [r3, #16]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e396:	b2d2      	uxtb	r2, r2
 800e398:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e39e:	1c5a      	adds	r2, r3, #1
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e3a8:	b29b      	uxth	r3, r3
 800e3aa:	3b01      	subs	r3, #1
 800e3ac:	b29a      	uxth	r2, r3
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d005      	beq.n	800e3c8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3c0:	f043 0204 	orr.w	r2, r3, #4
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d003      	beq.n	800e3d8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f000 f8b3 	bl	800e53c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800e3d6:	e039      	b.n	800e44c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e3d8:	7bfb      	ldrb	r3, [r7, #15]
 800e3da:	2b2a      	cmp	r3, #42	; 0x2a
 800e3dc:	d109      	bne.n	800e3f2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2228      	movs	r2, #40	; 0x28
 800e3e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f7ff f831 	bl	800d454 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3f8:	b2db      	uxtb	r3, r3
 800e3fa:	2b28      	cmp	r3, #40	; 0x28
 800e3fc:	d111      	bne.n	800e422 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	4a15      	ldr	r2, [pc, #84]	; (800e458 <I2C_Slave_STOPF+0x25c>)
 800e402:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2200      	movs	r2, #0
 800e408:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2220      	movs	r2, #32
 800e40e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2200      	movs	r2, #0
 800e416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f7ff f832 	bl	800d484 <HAL_I2C_ListenCpltCallback>
}
 800e420:	e014      	b.n	800e44c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e426:	2b22      	cmp	r3, #34	; 0x22
 800e428:	d002      	beq.n	800e430 <I2C_Slave_STOPF+0x234>
 800e42a:	7bfb      	ldrb	r3, [r7, #15]
 800e42c:	2b22      	cmp	r3, #34	; 0x22
 800e42e:	d10d      	bne.n	800e44c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2200      	movs	r2, #0
 800e434:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2220      	movs	r2, #32
 800e43a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2200      	movs	r2, #0
 800e442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f7ff f804 	bl	800d454 <HAL_I2C_SlaveRxCpltCallback>
}
 800e44c:	bf00      	nop
 800e44e:	3710      	adds	r7, #16
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	0800ed3d 	.word	0x0800ed3d
 800e458:	ffff0000 	.word	0xffff0000

0800e45c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b084      	sub	sp, #16
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e46a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e470:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	2b08      	cmp	r3, #8
 800e476:	d002      	beq.n	800e47e <I2C_Slave_AF+0x22>
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	2b20      	cmp	r3, #32
 800e47c:	d129      	bne.n	800e4d2 <I2C_Slave_AF+0x76>
 800e47e:	7bfb      	ldrb	r3, [r7, #15]
 800e480:	2b28      	cmp	r3, #40	; 0x28
 800e482:	d126      	bne.n	800e4d2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	4a2c      	ldr	r2, [pc, #176]	; (800e538 <I2C_Slave_AF+0xdc>)
 800e488:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	685a      	ldr	r2, [r3, #4]
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e498:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e4a2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	681a      	ldr	r2, [r3, #0]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e4b2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2220      	movs	r2, #32
 800e4be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f7fe ffda 	bl	800d484 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800e4d0:	e02e      	b.n	800e530 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800e4d2:	7bfb      	ldrb	r3, [r7, #15]
 800e4d4:	2b21      	cmp	r3, #33	; 0x21
 800e4d6:	d126      	bne.n	800e526 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	4a17      	ldr	r2, [pc, #92]	; (800e538 <I2C_Slave_AF+0xdc>)
 800e4dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2221      	movs	r2, #33	; 0x21
 800e4e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2220      	movs	r2, #32
 800e4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	685a      	ldr	r2, [r3, #4]
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e502:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e50c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	681a      	ldr	r2, [r3, #0]
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e51c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f7fe ff8e 	bl	800d440 <HAL_I2C_SlaveTxCpltCallback>
}
 800e524:	e004      	b.n	800e530 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e52e:	615a      	str	r2, [r3, #20]
}
 800e530:	bf00      	nop
 800e532:	3710      	adds	r7, #16
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}
 800e538:	ffff0000 	.word	0xffff0000

0800e53c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b084      	sub	sp, #16
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e54a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e552:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800e554:	7bbb      	ldrb	r3, [r7, #14]
 800e556:	2b10      	cmp	r3, #16
 800e558:	d002      	beq.n	800e560 <I2C_ITError+0x24>
 800e55a:	7bbb      	ldrb	r3, [r7, #14]
 800e55c:	2b40      	cmp	r3, #64	; 0x40
 800e55e:	d10a      	bne.n	800e576 <I2C_ITError+0x3a>
 800e560:	7bfb      	ldrb	r3, [r7, #15]
 800e562:	2b22      	cmp	r3, #34	; 0x22
 800e564:	d107      	bne.n	800e576 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	681a      	ldr	r2, [r3, #0]
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e574:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e576:	7bfb      	ldrb	r3, [r7, #15]
 800e578:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e57c:	2b28      	cmp	r3, #40	; 0x28
 800e57e:	d107      	bne.n	800e590 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2200      	movs	r2, #0
 800e584:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2228      	movs	r2, #40	; 0x28
 800e58a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e58e:	e015      	b.n	800e5bc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	685b      	ldr	r3, [r3, #4]
 800e596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e59a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e59e:	d00a      	beq.n	800e5b6 <I2C_ITError+0x7a>
 800e5a0:	7bfb      	ldrb	r3, [r7, #15]
 800e5a2:	2b60      	cmp	r3, #96	; 0x60
 800e5a4:	d007      	beq.n	800e5b6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2220      	movs	r2, #32
 800e5aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e5c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e5ca:	d162      	bne.n	800e692 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	685a      	ldr	r2, [r3, #4]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e5da:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e5e4:	b2db      	uxtb	r3, r3
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d020      	beq.n	800e62c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ee:	4a6a      	ldr	r2, [pc, #424]	; (800e798 <I2C_ITError+0x25c>)
 800e5f0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7fd f8ec 	bl	800b7d4 <HAL_DMA_Abort_IT>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	f000 8089 	beq.w	800e716 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	681a      	ldr	r2, [r3, #0]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f022 0201 	bic.w	r2, r2, #1
 800e612:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2220      	movs	r2, #32
 800e618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e622:	687a      	ldr	r2, [r7, #4]
 800e624:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e626:	4610      	mov	r0, r2
 800e628:	4798      	blx	r3
 800e62a:	e074      	b.n	800e716 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e630:	4a59      	ldr	r2, [pc, #356]	; (800e798 <I2C_ITError+0x25c>)
 800e632:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e638:	4618      	mov	r0, r3
 800e63a:	f7fd f8cb 	bl	800b7d4 <HAL_DMA_Abort_IT>
 800e63e:	4603      	mov	r3, r0
 800e640:	2b00      	cmp	r3, #0
 800e642:	d068      	beq.n	800e716 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	695b      	ldr	r3, [r3, #20]
 800e64a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e64e:	2b40      	cmp	r3, #64	; 0x40
 800e650:	d10b      	bne.n	800e66a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	691a      	ldr	r2, [r3, #16]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e65c:	b2d2      	uxtb	r2, r2
 800e65e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e664:	1c5a      	adds	r2, r3, #1
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	f022 0201 	bic.w	r2, r2, #1
 800e678:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2220      	movs	r2, #32
 800e67e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e688:	687a      	ldr	r2, [r7, #4]
 800e68a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e68c:	4610      	mov	r0, r2
 800e68e:	4798      	blx	r3
 800e690:	e041      	b.n	800e716 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e698:	b2db      	uxtb	r3, r3
 800e69a:	2b60      	cmp	r3, #96	; 0x60
 800e69c:	d125      	bne.n	800e6ea <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2220      	movs	r2, #32
 800e6a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	695b      	ldr	r3, [r3, #20]
 800e6b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6b6:	2b40      	cmp	r3, #64	; 0x40
 800e6b8:	d10b      	bne.n	800e6d2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	691a      	ldr	r2, [r3, #16]
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6c4:	b2d2      	uxtb	r2, r2
 800e6c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6cc:	1c5a      	adds	r2, r3, #1
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	681a      	ldr	r2, [r3, #0]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f022 0201 	bic.w	r2, r2, #1
 800e6e0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f7fe fef6 	bl	800d4d4 <HAL_I2C_AbortCpltCallback>
 800e6e8:	e015      	b.n	800e716 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	695b      	ldr	r3, [r3, #20]
 800e6f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6f4:	2b40      	cmp	r3, #64	; 0x40
 800e6f6:	d10b      	bne.n	800e710 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	691a      	ldr	r2, [r3, #16]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e702:	b2d2      	uxtb	r2, r2
 800e704:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e70a:	1c5a      	adds	r2, r3, #1
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f7fe fed5 	bl	800d4c0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e71a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	f003 0301 	and.w	r3, r3, #1
 800e722:	2b00      	cmp	r3, #0
 800e724:	d10e      	bne.n	800e744 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d109      	bne.n	800e744 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800e736:	2b00      	cmp	r3, #0
 800e738:	d104      	bne.n	800e744 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800e740:	2b00      	cmp	r3, #0
 800e742:	d007      	beq.n	800e754 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	685a      	ldr	r2, [r3, #4]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e752:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e75a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e760:	f003 0304 	and.w	r3, r3, #4
 800e764:	2b04      	cmp	r3, #4
 800e766:	d113      	bne.n	800e790 <I2C_ITError+0x254>
 800e768:	7bfb      	ldrb	r3, [r7, #15]
 800e76a:	2b28      	cmp	r3, #40	; 0x28
 800e76c:	d110      	bne.n	800e790 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	4a0a      	ldr	r2, [pc, #40]	; (800e79c <I2C_ITError+0x260>)
 800e772:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2200      	movs	r2, #0
 800e778:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2220      	movs	r2, #32
 800e77e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2200      	movs	r2, #0
 800e786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f7fe fe7a 	bl	800d484 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e790:	bf00      	nop
 800e792:	3710      	adds	r7, #16
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}
 800e798:	0800ed3d 	.word	0x0800ed3d
 800e79c:	ffff0000 	.word	0xffff0000

0800e7a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b088      	sub	sp, #32
 800e7a4:	af02      	add	r7, sp, #8
 800e7a6:	60f8      	str	r0, [r7, #12]
 800e7a8:	607a      	str	r2, [r7, #4]
 800e7aa:	603b      	str	r3, [r7, #0]
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	2b08      	cmp	r3, #8
 800e7ba:	d006      	beq.n	800e7ca <I2C_MasterRequestWrite+0x2a>
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	2b01      	cmp	r3, #1
 800e7c0:	d003      	beq.n	800e7ca <I2C_MasterRequestWrite+0x2a>
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e7c8:	d108      	bne.n	800e7dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	681a      	ldr	r2, [r3, #0]
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e7d8:	601a      	str	r2, [r3, #0]
 800e7da:	e00b      	b.n	800e7f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7e0:	2b12      	cmp	r3, #18
 800e7e2:	d107      	bne.n	800e7f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	681a      	ldr	r2, [r3, #0]
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e7f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	9300      	str	r3, [sp, #0]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e800:	68f8      	ldr	r0, [r7, #12]
 800e802:	f000 fb43 	bl	800ee8c <I2C_WaitOnFlagUntilTimeout>
 800e806:	4603      	mov	r3, r0
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d00d      	beq.n	800e828 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e81a:	d103      	bne.n	800e824 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e822:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e824:	2303      	movs	r3, #3
 800e826:	e035      	b.n	800e894 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	691b      	ldr	r3, [r3, #16]
 800e82c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e830:	d108      	bne.n	800e844 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e832:	897b      	ldrh	r3, [r7, #10]
 800e834:	b2db      	uxtb	r3, r3
 800e836:	461a      	mov	r2, r3
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e840:	611a      	str	r2, [r3, #16]
 800e842:	e01b      	b.n	800e87c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e844:	897b      	ldrh	r3, [r7, #10]
 800e846:	11db      	asrs	r3, r3, #7
 800e848:	b2db      	uxtb	r3, r3
 800e84a:	f003 0306 	and.w	r3, r3, #6
 800e84e:	b2db      	uxtb	r3, r3
 800e850:	f063 030f 	orn	r3, r3, #15
 800e854:	b2da      	uxtb	r2, r3
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	687a      	ldr	r2, [r7, #4]
 800e860:	490e      	ldr	r1, [pc, #56]	; (800e89c <I2C_MasterRequestWrite+0xfc>)
 800e862:	68f8      	ldr	r0, [r7, #12]
 800e864:	f000 fb69 	bl	800ef3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e868:	4603      	mov	r3, r0
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d001      	beq.n	800e872 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800e86e:	2301      	movs	r3, #1
 800e870:	e010      	b.n	800e894 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e872:	897b      	ldrh	r3, [r7, #10]
 800e874:	b2da      	uxtb	r2, r3
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	687a      	ldr	r2, [r7, #4]
 800e880:	4907      	ldr	r1, [pc, #28]	; (800e8a0 <I2C_MasterRequestWrite+0x100>)
 800e882:	68f8      	ldr	r0, [r7, #12]
 800e884:	f000 fb59 	bl	800ef3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e888:	4603      	mov	r3, r0
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d001      	beq.n	800e892 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800e88e:	2301      	movs	r3, #1
 800e890:	e000      	b.n	800e894 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800e892:	2300      	movs	r3, #0
}
 800e894:	4618      	mov	r0, r3
 800e896:	3718      	adds	r7, #24
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}
 800e89c:	00010008 	.word	0x00010008
 800e8a0:	00010002 	.word	0x00010002

0800e8a4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b088      	sub	sp, #32
 800e8a8:	af02      	add	r7, sp, #8
 800e8aa:	60f8      	str	r0, [r7, #12]
 800e8ac:	607a      	str	r2, [r7, #4]
 800e8ae:	603b      	str	r3, [r7, #0]
 800e8b0:	460b      	mov	r3, r1
 800e8b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8b8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	681a      	ldr	r2, [r3, #0]
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e8c8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	2b08      	cmp	r3, #8
 800e8ce:	d006      	beq.n	800e8de <I2C_MasterRequestRead+0x3a>
 800e8d0:	697b      	ldr	r3, [r7, #20]
 800e8d2:	2b01      	cmp	r3, #1
 800e8d4:	d003      	beq.n	800e8de <I2C_MasterRequestRead+0x3a>
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e8dc:	d108      	bne.n	800e8f0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	681a      	ldr	r2, [r3, #0]
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e8ec:	601a      	str	r2, [r3, #0]
 800e8ee:	e00b      	b.n	800e908 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8f4:	2b11      	cmp	r3, #17
 800e8f6:	d107      	bne.n	800e908 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	681a      	ldr	r2, [r3, #0]
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e906:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	9300      	str	r3, [sp, #0]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2200      	movs	r2, #0
 800e910:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e914:	68f8      	ldr	r0, [r7, #12]
 800e916:	f000 fab9 	bl	800ee8c <I2C_WaitOnFlagUntilTimeout>
 800e91a:	4603      	mov	r3, r0
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d00d      	beq.n	800e93c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e92a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e92e:	d103      	bne.n	800e938 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e936:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e938:	2303      	movs	r3, #3
 800e93a:	e079      	b.n	800ea30 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	691b      	ldr	r3, [r3, #16]
 800e940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e944:	d108      	bne.n	800e958 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e946:	897b      	ldrh	r3, [r7, #10]
 800e948:	b2db      	uxtb	r3, r3
 800e94a:	f043 0301 	orr.w	r3, r3, #1
 800e94e:	b2da      	uxtb	r2, r3
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	611a      	str	r2, [r3, #16]
 800e956:	e05f      	b.n	800ea18 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e958:	897b      	ldrh	r3, [r7, #10]
 800e95a:	11db      	asrs	r3, r3, #7
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	f003 0306 	and.w	r3, r3, #6
 800e962:	b2db      	uxtb	r3, r3
 800e964:	f063 030f 	orn	r3, r3, #15
 800e968:	b2da      	uxtb	r2, r3
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	687a      	ldr	r2, [r7, #4]
 800e974:	4930      	ldr	r1, [pc, #192]	; (800ea38 <I2C_MasterRequestRead+0x194>)
 800e976:	68f8      	ldr	r0, [r7, #12]
 800e978:	f000 fadf 	bl	800ef3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e97c:	4603      	mov	r3, r0
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d001      	beq.n	800e986 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800e982:	2301      	movs	r3, #1
 800e984:	e054      	b.n	800ea30 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e986:	897b      	ldrh	r3, [r7, #10]
 800e988:	b2da      	uxtb	r2, r3
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	4929      	ldr	r1, [pc, #164]	; (800ea3c <I2C_MasterRequestRead+0x198>)
 800e996:	68f8      	ldr	r0, [r7, #12]
 800e998:	f000 facf 	bl	800ef3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e99c:	4603      	mov	r3, r0
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d001      	beq.n	800e9a6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	e044      	b.n	800ea30 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	613b      	str	r3, [r7, #16]
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	695b      	ldr	r3, [r3, #20]
 800e9b0:	613b      	str	r3, [r7, #16]
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	699b      	ldr	r3, [r3, #24]
 800e9b8:	613b      	str	r3, [r7, #16]
 800e9ba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e9ca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	9300      	str	r3, [sp, #0]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e9d8:	68f8      	ldr	r0, [r7, #12]
 800e9da:	f000 fa57 	bl	800ee8c <I2C_WaitOnFlagUntilTimeout>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d00d      	beq.n	800ea00 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9f2:	d103      	bne.n	800e9fc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e9fa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800e9fc:	2303      	movs	r3, #3
 800e9fe:	e017      	b.n	800ea30 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800ea00:	897b      	ldrh	r3, [r7, #10]
 800ea02:	11db      	asrs	r3, r3, #7
 800ea04:	b2db      	uxtb	r3, r3
 800ea06:	f003 0306 	and.w	r3, r3, #6
 800ea0a:	b2db      	uxtb	r3, r3
 800ea0c:	f063 030e 	orn	r3, r3, #14
 800ea10:	b2da      	uxtb	r2, r3
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	687a      	ldr	r2, [r7, #4]
 800ea1c:	4907      	ldr	r1, [pc, #28]	; (800ea3c <I2C_MasterRequestRead+0x198>)
 800ea1e:	68f8      	ldr	r0, [r7, #12]
 800ea20:	f000 fa8b 	bl	800ef3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ea24:	4603      	mov	r3, r0
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d001      	beq.n	800ea2e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	e000      	b.n	800ea30 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800ea2e:	2300      	movs	r3, #0
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	3718      	adds	r7, #24
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}
 800ea38:	00010008 	.word	0x00010008
 800ea3c:	00010002 	.word	0x00010002

0800ea40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b088      	sub	sp, #32
 800ea44:	af02      	add	r7, sp, #8
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	4608      	mov	r0, r1
 800ea4a:	4611      	mov	r1, r2
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	4603      	mov	r3, r0
 800ea50:	817b      	strh	r3, [r7, #10]
 800ea52:	460b      	mov	r3, r1
 800ea54:	813b      	strh	r3, [r7, #8]
 800ea56:	4613      	mov	r3, r2
 800ea58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	681a      	ldr	r2, [r3, #0]
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ea68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ea6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea6c:	9300      	str	r3, [sp, #0]
 800ea6e:	6a3b      	ldr	r3, [r7, #32]
 800ea70:	2200      	movs	r2, #0
 800ea72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ea76:	68f8      	ldr	r0, [r7, #12]
 800ea78:	f000 fa08 	bl	800ee8c <I2C_WaitOnFlagUntilTimeout>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d00d      	beq.n	800ea9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea90:	d103      	bne.n	800ea9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ea9a:	2303      	movs	r3, #3
 800ea9c:	e05f      	b.n	800eb5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ea9e:	897b      	ldrh	r3, [r7, #10]
 800eaa0:	b2db      	uxtb	r3, r3
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800eaac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800eaae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab0:	6a3a      	ldr	r2, [r7, #32]
 800eab2:	492d      	ldr	r1, [pc, #180]	; (800eb68 <I2C_RequestMemoryWrite+0x128>)
 800eab4:	68f8      	ldr	r0, [r7, #12]
 800eab6:	f000 fa40 	bl	800ef3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800eaba:	4603      	mov	r3, r0
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d001      	beq.n	800eac4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800eac0:	2301      	movs	r3, #1
 800eac2:	e04c      	b.n	800eb5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800eac4:	2300      	movs	r3, #0
 800eac6:	617b      	str	r3, [r7, #20]
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	695b      	ldr	r3, [r3, #20]
 800eace:	617b      	str	r3, [r7, #20]
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	699b      	ldr	r3, [r3, #24]
 800ead6:	617b      	str	r3, [r7, #20]
 800ead8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800eada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eadc:	6a39      	ldr	r1, [r7, #32]
 800eade:	68f8      	ldr	r0, [r7, #12]
 800eae0:	f000 faaa 	bl	800f038 <I2C_WaitOnTXEFlagUntilTimeout>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d00d      	beq.n	800eb06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaee:	2b04      	cmp	r3, #4
 800eaf0:	d107      	bne.n	800eb02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	681a      	ldr	r2, [r3, #0]
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eb00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800eb02:	2301      	movs	r3, #1
 800eb04:	e02b      	b.n	800eb5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800eb06:	88fb      	ldrh	r3, [r7, #6]
 800eb08:	2b01      	cmp	r3, #1
 800eb0a:	d105      	bne.n	800eb18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800eb0c:	893b      	ldrh	r3, [r7, #8]
 800eb0e:	b2da      	uxtb	r2, r3
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	611a      	str	r2, [r3, #16]
 800eb16:	e021      	b.n	800eb5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800eb18:	893b      	ldrh	r3, [r7, #8]
 800eb1a:	0a1b      	lsrs	r3, r3, #8
 800eb1c:	b29b      	uxth	r3, r3
 800eb1e:	b2da      	uxtb	r2, r3
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800eb26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb28:	6a39      	ldr	r1, [r7, #32]
 800eb2a:	68f8      	ldr	r0, [r7, #12]
 800eb2c:	f000 fa84 	bl	800f038 <I2C_WaitOnTXEFlagUntilTimeout>
 800eb30:	4603      	mov	r3, r0
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d00d      	beq.n	800eb52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb3a:	2b04      	cmp	r3, #4
 800eb3c:	d107      	bne.n	800eb4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	681a      	ldr	r2, [r3, #0]
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eb4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800eb4e:	2301      	movs	r3, #1
 800eb50:	e005      	b.n	800eb5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800eb52:	893b      	ldrh	r3, [r7, #8]
 800eb54:	b2da      	uxtb	r2, r3
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800eb5c:	2300      	movs	r3, #0
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3718      	adds	r7, #24
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
 800eb66:	bf00      	nop
 800eb68:	00010002 	.word	0x00010002

0800eb6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b088      	sub	sp, #32
 800eb70:	af02      	add	r7, sp, #8
 800eb72:	60f8      	str	r0, [r7, #12]
 800eb74:	4608      	mov	r0, r1
 800eb76:	4611      	mov	r1, r2
 800eb78:	461a      	mov	r2, r3
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	817b      	strh	r3, [r7, #10]
 800eb7e:	460b      	mov	r3, r1
 800eb80:	813b      	strh	r3, [r7, #8]
 800eb82:	4613      	mov	r3, r2
 800eb84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	681a      	ldr	r2, [r3, #0]
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eb94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	681a      	ldr	r2, [r3, #0]
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eba4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800eba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba8:	9300      	str	r3, [sp, #0]
 800ebaa:	6a3b      	ldr	r3, [r7, #32]
 800ebac:	2200      	movs	r2, #0
 800ebae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ebb2:	68f8      	ldr	r0, [r7, #12]
 800ebb4:	f000 f96a 	bl	800ee8c <I2C_WaitOnFlagUntilTimeout>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d00d      	beq.n	800ebda <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ebcc:	d103      	bne.n	800ebd6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ebd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ebd6:	2303      	movs	r3, #3
 800ebd8:	e0aa      	b.n	800ed30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ebda:	897b      	ldrh	r3, [r7, #10]
 800ebdc:	b2db      	uxtb	r3, r3
 800ebde:	461a      	mov	r2, r3
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ebe8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ebea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebec:	6a3a      	ldr	r2, [r7, #32]
 800ebee:	4952      	ldr	r1, [pc, #328]	; (800ed38 <I2C_RequestMemoryRead+0x1cc>)
 800ebf0:	68f8      	ldr	r0, [r7, #12]
 800ebf2:	f000 f9a2 	bl	800ef3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d001      	beq.n	800ec00 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	e097      	b.n	800ed30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ec00:	2300      	movs	r3, #0
 800ec02:	617b      	str	r3, [r7, #20]
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	695b      	ldr	r3, [r3, #20]
 800ec0a:	617b      	str	r3, [r7, #20]
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	699b      	ldr	r3, [r3, #24]
 800ec12:	617b      	str	r3, [r7, #20]
 800ec14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ec16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec18:	6a39      	ldr	r1, [r7, #32]
 800ec1a:	68f8      	ldr	r0, [r7, #12]
 800ec1c:	f000 fa0c 	bl	800f038 <I2C_WaitOnTXEFlagUntilTimeout>
 800ec20:	4603      	mov	r3, r0
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d00d      	beq.n	800ec42 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec2a:	2b04      	cmp	r3, #4
 800ec2c:	d107      	bne.n	800ec3e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	681a      	ldr	r2, [r3, #0]
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ec3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ec3e:	2301      	movs	r3, #1
 800ec40:	e076      	b.n	800ed30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ec42:	88fb      	ldrh	r3, [r7, #6]
 800ec44:	2b01      	cmp	r3, #1
 800ec46:	d105      	bne.n	800ec54 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ec48:	893b      	ldrh	r3, [r7, #8]
 800ec4a:	b2da      	uxtb	r2, r3
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	611a      	str	r2, [r3, #16]
 800ec52:	e021      	b.n	800ec98 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ec54:	893b      	ldrh	r3, [r7, #8]
 800ec56:	0a1b      	lsrs	r3, r3, #8
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	b2da      	uxtb	r2, r3
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ec62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec64:	6a39      	ldr	r1, [r7, #32]
 800ec66:	68f8      	ldr	r0, [r7, #12]
 800ec68:	f000 f9e6 	bl	800f038 <I2C_WaitOnTXEFlagUntilTimeout>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d00d      	beq.n	800ec8e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec76:	2b04      	cmp	r3, #4
 800ec78:	d107      	bne.n	800ec8a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ec88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	e050      	b.n	800ed30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ec8e:	893b      	ldrh	r3, [r7, #8]
 800ec90:	b2da      	uxtb	r2, r3
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ec98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec9a:	6a39      	ldr	r1, [r7, #32]
 800ec9c:	68f8      	ldr	r0, [r7, #12]
 800ec9e:	f000 f9cb 	bl	800f038 <I2C_WaitOnTXEFlagUntilTimeout>
 800eca2:	4603      	mov	r3, r0
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d00d      	beq.n	800ecc4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecac:	2b04      	cmp	r3, #4
 800ecae:	d107      	bne.n	800ecc0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	681a      	ldr	r2, [r3, #0]
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ecbe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	e035      	b.n	800ed30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ecd2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ecd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd6:	9300      	str	r3, [sp, #0]
 800ecd8:	6a3b      	ldr	r3, [r7, #32]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ece0:	68f8      	ldr	r0, [r7, #12]
 800ece2:	f000 f8d3 	bl	800ee8c <I2C_WaitOnFlagUntilTimeout>
 800ece6:	4603      	mov	r3, r0
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d00d      	beq.n	800ed08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ecf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecfa:	d103      	bne.n	800ed04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ed04:	2303      	movs	r3, #3
 800ed06:	e013      	b.n	800ed30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ed08:	897b      	ldrh	r3, [r7, #10]
 800ed0a:	b2db      	uxtb	r3, r3
 800ed0c:	f043 0301 	orr.w	r3, r3, #1
 800ed10:	b2da      	uxtb	r2, r3
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ed18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1a:	6a3a      	ldr	r2, [r7, #32]
 800ed1c:	4906      	ldr	r1, [pc, #24]	; (800ed38 <I2C_RequestMemoryRead+0x1cc>)
 800ed1e:	68f8      	ldr	r0, [r7, #12]
 800ed20:	f000 f90b 	bl	800ef3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ed24:	4603      	mov	r3, r0
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d001      	beq.n	800ed2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	e000      	b.n	800ed30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800ed2e:	2300      	movs	r3, #0
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3718      	adds	r7, #24
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}
 800ed38:	00010002 	.word	0x00010002

0800ed3c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b086      	sub	sp, #24
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ed44:	2300      	movs	r3, #0
 800ed46:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed4c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed54:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800ed56:	4b4b      	ldr	r3, [pc, #300]	; (800ee84 <I2C_DMAAbort+0x148>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	08db      	lsrs	r3, r3, #3
 800ed5c:	4a4a      	ldr	r2, [pc, #296]	; (800ee88 <I2C_DMAAbort+0x14c>)
 800ed5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ed62:	0a1a      	lsrs	r2, r3, #8
 800ed64:	4613      	mov	r3, r2
 800ed66:	009b      	lsls	r3, r3, #2
 800ed68:	4413      	add	r3, r2
 800ed6a:	00da      	lsls	r2, r3, #3
 800ed6c:	1ad3      	subs	r3, r2, r3
 800ed6e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d106      	bne.n	800ed84 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed7a:	f043 0220 	orr.w	r2, r3, #32
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800ed82:	e00a      	b.n	800ed9a <I2C_DMAAbort+0x5e>
    }
    count--;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	3b01      	subs	r3, #1
 800ed88:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ed94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed98:	d0ea      	beq.n	800ed70 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d003      	beq.n	800edaa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eda6:	2200      	movs	r2, #0
 800eda8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d003      	beq.n	800edba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edb6:	2200      	movs	r2, #0
 800edb8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	681a      	ldr	r2, [r3, #0]
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800edc8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	2200      	movs	r2, #0
 800edce:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d003      	beq.n	800ede0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eddc:	2200      	movs	r2, #0
 800edde:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800ede0:	697b      	ldr	r3, [r7, #20]
 800ede2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d003      	beq.n	800edf0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edec:	2200      	movs	r2, #0
 800edee:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	681a      	ldr	r2, [r3, #0]
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	f022 0201 	bic.w	r2, r2, #1
 800edfe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee06:	b2db      	uxtb	r3, r3
 800ee08:	2b60      	cmp	r3, #96	; 0x60
 800ee0a:	d10e      	bne.n	800ee2a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800ee0c:	697b      	ldr	r3, [r7, #20]
 800ee0e:	2220      	movs	r2, #32
 800ee10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	2200      	movs	r2, #0
 800ee18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ee22:	6978      	ldr	r0, [r7, #20]
 800ee24:	f7fe fb56 	bl	800d4d4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ee28:	e027      	b.n	800ee7a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ee2a:	7cfb      	ldrb	r3, [r7, #19]
 800ee2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ee30:	2b28      	cmp	r3, #40	; 0x28
 800ee32:	d117      	bne.n	800ee64 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	f042 0201 	orr.w	r2, r2, #1
 800ee42:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	681a      	ldr	r2, [r3, #0]
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ee52:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	2200      	movs	r2, #0
 800ee58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	2228      	movs	r2, #40	; 0x28
 800ee5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ee62:	e007      	b.n	800ee74 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	2220      	movs	r2, #32
 800ee68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800ee74:	6978      	ldr	r0, [r7, #20]
 800ee76:	f7fe fb23 	bl	800d4c0 <HAL_I2C_ErrorCallback>
}
 800ee7a:	bf00      	nop
 800ee7c:	3718      	adds	r7, #24
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
 800ee82:	bf00      	nop
 800ee84:	20000038 	.word	0x20000038
 800ee88:	14f8b589 	.word	0x14f8b589

0800ee8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b084      	sub	sp, #16
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	60f8      	str	r0, [r7, #12]
 800ee94:	60b9      	str	r1, [r7, #8]
 800ee96:	603b      	str	r3, [r7, #0]
 800ee98:	4613      	mov	r3, r2
 800ee9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ee9c:	e025      	b.n	800eeea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eea4:	d021      	beq.n	800eeea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eea6:	f7fc f94f 	bl	800b148 <HAL_GetTick>
 800eeaa:	4602      	mov	r2, r0
 800eeac:	69bb      	ldr	r3, [r7, #24]
 800eeae:	1ad3      	subs	r3, r2, r3
 800eeb0:	683a      	ldr	r2, [r7, #0]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d302      	bcc.n	800eebc <I2C_WaitOnFlagUntilTimeout+0x30>
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d116      	bne.n	800eeea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	2200      	movs	r2, #0
 800eec0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	2220      	movs	r2, #32
 800eec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	2200      	movs	r2, #0
 800eece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eed6:	f043 0220 	orr.w	r2, r3, #32
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	2200      	movs	r2, #0
 800eee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800eee6:	2301      	movs	r3, #1
 800eee8:	e023      	b.n	800ef32 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	0c1b      	lsrs	r3, r3, #16
 800eeee:	b2db      	uxtb	r3, r3
 800eef0:	2b01      	cmp	r3, #1
 800eef2:	d10d      	bne.n	800ef10 <I2C_WaitOnFlagUntilTimeout+0x84>
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	695b      	ldr	r3, [r3, #20]
 800eefa:	43da      	mvns	r2, r3
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	4013      	ands	r3, r2
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	bf0c      	ite	eq
 800ef06:	2301      	moveq	r3, #1
 800ef08:	2300      	movne	r3, #0
 800ef0a:	b2db      	uxtb	r3, r3
 800ef0c:	461a      	mov	r2, r3
 800ef0e:	e00c      	b.n	800ef2a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	699b      	ldr	r3, [r3, #24]
 800ef16:	43da      	mvns	r2, r3
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	4013      	ands	r3, r2
 800ef1c:	b29b      	uxth	r3, r3
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	bf0c      	ite	eq
 800ef22:	2301      	moveq	r3, #1
 800ef24:	2300      	movne	r3, #0
 800ef26:	b2db      	uxtb	r3, r3
 800ef28:	461a      	mov	r2, r3
 800ef2a:	79fb      	ldrb	r3, [r7, #7]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d0b6      	beq.n	800ee9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ef30:	2300      	movs	r3, #0
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	3710      	adds	r7, #16
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}

0800ef3a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ef3a:	b580      	push	{r7, lr}
 800ef3c:	b084      	sub	sp, #16
 800ef3e:	af00      	add	r7, sp, #0
 800ef40:	60f8      	str	r0, [r7, #12]
 800ef42:	60b9      	str	r1, [r7, #8]
 800ef44:	607a      	str	r2, [r7, #4]
 800ef46:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ef48:	e051      	b.n	800efee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	695b      	ldr	r3, [r3, #20]
 800ef50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ef54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef58:	d123      	bne.n	800efa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	681a      	ldr	r2, [r3, #0]
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ef68:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ef72:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2200      	movs	r2, #0
 800ef78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2220      	movs	r2, #32
 800ef7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	2200      	movs	r2, #0
 800ef86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef8e:	f043 0204 	orr.w	r2, r3, #4
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2200      	movs	r2, #0
 800ef9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ef9e:	2301      	movs	r3, #1
 800efa0:	e046      	b.n	800f030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efa8:	d021      	beq.n	800efee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800efaa:	f7fc f8cd 	bl	800b148 <HAL_GetTick>
 800efae:	4602      	mov	r2, r0
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	1ad3      	subs	r3, r2, r3
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d302      	bcc.n	800efc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d116      	bne.n	800efee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2200      	movs	r2, #0
 800efc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	2220      	movs	r2, #32
 800efca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	2200      	movs	r2, #0
 800efd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efda:	f043 0220 	orr.w	r2, r3, #32
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	2200      	movs	r2, #0
 800efe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800efea:	2301      	movs	r3, #1
 800efec:	e020      	b.n	800f030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	0c1b      	lsrs	r3, r3, #16
 800eff2:	b2db      	uxtb	r3, r3
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	d10c      	bne.n	800f012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	695b      	ldr	r3, [r3, #20]
 800effe:	43da      	mvns	r2, r3
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	4013      	ands	r3, r2
 800f004:	b29b      	uxth	r3, r3
 800f006:	2b00      	cmp	r3, #0
 800f008:	bf14      	ite	ne
 800f00a:	2301      	movne	r3, #1
 800f00c:	2300      	moveq	r3, #0
 800f00e:	b2db      	uxtb	r3, r3
 800f010:	e00b      	b.n	800f02a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	699b      	ldr	r3, [r3, #24]
 800f018:	43da      	mvns	r2, r3
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	4013      	ands	r3, r2
 800f01e:	b29b      	uxth	r3, r3
 800f020:	2b00      	cmp	r3, #0
 800f022:	bf14      	ite	ne
 800f024:	2301      	movne	r3, #1
 800f026:	2300      	moveq	r3, #0
 800f028:	b2db      	uxtb	r3, r3
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d18d      	bne.n	800ef4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800f02e:	2300      	movs	r3, #0
}
 800f030:	4618      	mov	r0, r3
 800f032:	3710      	adds	r7, #16
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}

0800f038 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b084      	sub	sp, #16
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	60f8      	str	r0, [r7, #12]
 800f040:	60b9      	str	r1, [r7, #8]
 800f042:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f044:	e02d      	b.n	800f0a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f046:	68f8      	ldr	r0, [r7, #12]
 800f048:	f000 f900 	bl	800f24c <I2C_IsAcknowledgeFailed>
 800f04c:	4603      	mov	r3, r0
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d001      	beq.n	800f056 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f052:	2301      	movs	r3, #1
 800f054:	e02d      	b.n	800f0b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f056:	68bb      	ldr	r3, [r7, #8]
 800f058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f05c:	d021      	beq.n	800f0a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f05e:	f7fc f873 	bl	800b148 <HAL_GetTick>
 800f062:	4602      	mov	r2, r0
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	1ad3      	subs	r3, r2, r3
 800f068:	68ba      	ldr	r2, [r7, #8]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d302      	bcc.n	800f074 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d116      	bne.n	800f0a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2200      	movs	r2, #0
 800f078:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	2220      	movs	r2, #32
 800f07e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	2200      	movs	r2, #0
 800f086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f08e:	f043 0220 	orr.w	r2, r3, #32
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2200      	movs	r2, #0
 800f09a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f09e:	2301      	movs	r3, #1
 800f0a0:	e007      	b.n	800f0b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	695b      	ldr	r3, [r3, #20]
 800f0a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0ac:	2b80      	cmp	r3, #128	; 0x80
 800f0ae:	d1ca      	bne.n	800f046 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f0b0:	2300      	movs	r3, #0
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3710      	adds	r7, #16
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}

0800f0ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f0ba:	b580      	push	{r7, lr}
 800f0bc:	b084      	sub	sp, #16
 800f0be:	af00      	add	r7, sp, #0
 800f0c0:	60f8      	str	r0, [r7, #12]
 800f0c2:	60b9      	str	r1, [r7, #8]
 800f0c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f0c6:	e02d      	b.n	800f124 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f0c8:	68f8      	ldr	r0, [r7, #12]
 800f0ca:	f000 f8bf 	bl	800f24c <I2C_IsAcknowledgeFailed>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d001      	beq.n	800f0d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	e02d      	b.n	800f134 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0de:	d021      	beq.n	800f124 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f0e0:	f7fc f832 	bl	800b148 <HAL_GetTick>
 800f0e4:	4602      	mov	r2, r0
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	1ad3      	subs	r3, r2, r3
 800f0ea:	68ba      	ldr	r2, [r7, #8]
 800f0ec:	429a      	cmp	r2, r3
 800f0ee:	d302      	bcc.n	800f0f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d116      	bne.n	800f124 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	2220      	movs	r2, #32
 800f100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	2200      	movs	r2, #0
 800f108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f110:	f043 0220 	orr.w	r2, r3, #32
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	2200      	movs	r2, #0
 800f11c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f120:	2301      	movs	r3, #1
 800f122:	e007      	b.n	800f134 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	695b      	ldr	r3, [r3, #20]
 800f12a:	f003 0304 	and.w	r3, r3, #4
 800f12e:	2b04      	cmp	r3, #4
 800f130:	d1ca      	bne.n	800f0c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f132:	2300      	movs	r3, #0
}
 800f134:	4618      	mov	r0, r3
 800f136:	3710      	adds	r7, #16
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}

0800f13c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b085      	sub	sp, #20
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f144:	2300      	movs	r3, #0
 800f146:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800f148:	4b13      	ldr	r3, [pc, #76]	; (800f198 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	08db      	lsrs	r3, r3, #3
 800f14e:	4a13      	ldr	r2, [pc, #76]	; (800f19c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800f150:	fba2 2303 	umull	r2, r3, r2, r3
 800f154:	0a1a      	lsrs	r2, r3, #8
 800f156:	4613      	mov	r3, r2
 800f158:	009b      	lsls	r3, r3, #2
 800f15a:	4413      	add	r3, r2
 800f15c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	3b01      	subs	r3, #1
 800f162:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d107      	bne.n	800f17a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f16e:	f043 0220 	orr.w	r2, r3, #32
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800f176:	2301      	movs	r3, #1
 800f178:	e008      	b.n	800f18c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f188:	d0e9      	beq.n	800f15e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800f18a:	2300      	movs	r3, #0
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3714      	adds	r7, #20
 800f190:	46bd      	mov	sp, r7
 800f192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f196:	4770      	bx	lr
 800f198:	20000038 	.word	0x20000038
 800f19c:	14f8b589 	.word	0x14f8b589

0800f1a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b084      	sub	sp, #16
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	60b9      	str	r1, [r7, #8]
 800f1aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f1ac:	e042      	b.n	800f234 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	695b      	ldr	r3, [r3, #20]
 800f1b4:	f003 0310 	and.w	r3, r3, #16
 800f1b8:	2b10      	cmp	r3, #16
 800f1ba:	d119      	bne.n	800f1f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	f06f 0210 	mvn.w	r2, #16
 800f1c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2220      	movs	r2, #32
 800f1d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	e029      	b.n	800f244 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f1f0:	f7fb ffaa 	bl	800b148 <HAL_GetTick>
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	1ad3      	subs	r3, r2, r3
 800f1fa:	68ba      	ldr	r2, [r7, #8]
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d302      	bcc.n	800f206 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d116      	bne.n	800f234 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	2200      	movs	r2, #0
 800f20a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	2220      	movs	r2, #32
 800f210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	2200      	movs	r2, #0
 800f218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f220:	f043 0220 	orr.w	r2, r3, #32
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	2200      	movs	r2, #0
 800f22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f230:	2301      	movs	r3, #1
 800f232:	e007      	b.n	800f244 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	695b      	ldr	r3, [r3, #20]
 800f23a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f23e:	2b40      	cmp	r3, #64	; 0x40
 800f240:	d1b5      	bne.n	800f1ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800f242:	2300      	movs	r3, #0
}
 800f244:	4618      	mov	r0, r3
 800f246:	3710      	adds	r7, #16
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800f24c:	b480      	push	{r7}
 800f24e:	b083      	sub	sp, #12
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	695b      	ldr	r3, [r3, #20]
 800f25a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f25e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f262:	d11b      	bne.n	800f29c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f26c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2200      	movs	r2, #0
 800f272:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2220      	movs	r2, #32
 800f278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2200      	movs	r2, #0
 800f280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f288:	f043 0204 	orr.w	r2, r3, #4
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2200      	movs	r2, #0
 800f294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800f298:	2301      	movs	r3, #1
 800f29a:	e000      	b.n	800f29e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800f29c:	2300      	movs	r3, #0
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	370c      	adds	r7, #12
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a8:	4770      	bx	lr

0800f2aa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800f2aa:	b480      	push	{r7}
 800f2ac:	b083      	sub	sp, #12
 800f2ae:	af00      	add	r7, sp, #0
 800f2b0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2b6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800f2ba:	d103      	bne.n	800f2c4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2201      	movs	r2, #1
 800f2c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800f2c2:	e007      	b.n	800f2d4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2c8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800f2cc:	d102      	bne.n	800f2d4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2208      	movs	r2, #8
 800f2d2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f2d4:	bf00      	nop
 800f2d6:	370c      	adds	r7, #12
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2de:	4770      	bx	lr

0800f2e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b086      	sub	sp, #24
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d101      	bne.n	800f2f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	e264      	b.n	800f7bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	f003 0301 	and.w	r3, r3, #1
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d075      	beq.n	800f3ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f2fe:	4ba3      	ldr	r3, [pc, #652]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f300:	689b      	ldr	r3, [r3, #8]
 800f302:	f003 030c 	and.w	r3, r3, #12
 800f306:	2b04      	cmp	r3, #4
 800f308:	d00c      	beq.n	800f324 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f30a:	4ba0      	ldr	r3, [pc, #640]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f30c:	689b      	ldr	r3, [r3, #8]
 800f30e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f312:	2b08      	cmp	r3, #8
 800f314:	d112      	bne.n	800f33c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f316:	4b9d      	ldr	r3, [pc, #628]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f31e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f322:	d10b      	bne.n	800f33c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f324:	4b99      	ldr	r3, [pc, #612]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d05b      	beq.n	800f3e8 <HAL_RCC_OscConfig+0x108>
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	685b      	ldr	r3, [r3, #4]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d157      	bne.n	800f3e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800f338:	2301      	movs	r3, #1
 800f33a:	e23f      	b.n	800f7bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	685b      	ldr	r3, [r3, #4]
 800f340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f344:	d106      	bne.n	800f354 <HAL_RCC_OscConfig+0x74>
 800f346:	4b91      	ldr	r3, [pc, #580]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	4a90      	ldr	r2, [pc, #576]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f34c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f350:	6013      	str	r3, [r2, #0]
 800f352:	e01d      	b.n	800f390 <HAL_RCC_OscConfig+0xb0>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	685b      	ldr	r3, [r3, #4]
 800f358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f35c:	d10c      	bne.n	800f378 <HAL_RCC_OscConfig+0x98>
 800f35e:	4b8b      	ldr	r3, [pc, #556]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	4a8a      	ldr	r2, [pc, #552]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f368:	6013      	str	r3, [r2, #0]
 800f36a:	4b88      	ldr	r3, [pc, #544]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	4a87      	ldr	r2, [pc, #540]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f374:	6013      	str	r3, [r2, #0]
 800f376:	e00b      	b.n	800f390 <HAL_RCC_OscConfig+0xb0>
 800f378:	4b84      	ldr	r3, [pc, #528]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	4a83      	ldr	r2, [pc, #524]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f37e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f382:	6013      	str	r3, [r2, #0]
 800f384:	4b81      	ldr	r3, [pc, #516]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	4a80      	ldr	r2, [pc, #512]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f38a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f38e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d013      	beq.n	800f3c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f398:	f7fb fed6 	bl	800b148 <HAL_GetTick>
 800f39c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f39e:	e008      	b.n	800f3b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f3a0:	f7fb fed2 	bl	800b148 <HAL_GetTick>
 800f3a4:	4602      	mov	r2, r0
 800f3a6:	693b      	ldr	r3, [r7, #16]
 800f3a8:	1ad3      	subs	r3, r2, r3
 800f3aa:	2b64      	cmp	r3, #100	; 0x64
 800f3ac:	d901      	bls.n	800f3b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800f3ae:	2303      	movs	r3, #3
 800f3b0:	e204      	b.n	800f7bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f3b2:	4b76      	ldr	r3, [pc, #472]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d0f0      	beq.n	800f3a0 <HAL_RCC_OscConfig+0xc0>
 800f3be:	e014      	b.n	800f3ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f3c0:	f7fb fec2 	bl	800b148 <HAL_GetTick>
 800f3c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f3c6:	e008      	b.n	800f3da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f3c8:	f7fb febe 	bl	800b148 <HAL_GetTick>
 800f3cc:	4602      	mov	r2, r0
 800f3ce:	693b      	ldr	r3, [r7, #16]
 800f3d0:	1ad3      	subs	r3, r2, r3
 800f3d2:	2b64      	cmp	r3, #100	; 0x64
 800f3d4:	d901      	bls.n	800f3da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f3d6:	2303      	movs	r3, #3
 800f3d8:	e1f0      	b.n	800f7bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f3da:	4b6c      	ldr	r3, [pc, #432]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d1f0      	bne.n	800f3c8 <HAL_RCC_OscConfig+0xe8>
 800f3e6:	e000      	b.n	800f3ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f3e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	f003 0302 	and.w	r3, r3, #2
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d063      	beq.n	800f4be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f3f6:	4b65      	ldr	r3, [pc, #404]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f3f8:	689b      	ldr	r3, [r3, #8]
 800f3fa:	f003 030c 	and.w	r3, r3, #12
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d00b      	beq.n	800f41a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f402:	4b62      	ldr	r3, [pc, #392]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f404:	689b      	ldr	r3, [r3, #8]
 800f406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f40a:	2b08      	cmp	r3, #8
 800f40c:	d11c      	bne.n	800f448 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f40e:	4b5f      	ldr	r3, [pc, #380]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f416:	2b00      	cmp	r3, #0
 800f418:	d116      	bne.n	800f448 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f41a:	4b5c      	ldr	r3, [pc, #368]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	f003 0302 	and.w	r3, r3, #2
 800f422:	2b00      	cmp	r3, #0
 800f424:	d005      	beq.n	800f432 <HAL_RCC_OscConfig+0x152>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	68db      	ldr	r3, [r3, #12]
 800f42a:	2b01      	cmp	r3, #1
 800f42c:	d001      	beq.n	800f432 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800f42e:	2301      	movs	r3, #1
 800f430:	e1c4      	b.n	800f7bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f432:	4b56      	ldr	r3, [pc, #344]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	691b      	ldr	r3, [r3, #16]
 800f43e:	00db      	lsls	r3, r3, #3
 800f440:	4952      	ldr	r1, [pc, #328]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f442:	4313      	orrs	r3, r2
 800f444:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f446:	e03a      	b.n	800f4be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	68db      	ldr	r3, [r3, #12]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d020      	beq.n	800f492 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f450:	4b4f      	ldr	r3, [pc, #316]	; (800f590 <HAL_RCC_OscConfig+0x2b0>)
 800f452:	2201      	movs	r2, #1
 800f454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f456:	f7fb fe77 	bl	800b148 <HAL_GetTick>
 800f45a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f45c:	e008      	b.n	800f470 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f45e:	f7fb fe73 	bl	800b148 <HAL_GetTick>
 800f462:	4602      	mov	r2, r0
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	1ad3      	subs	r3, r2, r3
 800f468:	2b02      	cmp	r3, #2
 800f46a:	d901      	bls.n	800f470 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800f46c:	2303      	movs	r3, #3
 800f46e:	e1a5      	b.n	800f7bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f470:	4b46      	ldr	r3, [pc, #280]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	f003 0302 	and.w	r3, r3, #2
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d0f0      	beq.n	800f45e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f47c:	4b43      	ldr	r3, [pc, #268]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	691b      	ldr	r3, [r3, #16]
 800f488:	00db      	lsls	r3, r3, #3
 800f48a:	4940      	ldr	r1, [pc, #256]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f48c:	4313      	orrs	r3, r2
 800f48e:	600b      	str	r3, [r1, #0]
 800f490:	e015      	b.n	800f4be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f492:	4b3f      	ldr	r3, [pc, #252]	; (800f590 <HAL_RCC_OscConfig+0x2b0>)
 800f494:	2200      	movs	r2, #0
 800f496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f498:	f7fb fe56 	bl	800b148 <HAL_GetTick>
 800f49c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f49e:	e008      	b.n	800f4b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f4a0:	f7fb fe52 	bl	800b148 <HAL_GetTick>
 800f4a4:	4602      	mov	r2, r0
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	1ad3      	subs	r3, r2, r3
 800f4aa:	2b02      	cmp	r3, #2
 800f4ac:	d901      	bls.n	800f4b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800f4ae:	2303      	movs	r3, #3
 800f4b0:	e184      	b.n	800f7bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f4b2:	4b36      	ldr	r3, [pc, #216]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	f003 0302 	and.w	r3, r3, #2
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d1f0      	bne.n	800f4a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	f003 0308 	and.w	r3, r3, #8
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d030      	beq.n	800f52c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	695b      	ldr	r3, [r3, #20]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d016      	beq.n	800f500 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f4d2:	4b30      	ldr	r3, [pc, #192]	; (800f594 <HAL_RCC_OscConfig+0x2b4>)
 800f4d4:	2201      	movs	r2, #1
 800f4d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f4d8:	f7fb fe36 	bl	800b148 <HAL_GetTick>
 800f4dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f4de:	e008      	b.n	800f4f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f4e0:	f7fb fe32 	bl	800b148 <HAL_GetTick>
 800f4e4:	4602      	mov	r2, r0
 800f4e6:	693b      	ldr	r3, [r7, #16]
 800f4e8:	1ad3      	subs	r3, r2, r3
 800f4ea:	2b02      	cmp	r3, #2
 800f4ec:	d901      	bls.n	800f4f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800f4ee:	2303      	movs	r3, #3
 800f4f0:	e164      	b.n	800f7bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f4f2:	4b26      	ldr	r3, [pc, #152]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f4f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4f6:	f003 0302 	and.w	r3, r3, #2
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d0f0      	beq.n	800f4e0 <HAL_RCC_OscConfig+0x200>
 800f4fe:	e015      	b.n	800f52c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f500:	4b24      	ldr	r3, [pc, #144]	; (800f594 <HAL_RCC_OscConfig+0x2b4>)
 800f502:	2200      	movs	r2, #0
 800f504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f506:	f7fb fe1f 	bl	800b148 <HAL_GetTick>
 800f50a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f50c:	e008      	b.n	800f520 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f50e:	f7fb fe1b 	bl	800b148 <HAL_GetTick>
 800f512:	4602      	mov	r2, r0
 800f514:	693b      	ldr	r3, [r7, #16]
 800f516:	1ad3      	subs	r3, r2, r3
 800f518:	2b02      	cmp	r3, #2
 800f51a:	d901      	bls.n	800f520 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800f51c:	2303      	movs	r3, #3
 800f51e:	e14d      	b.n	800f7bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f520:	4b1a      	ldr	r3, [pc, #104]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f524:	f003 0302 	and.w	r3, r3, #2
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d1f0      	bne.n	800f50e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	f003 0304 	and.w	r3, r3, #4
 800f534:	2b00      	cmp	r3, #0
 800f536:	f000 80a0 	beq.w	800f67a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f53a:	2300      	movs	r3, #0
 800f53c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f53e:	4b13      	ldr	r3, [pc, #76]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f546:	2b00      	cmp	r3, #0
 800f548:	d10f      	bne.n	800f56a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f54a:	2300      	movs	r3, #0
 800f54c:	60bb      	str	r3, [r7, #8]
 800f54e:	4b0f      	ldr	r3, [pc, #60]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f552:	4a0e      	ldr	r2, [pc, #56]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f558:	6413      	str	r3, [r2, #64]	; 0x40
 800f55a:	4b0c      	ldr	r3, [pc, #48]	; (800f58c <HAL_RCC_OscConfig+0x2ac>)
 800f55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f55e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f562:	60bb      	str	r3, [r7, #8]
 800f564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f566:	2301      	movs	r3, #1
 800f568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f56a:	4b0b      	ldr	r3, [pc, #44]	; (800f598 <HAL_RCC_OscConfig+0x2b8>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f572:	2b00      	cmp	r3, #0
 800f574:	d121      	bne.n	800f5ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f576:	4b08      	ldr	r3, [pc, #32]	; (800f598 <HAL_RCC_OscConfig+0x2b8>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	4a07      	ldr	r2, [pc, #28]	; (800f598 <HAL_RCC_OscConfig+0x2b8>)
 800f57c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f582:	f7fb fde1 	bl	800b148 <HAL_GetTick>
 800f586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f588:	e011      	b.n	800f5ae <HAL_RCC_OscConfig+0x2ce>
 800f58a:	bf00      	nop
 800f58c:	40023800 	.word	0x40023800
 800f590:	42470000 	.word	0x42470000
 800f594:	42470e80 	.word	0x42470e80
 800f598:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f59c:	f7fb fdd4 	bl	800b148 <HAL_GetTick>
 800f5a0:	4602      	mov	r2, r0
 800f5a2:	693b      	ldr	r3, [r7, #16]
 800f5a4:	1ad3      	subs	r3, r2, r3
 800f5a6:	2b02      	cmp	r3, #2
 800f5a8:	d901      	bls.n	800f5ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800f5aa:	2303      	movs	r3, #3
 800f5ac:	e106      	b.n	800f7bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f5ae:	4b85      	ldr	r3, [pc, #532]	; (800f7c4 <HAL_RCC_OscConfig+0x4e4>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d0f0      	beq.n	800f59c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	689b      	ldr	r3, [r3, #8]
 800f5be:	2b01      	cmp	r3, #1
 800f5c0:	d106      	bne.n	800f5d0 <HAL_RCC_OscConfig+0x2f0>
 800f5c2:	4b81      	ldr	r3, [pc, #516]	; (800f7c8 <HAL_RCC_OscConfig+0x4e8>)
 800f5c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5c6:	4a80      	ldr	r2, [pc, #512]	; (800f7c8 <HAL_RCC_OscConfig+0x4e8>)
 800f5c8:	f043 0301 	orr.w	r3, r3, #1
 800f5cc:	6713      	str	r3, [r2, #112]	; 0x70
 800f5ce:	e01c      	b.n	800f60a <HAL_RCC_OscConfig+0x32a>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	689b      	ldr	r3, [r3, #8]
 800f5d4:	2b05      	cmp	r3, #5
 800f5d6:	d10c      	bne.n	800f5f2 <HAL_RCC_OscConfig+0x312>
 800f5d8:	4b7b      	ldr	r3, [pc, #492]	; (800f7c8 <HAL_RCC_OscConfig+0x4e8>)
 800f5da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5dc:	4a7a      	ldr	r2, [pc, #488]	; (800f7c8 <HAL_RCC_OscConfig+0x4e8>)
 800f5de:	f043 0304 	orr.w	r3, r3, #4
 800f5e2:	6713      	str	r3, [r2, #112]	; 0x70
 800f5e4:	4b78      	ldr	r3, [pc, #480]	; (800f7c8 <HAL_RCC_OscConfig+0x4e8>)
 800f5e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5e8:	4a77      	ldr	r2, [pc, #476]	; (800f7c8 <HAL_RCC_OscConfig+0x4e8>)
 800f5ea:	f043 0301 	orr.w	r3, r3, #1
 800f5ee:	6713      	str	r3, [r2, #112]	; 0x70
 800f5f0:	e00b      	b.n	800f60a <HAL_RCC_OscConfig+0x32a>
 800f5f2:	4b75      	ldr	r3, [pc, #468]	; (800f7c8 <HAL_RCC_OscConfig+0x4e8>)
 800f5f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5f6:	4a74      	ldr	r2, [pc, #464]	; (800f7c8 <HAL_RCC_OscConfig+0x4e8>)
 800f5f8:	f023 0301 	bic.w	r3, r3, #1
 800f5fc:	6713      	str	r3, [r2, #112]	; 0x70
 800f5fe:	4b72      	ldr	r3, [pc, #456]	; (800f7c8 <HAL_RCC_OscConfig+0x4e8>)
 800f600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f602:	4a71      	ldr	r2, [pc, #452]	; (800f7c8 <HAL_RCC_OscConfig+0x4e8>)
 800f604:	f023 0304 	bic.w	r3, r3, #4
 800f608:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	689b      	ldr	r3, [r3, #8]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d015      	beq.n	800f63e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f612:	f7fb fd99 	bl	800b148 <HAL_GetTick>
 800f616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f618:	e00a      	b.n	800f630 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f61a:	f7fb fd95 	bl	800b148 <HAL_GetTick>
 800f61e:	4602      	mov	r2, r0
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	1ad3      	subs	r3, r2, r3
 800f624:	f241 3288 	movw	r2, #5000	; 0x1388
 800f628:	4293      	cmp	r3, r2
 800f62a:	d901      	bls.n	800f630 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800f62c:	2303      	movs	r3, #3
 800f62e:	e0c5      	b.n	800f7bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f630:	4b65      	ldr	r3, [pc, #404]	; (800f7c8 <HAL_RCC_OscConfig+0x4e8>)
 800f632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f634:	f003 0302 	and.w	r3, r3, #2
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d0ee      	beq.n	800f61a <HAL_RCC_OscConfig+0x33a>
 800f63c:	e014      	b.n	800f668 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f63e:	f7fb fd83 	bl	800b148 <HAL_GetTick>
 800f642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f644:	e00a      	b.n	800f65c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f646:	f7fb fd7f 	bl	800b148 <HAL_GetTick>
 800f64a:	4602      	mov	r2, r0
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	1ad3      	subs	r3, r2, r3
 800f650:	f241 3288 	movw	r2, #5000	; 0x1388
 800f654:	4293      	cmp	r3, r2
 800f656:	d901      	bls.n	800f65c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800f658:	2303      	movs	r3, #3
 800f65a:	e0af      	b.n	800f7bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f65c:	4b5a      	ldr	r3, [pc, #360]	; (800f7c8 <HAL_RCC_OscConfig+0x4e8>)
 800f65e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f660:	f003 0302 	and.w	r3, r3, #2
 800f664:	2b00      	cmp	r3, #0
 800f666:	d1ee      	bne.n	800f646 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f668:	7dfb      	ldrb	r3, [r7, #23]
 800f66a:	2b01      	cmp	r3, #1
 800f66c:	d105      	bne.n	800f67a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f66e:	4b56      	ldr	r3, [pc, #344]	; (800f7c8 <HAL_RCC_OscConfig+0x4e8>)
 800f670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f672:	4a55      	ldr	r2, [pc, #340]	; (800f7c8 <HAL_RCC_OscConfig+0x4e8>)
 800f674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f678:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	699b      	ldr	r3, [r3, #24]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	f000 809b 	beq.w	800f7ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f684:	4b50      	ldr	r3, [pc, #320]	; (800f7c8 <HAL_RCC_OscConfig+0x4e8>)
 800f686:	689b      	ldr	r3, [r3, #8]
 800f688:	f003 030c 	and.w	r3, r3, #12
 800f68c:	2b08      	cmp	r3, #8
 800f68e:	d05c      	beq.n	800f74a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	699b      	ldr	r3, [r3, #24]
 800f694:	2b02      	cmp	r3, #2
 800f696:	d141      	bne.n	800f71c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f698:	4b4c      	ldr	r3, [pc, #304]	; (800f7cc <HAL_RCC_OscConfig+0x4ec>)
 800f69a:	2200      	movs	r2, #0
 800f69c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f69e:	f7fb fd53 	bl	800b148 <HAL_GetTick>
 800f6a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f6a4:	e008      	b.n	800f6b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f6a6:	f7fb fd4f 	bl	800b148 <HAL_GetTick>
 800f6aa:	4602      	mov	r2, r0
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	1ad3      	subs	r3, r2, r3
 800f6b0:	2b02      	cmp	r3, #2
 800f6b2:	d901      	bls.n	800f6b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800f6b4:	2303      	movs	r3, #3
 800f6b6:	e081      	b.n	800f7bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f6b8:	4b43      	ldr	r3, [pc, #268]	; (800f7c8 <HAL_RCC_OscConfig+0x4e8>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d1f0      	bne.n	800f6a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	69da      	ldr	r2, [r3, #28]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6a1b      	ldr	r3, [r3, #32]
 800f6cc:	431a      	orrs	r2, r3
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6d2:	019b      	lsls	r3, r3, #6
 800f6d4:	431a      	orrs	r2, r3
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6da:	085b      	lsrs	r3, r3, #1
 800f6dc:	3b01      	subs	r3, #1
 800f6de:	041b      	lsls	r3, r3, #16
 800f6e0:	431a      	orrs	r2, r3
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6e6:	061b      	lsls	r3, r3, #24
 800f6e8:	4937      	ldr	r1, [pc, #220]	; (800f7c8 <HAL_RCC_OscConfig+0x4e8>)
 800f6ea:	4313      	orrs	r3, r2
 800f6ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f6ee:	4b37      	ldr	r3, [pc, #220]	; (800f7cc <HAL_RCC_OscConfig+0x4ec>)
 800f6f0:	2201      	movs	r2, #1
 800f6f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f6f4:	f7fb fd28 	bl	800b148 <HAL_GetTick>
 800f6f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f6fa:	e008      	b.n	800f70e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f6fc:	f7fb fd24 	bl	800b148 <HAL_GetTick>
 800f700:	4602      	mov	r2, r0
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	1ad3      	subs	r3, r2, r3
 800f706:	2b02      	cmp	r3, #2
 800f708:	d901      	bls.n	800f70e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800f70a:	2303      	movs	r3, #3
 800f70c:	e056      	b.n	800f7bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f70e:	4b2e      	ldr	r3, [pc, #184]	; (800f7c8 <HAL_RCC_OscConfig+0x4e8>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f716:	2b00      	cmp	r3, #0
 800f718:	d0f0      	beq.n	800f6fc <HAL_RCC_OscConfig+0x41c>
 800f71a:	e04e      	b.n	800f7ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f71c:	4b2b      	ldr	r3, [pc, #172]	; (800f7cc <HAL_RCC_OscConfig+0x4ec>)
 800f71e:	2200      	movs	r2, #0
 800f720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f722:	f7fb fd11 	bl	800b148 <HAL_GetTick>
 800f726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f728:	e008      	b.n	800f73c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f72a:	f7fb fd0d 	bl	800b148 <HAL_GetTick>
 800f72e:	4602      	mov	r2, r0
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	1ad3      	subs	r3, r2, r3
 800f734:	2b02      	cmp	r3, #2
 800f736:	d901      	bls.n	800f73c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800f738:	2303      	movs	r3, #3
 800f73a:	e03f      	b.n	800f7bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f73c:	4b22      	ldr	r3, [pc, #136]	; (800f7c8 <HAL_RCC_OscConfig+0x4e8>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f744:	2b00      	cmp	r3, #0
 800f746:	d1f0      	bne.n	800f72a <HAL_RCC_OscConfig+0x44a>
 800f748:	e037      	b.n	800f7ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	699b      	ldr	r3, [r3, #24]
 800f74e:	2b01      	cmp	r3, #1
 800f750:	d101      	bne.n	800f756 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800f752:	2301      	movs	r3, #1
 800f754:	e032      	b.n	800f7bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f756:	4b1c      	ldr	r3, [pc, #112]	; (800f7c8 <HAL_RCC_OscConfig+0x4e8>)
 800f758:	685b      	ldr	r3, [r3, #4]
 800f75a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	699b      	ldr	r3, [r3, #24]
 800f760:	2b01      	cmp	r3, #1
 800f762:	d028      	beq.n	800f7b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f76e:	429a      	cmp	r2, r3
 800f770:	d121      	bne.n	800f7b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f77c:	429a      	cmp	r2, r3
 800f77e:	d11a      	bne.n	800f7b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f780:	68fa      	ldr	r2, [r7, #12]
 800f782:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f786:	4013      	ands	r3, r2
 800f788:	687a      	ldr	r2, [r7, #4]
 800f78a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f78c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f78e:	4293      	cmp	r3, r2
 800f790:	d111      	bne.n	800f7b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f79c:	085b      	lsrs	r3, r3, #1
 800f79e:	3b01      	subs	r3, #1
 800f7a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d107      	bne.n	800f7b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d001      	beq.n	800f7ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	e000      	b.n	800f7bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800f7ba:	2300      	movs	r3, #0
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	3718      	adds	r7, #24
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}
 800f7c4:	40007000 	.word	0x40007000
 800f7c8:	40023800 	.word	0x40023800
 800f7cc:	42470060 	.word	0x42470060

0800f7d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b084      	sub	sp, #16
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
 800f7d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d101      	bne.n	800f7e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	e0cc      	b.n	800f97e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f7e4:	4b68      	ldr	r3, [pc, #416]	; (800f988 <HAL_RCC_ClockConfig+0x1b8>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	f003 0307 	and.w	r3, r3, #7
 800f7ec:	683a      	ldr	r2, [r7, #0]
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d90c      	bls.n	800f80c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f7f2:	4b65      	ldr	r3, [pc, #404]	; (800f988 <HAL_RCC_ClockConfig+0x1b8>)
 800f7f4:	683a      	ldr	r2, [r7, #0]
 800f7f6:	b2d2      	uxtb	r2, r2
 800f7f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f7fa:	4b63      	ldr	r3, [pc, #396]	; (800f988 <HAL_RCC_ClockConfig+0x1b8>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	f003 0307 	and.w	r3, r3, #7
 800f802:	683a      	ldr	r2, [r7, #0]
 800f804:	429a      	cmp	r2, r3
 800f806:	d001      	beq.n	800f80c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f808:	2301      	movs	r3, #1
 800f80a:	e0b8      	b.n	800f97e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	f003 0302 	and.w	r3, r3, #2
 800f814:	2b00      	cmp	r3, #0
 800f816:	d020      	beq.n	800f85a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	f003 0304 	and.w	r3, r3, #4
 800f820:	2b00      	cmp	r3, #0
 800f822:	d005      	beq.n	800f830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f824:	4b59      	ldr	r3, [pc, #356]	; (800f98c <HAL_RCC_ClockConfig+0x1bc>)
 800f826:	689b      	ldr	r3, [r3, #8]
 800f828:	4a58      	ldr	r2, [pc, #352]	; (800f98c <HAL_RCC_ClockConfig+0x1bc>)
 800f82a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800f82e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	f003 0308 	and.w	r3, r3, #8
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d005      	beq.n	800f848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f83c:	4b53      	ldr	r3, [pc, #332]	; (800f98c <HAL_RCC_ClockConfig+0x1bc>)
 800f83e:	689b      	ldr	r3, [r3, #8]
 800f840:	4a52      	ldr	r2, [pc, #328]	; (800f98c <HAL_RCC_ClockConfig+0x1bc>)
 800f842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800f846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f848:	4b50      	ldr	r3, [pc, #320]	; (800f98c <HAL_RCC_ClockConfig+0x1bc>)
 800f84a:	689b      	ldr	r3, [r3, #8]
 800f84c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	689b      	ldr	r3, [r3, #8]
 800f854:	494d      	ldr	r1, [pc, #308]	; (800f98c <HAL_RCC_ClockConfig+0x1bc>)
 800f856:	4313      	orrs	r3, r2
 800f858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	f003 0301 	and.w	r3, r3, #1
 800f862:	2b00      	cmp	r3, #0
 800f864:	d044      	beq.n	800f8f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	685b      	ldr	r3, [r3, #4]
 800f86a:	2b01      	cmp	r3, #1
 800f86c:	d107      	bne.n	800f87e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f86e:	4b47      	ldr	r3, [pc, #284]	; (800f98c <HAL_RCC_ClockConfig+0x1bc>)
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f876:	2b00      	cmp	r3, #0
 800f878:	d119      	bne.n	800f8ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f87a:	2301      	movs	r3, #1
 800f87c:	e07f      	b.n	800f97e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	685b      	ldr	r3, [r3, #4]
 800f882:	2b02      	cmp	r3, #2
 800f884:	d003      	beq.n	800f88e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f88a:	2b03      	cmp	r3, #3
 800f88c:	d107      	bne.n	800f89e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f88e:	4b3f      	ldr	r3, [pc, #252]	; (800f98c <HAL_RCC_ClockConfig+0x1bc>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f896:	2b00      	cmp	r3, #0
 800f898:	d109      	bne.n	800f8ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f89a:	2301      	movs	r3, #1
 800f89c:	e06f      	b.n	800f97e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f89e:	4b3b      	ldr	r3, [pc, #236]	; (800f98c <HAL_RCC_ClockConfig+0x1bc>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f003 0302 	and.w	r3, r3, #2
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d101      	bne.n	800f8ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	e067      	b.n	800f97e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f8ae:	4b37      	ldr	r3, [pc, #220]	; (800f98c <HAL_RCC_ClockConfig+0x1bc>)
 800f8b0:	689b      	ldr	r3, [r3, #8]
 800f8b2:	f023 0203 	bic.w	r2, r3, #3
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	685b      	ldr	r3, [r3, #4]
 800f8ba:	4934      	ldr	r1, [pc, #208]	; (800f98c <HAL_RCC_ClockConfig+0x1bc>)
 800f8bc:	4313      	orrs	r3, r2
 800f8be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f8c0:	f7fb fc42 	bl	800b148 <HAL_GetTick>
 800f8c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f8c6:	e00a      	b.n	800f8de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f8c8:	f7fb fc3e 	bl	800b148 <HAL_GetTick>
 800f8cc:	4602      	mov	r2, r0
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	1ad3      	subs	r3, r2, r3
 800f8d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d901      	bls.n	800f8de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f8da:	2303      	movs	r3, #3
 800f8dc:	e04f      	b.n	800f97e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f8de:	4b2b      	ldr	r3, [pc, #172]	; (800f98c <HAL_RCC_ClockConfig+0x1bc>)
 800f8e0:	689b      	ldr	r3, [r3, #8]
 800f8e2:	f003 020c 	and.w	r2, r3, #12
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	685b      	ldr	r3, [r3, #4]
 800f8ea:	009b      	lsls	r3, r3, #2
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	d1eb      	bne.n	800f8c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f8f0:	4b25      	ldr	r3, [pc, #148]	; (800f988 <HAL_RCC_ClockConfig+0x1b8>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	f003 0307 	and.w	r3, r3, #7
 800f8f8:	683a      	ldr	r2, [r7, #0]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d20c      	bcs.n	800f918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f8fe:	4b22      	ldr	r3, [pc, #136]	; (800f988 <HAL_RCC_ClockConfig+0x1b8>)
 800f900:	683a      	ldr	r2, [r7, #0]
 800f902:	b2d2      	uxtb	r2, r2
 800f904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f906:	4b20      	ldr	r3, [pc, #128]	; (800f988 <HAL_RCC_ClockConfig+0x1b8>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	f003 0307 	and.w	r3, r3, #7
 800f90e:	683a      	ldr	r2, [r7, #0]
 800f910:	429a      	cmp	r2, r3
 800f912:	d001      	beq.n	800f918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f914:	2301      	movs	r3, #1
 800f916:	e032      	b.n	800f97e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	f003 0304 	and.w	r3, r3, #4
 800f920:	2b00      	cmp	r3, #0
 800f922:	d008      	beq.n	800f936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f924:	4b19      	ldr	r3, [pc, #100]	; (800f98c <HAL_RCC_ClockConfig+0x1bc>)
 800f926:	689b      	ldr	r3, [r3, #8]
 800f928:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	68db      	ldr	r3, [r3, #12]
 800f930:	4916      	ldr	r1, [pc, #88]	; (800f98c <HAL_RCC_ClockConfig+0x1bc>)
 800f932:	4313      	orrs	r3, r2
 800f934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	f003 0308 	and.w	r3, r3, #8
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d009      	beq.n	800f956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f942:	4b12      	ldr	r3, [pc, #72]	; (800f98c <HAL_RCC_ClockConfig+0x1bc>)
 800f944:	689b      	ldr	r3, [r3, #8]
 800f946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	691b      	ldr	r3, [r3, #16]
 800f94e:	00db      	lsls	r3, r3, #3
 800f950:	490e      	ldr	r1, [pc, #56]	; (800f98c <HAL_RCC_ClockConfig+0x1bc>)
 800f952:	4313      	orrs	r3, r2
 800f954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f956:	f000 f821 	bl	800f99c <HAL_RCC_GetSysClockFreq>
 800f95a:	4602      	mov	r2, r0
 800f95c:	4b0b      	ldr	r3, [pc, #44]	; (800f98c <HAL_RCC_ClockConfig+0x1bc>)
 800f95e:	689b      	ldr	r3, [r3, #8]
 800f960:	091b      	lsrs	r3, r3, #4
 800f962:	f003 030f 	and.w	r3, r3, #15
 800f966:	490a      	ldr	r1, [pc, #40]	; (800f990 <HAL_RCC_ClockConfig+0x1c0>)
 800f968:	5ccb      	ldrb	r3, [r1, r3]
 800f96a:	fa22 f303 	lsr.w	r3, r2, r3
 800f96e:	4a09      	ldr	r2, [pc, #36]	; (800f994 <HAL_RCC_ClockConfig+0x1c4>)
 800f970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800f972:	4b09      	ldr	r3, [pc, #36]	; (800f998 <HAL_RCC_ClockConfig+0x1c8>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	4618      	mov	r0, r3
 800f978:	f7fb fba2 	bl	800b0c0 <HAL_InitTick>

  return HAL_OK;
 800f97c:	2300      	movs	r3, #0
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3710      	adds	r7, #16
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}
 800f986:	bf00      	nop
 800f988:	40023c00 	.word	0x40023c00
 800f98c:	40023800 	.word	0x40023800
 800f990:	08027a94 	.word	0x08027a94
 800f994:	20000038 	.word	0x20000038
 800f998:	2000003c 	.word	0x2000003c

0800f99c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f99c:	b5b0      	push	{r4, r5, r7, lr}
 800f99e:	b084      	sub	sp, #16
 800f9a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800f9a2:	2100      	movs	r1, #0
 800f9a4:	6079      	str	r1, [r7, #4]
 800f9a6:	2100      	movs	r1, #0
 800f9a8:	60f9      	str	r1, [r7, #12]
 800f9aa:	2100      	movs	r1, #0
 800f9ac:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800f9ae:	2100      	movs	r1, #0
 800f9b0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f9b2:	4952      	ldr	r1, [pc, #328]	; (800fafc <HAL_RCC_GetSysClockFreq+0x160>)
 800f9b4:	6889      	ldr	r1, [r1, #8]
 800f9b6:	f001 010c 	and.w	r1, r1, #12
 800f9ba:	2908      	cmp	r1, #8
 800f9bc:	d00d      	beq.n	800f9da <HAL_RCC_GetSysClockFreq+0x3e>
 800f9be:	2908      	cmp	r1, #8
 800f9c0:	f200 8094 	bhi.w	800faec <HAL_RCC_GetSysClockFreq+0x150>
 800f9c4:	2900      	cmp	r1, #0
 800f9c6:	d002      	beq.n	800f9ce <HAL_RCC_GetSysClockFreq+0x32>
 800f9c8:	2904      	cmp	r1, #4
 800f9ca:	d003      	beq.n	800f9d4 <HAL_RCC_GetSysClockFreq+0x38>
 800f9cc:	e08e      	b.n	800faec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f9ce:	4b4c      	ldr	r3, [pc, #304]	; (800fb00 <HAL_RCC_GetSysClockFreq+0x164>)
 800f9d0:	60bb      	str	r3, [r7, #8]
       break;
 800f9d2:	e08e      	b.n	800faf2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f9d4:	4b4b      	ldr	r3, [pc, #300]	; (800fb04 <HAL_RCC_GetSysClockFreq+0x168>)
 800f9d6:	60bb      	str	r3, [r7, #8]
      break;
 800f9d8:	e08b      	b.n	800faf2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f9da:	4948      	ldr	r1, [pc, #288]	; (800fafc <HAL_RCC_GetSysClockFreq+0x160>)
 800f9dc:	6849      	ldr	r1, [r1, #4]
 800f9de:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800f9e2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f9e4:	4945      	ldr	r1, [pc, #276]	; (800fafc <HAL_RCC_GetSysClockFreq+0x160>)
 800f9e6:	6849      	ldr	r1, [r1, #4]
 800f9e8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800f9ec:	2900      	cmp	r1, #0
 800f9ee:	d024      	beq.n	800fa3a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f9f0:	4942      	ldr	r1, [pc, #264]	; (800fafc <HAL_RCC_GetSysClockFreq+0x160>)
 800f9f2:	6849      	ldr	r1, [r1, #4]
 800f9f4:	0989      	lsrs	r1, r1, #6
 800f9f6:	4608      	mov	r0, r1
 800f9f8:	f04f 0100 	mov.w	r1, #0
 800f9fc:	f240 14ff 	movw	r4, #511	; 0x1ff
 800fa00:	f04f 0500 	mov.w	r5, #0
 800fa04:	ea00 0204 	and.w	r2, r0, r4
 800fa08:	ea01 0305 	and.w	r3, r1, r5
 800fa0c:	493d      	ldr	r1, [pc, #244]	; (800fb04 <HAL_RCC_GetSysClockFreq+0x168>)
 800fa0e:	fb01 f003 	mul.w	r0, r1, r3
 800fa12:	2100      	movs	r1, #0
 800fa14:	fb01 f102 	mul.w	r1, r1, r2
 800fa18:	1844      	adds	r4, r0, r1
 800fa1a:	493a      	ldr	r1, [pc, #232]	; (800fb04 <HAL_RCC_GetSysClockFreq+0x168>)
 800fa1c:	fba2 0101 	umull	r0, r1, r2, r1
 800fa20:	1863      	adds	r3, r4, r1
 800fa22:	4619      	mov	r1, r3
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	461a      	mov	r2, r3
 800fa28:	f04f 0300 	mov.w	r3, #0
 800fa2c:	f7f1 f944 	bl	8000cb8 <__aeabi_uldivmod>
 800fa30:	4602      	mov	r2, r0
 800fa32:	460b      	mov	r3, r1
 800fa34:	4613      	mov	r3, r2
 800fa36:	60fb      	str	r3, [r7, #12]
 800fa38:	e04a      	b.n	800fad0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fa3a:	4b30      	ldr	r3, [pc, #192]	; (800fafc <HAL_RCC_GetSysClockFreq+0x160>)
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	099b      	lsrs	r3, r3, #6
 800fa40:	461a      	mov	r2, r3
 800fa42:	f04f 0300 	mov.w	r3, #0
 800fa46:	f240 10ff 	movw	r0, #511	; 0x1ff
 800fa4a:	f04f 0100 	mov.w	r1, #0
 800fa4e:	ea02 0400 	and.w	r4, r2, r0
 800fa52:	ea03 0501 	and.w	r5, r3, r1
 800fa56:	4620      	mov	r0, r4
 800fa58:	4629      	mov	r1, r5
 800fa5a:	f04f 0200 	mov.w	r2, #0
 800fa5e:	f04f 0300 	mov.w	r3, #0
 800fa62:	014b      	lsls	r3, r1, #5
 800fa64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800fa68:	0142      	lsls	r2, r0, #5
 800fa6a:	4610      	mov	r0, r2
 800fa6c:	4619      	mov	r1, r3
 800fa6e:	1b00      	subs	r0, r0, r4
 800fa70:	eb61 0105 	sbc.w	r1, r1, r5
 800fa74:	f04f 0200 	mov.w	r2, #0
 800fa78:	f04f 0300 	mov.w	r3, #0
 800fa7c:	018b      	lsls	r3, r1, #6
 800fa7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800fa82:	0182      	lsls	r2, r0, #6
 800fa84:	1a12      	subs	r2, r2, r0
 800fa86:	eb63 0301 	sbc.w	r3, r3, r1
 800fa8a:	f04f 0000 	mov.w	r0, #0
 800fa8e:	f04f 0100 	mov.w	r1, #0
 800fa92:	00d9      	lsls	r1, r3, #3
 800fa94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fa98:	00d0      	lsls	r0, r2, #3
 800fa9a:	4602      	mov	r2, r0
 800fa9c:	460b      	mov	r3, r1
 800fa9e:	1912      	adds	r2, r2, r4
 800faa0:	eb45 0303 	adc.w	r3, r5, r3
 800faa4:	f04f 0000 	mov.w	r0, #0
 800faa8:	f04f 0100 	mov.w	r1, #0
 800faac:	0299      	lsls	r1, r3, #10
 800faae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800fab2:	0290      	lsls	r0, r2, #10
 800fab4:	4602      	mov	r2, r0
 800fab6:	460b      	mov	r3, r1
 800fab8:	4610      	mov	r0, r2
 800faba:	4619      	mov	r1, r3
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	461a      	mov	r2, r3
 800fac0:	f04f 0300 	mov.w	r3, #0
 800fac4:	f7f1 f8f8 	bl	8000cb8 <__aeabi_uldivmod>
 800fac8:	4602      	mov	r2, r0
 800faca:	460b      	mov	r3, r1
 800facc:	4613      	mov	r3, r2
 800face:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800fad0:	4b0a      	ldr	r3, [pc, #40]	; (800fafc <HAL_RCC_GetSysClockFreq+0x160>)
 800fad2:	685b      	ldr	r3, [r3, #4]
 800fad4:	0c1b      	lsrs	r3, r3, #16
 800fad6:	f003 0303 	and.w	r3, r3, #3
 800fada:	3301      	adds	r3, #1
 800fadc:	005b      	lsls	r3, r3, #1
 800fade:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800fae0:	68fa      	ldr	r2, [r7, #12]
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	fbb2 f3f3 	udiv	r3, r2, r3
 800fae8:	60bb      	str	r3, [r7, #8]
      break;
 800faea:	e002      	b.n	800faf2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800faec:	4b04      	ldr	r3, [pc, #16]	; (800fb00 <HAL_RCC_GetSysClockFreq+0x164>)
 800faee:	60bb      	str	r3, [r7, #8]
      break;
 800faf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800faf2:	68bb      	ldr	r3, [r7, #8]
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	3710      	adds	r7, #16
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bdb0      	pop	{r4, r5, r7, pc}
 800fafc:	40023800 	.word	0x40023800
 800fb00:	00f42400 	.word	0x00f42400
 800fb04:	017d7840 	.word	0x017d7840

0800fb08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800fb0c:	4b03      	ldr	r3, [pc, #12]	; (800fb1c <HAL_RCC_GetHCLKFreq+0x14>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
}
 800fb10:	4618      	mov	r0, r3
 800fb12:	46bd      	mov	sp, r7
 800fb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb18:	4770      	bx	lr
 800fb1a:	bf00      	nop
 800fb1c:	20000038 	.word	0x20000038

0800fb20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800fb24:	f7ff fff0 	bl	800fb08 <HAL_RCC_GetHCLKFreq>
 800fb28:	4602      	mov	r2, r0
 800fb2a:	4b05      	ldr	r3, [pc, #20]	; (800fb40 <HAL_RCC_GetPCLK1Freq+0x20>)
 800fb2c:	689b      	ldr	r3, [r3, #8]
 800fb2e:	0a9b      	lsrs	r3, r3, #10
 800fb30:	f003 0307 	and.w	r3, r3, #7
 800fb34:	4903      	ldr	r1, [pc, #12]	; (800fb44 <HAL_RCC_GetPCLK1Freq+0x24>)
 800fb36:	5ccb      	ldrb	r3, [r1, r3]
 800fb38:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	bd80      	pop	{r7, pc}
 800fb40:	40023800 	.word	0x40023800
 800fb44:	08027aa4 	.word	0x08027aa4

0800fb48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800fb4c:	f7ff ffdc 	bl	800fb08 <HAL_RCC_GetHCLKFreq>
 800fb50:	4602      	mov	r2, r0
 800fb52:	4b05      	ldr	r3, [pc, #20]	; (800fb68 <HAL_RCC_GetPCLK2Freq+0x20>)
 800fb54:	689b      	ldr	r3, [r3, #8]
 800fb56:	0b5b      	lsrs	r3, r3, #13
 800fb58:	f003 0307 	and.w	r3, r3, #7
 800fb5c:	4903      	ldr	r1, [pc, #12]	; (800fb6c <HAL_RCC_GetPCLK2Freq+0x24>)
 800fb5e:	5ccb      	ldrb	r3, [r1, r3]
 800fb60:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	bd80      	pop	{r7, pc}
 800fb68:	40023800 	.word	0x40023800
 800fb6c:	08027aa4 	.word	0x08027aa4

0800fb70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b082      	sub	sp, #8
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d101      	bne.n	800fb82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fb7e:	2301      	movs	r3, #1
 800fb80:	e07b      	b.n	800fc7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d108      	bne.n	800fb9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	685b      	ldr	r3, [r3, #4]
 800fb8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fb92:	d009      	beq.n	800fba8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2200      	movs	r2, #0
 800fb98:	61da      	str	r2, [r3, #28]
 800fb9a:	e005      	b.n	800fba8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2200      	movs	r2, #0
 800fba0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2200      	movs	r2, #0
 800fba6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	2200      	movs	r2, #0
 800fbac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fbb4:	b2db      	uxtb	r3, r3
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d106      	bne.n	800fbc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f7fa fb04 	bl	800a1d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2202      	movs	r2, #2
 800fbcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	681a      	ldr	r2, [r3, #0]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fbde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	689b      	ldr	r3, [r3, #8]
 800fbec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800fbf0:	431a      	orrs	r2, r3
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	68db      	ldr	r3, [r3, #12]
 800fbf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fbfa:	431a      	orrs	r2, r3
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	691b      	ldr	r3, [r3, #16]
 800fc00:	f003 0302 	and.w	r3, r3, #2
 800fc04:	431a      	orrs	r2, r3
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	695b      	ldr	r3, [r3, #20]
 800fc0a:	f003 0301 	and.w	r3, r3, #1
 800fc0e:	431a      	orrs	r2, r3
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	699b      	ldr	r3, [r3, #24]
 800fc14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fc18:	431a      	orrs	r2, r3
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	69db      	ldr	r3, [r3, #28]
 800fc1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fc22:	431a      	orrs	r2, r3
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	6a1b      	ldr	r3, [r3, #32]
 800fc28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc2c:	ea42 0103 	orr.w	r1, r2, r3
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	430a      	orrs	r2, r1
 800fc3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	699b      	ldr	r3, [r3, #24]
 800fc44:	0c1b      	lsrs	r3, r3, #16
 800fc46:	f003 0104 	and.w	r1, r3, #4
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc4e:	f003 0210 	and.w	r2, r3, #16
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	430a      	orrs	r2, r1
 800fc58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	69da      	ldr	r2, [r3, #28]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fc68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2201      	movs	r2, #1
 800fc74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800fc78:	2300      	movs	r3, #0
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3708      	adds	r7, #8
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}

0800fc82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800fc82:	b580      	push	{r7, lr}
 800fc84:	b08c      	sub	sp, #48	; 0x30
 800fc86:	af00      	add	r7, sp, #0
 800fc88:	60f8      	str	r0, [r7, #12]
 800fc8a:	60b9      	str	r1, [r7, #8]
 800fc8c:	607a      	str	r2, [r7, #4]
 800fc8e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800fc90:	2301      	movs	r3, #1
 800fc92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800fc94:	2300      	movs	r3, #0
 800fc96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fca0:	2b01      	cmp	r3, #1
 800fca2:	d101      	bne.n	800fca8 <HAL_SPI_TransmitReceive+0x26>
 800fca4:	2302      	movs	r3, #2
 800fca6:	e18a      	b.n	800ffbe <HAL_SPI_TransmitReceive+0x33c>
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	2201      	movs	r2, #1
 800fcac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fcb0:	f7fb fa4a 	bl	800b148 <HAL_GetTick>
 800fcb4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fcbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	685b      	ldr	r3, [r3, #4]
 800fcc4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800fcc6:	887b      	ldrh	r3, [r7, #2]
 800fcc8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800fcca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fcce:	2b01      	cmp	r3, #1
 800fcd0:	d00f      	beq.n	800fcf2 <HAL_SPI_TransmitReceive+0x70>
 800fcd2:	69fb      	ldr	r3, [r7, #28]
 800fcd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fcd8:	d107      	bne.n	800fcea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	689b      	ldr	r3, [r3, #8]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d103      	bne.n	800fcea <HAL_SPI_TransmitReceive+0x68>
 800fce2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fce6:	2b04      	cmp	r3, #4
 800fce8:	d003      	beq.n	800fcf2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800fcea:	2302      	movs	r3, #2
 800fcec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800fcf0:	e15b      	b.n	800ffaa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d005      	beq.n	800fd04 <HAL_SPI_TransmitReceive+0x82>
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d002      	beq.n	800fd04 <HAL_SPI_TransmitReceive+0x82>
 800fcfe:	887b      	ldrh	r3, [r7, #2]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d103      	bne.n	800fd0c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800fd04:	2301      	movs	r3, #1
 800fd06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800fd0a:	e14e      	b.n	800ffaa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fd12:	b2db      	uxtb	r3, r3
 800fd14:	2b04      	cmp	r3, #4
 800fd16:	d003      	beq.n	800fd20 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	2205      	movs	r2, #5
 800fd1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	2200      	movs	r2, #0
 800fd24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	687a      	ldr	r2, [r7, #4]
 800fd2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	887a      	ldrh	r2, [r7, #2]
 800fd30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	887a      	ldrh	r2, [r7, #2]
 800fd36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	68ba      	ldr	r2, [r7, #8]
 800fd3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	887a      	ldrh	r2, [r7, #2]
 800fd42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	887a      	ldrh	r2, [r7, #2]
 800fd48:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2200      	movs	r2, #0
 800fd54:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd60:	2b40      	cmp	r3, #64	; 0x40
 800fd62:	d007      	beq.n	800fd74 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	681a      	ldr	r2, [r3, #0]
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	68db      	ldr	r3, [r3, #12]
 800fd78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd7c:	d178      	bne.n	800fe70 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d002      	beq.n	800fd8c <HAL_SPI_TransmitReceive+0x10a>
 800fd86:	8b7b      	ldrh	r3, [r7, #26]
 800fd88:	2b01      	cmp	r3, #1
 800fd8a:	d166      	bne.n	800fe5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd90:	881a      	ldrh	r2, [r3, #0]
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd9c:	1c9a      	adds	r2, r3, #2
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fda6:	b29b      	uxth	r3, r3
 800fda8:	3b01      	subs	r3, #1
 800fdaa:	b29a      	uxth	r2, r3
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fdb0:	e053      	b.n	800fe5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	689b      	ldr	r3, [r3, #8]
 800fdb8:	f003 0302 	and.w	r3, r3, #2
 800fdbc:	2b02      	cmp	r3, #2
 800fdbe:	d11b      	bne.n	800fdf8 <HAL_SPI_TransmitReceive+0x176>
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fdc4:	b29b      	uxth	r3, r3
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d016      	beq.n	800fdf8 <HAL_SPI_TransmitReceive+0x176>
 800fdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdcc:	2b01      	cmp	r3, #1
 800fdce:	d113      	bne.n	800fdf8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdd4:	881a      	ldrh	r2, [r3, #0]
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fde0:	1c9a      	adds	r2, r3, #2
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fdea:	b29b      	uxth	r3, r3
 800fdec:	3b01      	subs	r3, #1
 800fdee:	b29a      	uxth	r2, r3
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	689b      	ldr	r3, [r3, #8]
 800fdfe:	f003 0301 	and.w	r3, r3, #1
 800fe02:	2b01      	cmp	r3, #1
 800fe04:	d119      	bne.n	800fe3a <HAL_SPI_TransmitReceive+0x1b8>
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fe0a:	b29b      	uxth	r3, r3
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d014      	beq.n	800fe3a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	68da      	ldr	r2, [r3, #12]
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe1a:	b292      	uxth	r2, r2
 800fe1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe22:	1c9a      	adds	r2, r3, #2
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fe2c:	b29b      	uxth	r3, r3
 800fe2e:	3b01      	subs	r3, #1
 800fe30:	b29a      	uxth	r2, r3
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fe36:	2301      	movs	r3, #1
 800fe38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800fe3a:	f7fb f985 	bl	800b148 <HAL_GetTick>
 800fe3e:	4602      	mov	r2, r0
 800fe40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe42:	1ad3      	subs	r3, r2, r3
 800fe44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d807      	bhi.n	800fe5a <HAL_SPI_TransmitReceive+0x1d8>
 800fe4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe50:	d003      	beq.n	800fe5a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800fe52:	2303      	movs	r3, #3
 800fe54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800fe58:	e0a7      	b.n	800ffaa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fe5e:	b29b      	uxth	r3, r3
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d1a6      	bne.n	800fdb2 <HAL_SPI_TransmitReceive+0x130>
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fe68:	b29b      	uxth	r3, r3
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d1a1      	bne.n	800fdb2 <HAL_SPI_TransmitReceive+0x130>
 800fe6e:	e07c      	b.n	800ff6a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	685b      	ldr	r3, [r3, #4]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d002      	beq.n	800fe7e <HAL_SPI_TransmitReceive+0x1fc>
 800fe78:	8b7b      	ldrh	r3, [r7, #26]
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d16b      	bne.n	800ff56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	330c      	adds	r3, #12
 800fe88:	7812      	ldrb	r2, [r2, #0]
 800fe8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe90:	1c5a      	adds	r2, r3, #1
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fe9a:	b29b      	uxth	r3, r3
 800fe9c:	3b01      	subs	r3, #1
 800fe9e:	b29a      	uxth	r2, r3
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fea4:	e057      	b.n	800ff56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	689b      	ldr	r3, [r3, #8]
 800feac:	f003 0302 	and.w	r3, r3, #2
 800feb0:	2b02      	cmp	r3, #2
 800feb2:	d11c      	bne.n	800feee <HAL_SPI_TransmitReceive+0x26c>
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800feb8:	b29b      	uxth	r3, r3
 800feba:	2b00      	cmp	r3, #0
 800febc:	d017      	beq.n	800feee <HAL_SPI_TransmitReceive+0x26c>
 800febe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec0:	2b01      	cmp	r3, #1
 800fec2:	d114      	bne.n	800feee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	330c      	adds	r3, #12
 800fece:	7812      	ldrb	r2, [r2, #0]
 800fed0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fed6:	1c5a      	adds	r2, r3, #1
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fee0:	b29b      	uxth	r3, r3
 800fee2:	3b01      	subs	r3, #1
 800fee4:	b29a      	uxth	r2, r3
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800feea:	2300      	movs	r3, #0
 800feec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	689b      	ldr	r3, [r3, #8]
 800fef4:	f003 0301 	and.w	r3, r3, #1
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d119      	bne.n	800ff30 <HAL_SPI_TransmitReceive+0x2ae>
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ff00:	b29b      	uxth	r3, r3
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d014      	beq.n	800ff30 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	68da      	ldr	r2, [r3, #12]
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff10:	b2d2      	uxtb	r2, r2
 800ff12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff18:	1c5a      	adds	r2, r3, #1
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ff22:	b29b      	uxth	r3, r3
 800ff24:	3b01      	subs	r3, #1
 800ff26:	b29a      	uxth	r2, r3
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ff30:	f7fb f90a 	bl	800b148 <HAL_GetTick>
 800ff34:	4602      	mov	r2, r0
 800ff36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff38:	1ad3      	subs	r3, r2, r3
 800ff3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	d803      	bhi.n	800ff48 <HAL_SPI_TransmitReceive+0x2c6>
 800ff40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff46:	d102      	bne.n	800ff4e <HAL_SPI_TransmitReceive+0x2cc>
 800ff48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d103      	bne.n	800ff56 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ff4e:	2303      	movs	r3, #3
 800ff50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ff54:	e029      	b.n	800ffaa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ff5a:	b29b      	uxth	r3, r3
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d1a2      	bne.n	800fea6 <HAL_SPI_TransmitReceive+0x224>
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ff64:	b29b      	uxth	r3, r3
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d19d      	bne.n	800fea6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ff6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff6e:	68f8      	ldr	r0, [r7, #12]
 800ff70:	f000 f9d0 	bl	8010314 <SPI_EndRxTxTransaction>
 800ff74:	4603      	mov	r3, r0
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d006      	beq.n	800ff88 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	2220      	movs	r2, #32
 800ff84:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ff86:	e010      	b.n	800ffaa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	689b      	ldr	r3, [r3, #8]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d10b      	bne.n	800ffa8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ff90:	2300      	movs	r3, #0
 800ff92:	617b      	str	r3, [r7, #20]
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	68db      	ldr	r3, [r3, #12]
 800ff9a:	617b      	str	r3, [r7, #20]
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	689b      	ldr	r3, [r3, #8]
 800ffa2:	617b      	str	r3, [r7, #20]
 800ffa4:	697b      	ldr	r3, [r7, #20]
 800ffa6:	e000      	b.n	800ffaa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ffa8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	2201      	movs	r2, #1
 800ffae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ffba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3730      	adds	r7, #48	; 0x30
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
	...

0800ffc8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b088      	sub	sp, #32
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	685b      	ldr	r3, [r3, #4]
 800ffd6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	689b      	ldr	r3, [r3, #8]
 800ffde:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ffe0:	69bb      	ldr	r3, [r7, #24]
 800ffe2:	099b      	lsrs	r3, r3, #6
 800ffe4:	f003 0301 	and.w	r3, r3, #1
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d10f      	bne.n	801000c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ffec:	69bb      	ldr	r3, [r7, #24]
 800ffee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d00a      	beq.n	801000c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800fff6:	69fb      	ldr	r3, [r7, #28]
 800fff8:	099b      	lsrs	r3, r3, #6
 800fffa:	f003 0301 	and.w	r3, r3, #1
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d004      	beq.n	801000c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010006:	6878      	ldr	r0, [r7, #4]
 8010008:	4798      	blx	r3
    return;
 801000a:	e0d7      	b.n	80101bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 801000c:	69bb      	ldr	r3, [r7, #24]
 801000e:	085b      	lsrs	r3, r3, #1
 8010010:	f003 0301 	and.w	r3, r3, #1
 8010014:	2b00      	cmp	r3, #0
 8010016:	d00a      	beq.n	801002e <HAL_SPI_IRQHandler+0x66>
 8010018:	69fb      	ldr	r3, [r7, #28]
 801001a:	09db      	lsrs	r3, r3, #7
 801001c:	f003 0301 	and.w	r3, r3, #1
 8010020:	2b00      	cmp	r3, #0
 8010022:	d004      	beq.n	801002e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	4798      	blx	r3
    return;
 801002c:	e0c6      	b.n	80101bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801002e:	69bb      	ldr	r3, [r7, #24]
 8010030:	095b      	lsrs	r3, r3, #5
 8010032:	f003 0301 	and.w	r3, r3, #1
 8010036:	2b00      	cmp	r3, #0
 8010038:	d10c      	bne.n	8010054 <HAL_SPI_IRQHandler+0x8c>
 801003a:	69bb      	ldr	r3, [r7, #24]
 801003c:	099b      	lsrs	r3, r3, #6
 801003e:	f003 0301 	and.w	r3, r3, #1
 8010042:	2b00      	cmp	r3, #0
 8010044:	d106      	bne.n	8010054 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8010046:	69bb      	ldr	r3, [r7, #24]
 8010048:	0a1b      	lsrs	r3, r3, #8
 801004a:	f003 0301 	and.w	r3, r3, #1
 801004e:	2b00      	cmp	r3, #0
 8010050:	f000 80b4 	beq.w	80101bc <HAL_SPI_IRQHandler+0x1f4>
 8010054:	69fb      	ldr	r3, [r7, #28]
 8010056:	095b      	lsrs	r3, r3, #5
 8010058:	f003 0301 	and.w	r3, r3, #1
 801005c:	2b00      	cmp	r3, #0
 801005e:	f000 80ad 	beq.w	80101bc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8010062:	69bb      	ldr	r3, [r7, #24]
 8010064:	099b      	lsrs	r3, r3, #6
 8010066:	f003 0301 	and.w	r3, r3, #1
 801006a:	2b00      	cmp	r3, #0
 801006c:	d023      	beq.n	80100b6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010074:	b2db      	uxtb	r3, r3
 8010076:	2b03      	cmp	r3, #3
 8010078:	d011      	beq.n	801009e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801007e:	f043 0204 	orr.w	r2, r3, #4
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010086:	2300      	movs	r3, #0
 8010088:	617b      	str	r3, [r7, #20]
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	68db      	ldr	r3, [r3, #12]
 8010090:	617b      	str	r3, [r7, #20]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	689b      	ldr	r3, [r3, #8]
 8010098:	617b      	str	r3, [r7, #20]
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	e00b      	b.n	80100b6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801009e:	2300      	movs	r3, #0
 80100a0:	613b      	str	r3, [r7, #16]
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	68db      	ldr	r3, [r3, #12]
 80100a8:	613b      	str	r3, [r7, #16]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	689b      	ldr	r3, [r3, #8]
 80100b0:	613b      	str	r3, [r7, #16]
 80100b2:	693b      	ldr	r3, [r7, #16]
        return;
 80100b4:	e082      	b.n	80101bc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80100b6:	69bb      	ldr	r3, [r7, #24]
 80100b8:	095b      	lsrs	r3, r3, #5
 80100ba:	f003 0301 	and.w	r3, r3, #1
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d014      	beq.n	80100ec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100c6:	f043 0201 	orr.w	r2, r3, #1
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80100ce:	2300      	movs	r3, #0
 80100d0:	60fb      	str	r3, [r7, #12]
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	689b      	ldr	r3, [r3, #8]
 80100d8:	60fb      	str	r3, [r7, #12]
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	681a      	ldr	r2, [r3, #0]
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80100e8:	601a      	str	r2, [r3, #0]
 80100ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80100ec:	69bb      	ldr	r3, [r7, #24]
 80100ee:	0a1b      	lsrs	r3, r3, #8
 80100f0:	f003 0301 	and.w	r3, r3, #1
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d00c      	beq.n	8010112 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100fc:	f043 0208 	orr.w	r2, r3, #8
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010104:	2300      	movs	r3, #0
 8010106:	60bb      	str	r3, [r7, #8]
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	689b      	ldr	r3, [r3, #8]
 801010e:	60bb      	str	r3, [r7, #8]
 8010110:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010116:	2b00      	cmp	r3, #0
 8010118:	d04f      	beq.n	80101ba <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	685a      	ldr	r2, [r3, #4]
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010128:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2201      	movs	r2, #1
 801012e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8010132:	69fb      	ldr	r3, [r7, #28]
 8010134:	f003 0302 	and.w	r3, r3, #2
 8010138:	2b00      	cmp	r3, #0
 801013a:	d104      	bne.n	8010146 <HAL_SPI_IRQHandler+0x17e>
 801013c:	69fb      	ldr	r3, [r7, #28]
 801013e:	f003 0301 	and.w	r3, r3, #1
 8010142:	2b00      	cmp	r3, #0
 8010144:	d034      	beq.n	80101b0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	685a      	ldr	r2, [r3, #4]
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	f022 0203 	bic.w	r2, r2, #3
 8010154:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801015a:	2b00      	cmp	r3, #0
 801015c:	d011      	beq.n	8010182 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010162:	4a18      	ldr	r2, [pc, #96]	; (80101c4 <HAL_SPI_IRQHandler+0x1fc>)
 8010164:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801016a:	4618      	mov	r0, r3
 801016c:	f7fb fb32 	bl	800b7d4 <HAL_DMA_Abort_IT>
 8010170:	4603      	mov	r3, r0
 8010172:	2b00      	cmp	r3, #0
 8010174:	d005      	beq.n	8010182 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801017a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010186:	2b00      	cmp	r3, #0
 8010188:	d016      	beq.n	80101b8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801018e:	4a0d      	ldr	r2, [pc, #52]	; (80101c4 <HAL_SPI_IRQHandler+0x1fc>)
 8010190:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010196:	4618      	mov	r0, r3
 8010198:	f7fb fb1c 	bl	800b7d4 <HAL_DMA_Abort_IT>
 801019c:	4603      	mov	r3, r0
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d00a      	beq.n	80101b8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80101ae:	e003      	b.n	80101b8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f000 f809 	bl	80101c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80101b6:	e000      	b.n	80101ba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80101b8:	bf00      	nop
    return;
 80101ba:	bf00      	nop
  }
}
 80101bc:	3720      	adds	r7, #32
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
 80101c2:	bf00      	nop
 80101c4:	080101dd 	.word	0x080101dd

080101c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80101c8:	b480      	push	{r7}
 80101ca:	b083      	sub	sp, #12
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80101d0:	bf00      	nop
 80101d2:	370c      	adds	r7, #12
 80101d4:	46bd      	mov	sp, r7
 80101d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101da:	4770      	bx	lr

080101dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b084      	sub	sp, #16
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	2200      	movs	r2, #0
 80101ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	2200      	movs	r2, #0
 80101f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80101f6:	68f8      	ldr	r0, [r7, #12]
 80101f8:	f7ff ffe6 	bl	80101c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80101fc:	bf00      	nop
 80101fe:	3710      	adds	r7, #16
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}

08010204 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b088      	sub	sp, #32
 8010208:	af00      	add	r7, sp, #0
 801020a:	60f8      	str	r0, [r7, #12]
 801020c:	60b9      	str	r1, [r7, #8]
 801020e:	603b      	str	r3, [r7, #0]
 8010210:	4613      	mov	r3, r2
 8010212:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010214:	f7fa ff98 	bl	800b148 <HAL_GetTick>
 8010218:	4602      	mov	r2, r0
 801021a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801021c:	1a9b      	subs	r3, r3, r2
 801021e:	683a      	ldr	r2, [r7, #0]
 8010220:	4413      	add	r3, r2
 8010222:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8010224:	f7fa ff90 	bl	800b148 <HAL_GetTick>
 8010228:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801022a:	4b39      	ldr	r3, [pc, #228]	; (8010310 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	015b      	lsls	r3, r3, #5
 8010230:	0d1b      	lsrs	r3, r3, #20
 8010232:	69fa      	ldr	r2, [r7, #28]
 8010234:	fb02 f303 	mul.w	r3, r2, r3
 8010238:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801023a:	e054      	b.n	80102e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010242:	d050      	beq.n	80102e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010244:	f7fa ff80 	bl	800b148 <HAL_GetTick>
 8010248:	4602      	mov	r2, r0
 801024a:	69bb      	ldr	r3, [r7, #24]
 801024c:	1ad3      	subs	r3, r2, r3
 801024e:	69fa      	ldr	r2, [r7, #28]
 8010250:	429a      	cmp	r2, r3
 8010252:	d902      	bls.n	801025a <SPI_WaitFlagStateUntilTimeout+0x56>
 8010254:	69fb      	ldr	r3, [r7, #28]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d13d      	bne.n	80102d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	685a      	ldr	r2, [r3, #4]
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010268:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	685b      	ldr	r3, [r3, #4]
 801026e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010272:	d111      	bne.n	8010298 <SPI_WaitFlagStateUntilTimeout+0x94>
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	689b      	ldr	r3, [r3, #8]
 8010278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801027c:	d004      	beq.n	8010288 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	689b      	ldr	r3, [r3, #8]
 8010282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010286:	d107      	bne.n	8010298 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	681a      	ldr	r2, [r3, #0]
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010296:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801029c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80102a0:	d10f      	bne.n	80102c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	681a      	ldr	r2, [r3, #0]
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80102b0:	601a      	str	r2, [r3, #0]
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	681a      	ldr	r2, [r3, #0]
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80102c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	2201      	movs	r2, #1
 80102c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	2200      	movs	r2, #0
 80102ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80102d2:	2303      	movs	r3, #3
 80102d4:	e017      	b.n	8010306 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d101      	bne.n	80102e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80102dc:	2300      	movs	r3, #0
 80102de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	3b01      	subs	r3, #1
 80102e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	689a      	ldr	r2, [r3, #8]
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	4013      	ands	r3, r2
 80102f0:	68ba      	ldr	r2, [r7, #8]
 80102f2:	429a      	cmp	r2, r3
 80102f4:	bf0c      	ite	eq
 80102f6:	2301      	moveq	r3, #1
 80102f8:	2300      	movne	r3, #0
 80102fa:	b2db      	uxtb	r3, r3
 80102fc:	461a      	mov	r2, r3
 80102fe:	79fb      	ldrb	r3, [r7, #7]
 8010300:	429a      	cmp	r2, r3
 8010302:	d19b      	bne.n	801023c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8010304:	2300      	movs	r3, #0
}
 8010306:	4618      	mov	r0, r3
 8010308:	3720      	adds	r7, #32
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}
 801030e:	bf00      	nop
 8010310:	20000038 	.word	0x20000038

08010314 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b088      	sub	sp, #32
 8010318:	af02      	add	r7, sp, #8
 801031a:	60f8      	str	r0, [r7, #12]
 801031c:	60b9      	str	r1, [r7, #8]
 801031e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010320:	4b1b      	ldr	r3, [pc, #108]	; (8010390 <SPI_EndRxTxTransaction+0x7c>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	4a1b      	ldr	r2, [pc, #108]	; (8010394 <SPI_EndRxTxTransaction+0x80>)
 8010326:	fba2 2303 	umull	r2, r3, r2, r3
 801032a:	0d5b      	lsrs	r3, r3, #21
 801032c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010330:	fb02 f303 	mul.w	r3, r2, r3
 8010334:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	685b      	ldr	r3, [r3, #4]
 801033a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801033e:	d112      	bne.n	8010366 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	9300      	str	r3, [sp, #0]
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	2200      	movs	r2, #0
 8010348:	2180      	movs	r1, #128	; 0x80
 801034a:	68f8      	ldr	r0, [r7, #12]
 801034c:	f7ff ff5a 	bl	8010204 <SPI_WaitFlagStateUntilTimeout>
 8010350:	4603      	mov	r3, r0
 8010352:	2b00      	cmp	r3, #0
 8010354:	d016      	beq.n	8010384 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801035a:	f043 0220 	orr.w	r2, r3, #32
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8010362:	2303      	movs	r3, #3
 8010364:	e00f      	b.n	8010386 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d00a      	beq.n	8010382 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	3b01      	subs	r3, #1
 8010370:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	689b      	ldr	r3, [r3, #8]
 8010378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801037c:	2b80      	cmp	r3, #128	; 0x80
 801037e:	d0f2      	beq.n	8010366 <SPI_EndRxTxTransaction+0x52>
 8010380:	e000      	b.n	8010384 <SPI_EndRxTxTransaction+0x70>
        break;
 8010382:	bf00      	nop
  }

  return HAL_OK;
 8010384:	2300      	movs	r3, #0
}
 8010386:	4618      	mov	r0, r3
 8010388:	3718      	adds	r7, #24
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}
 801038e:	bf00      	nop
 8010390:	20000038 	.word	0x20000038
 8010394:	165e9f81 	.word	0x165e9f81

08010398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b082      	sub	sp, #8
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d101      	bne.n	80103aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80103a6:	2301      	movs	r3, #1
 80103a8:	e041      	b.n	801042e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80103b0:	b2db      	uxtb	r3, r3
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d106      	bne.n	80103c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2200      	movs	r2, #0
 80103ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80103be:	6878      	ldr	r0, [r7, #4]
 80103c0:	f7fa fa84 	bl	800a8cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2202      	movs	r2, #2
 80103c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681a      	ldr	r2, [r3, #0]
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	3304      	adds	r3, #4
 80103d4:	4619      	mov	r1, r3
 80103d6:	4610      	mov	r0, r2
 80103d8:	f000 fb24 	bl	8010a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2201      	movs	r2, #1
 80103e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2201      	movs	r2, #1
 80103e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2201      	movs	r2, #1
 80103f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2201      	movs	r2, #1
 80103f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2201      	movs	r2, #1
 8010400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2201      	movs	r2, #1
 8010408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2201      	movs	r2, #1
 8010410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2201      	movs	r2, #1
 8010418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2201      	movs	r2, #1
 8010420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2201      	movs	r2, #1
 8010428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801042c:	2300      	movs	r3, #0
}
 801042e:	4618      	mov	r0, r3
 8010430:	3708      	adds	r7, #8
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}
	...

08010438 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010438:	b480      	push	{r7}
 801043a:	b085      	sub	sp, #20
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010446:	b2db      	uxtb	r3, r3
 8010448:	2b01      	cmp	r3, #1
 801044a:	d001      	beq.n	8010450 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801044c:	2301      	movs	r3, #1
 801044e:	e044      	b.n	80104da <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2202      	movs	r2, #2
 8010454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	68da      	ldr	r2, [r3, #12]
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	f042 0201 	orr.w	r2, r2, #1
 8010466:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	4a1e      	ldr	r2, [pc, #120]	; (80104e8 <HAL_TIM_Base_Start_IT+0xb0>)
 801046e:	4293      	cmp	r3, r2
 8010470:	d018      	beq.n	80104a4 <HAL_TIM_Base_Start_IT+0x6c>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801047a:	d013      	beq.n	80104a4 <HAL_TIM_Base_Start_IT+0x6c>
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	4a1a      	ldr	r2, [pc, #104]	; (80104ec <HAL_TIM_Base_Start_IT+0xb4>)
 8010482:	4293      	cmp	r3, r2
 8010484:	d00e      	beq.n	80104a4 <HAL_TIM_Base_Start_IT+0x6c>
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	4a19      	ldr	r2, [pc, #100]	; (80104f0 <HAL_TIM_Base_Start_IT+0xb8>)
 801048c:	4293      	cmp	r3, r2
 801048e:	d009      	beq.n	80104a4 <HAL_TIM_Base_Start_IT+0x6c>
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	4a17      	ldr	r2, [pc, #92]	; (80104f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8010496:	4293      	cmp	r3, r2
 8010498:	d004      	beq.n	80104a4 <HAL_TIM_Base_Start_IT+0x6c>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	4a16      	ldr	r2, [pc, #88]	; (80104f8 <HAL_TIM_Base_Start_IT+0xc0>)
 80104a0:	4293      	cmp	r3, r2
 80104a2:	d111      	bne.n	80104c8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	689b      	ldr	r3, [r3, #8]
 80104aa:	f003 0307 	and.w	r3, r3, #7
 80104ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	2b06      	cmp	r3, #6
 80104b4:	d010      	beq.n	80104d8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	681a      	ldr	r2, [r3, #0]
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	f042 0201 	orr.w	r2, r2, #1
 80104c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80104c6:	e007      	b.n	80104d8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	681a      	ldr	r2, [r3, #0]
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	f042 0201 	orr.w	r2, r2, #1
 80104d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80104d8:	2300      	movs	r3, #0
}
 80104da:	4618      	mov	r0, r3
 80104dc:	3714      	adds	r7, #20
 80104de:	46bd      	mov	sp, r7
 80104e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e4:	4770      	bx	lr
 80104e6:	bf00      	nop
 80104e8:	40010000 	.word	0x40010000
 80104ec:	40000400 	.word	0x40000400
 80104f0:	40000800 	.word	0x40000800
 80104f4:	40000c00 	.word	0x40000c00
 80104f8:	40014000 	.word	0x40014000

080104fc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80104fc:	b480      	push	{r7}
 80104fe:	b083      	sub	sp, #12
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	68da      	ldr	r2, [r3, #12]
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f022 0201 	bic.w	r2, r2, #1
 8010512:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	6a1a      	ldr	r2, [r3, #32]
 801051a:	f241 1311 	movw	r3, #4369	; 0x1111
 801051e:	4013      	ands	r3, r2
 8010520:	2b00      	cmp	r3, #0
 8010522:	d10f      	bne.n	8010544 <HAL_TIM_Base_Stop_IT+0x48>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	6a1a      	ldr	r2, [r3, #32]
 801052a:	f240 4344 	movw	r3, #1092	; 0x444
 801052e:	4013      	ands	r3, r2
 8010530:	2b00      	cmp	r3, #0
 8010532:	d107      	bne.n	8010544 <HAL_TIM_Base_Stop_IT+0x48>
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	681a      	ldr	r2, [r3, #0]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	f022 0201 	bic.w	r2, r2, #1
 8010542:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2201      	movs	r2, #1
 8010548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801054c:	2300      	movs	r3, #0
}
 801054e:	4618      	mov	r0, r3
 8010550:	370c      	adds	r7, #12
 8010552:	46bd      	mov	sp, r7
 8010554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010558:	4770      	bx	lr

0801055a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 801055a:	b580      	push	{r7, lr}
 801055c:	b086      	sub	sp, #24
 801055e:	af00      	add	r7, sp, #0
 8010560:	6078      	str	r0, [r7, #4]
 8010562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d101      	bne.n	801056e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 801056a:	2301      	movs	r3, #1
 801056c:	e097      	b.n	801069e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010574:	b2db      	uxtb	r3, r3
 8010576:	2b00      	cmp	r3, #0
 8010578:	d106      	bne.n	8010588 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2200      	movs	r2, #0
 801057e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	f7fa f95c 	bl	800a840 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2202      	movs	r2, #2
 801058c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	689b      	ldr	r3, [r3, #8]
 8010596:	687a      	ldr	r2, [r7, #4]
 8010598:	6812      	ldr	r2, [r2, #0]
 801059a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801059e:	f023 0307 	bic.w	r3, r3, #7
 80105a2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681a      	ldr	r2, [r3, #0]
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	3304      	adds	r3, #4
 80105ac:	4619      	mov	r1, r3
 80105ae:	4610      	mov	r0, r2
 80105b0:	f000 fa38 	bl	8010a24 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	689b      	ldr	r3, [r3, #8]
 80105ba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	699b      	ldr	r3, [r3, #24]
 80105c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	6a1b      	ldr	r3, [r3, #32]
 80105ca:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	697a      	ldr	r2, [r7, #20]
 80105d2:	4313      	orrs	r3, r2
 80105d4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80105d6:	693b      	ldr	r3, [r7, #16]
 80105d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80105dc:	f023 0303 	bic.w	r3, r3, #3
 80105e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	689a      	ldr	r2, [r3, #8]
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	699b      	ldr	r3, [r3, #24]
 80105ea:	021b      	lsls	r3, r3, #8
 80105ec:	4313      	orrs	r3, r2
 80105ee:	693a      	ldr	r2, [r7, #16]
 80105f0:	4313      	orrs	r3, r2
 80105f2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80105fa:	f023 030c 	bic.w	r3, r3, #12
 80105fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8010600:	693b      	ldr	r3, [r7, #16]
 8010602:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801060a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	68da      	ldr	r2, [r3, #12]
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	69db      	ldr	r3, [r3, #28]
 8010614:	021b      	lsls	r3, r3, #8
 8010616:	4313      	orrs	r3, r2
 8010618:	693a      	ldr	r2, [r7, #16]
 801061a:	4313      	orrs	r3, r2
 801061c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	691b      	ldr	r3, [r3, #16]
 8010622:	011a      	lsls	r2, r3, #4
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	6a1b      	ldr	r3, [r3, #32]
 8010628:	031b      	lsls	r3, r3, #12
 801062a:	4313      	orrs	r3, r2
 801062c:	693a      	ldr	r2, [r7, #16]
 801062e:	4313      	orrs	r3, r2
 8010630:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8010638:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8010640:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8010642:	683b      	ldr	r3, [r7, #0]
 8010644:	685a      	ldr	r2, [r3, #4]
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	695b      	ldr	r3, [r3, #20]
 801064a:	011b      	lsls	r3, r3, #4
 801064c:	4313      	orrs	r3, r2
 801064e:	68fa      	ldr	r2, [r7, #12]
 8010650:	4313      	orrs	r3, r2
 8010652:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	697a      	ldr	r2, [r7, #20]
 801065a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	693a      	ldr	r2, [r7, #16]
 8010662:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	68fa      	ldr	r2, [r7, #12]
 801066a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	2201      	movs	r2, #1
 8010670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	2201      	movs	r2, #1
 8010678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2201      	movs	r2, #1
 8010680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2201      	movs	r2, #1
 8010688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2201      	movs	r2, #1
 8010690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2201      	movs	r2, #1
 8010698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801069c:	2300      	movs	r3, #0
}
 801069e:	4618      	mov	r0, r3
 80106a0:	3718      	adds	r7, #24
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}

080106a6 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80106a6:	b580      	push	{r7, lr}
 80106a8:	b084      	sub	sp, #16
 80106aa:	af00      	add	r7, sp, #0
 80106ac:	6078      	str	r0, [r7, #4]
 80106ae:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80106b6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80106be:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80106c6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80106ce:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d110      	bne.n	80106f8 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80106d6:	7bfb      	ldrb	r3, [r7, #15]
 80106d8:	2b01      	cmp	r3, #1
 80106da:	d102      	bne.n	80106e2 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80106dc:	7b7b      	ldrb	r3, [r7, #13]
 80106de:	2b01      	cmp	r3, #1
 80106e0:	d001      	beq.n	80106e6 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80106e2:	2301      	movs	r3, #1
 80106e4:	e069      	b.n	80107ba <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	2202      	movs	r2, #2
 80106ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2202      	movs	r2, #2
 80106f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80106f6:	e031      	b.n	801075c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80106f8:	683b      	ldr	r3, [r7, #0]
 80106fa:	2b04      	cmp	r3, #4
 80106fc:	d110      	bne.n	8010720 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80106fe:	7bbb      	ldrb	r3, [r7, #14]
 8010700:	2b01      	cmp	r3, #1
 8010702:	d102      	bne.n	801070a <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8010704:	7b3b      	ldrb	r3, [r7, #12]
 8010706:	2b01      	cmp	r3, #1
 8010708:	d001      	beq.n	801070e <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 801070a:	2301      	movs	r3, #1
 801070c:	e055      	b.n	80107ba <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2202      	movs	r2, #2
 8010712:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	2202      	movs	r2, #2
 801071a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801071e:	e01d      	b.n	801075c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8010720:	7bfb      	ldrb	r3, [r7, #15]
 8010722:	2b01      	cmp	r3, #1
 8010724:	d108      	bne.n	8010738 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8010726:	7bbb      	ldrb	r3, [r7, #14]
 8010728:	2b01      	cmp	r3, #1
 801072a:	d105      	bne.n	8010738 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801072c:	7b7b      	ldrb	r3, [r7, #13]
 801072e:	2b01      	cmp	r3, #1
 8010730:	d102      	bne.n	8010738 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8010732:	7b3b      	ldrb	r3, [r7, #12]
 8010734:	2b01      	cmp	r3, #1
 8010736:	d001      	beq.n	801073c <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8010738:	2301      	movs	r3, #1
 801073a:	e03e      	b.n	80107ba <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2202      	movs	r2, #2
 8010740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2202      	movs	r2, #2
 8010748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2202      	movs	r2, #2
 8010750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2202      	movs	r2, #2
 8010758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d003      	beq.n	801076a <HAL_TIM_Encoder_Start+0xc4>
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	2b04      	cmp	r3, #4
 8010766:	d008      	beq.n	801077a <HAL_TIM_Encoder_Start+0xd4>
 8010768:	e00f      	b.n	801078a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	2201      	movs	r2, #1
 8010770:	2100      	movs	r1, #0
 8010772:	4618      	mov	r0, r3
 8010774:	f000 f9d6 	bl	8010b24 <TIM_CCxChannelCmd>
      break;
 8010778:	e016      	b.n	80107a8 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	2201      	movs	r2, #1
 8010780:	2104      	movs	r1, #4
 8010782:	4618      	mov	r0, r3
 8010784:	f000 f9ce 	bl	8010b24 <TIM_CCxChannelCmd>
      break;
 8010788:	e00e      	b.n	80107a8 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	2201      	movs	r2, #1
 8010790:	2100      	movs	r1, #0
 8010792:	4618      	mov	r0, r3
 8010794:	f000 f9c6 	bl	8010b24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	2201      	movs	r2, #1
 801079e:	2104      	movs	r1, #4
 80107a0:	4618      	mov	r0, r3
 80107a2:	f000 f9bf 	bl	8010b24 <TIM_CCxChannelCmd>
      break;
 80107a6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	681a      	ldr	r2, [r3, #0]
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	f042 0201 	orr.w	r2, r2, #1
 80107b6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80107b8:	2300      	movs	r3, #0
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	3710      	adds	r7, #16
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}

080107c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80107c2:	b580      	push	{r7, lr}
 80107c4:	b082      	sub	sp, #8
 80107c6:	af00      	add	r7, sp, #0
 80107c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	691b      	ldr	r3, [r3, #16]
 80107d0:	f003 0302 	and.w	r3, r3, #2
 80107d4:	2b02      	cmp	r3, #2
 80107d6:	d122      	bne.n	801081e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	68db      	ldr	r3, [r3, #12]
 80107de:	f003 0302 	and.w	r3, r3, #2
 80107e2:	2b02      	cmp	r3, #2
 80107e4:	d11b      	bne.n	801081e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	f06f 0202 	mvn.w	r2, #2
 80107ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2201      	movs	r2, #1
 80107f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	699b      	ldr	r3, [r3, #24]
 80107fc:	f003 0303 	and.w	r3, r3, #3
 8010800:	2b00      	cmp	r3, #0
 8010802:	d003      	beq.n	801080c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f000 f8ee 	bl	80109e6 <HAL_TIM_IC_CaptureCallback>
 801080a:	e005      	b.n	8010818 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	f000 f8e0 	bl	80109d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f000 f8f1 	bl	80109fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2200      	movs	r2, #0
 801081c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	691b      	ldr	r3, [r3, #16]
 8010824:	f003 0304 	and.w	r3, r3, #4
 8010828:	2b04      	cmp	r3, #4
 801082a:	d122      	bne.n	8010872 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	68db      	ldr	r3, [r3, #12]
 8010832:	f003 0304 	and.w	r3, r3, #4
 8010836:	2b04      	cmp	r3, #4
 8010838:	d11b      	bne.n	8010872 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	f06f 0204 	mvn.w	r2, #4
 8010842:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2202      	movs	r2, #2
 8010848:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	699b      	ldr	r3, [r3, #24]
 8010850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010854:	2b00      	cmp	r3, #0
 8010856:	d003      	beq.n	8010860 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f000 f8c4 	bl	80109e6 <HAL_TIM_IC_CaptureCallback>
 801085e:	e005      	b.n	801086c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f000 f8b6 	bl	80109d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010866:	6878      	ldr	r0, [r7, #4]
 8010868:	f000 f8c7 	bl	80109fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	2200      	movs	r2, #0
 8010870:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	691b      	ldr	r3, [r3, #16]
 8010878:	f003 0308 	and.w	r3, r3, #8
 801087c:	2b08      	cmp	r3, #8
 801087e:	d122      	bne.n	80108c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	68db      	ldr	r3, [r3, #12]
 8010886:	f003 0308 	and.w	r3, r3, #8
 801088a:	2b08      	cmp	r3, #8
 801088c:	d11b      	bne.n	80108c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	f06f 0208 	mvn.w	r2, #8
 8010896:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2204      	movs	r2, #4
 801089c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	69db      	ldr	r3, [r3, #28]
 80108a4:	f003 0303 	and.w	r3, r3, #3
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d003      	beq.n	80108b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f000 f89a 	bl	80109e6 <HAL_TIM_IC_CaptureCallback>
 80108b2:	e005      	b.n	80108c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f000 f88c 	bl	80109d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f000 f89d 	bl	80109fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2200      	movs	r2, #0
 80108c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	691b      	ldr	r3, [r3, #16]
 80108cc:	f003 0310 	and.w	r3, r3, #16
 80108d0:	2b10      	cmp	r3, #16
 80108d2:	d122      	bne.n	801091a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	68db      	ldr	r3, [r3, #12]
 80108da:	f003 0310 	and.w	r3, r3, #16
 80108de:	2b10      	cmp	r3, #16
 80108e0:	d11b      	bne.n	801091a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	f06f 0210 	mvn.w	r2, #16
 80108ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2208      	movs	r2, #8
 80108f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	69db      	ldr	r3, [r3, #28]
 80108f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d003      	beq.n	8010908 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010900:	6878      	ldr	r0, [r7, #4]
 8010902:	f000 f870 	bl	80109e6 <HAL_TIM_IC_CaptureCallback>
 8010906:	e005      	b.n	8010914 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010908:	6878      	ldr	r0, [r7, #4]
 801090a:	f000 f862 	bl	80109d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f000 f873 	bl	80109fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2200      	movs	r2, #0
 8010918:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	691b      	ldr	r3, [r3, #16]
 8010920:	f003 0301 	and.w	r3, r3, #1
 8010924:	2b01      	cmp	r3, #1
 8010926:	d10e      	bne.n	8010946 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	68db      	ldr	r3, [r3, #12]
 801092e:	f003 0301 	and.w	r3, r3, #1
 8010932:	2b01      	cmp	r3, #1
 8010934:	d107      	bne.n	8010946 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	f06f 0201 	mvn.w	r2, #1
 801093e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010940:	6878      	ldr	r0, [r7, #4]
 8010942:	f7f5 fc4d 	bl	80061e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	691b      	ldr	r3, [r3, #16]
 801094c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010950:	2b80      	cmp	r3, #128	; 0x80
 8010952:	d10e      	bne.n	8010972 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	68db      	ldr	r3, [r3, #12]
 801095a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801095e:	2b80      	cmp	r3, #128	; 0x80
 8010960:	d107      	bne.n	8010972 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801096a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f000 f977 	bl	8010c60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	691b      	ldr	r3, [r3, #16]
 8010978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801097c:	2b40      	cmp	r3, #64	; 0x40
 801097e:	d10e      	bne.n	801099e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	68db      	ldr	r3, [r3, #12]
 8010986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801098a:	2b40      	cmp	r3, #64	; 0x40
 801098c:	d107      	bne.n	801099e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f000 f838 	bl	8010a0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	691b      	ldr	r3, [r3, #16]
 80109a4:	f003 0320 	and.w	r3, r3, #32
 80109a8:	2b20      	cmp	r3, #32
 80109aa:	d10e      	bne.n	80109ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	68db      	ldr	r3, [r3, #12]
 80109b2:	f003 0320 	and.w	r3, r3, #32
 80109b6:	2b20      	cmp	r3, #32
 80109b8:	d107      	bne.n	80109ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	f06f 0220 	mvn.w	r2, #32
 80109c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f000 f941 	bl	8010c4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80109ca:	bf00      	nop
 80109cc:	3708      	adds	r7, #8
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}

080109d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80109d2:	b480      	push	{r7}
 80109d4:	b083      	sub	sp, #12
 80109d6:	af00      	add	r7, sp, #0
 80109d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80109da:	bf00      	nop
 80109dc:	370c      	adds	r7, #12
 80109de:	46bd      	mov	sp, r7
 80109e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e4:	4770      	bx	lr

080109e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80109e6:	b480      	push	{r7}
 80109e8:	b083      	sub	sp, #12
 80109ea:	af00      	add	r7, sp, #0
 80109ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80109ee:	bf00      	nop
 80109f0:	370c      	adds	r7, #12
 80109f2:	46bd      	mov	sp, r7
 80109f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f8:	4770      	bx	lr

080109fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80109fa:	b480      	push	{r7}
 80109fc:	b083      	sub	sp, #12
 80109fe:	af00      	add	r7, sp, #0
 8010a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010a02:	bf00      	nop
 8010a04:	370c      	adds	r7, #12
 8010a06:	46bd      	mov	sp, r7
 8010a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0c:	4770      	bx	lr

08010a0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010a0e:	b480      	push	{r7}
 8010a10:	b083      	sub	sp, #12
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010a16:	bf00      	nop
 8010a18:	370c      	adds	r7, #12
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a20:	4770      	bx	lr
	...

08010a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010a24:	b480      	push	{r7}
 8010a26:	b085      	sub	sp, #20
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
 8010a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	4a34      	ldr	r2, [pc, #208]	; (8010b08 <TIM_Base_SetConfig+0xe4>)
 8010a38:	4293      	cmp	r3, r2
 8010a3a:	d00f      	beq.n	8010a5c <TIM_Base_SetConfig+0x38>
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a42:	d00b      	beq.n	8010a5c <TIM_Base_SetConfig+0x38>
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	4a31      	ldr	r2, [pc, #196]	; (8010b0c <TIM_Base_SetConfig+0xe8>)
 8010a48:	4293      	cmp	r3, r2
 8010a4a:	d007      	beq.n	8010a5c <TIM_Base_SetConfig+0x38>
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	4a30      	ldr	r2, [pc, #192]	; (8010b10 <TIM_Base_SetConfig+0xec>)
 8010a50:	4293      	cmp	r3, r2
 8010a52:	d003      	beq.n	8010a5c <TIM_Base_SetConfig+0x38>
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	4a2f      	ldr	r2, [pc, #188]	; (8010b14 <TIM_Base_SetConfig+0xf0>)
 8010a58:	4293      	cmp	r3, r2
 8010a5a:	d108      	bne.n	8010a6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	685b      	ldr	r3, [r3, #4]
 8010a68:	68fa      	ldr	r2, [r7, #12]
 8010a6a:	4313      	orrs	r3, r2
 8010a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	4a25      	ldr	r2, [pc, #148]	; (8010b08 <TIM_Base_SetConfig+0xe4>)
 8010a72:	4293      	cmp	r3, r2
 8010a74:	d01b      	beq.n	8010aae <TIM_Base_SetConfig+0x8a>
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a7c:	d017      	beq.n	8010aae <TIM_Base_SetConfig+0x8a>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	4a22      	ldr	r2, [pc, #136]	; (8010b0c <TIM_Base_SetConfig+0xe8>)
 8010a82:	4293      	cmp	r3, r2
 8010a84:	d013      	beq.n	8010aae <TIM_Base_SetConfig+0x8a>
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	4a21      	ldr	r2, [pc, #132]	; (8010b10 <TIM_Base_SetConfig+0xec>)
 8010a8a:	4293      	cmp	r3, r2
 8010a8c:	d00f      	beq.n	8010aae <TIM_Base_SetConfig+0x8a>
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	4a20      	ldr	r2, [pc, #128]	; (8010b14 <TIM_Base_SetConfig+0xf0>)
 8010a92:	4293      	cmp	r3, r2
 8010a94:	d00b      	beq.n	8010aae <TIM_Base_SetConfig+0x8a>
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	4a1f      	ldr	r2, [pc, #124]	; (8010b18 <TIM_Base_SetConfig+0xf4>)
 8010a9a:	4293      	cmp	r3, r2
 8010a9c:	d007      	beq.n	8010aae <TIM_Base_SetConfig+0x8a>
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	4a1e      	ldr	r2, [pc, #120]	; (8010b1c <TIM_Base_SetConfig+0xf8>)
 8010aa2:	4293      	cmp	r3, r2
 8010aa4:	d003      	beq.n	8010aae <TIM_Base_SetConfig+0x8a>
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	4a1d      	ldr	r2, [pc, #116]	; (8010b20 <TIM_Base_SetConfig+0xfc>)
 8010aaa:	4293      	cmp	r3, r2
 8010aac:	d108      	bne.n	8010ac0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	68db      	ldr	r3, [r3, #12]
 8010aba:	68fa      	ldr	r2, [r7, #12]
 8010abc:	4313      	orrs	r3, r2
 8010abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	695b      	ldr	r3, [r3, #20]
 8010aca:	4313      	orrs	r3, r2
 8010acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	68fa      	ldr	r2, [r7, #12]
 8010ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	689a      	ldr	r2, [r3, #8]
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	681a      	ldr	r2, [r3, #0]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	4a08      	ldr	r2, [pc, #32]	; (8010b08 <TIM_Base_SetConfig+0xe4>)
 8010ae8:	4293      	cmp	r3, r2
 8010aea:	d103      	bne.n	8010af4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010aec:	683b      	ldr	r3, [r7, #0]
 8010aee:	691a      	ldr	r2, [r3, #16]
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2201      	movs	r2, #1
 8010af8:	615a      	str	r2, [r3, #20]
}
 8010afa:	bf00      	nop
 8010afc:	3714      	adds	r7, #20
 8010afe:	46bd      	mov	sp, r7
 8010b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b04:	4770      	bx	lr
 8010b06:	bf00      	nop
 8010b08:	40010000 	.word	0x40010000
 8010b0c:	40000400 	.word	0x40000400
 8010b10:	40000800 	.word	0x40000800
 8010b14:	40000c00 	.word	0x40000c00
 8010b18:	40014000 	.word	0x40014000
 8010b1c:	40014400 	.word	0x40014400
 8010b20:	40014800 	.word	0x40014800

08010b24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010b24:	b480      	push	{r7}
 8010b26:	b087      	sub	sp, #28
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	60f8      	str	r0, [r7, #12]
 8010b2c:	60b9      	str	r1, [r7, #8]
 8010b2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	f003 031f 	and.w	r3, r3, #31
 8010b36:	2201      	movs	r2, #1
 8010b38:	fa02 f303 	lsl.w	r3, r2, r3
 8010b3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	6a1a      	ldr	r2, [r3, #32]
 8010b42:	697b      	ldr	r3, [r7, #20]
 8010b44:	43db      	mvns	r3, r3
 8010b46:	401a      	ands	r2, r3
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	6a1a      	ldr	r2, [r3, #32]
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	f003 031f 	and.w	r3, r3, #31
 8010b56:	6879      	ldr	r1, [r7, #4]
 8010b58:	fa01 f303 	lsl.w	r3, r1, r3
 8010b5c:	431a      	orrs	r2, r3
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	621a      	str	r2, [r3, #32]
}
 8010b62:	bf00      	nop
 8010b64:	371c      	adds	r7, #28
 8010b66:	46bd      	mov	sp, r7
 8010b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6c:	4770      	bx	lr
	...

08010b70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010b70:	b480      	push	{r7}
 8010b72:	b085      	sub	sp, #20
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
 8010b78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010b80:	2b01      	cmp	r3, #1
 8010b82:	d101      	bne.n	8010b88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010b84:	2302      	movs	r3, #2
 8010b86:	e050      	b.n	8010c2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2201      	movs	r2, #1
 8010b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2202      	movs	r2, #2
 8010b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	685b      	ldr	r3, [r3, #4]
 8010b9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	689b      	ldr	r3, [r3, #8]
 8010ba6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010bae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	68fa      	ldr	r2, [r7, #12]
 8010bb6:	4313      	orrs	r3, r2
 8010bb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	68fa      	ldr	r2, [r7, #12]
 8010bc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	4a1c      	ldr	r2, [pc, #112]	; (8010c38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8010bc8:	4293      	cmp	r3, r2
 8010bca:	d018      	beq.n	8010bfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010bd4:	d013      	beq.n	8010bfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	4a18      	ldr	r2, [pc, #96]	; (8010c3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	d00e      	beq.n	8010bfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	4a16      	ldr	r2, [pc, #88]	; (8010c40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8010be6:	4293      	cmp	r3, r2
 8010be8:	d009      	beq.n	8010bfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	4a15      	ldr	r2, [pc, #84]	; (8010c44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8010bf0:	4293      	cmp	r3, r2
 8010bf2:	d004      	beq.n	8010bfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	4a13      	ldr	r2, [pc, #76]	; (8010c48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8010bfa:	4293      	cmp	r3, r2
 8010bfc:	d10c      	bne.n	8010c18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010c04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010c06:	683b      	ldr	r3, [r7, #0]
 8010c08:	685b      	ldr	r3, [r3, #4]
 8010c0a:	68ba      	ldr	r2, [r7, #8]
 8010c0c:	4313      	orrs	r3, r2
 8010c0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	68ba      	ldr	r2, [r7, #8]
 8010c16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2201      	movs	r2, #1
 8010c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2200      	movs	r2, #0
 8010c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010c28:	2300      	movs	r3, #0
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3714      	adds	r7, #20
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c34:	4770      	bx	lr
 8010c36:	bf00      	nop
 8010c38:	40010000 	.word	0x40010000
 8010c3c:	40000400 	.word	0x40000400
 8010c40:	40000800 	.word	0x40000800
 8010c44:	40000c00 	.word	0x40000c00
 8010c48:	40014000 	.word	0x40014000

08010c4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010c4c:	b480      	push	{r7}
 8010c4e:	b083      	sub	sp, #12
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010c54:	bf00      	nop
 8010c56:	370c      	adds	r7, #12
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5e:	4770      	bx	lr

08010c60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010c60:	b480      	push	{r7}
 8010c62:	b083      	sub	sp, #12
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010c68:	bf00      	nop
 8010c6a:	370c      	adds	r7, #12
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c72:	4770      	bx	lr

08010c74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d101      	bne.n	8010c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010c82:	2301      	movs	r3, #1
 8010c84:	e03f      	b.n	8010d06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010c8c:	b2db      	uxtb	r3, r3
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d106      	bne.n	8010ca0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	2200      	movs	r2, #0
 8010c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010c9a:	6878      	ldr	r0, [r7, #4]
 8010c9c:	f7fa f852 	bl	800ad44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2224      	movs	r2, #36	; 0x24
 8010ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	68da      	ldr	r2, [r3, #12]
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010cb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f000 ff53 	bl	8011b64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	691a      	ldr	r2, [r3, #16]
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010ccc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	695a      	ldr	r2, [r3, #20]
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010cdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	68da      	ldr	r2, [r3, #12]
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010cec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2220      	movs	r2, #32
 8010cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2220      	movs	r2, #32
 8010d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8010d04:	2300      	movs	r3, #0
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	3708      	adds	r7, #8
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}
	...

08010d10 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b08c      	sub	sp, #48	; 0x30
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	60f8      	str	r0, [r7, #12]
 8010d18:	60b9      	str	r1, [r7, #8]
 8010d1a:	4613      	mov	r3, r2
 8010d1c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010d24:	b2db      	uxtb	r3, r3
 8010d26:	2b20      	cmp	r3, #32
 8010d28:	d165      	bne.n	8010df6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d002      	beq.n	8010d36 <HAL_UART_Transmit_DMA+0x26>
 8010d30:	88fb      	ldrh	r3, [r7, #6]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d101      	bne.n	8010d3a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8010d36:	2301      	movs	r3, #1
 8010d38:	e05e      	b.n	8010df8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010d40:	2b01      	cmp	r3, #1
 8010d42:	d101      	bne.n	8010d48 <HAL_UART_Transmit_DMA+0x38>
 8010d44:	2302      	movs	r3, #2
 8010d46:	e057      	b.n	8010df8 <HAL_UART_Transmit_DMA+0xe8>
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	2201      	movs	r2, #1
 8010d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8010d50:	68ba      	ldr	r2, [r7, #8]
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	88fa      	ldrh	r2, [r7, #6]
 8010d5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	88fa      	ldrh	r2, [r7, #6]
 8010d60:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	2200      	movs	r2, #0
 8010d66:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	2221      	movs	r2, #33	; 0x21
 8010d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d74:	4a22      	ldr	r2, [pc, #136]	; (8010e00 <HAL_UART_Transmit_DMA+0xf0>)
 8010d76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d7c:	4a21      	ldr	r2, [pc, #132]	; (8010e04 <HAL_UART_Transmit_DMA+0xf4>)
 8010d7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d84:	4a20      	ldr	r2, [pc, #128]	; (8010e08 <HAL_UART_Transmit_DMA+0xf8>)
 8010d86:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8010d90:	f107 0308 	add.w	r3, r7, #8
 8010d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8010d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d9c:	6819      	ldr	r1, [r3, #0]
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	3304      	adds	r3, #4
 8010da4:	461a      	mov	r2, r3
 8010da6:	88fb      	ldrh	r3, [r7, #6]
 8010da8:	f7fa fc4c 	bl	800b644 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010db4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	2200      	movs	r2, #0
 8010dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	3314      	adds	r3, #20
 8010dc4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dc6:	69bb      	ldr	r3, [r7, #24]
 8010dc8:	e853 3f00 	ldrex	r3, [r3]
 8010dcc:	617b      	str	r3, [r7, #20]
   return(result);
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	3314      	adds	r3, #20
 8010ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010dde:	627a      	str	r2, [r7, #36]	; 0x24
 8010de0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010de2:	6a39      	ldr	r1, [r7, #32]
 8010de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010de6:	e841 2300 	strex	r3, r2, [r1]
 8010dea:	61fb      	str	r3, [r7, #28]
   return(result);
 8010dec:	69fb      	ldr	r3, [r7, #28]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d1e5      	bne.n	8010dbe <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8010df2:	2300      	movs	r3, #0
 8010df4:	e000      	b.n	8010df8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8010df6:	2302      	movs	r3, #2
  }
}
 8010df8:	4618      	mov	r0, r3
 8010dfa:	3730      	adds	r7, #48	; 0x30
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}
 8010e00:	08011405 	.word	0x08011405
 8010e04:	0801149f 	.word	0x0801149f
 8010e08:	08011617 	.word	0x08011617

08010e0c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b084      	sub	sp, #16
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	60f8      	str	r0, [r7, #12]
 8010e14:	60b9      	str	r1, [r7, #8]
 8010e16:	4613      	mov	r3, r2
 8010e18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010e20:	b2db      	uxtb	r3, r3
 8010e22:	2b20      	cmp	r3, #32
 8010e24:	d11d      	bne.n	8010e62 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d002      	beq.n	8010e32 <HAL_UART_Receive_DMA+0x26>
 8010e2c:	88fb      	ldrh	r3, [r7, #6]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d101      	bne.n	8010e36 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8010e32:	2301      	movs	r3, #1
 8010e34:	e016      	b.n	8010e64 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010e3c:	2b01      	cmp	r3, #1
 8010e3e:	d101      	bne.n	8010e44 <HAL_UART_Receive_DMA+0x38>
 8010e40:	2302      	movs	r3, #2
 8010e42:	e00f      	b.n	8010e64 <HAL_UART_Receive_DMA+0x58>
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	2201      	movs	r2, #1
 8010e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	2200      	movs	r2, #0
 8010e50:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010e52:	88fb      	ldrh	r3, [r7, #6]
 8010e54:	461a      	mov	r2, r3
 8010e56:	68b9      	ldr	r1, [r7, #8]
 8010e58:	68f8      	ldr	r0, [r7, #12]
 8010e5a:	f000 fc27 	bl	80116ac <UART_Start_Receive_DMA>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	e000      	b.n	8010e64 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8010e62:	2302      	movs	r3, #2
  }
}
 8010e64:	4618      	mov	r0, r3
 8010e66:	3710      	adds	r7, #16
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}

08010e6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b0ba      	sub	sp, #232	; 0xe8
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	68db      	ldr	r3, [r3, #12]
 8010e84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	695b      	ldr	r3, [r3, #20]
 8010e8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8010e92:	2300      	movs	r3, #0
 8010e94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8010e98:	2300      	movs	r3, #0
 8010e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ea2:	f003 030f 	and.w	r3, r3, #15
 8010ea6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8010eaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d10f      	bne.n	8010ed2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010eb6:	f003 0320 	and.w	r3, r3, #32
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d009      	beq.n	8010ed2 <HAL_UART_IRQHandler+0x66>
 8010ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ec2:	f003 0320 	and.w	r3, r3, #32
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d003      	beq.n	8010ed2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f000 fd8f 	bl	80119ee <UART_Receive_IT>
      return;
 8010ed0:	e256      	b.n	8011380 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8010ed2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	f000 80de 	beq.w	8011098 <HAL_UART_IRQHandler+0x22c>
 8010edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010ee0:	f003 0301 	and.w	r3, r3, #1
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d106      	bne.n	8010ef6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010eec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	f000 80d1 	beq.w	8011098 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010efa:	f003 0301 	and.w	r3, r3, #1
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d00b      	beq.n	8010f1a <HAL_UART_IRQHandler+0xae>
 8010f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d005      	beq.n	8010f1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f12:	f043 0201 	orr.w	r2, r3, #1
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f1e:	f003 0304 	and.w	r3, r3, #4
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d00b      	beq.n	8010f3e <HAL_UART_IRQHandler+0xd2>
 8010f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010f2a:	f003 0301 	and.w	r3, r3, #1
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d005      	beq.n	8010f3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f36:	f043 0202 	orr.w	r2, r3, #2
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f42:	f003 0302 	and.w	r3, r3, #2
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d00b      	beq.n	8010f62 <HAL_UART_IRQHandler+0xf6>
 8010f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010f4e:	f003 0301 	and.w	r3, r3, #1
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d005      	beq.n	8010f62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f5a:	f043 0204 	orr.w	r2, r3, #4
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8010f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f66:	f003 0308 	and.w	r3, r3, #8
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d011      	beq.n	8010f92 <HAL_UART_IRQHandler+0x126>
 8010f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f72:	f003 0320 	and.w	r3, r3, #32
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d105      	bne.n	8010f86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8010f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010f7e:	f003 0301 	and.w	r3, r3, #1
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d005      	beq.n	8010f92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f8a:	f043 0208 	orr.w	r2, r3, #8
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	f000 81ed 	beq.w	8011376 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010fa0:	f003 0320 	and.w	r3, r3, #32
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d008      	beq.n	8010fba <HAL_UART_IRQHandler+0x14e>
 8010fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010fac:	f003 0320 	and.w	r3, r3, #32
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d002      	beq.n	8010fba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8010fb4:	6878      	ldr	r0, [r7, #4]
 8010fb6:	f000 fd1a 	bl	80119ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	695b      	ldr	r3, [r3, #20]
 8010fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fc4:	2b40      	cmp	r3, #64	; 0x40
 8010fc6:	bf0c      	ite	eq
 8010fc8:	2301      	moveq	r3, #1
 8010fca:	2300      	movne	r3, #0
 8010fcc:	b2db      	uxtb	r3, r3
 8010fce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fd6:	f003 0308 	and.w	r3, r3, #8
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d103      	bne.n	8010fe6 <HAL_UART_IRQHandler+0x17a>
 8010fde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d04f      	beq.n	8011086 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f000 fc22 	bl	8011830 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	695b      	ldr	r3, [r3, #20]
 8010ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ff6:	2b40      	cmp	r3, #64	; 0x40
 8010ff8:	d141      	bne.n	801107e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	3314      	adds	r3, #20
 8011000:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011004:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011008:	e853 3f00 	ldrex	r3, [r3]
 801100c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8011010:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011018:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	3314      	adds	r3, #20
 8011022:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8011026:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801102a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801102e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8011032:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011036:	e841 2300 	strex	r3, r2, [r1]
 801103a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801103e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011042:	2b00      	cmp	r3, #0
 8011044:	d1d9      	bne.n	8010ffa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801104a:	2b00      	cmp	r3, #0
 801104c:	d013      	beq.n	8011076 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011052:	4a7d      	ldr	r2, [pc, #500]	; (8011248 <HAL_UART_IRQHandler+0x3dc>)
 8011054:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801105a:	4618      	mov	r0, r3
 801105c:	f7fa fbba 	bl	800b7d4 <HAL_DMA_Abort_IT>
 8011060:	4603      	mov	r3, r0
 8011062:	2b00      	cmp	r3, #0
 8011064:	d016      	beq.n	8011094 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801106a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801106c:	687a      	ldr	r2, [r7, #4]
 801106e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011070:	4610      	mov	r0, r2
 8011072:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011074:	e00e      	b.n	8011094 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011076:	6878      	ldr	r0, [r7, #4]
 8011078:	f000 f9ae 	bl	80113d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801107c:	e00a      	b.n	8011094 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f000 f9aa 	bl	80113d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011084:	e006      	b.n	8011094 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f000 f9a6 	bl	80113d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2200      	movs	r2, #0
 8011090:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8011092:	e170      	b.n	8011376 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011094:	bf00      	nop
    return;
 8011096:	e16e      	b.n	8011376 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801109c:	2b01      	cmp	r3, #1
 801109e:	f040 814a 	bne.w	8011336 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80110a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80110a6:	f003 0310 	and.w	r3, r3, #16
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	f000 8143 	beq.w	8011336 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80110b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80110b4:	f003 0310 	and.w	r3, r3, #16
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	f000 813c 	beq.w	8011336 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80110be:	2300      	movs	r3, #0
 80110c0:	60bb      	str	r3, [r7, #8]
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	60bb      	str	r3, [r7, #8]
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	685b      	ldr	r3, [r3, #4]
 80110d0:	60bb      	str	r3, [r7, #8]
 80110d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	695b      	ldr	r3, [r3, #20]
 80110da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110de:	2b40      	cmp	r3, #64	; 0x40
 80110e0:	f040 80b4 	bne.w	801124c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	685b      	ldr	r3, [r3, #4]
 80110ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80110f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	f000 8140 	beq.w	801137a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80110fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011102:	429a      	cmp	r2, r3
 8011104:	f080 8139 	bcs.w	801137a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801110e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011114:	69db      	ldr	r3, [r3, #28]
 8011116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801111a:	f000 8088 	beq.w	801122e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	330c      	adds	r3, #12
 8011124:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011128:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801112c:	e853 3f00 	ldrex	r3, [r3]
 8011130:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8011134:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801113c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	330c      	adds	r3, #12
 8011146:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801114a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801114e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011152:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011156:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801115a:	e841 2300 	strex	r3, r2, [r1]
 801115e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8011162:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011166:	2b00      	cmp	r3, #0
 8011168:	d1d9      	bne.n	801111e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	3314      	adds	r3, #20
 8011170:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011174:	e853 3f00 	ldrex	r3, [r3]
 8011178:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801117a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801117c:	f023 0301 	bic.w	r3, r3, #1
 8011180:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	3314      	adds	r3, #20
 801118a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801118e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8011192:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011194:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011196:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801119a:	e841 2300 	strex	r3, r2, [r1]
 801119e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80111a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d1e1      	bne.n	801116a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	3314      	adds	r3, #20
 80111ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80111b0:	e853 3f00 	ldrex	r3, [r3]
 80111b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80111b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80111b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80111bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	3314      	adds	r3, #20
 80111c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80111ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80111cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80111d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80111d2:	e841 2300 	strex	r3, r2, [r1]
 80111d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80111d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d1e3      	bne.n	80111a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	2220      	movs	r2, #32
 80111e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	2200      	movs	r2, #0
 80111ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	330c      	adds	r3, #12
 80111f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111f6:	e853 3f00 	ldrex	r3, [r3]
 80111fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80111fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111fe:	f023 0310 	bic.w	r3, r3, #16
 8011202:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	330c      	adds	r3, #12
 801120c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8011210:	65ba      	str	r2, [r7, #88]	; 0x58
 8011212:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011214:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011216:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011218:	e841 2300 	strex	r3, r2, [r1]
 801121c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801121e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011220:	2b00      	cmp	r3, #0
 8011222:	d1e3      	bne.n	80111ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011228:	4618      	mov	r0, r3
 801122a:	f7fa fa63 	bl	800b6f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011236:	b29b      	uxth	r3, r3
 8011238:	1ad3      	subs	r3, r2, r3
 801123a:	b29b      	uxth	r3, r3
 801123c:	4619      	mov	r1, r3
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f000 f8d4 	bl	80113ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011244:	e099      	b.n	801137a <HAL_UART_IRQHandler+0x50e>
 8011246:	bf00      	nop
 8011248:	080118f7 	.word	0x080118f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011254:	b29b      	uxth	r3, r3
 8011256:	1ad3      	subs	r3, r2, r3
 8011258:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011260:	b29b      	uxth	r3, r3
 8011262:	2b00      	cmp	r3, #0
 8011264:	f000 808b 	beq.w	801137e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8011268:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801126c:	2b00      	cmp	r3, #0
 801126e:	f000 8086 	beq.w	801137e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	330c      	adds	r3, #12
 8011278:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801127a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801127c:	e853 3f00 	ldrex	r3, [r3]
 8011280:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011284:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011288:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	330c      	adds	r3, #12
 8011292:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011296:	647a      	str	r2, [r7, #68]	; 0x44
 8011298:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801129a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801129c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801129e:	e841 2300 	strex	r3, r2, [r1]
 80112a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80112a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d1e3      	bne.n	8011272 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	3314      	adds	r3, #20
 80112b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112b4:	e853 3f00 	ldrex	r3, [r3]
 80112b8:	623b      	str	r3, [r7, #32]
   return(result);
 80112ba:	6a3b      	ldr	r3, [r7, #32]
 80112bc:	f023 0301 	bic.w	r3, r3, #1
 80112c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	3314      	adds	r3, #20
 80112ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80112ce:	633a      	str	r2, [r7, #48]	; 0x30
 80112d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80112d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112d6:	e841 2300 	strex	r3, r2, [r1]
 80112da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80112dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d1e3      	bne.n	80112aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2220      	movs	r2, #32
 80112e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2200      	movs	r2, #0
 80112ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	330c      	adds	r3, #12
 80112f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112f8:	693b      	ldr	r3, [r7, #16]
 80112fa:	e853 3f00 	ldrex	r3, [r3]
 80112fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	f023 0310 	bic.w	r3, r3, #16
 8011306:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	330c      	adds	r3, #12
 8011310:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8011314:	61fa      	str	r2, [r7, #28]
 8011316:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011318:	69b9      	ldr	r1, [r7, #24]
 801131a:	69fa      	ldr	r2, [r7, #28]
 801131c:	e841 2300 	strex	r3, r2, [r1]
 8011320:	617b      	str	r3, [r7, #20]
   return(result);
 8011322:	697b      	ldr	r3, [r7, #20]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d1e3      	bne.n	80112f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011328:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801132c:	4619      	mov	r1, r3
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f000 f85c 	bl	80113ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011334:	e023      	b.n	801137e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8011336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801133a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801133e:	2b00      	cmp	r3, #0
 8011340:	d009      	beq.n	8011356 <HAL_UART_IRQHandler+0x4ea>
 8011342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801134a:	2b00      	cmp	r3, #0
 801134c:	d003      	beq.n	8011356 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f000 fae5 	bl	801191e <UART_Transmit_IT>
    return;
 8011354:	e014      	b.n	8011380 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8011356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801135a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801135e:	2b00      	cmp	r3, #0
 8011360:	d00e      	beq.n	8011380 <HAL_UART_IRQHandler+0x514>
 8011362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801136a:	2b00      	cmp	r3, #0
 801136c:	d008      	beq.n	8011380 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801136e:	6878      	ldr	r0, [r7, #4]
 8011370:	f000 fb25 	bl	80119be <UART_EndTransmit_IT>
    return;
 8011374:	e004      	b.n	8011380 <HAL_UART_IRQHandler+0x514>
    return;
 8011376:	bf00      	nop
 8011378:	e002      	b.n	8011380 <HAL_UART_IRQHandler+0x514>
      return;
 801137a:	bf00      	nop
 801137c:	e000      	b.n	8011380 <HAL_UART_IRQHandler+0x514>
      return;
 801137e:	bf00      	nop
  }
}
 8011380:	37e8      	adds	r7, #232	; 0xe8
 8011382:	46bd      	mov	sp, r7
 8011384:	bd80      	pop	{r7, pc}
 8011386:	bf00      	nop

08011388 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011388:	b480      	push	{r7}
 801138a:	b083      	sub	sp, #12
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8011390:	bf00      	nop
 8011392:	370c      	adds	r7, #12
 8011394:	46bd      	mov	sp, r7
 8011396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139a:	4770      	bx	lr

0801139c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801139c:	b480      	push	{r7}
 801139e:	b083      	sub	sp, #12
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80113a4:	bf00      	nop
 80113a6:	370c      	adds	r7, #12
 80113a8:	46bd      	mov	sp, r7
 80113aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ae:	4770      	bx	lr

080113b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80113b0:	b480      	push	{r7}
 80113b2:	b083      	sub	sp, #12
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80113b8:	bf00      	nop
 80113ba:	370c      	adds	r7, #12
 80113bc:	46bd      	mov	sp, r7
 80113be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c2:	4770      	bx	lr

080113c4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80113c4:	b480      	push	{r7}
 80113c6:	b083      	sub	sp, #12
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80113cc:	bf00      	nop
 80113ce:	370c      	adds	r7, #12
 80113d0:	46bd      	mov	sp, r7
 80113d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d6:	4770      	bx	lr

080113d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80113d8:	b480      	push	{r7}
 80113da:	b083      	sub	sp, #12
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80113e0:	bf00      	nop
 80113e2:	370c      	adds	r7, #12
 80113e4:	46bd      	mov	sp, r7
 80113e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ea:	4770      	bx	lr

080113ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80113ec:	b480      	push	{r7}
 80113ee:	b083      	sub	sp, #12
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
 80113f4:	460b      	mov	r3, r1
 80113f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80113f8:	bf00      	nop
 80113fa:	370c      	adds	r7, #12
 80113fc:	46bd      	mov	sp, r7
 80113fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011402:	4770      	bx	lr

08011404 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b090      	sub	sp, #64	; 0x40
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011410:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801141c:	2b00      	cmp	r3, #0
 801141e:	d137      	bne.n	8011490 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8011420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011422:	2200      	movs	r2, #0
 8011424:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	3314      	adds	r3, #20
 801142c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011430:	e853 3f00 	ldrex	r3, [r3]
 8011434:	623b      	str	r3, [r7, #32]
   return(result);
 8011436:	6a3b      	ldr	r3, [r7, #32]
 8011438:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801143c:	63bb      	str	r3, [r7, #56]	; 0x38
 801143e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	3314      	adds	r3, #20
 8011444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011446:	633a      	str	r2, [r7, #48]	; 0x30
 8011448:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801144a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801144c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801144e:	e841 2300 	strex	r3, r2, [r1]
 8011452:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011456:	2b00      	cmp	r3, #0
 8011458:	d1e5      	bne.n	8011426 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801145a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	330c      	adds	r3, #12
 8011460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011462:	693b      	ldr	r3, [r7, #16]
 8011464:	e853 3f00 	ldrex	r3, [r3]
 8011468:	60fb      	str	r3, [r7, #12]
   return(result);
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011470:	637b      	str	r3, [r7, #52]	; 0x34
 8011472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	330c      	adds	r3, #12
 8011478:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801147a:	61fa      	str	r2, [r7, #28]
 801147c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801147e:	69b9      	ldr	r1, [r7, #24]
 8011480:	69fa      	ldr	r2, [r7, #28]
 8011482:	e841 2300 	strex	r3, r2, [r1]
 8011486:	617b      	str	r3, [r7, #20]
   return(result);
 8011488:	697b      	ldr	r3, [r7, #20]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d1e5      	bne.n	801145a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801148e:	e002      	b.n	8011496 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8011490:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011492:	f7ff ff79 	bl	8011388 <HAL_UART_TxCpltCallback>
}
 8011496:	bf00      	nop
 8011498:	3740      	adds	r7, #64	; 0x40
 801149a:	46bd      	mov	sp, r7
 801149c:	bd80      	pop	{r7, pc}

0801149e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801149e:	b580      	push	{r7, lr}
 80114a0:	b084      	sub	sp, #16
 80114a2:	af00      	add	r7, sp, #0
 80114a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80114ac:	68f8      	ldr	r0, [r7, #12]
 80114ae:	f7ff ff75 	bl	801139c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80114b2:	bf00      	nop
 80114b4:	3710      	adds	r7, #16
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}

080114ba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80114ba:	b580      	push	{r7, lr}
 80114bc:	b09c      	sub	sp, #112	; 0x70
 80114be:	af00      	add	r7, sp, #0
 80114c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d172      	bne.n	80115bc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80114d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114d8:	2200      	movs	r2, #0
 80114da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80114dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	330c      	adds	r3, #12
 80114e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114e6:	e853 3f00 	ldrex	r3, [r3]
 80114ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80114ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80114f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80114f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	330c      	adds	r3, #12
 80114fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80114fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80114fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011500:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011502:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011504:	e841 2300 	strex	r3, r2, [r1]
 8011508:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801150a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801150c:	2b00      	cmp	r3, #0
 801150e:	d1e5      	bne.n	80114dc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	3314      	adds	r3, #20
 8011516:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801151a:	e853 3f00 	ldrex	r3, [r3]
 801151e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011522:	f023 0301 	bic.w	r3, r3, #1
 8011526:	667b      	str	r3, [r7, #100]	; 0x64
 8011528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	3314      	adds	r3, #20
 801152e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011530:	647a      	str	r2, [r7, #68]	; 0x44
 8011532:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011534:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011536:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011538:	e841 2300 	strex	r3, r2, [r1]
 801153c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801153e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011540:	2b00      	cmp	r3, #0
 8011542:	d1e5      	bne.n	8011510 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	3314      	adds	r3, #20
 801154a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801154e:	e853 3f00 	ldrex	r3, [r3]
 8011552:	623b      	str	r3, [r7, #32]
   return(result);
 8011554:	6a3b      	ldr	r3, [r7, #32]
 8011556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801155a:	663b      	str	r3, [r7, #96]	; 0x60
 801155c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	3314      	adds	r3, #20
 8011562:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011564:	633a      	str	r2, [r7, #48]	; 0x30
 8011566:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011568:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801156a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801156c:	e841 2300 	strex	r3, r2, [r1]
 8011570:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011574:	2b00      	cmp	r3, #0
 8011576:	d1e5      	bne.n	8011544 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801157a:	2220      	movs	r2, #32
 801157c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011584:	2b01      	cmp	r3, #1
 8011586:	d119      	bne.n	80115bc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	330c      	adds	r3, #12
 801158e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011590:	693b      	ldr	r3, [r7, #16]
 8011592:	e853 3f00 	ldrex	r3, [r3]
 8011596:	60fb      	str	r3, [r7, #12]
   return(result);
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	f023 0310 	bic.w	r3, r3, #16
 801159e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80115a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	330c      	adds	r3, #12
 80115a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80115a8:	61fa      	str	r2, [r7, #28]
 80115aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115ac:	69b9      	ldr	r1, [r7, #24]
 80115ae:	69fa      	ldr	r2, [r7, #28]
 80115b0:	e841 2300 	strex	r3, r2, [r1]
 80115b4:	617b      	str	r3, [r7, #20]
   return(result);
 80115b6:	697b      	ldr	r3, [r7, #20]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d1e5      	bne.n	8011588 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80115bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80115be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115c0:	2b01      	cmp	r3, #1
 80115c2:	d106      	bne.n	80115d2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80115c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80115c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80115c8:	4619      	mov	r1, r3
 80115ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80115cc:	f7ff ff0e 	bl	80113ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80115d0:	e002      	b.n	80115d8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80115d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80115d4:	f7ff feec 	bl	80113b0 <HAL_UART_RxCpltCallback>
}
 80115d8:	bf00      	nop
 80115da:	3770      	adds	r7, #112	; 0x70
 80115dc:	46bd      	mov	sp, r7
 80115de:	bd80      	pop	{r7, pc}

080115e0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b084      	sub	sp, #16
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115ec:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115f2:	2b01      	cmp	r3, #1
 80115f4:	d108      	bne.n	8011608 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80115fa:	085b      	lsrs	r3, r3, #1
 80115fc:	b29b      	uxth	r3, r3
 80115fe:	4619      	mov	r1, r3
 8011600:	68f8      	ldr	r0, [r7, #12]
 8011602:	f7ff fef3 	bl	80113ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011606:	e002      	b.n	801160e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8011608:	68f8      	ldr	r0, [r7, #12]
 801160a:	f7ff fedb 	bl	80113c4 <HAL_UART_RxHalfCpltCallback>
}
 801160e:	bf00      	nop
 8011610:	3710      	adds	r7, #16
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}

08011616 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011616:	b580      	push	{r7, lr}
 8011618:	b084      	sub	sp, #16
 801161a:	af00      	add	r7, sp, #0
 801161c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801161e:	2300      	movs	r3, #0
 8011620:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011626:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8011628:	68bb      	ldr	r3, [r7, #8]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	695b      	ldr	r3, [r3, #20]
 801162e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011632:	2b80      	cmp	r3, #128	; 0x80
 8011634:	bf0c      	ite	eq
 8011636:	2301      	moveq	r3, #1
 8011638:	2300      	movne	r3, #0
 801163a:	b2db      	uxtb	r3, r3
 801163c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011644:	b2db      	uxtb	r3, r3
 8011646:	2b21      	cmp	r3, #33	; 0x21
 8011648:	d108      	bne.n	801165c <UART_DMAError+0x46>
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d005      	beq.n	801165c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8011650:	68bb      	ldr	r3, [r7, #8]
 8011652:	2200      	movs	r2, #0
 8011654:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8011656:	68b8      	ldr	r0, [r7, #8]
 8011658:	f000 f8c2 	bl	80117e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801165c:	68bb      	ldr	r3, [r7, #8]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	695b      	ldr	r3, [r3, #20]
 8011662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011666:	2b40      	cmp	r3, #64	; 0x40
 8011668:	bf0c      	ite	eq
 801166a:	2301      	moveq	r3, #1
 801166c:	2300      	movne	r3, #0
 801166e:	b2db      	uxtb	r3, r3
 8011670:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011678:	b2db      	uxtb	r3, r3
 801167a:	2b22      	cmp	r3, #34	; 0x22
 801167c:	d108      	bne.n	8011690 <UART_DMAError+0x7a>
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d005      	beq.n	8011690 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8011684:	68bb      	ldr	r3, [r7, #8]
 8011686:	2200      	movs	r2, #0
 8011688:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801168a:	68b8      	ldr	r0, [r7, #8]
 801168c:	f000 f8d0 	bl	8011830 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011694:	f043 0210 	orr.w	r2, r3, #16
 8011698:	68bb      	ldr	r3, [r7, #8]
 801169a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801169c:	68b8      	ldr	r0, [r7, #8]
 801169e:	f7ff fe9b 	bl	80113d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80116a2:	bf00      	nop
 80116a4:	3710      	adds	r7, #16
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}
	...

080116ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b098      	sub	sp, #96	; 0x60
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	60f8      	str	r0, [r7, #12]
 80116b4:	60b9      	str	r1, [r7, #8]
 80116b6:	4613      	mov	r3, r2
 80116b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80116ba:	68ba      	ldr	r2, [r7, #8]
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	88fa      	ldrh	r2, [r7, #6]
 80116c4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	2200      	movs	r2, #0
 80116ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	2222      	movs	r2, #34	; 0x22
 80116d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116d8:	4a3e      	ldr	r2, [pc, #248]	; (80117d4 <UART_Start_Receive_DMA+0x128>)
 80116da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116e0:	4a3d      	ldr	r2, [pc, #244]	; (80117d8 <UART_Start_Receive_DMA+0x12c>)
 80116e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116e8:	4a3c      	ldr	r2, [pc, #240]	; (80117dc <UART_Start_Receive_DMA+0x130>)
 80116ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116f0:	2200      	movs	r2, #0
 80116f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80116f4:	f107 0308 	add.w	r3, r7, #8
 80116f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	3304      	adds	r3, #4
 8011704:	4619      	mov	r1, r3
 8011706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011708:	681a      	ldr	r2, [r3, #0]
 801170a:	88fb      	ldrh	r3, [r7, #6]
 801170c:	f7f9 ff9a 	bl	800b644 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8011710:	2300      	movs	r3, #0
 8011712:	613b      	str	r3, [r7, #16]
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	613b      	str	r3, [r7, #16]
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	685b      	ldr	r3, [r3, #4]
 8011722:	613b      	str	r3, [r7, #16]
 8011724:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	2200      	movs	r2, #0
 801172a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	330c      	adds	r3, #12
 8011734:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011738:	e853 3f00 	ldrex	r3, [r3]
 801173c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801173e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011744:	65bb      	str	r3, [r7, #88]	; 0x58
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	330c      	adds	r3, #12
 801174c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801174e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011750:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011752:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011754:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011756:	e841 2300 	strex	r3, r2, [r1]
 801175a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801175c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801175e:	2b00      	cmp	r3, #0
 8011760:	d1e5      	bne.n	801172e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	3314      	adds	r3, #20
 8011768:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801176a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801176c:	e853 3f00 	ldrex	r3, [r3]
 8011770:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011774:	f043 0301 	orr.w	r3, r3, #1
 8011778:	657b      	str	r3, [r7, #84]	; 0x54
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	3314      	adds	r3, #20
 8011780:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011782:	63ba      	str	r2, [r7, #56]	; 0x38
 8011784:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011786:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801178a:	e841 2300 	strex	r3, r2, [r1]
 801178e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011792:	2b00      	cmp	r3, #0
 8011794:	d1e5      	bne.n	8011762 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	3314      	adds	r3, #20
 801179c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801179e:	69bb      	ldr	r3, [r7, #24]
 80117a0:	e853 3f00 	ldrex	r3, [r3]
 80117a4:	617b      	str	r3, [r7, #20]
   return(result);
 80117a6:	697b      	ldr	r3, [r7, #20]
 80117a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117ac:	653b      	str	r3, [r7, #80]	; 0x50
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	3314      	adds	r3, #20
 80117b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80117b6:	627a      	str	r2, [r7, #36]	; 0x24
 80117b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117ba:	6a39      	ldr	r1, [r7, #32]
 80117bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117be:	e841 2300 	strex	r3, r2, [r1]
 80117c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80117c4:	69fb      	ldr	r3, [r7, #28]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d1e5      	bne.n	8011796 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80117ca:	2300      	movs	r3, #0
}
 80117cc:	4618      	mov	r0, r3
 80117ce:	3760      	adds	r7, #96	; 0x60
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd80      	pop	{r7, pc}
 80117d4:	080114bb 	.word	0x080114bb
 80117d8:	080115e1 	.word	0x080115e1
 80117dc:	08011617 	.word	0x08011617

080117e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80117e0:	b480      	push	{r7}
 80117e2:	b089      	sub	sp, #36	; 0x24
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	330c      	adds	r3, #12
 80117ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	e853 3f00 	ldrex	r3, [r3]
 80117f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80117f8:	68bb      	ldr	r3, [r7, #8]
 80117fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80117fe:	61fb      	str	r3, [r7, #28]
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	330c      	adds	r3, #12
 8011806:	69fa      	ldr	r2, [r7, #28]
 8011808:	61ba      	str	r2, [r7, #24]
 801180a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801180c:	6979      	ldr	r1, [r7, #20]
 801180e:	69ba      	ldr	r2, [r7, #24]
 8011810:	e841 2300 	strex	r3, r2, [r1]
 8011814:	613b      	str	r3, [r7, #16]
   return(result);
 8011816:	693b      	ldr	r3, [r7, #16]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d1e5      	bne.n	80117e8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2220      	movs	r2, #32
 8011820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8011824:	bf00      	nop
 8011826:	3724      	adds	r7, #36	; 0x24
 8011828:	46bd      	mov	sp, r7
 801182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182e:	4770      	bx	lr

08011830 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011830:	b480      	push	{r7}
 8011832:	b095      	sub	sp, #84	; 0x54
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	330c      	adds	r3, #12
 801183e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011842:	e853 3f00 	ldrex	r3, [r3]
 8011846:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801184a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801184e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	330c      	adds	r3, #12
 8011856:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011858:	643a      	str	r2, [r7, #64]	; 0x40
 801185a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801185c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801185e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011860:	e841 2300 	strex	r3, r2, [r1]
 8011864:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011868:	2b00      	cmp	r3, #0
 801186a:	d1e5      	bne.n	8011838 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	3314      	adds	r3, #20
 8011872:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011874:	6a3b      	ldr	r3, [r7, #32]
 8011876:	e853 3f00 	ldrex	r3, [r3]
 801187a:	61fb      	str	r3, [r7, #28]
   return(result);
 801187c:	69fb      	ldr	r3, [r7, #28]
 801187e:	f023 0301 	bic.w	r3, r3, #1
 8011882:	64bb      	str	r3, [r7, #72]	; 0x48
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	3314      	adds	r3, #20
 801188a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801188c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801188e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011894:	e841 2300 	strex	r3, r2, [r1]
 8011898:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801189c:	2b00      	cmp	r3, #0
 801189e:	d1e5      	bne.n	801186c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118a4:	2b01      	cmp	r3, #1
 80118a6:	d119      	bne.n	80118dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	330c      	adds	r3, #12
 80118ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	e853 3f00 	ldrex	r3, [r3]
 80118b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	f023 0310 	bic.w	r3, r3, #16
 80118be:	647b      	str	r3, [r7, #68]	; 0x44
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	330c      	adds	r3, #12
 80118c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80118c8:	61ba      	str	r2, [r7, #24]
 80118ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118cc:	6979      	ldr	r1, [r7, #20]
 80118ce:	69ba      	ldr	r2, [r7, #24]
 80118d0:	e841 2300 	strex	r3, r2, [r1]
 80118d4:	613b      	str	r3, [r7, #16]
   return(result);
 80118d6:	693b      	ldr	r3, [r7, #16]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d1e5      	bne.n	80118a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2220      	movs	r2, #32
 80118e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	2200      	movs	r2, #0
 80118e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80118ea:	bf00      	nop
 80118ec:	3754      	adds	r7, #84	; 0x54
 80118ee:	46bd      	mov	sp, r7
 80118f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f4:	4770      	bx	lr

080118f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80118f6:	b580      	push	{r7, lr}
 80118f8:	b084      	sub	sp, #16
 80118fa:	af00      	add	r7, sp, #0
 80118fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011902:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	2200      	movs	r2, #0
 8011908:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	2200      	movs	r2, #0
 801190e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011910:	68f8      	ldr	r0, [r7, #12]
 8011912:	f7ff fd61 	bl	80113d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011916:	bf00      	nop
 8011918:	3710      	adds	r7, #16
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}

0801191e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801191e:	b480      	push	{r7}
 8011920:	b085      	sub	sp, #20
 8011922:	af00      	add	r7, sp, #0
 8011924:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801192c:	b2db      	uxtb	r3, r3
 801192e:	2b21      	cmp	r3, #33	; 0x21
 8011930:	d13e      	bne.n	80119b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	689b      	ldr	r3, [r3, #8]
 8011936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801193a:	d114      	bne.n	8011966 <UART_Transmit_IT+0x48>
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	691b      	ldr	r3, [r3, #16]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d110      	bne.n	8011966 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	6a1b      	ldr	r3, [r3, #32]
 8011948:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	881b      	ldrh	r3, [r3, #0]
 801194e:	461a      	mov	r2, r3
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011958:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	6a1b      	ldr	r3, [r3, #32]
 801195e:	1c9a      	adds	r2, r3, #2
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	621a      	str	r2, [r3, #32]
 8011964:	e008      	b.n	8011978 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	6a1b      	ldr	r3, [r3, #32]
 801196a:	1c59      	adds	r1, r3, #1
 801196c:	687a      	ldr	r2, [r7, #4]
 801196e:	6211      	str	r1, [r2, #32]
 8011970:	781a      	ldrb	r2, [r3, #0]
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801197c:	b29b      	uxth	r3, r3
 801197e:	3b01      	subs	r3, #1
 8011980:	b29b      	uxth	r3, r3
 8011982:	687a      	ldr	r2, [r7, #4]
 8011984:	4619      	mov	r1, r3
 8011986:	84d1      	strh	r1, [r2, #38]	; 0x26
 8011988:	2b00      	cmp	r3, #0
 801198a:	d10f      	bne.n	80119ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	68da      	ldr	r2, [r3, #12]
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801199a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	68da      	ldr	r2, [r3, #12]
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80119aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80119ac:	2300      	movs	r3, #0
 80119ae:	e000      	b.n	80119b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80119b0:	2302      	movs	r3, #2
  }
}
 80119b2:	4618      	mov	r0, r3
 80119b4:	3714      	adds	r7, #20
 80119b6:	46bd      	mov	sp, r7
 80119b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119bc:	4770      	bx	lr

080119be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80119be:	b580      	push	{r7, lr}
 80119c0:	b082      	sub	sp, #8
 80119c2:	af00      	add	r7, sp, #0
 80119c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	68da      	ldr	r2, [r3, #12]
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80119d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2220      	movs	r2, #32
 80119da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80119de:	6878      	ldr	r0, [r7, #4]
 80119e0:	f7ff fcd2 	bl	8011388 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80119e4:	2300      	movs	r3, #0
}
 80119e6:	4618      	mov	r0, r3
 80119e8:	3708      	adds	r7, #8
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}

080119ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80119ee:	b580      	push	{r7, lr}
 80119f0:	b08c      	sub	sp, #48	; 0x30
 80119f2:	af00      	add	r7, sp, #0
 80119f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80119fc:	b2db      	uxtb	r3, r3
 80119fe:	2b22      	cmp	r3, #34	; 0x22
 8011a00:	f040 80ab 	bne.w	8011b5a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	689b      	ldr	r3, [r3, #8]
 8011a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a0c:	d117      	bne.n	8011a3e <UART_Receive_IT+0x50>
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	691b      	ldr	r3, [r3, #16]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d113      	bne.n	8011a3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8011a16:	2300      	movs	r3, #0
 8011a18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a1e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	685b      	ldr	r3, [r3, #4]
 8011a26:	b29b      	uxth	r3, r3
 8011a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a2c:	b29a      	uxth	r2, r3
 8011a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a36:	1c9a      	adds	r2, r3, #2
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	629a      	str	r2, [r3, #40]	; 0x28
 8011a3c:	e026      	b.n	8011a8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a42:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8011a44:	2300      	movs	r3, #0
 8011a46:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	689b      	ldr	r3, [r3, #8]
 8011a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a50:	d007      	beq.n	8011a62 <UART_Receive_IT+0x74>
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	689b      	ldr	r3, [r3, #8]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d10a      	bne.n	8011a70 <UART_Receive_IT+0x82>
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	691b      	ldr	r3, [r3, #16]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d106      	bne.n	8011a70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	685b      	ldr	r3, [r3, #4]
 8011a68:	b2da      	uxtb	r2, r3
 8011a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a6c:	701a      	strb	r2, [r3, #0]
 8011a6e:	e008      	b.n	8011a82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	685b      	ldr	r3, [r3, #4]
 8011a76:	b2db      	uxtb	r3, r3
 8011a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a7c:	b2da      	uxtb	r2, r3
 8011a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a86:	1c5a      	adds	r2, r3, #1
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011a90:	b29b      	uxth	r3, r3
 8011a92:	3b01      	subs	r3, #1
 8011a94:	b29b      	uxth	r3, r3
 8011a96:	687a      	ldr	r2, [r7, #4]
 8011a98:	4619      	mov	r1, r3
 8011a9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d15a      	bne.n	8011b56 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	68da      	ldr	r2, [r3, #12]
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	f022 0220 	bic.w	r2, r2, #32
 8011aae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	68da      	ldr	r2, [r3, #12]
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011abe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	695a      	ldr	r2, [r3, #20]
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	f022 0201 	bic.w	r2, r2, #1
 8011ace:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2220      	movs	r2, #32
 8011ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011adc:	2b01      	cmp	r3, #1
 8011ade:	d135      	bne.n	8011b4c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	330c      	adds	r3, #12
 8011aec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aee:	697b      	ldr	r3, [r7, #20]
 8011af0:	e853 3f00 	ldrex	r3, [r3]
 8011af4:	613b      	str	r3, [r7, #16]
   return(result);
 8011af6:	693b      	ldr	r3, [r7, #16]
 8011af8:	f023 0310 	bic.w	r3, r3, #16
 8011afc:	627b      	str	r3, [r7, #36]	; 0x24
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	330c      	adds	r3, #12
 8011b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b06:	623a      	str	r2, [r7, #32]
 8011b08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b0a:	69f9      	ldr	r1, [r7, #28]
 8011b0c:	6a3a      	ldr	r2, [r7, #32]
 8011b0e:	e841 2300 	strex	r3, r2, [r1]
 8011b12:	61bb      	str	r3, [r7, #24]
   return(result);
 8011b14:	69bb      	ldr	r3, [r7, #24]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d1e5      	bne.n	8011ae6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	f003 0310 	and.w	r3, r3, #16
 8011b24:	2b10      	cmp	r3, #16
 8011b26:	d10a      	bne.n	8011b3e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011b28:	2300      	movs	r3, #0
 8011b2a:	60fb      	str	r3, [r7, #12]
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	60fb      	str	r3, [r7, #12]
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	685b      	ldr	r3, [r3, #4]
 8011b3a:	60fb      	str	r3, [r7, #12]
 8011b3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011b42:	4619      	mov	r1, r3
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f7ff fc51 	bl	80113ec <HAL_UARTEx_RxEventCallback>
 8011b4a:	e002      	b.n	8011b52 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8011b4c:	6878      	ldr	r0, [r7, #4]
 8011b4e:	f7ff fc2f 	bl	80113b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8011b52:	2300      	movs	r3, #0
 8011b54:	e002      	b.n	8011b5c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8011b56:	2300      	movs	r3, #0
 8011b58:	e000      	b.n	8011b5c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8011b5a:	2302      	movs	r3, #2
  }
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	3730      	adds	r7, #48	; 0x30
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}

08011b64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b68:	b09f      	sub	sp, #124	; 0x7c
 8011b6a:	af00      	add	r7, sp, #0
 8011b6c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	691b      	ldr	r3, [r3, #16]
 8011b74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8011b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011b7a:	68d9      	ldr	r1, [r3, #12]
 8011b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011b7e:	681a      	ldr	r2, [r3, #0]
 8011b80:	ea40 0301 	orr.w	r3, r0, r1
 8011b84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011b88:	689a      	ldr	r2, [r3, #8]
 8011b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011b8c:	691b      	ldr	r3, [r3, #16]
 8011b8e:	431a      	orrs	r2, r3
 8011b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011b92:	695b      	ldr	r3, [r3, #20]
 8011b94:	431a      	orrs	r2, r3
 8011b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011b98:	69db      	ldr	r3, [r3, #28]
 8011b9a:	4313      	orrs	r3, r2
 8011b9c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8011b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	68db      	ldr	r3, [r3, #12]
 8011ba4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8011ba8:	f021 010c 	bic.w	r1, r1, #12
 8011bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011bae:	681a      	ldr	r2, [r3, #0]
 8011bb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011bb2:	430b      	orrs	r3, r1
 8011bb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	695b      	ldr	r3, [r3, #20]
 8011bbc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8011bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011bc2:	6999      	ldr	r1, [r3, #24]
 8011bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011bc6:	681a      	ldr	r2, [r3, #0]
 8011bc8:	ea40 0301 	orr.w	r3, r0, r1
 8011bcc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011bd0:	681a      	ldr	r2, [r3, #0]
 8011bd2:	4bc5      	ldr	r3, [pc, #788]	; (8011ee8 <UART_SetConfig+0x384>)
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d004      	beq.n	8011be2 <UART_SetConfig+0x7e>
 8011bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011bda:	681a      	ldr	r2, [r3, #0]
 8011bdc:	4bc3      	ldr	r3, [pc, #780]	; (8011eec <UART_SetConfig+0x388>)
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d103      	bne.n	8011bea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011be2:	f7fd ffb1 	bl	800fb48 <HAL_RCC_GetPCLK2Freq>
 8011be6:	6778      	str	r0, [r7, #116]	; 0x74
 8011be8:	e002      	b.n	8011bf0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011bea:	f7fd ff99 	bl	800fb20 <HAL_RCC_GetPCLK1Freq>
 8011bee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011bf2:	69db      	ldr	r3, [r3, #28]
 8011bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011bf8:	f040 80b6 	bne.w	8011d68 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011bfe:	461c      	mov	r4, r3
 8011c00:	f04f 0500 	mov.w	r5, #0
 8011c04:	4622      	mov	r2, r4
 8011c06:	462b      	mov	r3, r5
 8011c08:	1891      	adds	r1, r2, r2
 8011c0a:	6439      	str	r1, [r7, #64]	; 0x40
 8011c0c:	415b      	adcs	r3, r3
 8011c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8011c10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011c14:	1912      	adds	r2, r2, r4
 8011c16:	eb45 0303 	adc.w	r3, r5, r3
 8011c1a:	f04f 0000 	mov.w	r0, #0
 8011c1e:	f04f 0100 	mov.w	r1, #0
 8011c22:	00d9      	lsls	r1, r3, #3
 8011c24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8011c28:	00d0      	lsls	r0, r2, #3
 8011c2a:	4602      	mov	r2, r0
 8011c2c:	460b      	mov	r3, r1
 8011c2e:	1911      	adds	r1, r2, r4
 8011c30:	6639      	str	r1, [r7, #96]	; 0x60
 8011c32:	416b      	adcs	r3, r5
 8011c34:	667b      	str	r3, [r7, #100]	; 0x64
 8011c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c38:	685b      	ldr	r3, [r3, #4]
 8011c3a:	461a      	mov	r2, r3
 8011c3c:	f04f 0300 	mov.w	r3, #0
 8011c40:	1891      	adds	r1, r2, r2
 8011c42:	63b9      	str	r1, [r7, #56]	; 0x38
 8011c44:	415b      	adcs	r3, r3
 8011c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011c48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8011c4c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8011c50:	f7ef f832 	bl	8000cb8 <__aeabi_uldivmod>
 8011c54:	4602      	mov	r2, r0
 8011c56:	460b      	mov	r3, r1
 8011c58:	4ba5      	ldr	r3, [pc, #660]	; (8011ef0 <UART_SetConfig+0x38c>)
 8011c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8011c5e:	095b      	lsrs	r3, r3, #5
 8011c60:	011e      	lsls	r6, r3, #4
 8011c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011c64:	461c      	mov	r4, r3
 8011c66:	f04f 0500 	mov.w	r5, #0
 8011c6a:	4622      	mov	r2, r4
 8011c6c:	462b      	mov	r3, r5
 8011c6e:	1891      	adds	r1, r2, r2
 8011c70:	6339      	str	r1, [r7, #48]	; 0x30
 8011c72:	415b      	adcs	r3, r3
 8011c74:	637b      	str	r3, [r7, #52]	; 0x34
 8011c76:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8011c7a:	1912      	adds	r2, r2, r4
 8011c7c:	eb45 0303 	adc.w	r3, r5, r3
 8011c80:	f04f 0000 	mov.w	r0, #0
 8011c84:	f04f 0100 	mov.w	r1, #0
 8011c88:	00d9      	lsls	r1, r3, #3
 8011c8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8011c8e:	00d0      	lsls	r0, r2, #3
 8011c90:	4602      	mov	r2, r0
 8011c92:	460b      	mov	r3, r1
 8011c94:	1911      	adds	r1, r2, r4
 8011c96:	65b9      	str	r1, [r7, #88]	; 0x58
 8011c98:	416b      	adcs	r3, r5
 8011c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c9e:	685b      	ldr	r3, [r3, #4]
 8011ca0:	461a      	mov	r2, r3
 8011ca2:	f04f 0300 	mov.w	r3, #0
 8011ca6:	1891      	adds	r1, r2, r2
 8011ca8:	62b9      	str	r1, [r7, #40]	; 0x28
 8011caa:	415b      	adcs	r3, r3
 8011cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011cae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011cb2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8011cb6:	f7ee ffff 	bl	8000cb8 <__aeabi_uldivmod>
 8011cba:	4602      	mov	r2, r0
 8011cbc:	460b      	mov	r3, r1
 8011cbe:	4b8c      	ldr	r3, [pc, #560]	; (8011ef0 <UART_SetConfig+0x38c>)
 8011cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8011cc4:	095b      	lsrs	r3, r3, #5
 8011cc6:	2164      	movs	r1, #100	; 0x64
 8011cc8:	fb01 f303 	mul.w	r3, r1, r3
 8011ccc:	1ad3      	subs	r3, r2, r3
 8011cce:	00db      	lsls	r3, r3, #3
 8011cd0:	3332      	adds	r3, #50	; 0x32
 8011cd2:	4a87      	ldr	r2, [pc, #540]	; (8011ef0 <UART_SetConfig+0x38c>)
 8011cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8011cd8:	095b      	lsrs	r3, r3, #5
 8011cda:	005b      	lsls	r3, r3, #1
 8011cdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011ce0:	441e      	add	r6, r3
 8011ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f04f 0100 	mov.w	r1, #0
 8011cea:	4602      	mov	r2, r0
 8011cec:	460b      	mov	r3, r1
 8011cee:	1894      	adds	r4, r2, r2
 8011cf0:	623c      	str	r4, [r7, #32]
 8011cf2:	415b      	adcs	r3, r3
 8011cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8011cf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011cfa:	1812      	adds	r2, r2, r0
 8011cfc:	eb41 0303 	adc.w	r3, r1, r3
 8011d00:	f04f 0400 	mov.w	r4, #0
 8011d04:	f04f 0500 	mov.w	r5, #0
 8011d08:	00dd      	lsls	r5, r3, #3
 8011d0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8011d0e:	00d4      	lsls	r4, r2, #3
 8011d10:	4622      	mov	r2, r4
 8011d12:	462b      	mov	r3, r5
 8011d14:	1814      	adds	r4, r2, r0
 8011d16:	653c      	str	r4, [r7, #80]	; 0x50
 8011d18:	414b      	adcs	r3, r1
 8011d1a:	657b      	str	r3, [r7, #84]	; 0x54
 8011d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d1e:	685b      	ldr	r3, [r3, #4]
 8011d20:	461a      	mov	r2, r3
 8011d22:	f04f 0300 	mov.w	r3, #0
 8011d26:	1891      	adds	r1, r2, r2
 8011d28:	61b9      	str	r1, [r7, #24]
 8011d2a:	415b      	adcs	r3, r3
 8011d2c:	61fb      	str	r3, [r7, #28]
 8011d2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011d32:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8011d36:	f7ee ffbf 	bl	8000cb8 <__aeabi_uldivmod>
 8011d3a:	4602      	mov	r2, r0
 8011d3c:	460b      	mov	r3, r1
 8011d3e:	4b6c      	ldr	r3, [pc, #432]	; (8011ef0 <UART_SetConfig+0x38c>)
 8011d40:	fba3 1302 	umull	r1, r3, r3, r2
 8011d44:	095b      	lsrs	r3, r3, #5
 8011d46:	2164      	movs	r1, #100	; 0x64
 8011d48:	fb01 f303 	mul.w	r3, r1, r3
 8011d4c:	1ad3      	subs	r3, r2, r3
 8011d4e:	00db      	lsls	r3, r3, #3
 8011d50:	3332      	adds	r3, #50	; 0x32
 8011d52:	4a67      	ldr	r2, [pc, #412]	; (8011ef0 <UART_SetConfig+0x38c>)
 8011d54:	fba2 2303 	umull	r2, r3, r2, r3
 8011d58:	095b      	lsrs	r3, r3, #5
 8011d5a:	f003 0207 	and.w	r2, r3, #7
 8011d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	4432      	add	r2, r6
 8011d64:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011d66:	e0b9      	b.n	8011edc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011d68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011d6a:	461c      	mov	r4, r3
 8011d6c:	f04f 0500 	mov.w	r5, #0
 8011d70:	4622      	mov	r2, r4
 8011d72:	462b      	mov	r3, r5
 8011d74:	1891      	adds	r1, r2, r2
 8011d76:	6139      	str	r1, [r7, #16]
 8011d78:	415b      	adcs	r3, r3
 8011d7a:	617b      	str	r3, [r7, #20]
 8011d7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011d80:	1912      	adds	r2, r2, r4
 8011d82:	eb45 0303 	adc.w	r3, r5, r3
 8011d86:	f04f 0000 	mov.w	r0, #0
 8011d8a:	f04f 0100 	mov.w	r1, #0
 8011d8e:	00d9      	lsls	r1, r3, #3
 8011d90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8011d94:	00d0      	lsls	r0, r2, #3
 8011d96:	4602      	mov	r2, r0
 8011d98:	460b      	mov	r3, r1
 8011d9a:	eb12 0804 	adds.w	r8, r2, r4
 8011d9e:	eb43 0905 	adc.w	r9, r3, r5
 8011da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011da4:	685b      	ldr	r3, [r3, #4]
 8011da6:	4618      	mov	r0, r3
 8011da8:	f04f 0100 	mov.w	r1, #0
 8011dac:	f04f 0200 	mov.w	r2, #0
 8011db0:	f04f 0300 	mov.w	r3, #0
 8011db4:	008b      	lsls	r3, r1, #2
 8011db6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8011dba:	0082      	lsls	r2, r0, #2
 8011dbc:	4640      	mov	r0, r8
 8011dbe:	4649      	mov	r1, r9
 8011dc0:	f7ee ff7a 	bl	8000cb8 <__aeabi_uldivmod>
 8011dc4:	4602      	mov	r2, r0
 8011dc6:	460b      	mov	r3, r1
 8011dc8:	4b49      	ldr	r3, [pc, #292]	; (8011ef0 <UART_SetConfig+0x38c>)
 8011dca:	fba3 2302 	umull	r2, r3, r3, r2
 8011dce:	095b      	lsrs	r3, r3, #5
 8011dd0:	011e      	lsls	r6, r3, #4
 8011dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	f04f 0100 	mov.w	r1, #0
 8011dda:	4602      	mov	r2, r0
 8011ddc:	460b      	mov	r3, r1
 8011dde:	1894      	adds	r4, r2, r2
 8011de0:	60bc      	str	r4, [r7, #8]
 8011de2:	415b      	adcs	r3, r3
 8011de4:	60fb      	str	r3, [r7, #12]
 8011de6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011dea:	1812      	adds	r2, r2, r0
 8011dec:	eb41 0303 	adc.w	r3, r1, r3
 8011df0:	f04f 0400 	mov.w	r4, #0
 8011df4:	f04f 0500 	mov.w	r5, #0
 8011df8:	00dd      	lsls	r5, r3, #3
 8011dfa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8011dfe:	00d4      	lsls	r4, r2, #3
 8011e00:	4622      	mov	r2, r4
 8011e02:	462b      	mov	r3, r5
 8011e04:	1814      	adds	r4, r2, r0
 8011e06:	64bc      	str	r4, [r7, #72]	; 0x48
 8011e08:	414b      	adcs	r3, r1
 8011e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011e0e:	685b      	ldr	r3, [r3, #4]
 8011e10:	4618      	mov	r0, r3
 8011e12:	f04f 0100 	mov.w	r1, #0
 8011e16:	f04f 0200 	mov.w	r2, #0
 8011e1a:	f04f 0300 	mov.w	r3, #0
 8011e1e:	008b      	lsls	r3, r1, #2
 8011e20:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8011e24:	0082      	lsls	r2, r0, #2
 8011e26:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8011e2a:	f7ee ff45 	bl	8000cb8 <__aeabi_uldivmod>
 8011e2e:	4602      	mov	r2, r0
 8011e30:	460b      	mov	r3, r1
 8011e32:	4b2f      	ldr	r3, [pc, #188]	; (8011ef0 <UART_SetConfig+0x38c>)
 8011e34:	fba3 1302 	umull	r1, r3, r3, r2
 8011e38:	095b      	lsrs	r3, r3, #5
 8011e3a:	2164      	movs	r1, #100	; 0x64
 8011e3c:	fb01 f303 	mul.w	r3, r1, r3
 8011e40:	1ad3      	subs	r3, r2, r3
 8011e42:	011b      	lsls	r3, r3, #4
 8011e44:	3332      	adds	r3, #50	; 0x32
 8011e46:	4a2a      	ldr	r2, [pc, #168]	; (8011ef0 <UART_SetConfig+0x38c>)
 8011e48:	fba2 2303 	umull	r2, r3, r2, r3
 8011e4c:	095b      	lsrs	r3, r3, #5
 8011e4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011e52:	441e      	add	r6, r3
 8011e54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011e56:	4618      	mov	r0, r3
 8011e58:	f04f 0100 	mov.w	r1, #0
 8011e5c:	4602      	mov	r2, r0
 8011e5e:	460b      	mov	r3, r1
 8011e60:	1894      	adds	r4, r2, r2
 8011e62:	603c      	str	r4, [r7, #0]
 8011e64:	415b      	adcs	r3, r3
 8011e66:	607b      	str	r3, [r7, #4]
 8011e68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e6c:	1812      	adds	r2, r2, r0
 8011e6e:	eb41 0303 	adc.w	r3, r1, r3
 8011e72:	f04f 0400 	mov.w	r4, #0
 8011e76:	f04f 0500 	mov.w	r5, #0
 8011e7a:	00dd      	lsls	r5, r3, #3
 8011e7c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8011e80:	00d4      	lsls	r4, r2, #3
 8011e82:	4622      	mov	r2, r4
 8011e84:	462b      	mov	r3, r5
 8011e86:	eb12 0a00 	adds.w	sl, r2, r0
 8011e8a:	eb43 0b01 	adc.w	fp, r3, r1
 8011e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011e90:	685b      	ldr	r3, [r3, #4]
 8011e92:	4618      	mov	r0, r3
 8011e94:	f04f 0100 	mov.w	r1, #0
 8011e98:	f04f 0200 	mov.w	r2, #0
 8011e9c:	f04f 0300 	mov.w	r3, #0
 8011ea0:	008b      	lsls	r3, r1, #2
 8011ea2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8011ea6:	0082      	lsls	r2, r0, #2
 8011ea8:	4650      	mov	r0, sl
 8011eaa:	4659      	mov	r1, fp
 8011eac:	f7ee ff04 	bl	8000cb8 <__aeabi_uldivmod>
 8011eb0:	4602      	mov	r2, r0
 8011eb2:	460b      	mov	r3, r1
 8011eb4:	4b0e      	ldr	r3, [pc, #56]	; (8011ef0 <UART_SetConfig+0x38c>)
 8011eb6:	fba3 1302 	umull	r1, r3, r3, r2
 8011eba:	095b      	lsrs	r3, r3, #5
 8011ebc:	2164      	movs	r1, #100	; 0x64
 8011ebe:	fb01 f303 	mul.w	r3, r1, r3
 8011ec2:	1ad3      	subs	r3, r2, r3
 8011ec4:	011b      	lsls	r3, r3, #4
 8011ec6:	3332      	adds	r3, #50	; 0x32
 8011ec8:	4a09      	ldr	r2, [pc, #36]	; (8011ef0 <UART_SetConfig+0x38c>)
 8011eca:	fba2 2303 	umull	r2, r3, r2, r3
 8011ece:	095b      	lsrs	r3, r3, #5
 8011ed0:	f003 020f 	and.w	r2, r3, #15
 8011ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	4432      	add	r2, r6
 8011eda:	609a      	str	r2, [r3, #8]
}
 8011edc:	bf00      	nop
 8011ede:	377c      	adds	r7, #124	; 0x7c
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ee6:	bf00      	nop
 8011ee8:	40011000 	.word	0x40011000
 8011eec:	40011400 	.word	0x40011400
 8011ef0:	51eb851f 	.word	0x51eb851f

08011ef4 <atof>:
 8011ef4:	2100      	movs	r1, #0
 8011ef6:	f001 bd03 	b.w	8013900 <strtod>

08011efa <atoi>:
 8011efa:	220a      	movs	r2, #10
 8011efc:	2100      	movs	r1, #0
 8011efe:	f001 bded 	b.w	8013adc <strtol>
	...

08011f04 <__errno>:
 8011f04:	4b01      	ldr	r3, [pc, #4]	; (8011f0c <__errno+0x8>)
 8011f06:	6818      	ldr	r0, [r3, #0]
 8011f08:	4770      	bx	lr
 8011f0a:	bf00      	nop
 8011f0c:	20000044 	.word	0x20000044

08011f10 <__libc_init_array>:
 8011f10:	b570      	push	{r4, r5, r6, lr}
 8011f12:	4d0d      	ldr	r5, [pc, #52]	; (8011f48 <__libc_init_array+0x38>)
 8011f14:	4c0d      	ldr	r4, [pc, #52]	; (8011f4c <__libc_init_array+0x3c>)
 8011f16:	1b64      	subs	r4, r4, r5
 8011f18:	10a4      	asrs	r4, r4, #2
 8011f1a:	2600      	movs	r6, #0
 8011f1c:	42a6      	cmp	r6, r4
 8011f1e:	d109      	bne.n	8011f34 <__libc_init_array+0x24>
 8011f20:	4d0b      	ldr	r5, [pc, #44]	; (8011f50 <__libc_init_array+0x40>)
 8011f22:	4c0c      	ldr	r4, [pc, #48]	; (8011f54 <__libc_init_array+0x44>)
 8011f24:	f004 fcb6 	bl	8016894 <_init>
 8011f28:	1b64      	subs	r4, r4, r5
 8011f2a:	10a4      	asrs	r4, r4, #2
 8011f2c:	2600      	movs	r6, #0
 8011f2e:	42a6      	cmp	r6, r4
 8011f30:	d105      	bne.n	8011f3e <__libc_init_array+0x2e>
 8011f32:	bd70      	pop	{r4, r5, r6, pc}
 8011f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f38:	4798      	blx	r3
 8011f3a:	3601      	adds	r6, #1
 8011f3c:	e7ee      	b.n	8011f1c <__libc_init_array+0xc>
 8011f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f42:	4798      	blx	r3
 8011f44:	3601      	adds	r6, #1
 8011f46:	e7f2      	b.n	8011f2e <__libc_init_array+0x1e>
 8011f48:	0802a9f8 	.word	0x0802a9f8
 8011f4c:	0802a9f8 	.word	0x0802a9f8
 8011f50:	0802a9f8 	.word	0x0802a9f8
 8011f54:	0802a9fc 	.word	0x0802a9fc

08011f58 <memset>:
 8011f58:	4402      	add	r2, r0
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	4293      	cmp	r3, r2
 8011f5e:	d100      	bne.n	8011f62 <memset+0xa>
 8011f60:	4770      	bx	lr
 8011f62:	f803 1b01 	strb.w	r1, [r3], #1
 8011f66:	e7f9      	b.n	8011f5c <memset+0x4>

08011f68 <__cvt>:
 8011f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f6c:	ec55 4b10 	vmov	r4, r5, d0
 8011f70:	2d00      	cmp	r5, #0
 8011f72:	460e      	mov	r6, r1
 8011f74:	4619      	mov	r1, r3
 8011f76:	462b      	mov	r3, r5
 8011f78:	bfbb      	ittet	lt
 8011f7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011f7e:	461d      	movlt	r5, r3
 8011f80:	2300      	movge	r3, #0
 8011f82:	232d      	movlt	r3, #45	; 0x2d
 8011f84:	700b      	strb	r3, [r1, #0]
 8011f86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011f8c:	4691      	mov	r9, r2
 8011f8e:	f023 0820 	bic.w	r8, r3, #32
 8011f92:	bfbc      	itt	lt
 8011f94:	4622      	movlt	r2, r4
 8011f96:	4614      	movlt	r4, r2
 8011f98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011f9c:	d005      	beq.n	8011faa <__cvt+0x42>
 8011f9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011fa2:	d100      	bne.n	8011fa6 <__cvt+0x3e>
 8011fa4:	3601      	adds	r6, #1
 8011fa6:	2102      	movs	r1, #2
 8011fa8:	e000      	b.n	8011fac <__cvt+0x44>
 8011faa:	2103      	movs	r1, #3
 8011fac:	ab03      	add	r3, sp, #12
 8011fae:	9301      	str	r3, [sp, #4]
 8011fb0:	ab02      	add	r3, sp, #8
 8011fb2:	9300      	str	r3, [sp, #0]
 8011fb4:	ec45 4b10 	vmov	d0, r4, r5
 8011fb8:	4653      	mov	r3, sl
 8011fba:	4632      	mov	r2, r6
 8011fbc:	f001 fe44 	bl	8013c48 <_dtoa_r>
 8011fc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011fc4:	4607      	mov	r7, r0
 8011fc6:	d102      	bne.n	8011fce <__cvt+0x66>
 8011fc8:	f019 0f01 	tst.w	r9, #1
 8011fcc:	d022      	beq.n	8012014 <__cvt+0xac>
 8011fce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011fd2:	eb07 0906 	add.w	r9, r7, r6
 8011fd6:	d110      	bne.n	8011ffa <__cvt+0x92>
 8011fd8:	783b      	ldrb	r3, [r7, #0]
 8011fda:	2b30      	cmp	r3, #48	; 0x30
 8011fdc:	d10a      	bne.n	8011ff4 <__cvt+0x8c>
 8011fde:	2200      	movs	r2, #0
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	4620      	mov	r0, r4
 8011fe4:	4629      	mov	r1, r5
 8011fe6:	f7ee fd87 	bl	8000af8 <__aeabi_dcmpeq>
 8011fea:	b918      	cbnz	r0, 8011ff4 <__cvt+0x8c>
 8011fec:	f1c6 0601 	rsb	r6, r6, #1
 8011ff0:	f8ca 6000 	str.w	r6, [sl]
 8011ff4:	f8da 3000 	ldr.w	r3, [sl]
 8011ff8:	4499      	add	r9, r3
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	4620      	mov	r0, r4
 8012000:	4629      	mov	r1, r5
 8012002:	f7ee fd79 	bl	8000af8 <__aeabi_dcmpeq>
 8012006:	b108      	cbz	r0, 801200c <__cvt+0xa4>
 8012008:	f8cd 900c 	str.w	r9, [sp, #12]
 801200c:	2230      	movs	r2, #48	; 0x30
 801200e:	9b03      	ldr	r3, [sp, #12]
 8012010:	454b      	cmp	r3, r9
 8012012:	d307      	bcc.n	8012024 <__cvt+0xbc>
 8012014:	9b03      	ldr	r3, [sp, #12]
 8012016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012018:	1bdb      	subs	r3, r3, r7
 801201a:	4638      	mov	r0, r7
 801201c:	6013      	str	r3, [r2, #0]
 801201e:	b004      	add	sp, #16
 8012020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012024:	1c59      	adds	r1, r3, #1
 8012026:	9103      	str	r1, [sp, #12]
 8012028:	701a      	strb	r2, [r3, #0]
 801202a:	e7f0      	b.n	801200e <__cvt+0xa6>

0801202c <__exponent>:
 801202c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801202e:	4603      	mov	r3, r0
 8012030:	2900      	cmp	r1, #0
 8012032:	bfb8      	it	lt
 8012034:	4249      	neglt	r1, r1
 8012036:	f803 2b02 	strb.w	r2, [r3], #2
 801203a:	bfb4      	ite	lt
 801203c:	222d      	movlt	r2, #45	; 0x2d
 801203e:	222b      	movge	r2, #43	; 0x2b
 8012040:	2909      	cmp	r1, #9
 8012042:	7042      	strb	r2, [r0, #1]
 8012044:	dd2a      	ble.n	801209c <__exponent+0x70>
 8012046:	f10d 0407 	add.w	r4, sp, #7
 801204a:	46a4      	mov	ip, r4
 801204c:	270a      	movs	r7, #10
 801204e:	46a6      	mov	lr, r4
 8012050:	460a      	mov	r2, r1
 8012052:	fb91 f6f7 	sdiv	r6, r1, r7
 8012056:	fb07 1516 	mls	r5, r7, r6, r1
 801205a:	3530      	adds	r5, #48	; 0x30
 801205c:	2a63      	cmp	r2, #99	; 0x63
 801205e:	f104 34ff 	add.w	r4, r4, #4294967295
 8012062:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012066:	4631      	mov	r1, r6
 8012068:	dcf1      	bgt.n	801204e <__exponent+0x22>
 801206a:	3130      	adds	r1, #48	; 0x30
 801206c:	f1ae 0502 	sub.w	r5, lr, #2
 8012070:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012074:	1c44      	adds	r4, r0, #1
 8012076:	4629      	mov	r1, r5
 8012078:	4561      	cmp	r1, ip
 801207a:	d30a      	bcc.n	8012092 <__exponent+0x66>
 801207c:	f10d 0209 	add.w	r2, sp, #9
 8012080:	eba2 020e 	sub.w	r2, r2, lr
 8012084:	4565      	cmp	r5, ip
 8012086:	bf88      	it	hi
 8012088:	2200      	movhi	r2, #0
 801208a:	4413      	add	r3, r2
 801208c:	1a18      	subs	r0, r3, r0
 801208e:	b003      	add	sp, #12
 8012090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012092:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012096:	f804 2f01 	strb.w	r2, [r4, #1]!
 801209a:	e7ed      	b.n	8012078 <__exponent+0x4c>
 801209c:	2330      	movs	r3, #48	; 0x30
 801209e:	3130      	adds	r1, #48	; 0x30
 80120a0:	7083      	strb	r3, [r0, #2]
 80120a2:	70c1      	strb	r1, [r0, #3]
 80120a4:	1d03      	adds	r3, r0, #4
 80120a6:	e7f1      	b.n	801208c <__exponent+0x60>

080120a8 <_printf_float>:
 80120a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120ac:	ed2d 8b02 	vpush	{d8}
 80120b0:	b08d      	sub	sp, #52	; 0x34
 80120b2:	460c      	mov	r4, r1
 80120b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80120b8:	4616      	mov	r6, r2
 80120ba:	461f      	mov	r7, r3
 80120bc:	4605      	mov	r5, r0
 80120be:	f002 ff31 	bl	8014f24 <_localeconv_r>
 80120c2:	f8d0 a000 	ldr.w	sl, [r0]
 80120c6:	4650      	mov	r0, sl
 80120c8:	f7ee f894 	bl	80001f4 <strlen>
 80120cc:	2300      	movs	r3, #0
 80120ce:	930a      	str	r3, [sp, #40]	; 0x28
 80120d0:	6823      	ldr	r3, [r4, #0]
 80120d2:	9305      	str	r3, [sp, #20]
 80120d4:	f8d8 3000 	ldr.w	r3, [r8]
 80120d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80120dc:	3307      	adds	r3, #7
 80120de:	f023 0307 	bic.w	r3, r3, #7
 80120e2:	f103 0208 	add.w	r2, r3, #8
 80120e6:	f8c8 2000 	str.w	r2, [r8]
 80120ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80120f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80120f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80120fa:	9307      	str	r3, [sp, #28]
 80120fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8012100:	ee08 0a10 	vmov	s16, r0
 8012104:	4b9f      	ldr	r3, [pc, #636]	; (8012384 <_printf_float+0x2dc>)
 8012106:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801210a:	f04f 32ff 	mov.w	r2, #4294967295
 801210e:	f7ee fd25 	bl	8000b5c <__aeabi_dcmpun>
 8012112:	bb88      	cbnz	r0, 8012178 <_printf_float+0xd0>
 8012114:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012118:	4b9a      	ldr	r3, [pc, #616]	; (8012384 <_printf_float+0x2dc>)
 801211a:	f04f 32ff 	mov.w	r2, #4294967295
 801211e:	f7ee fcff 	bl	8000b20 <__aeabi_dcmple>
 8012122:	bb48      	cbnz	r0, 8012178 <_printf_float+0xd0>
 8012124:	2200      	movs	r2, #0
 8012126:	2300      	movs	r3, #0
 8012128:	4640      	mov	r0, r8
 801212a:	4649      	mov	r1, r9
 801212c:	f7ee fcee 	bl	8000b0c <__aeabi_dcmplt>
 8012130:	b110      	cbz	r0, 8012138 <_printf_float+0x90>
 8012132:	232d      	movs	r3, #45	; 0x2d
 8012134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012138:	4b93      	ldr	r3, [pc, #588]	; (8012388 <_printf_float+0x2e0>)
 801213a:	4894      	ldr	r0, [pc, #592]	; (801238c <_printf_float+0x2e4>)
 801213c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012140:	bf94      	ite	ls
 8012142:	4698      	movls	r8, r3
 8012144:	4680      	movhi	r8, r0
 8012146:	2303      	movs	r3, #3
 8012148:	6123      	str	r3, [r4, #16]
 801214a:	9b05      	ldr	r3, [sp, #20]
 801214c:	f023 0204 	bic.w	r2, r3, #4
 8012150:	6022      	str	r2, [r4, #0]
 8012152:	f04f 0900 	mov.w	r9, #0
 8012156:	9700      	str	r7, [sp, #0]
 8012158:	4633      	mov	r3, r6
 801215a:	aa0b      	add	r2, sp, #44	; 0x2c
 801215c:	4621      	mov	r1, r4
 801215e:	4628      	mov	r0, r5
 8012160:	f000 f9d8 	bl	8012514 <_printf_common>
 8012164:	3001      	adds	r0, #1
 8012166:	f040 8090 	bne.w	801228a <_printf_float+0x1e2>
 801216a:	f04f 30ff 	mov.w	r0, #4294967295
 801216e:	b00d      	add	sp, #52	; 0x34
 8012170:	ecbd 8b02 	vpop	{d8}
 8012174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012178:	4642      	mov	r2, r8
 801217a:	464b      	mov	r3, r9
 801217c:	4640      	mov	r0, r8
 801217e:	4649      	mov	r1, r9
 8012180:	f7ee fcec 	bl	8000b5c <__aeabi_dcmpun>
 8012184:	b140      	cbz	r0, 8012198 <_printf_float+0xf0>
 8012186:	464b      	mov	r3, r9
 8012188:	2b00      	cmp	r3, #0
 801218a:	bfbc      	itt	lt
 801218c:	232d      	movlt	r3, #45	; 0x2d
 801218e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012192:	487f      	ldr	r0, [pc, #508]	; (8012390 <_printf_float+0x2e8>)
 8012194:	4b7f      	ldr	r3, [pc, #508]	; (8012394 <_printf_float+0x2ec>)
 8012196:	e7d1      	b.n	801213c <_printf_float+0x94>
 8012198:	6863      	ldr	r3, [r4, #4]
 801219a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801219e:	9206      	str	r2, [sp, #24]
 80121a0:	1c5a      	adds	r2, r3, #1
 80121a2:	d13f      	bne.n	8012224 <_printf_float+0x17c>
 80121a4:	2306      	movs	r3, #6
 80121a6:	6063      	str	r3, [r4, #4]
 80121a8:	9b05      	ldr	r3, [sp, #20]
 80121aa:	6861      	ldr	r1, [r4, #4]
 80121ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80121b0:	2300      	movs	r3, #0
 80121b2:	9303      	str	r3, [sp, #12]
 80121b4:	ab0a      	add	r3, sp, #40	; 0x28
 80121b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80121ba:	ab09      	add	r3, sp, #36	; 0x24
 80121bc:	ec49 8b10 	vmov	d0, r8, r9
 80121c0:	9300      	str	r3, [sp, #0]
 80121c2:	6022      	str	r2, [r4, #0]
 80121c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80121c8:	4628      	mov	r0, r5
 80121ca:	f7ff fecd 	bl	8011f68 <__cvt>
 80121ce:	9b06      	ldr	r3, [sp, #24]
 80121d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80121d2:	2b47      	cmp	r3, #71	; 0x47
 80121d4:	4680      	mov	r8, r0
 80121d6:	d108      	bne.n	80121ea <_printf_float+0x142>
 80121d8:	1cc8      	adds	r0, r1, #3
 80121da:	db02      	blt.n	80121e2 <_printf_float+0x13a>
 80121dc:	6863      	ldr	r3, [r4, #4]
 80121de:	4299      	cmp	r1, r3
 80121e0:	dd41      	ble.n	8012266 <_printf_float+0x1be>
 80121e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80121e6:	fa5f fb8b 	uxtb.w	fp, fp
 80121ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80121ee:	d820      	bhi.n	8012232 <_printf_float+0x18a>
 80121f0:	3901      	subs	r1, #1
 80121f2:	465a      	mov	r2, fp
 80121f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80121f8:	9109      	str	r1, [sp, #36]	; 0x24
 80121fa:	f7ff ff17 	bl	801202c <__exponent>
 80121fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012200:	1813      	adds	r3, r2, r0
 8012202:	2a01      	cmp	r2, #1
 8012204:	4681      	mov	r9, r0
 8012206:	6123      	str	r3, [r4, #16]
 8012208:	dc02      	bgt.n	8012210 <_printf_float+0x168>
 801220a:	6822      	ldr	r2, [r4, #0]
 801220c:	07d2      	lsls	r2, r2, #31
 801220e:	d501      	bpl.n	8012214 <_printf_float+0x16c>
 8012210:	3301      	adds	r3, #1
 8012212:	6123      	str	r3, [r4, #16]
 8012214:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012218:	2b00      	cmp	r3, #0
 801221a:	d09c      	beq.n	8012156 <_printf_float+0xae>
 801221c:	232d      	movs	r3, #45	; 0x2d
 801221e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012222:	e798      	b.n	8012156 <_printf_float+0xae>
 8012224:	9a06      	ldr	r2, [sp, #24]
 8012226:	2a47      	cmp	r2, #71	; 0x47
 8012228:	d1be      	bne.n	80121a8 <_printf_float+0x100>
 801222a:	2b00      	cmp	r3, #0
 801222c:	d1bc      	bne.n	80121a8 <_printf_float+0x100>
 801222e:	2301      	movs	r3, #1
 8012230:	e7b9      	b.n	80121a6 <_printf_float+0xfe>
 8012232:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012236:	d118      	bne.n	801226a <_printf_float+0x1c2>
 8012238:	2900      	cmp	r1, #0
 801223a:	6863      	ldr	r3, [r4, #4]
 801223c:	dd0b      	ble.n	8012256 <_printf_float+0x1ae>
 801223e:	6121      	str	r1, [r4, #16]
 8012240:	b913      	cbnz	r3, 8012248 <_printf_float+0x1a0>
 8012242:	6822      	ldr	r2, [r4, #0]
 8012244:	07d0      	lsls	r0, r2, #31
 8012246:	d502      	bpl.n	801224e <_printf_float+0x1a6>
 8012248:	3301      	adds	r3, #1
 801224a:	440b      	add	r3, r1
 801224c:	6123      	str	r3, [r4, #16]
 801224e:	65a1      	str	r1, [r4, #88]	; 0x58
 8012250:	f04f 0900 	mov.w	r9, #0
 8012254:	e7de      	b.n	8012214 <_printf_float+0x16c>
 8012256:	b913      	cbnz	r3, 801225e <_printf_float+0x1b6>
 8012258:	6822      	ldr	r2, [r4, #0]
 801225a:	07d2      	lsls	r2, r2, #31
 801225c:	d501      	bpl.n	8012262 <_printf_float+0x1ba>
 801225e:	3302      	adds	r3, #2
 8012260:	e7f4      	b.n	801224c <_printf_float+0x1a4>
 8012262:	2301      	movs	r3, #1
 8012264:	e7f2      	b.n	801224c <_printf_float+0x1a4>
 8012266:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801226a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801226c:	4299      	cmp	r1, r3
 801226e:	db05      	blt.n	801227c <_printf_float+0x1d4>
 8012270:	6823      	ldr	r3, [r4, #0]
 8012272:	6121      	str	r1, [r4, #16]
 8012274:	07d8      	lsls	r0, r3, #31
 8012276:	d5ea      	bpl.n	801224e <_printf_float+0x1a6>
 8012278:	1c4b      	adds	r3, r1, #1
 801227a:	e7e7      	b.n	801224c <_printf_float+0x1a4>
 801227c:	2900      	cmp	r1, #0
 801227e:	bfd4      	ite	le
 8012280:	f1c1 0202 	rsble	r2, r1, #2
 8012284:	2201      	movgt	r2, #1
 8012286:	4413      	add	r3, r2
 8012288:	e7e0      	b.n	801224c <_printf_float+0x1a4>
 801228a:	6823      	ldr	r3, [r4, #0]
 801228c:	055a      	lsls	r2, r3, #21
 801228e:	d407      	bmi.n	80122a0 <_printf_float+0x1f8>
 8012290:	6923      	ldr	r3, [r4, #16]
 8012292:	4642      	mov	r2, r8
 8012294:	4631      	mov	r1, r6
 8012296:	4628      	mov	r0, r5
 8012298:	47b8      	blx	r7
 801229a:	3001      	adds	r0, #1
 801229c:	d12c      	bne.n	80122f8 <_printf_float+0x250>
 801229e:	e764      	b.n	801216a <_printf_float+0xc2>
 80122a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80122a4:	f240 80e0 	bls.w	8012468 <_printf_float+0x3c0>
 80122a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80122ac:	2200      	movs	r2, #0
 80122ae:	2300      	movs	r3, #0
 80122b0:	f7ee fc22 	bl	8000af8 <__aeabi_dcmpeq>
 80122b4:	2800      	cmp	r0, #0
 80122b6:	d034      	beq.n	8012322 <_printf_float+0x27a>
 80122b8:	4a37      	ldr	r2, [pc, #220]	; (8012398 <_printf_float+0x2f0>)
 80122ba:	2301      	movs	r3, #1
 80122bc:	4631      	mov	r1, r6
 80122be:	4628      	mov	r0, r5
 80122c0:	47b8      	blx	r7
 80122c2:	3001      	adds	r0, #1
 80122c4:	f43f af51 	beq.w	801216a <_printf_float+0xc2>
 80122c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80122cc:	429a      	cmp	r2, r3
 80122ce:	db02      	blt.n	80122d6 <_printf_float+0x22e>
 80122d0:	6823      	ldr	r3, [r4, #0]
 80122d2:	07d8      	lsls	r0, r3, #31
 80122d4:	d510      	bpl.n	80122f8 <_printf_float+0x250>
 80122d6:	ee18 3a10 	vmov	r3, s16
 80122da:	4652      	mov	r2, sl
 80122dc:	4631      	mov	r1, r6
 80122de:	4628      	mov	r0, r5
 80122e0:	47b8      	blx	r7
 80122e2:	3001      	adds	r0, #1
 80122e4:	f43f af41 	beq.w	801216a <_printf_float+0xc2>
 80122e8:	f04f 0800 	mov.w	r8, #0
 80122ec:	f104 091a 	add.w	r9, r4, #26
 80122f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122f2:	3b01      	subs	r3, #1
 80122f4:	4543      	cmp	r3, r8
 80122f6:	dc09      	bgt.n	801230c <_printf_float+0x264>
 80122f8:	6823      	ldr	r3, [r4, #0]
 80122fa:	079b      	lsls	r3, r3, #30
 80122fc:	f100 8105 	bmi.w	801250a <_printf_float+0x462>
 8012300:	68e0      	ldr	r0, [r4, #12]
 8012302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012304:	4298      	cmp	r0, r3
 8012306:	bfb8      	it	lt
 8012308:	4618      	movlt	r0, r3
 801230a:	e730      	b.n	801216e <_printf_float+0xc6>
 801230c:	2301      	movs	r3, #1
 801230e:	464a      	mov	r2, r9
 8012310:	4631      	mov	r1, r6
 8012312:	4628      	mov	r0, r5
 8012314:	47b8      	blx	r7
 8012316:	3001      	adds	r0, #1
 8012318:	f43f af27 	beq.w	801216a <_printf_float+0xc2>
 801231c:	f108 0801 	add.w	r8, r8, #1
 8012320:	e7e6      	b.n	80122f0 <_printf_float+0x248>
 8012322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012324:	2b00      	cmp	r3, #0
 8012326:	dc39      	bgt.n	801239c <_printf_float+0x2f4>
 8012328:	4a1b      	ldr	r2, [pc, #108]	; (8012398 <_printf_float+0x2f0>)
 801232a:	2301      	movs	r3, #1
 801232c:	4631      	mov	r1, r6
 801232e:	4628      	mov	r0, r5
 8012330:	47b8      	blx	r7
 8012332:	3001      	adds	r0, #1
 8012334:	f43f af19 	beq.w	801216a <_printf_float+0xc2>
 8012338:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801233c:	4313      	orrs	r3, r2
 801233e:	d102      	bne.n	8012346 <_printf_float+0x29e>
 8012340:	6823      	ldr	r3, [r4, #0]
 8012342:	07d9      	lsls	r1, r3, #31
 8012344:	d5d8      	bpl.n	80122f8 <_printf_float+0x250>
 8012346:	ee18 3a10 	vmov	r3, s16
 801234a:	4652      	mov	r2, sl
 801234c:	4631      	mov	r1, r6
 801234e:	4628      	mov	r0, r5
 8012350:	47b8      	blx	r7
 8012352:	3001      	adds	r0, #1
 8012354:	f43f af09 	beq.w	801216a <_printf_float+0xc2>
 8012358:	f04f 0900 	mov.w	r9, #0
 801235c:	f104 0a1a 	add.w	sl, r4, #26
 8012360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012362:	425b      	negs	r3, r3
 8012364:	454b      	cmp	r3, r9
 8012366:	dc01      	bgt.n	801236c <_printf_float+0x2c4>
 8012368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801236a:	e792      	b.n	8012292 <_printf_float+0x1ea>
 801236c:	2301      	movs	r3, #1
 801236e:	4652      	mov	r2, sl
 8012370:	4631      	mov	r1, r6
 8012372:	4628      	mov	r0, r5
 8012374:	47b8      	blx	r7
 8012376:	3001      	adds	r0, #1
 8012378:	f43f aef7 	beq.w	801216a <_printf_float+0xc2>
 801237c:	f109 0901 	add.w	r9, r9, #1
 8012380:	e7ee      	b.n	8012360 <_printf_float+0x2b8>
 8012382:	bf00      	nop
 8012384:	7fefffff 	.word	0x7fefffff
 8012388:	0802a4e4 	.word	0x0802a4e4
 801238c:	0802a4e8 	.word	0x0802a4e8
 8012390:	0802a4f0 	.word	0x0802a4f0
 8012394:	0802a4ec 	.word	0x0802a4ec
 8012398:	0802a4f4 	.word	0x0802a4f4
 801239c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801239e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80123a0:	429a      	cmp	r2, r3
 80123a2:	bfa8      	it	ge
 80123a4:	461a      	movge	r2, r3
 80123a6:	2a00      	cmp	r2, #0
 80123a8:	4691      	mov	r9, r2
 80123aa:	dc37      	bgt.n	801241c <_printf_float+0x374>
 80123ac:	f04f 0b00 	mov.w	fp, #0
 80123b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80123b4:	f104 021a 	add.w	r2, r4, #26
 80123b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80123ba:	9305      	str	r3, [sp, #20]
 80123bc:	eba3 0309 	sub.w	r3, r3, r9
 80123c0:	455b      	cmp	r3, fp
 80123c2:	dc33      	bgt.n	801242c <_printf_float+0x384>
 80123c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80123c8:	429a      	cmp	r2, r3
 80123ca:	db3b      	blt.n	8012444 <_printf_float+0x39c>
 80123cc:	6823      	ldr	r3, [r4, #0]
 80123ce:	07da      	lsls	r2, r3, #31
 80123d0:	d438      	bmi.n	8012444 <_printf_float+0x39c>
 80123d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123d4:	9b05      	ldr	r3, [sp, #20]
 80123d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80123d8:	1ad3      	subs	r3, r2, r3
 80123da:	eba2 0901 	sub.w	r9, r2, r1
 80123de:	4599      	cmp	r9, r3
 80123e0:	bfa8      	it	ge
 80123e2:	4699      	movge	r9, r3
 80123e4:	f1b9 0f00 	cmp.w	r9, #0
 80123e8:	dc35      	bgt.n	8012456 <_printf_float+0x3ae>
 80123ea:	f04f 0800 	mov.w	r8, #0
 80123ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80123f2:	f104 0a1a 	add.w	sl, r4, #26
 80123f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80123fa:	1a9b      	subs	r3, r3, r2
 80123fc:	eba3 0309 	sub.w	r3, r3, r9
 8012400:	4543      	cmp	r3, r8
 8012402:	f77f af79 	ble.w	80122f8 <_printf_float+0x250>
 8012406:	2301      	movs	r3, #1
 8012408:	4652      	mov	r2, sl
 801240a:	4631      	mov	r1, r6
 801240c:	4628      	mov	r0, r5
 801240e:	47b8      	blx	r7
 8012410:	3001      	adds	r0, #1
 8012412:	f43f aeaa 	beq.w	801216a <_printf_float+0xc2>
 8012416:	f108 0801 	add.w	r8, r8, #1
 801241a:	e7ec      	b.n	80123f6 <_printf_float+0x34e>
 801241c:	4613      	mov	r3, r2
 801241e:	4631      	mov	r1, r6
 8012420:	4642      	mov	r2, r8
 8012422:	4628      	mov	r0, r5
 8012424:	47b8      	blx	r7
 8012426:	3001      	adds	r0, #1
 8012428:	d1c0      	bne.n	80123ac <_printf_float+0x304>
 801242a:	e69e      	b.n	801216a <_printf_float+0xc2>
 801242c:	2301      	movs	r3, #1
 801242e:	4631      	mov	r1, r6
 8012430:	4628      	mov	r0, r5
 8012432:	9205      	str	r2, [sp, #20]
 8012434:	47b8      	blx	r7
 8012436:	3001      	adds	r0, #1
 8012438:	f43f ae97 	beq.w	801216a <_printf_float+0xc2>
 801243c:	9a05      	ldr	r2, [sp, #20]
 801243e:	f10b 0b01 	add.w	fp, fp, #1
 8012442:	e7b9      	b.n	80123b8 <_printf_float+0x310>
 8012444:	ee18 3a10 	vmov	r3, s16
 8012448:	4652      	mov	r2, sl
 801244a:	4631      	mov	r1, r6
 801244c:	4628      	mov	r0, r5
 801244e:	47b8      	blx	r7
 8012450:	3001      	adds	r0, #1
 8012452:	d1be      	bne.n	80123d2 <_printf_float+0x32a>
 8012454:	e689      	b.n	801216a <_printf_float+0xc2>
 8012456:	9a05      	ldr	r2, [sp, #20]
 8012458:	464b      	mov	r3, r9
 801245a:	4442      	add	r2, r8
 801245c:	4631      	mov	r1, r6
 801245e:	4628      	mov	r0, r5
 8012460:	47b8      	blx	r7
 8012462:	3001      	adds	r0, #1
 8012464:	d1c1      	bne.n	80123ea <_printf_float+0x342>
 8012466:	e680      	b.n	801216a <_printf_float+0xc2>
 8012468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801246a:	2a01      	cmp	r2, #1
 801246c:	dc01      	bgt.n	8012472 <_printf_float+0x3ca>
 801246e:	07db      	lsls	r3, r3, #31
 8012470:	d538      	bpl.n	80124e4 <_printf_float+0x43c>
 8012472:	2301      	movs	r3, #1
 8012474:	4642      	mov	r2, r8
 8012476:	4631      	mov	r1, r6
 8012478:	4628      	mov	r0, r5
 801247a:	47b8      	blx	r7
 801247c:	3001      	adds	r0, #1
 801247e:	f43f ae74 	beq.w	801216a <_printf_float+0xc2>
 8012482:	ee18 3a10 	vmov	r3, s16
 8012486:	4652      	mov	r2, sl
 8012488:	4631      	mov	r1, r6
 801248a:	4628      	mov	r0, r5
 801248c:	47b8      	blx	r7
 801248e:	3001      	adds	r0, #1
 8012490:	f43f ae6b 	beq.w	801216a <_printf_float+0xc2>
 8012494:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012498:	2200      	movs	r2, #0
 801249a:	2300      	movs	r3, #0
 801249c:	f7ee fb2c 	bl	8000af8 <__aeabi_dcmpeq>
 80124a0:	b9d8      	cbnz	r0, 80124da <_printf_float+0x432>
 80124a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124a4:	f108 0201 	add.w	r2, r8, #1
 80124a8:	3b01      	subs	r3, #1
 80124aa:	4631      	mov	r1, r6
 80124ac:	4628      	mov	r0, r5
 80124ae:	47b8      	blx	r7
 80124b0:	3001      	adds	r0, #1
 80124b2:	d10e      	bne.n	80124d2 <_printf_float+0x42a>
 80124b4:	e659      	b.n	801216a <_printf_float+0xc2>
 80124b6:	2301      	movs	r3, #1
 80124b8:	4652      	mov	r2, sl
 80124ba:	4631      	mov	r1, r6
 80124bc:	4628      	mov	r0, r5
 80124be:	47b8      	blx	r7
 80124c0:	3001      	adds	r0, #1
 80124c2:	f43f ae52 	beq.w	801216a <_printf_float+0xc2>
 80124c6:	f108 0801 	add.w	r8, r8, #1
 80124ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124cc:	3b01      	subs	r3, #1
 80124ce:	4543      	cmp	r3, r8
 80124d0:	dcf1      	bgt.n	80124b6 <_printf_float+0x40e>
 80124d2:	464b      	mov	r3, r9
 80124d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80124d8:	e6dc      	b.n	8012294 <_printf_float+0x1ec>
 80124da:	f04f 0800 	mov.w	r8, #0
 80124de:	f104 0a1a 	add.w	sl, r4, #26
 80124e2:	e7f2      	b.n	80124ca <_printf_float+0x422>
 80124e4:	2301      	movs	r3, #1
 80124e6:	4642      	mov	r2, r8
 80124e8:	e7df      	b.n	80124aa <_printf_float+0x402>
 80124ea:	2301      	movs	r3, #1
 80124ec:	464a      	mov	r2, r9
 80124ee:	4631      	mov	r1, r6
 80124f0:	4628      	mov	r0, r5
 80124f2:	47b8      	blx	r7
 80124f4:	3001      	adds	r0, #1
 80124f6:	f43f ae38 	beq.w	801216a <_printf_float+0xc2>
 80124fa:	f108 0801 	add.w	r8, r8, #1
 80124fe:	68e3      	ldr	r3, [r4, #12]
 8012500:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012502:	1a5b      	subs	r3, r3, r1
 8012504:	4543      	cmp	r3, r8
 8012506:	dcf0      	bgt.n	80124ea <_printf_float+0x442>
 8012508:	e6fa      	b.n	8012300 <_printf_float+0x258>
 801250a:	f04f 0800 	mov.w	r8, #0
 801250e:	f104 0919 	add.w	r9, r4, #25
 8012512:	e7f4      	b.n	80124fe <_printf_float+0x456>

08012514 <_printf_common>:
 8012514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012518:	4616      	mov	r6, r2
 801251a:	4699      	mov	r9, r3
 801251c:	688a      	ldr	r2, [r1, #8]
 801251e:	690b      	ldr	r3, [r1, #16]
 8012520:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012524:	4293      	cmp	r3, r2
 8012526:	bfb8      	it	lt
 8012528:	4613      	movlt	r3, r2
 801252a:	6033      	str	r3, [r6, #0]
 801252c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012530:	4607      	mov	r7, r0
 8012532:	460c      	mov	r4, r1
 8012534:	b10a      	cbz	r2, 801253a <_printf_common+0x26>
 8012536:	3301      	adds	r3, #1
 8012538:	6033      	str	r3, [r6, #0]
 801253a:	6823      	ldr	r3, [r4, #0]
 801253c:	0699      	lsls	r1, r3, #26
 801253e:	bf42      	ittt	mi
 8012540:	6833      	ldrmi	r3, [r6, #0]
 8012542:	3302      	addmi	r3, #2
 8012544:	6033      	strmi	r3, [r6, #0]
 8012546:	6825      	ldr	r5, [r4, #0]
 8012548:	f015 0506 	ands.w	r5, r5, #6
 801254c:	d106      	bne.n	801255c <_printf_common+0x48>
 801254e:	f104 0a19 	add.w	sl, r4, #25
 8012552:	68e3      	ldr	r3, [r4, #12]
 8012554:	6832      	ldr	r2, [r6, #0]
 8012556:	1a9b      	subs	r3, r3, r2
 8012558:	42ab      	cmp	r3, r5
 801255a:	dc26      	bgt.n	80125aa <_printf_common+0x96>
 801255c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012560:	1e13      	subs	r3, r2, #0
 8012562:	6822      	ldr	r2, [r4, #0]
 8012564:	bf18      	it	ne
 8012566:	2301      	movne	r3, #1
 8012568:	0692      	lsls	r2, r2, #26
 801256a:	d42b      	bmi.n	80125c4 <_printf_common+0xb0>
 801256c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012570:	4649      	mov	r1, r9
 8012572:	4638      	mov	r0, r7
 8012574:	47c0      	blx	r8
 8012576:	3001      	adds	r0, #1
 8012578:	d01e      	beq.n	80125b8 <_printf_common+0xa4>
 801257a:	6823      	ldr	r3, [r4, #0]
 801257c:	68e5      	ldr	r5, [r4, #12]
 801257e:	6832      	ldr	r2, [r6, #0]
 8012580:	f003 0306 	and.w	r3, r3, #6
 8012584:	2b04      	cmp	r3, #4
 8012586:	bf08      	it	eq
 8012588:	1aad      	subeq	r5, r5, r2
 801258a:	68a3      	ldr	r3, [r4, #8]
 801258c:	6922      	ldr	r2, [r4, #16]
 801258e:	bf0c      	ite	eq
 8012590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012594:	2500      	movne	r5, #0
 8012596:	4293      	cmp	r3, r2
 8012598:	bfc4      	itt	gt
 801259a:	1a9b      	subgt	r3, r3, r2
 801259c:	18ed      	addgt	r5, r5, r3
 801259e:	2600      	movs	r6, #0
 80125a0:	341a      	adds	r4, #26
 80125a2:	42b5      	cmp	r5, r6
 80125a4:	d11a      	bne.n	80125dc <_printf_common+0xc8>
 80125a6:	2000      	movs	r0, #0
 80125a8:	e008      	b.n	80125bc <_printf_common+0xa8>
 80125aa:	2301      	movs	r3, #1
 80125ac:	4652      	mov	r2, sl
 80125ae:	4649      	mov	r1, r9
 80125b0:	4638      	mov	r0, r7
 80125b2:	47c0      	blx	r8
 80125b4:	3001      	adds	r0, #1
 80125b6:	d103      	bne.n	80125c0 <_printf_common+0xac>
 80125b8:	f04f 30ff 	mov.w	r0, #4294967295
 80125bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125c0:	3501      	adds	r5, #1
 80125c2:	e7c6      	b.n	8012552 <_printf_common+0x3e>
 80125c4:	18e1      	adds	r1, r4, r3
 80125c6:	1c5a      	adds	r2, r3, #1
 80125c8:	2030      	movs	r0, #48	; 0x30
 80125ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80125ce:	4422      	add	r2, r4
 80125d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80125d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80125d8:	3302      	adds	r3, #2
 80125da:	e7c7      	b.n	801256c <_printf_common+0x58>
 80125dc:	2301      	movs	r3, #1
 80125de:	4622      	mov	r2, r4
 80125e0:	4649      	mov	r1, r9
 80125e2:	4638      	mov	r0, r7
 80125e4:	47c0      	blx	r8
 80125e6:	3001      	adds	r0, #1
 80125e8:	d0e6      	beq.n	80125b8 <_printf_common+0xa4>
 80125ea:	3601      	adds	r6, #1
 80125ec:	e7d9      	b.n	80125a2 <_printf_common+0x8e>
	...

080125f0 <_printf_i>:
 80125f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80125f4:	460c      	mov	r4, r1
 80125f6:	4691      	mov	r9, r2
 80125f8:	7e27      	ldrb	r7, [r4, #24]
 80125fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80125fc:	2f78      	cmp	r7, #120	; 0x78
 80125fe:	4680      	mov	r8, r0
 8012600:	469a      	mov	sl, r3
 8012602:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012606:	d807      	bhi.n	8012618 <_printf_i+0x28>
 8012608:	2f62      	cmp	r7, #98	; 0x62
 801260a:	d80a      	bhi.n	8012622 <_printf_i+0x32>
 801260c:	2f00      	cmp	r7, #0
 801260e:	f000 80d8 	beq.w	80127c2 <_printf_i+0x1d2>
 8012612:	2f58      	cmp	r7, #88	; 0x58
 8012614:	f000 80a3 	beq.w	801275e <_printf_i+0x16e>
 8012618:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801261c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012620:	e03a      	b.n	8012698 <_printf_i+0xa8>
 8012622:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012626:	2b15      	cmp	r3, #21
 8012628:	d8f6      	bhi.n	8012618 <_printf_i+0x28>
 801262a:	a001      	add	r0, pc, #4	; (adr r0, 8012630 <_printf_i+0x40>)
 801262c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012630:	08012689 	.word	0x08012689
 8012634:	0801269d 	.word	0x0801269d
 8012638:	08012619 	.word	0x08012619
 801263c:	08012619 	.word	0x08012619
 8012640:	08012619 	.word	0x08012619
 8012644:	08012619 	.word	0x08012619
 8012648:	0801269d 	.word	0x0801269d
 801264c:	08012619 	.word	0x08012619
 8012650:	08012619 	.word	0x08012619
 8012654:	08012619 	.word	0x08012619
 8012658:	08012619 	.word	0x08012619
 801265c:	080127a9 	.word	0x080127a9
 8012660:	080126cd 	.word	0x080126cd
 8012664:	0801278b 	.word	0x0801278b
 8012668:	08012619 	.word	0x08012619
 801266c:	08012619 	.word	0x08012619
 8012670:	080127cb 	.word	0x080127cb
 8012674:	08012619 	.word	0x08012619
 8012678:	080126cd 	.word	0x080126cd
 801267c:	08012619 	.word	0x08012619
 8012680:	08012619 	.word	0x08012619
 8012684:	08012793 	.word	0x08012793
 8012688:	680b      	ldr	r3, [r1, #0]
 801268a:	1d1a      	adds	r2, r3, #4
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	600a      	str	r2, [r1, #0]
 8012690:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012698:	2301      	movs	r3, #1
 801269a:	e0a3      	b.n	80127e4 <_printf_i+0x1f4>
 801269c:	6825      	ldr	r5, [r4, #0]
 801269e:	6808      	ldr	r0, [r1, #0]
 80126a0:	062e      	lsls	r6, r5, #24
 80126a2:	f100 0304 	add.w	r3, r0, #4
 80126a6:	d50a      	bpl.n	80126be <_printf_i+0xce>
 80126a8:	6805      	ldr	r5, [r0, #0]
 80126aa:	600b      	str	r3, [r1, #0]
 80126ac:	2d00      	cmp	r5, #0
 80126ae:	da03      	bge.n	80126b8 <_printf_i+0xc8>
 80126b0:	232d      	movs	r3, #45	; 0x2d
 80126b2:	426d      	negs	r5, r5
 80126b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80126b8:	485e      	ldr	r0, [pc, #376]	; (8012834 <_printf_i+0x244>)
 80126ba:	230a      	movs	r3, #10
 80126bc:	e019      	b.n	80126f2 <_printf_i+0x102>
 80126be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80126c2:	6805      	ldr	r5, [r0, #0]
 80126c4:	600b      	str	r3, [r1, #0]
 80126c6:	bf18      	it	ne
 80126c8:	b22d      	sxthne	r5, r5
 80126ca:	e7ef      	b.n	80126ac <_printf_i+0xbc>
 80126cc:	680b      	ldr	r3, [r1, #0]
 80126ce:	6825      	ldr	r5, [r4, #0]
 80126d0:	1d18      	adds	r0, r3, #4
 80126d2:	6008      	str	r0, [r1, #0]
 80126d4:	0628      	lsls	r0, r5, #24
 80126d6:	d501      	bpl.n	80126dc <_printf_i+0xec>
 80126d8:	681d      	ldr	r5, [r3, #0]
 80126da:	e002      	b.n	80126e2 <_printf_i+0xf2>
 80126dc:	0669      	lsls	r1, r5, #25
 80126de:	d5fb      	bpl.n	80126d8 <_printf_i+0xe8>
 80126e0:	881d      	ldrh	r5, [r3, #0]
 80126e2:	4854      	ldr	r0, [pc, #336]	; (8012834 <_printf_i+0x244>)
 80126e4:	2f6f      	cmp	r7, #111	; 0x6f
 80126e6:	bf0c      	ite	eq
 80126e8:	2308      	moveq	r3, #8
 80126ea:	230a      	movne	r3, #10
 80126ec:	2100      	movs	r1, #0
 80126ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80126f2:	6866      	ldr	r6, [r4, #4]
 80126f4:	60a6      	str	r6, [r4, #8]
 80126f6:	2e00      	cmp	r6, #0
 80126f8:	bfa2      	ittt	ge
 80126fa:	6821      	ldrge	r1, [r4, #0]
 80126fc:	f021 0104 	bicge.w	r1, r1, #4
 8012700:	6021      	strge	r1, [r4, #0]
 8012702:	b90d      	cbnz	r5, 8012708 <_printf_i+0x118>
 8012704:	2e00      	cmp	r6, #0
 8012706:	d04d      	beq.n	80127a4 <_printf_i+0x1b4>
 8012708:	4616      	mov	r6, r2
 801270a:	fbb5 f1f3 	udiv	r1, r5, r3
 801270e:	fb03 5711 	mls	r7, r3, r1, r5
 8012712:	5dc7      	ldrb	r7, [r0, r7]
 8012714:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012718:	462f      	mov	r7, r5
 801271a:	42bb      	cmp	r3, r7
 801271c:	460d      	mov	r5, r1
 801271e:	d9f4      	bls.n	801270a <_printf_i+0x11a>
 8012720:	2b08      	cmp	r3, #8
 8012722:	d10b      	bne.n	801273c <_printf_i+0x14c>
 8012724:	6823      	ldr	r3, [r4, #0]
 8012726:	07df      	lsls	r7, r3, #31
 8012728:	d508      	bpl.n	801273c <_printf_i+0x14c>
 801272a:	6923      	ldr	r3, [r4, #16]
 801272c:	6861      	ldr	r1, [r4, #4]
 801272e:	4299      	cmp	r1, r3
 8012730:	bfde      	ittt	le
 8012732:	2330      	movle	r3, #48	; 0x30
 8012734:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012738:	f106 36ff 	addle.w	r6, r6, #4294967295
 801273c:	1b92      	subs	r2, r2, r6
 801273e:	6122      	str	r2, [r4, #16]
 8012740:	f8cd a000 	str.w	sl, [sp]
 8012744:	464b      	mov	r3, r9
 8012746:	aa03      	add	r2, sp, #12
 8012748:	4621      	mov	r1, r4
 801274a:	4640      	mov	r0, r8
 801274c:	f7ff fee2 	bl	8012514 <_printf_common>
 8012750:	3001      	adds	r0, #1
 8012752:	d14c      	bne.n	80127ee <_printf_i+0x1fe>
 8012754:	f04f 30ff 	mov.w	r0, #4294967295
 8012758:	b004      	add	sp, #16
 801275a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801275e:	4835      	ldr	r0, [pc, #212]	; (8012834 <_printf_i+0x244>)
 8012760:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012764:	6823      	ldr	r3, [r4, #0]
 8012766:	680e      	ldr	r6, [r1, #0]
 8012768:	061f      	lsls	r7, r3, #24
 801276a:	f856 5b04 	ldr.w	r5, [r6], #4
 801276e:	600e      	str	r6, [r1, #0]
 8012770:	d514      	bpl.n	801279c <_printf_i+0x1ac>
 8012772:	07d9      	lsls	r1, r3, #31
 8012774:	bf44      	itt	mi
 8012776:	f043 0320 	orrmi.w	r3, r3, #32
 801277a:	6023      	strmi	r3, [r4, #0]
 801277c:	b91d      	cbnz	r5, 8012786 <_printf_i+0x196>
 801277e:	6823      	ldr	r3, [r4, #0]
 8012780:	f023 0320 	bic.w	r3, r3, #32
 8012784:	6023      	str	r3, [r4, #0]
 8012786:	2310      	movs	r3, #16
 8012788:	e7b0      	b.n	80126ec <_printf_i+0xfc>
 801278a:	6823      	ldr	r3, [r4, #0]
 801278c:	f043 0320 	orr.w	r3, r3, #32
 8012790:	6023      	str	r3, [r4, #0]
 8012792:	2378      	movs	r3, #120	; 0x78
 8012794:	4828      	ldr	r0, [pc, #160]	; (8012838 <_printf_i+0x248>)
 8012796:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801279a:	e7e3      	b.n	8012764 <_printf_i+0x174>
 801279c:	065e      	lsls	r6, r3, #25
 801279e:	bf48      	it	mi
 80127a0:	b2ad      	uxthmi	r5, r5
 80127a2:	e7e6      	b.n	8012772 <_printf_i+0x182>
 80127a4:	4616      	mov	r6, r2
 80127a6:	e7bb      	b.n	8012720 <_printf_i+0x130>
 80127a8:	680b      	ldr	r3, [r1, #0]
 80127aa:	6826      	ldr	r6, [r4, #0]
 80127ac:	6960      	ldr	r0, [r4, #20]
 80127ae:	1d1d      	adds	r5, r3, #4
 80127b0:	600d      	str	r5, [r1, #0]
 80127b2:	0635      	lsls	r5, r6, #24
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	d501      	bpl.n	80127bc <_printf_i+0x1cc>
 80127b8:	6018      	str	r0, [r3, #0]
 80127ba:	e002      	b.n	80127c2 <_printf_i+0x1d2>
 80127bc:	0671      	lsls	r1, r6, #25
 80127be:	d5fb      	bpl.n	80127b8 <_printf_i+0x1c8>
 80127c0:	8018      	strh	r0, [r3, #0]
 80127c2:	2300      	movs	r3, #0
 80127c4:	6123      	str	r3, [r4, #16]
 80127c6:	4616      	mov	r6, r2
 80127c8:	e7ba      	b.n	8012740 <_printf_i+0x150>
 80127ca:	680b      	ldr	r3, [r1, #0]
 80127cc:	1d1a      	adds	r2, r3, #4
 80127ce:	600a      	str	r2, [r1, #0]
 80127d0:	681e      	ldr	r6, [r3, #0]
 80127d2:	6862      	ldr	r2, [r4, #4]
 80127d4:	2100      	movs	r1, #0
 80127d6:	4630      	mov	r0, r6
 80127d8:	f7ed fd1a 	bl	8000210 <memchr>
 80127dc:	b108      	cbz	r0, 80127e2 <_printf_i+0x1f2>
 80127de:	1b80      	subs	r0, r0, r6
 80127e0:	6060      	str	r0, [r4, #4]
 80127e2:	6863      	ldr	r3, [r4, #4]
 80127e4:	6123      	str	r3, [r4, #16]
 80127e6:	2300      	movs	r3, #0
 80127e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80127ec:	e7a8      	b.n	8012740 <_printf_i+0x150>
 80127ee:	6923      	ldr	r3, [r4, #16]
 80127f0:	4632      	mov	r2, r6
 80127f2:	4649      	mov	r1, r9
 80127f4:	4640      	mov	r0, r8
 80127f6:	47d0      	blx	sl
 80127f8:	3001      	adds	r0, #1
 80127fa:	d0ab      	beq.n	8012754 <_printf_i+0x164>
 80127fc:	6823      	ldr	r3, [r4, #0]
 80127fe:	079b      	lsls	r3, r3, #30
 8012800:	d413      	bmi.n	801282a <_printf_i+0x23a>
 8012802:	68e0      	ldr	r0, [r4, #12]
 8012804:	9b03      	ldr	r3, [sp, #12]
 8012806:	4298      	cmp	r0, r3
 8012808:	bfb8      	it	lt
 801280a:	4618      	movlt	r0, r3
 801280c:	e7a4      	b.n	8012758 <_printf_i+0x168>
 801280e:	2301      	movs	r3, #1
 8012810:	4632      	mov	r2, r6
 8012812:	4649      	mov	r1, r9
 8012814:	4640      	mov	r0, r8
 8012816:	47d0      	blx	sl
 8012818:	3001      	adds	r0, #1
 801281a:	d09b      	beq.n	8012754 <_printf_i+0x164>
 801281c:	3501      	adds	r5, #1
 801281e:	68e3      	ldr	r3, [r4, #12]
 8012820:	9903      	ldr	r1, [sp, #12]
 8012822:	1a5b      	subs	r3, r3, r1
 8012824:	42ab      	cmp	r3, r5
 8012826:	dcf2      	bgt.n	801280e <_printf_i+0x21e>
 8012828:	e7eb      	b.n	8012802 <_printf_i+0x212>
 801282a:	2500      	movs	r5, #0
 801282c:	f104 0619 	add.w	r6, r4, #25
 8012830:	e7f5      	b.n	801281e <_printf_i+0x22e>
 8012832:	bf00      	nop
 8012834:	0802a4f6 	.word	0x0802a4f6
 8012838:	0802a507 	.word	0x0802a507

0801283c <_scanf_float>:
 801283c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012840:	b087      	sub	sp, #28
 8012842:	4617      	mov	r7, r2
 8012844:	9303      	str	r3, [sp, #12]
 8012846:	688b      	ldr	r3, [r1, #8]
 8012848:	1e5a      	subs	r2, r3, #1
 801284a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801284e:	bf83      	ittte	hi
 8012850:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012854:	195b      	addhi	r3, r3, r5
 8012856:	9302      	strhi	r3, [sp, #8]
 8012858:	2300      	movls	r3, #0
 801285a:	bf86      	itte	hi
 801285c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012860:	608b      	strhi	r3, [r1, #8]
 8012862:	9302      	strls	r3, [sp, #8]
 8012864:	680b      	ldr	r3, [r1, #0]
 8012866:	468b      	mov	fp, r1
 8012868:	2500      	movs	r5, #0
 801286a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801286e:	f84b 3b1c 	str.w	r3, [fp], #28
 8012872:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012876:	4680      	mov	r8, r0
 8012878:	460c      	mov	r4, r1
 801287a:	465e      	mov	r6, fp
 801287c:	46aa      	mov	sl, r5
 801287e:	46a9      	mov	r9, r5
 8012880:	9501      	str	r5, [sp, #4]
 8012882:	68a2      	ldr	r2, [r4, #8]
 8012884:	b152      	cbz	r2, 801289c <_scanf_float+0x60>
 8012886:	683b      	ldr	r3, [r7, #0]
 8012888:	781b      	ldrb	r3, [r3, #0]
 801288a:	2b4e      	cmp	r3, #78	; 0x4e
 801288c:	d864      	bhi.n	8012958 <_scanf_float+0x11c>
 801288e:	2b40      	cmp	r3, #64	; 0x40
 8012890:	d83c      	bhi.n	801290c <_scanf_float+0xd0>
 8012892:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012896:	b2c8      	uxtb	r0, r1
 8012898:	280e      	cmp	r0, #14
 801289a:	d93a      	bls.n	8012912 <_scanf_float+0xd6>
 801289c:	f1b9 0f00 	cmp.w	r9, #0
 80128a0:	d003      	beq.n	80128aa <_scanf_float+0x6e>
 80128a2:	6823      	ldr	r3, [r4, #0]
 80128a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80128a8:	6023      	str	r3, [r4, #0]
 80128aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80128ae:	f1ba 0f01 	cmp.w	sl, #1
 80128b2:	f200 8113 	bhi.w	8012adc <_scanf_float+0x2a0>
 80128b6:	455e      	cmp	r6, fp
 80128b8:	f200 8105 	bhi.w	8012ac6 <_scanf_float+0x28a>
 80128bc:	2501      	movs	r5, #1
 80128be:	4628      	mov	r0, r5
 80128c0:	b007      	add	sp, #28
 80128c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128c6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80128ca:	2a0d      	cmp	r2, #13
 80128cc:	d8e6      	bhi.n	801289c <_scanf_float+0x60>
 80128ce:	a101      	add	r1, pc, #4	; (adr r1, 80128d4 <_scanf_float+0x98>)
 80128d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80128d4:	08012a13 	.word	0x08012a13
 80128d8:	0801289d 	.word	0x0801289d
 80128dc:	0801289d 	.word	0x0801289d
 80128e0:	0801289d 	.word	0x0801289d
 80128e4:	08012a73 	.word	0x08012a73
 80128e8:	08012a4b 	.word	0x08012a4b
 80128ec:	0801289d 	.word	0x0801289d
 80128f0:	0801289d 	.word	0x0801289d
 80128f4:	08012a21 	.word	0x08012a21
 80128f8:	0801289d 	.word	0x0801289d
 80128fc:	0801289d 	.word	0x0801289d
 8012900:	0801289d 	.word	0x0801289d
 8012904:	0801289d 	.word	0x0801289d
 8012908:	080129d9 	.word	0x080129d9
 801290c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012910:	e7db      	b.n	80128ca <_scanf_float+0x8e>
 8012912:	290e      	cmp	r1, #14
 8012914:	d8c2      	bhi.n	801289c <_scanf_float+0x60>
 8012916:	a001      	add	r0, pc, #4	; (adr r0, 801291c <_scanf_float+0xe0>)
 8012918:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801291c:	080129cb 	.word	0x080129cb
 8012920:	0801289d 	.word	0x0801289d
 8012924:	080129cb 	.word	0x080129cb
 8012928:	08012a5f 	.word	0x08012a5f
 801292c:	0801289d 	.word	0x0801289d
 8012930:	08012979 	.word	0x08012979
 8012934:	080129b5 	.word	0x080129b5
 8012938:	080129b5 	.word	0x080129b5
 801293c:	080129b5 	.word	0x080129b5
 8012940:	080129b5 	.word	0x080129b5
 8012944:	080129b5 	.word	0x080129b5
 8012948:	080129b5 	.word	0x080129b5
 801294c:	080129b5 	.word	0x080129b5
 8012950:	080129b5 	.word	0x080129b5
 8012954:	080129b5 	.word	0x080129b5
 8012958:	2b6e      	cmp	r3, #110	; 0x6e
 801295a:	d809      	bhi.n	8012970 <_scanf_float+0x134>
 801295c:	2b60      	cmp	r3, #96	; 0x60
 801295e:	d8b2      	bhi.n	80128c6 <_scanf_float+0x8a>
 8012960:	2b54      	cmp	r3, #84	; 0x54
 8012962:	d077      	beq.n	8012a54 <_scanf_float+0x218>
 8012964:	2b59      	cmp	r3, #89	; 0x59
 8012966:	d199      	bne.n	801289c <_scanf_float+0x60>
 8012968:	2d07      	cmp	r5, #7
 801296a:	d197      	bne.n	801289c <_scanf_float+0x60>
 801296c:	2508      	movs	r5, #8
 801296e:	e029      	b.n	80129c4 <_scanf_float+0x188>
 8012970:	2b74      	cmp	r3, #116	; 0x74
 8012972:	d06f      	beq.n	8012a54 <_scanf_float+0x218>
 8012974:	2b79      	cmp	r3, #121	; 0x79
 8012976:	e7f6      	b.n	8012966 <_scanf_float+0x12a>
 8012978:	6821      	ldr	r1, [r4, #0]
 801297a:	05c8      	lsls	r0, r1, #23
 801297c:	d51a      	bpl.n	80129b4 <_scanf_float+0x178>
 801297e:	9b02      	ldr	r3, [sp, #8]
 8012980:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012984:	6021      	str	r1, [r4, #0]
 8012986:	f109 0901 	add.w	r9, r9, #1
 801298a:	b11b      	cbz	r3, 8012994 <_scanf_float+0x158>
 801298c:	3b01      	subs	r3, #1
 801298e:	3201      	adds	r2, #1
 8012990:	9302      	str	r3, [sp, #8]
 8012992:	60a2      	str	r2, [r4, #8]
 8012994:	68a3      	ldr	r3, [r4, #8]
 8012996:	3b01      	subs	r3, #1
 8012998:	60a3      	str	r3, [r4, #8]
 801299a:	6923      	ldr	r3, [r4, #16]
 801299c:	3301      	adds	r3, #1
 801299e:	6123      	str	r3, [r4, #16]
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	3b01      	subs	r3, #1
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	607b      	str	r3, [r7, #4]
 80129a8:	f340 8084 	ble.w	8012ab4 <_scanf_float+0x278>
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	3301      	adds	r3, #1
 80129b0:	603b      	str	r3, [r7, #0]
 80129b2:	e766      	b.n	8012882 <_scanf_float+0x46>
 80129b4:	eb1a 0f05 	cmn.w	sl, r5
 80129b8:	f47f af70 	bne.w	801289c <_scanf_float+0x60>
 80129bc:	6822      	ldr	r2, [r4, #0]
 80129be:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80129c2:	6022      	str	r2, [r4, #0]
 80129c4:	f806 3b01 	strb.w	r3, [r6], #1
 80129c8:	e7e4      	b.n	8012994 <_scanf_float+0x158>
 80129ca:	6822      	ldr	r2, [r4, #0]
 80129cc:	0610      	lsls	r0, r2, #24
 80129ce:	f57f af65 	bpl.w	801289c <_scanf_float+0x60>
 80129d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80129d6:	e7f4      	b.n	80129c2 <_scanf_float+0x186>
 80129d8:	f1ba 0f00 	cmp.w	sl, #0
 80129dc:	d10e      	bne.n	80129fc <_scanf_float+0x1c0>
 80129de:	f1b9 0f00 	cmp.w	r9, #0
 80129e2:	d10e      	bne.n	8012a02 <_scanf_float+0x1c6>
 80129e4:	6822      	ldr	r2, [r4, #0]
 80129e6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80129ea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80129ee:	d108      	bne.n	8012a02 <_scanf_float+0x1c6>
 80129f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80129f4:	6022      	str	r2, [r4, #0]
 80129f6:	f04f 0a01 	mov.w	sl, #1
 80129fa:	e7e3      	b.n	80129c4 <_scanf_float+0x188>
 80129fc:	f1ba 0f02 	cmp.w	sl, #2
 8012a00:	d055      	beq.n	8012aae <_scanf_float+0x272>
 8012a02:	2d01      	cmp	r5, #1
 8012a04:	d002      	beq.n	8012a0c <_scanf_float+0x1d0>
 8012a06:	2d04      	cmp	r5, #4
 8012a08:	f47f af48 	bne.w	801289c <_scanf_float+0x60>
 8012a0c:	3501      	adds	r5, #1
 8012a0e:	b2ed      	uxtb	r5, r5
 8012a10:	e7d8      	b.n	80129c4 <_scanf_float+0x188>
 8012a12:	f1ba 0f01 	cmp.w	sl, #1
 8012a16:	f47f af41 	bne.w	801289c <_scanf_float+0x60>
 8012a1a:	f04f 0a02 	mov.w	sl, #2
 8012a1e:	e7d1      	b.n	80129c4 <_scanf_float+0x188>
 8012a20:	b97d      	cbnz	r5, 8012a42 <_scanf_float+0x206>
 8012a22:	f1b9 0f00 	cmp.w	r9, #0
 8012a26:	f47f af3c 	bne.w	80128a2 <_scanf_float+0x66>
 8012a2a:	6822      	ldr	r2, [r4, #0]
 8012a2c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012a30:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012a34:	f47f af39 	bne.w	80128aa <_scanf_float+0x6e>
 8012a38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012a3c:	6022      	str	r2, [r4, #0]
 8012a3e:	2501      	movs	r5, #1
 8012a40:	e7c0      	b.n	80129c4 <_scanf_float+0x188>
 8012a42:	2d03      	cmp	r5, #3
 8012a44:	d0e2      	beq.n	8012a0c <_scanf_float+0x1d0>
 8012a46:	2d05      	cmp	r5, #5
 8012a48:	e7de      	b.n	8012a08 <_scanf_float+0x1cc>
 8012a4a:	2d02      	cmp	r5, #2
 8012a4c:	f47f af26 	bne.w	801289c <_scanf_float+0x60>
 8012a50:	2503      	movs	r5, #3
 8012a52:	e7b7      	b.n	80129c4 <_scanf_float+0x188>
 8012a54:	2d06      	cmp	r5, #6
 8012a56:	f47f af21 	bne.w	801289c <_scanf_float+0x60>
 8012a5a:	2507      	movs	r5, #7
 8012a5c:	e7b2      	b.n	80129c4 <_scanf_float+0x188>
 8012a5e:	6822      	ldr	r2, [r4, #0]
 8012a60:	0591      	lsls	r1, r2, #22
 8012a62:	f57f af1b 	bpl.w	801289c <_scanf_float+0x60>
 8012a66:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8012a6a:	6022      	str	r2, [r4, #0]
 8012a6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012a70:	e7a8      	b.n	80129c4 <_scanf_float+0x188>
 8012a72:	6822      	ldr	r2, [r4, #0]
 8012a74:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012a78:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012a7c:	d006      	beq.n	8012a8c <_scanf_float+0x250>
 8012a7e:	0550      	lsls	r0, r2, #21
 8012a80:	f57f af0c 	bpl.w	801289c <_scanf_float+0x60>
 8012a84:	f1b9 0f00 	cmp.w	r9, #0
 8012a88:	f43f af0f 	beq.w	80128aa <_scanf_float+0x6e>
 8012a8c:	0591      	lsls	r1, r2, #22
 8012a8e:	bf58      	it	pl
 8012a90:	9901      	ldrpl	r1, [sp, #4]
 8012a92:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012a96:	bf58      	it	pl
 8012a98:	eba9 0101 	subpl.w	r1, r9, r1
 8012a9c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8012aa0:	bf58      	it	pl
 8012aa2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012aa6:	6022      	str	r2, [r4, #0]
 8012aa8:	f04f 0900 	mov.w	r9, #0
 8012aac:	e78a      	b.n	80129c4 <_scanf_float+0x188>
 8012aae:	f04f 0a03 	mov.w	sl, #3
 8012ab2:	e787      	b.n	80129c4 <_scanf_float+0x188>
 8012ab4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012ab8:	4639      	mov	r1, r7
 8012aba:	4640      	mov	r0, r8
 8012abc:	4798      	blx	r3
 8012abe:	2800      	cmp	r0, #0
 8012ac0:	f43f aedf 	beq.w	8012882 <_scanf_float+0x46>
 8012ac4:	e6ea      	b.n	801289c <_scanf_float+0x60>
 8012ac6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012aca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012ace:	463a      	mov	r2, r7
 8012ad0:	4640      	mov	r0, r8
 8012ad2:	4798      	blx	r3
 8012ad4:	6923      	ldr	r3, [r4, #16]
 8012ad6:	3b01      	subs	r3, #1
 8012ad8:	6123      	str	r3, [r4, #16]
 8012ada:	e6ec      	b.n	80128b6 <_scanf_float+0x7a>
 8012adc:	1e6b      	subs	r3, r5, #1
 8012ade:	2b06      	cmp	r3, #6
 8012ae0:	d825      	bhi.n	8012b2e <_scanf_float+0x2f2>
 8012ae2:	2d02      	cmp	r5, #2
 8012ae4:	d836      	bhi.n	8012b54 <_scanf_float+0x318>
 8012ae6:	455e      	cmp	r6, fp
 8012ae8:	f67f aee8 	bls.w	80128bc <_scanf_float+0x80>
 8012aec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012af0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012af4:	463a      	mov	r2, r7
 8012af6:	4640      	mov	r0, r8
 8012af8:	4798      	blx	r3
 8012afa:	6923      	ldr	r3, [r4, #16]
 8012afc:	3b01      	subs	r3, #1
 8012afe:	6123      	str	r3, [r4, #16]
 8012b00:	e7f1      	b.n	8012ae6 <_scanf_float+0x2aa>
 8012b02:	9802      	ldr	r0, [sp, #8]
 8012b04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012b08:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012b0c:	9002      	str	r0, [sp, #8]
 8012b0e:	463a      	mov	r2, r7
 8012b10:	4640      	mov	r0, r8
 8012b12:	4798      	blx	r3
 8012b14:	6923      	ldr	r3, [r4, #16]
 8012b16:	3b01      	subs	r3, #1
 8012b18:	6123      	str	r3, [r4, #16]
 8012b1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012b1e:	fa5f fa8a 	uxtb.w	sl, sl
 8012b22:	f1ba 0f02 	cmp.w	sl, #2
 8012b26:	d1ec      	bne.n	8012b02 <_scanf_float+0x2c6>
 8012b28:	3d03      	subs	r5, #3
 8012b2a:	b2ed      	uxtb	r5, r5
 8012b2c:	1b76      	subs	r6, r6, r5
 8012b2e:	6823      	ldr	r3, [r4, #0]
 8012b30:	05da      	lsls	r2, r3, #23
 8012b32:	d52f      	bpl.n	8012b94 <_scanf_float+0x358>
 8012b34:	055b      	lsls	r3, r3, #21
 8012b36:	d510      	bpl.n	8012b5a <_scanf_float+0x31e>
 8012b38:	455e      	cmp	r6, fp
 8012b3a:	f67f aebf 	bls.w	80128bc <_scanf_float+0x80>
 8012b3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012b42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012b46:	463a      	mov	r2, r7
 8012b48:	4640      	mov	r0, r8
 8012b4a:	4798      	blx	r3
 8012b4c:	6923      	ldr	r3, [r4, #16]
 8012b4e:	3b01      	subs	r3, #1
 8012b50:	6123      	str	r3, [r4, #16]
 8012b52:	e7f1      	b.n	8012b38 <_scanf_float+0x2fc>
 8012b54:	46aa      	mov	sl, r5
 8012b56:	9602      	str	r6, [sp, #8]
 8012b58:	e7df      	b.n	8012b1a <_scanf_float+0x2de>
 8012b5a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012b5e:	6923      	ldr	r3, [r4, #16]
 8012b60:	2965      	cmp	r1, #101	; 0x65
 8012b62:	f103 33ff 	add.w	r3, r3, #4294967295
 8012b66:	f106 35ff 	add.w	r5, r6, #4294967295
 8012b6a:	6123      	str	r3, [r4, #16]
 8012b6c:	d00c      	beq.n	8012b88 <_scanf_float+0x34c>
 8012b6e:	2945      	cmp	r1, #69	; 0x45
 8012b70:	d00a      	beq.n	8012b88 <_scanf_float+0x34c>
 8012b72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012b76:	463a      	mov	r2, r7
 8012b78:	4640      	mov	r0, r8
 8012b7a:	4798      	blx	r3
 8012b7c:	6923      	ldr	r3, [r4, #16]
 8012b7e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012b82:	3b01      	subs	r3, #1
 8012b84:	1eb5      	subs	r5, r6, #2
 8012b86:	6123      	str	r3, [r4, #16]
 8012b88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012b8c:	463a      	mov	r2, r7
 8012b8e:	4640      	mov	r0, r8
 8012b90:	4798      	blx	r3
 8012b92:	462e      	mov	r6, r5
 8012b94:	6825      	ldr	r5, [r4, #0]
 8012b96:	f015 0510 	ands.w	r5, r5, #16
 8012b9a:	d158      	bne.n	8012c4e <_scanf_float+0x412>
 8012b9c:	7035      	strb	r5, [r6, #0]
 8012b9e:	6823      	ldr	r3, [r4, #0]
 8012ba0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012ba8:	d11c      	bne.n	8012be4 <_scanf_float+0x3a8>
 8012baa:	9b01      	ldr	r3, [sp, #4]
 8012bac:	454b      	cmp	r3, r9
 8012bae:	eba3 0209 	sub.w	r2, r3, r9
 8012bb2:	d124      	bne.n	8012bfe <_scanf_float+0x3c2>
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	4659      	mov	r1, fp
 8012bb8:	4640      	mov	r0, r8
 8012bba:	f000 fe9b 	bl	80138f4 <_strtod_r>
 8012bbe:	9b03      	ldr	r3, [sp, #12]
 8012bc0:	6821      	ldr	r1, [r4, #0]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	f011 0f02 	tst.w	r1, #2
 8012bc8:	ec57 6b10 	vmov	r6, r7, d0
 8012bcc:	f103 0204 	add.w	r2, r3, #4
 8012bd0:	d020      	beq.n	8012c14 <_scanf_float+0x3d8>
 8012bd2:	9903      	ldr	r1, [sp, #12]
 8012bd4:	600a      	str	r2, [r1, #0]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	e9c3 6700 	strd	r6, r7, [r3]
 8012bdc:	68e3      	ldr	r3, [r4, #12]
 8012bde:	3301      	adds	r3, #1
 8012be0:	60e3      	str	r3, [r4, #12]
 8012be2:	e66c      	b.n	80128be <_scanf_float+0x82>
 8012be4:	9b04      	ldr	r3, [sp, #16]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d0e4      	beq.n	8012bb4 <_scanf_float+0x378>
 8012bea:	9905      	ldr	r1, [sp, #20]
 8012bec:	230a      	movs	r3, #10
 8012bee:	462a      	mov	r2, r5
 8012bf0:	3101      	adds	r1, #1
 8012bf2:	4640      	mov	r0, r8
 8012bf4:	f000 ff70 	bl	8013ad8 <_strtol_r>
 8012bf8:	9b04      	ldr	r3, [sp, #16]
 8012bfa:	9e05      	ldr	r6, [sp, #20]
 8012bfc:	1ac2      	subs	r2, r0, r3
 8012bfe:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012c02:	429e      	cmp	r6, r3
 8012c04:	bf28      	it	cs
 8012c06:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012c0a:	4912      	ldr	r1, [pc, #72]	; (8012c54 <_scanf_float+0x418>)
 8012c0c:	4630      	mov	r0, r6
 8012c0e:	f000 f82b 	bl	8012c68 <siprintf>
 8012c12:	e7cf      	b.n	8012bb4 <_scanf_float+0x378>
 8012c14:	f011 0f04 	tst.w	r1, #4
 8012c18:	9903      	ldr	r1, [sp, #12]
 8012c1a:	600a      	str	r2, [r1, #0]
 8012c1c:	d1db      	bne.n	8012bd6 <_scanf_float+0x39a>
 8012c1e:	f8d3 8000 	ldr.w	r8, [r3]
 8012c22:	ee10 2a10 	vmov	r2, s0
 8012c26:	ee10 0a10 	vmov	r0, s0
 8012c2a:	463b      	mov	r3, r7
 8012c2c:	4639      	mov	r1, r7
 8012c2e:	f7ed ff95 	bl	8000b5c <__aeabi_dcmpun>
 8012c32:	b128      	cbz	r0, 8012c40 <_scanf_float+0x404>
 8012c34:	4808      	ldr	r0, [pc, #32]	; (8012c58 <_scanf_float+0x41c>)
 8012c36:	f000 f811 	bl	8012c5c <nanf>
 8012c3a:	ed88 0a00 	vstr	s0, [r8]
 8012c3e:	e7cd      	b.n	8012bdc <_scanf_float+0x3a0>
 8012c40:	4630      	mov	r0, r6
 8012c42:	4639      	mov	r1, r7
 8012c44:	f7ed ffe8 	bl	8000c18 <__aeabi_d2f>
 8012c48:	f8c8 0000 	str.w	r0, [r8]
 8012c4c:	e7c6      	b.n	8012bdc <_scanf_float+0x3a0>
 8012c4e:	2500      	movs	r5, #0
 8012c50:	e635      	b.n	80128be <_scanf_float+0x82>
 8012c52:	bf00      	nop
 8012c54:	0802a518 	.word	0x0802a518
 8012c58:	0802a623 	.word	0x0802a623

08012c5c <nanf>:
 8012c5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012c64 <nanf+0x8>
 8012c60:	4770      	bx	lr
 8012c62:	bf00      	nop
 8012c64:	7fc00000 	.word	0x7fc00000

08012c68 <siprintf>:
 8012c68:	b40e      	push	{r1, r2, r3}
 8012c6a:	b500      	push	{lr}
 8012c6c:	b09c      	sub	sp, #112	; 0x70
 8012c6e:	ab1d      	add	r3, sp, #116	; 0x74
 8012c70:	9002      	str	r0, [sp, #8]
 8012c72:	9006      	str	r0, [sp, #24]
 8012c74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012c78:	4809      	ldr	r0, [pc, #36]	; (8012ca0 <siprintf+0x38>)
 8012c7a:	9107      	str	r1, [sp, #28]
 8012c7c:	9104      	str	r1, [sp, #16]
 8012c7e:	4909      	ldr	r1, [pc, #36]	; (8012ca4 <siprintf+0x3c>)
 8012c80:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c84:	9105      	str	r1, [sp, #20]
 8012c86:	6800      	ldr	r0, [r0, #0]
 8012c88:	9301      	str	r3, [sp, #4]
 8012c8a:	a902      	add	r1, sp, #8
 8012c8c:	f002 ff46 	bl	8015b1c <_svfiprintf_r>
 8012c90:	9b02      	ldr	r3, [sp, #8]
 8012c92:	2200      	movs	r2, #0
 8012c94:	701a      	strb	r2, [r3, #0]
 8012c96:	b01c      	add	sp, #112	; 0x70
 8012c98:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c9c:	b003      	add	sp, #12
 8012c9e:	4770      	bx	lr
 8012ca0:	20000044 	.word	0x20000044
 8012ca4:	ffff0208 	.word	0xffff0208

08012ca8 <sulp>:
 8012ca8:	b570      	push	{r4, r5, r6, lr}
 8012caa:	4604      	mov	r4, r0
 8012cac:	460d      	mov	r5, r1
 8012cae:	ec45 4b10 	vmov	d0, r4, r5
 8012cb2:	4616      	mov	r6, r2
 8012cb4:	f002 fcce 	bl	8015654 <__ulp>
 8012cb8:	ec51 0b10 	vmov	r0, r1, d0
 8012cbc:	b17e      	cbz	r6, 8012cde <sulp+0x36>
 8012cbe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012cc2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	dd09      	ble.n	8012cde <sulp+0x36>
 8012cca:	051b      	lsls	r3, r3, #20
 8012ccc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012cd0:	2400      	movs	r4, #0
 8012cd2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012cd6:	4622      	mov	r2, r4
 8012cd8:	462b      	mov	r3, r5
 8012cda:	f7ed fca5 	bl	8000628 <__aeabi_dmul>
 8012cde:	bd70      	pop	{r4, r5, r6, pc}

08012ce0 <_strtod_l>:
 8012ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ce4:	b0a3      	sub	sp, #140	; 0x8c
 8012ce6:	461f      	mov	r7, r3
 8012ce8:	2300      	movs	r3, #0
 8012cea:	931e      	str	r3, [sp, #120]	; 0x78
 8012cec:	4ba4      	ldr	r3, [pc, #656]	; (8012f80 <_strtod_l+0x2a0>)
 8012cee:	9219      	str	r2, [sp, #100]	; 0x64
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	9307      	str	r3, [sp, #28]
 8012cf4:	4604      	mov	r4, r0
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	4688      	mov	r8, r1
 8012cfa:	f7ed fa7b 	bl	80001f4 <strlen>
 8012cfe:	f04f 0a00 	mov.w	sl, #0
 8012d02:	4605      	mov	r5, r0
 8012d04:	f04f 0b00 	mov.w	fp, #0
 8012d08:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012d0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012d0e:	781a      	ldrb	r2, [r3, #0]
 8012d10:	2a2b      	cmp	r2, #43	; 0x2b
 8012d12:	d04c      	beq.n	8012dae <_strtod_l+0xce>
 8012d14:	d839      	bhi.n	8012d8a <_strtod_l+0xaa>
 8012d16:	2a0d      	cmp	r2, #13
 8012d18:	d832      	bhi.n	8012d80 <_strtod_l+0xa0>
 8012d1a:	2a08      	cmp	r2, #8
 8012d1c:	d832      	bhi.n	8012d84 <_strtod_l+0xa4>
 8012d1e:	2a00      	cmp	r2, #0
 8012d20:	d03c      	beq.n	8012d9c <_strtod_l+0xbc>
 8012d22:	2300      	movs	r3, #0
 8012d24:	930e      	str	r3, [sp, #56]	; 0x38
 8012d26:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8012d28:	7833      	ldrb	r3, [r6, #0]
 8012d2a:	2b30      	cmp	r3, #48	; 0x30
 8012d2c:	f040 80b4 	bne.w	8012e98 <_strtod_l+0x1b8>
 8012d30:	7873      	ldrb	r3, [r6, #1]
 8012d32:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012d36:	2b58      	cmp	r3, #88	; 0x58
 8012d38:	d16c      	bne.n	8012e14 <_strtod_l+0x134>
 8012d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d3c:	9301      	str	r3, [sp, #4]
 8012d3e:	ab1e      	add	r3, sp, #120	; 0x78
 8012d40:	9702      	str	r7, [sp, #8]
 8012d42:	9300      	str	r3, [sp, #0]
 8012d44:	4a8f      	ldr	r2, [pc, #572]	; (8012f84 <_strtod_l+0x2a4>)
 8012d46:	ab1f      	add	r3, sp, #124	; 0x7c
 8012d48:	a91d      	add	r1, sp, #116	; 0x74
 8012d4a:	4620      	mov	r0, r4
 8012d4c:	f001 fde2 	bl	8014914 <__gethex>
 8012d50:	f010 0707 	ands.w	r7, r0, #7
 8012d54:	4605      	mov	r5, r0
 8012d56:	d005      	beq.n	8012d64 <_strtod_l+0x84>
 8012d58:	2f06      	cmp	r7, #6
 8012d5a:	d12a      	bne.n	8012db2 <_strtod_l+0xd2>
 8012d5c:	3601      	adds	r6, #1
 8012d5e:	2300      	movs	r3, #0
 8012d60:	961d      	str	r6, [sp, #116]	; 0x74
 8012d62:	930e      	str	r3, [sp, #56]	; 0x38
 8012d64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	f040 8596 	bne.w	8013898 <_strtod_l+0xbb8>
 8012d6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d6e:	b1db      	cbz	r3, 8012da8 <_strtod_l+0xc8>
 8012d70:	4652      	mov	r2, sl
 8012d72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012d76:	ec43 2b10 	vmov	d0, r2, r3
 8012d7a:	b023      	add	sp, #140	; 0x8c
 8012d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d80:	2a20      	cmp	r2, #32
 8012d82:	d1ce      	bne.n	8012d22 <_strtod_l+0x42>
 8012d84:	3301      	adds	r3, #1
 8012d86:	931d      	str	r3, [sp, #116]	; 0x74
 8012d88:	e7c0      	b.n	8012d0c <_strtod_l+0x2c>
 8012d8a:	2a2d      	cmp	r2, #45	; 0x2d
 8012d8c:	d1c9      	bne.n	8012d22 <_strtod_l+0x42>
 8012d8e:	2201      	movs	r2, #1
 8012d90:	920e      	str	r2, [sp, #56]	; 0x38
 8012d92:	1c5a      	adds	r2, r3, #1
 8012d94:	921d      	str	r2, [sp, #116]	; 0x74
 8012d96:	785b      	ldrb	r3, [r3, #1]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d1c4      	bne.n	8012d26 <_strtod_l+0x46>
 8012d9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012d9e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	f040 8576 	bne.w	8013894 <_strtod_l+0xbb4>
 8012da8:	4652      	mov	r2, sl
 8012daa:	465b      	mov	r3, fp
 8012dac:	e7e3      	b.n	8012d76 <_strtod_l+0x96>
 8012dae:	2200      	movs	r2, #0
 8012db0:	e7ee      	b.n	8012d90 <_strtod_l+0xb0>
 8012db2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012db4:	b13a      	cbz	r2, 8012dc6 <_strtod_l+0xe6>
 8012db6:	2135      	movs	r1, #53	; 0x35
 8012db8:	a820      	add	r0, sp, #128	; 0x80
 8012dba:	f002 fd56 	bl	801586a <__copybits>
 8012dbe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012dc0:	4620      	mov	r0, r4
 8012dc2:	f002 f91b 	bl	8014ffc <_Bfree>
 8012dc6:	3f01      	subs	r7, #1
 8012dc8:	2f05      	cmp	r7, #5
 8012dca:	d807      	bhi.n	8012ddc <_strtod_l+0xfc>
 8012dcc:	e8df f007 	tbb	[pc, r7]
 8012dd0:	1d180b0e 	.word	0x1d180b0e
 8012dd4:	030e      	.short	0x030e
 8012dd6:	f04f 0b00 	mov.w	fp, #0
 8012dda:	46da      	mov	sl, fp
 8012ddc:	0728      	lsls	r0, r5, #28
 8012dde:	d5c1      	bpl.n	8012d64 <_strtod_l+0x84>
 8012de0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012de4:	e7be      	b.n	8012d64 <_strtod_l+0x84>
 8012de6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8012dea:	e7f7      	b.n	8012ddc <_strtod_l+0xfc>
 8012dec:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8012df0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012df2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012df6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012dfa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012dfe:	e7ed      	b.n	8012ddc <_strtod_l+0xfc>
 8012e00:	f8df b184 	ldr.w	fp, [pc, #388]	; 8012f88 <_strtod_l+0x2a8>
 8012e04:	f04f 0a00 	mov.w	sl, #0
 8012e08:	e7e8      	b.n	8012ddc <_strtod_l+0xfc>
 8012e0a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012e0e:	f04f 3aff 	mov.w	sl, #4294967295
 8012e12:	e7e3      	b.n	8012ddc <_strtod_l+0xfc>
 8012e14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012e16:	1c5a      	adds	r2, r3, #1
 8012e18:	921d      	str	r2, [sp, #116]	; 0x74
 8012e1a:	785b      	ldrb	r3, [r3, #1]
 8012e1c:	2b30      	cmp	r3, #48	; 0x30
 8012e1e:	d0f9      	beq.n	8012e14 <_strtod_l+0x134>
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d09f      	beq.n	8012d64 <_strtod_l+0x84>
 8012e24:	2301      	movs	r3, #1
 8012e26:	f04f 0900 	mov.w	r9, #0
 8012e2a:	9304      	str	r3, [sp, #16]
 8012e2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012e2e:	930a      	str	r3, [sp, #40]	; 0x28
 8012e30:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012e34:	464f      	mov	r7, r9
 8012e36:	220a      	movs	r2, #10
 8012e38:	981d      	ldr	r0, [sp, #116]	; 0x74
 8012e3a:	7806      	ldrb	r6, [r0, #0]
 8012e3c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8012e40:	b2d9      	uxtb	r1, r3
 8012e42:	2909      	cmp	r1, #9
 8012e44:	d92a      	bls.n	8012e9c <_strtod_l+0x1bc>
 8012e46:	9907      	ldr	r1, [sp, #28]
 8012e48:	462a      	mov	r2, r5
 8012e4a:	f003 f8d9 	bl	8016000 <strncmp>
 8012e4e:	b398      	cbz	r0, 8012eb8 <_strtod_l+0x1d8>
 8012e50:	2000      	movs	r0, #0
 8012e52:	4633      	mov	r3, r6
 8012e54:	463d      	mov	r5, r7
 8012e56:	9007      	str	r0, [sp, #28]
 8012e58:	4602      	mov	r2, r0
 8012e5a:	2b65      	cmp	r3, #101	; 0x65
 8012e5c:	d001      	beq.n	8012e62 <_strtod_l+0x182>
 8012e5e:	2b45      	cmp	r3, #69	; 0x45
 8012e60:	d118      	bne.n	8012e94 <_strtod_l+0x1b4>
 8012e62:	b91d      	cbnz	r5, 8012e6c <_strtod_l+0x18c>
 8012e64:	9b04      	ldr	r3, [sp, #16]
 8012e66:	4303      	orrs	r3, r0
 8012e68:	d098      	beq.n	8012d9c <_strtod_l+0xbc>
 8012e6a:	2500      	movs	r5, #0
 8012e6c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8012e70:	f108 0301 	add.w	r3, r8, #1
 8012e74:	931d      	str	r3, [sp, #116]	; 0x74
 8012e76:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012e7a:	2b2b      	cmp	r3, #43	; 0x2b
 8012e7c:	d075      	beq.n	8012f6a <_strtod_l+0x28a>
 8012e7e:	2b2d      	cmp	r3, #45	; 0x2d
 8012e80:	d07b      	beq.n	8012f7a <_strtod_l+0x29a>
 8012e82:	f04f 0c00 	mov.w	ip, #0
 8012e86:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012e8a:	2909      	cmp	r1, #9
 8012e8c:	f240 8082 	bls.w	8012f94 <_strtod_l+0x2b4>
 8012e90:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012e94:	2600      	movs	r6, #0
 8012e96:	e09d      	b.n	8012fd4 <_strtod_l+0x2f4>
 8012e98:	2300      	movs	r3, #0
 8012e9a:	e7c4      	b.n	8012e26 <_strtod_l+0x146>
 8012e9c:	2f08      	cmp	r7, #8
 8012e9e:	bfd8      	it	le
 8012ea0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8012ea2:	f100 0001 	add.w	r0, r0, #1
 8012ea6:	bfda      	itte	le
 8012ea8:	fb02 3301 	mlale	r3, r2, r1, r3
 8012eac:	9309      	strle	r3, [sp, #36]	; 0x24
 8012eae:	fb02 3909 	mlagt	r9, r2, r9, r3
 8012eb2:	3701      	adds	r7, #1
 8012eb4:	901d      	str	r0, [sp, #116]	; 0x74
 8012eb6:	e7bf      	b.n	8012e38 <_strtod_l+0x158>
 8012eb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012eba:	195a      	adds	r2, r3, r5
 8012ebc:	921d      	str	r2, [sp, #116]	; 0x74
 8012ebe:	5d5b      	ldrb	r3, [r3, r5]
 8012ec0:	2f00      	cmp	r7, #0
 8012ec2:	d037      	beq.n	8012f34 <_strtod_l+0x254>
 8012ec4:	9007      	str	r0, [sp, #28]
 8012ec6:	463d      	mov	r5, r7
 8012ec8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012ecc:	2a09      	cmp	r2, #9
 8012ece:	d912      	bls.n	8012ef6 <_strtod_l+0x216>
 8012ed0:	2201      	movs	r2, #1
 8012ed2:	e7c2      	b.n	8012e5a <_strtod_l+0x17a>
 8012ed4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012ed6:	1c5a      	adds	r2, r3, #1
 8012ed8:	921d      	str	r2, [sp, #116]	; 0x74
 8012eda:	785b      	ldrb	r3, [r3, #1]
 8012edc:	3001      	adds	r0, #1
 8012ede:	2b30      	cmp	r3, #48	; 0x30
 8012ee0:	d0f8      	beq.n	8012ed4 <_strtod_l+0x1f4>
 8012ee2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8012ee6:	2a08      	cmp	r2, #8
 8012ee8:	f200 84db 	bhi.w	80138a2 <_strtod_l+0xbc2>
 8012eec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012eee:	9007      	str	r0, [sp, #28]
 8012ef0:	2000      	movs	r0, #0
 8012ef2:	920a      	str	r2, [sp, #40]	; 0x28
 8012ef4:	4605      	mov	r5, r0
 8012ef6:	3b30      	subs	r3, #48	; 0x30
 8012ef8:	f100 0201 	add.w	r2, r0, #1
 8012efc:	d014      	beq.n	8012f28 <_strtod_l+0x248>
 8012efe:	9907      	ldr	r1, [sp, #28]
 8012f00:	4411      	add	r1, r2
 8012f02:	9107      	str	r1, [sp, #28]
 8012f04:	462a      	mov	r2, r5
 8012f06:	eb00 0e05 	add.w	lr, r0, r5
 8012f0a:	210a      	movs	r1, #10
 8012f0c:	4572      	cmp	r2, lr
 8012f0e:	d113      	bne.n	8012f38 <_strtod_l+0x258>
 8012f10:	182a      	adds	r2, r5, r0
 8012f12:	2a08      	cmp	r2, #8
 8012f14:	f105 0501 	add.w	r5, r5, #1
 8012f18:	4405      	add	r5, r0
 8012f1a:	dc1c      	bgt.n	8012f56 <_strtod_l+0x276>
 8012f1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012f1e:	220a      	movs	r2, #10
 8012f20:	fb02 3301 	mla	r3, r2, r1, r3
 8012f24:	9309      	str	r3, [sp, #36]	; 0x24
 8012f26:	2200      	movs	r2, #0
 8012f28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012f2a:	1c59      	adds	r1, r3, #1
 8012f2c:	911d      	str	r1, [sp, #116]	; 0x74
 8012f2e:	785b      	ldrb	r3, [r3, #1]
 8012f30:	4610      	mov	r0, r2
 8012f32:	e7c9      	b.n	8012ec8 <_strtod_l+0x1e8>
 8012f34:	4638      	mov	r0, r7
 8012f36:	e7d2      	b.n	8012ede <_strtod_l+0x1fe>
 8012f38:	2a08      	cmp	r2, #8
 8012f3a:	dc04      	bgt.n	8012f46 <_strtod_l+0x266>
 8012f3c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8012f3e:	434e      	muls	r6, r1
 8012f40:	9609      	str	r6, [sp, #36]	; 0x24
 8012f42:	3201      	adds	r2, #1
 8012f44:	e7e2      	b.n	8012f0c <_strtod_l+0x22c>
 8012f46:	f102 0c01 	add.w	ip, r2, #1
 8012f4a:	f1bc 0f10 	cmp.w	ip, #16
 8012f4e:	bfd8      	it	le
 8012f50:	fb01 f909 	mulle.w	r9, r1, r9
 8012f54:	e7f5      	b.n	8012f42 <_strtod_l+0x262>
 8012f56:	2d10      	cmp	r5, #16
 8012f58:	bfdc      	itt	le
 8012f5a:	220a      	movle	r2, #10
 8012f5c:	fb02 3909 	mlale	r9, r2, r9, r3
 8012f60:	e7e1      	b.n	8012f26 <_strtod_l+0x246>
 8012f62:	2300      	movs	r3, #0
 8012f64:	9307      	str	r3, [sp, #28]
 8012f66:	2201      	movs	r2, #1
 8012f68:	e77c      	b.n	8012e64 <_strtod_l+0x184>
 8012f6a:	f04f 0c00 	mov.w	ip, #0
 8012f6e:	f108 0302 	add.w	r3, r8, #2
 8012f72:	931d      	str	r3, [sp, #116]	; 0x74
 8012f74:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012f78:	e785      	b.n	8012e86 <_strtod_l+0x1a6>
 8012f7a:	f04f 0c01 	mov.w	ip, #1
 8012f7e:	e7f6      	b.n	8012f6e <_strtod_l+0x28e>
 8012f80:	0802a80c 	.word	0x0802a80c
 8012f84:	0802a520 	.word	0x0802a520
 8012f88:	7ff00000 	.word	0x7ff00000
 8012f8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012f8e:	1c59      	adds	r1, r3, #1
 8012f90:	911d      	str	r1, [sp, #116]	; 0x74
 8012f92:	785b      	ldrb	r3, [r3, #1]
 8012f94:	2b30      	cmp	r3, #48	; 0x30
 8012f96:	d0f9      	beq.n	8012f8c <_strtod_l+0x2ac>
 8012f98:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8012f9c:	2908      	cmp	r1, #8
 8012f9e:	f63f af79 	bhi.w	8012e94 <_strtod_l+0x1b4>
 8012fa2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8012fa6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012fa8:	9308      	str	r3, [sp, #32]
 8012faa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012fac:	1c59      	adds	r1, r3, #1
 8012fae:	911d      	str	r1, [sp, #116]	; 0x74
 8012fb0:	785b      	ldrb	r3, [r3, #1]
 8012fb2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8012fb6:	2e09      	cmp	r6, #9
 8012fb8:	d937      	bls.n	801302a <_strtod_l+0x34a>
 8012fba:	9e08      	ldr	r6, [sp, #32]
 8012fbc:	1b89      	subs	r1, r1, r6
 8012fbe:	2908      	cmp	r1, #8
 8012fc0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8012fc4:	dc02      	bgt.n	8012fcc <_strtod_l+0x2ec>
 8012fc6:	4576      	cmp	r6, lr
 8012fc8:	bfa8      	it	ge
 8012fca:	4676      	movge	r6, lr
 8012fcc:	f1bc 0f00 	cmp.w	ip, #0
 8012fd0:	d000      	beq.n	8012fd4 <_strtod_l+0x2f4>
 8012fd2:	4276      	negs	r6, r6
 8012fd4:	2d00      	cmp	r5, #0
 8012fd6:	d14f      	bne.n	8013078 <_strtod_l+0x398>
 8012fd8:	9904      	ldr	r1, [sp, #16]
 8012fda:	4301      	orrs	r1, r0
 8012fdc:	f47f aec2 	bne.w	8012d64 <_strtod_l+0x84>
 8012fe0:	2a00      	cmp	r2, #0
 8012fe2:	f47f aedb 	bne.w	8012d9c <_strtod_l+0xbc>
 8012fe6:	2b69      	cmp	r3, #105	; 0x69
 8012fe8:	d027      	beq.n	801303a <_strtod_l+0x35a>
 8012fea:	dc24      	bgt.n	8013036 <_strtod_l+0x356>
 8012fec:	2b49      	cmp	r3, #73	; 0x49
 8012fee:	d024      	beq.n	801303a <_strtod_l+0x35a>
 8012ff0:	2b4e      	cmp	r3, #78	; 0x4e
 8012ff2:	f47f aed3 	bne.w	8012d9c <_strtod_l+0xbc>
 8012ff6:	499e      	ldr	r1, [pc, #632]	; (8013270 <_strtod_l+0x590>)
 8012ff8:	a81d      	add	r0, sp, #116	; 0x74
 8012ffa:	f001 fee3 	bl	8014dc4 <__match>
 8012ffe:	2800      	cmp	r0, #0
 8013000:	f43f aecc 	beq.w	8012d9c <_strtod_l+0xbc>
 8013004:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013006:	781b      	ldrb	r3, [r3, #0]
 8013008:	2b28      	cmp	r3, #40	; 0x28
 801300a:	d12d      	bne.n	8013068 <_strtod_l+0x388>
 801300c:	4999      	ldr	r1, [pc, #612]	; (8013274 <_strtod_l+0x594>)
 801300e:	aa20      	add	r2, sp, #128	; 0x80
 8013010:	a81d      	add	r0, sp, #116	; 0x74
 8013012:	f001 feeb 	bl	8014dec <__hexnan>
 8013016:	2805      	cmp	r0, #5
 8013018:	d126      	bne.n	8013068 <_strtod_l+0x388>
 801301a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801301c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8013020:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013024:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013028:	e69c      	b.n	8012d64 <_strtod_l+0x84>
 801302a:	210a      	movs	r1, #10
 801302c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013030:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013034:	e7b9      	b.n	8012faa <_strtod_l+0x2ca>
 8013036:	2b6e      	cmp	r3, #110	; 0x6e
 8013038:	e7db      	b.n	8012ff2 <_strtod_l+0x312>
 801303a:	498f      	ldr	r1, [pc, #572]	; (8013278 <_strtod_l+0x598>)
 801303c:	a81d      	add	r0, sp, #116	; 0x74
 801303e:	f001 fec1 	bl	8014dc4 <__match>
 8013042:	2800      	cmp	r0, #0
 8013044:	f43f aeaa 	beq.w	8012d9c <_strtod_l+0xbc>
 8013048:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801304a:	498c      	ldr	r1, [pc, #560]	; (801327c <_strtod_l+0x59c>)
 801304c:	3b01      	subs	r3, #1
 801304e:	a81d      	add	r0, sp, #116	; 0x74
 8013050:	931d      	str	r3, [sp, #116]	; 0x74
 8013052:	f001 feb7 	bl	8014dc4 <__match>
 8013056:	b910      	cbnz	r0, 801305e <_strtod_l+0x37e>
 8013058:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801305a:	3301      	adds	r3, #1
 801305c:	931d      	str	r3, [sp, #116]	; 0x74
 801305e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801328c <_strtod_l+0x5ac>
 8013062:	f04f 0a00 	mov.w	sl, #0
 8013066:	e67d      	b.n	8012d64 <_strtod_l+0x84>
 8013068:	4885      	ldr	r0, [pc, #532]	; (8013280 <_strtod_l+0x5a0>)
 801306a:	f002 ffb1 	bl	8015fd0 <nan>
 801306e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8013072:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013076:	e675      	b.n	8012d64 <_strtod_l+0x84>
 8013078:	9b07      	ldr	r3, [sp, #28]
 801307a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801307c:	1af3      	subs	r3, r6, r3
 801307e:	2f00      	cmp	r7, #0
 8013080:	bf08      	it	eq
 8013082:	462f      	moveq	r7, r5
 8013084:	2d10      	cmp	r5, #16
 8013086:	9308      	str	r3, [sp, #32]
 8013088:	46a8      	mov	r8, r5
 801308a:	bfa8      	it	ge
 801308c:	f04f 0810 	movge.w	r8, #16
 8013090:	f7ed fa50 	bl	8000534 <__aeabi_ui2d>
 8013094:	2d09      	cmp	r5, #9
 8013096:	4682      	mov	sl, r0
 8013098:	468b      	mov	fp, r1
 801309a:	dd13      	ble.n	80130c4 <_strtod_l+0x3e4>
 801309c:	4b79      	ldr	r3, [pc, #484]	; (8013284 <_strtod_l+0x5a4>)
 801309e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80130a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80130a6:	f7ed fabf 	bl	8000628 <__aeabi_dmul>
 80130aa:	4682      	mov	sl, r0
 80130ac:	4648      	mov	r0, r9
 80130ae:	468b      	mov	fp, r1
 80130b0:	f7ed fa40 	bl	8000534 <__aeabi_ui2d>
 80130b4:	4602      	mov	r2, r0
 80130b6:	460b      	mov	r3, r1
 80130b8:	4650      	mov	r0, sl
 80130ba:	4659      	mov	r1, fp
 80130bc:	f7ed f8fe 	bl	80002bc <__adddf3>
 80130c0:	4682      	mov	sl, r0
 80130c2:	468b      	mov	fp, r1
 80130c4:	2d0f      	cmp	r5, #15
 80130c6:	dc38      	bgt.n	801313a <_strtod_l+0x45a>
 80130c8:	9b08      	ldr	r3, [sp, #32]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	f43f ae4a 	beq.w	8012d64 <_strtod_l+0x84>
 80130d0:	dd24      	ble.n	801311c <_strtod_l+0x43c>
 80130d2:	2b16      	cmp	r3, #22
 80130d4:	dc0b      	bgt.n	80130ee <_strtod_l+0x40e>
 80130d6:	4d6b      	ldr	r5, [pc, #428]	; (8013284 <_strtod_l+0x5a4>)
 80130d8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80130dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80130e0:	4652      	mov	r2, sl
 80130e2:	465b      	mov	r3, fp
 80130e4:	f7ed faa0 	bl	8000628 <__aeabi_dmul>
 80130e8:	4682      	mov	sl, r0
 80130ea:	468b      	mov	fp, r1
 80130ec:	e63a      	b.n	8012d64 <_strtod_l+0x84>
 80130ee:	9a08      	ldr	r2, [sp, #32]
 80130f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80130f4:	4293      	cmp	r3, r2
 80130f6:	db20      	blt.n	801313a <_strtod_l+0x45a>
 80130f8:	4c62      	ldr	r4, [pc, #392]	; (8013284 <_strtod_l+0x5a4>)
 80130fa:	f1c5 050f 	rsb	r5, r5, #15
 80130fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013102:	4652      	mov	r2, sl
 8013104:	465b      	mov	r3, fp
 8013106:	e9d1 0100 	ldrd	r0, r1, [r1]
 801310a:	f7ed fa8d 	bl	8000628 <__aeabi_dmul>
 801310e:	9b08      	ldr	r3, [sp, #32]
 8013110:	1b5d      	subs	r5, r3, r5
 8013112:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013116:	e9d4 2300 	ldrd	r2, r3, [r4]
 801311a:	e7e3      	b.n	80130e4 <_strtod_l+0x404>
 801311c:	9b08      	ldr	r3, [sp, #32]
 801311e:	3316      	adds	r3, #22
 8013120:	db0b      	blt.n	801313a <_strtod_l+0x45a>
 8013122:	9b07      	ldr	r3, [sp, #28]
 8013124:	4a57      	ldr	r2, [pc, #348]	; (8013284 <_strtod_l+0x5a4>)
 8013126:	1b9e      	subs	r6, r3, r6
 8013128:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801312c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013130:	4650      	mov	r0, sl
 8013132:	4659      	mov	r1, fp
 8013134:	f7ed fba2 	bl	800087c <__aeabi_ddiv>
 8013138:	e7d6      	b.n	80130e8 <_strtod_l+0x408>
 801313a:	9b08      	ldr	r3, [sp, #32]
 801313c:	eba5 0808 	sub.w	r8, r5, r8
 8013140:	4498      	add	r8, r3
 8013142:	f1b8 0f00 	cmp.w	r8, #0
 8013146:	dd71      	ble.n	801322c <_strtod_l+0x54c>
 8013148:	f018 030f 	ands.w	r3, r8, #15
 801314c:	d00a      	beq.n	8013164 <_strtod_l+0x484>
 801314e:	494d      	ldr	r1, [pc, #308]	; (8013284 <_strtod_l+0x5a4>)
 8013150:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013154:	4652      	mov	r2, sl
 8013156:	465b      	mov	r3, fp
 8013158:	e9d1 0100 	ldrd	r0, r1, [r1]
 801315c:	f7ed fa64 	bl	8000628 <__aeabi_dmul>
 8013160:	4682      	mov	sl, r0
 8013162:	468b      	mov	fp, r1
 8013164:	f038 080f 	bics.w	r8, r8, #15
 8013168:	d04d      	beq.n	8013206 <_strtod_l+0x526>
 801316a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801316e:	dd22      	ble.n	80131b6 <_strtod_l+0x4d6>
 8013170:	2500      	movs	r5, #0
 8013172:	462e      	mov	r6, r5
 8013174:	9509      	str	r5, [sp, #36]	; 0x24
 8013176:	9507      	str	r5, [sp, #28]
 8013178:	2322      	movs	r3, #34	; 0x22
 801317a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801328c <_strtod_l+0x5ac>
 801317e:	6023      	str	r3, [r4, #0]
 8013180:	f04f 0a00 	mov.w	sl, #0
 8013184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013186:	2b00      	cmp	r3, #0
 8013188:	f43f adec 	beq.w	8012d64 <_strtod_l+0x84>
 801318c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801318e:	4620      	mov	r0, r4
 8013190:	f001 ff34 	bl	8014ffc <_Bfree>
 8013194:	9907      	ldr	r1, [sp, #28]
 8013196:	4620      	mov	r0, r4
 8013198:	f001 ff30 	bl	8014ffc <_Bfree>
 801319c:	4631      	mov	r1, r6
 801319e:	4620      	mov	r0, r4
 80131a0:	f001 ff2c 	bl	8014ffc <_Bfree>
 80131a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80131a6:	4620      	mov	r0, r4
 80131a8:	f001 ff28 	bl	8014ffc <_Bfree>
 80131ac:	4629      	mov	r1, r5
 80131ae:	4620      	mov	r0, r4
 80131b0:	f001 ff24 	bl	8014ffc <_Bfree>
 80131b4:	e5d6      	b.n	8012d64 <_strtod_l+0x84>
 80131b6:	2300      	movs	r3, #0
 80131b8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80131bc:	4650      	mov	r0, sl
 80131be:	4659      	mov	r1, fp
 80131c0:	4699      	mov	r9, r3
 80131c2:	f1b8 0f01 	cmp.w	r8, #1
 80131c6:	dc21      	bgt.n	801320c <_strtod_l+0x52c>
 80131c8:	b10b      	cbz	r3, 80131ce <_strtod_l+0x4ee>
 80131ca:	4682      	mov	sl, r0
 80131cc:	468b      	mov	fp, r1
 80131ce:	4b2e      	ldr	r3, [pc, #184]	; (8013288 <_strtod_l+0x5a8>)
 80131d0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80131d4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80131d8:	4652      	mov	r2, sl
 80131da:	465b      	mov	r3, fp
 80131dc:	e9d9 0100 	ldrd	r0, r1, [r9]
 80131e0:	f7ed fa22 	bl	8000628 <__aeabi_dmul>
 80131e4:	4b29      	ldr	r3, [pc, #164]	; (801328c <_strtod_l+0x5ac>)
 80131e6:	460a      	mov	r2, r1
 80131e8:	400b      	ands	r3, r1
 80131ea:	4929      	ldr	r1, [pc, #164]	; (8013290 <_strtod_l+0x5b0>)
 80131ec:	428b      	cmp	r3, r1
 80131ee:	4682      	mov	sl, r0
 80131f0:	d8be      	bhi.n	8013170 <_strtod_l+0x490>
 80131f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80131f6:	428b      	cmp	r3, r1
 80131f8:	bf86      	itte	hi
 80131fa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8013294 <_strtod_l+0x5b4>
 80131fe:	f04f 3aff 	movhi.w	sl, #4294967295
 8013202:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013206:	2300      	movs	r3, #0
 8013208:	9304      	str	r3, [sp, #16]
 801320a:	e081      	b.n	8013310 <_strtod_l+0x630>
 801320c:	f018 0f01 	tst.w	r8, #1
 8013210:	d007      	beq.n	8013222 <_strtod_l+0x542>
 8013212:	4b1d      	ldr	r3, [pc, #116]	; (8013288 <_strtod_l+0x5a8>)
 8013214:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8013218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801321c:	f7ed fa04 	bl	8000628 <__aeabi_dmul>
 8013220:	2301      	movs	r3, #1
 8013222:	f109 0901 	add.w	r9, r9, #1
 8013226:	ea4f 0868 	mov.w	r8, r8, asr #1
 801322a:	e7ca      	b.n	80131c2 <_strtod_l+0x4e2>
 801322c:	d0eb      	beq.n	8013206 <_strtod_l+0x526>
 801322e:	f1c8 0800 	rsb	r8, r8, #0
 8013232:	f018 020f 	ands.w	r2, r8, #15
 8013236:	d00a      	beq.n	801324e <_strtod_l+0x56e>
 8013238:	4b12      	ldr	r3, [pc, #72]	; (8013284 <_strtod_l+0x5a4>)
 801323a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801323e:	4650      	mov	r0, sl
 8013240:	4659      	mov	r1, fp
 8013242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013246:	f7ed fb19 	bl	800087c <__aeabi_ddiv>
 801324a:	4682      	mov	sl, r0
 801324c:	468b      	mov	fp, r1
 801324e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013252:	d0d8      	beq.n	8013206 <_strtod_l+0x526>
 8013254:	f1b8 0f1f 	cmp.w	r8, #31
 8013258:	dd1e      	ble.n	8013298 <_strtod_l+0x5b8>
 801325a:	2500      	movs	r5, #0
 801325c:	462e      	mov	r6, r5
 801325e:	9509      	str	r5, [sp, #36]	; 0x24
 8013260:	9507      	str	r5, [sp, #28]
 8013262:	2322      	movs	r3, #34	; 0x22
 8013264:	f04f 0a00 	mov.w	sl, #0
 8013268:	f04f 0b00 	mov.w	fp, #0
 801326c:	6023      	str	r3, [r4, #0]
 801326e:	e789      	b.n	8013184 <_strtod_l+0x4a4>
 8013270:	0802a4f1 	.word	0x0802a4f1
 8013274:	0802a534 	.word	0x0802a534
 8013278:	0802a4e9 	.word	0x0802a4e9
 801327c:	0802a728 	.word	0x0802a728
 8013280:	0802a623 	.word	0x0802a623
 8013284:	0802a8a8 	.word	0x0802a8a8
 8013288:	0802a880 	.word	0x0802a880
 801328c:	7ff00000 	.word	0x7ff00000
 8013290:	7ca00000 	.word	0x7ca00000
 8013294:	7fefffff 	.word	0x7fefffff
 8013298:	f018 0310 	ands.w	r3, r8, #16
 801329c:	bf18      	it	ne
 801329e:	236a      	movne	r3, #106	; 0x6a
 80132a0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8013658 <_strtod_l+0x978>
 80132a4:	9304      	str	r3, [sp, #16]
 80132a6:	4650      	mov	r0, sl
 80132a8:	4659      	mov	r1, fp
 80132aa:	2300      	movs	r3, #0
 80132ac:	f018 0f01 	tst.w	r8, #1
 80132b0:	d004      	beq.n	80132bc <_strtod_l+0x5dc>
 80132b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80132b6:	f7ed f9b7 	bl	8000628 <__aeabi_dmul>
 80132ba:	2301      	movs	r3, #1
 80132bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80132c0:	f109 0908 	add.w	r9, r9, #8
 80132c4:	d1f2      	bne.n	80132ac <_strtod_l+0x5cc>
 80132c6:	b10b      	cbz	r3, 80132cc <_strtod_l+0x5ec>
 80132c8:	4682      	mov	sl, r0
 80132ca:	468b      	mov	fp, r1
 80132cc:	9b04      	ldr	r3, [sp, #16]
 80132ce:	b1bb      	cbz	r3, 8013300 <_strtod_l+0x620>
 80132d0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80132d4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80132d8:	2b00      	cmp	r3, #0
 80132da:	4659      	mov	r1, fp
 80132dc:	dd10      	ble.n	8013300 <_strtod_l+0x620>
 80132de:	2b1f      	cmp	r3, #31
 80132e0:	f340 8128 	ble.w	8013534 <_strtod_l+0x854>
 80132e4:	2b34      	cmp	r3, #52	; 0x34
 80132e6:	bfde      	ittt	le
 80132e8:	3b20      	suble	r3, #32
 80132ea:	f04f 32ff 	movle.w	r2, #4294967295
 80132ee:	fa02 f303 	lslle.w	r3, r2, r3
 80132f2:	f04f 0a00 	mov.w	sl, #0
 80132f6:	bfcc      	ite	gt
 80132f8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80132fc:	ea03 0b01 	andle.w	fp, r3, r1
 8013300:	2200      	movs	r2, #0
 8013302:	2300      	movs	r3, #0
 8013304:	4650      	mov	r0, sl
 8013306:	4659      	mov	r1, fp
 8013308:	f7ed fbf6 	bl	8000af8 <__aeabi_dcmpeq>
 801330c:	2800      	cmp	r0, #0
 801330e:	d1a4      	bne.n	801325a <_strtod_l+0x57a>
 8013310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013312:	9300      	str	r3, [sp, #0]
 8013314:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013316:	462b      	mov	r3, r5
 8013318:	463a      	mov	r2, r7
 801331a:	4620      	mov	r0, r4
 801331c:	f001 feda 	bl	80150d4 <__s2b>
 8013320:	9009      	str	r0, [sp, #36]	; 0x24
 8013322:	2800      	cmp	r0, #0
 8013324:	f43f af24 	beq.w	8013170 <_strtod_l+0x490>
 8013328:	9b07      	ldr	r3, [sp, #28]
 801332a:	1b9e      	subs	r6, r3, r6
 801332c:	9b08      	ldr	r3, [sp, #32]
 801332e:	2b00      	cmp	r3, #0
 8013330:	bfb4      	ite	lt
 8013332:	4633      	movlt	r3, r6
 8013334:	2300      	movge	r3, #0
 8013336:	9310      	str	r3, [sp, #64]	; 0x40
 8013338:	9b08      	ldr	r3, [sp, #32]
 801333a:	2500      	movs	r5, #0
 801333c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013340:	9318      	str	r3, [sp, #96]	; 0x60
 8013342:	462e      	mov	r6, r5
 8013344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013346:	4620      	mov	r0, r4
 8013348:	6859      	ldr	r1, [r3, #4]
 801334a:	f001 fe17 	bl	8014f7c <_Balloc>
 801334e:	9007      	str	r0, [sp, #28]
 8013350:	2800      	cmp	r0, #0
 8013352:	f43f af11 	beq.w	8013178 <_strtod_l+0x498>
 8013356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013358:	691a      	ldr	r2, [r3, #16]
 801335a:	3202      	adds	r2, #2
 801335c:	f103 010c 	add.w	r1, r3, #12
 8013360:	0092      	lsls	r2, r2, #2
 8013362:	300c      	adds	r0, #12
 8013364:	f001 fdfc 	bl	8014f60 <memcpy>
 8013368:	ec4b ab10 	vmov	d0, sl, fp
 801336c:	aa20      	add	r2, sp, #128	; 0x80
 801336e:	a91f      	add	r1, sp, #124	; 0x7c
 8013370:	4620      	mov	r0, r4
 8013372:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8013376:	f002 f9e9 	bl	801574c <__d2b>
 801337a:	901e      	str	r0, [sp, #120]	; 0x78
 801337c:	2800      	cmp	r0, #0
 801337e:	f43f aefb 	beq.w	8013178 <_strtod_l+0x498>
 8013382:	2101      	movs	r1, #1
 8013384:	4620      	mov	r0, r4
 8013386:	f001 ff3f 	bl	8015208 <__i2b>
 801338a:	4606      	mov	r6, r0
 801338c:	2800      	cmp	r0, #0
 801338e:	f43f aef3 	beq.w	8013178 <_strtod_l+0x498>
 8013392:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013394:	9904      	ldr	r1, [sp, #16]
 8013396:	2b00      	cmp	r3, #0
 8013398:	bfab      	itete	ge
 801339a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801339c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801339e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80133a0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80133a4:	bfac      	ite	ge
 80133a6:	eb03 0902 	addge.w	r9, r3, r2
 80133aa:	1ad7      	sublt	r7, r2, r3
 80133ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80133ae:	eba3 0801 	sub.w	r8, r3, r1
 80133b2:	4490      	add	r8, r2
 80133b4:	4ba3      	ldr	r3, [pc, #652]	; (8013644 <_strtod_l+0x964>)
 80133b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80133ba:	4598      	cmp	r8, r3
 80133bc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80133c0:	f280 80cc 	bge.w	801355c <_strtod_l+0x87c>
 80133c4:	eba3 0308 	sub.w	r3, r3, r8
 80133c8:	2b1f      	cmp	r3, #31
 80133ca:	eba2 0203 	sub.w	r2, r2, r3
 80133ce:	f04f 0101 	mov.w	r1, #1
 80133d2:	f300 80b6 	bgt.w	8013542 <_strtod_l+0x862>
 80133d6:	fa01 f303 	lsl.w	r3, r1, r3
 80133da:	9311      	str	r3, [sp, #68]	; 0x44
 80133dc:	2300      	movs	r3, #0
 80133de:	930c      	str	r3, [sp, #48]	; 0x30
 80133e0:	eb09 0802 	add.w	r8, r9, r2
 80133e4:	9b04      	ldr	r3, [sp, #16]
 80133e6:	45c1      	cmp	r9, r8
 80133e8:	4417      	add	r7, r2
 80133ea:	441f      	add	r7, r3
 80133ec:	464b      	mov	r3, r9
 80133ee:	bfa8      	it	ge
 80133f0:	4643      	movge	r3, r8
 80133f2:	42bb      	cmp	r3, r7
 80133f4:	bfa8      	it	ge
 80133f6:	463b      	movge	r3, r7
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	bfc2      	ittt	gt
 80133fc:	eba8 0803 	subgt.w	r8, r8, r3
 8013400:	1aff      	subgt	r7, r7, r3
 8013402:	eba9 0903 	subgt.w	r9, r9, r3
 8013406:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013408:	2b00      	cmp	r3, #0
 801340a:	dd17      	ble.n	801343c <_strtod_l+0x75c>
 801340c:	4631      	mov	r1, r6
 801340e:	461a      	mov	r2, r3
 8013410:	4620      	mov	r0, r4
 8013412:	f001 ffb5 	bl	8015380 <__pow5mult>
 8013416:	4606      	mov	r6, r0
 8013418:	2800      	cmp	r0, #0
 801341a:	f43f aead 	beq.w	8013178 <_strtod_l+0x498>
 801341e:	4601      	mov	r1, r0
 8013420:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013422:	4620      	mov	r0, r4
 8013424:	f001 ff06 	bl	8015234 <__multiply>
 8013428:	900f      	str	r0, [sp, #60]	; 0x3c
 801342a:	2800      	cmp	r0, #0
 801342c:	f43f aea4 	beq.w	8013178 <_strtod_l+0x498>
 8013430:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013432:	4620      	mov	r0, r4
 8013434:	f001 fde2 	bl	8014ffc <_Bfree>
 8013438:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801343a:	931e      	str	r3, [sp, #120]	; 0x78
 801343c:	f1b8 0f00 	cmp.w	r8, #0
 8013440:	f300 8091 	bgt.w	8013566 <_strtod_l+0x886>
 8013444:	9b08      	ldr	r3, [sp, #32]
 8013446:	2b00      	cmp	r3, #0
 8013448:	dd08      	ble.n	801345c <_strtod_l+0x77c>
 801344a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801344c:	9907      	ldr	r1, [sp, #28]
 801344e:	4620      	mov	r0, r4
 8013450:	f001 ff96 	bl	8015380 <__pow5mult>
 8013454:	9007      	str	r0, [sp, #28]
 8013456:	2800      	cmp	r0, #0
 8013458:	f43f ae8e 	beq.w	8013178 <_strtod_l+0x498>
 801345c:	2f00      	cmp	r7, #0
 801345e:	dd08      	ble.n	8013472 <_strtod_l+0x792>
 8013460:	9907      	ldr	r1, [sp, #28]
 8013462:	463a      	mov	r2, r7
 8013464:	4620      	mov	r0, r4
 8013466:	f001 ffe5 	bl	8015434 <__lshift>
 801346a:	9007      	str	r0, [sp, #28]
 801346c:	2800      	cmp	r0, #0
 801346e:	f43f ae83 	beq.w	8013178 <_strtod_l+0x498>
 8013472:	f1b9 0f00 	cmp.w	r9, #0
 8013476:	dd08      	ble.n	801348a <_strtod_l+0x7aa>
 8013478:	4631      	mov	r1, r6
 801347a:	464a      	mov	r2, r9
 801347c:	4620      	mov	r0, r4
 801347e:	f001 ffd9 	bl	8015434 <__lshift>
 8013482:	4606      	mov	r6, r0
 8013484:	2800      	cmp	r0, #0
 8013486:	f43f ae77 	beq.w	8013178 <_strtod_l+0x498>
 801348a:	9a07      	ldr	r2, [sp, #28]
 801348c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801348e:	4620      	mov	r0, r4
 8013490:	f002 f858 	bl	8015544 <__mdiff>
 8013494:	4605      	mov	r5, r0
 8013496:	2800      	cmp	r0, #0
 8013498:	f43f ae6e 	beq.w	8013178 <_strtod_l+0x498>
 801349c:	68c3      	ldr	r3, [r0, #12]
 801349e:	930f      	str	r3, [sp, #60]	; 0x3c
 80134a0:	2300      	movs	r3, #0
 80134a2:	60c3      	str	r3, [r0, #12]
 80134a4:	4631      	mov	r1, r6
 80134a6:	f002 f831 	bl	801550c <__mcmp>
 80134aa:	2800      	cmp	r0, #0
 80134ac:	da65      	bge.n	801357a <_strtod_l+0x89a>
 80134ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80134b0:	ea53 030a 	orrs.w	r3, r3, sl
 80134b4:	f040 8087 	bne.w	80135c6 <_strtod_l+0x8e6>
 80134b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80134bc:	2b00      	cmp	r3, #0
 80134be:	f040 8082 	bne.w	80135c6 <_strtod_l+0x8e6>
 80134c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80134c6:	0d1b      	lsrs	r3, r3, #20
 80134c8:	051b      	lsls	r3, r3, #20
 80134ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80134ce:	d97a      	bls.n	80135c6 <_strtod_l+0x8e6>
 80134d0:	696b      	ldr	r3, [r5, #20]
 80134d2:	b913      	cbnz	r3, 80134da <_strtod_l+0x7fa>
 80134d4:	692b      	ldr	r3, [r5, #16]
 80134d6:	2b01      	cmp	r3, #1
 80134d8:	dd75      	ble.n	80135c6 <_strtod_l+0x8e6>
 80134da:	4629      	mov	r1, r5
 80134dc:	2201      	movs	r2, #1
 80134de:	4620      	mov	r0, r4
 80134e0:	f001 ffa8 	bl	8015434 <__lshift>
 80134e4:	4631      	mov	r1, r6
 80134e6:	4605      	mov	r5, r0
 80134e8:	f002 f810 	bl	801550c <__mcmp>
 80134ec:	2800      	cmp	r0, #0
 80134ee:	dd6a      	ble.n	80135c6 <_strtod_l+0x8e6>
 80134f0:	9904      	ldr	r1, [sp, #16]
 80134f2:	4a55      	ldr	r2, [pc, #340]	; (8013648 <_strtod_l+0x968>)
 80134f4:	465b      	mov	r3, fp
 80134f6:	2900      	cmp	r1, #0
 80134f8:	f000 8085 	beq.w	8013606 <_strtod_l+0x926>
 80134fc:	ea02 010b 	and.w	r1, r2, fp
 8013500:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013504:	dc7f      	bgt.n	8013606 <_strtod_l+0x926>
 8013506:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801350a:	f77f aeaa 	ble.w	8013262 <_strtod_l+0x582>
 801350e:	4a4f      	ldr	r2, [pc, #316]	; (801364c <_strtod_l+0x96c>)
 8013510:	2300      	movs	r3, #0
 8013512:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8013516:	4650      	mov	r0, sl
 8013518:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801351c:	4659      	mov	r1, fp
 801351e:	f7ed f883 	bl	8000628 <__aeabi_dmul>
 8013522:	460b      	mov	r3, r1
 8013524:	4303      	orrs	r3, r0
 8013526:	bf08      	it	eq
 8013528:	2322      	moveq	r3, #34	; 0x22
 801352a:	4682      	mov	sl, r0
 801352c:	468b      	mov	fp, r1
 801352e:	bf08      	it	eq
 8013530:	6023      	streq	r3, [r4, #0]
 8013532:	e62b      	b.n	801318c <_strtod_l+0x4ac>
 8013534:	f04f 32ff 	mov.w	r2, #4294967295
 8013538:	fa02 f303 	lsl.w	r3, r2, r3
 801353c:	ea03 0a0a 	and.w	sl, r3, sl
 8013540:	e6de      	b.n	8013300 <_strtod_l+0x620>
 8013542:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8013546:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801354a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801354e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8013552:	fa01 f308 	lsl.w	r3, r1, r8
 8013556:	930c      	str	r3, [sp, #48]	; 0x30
 8013558:	9111      	str	r1, [sp, #68]	; 0x44
 801355a:	e741      	b.n	80133e0 <_strtod_l+0x700>
 801355c:	2300      	movs	r3, #0
 801355e:	930c      	str	r3, [sp, #48]	; 0x30
 8013560:	2301      	movs	r3, #1
 8013562:	9311      	str	r3, [sp, #68]	; 0x44
 8013564:	e73c      	b.n	80133e0 <_strtod_l+0x700>
 8013566:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013568:	4642      	mov	r2, r8
 801356a:	4620      	mov	r0, r4
 801356c:	f001 ff62 	bl	8015434 <__lshift>
 8013570:	901e      	str	r0, [sp, #120]	; 0x78
 8013572:	2800      	cmp	r0, #0
 8013574:	f47f af66 	bne.w	8013444 <_strtod_l+0x764>
 8013578:	e5fe      	b.n	8013178 <_strtod_l+0x498>
 801357a:	465f      	mov	r7, fp
 801357c:	d16e      	bne.n	801365c <_strtod_l+0x97c>
 801357e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013580:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013584:	b342      	cbz	r2, 80135d8 <_strtod_l+0x8f8>
 8013586:	4a32      	ldr	r2, [pc, #200]	; (8013650 <_strtod_l+0x970>)
 8013588:	4293      	cmp	r3, r2
 801358a:	d128      	bne.n	80135de <_strtod_l+0x8fe>
 801358c:	9b04      	ldr	r3, [sp, #16]
 801358e:	4650      	mov	r0, sl
 8013590:	b1eb      	cbz	r3, 80135ce <_strtod_l+0x8ee>
 8013592:	4a2d      	ldr	r2, [pc, #180]	; (8013648 <_strtod_l+0x968>)
 8013594:	403a      	ands	r2, r7
 8013596:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801359a:	f04f 31ff 	mov.w	r1, #4294967295
 801359e:	d819      	bhi.n	80135d4 <_strtod_l+0x8f4>
 80135a0:	0d12      	lsrs	r2, r2, #20
 80135a2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80135a6:	fa01 f303 	lsl.w	r3, r1, r3
 80135aa:	4298      	cmp	r0, r3
 80135ac:	d117      	bne.n	80135de <_strtod_l+0x8fe>
 80135ae:	4b29      	ldr	r3, [pc, #164]	; (8013654 <_strtod_l+0x974>)
 80135b0:	429f      	cmp	r7, r3
 80135b2:	d102      	bne.n	80135ba <_strtod_l+0x8da>
 80135b4:	3001      	adds	r0, #1
 80135b6:	f43f addf 	beq.w	8013178 <_strtod_l+0x498>
 80135ba:	4b23      	ldr	r3, [pc, #140]	; (8013648 <_strtod_l+0x968>)
 80135bc:	403b      	ands	r3, r7
 80135be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80135c2:	f04f 0a00 	mov.w	sl, #0
 80135c6:	9b04      	ldr	r3, [sp, #16]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d1a0      	bne.n	801350e <_strtod_l+0x82e>
 80135cc:	e5de      	b.n	801318c <_strtod_l+0x4ac>
 80135ce:	f04f 33ff 	mov.w	r3, #4294967295
 80135d2:	e7ea      	b.n	80135aa <_strtod_l+0x8ca>
 80135d4:	460b      	mov	r3, r1
 80135d6:	e7e8      	b.n	80135aa <_strtod_l+0x8ca>
 80135d8:	ea53 030a 	orrs.w	r3, r3, sl
 80135dc:	d088      	beq.n	80134f0 <_strtod_l+0x810>
 80135de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80135e0:	b1db      	cbz	r3, 801361a <_strtod_l+0x93a>
 80135e2:	423b      	tst	r3, r7
 80135e4:	d0ef      	beq.n	80135c6 <_strtod_l+0x8e6>
 80135e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80135e8:	9a04      	ldr	r2, [sp, #16]
 80135ea:	4650      	mov	r0, sl
 80135ec:	4659      	mov	r1, fp
 80135ee:	b1c3      	cbz	r3, 8013622 <_strtod_l+0x942>
 80135f0:	f7ff fb5a 	bl	8012ca8 <sulp>
 80135f4:	4602      	mov	r2, r0
 80135f6:	460b      	mov	r3, r1
 80135f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80135fc:	f7ec fe5e 	bl	80002bc <__adddf3>
 8013600:	4682      	mov	sl, r0
 8013602:	468b      	mov	fp, r1
 8013604:	e7df      	b.n	80135c6 <_strtod_l+0x8e6>
 8013606:	4013      	ands	r3, r2
 8013608:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801360c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013610:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013614:	f04f 3aff 	mov.w	sl, #4294967295
 8013618:	e7d5      	b.n	80135c6 <_strtod_l+0x8e6>
 801361a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801361c:	ea13 0f0a 	tst.w	r3, sl
 8013620:	e7e0      	b.n	80135e4 <_strtod_l+0x904>
 8013622:	f7ff fb41 	bl	8012ca8 <sulp>
 8013626:	4602      	mov	r2, r0
 8013628:	460b      	mov	r3, r1
 801362a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801362e:	f7ec fe43 	bl	80002b8 <__aeabi_dsub>
 8013632:	2200      	movs	r2, #0
 8013634:	2300      	movs	r3, #0
 8013636:	4682      	mov	sl, r0
 8013638:	468b      	mov	fp, r1
 801363a:	f7ed fa5d 	bl	8000af8 <__aeabi_dcmpeq>
 801363e:	2800      	cmp	r0, #0
 8013640:	d0c1      	beq.n	80135c6 <_strtod_l+0x8e6>
 8013642:	e60e      	b.n	8013262 <_strtod_l+0x582>
 8013644:	fffffc02 	.word	0xfffffc02
 8013648:	7ff00000 	.word	0x7ff00000
 801364c:	39500000 	.word	0x39500000
 8013650:	000fffff 	.word	0x000fffff
 8013654:	7fefffff 	.word	0x7fefffff
 8013658:	0802a548 	.word	0x0802a548
 801365c:	4631      	mov	r1, r6
 801365e:	4628      	mov	r0, r5
 8013660:	f002 f8d0 	bl	8015804 <__ratio>
 8013664:	ec59 8b10 	vmov	r8, r9, d0
 8013668:	ee10 0a10 	vmov	r0, s0
 801366c:	2200      	movs	r2, #0
 801366e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013672:	4649      	mov	r1, r9
 8013674:	f7ed fa54 	bl	8000b20 <__aeabi_dcmple>
 8013678:	2800      	cmp	r0, #0
 801367a:	d07c      	beq.n	8013776 <_strtod_l+0xa96>
 801367c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801367e:	2b00      	cmp	r3, #0
 8013680:	d04c      	beq.n	801371c <_strtod_l+0xa3c>
 8013682:	4b95      	ldr	r3, [pc, #596]	; (80138d8 <_strtod_l+0xbf8>)
 8013684:	2200      	movs	r2, #0
 8013686:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801368a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80138d8 <_strtod_l+0xbf8>
 801368e:	f04f 0800 	mov.w	r8, #0
 8013692:	4b92      	ldr	r3, [pc, #584]	; (80138dc <_strtod_l+0xbfc>)
 8013694:	403b      	ands	r3, r7
 8013696:	9311      	str	r3, [sp, #68]	; 0x44
 8013698:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801369a:	4b91      	ldr	r3, [pc, #580]	; (80138e0 <_strtod_l+0xc00>)
 801369c:	429a      	cmp	r2, r3
 801369e:	f040 80b2 	bne.w	8013806 <_strtod_l+0xb26>
 80136a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80136a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80136aa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80136ae:	ec4b ab10 	vmov	d0, sl, fp
 80136b2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80136b6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80136ba:	f001 ffcb 	bl	8015654 <__ulp>
 80136be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80136c2:	ec53 2b10 	vmov	r2, r3, d0
 80136c6:	f7ec ffaf 	bl	8000628 <__aeabi_dmul>
 80136ca:	4652      	mov	r2, sl
 80136cc:	465b      	mov	r3, fp
 80136ce:	f7ec fdf5 	bl	80002bc <__adddf3>
 80136d2:	460b      	mov	r3, r1
 80136d4:	4981      	ldr	r1, [pc, #516]	; (80138dc <_strtod_l+0xbfc>)
 80136d6:	4a83      	ldr	r2, [pc, #524]	; (80138e4 <_strtod_l+0xc04>)
 80136d8:	4019      	ands	r1, r3
 80136da:	4291      	cmp	r1, r2
 80136dc:	4682      	mov	sl, r0
 80136de:	d95e      	bls.n	801379e <_strtod_l+0xabe>
 80136e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80136e2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80136e6:	4293      	cmp	r3, r2
 80136e8:	d103      	bne.n	80136f2 <_strtod_l+0xa12>
 80136ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136ec:	3301      	adds	r3, #1
 80136ee:	f43f ad43 	beq.w	8013178 <_strtod_l+0x498>
 80136f2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80138f0 <_strtod_l+0xc10>
 80136f6:	f04f 3aff 	mov.w	sl, #4294967295
 80136fa:	991e      	ldr	r1, [sp, #120]	; 0x78
 80136fc:	4620      	mov	r0, r4
 80136fe:	f001 fc7d 	bl	8014ffc <_Bfree>
 8013702:	9907      	ldr	r1, [sp, #28]
 8013704:	4620      	mov	r0, r4
 8013706:	f001 fc79 	bl	8014ffc <_Bfree>
 801370a:	4631      	mov	r1, r6
 801370c:	4620      	mov	r0, r4
 801370e:	f001 fc75 	bl	8014ffc <_Bfree>
 8013712:	4629      	mov	r1, r5
 8013714:	4620      	mov	r0, r4
 8013716:	f001 fc71 	bl	8014ffc <_Bfree>
 801371a:	e613      	b.n	8013344 <_strtod_l+0x664>
 801371c:	f1ba 0f00 	cmp.w	sl, #0
 8013720:	d11b      	bne.n	801375a <_strtod_l+0xa7a>
 8013722:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013726:	b9f3      	cbnz	r3, 8013766 <_strtod_l+0xa86>
 8013728:	4b6b      	ldr	r3, [pc, #428]	; (80138d8 <_strtod_l+0xbf8>)
 801372a:	2200      	movs	r2, #0
 801372c:	4640      	mov	r0, r8
 801372e:	4649      	mov	r1, r9
 8013730:	f7ed f9ec 	bl	8000b0c <__aeabi_dcmplt>
 8013734:	b9d0      	cbnz	r0, 801376c <_strtod_l+0xa8c>
 8013736:	4640      	mov	r0, r8
 8013738:	4649      	mov	r1, r9
 801373a:	4b6b      	ldr	r3, [pc, #428]	; (80138e8 <_strtod_l+0xc08>)
 801373c:	2200      	movs	r2, #0
 801373e:	f7ec ff73 	bl	8000628 <__aeabi_dmul>
 8013742:	4680      	mov	r8, r0
 8013744:	4689      	mov	r9, r1
 8013746:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801374a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801374e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013750:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8013754:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013758:	e79b      	b.n	8013692 <_strtod_l+0x9b2>
 801375a:	f1ba 0f01 	cmp.w	sl, #1
 801375e:	d102      	bne.n	8013766 <_strtod_l+0xa86>
 8013760:	2f00      	cmp	r7, #0
 8013762:	f43f ad7e 	beq.w	8013262 <_strtod_l+0x582>
 8013766:	4b61      	ldr	r3, [pc, #388]	; (80138ec <_strtod_l+0xc0c>)
 8013768:	2200      	movs	r2, #0
 801376a:	e78c      	b.n	8013686 <_strtod_l+0x9a6>
 801376c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80138e8 <_strtod_l+0xc08>
 8013770:	f04f 0800 	mov.w	r8, #0
 8013774:	e7e7      	b.n	8013746 <_strtod_l+0xa66>
 8013776:	4b5c      	ldr	r3, [pc, #368]	; (80138e8 <_strtod_l+0xc08>)
 8013778:	4640      	mov	r0, r8
 801377a:	4649      	mov	r1, r9
 801377c:	2200      	movs	r2, #0
 801377e:	f7ec ff53 	bl	8000628 <__aeabi_dmul>
 8013782:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013784:	4680      	mov	r8, r0
 8013786:	4689      	mov	r9, r1
 8013788:	b933      	cbnz	r3, 8013798 <_strtod_l+0xab8>
 801378a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801378e:	9012      	str	r0, [sp, #72]	; 0x48
 8013790:	9313      	str	r3, [sp, #76]	; 0x4c
 8013792:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013796:	e7dd      	b.n	8013754 <_strtod_l+0xa74>
 8013798:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801379c:	e7f9      	b.n	8013792 <_strtod_l+0xab2>
 801379e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80137a2:	9b04      	ldr	r3, [sp, #16]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d1a8      	bne.n	80136fa <_strtod_l+0xa1a>
 80137a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80137ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80137ae:	0d1b      	lsrs	r3, r3, #20
 80137b0:	051b      	lsls	r3, r3, #20
 80137b2:	429a      	cmp	r2, r3
 80137b4:	d1a1      	bne.n	80136fa <_strtod_l+0xa1a>
 80137b6:	4640      	mov	r0, r8
 80137b8:	4649      	mov	r1, r9
 80137ba:	f7ed fa95 	bl	8000ce8 <__aeabi_d2lz>
 80137be:	f7ec ff05 	bl	80005cc <__aeabi_l2d>
 80137c2:	4602      	mov	r2, r0
 80137c4:	460b      	mov	r3, r1
 80137c6:	4640      	mov	r0, r8
 80137c8:	4649      	mov	r1, r9
 80137ca:	f7ec fd75 	bl	80002b8 <__aeabi_dsub>
 80137ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80137d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80137d4:	ea43 030a 	orr.w	r3, r3, sl
 80137d8:	4313      	orrs	r3, r2
 80137da:	4680      	mov	r8, r0
 80137dc:	4689      	mov	r9, r1
 80137de:	d053      	beq.n	8013888 <_strtod_l+0xba8>
 80137e0:	a335      	add	r3, pc, #212	; (adr r3, 80138b8 <_strtod_l+0xbd8>)
 80137e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137e6:	f7ed f991 	bl	8000b0c <__aeabi_dcmplt>
 80137ea:	2800      	cmp	r0, #0
 80137ec:	f47f acce 	bne.w	801318c <_strtod_l+0x4ac>
 80137f0:	a333      	add	r3, pc, #204	; (adr r3, 80138c0 <_strtod_l+0xbe0>)
 80137f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137f6:	4640      	mov	r0, r8
 80137f8:	4649      	mov	r1, r9
 80137fa:	f7ed f9a5 	bl	8000b48 <__aeabi_dcmpgt>
 80137fe:	2800      	cmp	r0, #0
 8013800:	f43f af7b 	beq.w	80136fa <_strtod_l+0xa1a>
 8013804:	e4c2      	b.n	801318c <_strtod_l+0x4ac>
 8013806:	9b04      	ldr	r3, [sp, #16]
 8013808:	b333      	cbz	r3, 8013858 <_strtod_l+0xb78>
 801380a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801380c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013810:	d822      	bhi.n	8013858 <_strtod_l+0xb78>
 8013812:	a32d      	add	r3, pc, #180	; (adr r3, 80138c8 <_strtod_l+0xbe8>)
 8013814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013818:	4640      	mov	r0, r8
 801381a:	4649      	mov	r1, r9
 801381c:	f7ed f980 	bl	8000b20 <__aeabi_dcmple>
 8013820:	b1a0      	cbz	r0, 801384c <_strtod_l+0xb6c>
 8013822:	4649      	mov	r1, r9
 8013824:	4640      	mov	r0, r8
 8013826:	f7ed f9d7 	bl	8000bd8 <__aeabi_d2uiz>
 801382a:	2801      	cmp	r0, #1
 801382c:	bf38      	it	cc
 801382e:	2001      	movcc	r0, #1
 8013830:	f7ec fe80 	bl	8000534 <__aeabi_ui2d>
 8013834:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013836:	4680      	mov	r8, r0
 8013838:	4689      	mov	r9, r1
 801383a:	bb13      	cbnz	r3, 8013882 <_strtod_l+0xba2>
 801383c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013840:	9014      	str	r0, [sp, #80]	; 0x50
 8013842:	9315      	str	r3, [sp, #84]	; 0x54
 8013844:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013848:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801384c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801384e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013850:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013854:	1a9b      	subs	r3, r3, r2
 8013856:	930d      	str	r3, [sp, #52]	; 0x34
 8013858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801385c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013860:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013864:	f001 fef6 	bl	8015654 <__ulp>
 8013868:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801386c:	ec53 2b10 	vmov	r2, r3, d0
 8013870:	f7ec feda 	bl	8000628 <__aeabi_dmul>
 8013874:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013878:	f7ec fd20 	bl	80002bc <__adddf3>
 801387c:	4682      	mov	sl, r0
 801387e:	468b      	mov	fp, r1
 8013880:	e78f      	b.n	80137a2 <_strtod_l+0xac2>
 8013882:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8013886:	e7dd      	b.n	8013844 <_strtod_l+0xb64>
 8013888:	a311      	add	r3, pc, #68	; (adr r3, 80138d0 <_strtod_l+0xbf0>)
 801388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801388e:	f7ed f93d 	bl	8000b0c <__aeabi_dcmplt>
 8013892:	e7b4      	b.n	80137fe <_strtod_l+0xb1e>
 8013894:	2300      	movs	r3, #0
 8013896:	930e      	str	r3, [sp, #56]	; 0x38
 8013898:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801389a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801389c:	6013      	str	r3, [r2, #0]
 801389e:	f7ff ba65 	b.w	8012d6c <_strtod_l+0x8c>
 80138a2:	2b65      	cmp	r3, #101	; 0x65
 80138a4:	f43f ab5d 	beq.w	8012f62 <_strtod_l+0x282>
 80138a8:	2b45      	cmp	r3, #69	; 0x45
 80138aa:	f43f ab5a 	beq.w	8012f62 <_strtod_l+0x282>
 80138ae:	2201      	movs	r2, #1
 80138b0:	f7ff bb92 	b.w	8012fd8 <_strtod_l+0x2f8>
 80138b4:	f3af 8000 	nop.w
 80138b8:	94a03595 	.word	0x94a03595
 80138bc:	3fdfffff 	.word	0x3fdfffff
 80138c0:	35afe535 	.word	0x35afe535
 80138c4:	3fe00000 	.word	0x3fe00000
 80138c8:	ffc00000 	.word	0xffc00000
 80138cc:	41dfffff 	.word	0x41dfffff
 80138d0:	94a03595 	.word	0x94a03595
 80138d4:	3fcfffff 	.word	0x3fcfffff
 80138d8:	3ff00000 	.word	0x3ff00000
 80138dc:	7ff00000 	.word	0x7ff00000
 80138e0:	7fe00000 	.word	0x7fe00000
 80138e4:	7c9fffff 	.word	0x7c9fffff
 80138e8:	3fe00000 	.word	0x3fe00000
 80138ec:	bff00000 	.word	0xbff00000
 80138f0:	7fefffff 	.word	0x7fefffff

080138f4 <_strtod_r>:
 80138f4:	4b01      	ldr	r3, [pc, #4]	; (80138fc <_strtod_r+0x8>)
 80138f6:	f7ff b9f3 	b.w	8012ce0 <_strtod_l>
 80138fa:	bf00      	nop
 80138fc:	200000ac 	.word	0x200000ac

08013900 <strtod>:
 8013900:	460a      	mov	r2, r1
 8013902:	4601      	mov	r1, r0
 8013904:	4802      	ldr	r0, [pc, #8]	; (8013910 <strtod+0x10>)
 8013906:	4b03      	ldr	r3, [pc, #12]	; (8013914 <strtod+0x14>)
 8013908:	6800      	ldr	r0, [r0, #0]
 801390a:	f7ff b9e9 	b.w	8012ce0 <_strtod_l>
 801390e:	bf00      	nop
 8013910:	20000044 	.word	0x20000044
 8013914:	200000ac 	.word	0x200000ac

08013918 <strtok>:
 8013918:	4b16      	ldr	r3, [pc, #88]	; (8013974 <strtok+0x5c>)
 801391a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801391c:	681e      	ldr	r6, [r3, #0]
 801391e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8013920:	4605      	mov	r5, r0
 8013922:	b9fc      	cbnz	r4, 8013964 <strtok+0x4c>
 8013924:	2050      	movs	r0, #80	; 0x50
 8013926:	9101      	str	r1, [sp, #4]
 8013928:	f001 fb00 	bl	8014f2c <malloc>
 801392c:	9901      	ldr	r1, [sp, #4]
 801392e:	65b0      	str	r0, [r6, #88]	; 0x58
 8013930:	4602      	mov	r2, r0
 8013932:	b920      	cbnz	r0, 801393e <strtok+0x26>
 8013934:	4b10      	ldr	r3, [pc, #64]	; (8013978 <strtok+0x60>)
 8013936:	4811      	ldr	r0, [pc, #68]	; (801397c <strtok+0x64>)
 8013938:	2157      	movs	r1, #87	; 0x57
 801393a:	f000 f8d9 	bl	8013af0 <__assert_func>
 801393e:	e9c0 4400 	strd	r4, r4, [r0]
 8013942:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8013946:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801394a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801394e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8013952:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8013956:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801395a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801395e:	6184      	str	r4, [r0, #24]
 8013960:	7704      	strb	r4, [r0, #28]
 8013962:	6244      	str	r4, [r0, #36]	; 0x24
 8013964:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8013966:	2301      	movs	r3, #1
 8013968:	4628      	mov	r0, r5
 801396a:	b002      	add	sp, #8
 801396c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013970:	f000 b806 	b.w	8013980 <__strtok_r>
 8013974:	20000044 	.word	0x20000044
 8013978:	0802a570 	.word	0x0802a570
 801397c:	0802a587 	.word	0x0802a587

08013980 <__strtok_r>:
 8013980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013982:	b908      	cbnz	r0, 8013988 <__strtok_r+0x8>
 8013984:	6810      	ldr	r0, [r2, #0]
 8013986:	b188      	cbz	r0, 80139ac <__strtok_r+0x2c>
 8013988:	4604      	mov	r4, r0
 801398a:	4620      	mov	r0, r4
 801398c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013990:	460f      	mov	r7, r1
 8013992:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013996:	b91e      	cbnz	r6, 80139a0 <__strtok_r+0x20>
 8013998:	b965      	cbnz	r5, 80139b4 <__strtok_r+0x34>
 801399a:	6015      	str	r5, [r2, #0]
 801399c:	4628      	mov	r0, r5
 801399e:	e005      	b.n	80139ac <__strtok_r+0x2c>
 80139a0:	42b5      	cmp	r5, r6
 80139a2:	d1f6      	bne.n	8013992 <__strtok_r+0x12>
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d1f0      	bne.n	801398a <__strtok_r+0xa>
 80139a8:	6014      	str	r4, [r2, #0]
 80139aa:	7003      	strb	r3, [r0, #0]
 80139ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139ae:	461c      	mov	r4, r3
 80139b0:	e00c      	b.n	80139cc <__strtok_r+0x4c>
 80139b2:	b915      	cbnz	r5, 80139ba <__strtok_r+0x3a>
 80139b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80139b8:	460e      	mov	r6, r1
 80139ba:	f816 5b01 	ldrb.w	r5, [r6], #1
 80139be:	42ab      	cmp	r3, r5
 80139c0:	d1f7      	bne.n	80139b2 <__strtok_r+0x32>
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d0f3      	beq.n	80139ae <__strtok_r+0x2e>
 80139c6:	2300      	movs	r3, #0
 80139c8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80139cc:	6014      	str	r4, [r2, #0]
 80139ce:	e7ed      	b.n	80139ac <__strtok_r+0x2c>

080139d0 <_strtol_l.isra.0>:
 80139d0:	2b01      	cmp	r3, #1
 80139d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139d6:	d001      	beq.n	80139dc <_strtol_l.isra.0+0xc>
 80139d8:	2b24      	cmp	r3, #36	; 0x24
 80139da:	d906      	bls.n	80139ea <_strtol_l.isra.0+0x1a>
 80139dc:	f7fe fa92 	bl	8011f04 <__errno>
 80139e0:	2316      	movs	r3, #22
 80139e2:	6003      	str	r3, [r0, #0]
 80139e4:	2000      	movs	r0, #0
 80139e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139ea:	4f3a      	ldr	r7, [pc, #232]	; (8013ad4 <_strtol_l.isra.0+0x104>)
 80139ec:	468e      	mov	lr, r1
 80139ee:	4676      	mov	r6, lr
 80139f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80139f4:	5de5      	ldrb	r5, [r4, r7]
 80139f6:	f015 0508 	ands.w	r5, r5, #8
 80139fa:	d1f8      	bne.n	80139ee <_strtol_l.isra.0+0x1e>
 80139fc:	2c2d      	cmp	r4, #45	; 0x2d
 80139fe:	d134      	bne.n	8013a6a <_strtol_l.isra.0+0x9a>
 8013a00:	f89e 4000 	ldrb.w	r4, [lr]
 8013a04:	f04f 0801 	mov.w	r8, #1
 8013a08:	f106 0e02 	add.w	lr, r6, #2
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d05c      	beq.n	8013aca <_strtol_l.isra.0+0xfa>
 8013a10:	2b10      	cmp	r3, #16
 8013a12:	d10c      	bne.n	8013a2e <_strtol_l.isra.0+0x5e>
 8013a14:	2c30      	cmp	r4, #48	; 0x30
 8013a16:	d10a      	bne.n	8013a2e <_strtol_l.isra.0+0x5e>
 8013a18:	f89e 4000 	ldrb.w	r4, [lr]
 8013a1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013a20:	2c58      	cmp	r4, #88	; 0x58
 8013a22:	d14d      	bne.n	8013ac0 <_strtol_l.isra.0+0xf0>
 8013a24:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8013a28:	2310      	movs	r3, #16
 8013a2a:	f10e 0e02 	add.w	lr, lr, #2
 8013a2e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8013a32:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013a36:	2600      	movs	r6, #0
 8013a38:	fbbc f9f3 	udiv	r9, ip, r3
 8013a3c:	4635      	mov	r5, r6
 8013a3e:	fb03 ca19 	mls	sl, r3, r9, ip
 8013a42:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8013a46:	2f09      	cmp	r7, #9
 8013a48:	d818      	bhi.n	8013a7c <_strtol_l.isra.0+0xac>
 8013a4a:	463c      	mov	r4, r7
 8013a4c:	42a3      	cmp	r3, r4
 8013a4e:	dd24      	ble.n	8013a9a <_strtol_l.isra.0+0xca>
 8013a50:	2e00      	cmp	r6, #0
 8013a52:	db1f      	blt.n	8013a94 <_strtol_l.isra.0+0xc4>
 8013a54:	45a9      	cmp	r9, r5
 8013a56:	d31d      	bcc.n	8013a94 <_strtol_l.isra.0+0xc4>
 8013a58:	d101      	bne.n	8013a5e <_strtol_l.isra.0+0x8e>
 8013a5a:	45a2      	cmp	sl, r4
 8013a5c:	db1a      	blt.n	8013a94 <_strtol_l.isra.0+0xc4>
 8013a5e:	fb05 4503 	mla	r5, r5, r3, r4
 8013a62:	2601      	movs	r6, #1
 8013a64:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013a68:	e7eb      	b.n	8013a42 <_strtol_l.isra.0+0x72>
 8013a6a:	2c2b      	cmp	r4, #43	; 0x2b
 8013a6c:	bf08      	it	eq
 8013a6e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8013a72:	46a8      	mov	r8, r5
 8013a74:	bf08      	it	eq
 8013a76:	f106 0e02 	addeq.w	lr, r6, #2
 8013a7a:	e7c7      	b.n	8013a0c <_strtol_l.isra.0+0x3c>
 8013a7c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8013a80:	2f19      	cmp	r7, #25
 8013a82:	d801      	bhi.n	8013a88 <_strtol_l.isra.0+0xb8>
 8013a84:	3c37      	subs	r4, #55	; 0x37
 8013a86:	e7e1      	b.n	8013a4c <_strtol_l.isra.0+0x7c>
 8013a88:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8013a8c:	2f19      	cmp	r7, #25
 8013a8e:	d804      	bhi.n	8013a9a <_strtol_l.isra.0+0xca>
 8013a90:	3c57      	subs	r4, #87	; 0x57
 8013a92:	e7db      	b.n	8013a4c <_strtol_l.isra.0+0x7c>
 8013a94:	f04f 36ff 	mov.w	r6, #4294967295
 8013a98:	e7e4      	b.n	8013a64 <_strtol_l.isra.0+0x94>
 8013a9a:	2e00      	cmp	r6, #0
 8013a9c:	da05      	bge.n	8013aaa <_strtol_l.isra.0+0xda>
 8013a9e:	2322      	movs	r3, #34	; 0x22
 8013aa0:	6003      	str	r3, [r0, #0]
 8013aa2:	4665      	mov	r5, ip
 8013aa4:	b942      	cbnz	r2, 8013ab8 <_strtol_l.isra.0+0xe8>
 8013aa6:	4628      	mov	r0, r5
 8013aa8:	e79d      	b.n	80139e6 <_strtol_l.isra.0+0x16>
 8013aaa:	f1b8 0f00 	cmp.w	r8, #0
 8013aae:	d000      	beq.n	8013ab2 <_strtol_l.isra.0+0xe2>
 8013ab0:	426d      	negs	r5, r5
 8013ab2:	2a00      	cmp	r2, #0
 8013ab4:	d0f7      	beq.n	8013aa6 <_strtol_l.isra.0+0xd6>
 8013ab6:	b10e      	cbz	r6, 8013abc <_strtol_l.isra.0+0xec>
 8013ab8:	f10e 31ff 	add.w	r1, lr, #4294967295
 8013abc:	6011      	str	r1, [r2, #0]
 8013abe:	e7f2      	b.n	8013aa6 <_strtol_l.isra.0+0xd6>
 8013ac0:	2430      	movs	r4, #48	; 0x30
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d1b3      	bne.n	8013a2e <_strtol_l.isra.0+0x5e>
 8013ac6:	2308      	movs	r3, #8
 8013ac8:	e7b1      	b.n	8013a2e <_strtol_l.isra.0+0x5e>
 8013aca:	2c30      	cmp	r4, #48	; 0x30
 8013acc:	d0a4      	beq.n	8013a18 <_strtol_l.isra.0+0x48>
 8013ace:	230a      	movs	r3, #10
 8013ad0:	e7ad      	b.n	8013a2e <_strtol_l.isra.0+0x5e>
 8013ad2:	bf00      	nop
 8013ad4:	0802a625 	.word	0x0802a625

08013ad8 <_strtol_r>:
 8013ad8:	f7ff bf7a 	b.w	80139d0 <_strtol_l.isra.0>

08013adc <strtol>:
 8013adc:	4613      	mov	r3, r2
 8013ade:	460a      	mov	r2, r1
 8013ae0:	4601      	mov	r1, r0
 8013ae2:	4802      	ldr	r0, [pc, #8]	; (8013aec <strtol+0x10>)
 8013ae4:	6800      	ldr	r0, [r0, #0]
 8013ae6:	f7ff bf73 	b.w	80139d0 <_strtol_l.isra.0>
 8013aea:	bf00      	nop
 8013aec:	20000044 	.word	0x20000044

08013af0 <__assert_func>:
 8013af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013af2:	4614      	mov	r4, r2
 8013af4:	461a      	mov	r2, r3
 8013af6:	4b09      	ldr	r3, [pc, #36]	; (8013b1c <__assert_func+0x2c>)
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	4605      	mov	r5, r0
 8013afc:	68d8      	ldr	r0, [r3, #12]
 8013afe:	b14c      	cbz	r4, 8013b14 <__assert_func+0x24>
 8013b00:	4b07      	ldr	r3, [pc, #28]	; (8013b20 <__assert_func+0x30>)
 8013b02:	9100      	str	r1, [sp, #0]
 8013b04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013b08:	4906      	ldr	r1, [pc, #24]	; (8013b24 <__assert_func+0x34>)
 8013b0a:	462b      	mov	r3, r5
 8013b0c:	f000 fe88 	bl	8014820 <fiprintf>
 8013b10:	f002 fb56 	bl	80161c0 <abort>
 8013b14:	4b04      	ldr	r3, [pc, #16]	; (8013b28 <__assert_func+0x38>)
 8013b16:	461c      	mov	r4, r3
 8013b18:	e7f3      	b.n	8013b02 <__assert_func+0x12>
 8013b1a:	bf00      	nop
 8013b1c:	20000044 	.word	0x20000044
 8013b20:	0802a5e8 	.word	0x0802a5e8
 8013b24:	0802a5f5 	.word	0x0802a5f5
 8013b28:	0802a623 	.word	0x0802a623

08013b2c <quorem>:
 8013b2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b30:	6903      	ldr	r3, [r0, #16]
 8013b32:	690c      	ldr	r4, [r1, #16]
 8013b34:	42a3      	cmp	r3, r4
 8013b36:	4607      	mov	r7, r0
 8013b38:	f2c0 8081 	blt.w	8013c3e <quorem+0x112>
 8013b3c:	3c01      	subs	r4, #1
 8013b3e:	f101 0814 	add.w	r8, r1, #20
 8013b42:	f100 0514 	add.w	r5, r0, #20
 8013b46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013b4a:	9301      	str	r3, [sp, #4]
 8013b4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013b50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013b54:	3301      	adds	r3, #1
 8013b56:	429a      	cmp	r2, r3
 8013b58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013b5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013b60:	fbb2 f6f3 	udiv	r6, r2, r3
 8013b64:	d331      	bcc.n	8013bca <quorem+0x9e>
 8013b66:	f04f 0e00 	mov.w	lr, #0
 8013b6a:	4640      	mov	r0, r8
 8013b6c:	46ac      	mov	ip, r5
 8013b6e:	46f2      	mov	sl, lr
 8013b70:	f850 2b04 	ldr.w	r2, [r0], #4
 8013b74:	b293      	uxth	r3, r2
 8013b76:	fb06 e303 	mla	r3, r6, r3, lr
 8013b7a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013b7e:	b29b      	uxth	r3, r3
 8013b80:	ebaa 0303 	sub.w	r3, sl, r3
 8013b84:	0c12      	lsrs	r2, r2, #16
 8013b86:	f8dc a000 	ldr.w	sl, [ip]
 8013b8a:	fb06 e202 	mla	r2, r6, r2, lr
 8013b8e:	fa13 f38a 	uxtah	r3, r3, sl
 8013b92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013b96:	fa1f fa82 	uxth.w	sl, r2
 8013b9a:	f8dc 2000 	ldr.w	r2, [ip]
 8013b9e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8013ba2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013ba6:	b29b      	uxth	r3, r3
 8013ba8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013bac:	4581      	cmp	r9, r0
 8013bae:	f84c 3b04 	str.w	r3, [ip], #4
 8013bb2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013bb6:	d2db      	bcs.n	8013b70 <quorem+0x44>
 8013bb8:	f855 300b 	ldr.w	r3, [r5, fp]
 8013bbc:	b92b      	cbnz	r3, 8013bca <quorem+0x9e>
 8013bbe:	9b01      	ldr	r3, [sp, #4]
 8013bc0:	3b04      	subs	r3, #4
 8013bc2:	429d      	cmp	r5, r3
 8013bc4:	461a      	mov	r2, r3
 8013bc6:	d32e      	bcc.n	8013c26 <quorem+0xfa>
 8013bc8:	613c      	str	r4, [r7, #16]
 8013bca:	4638      	mov	r0, r7
 8013bcc:	f001 fc9e 	bl	801550c <__mcmp>
 8013bd0:	2800      	cmp	r0, #0
 8013bd2:	db24      	blt.n	8013c1e <quorem+0xf2>
 8013bd4:	3601      	adds	r6, #1
 8013bd6:	4628      	mov	r0, r5
 8013bd8:	f04f 0c00 	mov.w	ip, #0
 8013bdc:	f858 2b04 	ldr.w	r2, [r8], #4
 8013be0:	f8d0 e000 	ldr.w	lr, [r0]
 8013be4:	b293      	uxth	r3, r2
 8013be6:	ebac 0303 	sub.w	r3, ip, r3
 8013bea:	0c12      	lsrs	r2, r2, #16
 8013bec:	fa13 f38e 	uxtah	r3, r3, lr
 8013bf0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013bf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013bf8:	b29b      	uxth	r3, r3
 8013bfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013bfe:	45c1      	cmp	r9, r8
 8013c00:	f840 3b04 	str.w	r3, [r0], #4
 8013c04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013c08:	d2e8      	bcs.n	8013bdc <quorem+0xb0>
 8013c0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013c0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013c12:	b922      	cbnz	r2, 8013c1e <quorem+0xf2>
 8013c14:	3b04      	subs	r3, #4
 8013c16:	429d      	cmp	r5, r3
 8013c18:	461a      	mov	r2, r3
 8013c1a:	d30a      	bcc.n	8013c32 <quorem+0x106>
 8013c1c:	613c      	str	r4, [r7, #16]
 8013c1e:	4630      	mov	r0, r6
 8013c20:	b003      	add	sp, #12
 8013c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c26:	6812      	ldr	r2, [r2, #0]
 8013c28:	3b04      	subs	r3, #4
 8013c2a:	2a00      	cmp	r2, #0
 8013c2c:	d1cc      	bne.n	8013bc8 <quorem+0x9c>
 8013c2e:	3c01      	subs	r4, #1
 8013c30:	e7c7      	b.n	8013bc2 <quorem+0x96>
 8013c32:	6812      	ldr	r2, [r2, #0]
 8013c34:	3b04      	subs	r3, #4
 8013c36:	2a00      	cmp	r2, #0
 8013c38:	d1f0      	bne.n	8013c1c <quorem+0xf0>
 8013c3a:	3c01      	subs	r4, #1
 8013c3c:	e7eb      	b.n	8013c16 <quorem+0xea>
 8013c3e:	2000      	movs	r0, #0
 8013c40:	e7ee      	b.n	8013c20 <quorem+0xf4>
 8013c42:	0000      	movs	r0, r0
 8013c44:	0000      	movs	r0, r0
	...

08013c48 <_dtoa_r>:
 8013c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c4c:	ed2d 8b02 	vpush	{d8}
 8013c50:	ec57 6b10 	vmov	r6, r7, d0
 8013c54:	b095      	sub	sp, #84	; 0x54
 8013c56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013c58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013c5c:	9105      	str	r1, [sp, #20]
 8013c5e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013c62:	4604      	mov	r4, r0
 8013c64:	9209      	str	r2, [sp, #36]	; 0x24
 8013c66:	930f      	str	r3, [sp, #60]	; 0x3c
 8013c68:	b975      	cbnz	r5, 8013c88 <_dtoa_r+0x40>
 8013c6a:	2010      	movs	r0, #16
 8013c6c:	f001 f95e 	bl	8014f2c <malloc>
 8013c70:	4602      	mov	r2, r0
 8013c72:	6260      	str	r0, [r4, #36]	; 0x24
 8013c74:	b920      	cbnz	r0, 8013c80 <_dtoa_r+0x38>
 8013c76:	4bb2      	ldr	r3, [pc, #712]	; (8013f40 <_dtoa_r+0x2f8>)
 8013c78:	21ea      	movs	r1, #234	; 0xea
 8013c7a:	48b2      	ldr	r0, [pc, #712]	; (8013f44 <_dtoa_r+0x2fc>)
 8013c7c:	f7ff ff38 	bl	8013af0 <__assert_func>
 8013c80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013c84:	6005      	str	r5, [r0, #0]
 8013c86:	60c5      	str	r5, [r0, #12]
 8013c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c8a:	6819      	ldr	r1, [r3, #0]
 8013c8c:	b151      	cbz	r1, 8013ca4 <_dtoa_r+0x5c>
 8013c8e:	685a      	ldr	r2, [r3, #4]
 8013c90:	604a      	str	r2, [r1, #4]
 8013c92:	2301      	movs	r3, #1
 8013c94:	4093      	lsls	r3, r2
 8013c96:	608b      	str	r3, [r1, #8]
 8013c98:	4620      	mov	r0, r4
 8013c9a:	f001 f9af 	bl	8014ffc <_Bfree>
 8013c9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	601a      	str	r2, [r3, #0]
 8013ca4:	1e3b      	subs	r3, r7, #0
 8013ca6:	bfb9      	ittee	lt
 8013ca8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013cac:	9303      	strlt	r3, [sp, #12]
 8013cae:	2300      	movge	r3, #0
 8013cb0:	f8c8 3000 	strge.w	r3, [r8]
 8013cb4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013cb8:	4ba3      	ldr	r3, [pc, #652]	; (8013f48 <_dtoa_r+0x300>)
 8013cba:	bfbc      	itt	lt
 8013cbc:	2201      	movlt	r2, #1
 8013cbe:	f8c8 2000 	strlt.w	r2, [r8]
 8013cc2:	ea33 0309 	bics.w	r3, r3, r9
 8013cc6:	d11b      	bne.n	8013d00 <_dtoa_r+0xb8>
 8013cc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013cca:	f242 730f 	movw	r3, #9999	; 0x270f
 8013cce:	6013      	str	r3, [r2, #0]
 8013cd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013cd4:	4333      	orrs	r3, r6
 8013cd6:	f000 857a 	beq.w	80147ce <_dtoa_r+0xb86>
 8013cda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013cdc:	b963      	cbnz	r3, 8013cf8 <_dtoa_r+0xb0>
 8013cde:	4b9b      	ldr	r3, [pc, #620]	; (8013f4c <_dtoa_r+0x304>)
 8013ce0:	e024      	b.n	8013d2c <_dtoa_r+0xe4>
 8013ce2:	4b9b      	ldr	r3, [pc, #620]	; (8013f50 <_dtoa_r+0x308>)
 8013ce4:	9300      	str	r3, [sp, #0]
 8013ce6:	3308      	adds	r3, #8
 8013ce8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013cea:	6013      	str	r3, [r2, #0]
 8013cec:	9800      	ldr	r0, [sp, #0]
 8013cee:	b015      	add	sp, #84	; 0x54
 8013cf0:	ecbd 8b02 	vpop	{d8}
 8013cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cf8:	4b94      	ldr	r3, [pc, #592]	; (8013f4c <_dtoa_r+0x304>)
 8013cfa:	9300      	str	r3, [sp, #0]
 8013cfc:	3303      	adds	r3, #3
 8013cfe:	e7f3      	b.n	8013ce8 <_dtoa_r+0xa0>
 8013d00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013d04:	2200      	movs	r2, #0
 8013d06:	ec51 0b17 	vmov	r0, r1, d7
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013d10:	f7ec fef2 	bl	8000af8 <__aeabi_dcmpeq>
 8013d14:	4680      	mov	r8, r0
 8013d16:	b158      	cbz	r0, 8013d30 <_dtoa_r+0xe8>
 8013d18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013d1a:	2301      	movs	r3, #1
 8013d1c:	6013      	str	r3, [r2, #0]
 8013d1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	f000 8551 	beq.w	80147c8 <_dtoa_r+0xb80>
 8013d26:	488b      	ldr	r0, [pc, #556]	; (8013f54 <_dtoa_r+0x30c>)
 8013d28:	6018      	str	r0, [r3, #0]
 8013d2a:	1e43      	subs	r3, r0, #1
 8013d2c:	9300      	str	r3, [sp, #0]
 8013d2e:	e7dd      	b.n	8013cec <_dtoa_r+0xa4>
 8013d30:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013d34:	aa12      	add	r2, sp, #72	; 0x48
 8013d36:	a913      	add	r1, sp, #76	; 0x4c
 8013d38:	4620      	mov	r0, r4
 8013d3a:	f001 fd07 	bl	801574c <__d2b>
 8013d3e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013d42:	4683      	mov	fp, r0
 8013d44:	2d00      	cmp	r5, #0
 8013d46:	d07c      	beq.n	8013e42 <_dtoa_r+0x1fa>
 8013d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d4a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8013d4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013d52:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8013d56:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013d5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013d5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013d62:	4b7d      	ldr	r3, [pc, #500]	; (8013f58 <_dtoa_r+0x310>)
 8013d64:	2200      	movs	r2, #0
 8013d66:	4630      	mov	r0, r6
 8013d68:	4639      	mov	r1, r7
 8013d6a:	f7ec faa5 	bl	80002b8 <__aeabi_dsub>
 8013d6e:	a36e      	add	r3, pc, #440	; (adr r3, 8013f28 <_dtoa_r+0x2e0>)
 8013d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d74:	f7ec fc58 	bl	8000628 <__aeabi_dmul>
 8013d78:	a36d      	add	r3, pc, #436	; (adr r3, 8013f30 <_dtoa_r+0x2e8>)
 8013d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d7e:	f7ec fa9d 	bl	80002bc <__adddf3>
 8013d82:	4606      	mov	r6, r0
 8013d84:	4628      	mov	r0, r5
 8013d86:	460f      	mov	r7, r1
 8013d88:	f7ec fbe4 	bl	8000554 <__aeabi_i2d>
 8013d8c:	a36a      	add	r3, pc, #424	; (adr r3, 8013f38 <_dtoa_r+0x2f0>)
 8013d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d92:	f7ec fc49 	bl	8000628 <__aeabi_dmul>
 8013d96:	4602      	mov	r2, r0
 8013d98:	460b      	mov	r3, r1
 8013d9a:	4630      	mov	r0, r6
 8013d9c:	4639      	mov	r1, r7
 8013d9e:	f7ec fa8d 	bl	80002bc <__adddf3>
 8013da2:	4606      	mov	r6, r0
 8013da4:	460f      	mov	r7, r1
 8013da6:	f7ec feef 	bl	8000b88 <__aeabi_d2iz>
 8013daa:	2200      	movs	r2, #0
 8013dac:	4682      	mov	sl, r0
 8013dae:	2300      	movs	r3, #0
 8013db0:	4630      	mov	r0, r6
 8013db2:	4639      	mov	r1, r7
 8013db4:	f7ec feaa 	bl	8000b0c <__aeabi_dcmplt>
 8013db8:	b148      	cbz	r0, 8013dce <_dtoa_r+0x186>
 8013dba:	4650      	mov	r0, sl
 8013dbc:	f7ec fbca 	bl	8000554 <__aeabi_i2d>
 8013dc0:	4632      	mov	r2, r6
 8013dc2:	463b      	mov	r3, r7
 8013dc4:	f7ec fe98 	bl	8000af8 <__aeabi_dcmpeq>
 8013dc8:	b908      	cbnz	r0, 8013dce <_dtoa_r+0x186>
 8013dca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013dce:	f1ba 0f16 	cmp.w	sl, #22
 8013dd2:	d854      	bhi.n	8013e7e <_dtoa_r+0x236>
 8013dd4:	4b61      	ldr	r3, [pc, #388]	; (8013f5c <_dtoa_r+0x314>)
 8013dd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013de2:	f7ec fe93 	bl	8000b0c <__aeabi_dcmplt>
 8013de6:	2800      	cmp	r0, #0
 8013de8:	d04b      	beq.n	8013e82 <_dtoa_r+0x23a>
 8013dea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013dee:	2300      	movs	r3, #0
 8013df0:	930e      	str	r3, [sp, #56]	; 0x38
 8013df2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013df4:	1b5d      	subs	r5, r3, r5
 8013df6:	1e6b      	subs	r3, r5, #1
 8013df8:	9304      	str	r3, [sp, #16]
 8013dfa:	bf43      	ittte	mi
 8013dfc:	2300      	movmi	r3, #0
 8013dfe:	f1c5 0801 	rsbmi	r8, r5, #1
 8013e02:	9304      	strmi	r3, [sp, #16]
 8013e04:	f04f 0800 	movpl.w	r8, #0
 8013e08:	f1ba 0f00 	cmp.w	sl, #0
 8013e0c:	db3b      	blt.n	8013e86 <_dtoa_r+0x23e>
 8013e0e:	9b04      	ldr	r3, [sp, #16]
 8013e10:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8013e14:	4453      	add	r3, sl
 8013e16:	9304      	str	r3, [sp, #16]
 8013e18:	2300      	movs	r3, #0
 8013e1a:	9306      	str	r3, [sp, #24]
 8013e1c:	9b05      	ldr	r3, [sp, #20]
 8013e1e:	2b09      	cmp	r3, #9
 8013e20:	d869      	bhi.n	8013ef6 <_dtoa_r+0x2ae>
 8013e22:	2b05      	cmp	r3, #5
 8013e24:	bfc4      	itt	gt
 8013e26:	3b04      	subgt	r3, #4
 8013e28:	9305      	strgt	r3, [sp, #20]
 8013e2a:	9b05      	ldr	r3, [sp, #20]
 8013e2c:	f1a3 0302 	sub.w	r3, r3, #2
 8013e30:	bfcc      	ite	gt
 8013e32:	2500      	movgt	r5, #0
 8013e34:	2501      	movle	r5, #1
 8013e36:	2b03      	cmp	r3, #3
 8013e38:	d869      	bhi.n	8013f0e <_dtoa_r+0x2c6>
 8013e3a:	e8df f003 	tbb	[pc, r3]
 8013e3e:	4e2c      	.short	0x4e2c
 8013e40:	5a4c      	.short	0x5a4c
 8013e42:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8013e46:	441d      	add	r5, r3
 8013e48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013e4c:	2b20      	cmp	r3, #32
 8013e4e:	bfc1      	itttt	gt
 8013e50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013e54:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013e58:	fa09 f303 	lslgt.w	r3, r9, r3
 8013e5c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013e60:	bfda      	itte	le
 8013e62:	f1c3 0320 	rsble	r3, r3, #32
 8013e66:	fa06 f003 	lslle.w	r0, r6, r3
 8013e6a:	4318      	orrgt	r0, r3
 8013e6c:	f7ec fb62 	bl	8000534 <__aeabi_ui2d>
 8013e70:	2301      	movs	r3, #1
 8013e72:	4606      	mov	r6, r0
 8013e74:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013e78:	3d01      	subs	r5, #1
 8013e7a:	9310      	str	r3, [sp, #64]	; 0x40
 8013e7c:	e771      	b.n	8013d62 <_dtoa_r+0x11a>
 8013e7e:	2301      	movs	r3, #1
 8013e80:	e7b6      	b.n	8013df0 <_dtoa_r+0x1a8>
 8013e82:	900e      	str	r0, [sp, #56]	; 0x38
 8013e84:	e7b5      	b.n	8013df2 <_dtoa_r+0x1aa>
 8013e86:	f1ca 0300 	rsb	r3, sl, #0
 8013e8a:	9306      	str	r3, [sp, #24]
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	eba8 080a 	sub.w	r8, r8, sl
 8013e92:	930d      	str	r3, [sp, #52]	; 0x34
 8013e94:	e7c2      	b.n	8013e1c <_dtoa_r+0x1d4>
 8013e96:	2300      	movs	r3, #0
 8013e98:	9308      	str	r3, [sp, #32]
 8013e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	dc39      	bgt.n	8013f14 <_dtoa_r+0x2cc>
 8013ea0:	f04f 0901 	mov.w	r9, #1
 8013ea4:	f8cd 9004 	str.w	r9, [sp, #4]
 8013ea8:	464b      	mov	r3, r9
 8013eaa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013eae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	6042      	str	r2, [r0, #4]
 8013eb4:	2204      	movs	r2, #4
 8013eb6:	f102 0614 	add.w	r6, r2, #20
 8013eba:	429e      	cmp	r6, r3
 8013ebc:	6841      	ldr	r1, [r0, #4]
 8013ebe:	d92f      	bls.n	8013f20 <_dtoa_r+0x2d8>
 8013ec0:	4620      	mov	r0, r4
 8013ec2:	f001 f85b 	bl	8014f7c <_Balloc>
 8013ec6:	9000      	str	r0, [sp, #0]
 8013ec8:	2800      	cmp	r0, #0
 8013eca:	d14b      	bne.n	8013f64 <_dtoa_r+0x31c>
 8013ecc:	4b24      	ldr	r3, [pc, #144]	; (8013f60 <_dtoa_r+0x318>)
 8013ece:	4602      	mov	r2, r0
 8013ed0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013ed4:	e6d1      	b.n	8013c7a <_dtoa_r+0x32>
 8013ed6:	2301      	movs	r3, #1
 8013ed8:	e7de      	b.n	8013e98 <_dtoa_r+0x250>
 8013eda:	2300      	movs	r3, #0
 8013edc:	9308      	str	r3, [sp, #32]
 8013ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ee0:	eb0a 0903 	add.w	r9, sl, r3
 8013ee4:	f109 0301 	add.w	r3, r9, #1
 8013ee8:	2b01      	cmp	r3, #1
 8013eea:	9301      	str	r3, [sp, #4]
 8013eec:	bfb8      	it	lt
 8013eee:	2301      	movlt	r3, #1
 8013ef0:	e7dd      	b.n	8013eae <_dtoa_r+0x266>
 8013ef2:	2301      	movs	r3, #1
 8013ef4:	e7f2      	b.n	8013edc <_dtoa_r+0x294>
 8013ef6:	2501      	movs	r5, #1
 8013ef8:	2300      	movs	r3, #0
 8013efa:	9305      	str	r3, [sp, #20]
 8013efc:	9508      	str	r5, [sp, #32]
 8013efe:	f04f 39ff 	mov.w	r9, #4294967295
 8013f02:	2200      	movs	r2, #0
 8013f04:	f8cd 9004 	str.w	r9, [sp, #4]
 8013f08:	2312      	movs	r3, #18
 8013f0a:	9209      	str	r2, [sp, #36]	; 0x24
 8013f0c:	e7cf      	b.n	8013eae <_dtoa_r+0x266>
 8013f0e:	2301      	movs	r3, #1
 8013f10:	9308      	str	r3, [sp, #32]
 8013f12:	e7f4      	b.n	8013efe <_dtoa_r+0x2b6>
 8013f14:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8013f18:	f8cd 9004 	str.w	r9, [sp, #4]
 8013f1c:	464b      	mov	r3, r9
 8013f1e:	e7c6      	b.n	8013eae <_dtoa_r+0x266>
 8013f20:	3101      	adds	r1, #1
 8013f22:	6041      	str	r1, [r0, #4]
 8013f24:	0052      	lsls	r2, r2, #1
 8013f26:	e7c6      	b.n	8013eb6 <_dtoa_r+0x26e>
 8013f28:	636f4361 	.word	0x636f4361
 8013f2c:	3fd287a7 	.word	0x3fd287a7
 8013f30:	8b60c8b3 	.word	0x8b60c8b3
 8013f34:	3fc68a28 	.word	0x3fc68a28
 8013f38:	509f79fb 	.word	0x509f79fb
 8013f3c:	3fd34413 	.word	0x3fd34413
 8013f40:	0802a570 	.word	0x0802a570
 8013f44:	0802a732 	.word	0x0802a732
 8013f48:	7ff00000 	.word	0x7ff00000
 8013f4c:	0802a72e 	.word	0x0802a72e
 8013f50:	0802a725 	.word	0x0802a725
 8013f54:	0802a4f5 	.word	0x0802a4f5
 8013f58:	3ff80000 	.word	0x3ff80000
 8013f5c:	0802a8a8 	.word	0x0802a8a8
 8013f60:	0802a791 	.word	0x0802a791
 8013f64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f66:	9a00      	ldr	r2, [sp, #0]
 8013f68:	601a      	str	r2, [r3, #0]
 8013f6a:	9b01      	ldr	r3, [sp, #4]
 8013f6c:	2b0e      	cmp	r3, #14
 8013f6e:	f200 80ad 	bhi.w	80140cc <_dtoa_r+0x484>
 8013f72:	2d00      	cmp	r5, #0
 8013f74:	f000 80aa 	beq.w	80140cc <_dtoa_r+0x484>
 8013f78:	f1ba 0f00 	cmp.w	sl, #0
 8013f7c:	dd36      	ble.n	8013fec <_dtoa_r+0x3a4>
 8013f7e:	4ac3      	ldr	r2, [pc, #780]	; (801428c <_dtoa_r+0x644>)
 8013f80:	f00a 030f 	and.w	r3, sl, #15
 8013f84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013f88:	ed93 7b00 	vldr	d7, [r3]
 8013f8c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013f90:	ea4f 172a 	mov.w	r7, sl, asr #4
 8013f94:	eeb0 8a47 	vmov.f32	s16, s14
 8013f98:	eef0 8a67 	vmov.f32	s17, s15
 8013f9c:	d016      	beq.n	8013fcc <_dtoa_r+0x384>
 8013f9e:	4bbc      	ldr	r3, [pc, #752]	; (8014290 <_dtoa_r+0x648>)
 8013fa0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013fa4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013fa8:	f7ec fc68 	bl	800087c <__aeabi_ddiv>
 8013fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013fb0:	f007 070f 	and.w	r7, r7, #15
 8013fb4:	2503      	movs	r5, #3
 8013fb6:	4eb6      	ldr	r6, [pc, #728]	; (8014290 <_dtoa_r+0x648>)
 8013fb8:	b957      	cbnz	r7, 8013fd0 <_dtoa_r+0x388>
 8013fba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013fbe:	ec53 2b18 	vmov	r2, r3, d8
 8013fc2:	f7ec fc5b 	bl	800087c <__aeabi_ddiv>
 8013fc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013fca:	e029      	b.n	8014020 <_dtoa_r+0x3d8>
 8013fcc:	2502      	movs	r5, #2
 8013fce:	e7f2      	b.n	8013fb6 <_dtoa_r+0x36e>
 8013fd0:	07f9      	lsls	r1, r7, #31
 8013fd2:	d508      	bpl.n	8013fe6 <_dtoa_r+0x39e>
 8013fd4:	ec51 0b18 	vmov	r0, r1, d8
 8013fd8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013fdc:	f7ec fb24 	bl	8000628 <__aeabi_dmul>
 8013fe0:	ec41 0b18 	vmov	d8, r0, r1
 8013fe4:	3501      	adds	r5, #1
 8013fe6:	107f      	asrs	r7, r7, #1
 8013fe8:	3608      	adds	r6, #8
 8013fea:	e7e5      	b.n	8013fb8 <_dtoa_r+0x370>
 8013fec:	f000 80a6 	beq.w	801413c <_dtoa_r+0x4f4>
 8013ff0:	f1ca 0600 	rsb	r6, sl, #0
 8013ff4:	4ba5      	ldr	r3, [pc, #660]	; (801428c <_dtoa_r+0x644>)
 8013ff6:	4fa6      	ldr	r7, [pc, #664]	; (8014290 <_dtoa_r+0x648>)
 8013ff8:	f006 020f 	and.w	r2, r6, #15
 8013ffc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014004:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014008:	f7ec fb0e 	bl	8000628 <__aeabi_dmul>
 801400c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014010:	1136      	asrs	r6, r6, #4
 8014012:	2300      	movs	r3, #0
 8014014:	2502      	movs	r5, #2
 8014016:	2e00      	cmp	r6, #0
 8014018:	f040 8085 	bne.w	8014126 <_dtoa_r+0x4de>
 801401c:	2b00      	cmp	r3, #0
 801401e:	d1d2      	bne.n	8013fc6 <_dtoa_r+0x37e>
 8014020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014022:	2b00      	cmp	r3, #0
 8014024:	f000 808c 	beq.w	8014140 <_dtoa_r+0x4f8>
 8014028:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801402c:	4b99      	ldr	r3, [pc, #612]	; (8014294 <_dtoa_r+0x64c>)
 801402e:	2200      	movs	r2, #0
 8014030:	4630      	mov	r0, r6
 8014032:	4639      	mov	r1, r7
 8014034:	f7ec fd6a 	bl	8000b0c <__aeabi_dcmplt>
 8014038:	2800      	cmp	r0, #0
 801403a:	f000 8081 	beq.w	8014140 <_dtoa_r+0x4f8>
 801403e:	9b01      	ldr	r3, [sp, #4]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d07d      	beq.n	8014140 <_dtoa_r+0x4f8>
 8014044:	f1b9 0f00 	cmp.w	r9, #0
 8014048:	dd3c      	ble.n	80140c4 <_dtoa_r+0x47c>
 801404a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801404e:	9307      	str	r3, [sp, #28]
 8014050:	2200      	movs	r2, #0
 8014052:	4b91      	ldr	r3, [pc, #580]	; (8014298 <_dtoa_r+0x650>)
 8014054:	4630      	mov	r0, r6
 8014056:	4639      	mov	r1, r7
 8014058:	f7ec fae6 	bl	8000628 <__aeabi_dmul>
 801405c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014060:	3501      	adds	r5, #1
 8014062:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8014066:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801406a:	4628      	mov	r0, r5
 801406c:	f7ec fa72 	bl	8000554 <__aeabi_i2d>
 8014070:	4632      	mov	r2, r6
 8014072:	463b      	mov	r3, r7
 8014074:	f7ec fad8 	bl	8000628 <__aeabi_dmul>
 8014078:	4b88      	ldr	r3, [pc, #544]	; (801429c <_dtoa_r+0x654>)
 801407a:	2200      	movs	r2, #0
 801407c:	f7ec f91e 	bl	80002bc <__adddf3>
 8014080:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8014084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014088:	9303      	str	r3, [sp, #12]
 801408a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801408c:	2b00      	cmp	r3, #0
 801408e:	d15c      	bne.n	801414a <_dtoa_r+0x502>
 8014090:	4b83      	ldr	r3, [pc, #524]	; (80142a0 <_dtoa_r+0x658>)
 8014092:	2200      	movs	r2, #0
 8014094:	4630      	mov	r0, r6
 8014096:	4639      	mov	r1, r7
 8014098:	f7ec f90e 	bl	80002b8 <__aeabi_dsub>
 801409c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80140a0:	4606      	mov	r6, r0
 80140a2:	460f      	mov	r7, r1
 80140a4:	f7ec fd50 	bl	8000b48 <__aeabi_dcmpgt>
 80140a8:	2800      	cmp	r0, #0
 80140aa:	f040 8296 	bne.w	80145da <_dtoa_r+0x992>
 80140ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80140b2:	4630      	mov	r0, r6
 80140b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80140b8:	4639      	mov	r1, r7
 80140ba:	f7ec fd27 	bl	8000b0c <__aeabi_dcmplt>
 80140be:	2800      	cmp	r0, #0
 80140c0:	f040 8288 	bne.w	80145d4 <_dtoa_r+0x98c>
 80140c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80140c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80140cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	f2c0 8158 	blt.w	8014384 <_dtoa_r+0x73c>
 80140d4:	f1ba 0f0e 	cmp.w	sl, #14
 80140d8:	f300 8154 	bgt.w	8014384 <_dtoa_r+0x73c>
 80140dc:	4b6b      	ldr	r3, [pc, #428]	; (801428c <_dtoa_r+0x644>)
 80140de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80140e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80140e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	f280 80e3 	bge.w	80142b4 <_dtoa_r+0x66c>
 80140ee:	9b01      	ldr	r3, [sp, #4]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	f300 80df 	bgt.w	80142b4 <_dtoa_r+0x66c>
 80140f6:	f040 826d 	bne.w	80145d4 <_dtoa_r+0x98c>
 80140fa:	4b69      	ldr	r3, [pc, #420]	; (80142a0 <_dtoa_r+0x658>)
 80140fc:	2200      	movs	r2, #0
 80140fe:	4640      	mov	r0, r8
 8014100:	4649      	mov	r1, r9
 8014102:	f7ec fa91 	bl	8000628 <__aeabi_dmul>
 8014106:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801410a:	f7ec fd13 	bl	8000b34 <__aeabi_dcmpge>
 801410e:	9e01      	ldr	r6, [sp, #4]
 8014110:	4637      	mov	r7, r6
 8014112:	2800      	cmp	r0, #0
 8014114:	f040 8243 	bne.w	801459e <_dtoa_r+0x956>
 8014118:	9d00      	ldr	r5, [sp, #0]
 801411a:	2331      	movs	r3, #49	; 0x31
 801411c:	f805 3b01 	strb.w	r3, [r5], #1
 8014120:	f10a 0a01 	add.w	sl, sl, #1
 8014124:	e23f      	b.n	80145a6 <_dtoa_r+0x95e>
 8014126:	07f2      	lsls	r2, r6, #31
 8014128:	d505      	bpl.n	8014136 <_dtoa_r+0x4ee>
 801412a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801412e:	f7ec fa7b 	bl	8000628 <__aeabi_dmul>
 8014132:	3501      	adds	r5, #1
 8014134:	2301      	movs	r3, #1
 8014136:	1076      	asrs	r6, r6, #1
 8014138:	3708      	adds	r7, #8
 801413a:	e76c      	b.n	8014016 <_dtoa_r+0x3ce>
 801413c:	2502      	movs	r5, #2
 801413e:	e76f      	b.n	8014020 <_dtoa_r+0x3d8>
 8014140:	9b01      	ldr	r3, [sp, #4]
 8014142:	f8cd a01c 	str.w	sl, [sp, #28]
 8014146:	930c      	str	r3, [sp, #48]	; 0x30
 8014148:	e78d      	b.n	8014066 <_dtoa_r+0x41e>
 801414a:	9900      	ldr	r1, [sp, #0]
 801414c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801414e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014150:	4b4e      	ldr	r3, [pc, #312]	; (801428c <_dtoa_r+0x644>)
 8014152:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014156:	4401      	add	r1, r0
 8014158:	9102      	str	r1, [sp, #8]
 801415a:	9908      	ldr	r1, [sp, #32]
 801415c:	eeb0 8a47 	vmov.f32	s16, s14
 8014160:	eef0 8a67 	vmov.f32	s17, s15
 8014164:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014168:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801416c:	2900      	cmp	r1, #0
 801416e:	d045      	beq.n	80141fc <_dtoa_r+0x5b4>
 8014170:	494c      	ldr	r1, [pc, #304]	; (80142a4 <_dtoa_r+0x65c>)
 8014172:	2000      	movs	r0, #0
 8014174:	f7ec fb82 	bl	800087c <__aeabi_ddiv>
 8014178:	ec53 2b18 	vmov	r2, r3, d8
 801417c:	f7ec f89c 	bl	80002b8 <__aeabi_dsub>
 8014180:	9d00      	ldr	r5, [sp, #0]
 8014182:	ec41 0b18 	vmov	d8, r0, r1
 8014186:	4639      	mov	r1, r7
 8014188:	4630      	mov	r0, r6
 801418a:	f7ec fcfd 	bl	8000b88 <__aeabi_d2iz>
 801418e:	900c      	str	r0, [sp, #48]	; 0x30
 8014190:	f7ec f9e0 	bl	8000554 <__aeabi_i2d>
 8014194:	4602      	mov	r2, r0
 8014196:	460b      	mov	r3, r1
 8014198:	4630      	mov	r0, r6
 801419a:	4639      	mov	r1, r7
 801419c:	f7ec f88c 	bl	80002b8 <__aeabi_dsub>
 80141a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80141a2:	3330      	adds	r3, #48	; 0x30
 80141a4:	f805 3b01 	strb.w	r3, [r5], #1
 80141a8:	ec53 2b18 	vmov	r2, r3, d8
 80141ac:	4606      	mov	r6, r0
 80141ae:	460f      	mov	r7, r1
 80141b0:	f7ec fcac 	bl	8000b0c <__aeabi_dcmplt>
 80141b4:	2800      	cmp	r0, #0
 80141b6:	d165      	bne.n	8014284 <_dtoa_r+0x63c>
 80141b8:	4632      	mov	r2, r6
 80141ba:	463b      	mov	r3, r7
 80141bc:	4935      	ldr	r1, [pc, #212]	; (8014294 <_dtoa_r+0x64c>)
 80141be:	2000      	movs	r0, #0
 80141c0:	f7ec f87a 	bl	80002b8 <__aeabi_dsub>
 80141c4:	ec53 2b18 	vmov	r2, r3, d8
 80141c8:	f7ec fca0 	bl	8000b0c <__aeabi_dcmplt>
 80141cc:	2800      	cmp	r0, #0
 80141ce:	f040 80b9 	bne.w	8014344 <_dtoa_r+0x6fc>
 80141d2:	9b02      	ldr	r3, [sp, #8]
 80141d4:	429d      	cmp	r5, r3
 80141d6:	f43f af75 	beq.w	80140c4 <_dtoa_r+0x47c>
 80141da:	4b2f      	ldr	r3, [pc, #188]	; (8014298 <_dtoa_r+0x650>)
 80141dc:	ec51 0b18 	vmov	r0, r1, d8
 80141e0:	2200      	movs	r2, #0
 80141e2:	f7ec fa21 	bl	8000628 <__aeabi_dmul>
 80141e6:	4b2c      	ldr	r3, [pc, #176]	; (8014298 <_dtoa_r+0x650>)
 80141e8:	ec41 0b18 	vmov	d8, r0, r1
 80141ec:	2200      	movs	r2, #0
 80141ee:	4630      	mov	r0, r6
 80141f0:	4639      	mov	r1, r7
 80141f2:	f7ec fa19 	bl	8000628 <__aeabi_dmul>
 80141f6:	4606      	mov	r6, r0
 80141f8:	460f      	mov	r7, r1
 80141fa:	e7c4      	b.n	8014186 <_dtoa_r+0x53e>
 80141fc:	ec51 0b17 	vmov	r0, r1, d7
 8014200:	f7ec fa12 	bl	8000628 <__aeabi_dmul>
 8014204:	9b02      	ldr	r3, [sp, #8]
 8014206:	9d00      	ldr	r5, [sp, #0]
 8014208:	930c      	str	r3, [sp, #48]	; 0x30
 801420a:	ec41 0b18 	vmov	d8, r0, r1
 801420e:	4639      	mov	r1, r7
 8014210:	4630      	mov	r0, r6
 8014212:	f7ec fcb9 	bl	8000b88 <__aeabi_d2iz>
 8014216:	9011      	str	r0, [sp, #68]	; 0x44
 8014218:	f7ec f99c 	bl	8000554 <__aeabi_i2d>
 801421c:	4602      	mov	r2, r0
 801421e:	460b      	mov	r3, r1
 8014220:	4630      	mov	r0, r6
 8014222:	4639      	mov	r1, r7
 8014224:	f7ec f848 	bl	80002b8 <__aeabi_dsub>
 8014228:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801422a:	3330      	adds	r3, #48	; 0x30
 801422c:	f805 3b01 	strb.w	r3, [r5], #1
 8014230:	9b02      	ldr	r3, [sp, #8]
 8014232:	429d      	cmp	r5, r3
 8014234:	4606      	mov	r6, r0
 8014236:	460f      	mov	r7, r1
 8014238:	f04f 0200 	mov.w	r2, #0
 801423c:	d134      	bne.n	80142a8 <_dtoa_r+0x660>
 801423e:	4b19      	ldr	r3, [pc, #100]	; (80142a4 <_dtoa_r+0x65c>)
 8014240:	ec51 0b18 	vmov	r0, r1, d8
 8014244:	f7ec f83a 	bl	80002bc <__adddf3>
 8014248:	4602      	mov	r2, r0
 801424a:	460b      	mov	r3, r1
 801424c:	4630      	mov	r0, r6
 801424e:	4639      	mov	r1, r7
 8014250:	f7ec fc7a 	bl	8000b48 <__aeabi_dcmpgt>
 8014254:	2800      	cmp	r0, #0
 8014256:	d175      	bne.n	8014344 <_dtoa_r+0x6fc>
 8014258:	ec53 2b18 	vmov	r2, r3, d8
 801425c:	4911      	ldr	r1, [pc, #68]	; (80142a4 <_dtoa_r+0x65c>)
 801425e:	2000      	movs	r0, #0
 8014260:	f7ec f82a 	bl	80002b8 <__aeabi_dsub>
 8014264:	4602      	mov	r2, r0
 8014266:	460b      	mov	r3, r1
 8014268:	4630      	mov	r0, r6
 801426a:	4639      	mov	r1, r7
 801426c:	f7ec fc4e 	bl	8000b0c <__aeabi_dcmplt>
 8014270:	2800      	cmp	r0, #0
 8014272:	f43f af27 	beq.w	80140c4 <_dtoa_r+0x47c>
 8014276:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014278:	1e6b      	subs	r3, r5, #1
 801427a:	930c      	str	r3, [sp, #48]	; 0x30
 801427c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014280:	2b30      	cmp	r3, #48	; 0x30
 8014282:	d0f8      	beq.n	8014276 <_dtoa_r+0x62e>
 8014284:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014288:	e04a      	b.n	8014320 <_dtoa_r+0x6d8>
 801428a:	bf00      	nop
 801428c:	0802a8a8 	.word	0x0802a8a8
 8014290:	0802a880 	.word	0x0802a880
 8014294:	3ff00000 	.word	0x3ff00000
 8014298:	40240000 	.word	0x40240000
 801429c:	401c0000 	.word	0x401c0000
 80142a0:	40140000 	.word	0x40140000
 80142a4:	3fe00000 	.word	0x3fe00000
 80142a8:	4baf      	ldr	r3, [pc, #700]	; (8014568 <_dtoa_r+0x920>)
 80142aa:	f7ec f9bd 	bl	8000628 <__aeabi_dmul>
 80142ae:	4606      	mov	r6, r0
 80142b0:	460f      	mov	r7, r1
 80142b2:	e7ac      	b.n	801420e <_dtoa_r+0x5c6>
 80142b4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80142b8:	9d00      	ldr	r5, [sp, #0]
 80142ba:	4642      	mov	r2, r8
 80142bc:	464b      	mov	r3, r9
 80142be:	4630      	mov	r0, r6
 80142c0:	4639      	mov	r1, r7
 80142c2:	f7ec fadb 	bl	800087c <__aeabi_ddiv>
 80142c6:	f7ec fc5f 	bl	8000b88 <__aeabi_d2iz>
 80142ca:	9002      	str	r0, [sp, #8]
 80142cc:	f7ec f942 	bl	8000554 <__aeabi_i2d>
 80142d0:	4642      	mov	r2, r8
 80142d2:	464b      	mov	r3, r9
 80142d4:	f7ec f9a8 	bl	8000628 <__aeabi_dmul>
 80142d8:	4602      	mov	r2, r0
 80142da:	460b      	mov	r3, r1
 80142dc:	4630      	mov	r0, r6
 80142de:	4639      	mov	r1, r7
 80142e0:	f7eb ffea 	bl	80002b8 <__aeabi_dsub>
 80142e4:	9e02      	ldr	r6, [sp, #8]
 80142e6:	9f01      	ldr	r7, [sp, #4]
 80142e8:	3630      	adds	r6, #48	; 0x30
 80142ea:	f805 6b01 	strb.w	r6, [r5], #1
 80142ee:	9e00      	ldr	r6, [sp, #0]
 80142f0:	1bae      	subs	r6, r5, r6
 80142f2:	42b7      	cmp	r7, r6
 80142f4:	4602      	mov	r2, r0
 80142f6:	460b      	mov	r3, r1
 80142f8:	d137      	bne.n	801436a <_dtoa_r+0x722>
 80142fa:	f7eb ffdf 	bl	80002bc <__adddf3>
 80142fe:	4642      	mov	r2, r8
 8014300:	464b      	mov	r3, r9
 8014302:	4606      	mov	r6, r0
 8014304:	460f      	mov	r7, r1
 8014306:	f7ec fc1f 	bl	8000b48 <__aeabi_dcmpgt>
 801430a:	b9c8      	cbnz	r0, 8014340 <_dtoa_r+0x6f8>
 801430c:	4642      	mov	r2, r8
 801430e:	464b      	mov	r3, r9
 8014310:	4630      	mov	r0, r6
 8014312:	4639      	mov	r1, r7
 8014314:	f7ec fbf0 	bl	8000af8 <__aeabi_dcmpeq>
 8014318:	b110      	cbz	r0, 8014320 <_dtoa_r+0x6d8>
 801431a:	9b02      	ldr	r3, [sp, #8]
 801431c:	07d9      	lsls	r1, r3, #31
 801431e:	d40f      	bmi.n	8014340 <_dtoa_r+0x6f8>
 8014320:	4620      	mov	r0, r4
 8014322:	4659      	mov	r1, fp
 8014324:	f000 fe6a 	bl	8014ffc <_Bfree>
 8014328:	2300      	movs	r3, #0
 801432a:	702b      	strb	r3, [r5, #0]
 801432c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801432e:	f10a 0001 	add.w	r0, sl, #1
 8014332:	6018      	str	r0, [r3, #0]
 8014334:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014336:	2b00      	cmp	r3, #0
 8014338:	f43f acd8 	beq.w	8013cec <_dtoa_r+0xa4>
 801433c:	601d      	str	r5, [r3, #0]
 801433e:	e4d5      	b.n	8013cec <_dtoa_r+0xa4>
 8014340:	f8cd a01c 	str.w	sl, [sp, #28]
 8014344:	462b      	mov	r3, r5
 8014346:	461d      	mov	r5, r3
 8014348:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801434c:	2a39      	cmp	r2, #57	; 0x39
 801434e:	d108      	bne.n	8014362 <_dtoa_r+0x71a>
 8014350:	9a00      	ldr	r2, [sp, #0]
 8014352:	429a      	cmp	r2, r3
 8014354:	d1f7      	bne.n	8014346 <_dtoa_r+0x6fe>
 8014356:	9a07      	ldr	r2, [sp, #28]
 8014358:	9900      	ldr	r1, [sp, #0]
 801435a:	3201      	adds	r2, #1
 801435c:	9207      	str	r2, [sp, #28]
 801435e:	2230      	movs	r2, #48	; 0x30
 8014360:	700a      	strb	r2, [r1, #0]
 8014362:	781a      	ldrb	r2, [r3, #0]
 8014364:	3201      	adds	r2, #1
 8014366:	701a      	strb	r2, [r3, #0]
 8014368:	e78c      	b.n	8014284 <_dtoa_r+0x63c>
 801436a:	4b7f      	ldr	r3, [pc, #508]	; (8014568 <_dtoa_r+0x920>)
 801436c:	2200      	movs	r2, #0
 801436e:	f7ec f95b 	bl	8000628 <__aeabi_dmul>
 8014372:	2200      	movs	r2, #0
 8014374:	2300      	movs	r3, #0
 8014376:	4606      	mov	r6, r0
 8014378:	460f      	mov	r7, r1
 801437a:	f7ec fbbd 	bl	8000af8 <__aeabi_dcmpeq>
 801437e:	2800      	cmp	r0, #0
 8014380:	d09b      	beq.n	80142ba <_dtoa_r+0x672>
 8014382:	e7cd      	b.n	8014320 <_dtoa_r+0x6d8>
 8014384:	9a08      	ldr	r2, [sp, #32]
 8014386:	2a00      	cmp	r2, #0
 8014388:	f000 80c4 	beq.w	8014514 <_dtoa_r+0x8cc>
 801438c:	9a05      	ldr	r2, [sp, #20]
 801438e:	2a01      	cmp	r2, #1
 8014390:	f300 80a8 	bgt.w	80144e4 <_dtoa_r+0x89c>
 8014394:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014396:	2a00      	cmp	r2, #0
 8014398:	f000 80a0 	beq.w	80144dc <_dtoa_r+0x894>
 801439c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80143a0:	9e06      	ldr	r6, [sp, #24]
 80143a2:	4645      	mov	r5, r8
 80143a4:	9a04      	ldr	r2, [sp, #16]
 80143a6:	2101      	movs	r1, #1
 80143a8:	441a      	add	r2, r3
 80143aa:	4620      	mov	r0, r4
 80143ac:	4498      	add	r8, r3
 80143ae:	9204      	str	r2, [sp, #16]
 80143b0:	f000 ff2a 	bl	8015208 <__i2b>
 80143b4:	4607      	mov	r7, r0
 80143b6:	2d00      	cmp	r5, #0
 80143b8:	dd0b      	ble.n	80143d2 <_dtoa_r+0x78a>
 80143ba:	9b04      	ldr	r3, [sp, #16]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	dd08      	ble.n	80143d2 <_dtoa_r+0x78a>
 80143c0:	42ab      	cmp	r3, r5
 80143c2:	9a04      	ldr	r2, [sp, #16]
 80143c4:	bfa8      	it	ge
 80143c6:	462b      	movge	r3, r5
 80143c8:	eba8 0803 	sub.w	r8, r8, r3
 80143cc:	1aed      	subs	r5, r5, r3
 80143ce:	1ad3      	subs	r3, r2, r3
 80143d0:	9304      	str	r3, [sp, #16]
 80143d2:	9b06      	ldr	r3, [sp, #24]
 80143d4:	b1fb      	cbz	r3, 8014416 <_dtoa_r+0x7ce>
 80143d6:	9b08      	ldr	r3, [sp, #32]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	f000 809f 	beq.w	801451c <_dtoa_r+0x8d4>
 80143de:	2e00      	cmp	r6, #0
 80143e0:	dd11      	ble.n	8014406 <_dtoa_r+0x7be>
 80143e2:	4639      	mov	r1, r7
 80143e4:	4632      	mov	r2, r6
 80143e6:	4620      	mov	r0, r4
 80143e8:	f000 ffca 	bl	8015380 <__pow5mult>
 80143ec:	465a      	mov	r2, fp
 80143ee:	4601      	mov	r1, r0
 80143f0:	4607      	mov	r7, r0
 80143f2:	4620      	mov	r0, r4
 80143f4:	f000 ff1e 	bl	8015234 <__multiply>
 80143f8:	4659      	mov	r1, fp
 80143fa:	9007      	str	r0, [sp, #28]
 80143fc:	4620      	mov	r0, r4
 80143fe:	f000 fdfd 	bl	8014ffc <_Bfree>
 8014402:	9b07      	ldr	r3, [sp, #28]
 8014404:	469b      	mov	fp, r3
 8014406:	9b06      	ldr	r3, [sp, #24]
 8014408:	1b9a      	subs	r2, r3, r6
 801440a:	d004      	beq.n	8014416 <_dtoa_r+0x7ce>
 801440c:	4659      	mov	r1, fp
 801440e:	4620      	mov	r0, r4
 8014410:	f000 ffb6 	bl	8015380 <__pow5mult>
 8014414:	4683      	mov	fp, r0
 8014416:	2101      	movs	r1, #1
 8014418:	4620      	mov	r0, r4
 801441a:	f000 fef5 	bl	8015208 <__i2b>
 801441e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014420:	2b00      	cmp	r3, #0
 8014422:	4606      	mov	r6, r0
 8014424:	dd7c      	ble.n	8014520 <_dtoa_r+0x8d8>
 8014426:	461a      	mov	r2, r3
 8014428:	4601      	mov	r1, r0
 801442a:	4620      	mov	r0, r4
 801442c:	f000 ffa8 	bl	8015380 <__pow5mult>
 8014430:	9b05      	ldr	r3, [sp, #20]
 8014432:	2b01      	cmp	r3, #1
 8014434:	4606      	mov	r6, r0
 8014436:	dd76      	ble.n	8014526 <_dtoa_r+0x8de>
 8014438:	2300      	movs	r3, #0
 801443a:	9306      	str	r3, [sp, #24]
 801443c:	6933      	ldr	r3, [r6, #16]
 801443e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014442:	6918      	ldr	r0, [r3, #16]
 8014444:	f000 fe90 	bl	8015168 <__hi0bits>
 8014448:	f1c0 0020 	rsb	r0, r0, #32
 801444c:	9b04      	ldr	r3, [sp, #16]
 801444e:	4418      	add	r0, r3
 8014450:	f010 001f 	ands.w	r0, r0, #31
 8014454:	f000 8086 	beq.w	8014564 <_dtoa_r+0x91c>
 8014458:	f1c0 0320 	rsb	r3, r0, #32
 801445c:	2b04      	cmp	r3, #4
 801445e:	dd7f      	ble.n	8014560 <_dtoa_r+0x918>
 8014460:	f1c0 001c 	rsb	r0, r0, #28
 8014464:	9b04      	ldr	r3, [sp, #16]
 8014466:	4403      	add	r3, r0
 8014468:	4480      	add	r8, r0
 801446a:	4405      	add	r5, r0
 801446c:	9304      	str	r3, [sp, #16]
 801446e:	f1b8 0f00 	cmp.w	r8, #0
 8014472:	dd05      	ble.n	8014480 <_dtoa_r+0x838>
 8014474:	4659      	mov	r1, fp
 8014476:	4642      	mov	r2, r8
 8014478:	4620      	mov	r0, r4
 801447a:	f000 ffdb 	bl	8015434 <__lshift>
 801447e:	4683      	mov	fp, r0
 8014480:	9b04      	ldr	r3, [sp, #16]
 8014482:	2b00      	cmp	r3, #0
 8014484:	dd05      	ble.n	8014492 <_dtoa_r+0x84a>
 8014486:	4631      	mov	r1, r6
 8014488:	461a      	mov	r2, r3
 801448a:	4620      	mov	r0, r4
 801448c:	f000 ffd2 	bl	8015434 <__lshift>
 8014490:	4606      	mov	r6, r0
 8014492:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014494:	2b00      	cmp	r3, #0
 8014496:	d069      	beq.n	801456c <_dtoa_r+0x924>
 8014498:	4631      	mov	r1, r6
 801449a:	4658      	mov	r0, fp
 801449c:	f001 f836 	bl	801550c <__mcmp>
 80144a0:	2800      	cmp	r0, #0
 80144a2:	da63      	bge.n	801456c <_dtoa_r+0x924>
 80144a4:	2300      	movs	r3, #0
 80144a6:	4659      	mov	r1, fp
 80144a8:	220a      	movs	r2, #10
 80144aa:	4620      	mov	r0, r4
 80144ac:	f000 fdc8 	bl	8015040 <__multadd>
 80144b0:	9b08      	ldr	r3, [sp, #32]
 80144b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80144b6:	4683      	mov	fp, r0
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	f000 818f 	beq.w	80147dc <_dtoa_r+0xb94>
 80144be:	4639      	mov	r1, r7
 80144c0:	2300      	movs	r3, #0
 80144c2:	220a      	movs	r2, #10
 80144c4:	4620      	mov	r0, r4
 80144c6:	f000 fdbb 	bl	8015040 <__multadd>
 80144ca:	f1b9 0f00 	cmp.w	r9, #0
 80144ce:	4607      	mov	r7, r0
 80144d0:	f300 808e 	bgt.w	80145f0 <_dtoa_r+0x9a8>
 80144d4:	9b05      	ldr	r3, [sp, #20]
 80144d6:	2b02      	cmp	r3, #2
 80144d8:	dc50      	bgt.n	801457c <_dtoa_r+0x934>
 80144da:	e089      	b.n	80145f0 <_dtoa_r+0x9a8>
 80144dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80144de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80144e2:	e75d      	b.n	80143a0 <_dtoa_r+0x758>
 80144e4:	9b01      	ldr	r3, [sp, #4]
 80144e6:	1e5e      	subs	r6, r3, #1
 80144e8:	9b06      	ldr	r3, [sp, #24]
 80144ea:	42b3      	cmp	r3, r6
 80144ec:	bfbf      	itttt	lt
 80144ee:	9b06      	ldrlt	r3, [sp, #24]
 80144f0:	9606      	strlt	r6, [sp, #24]
 80144f2:	1af2      	sublt	r2, r6, r3
 80144f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80144f6:	bfb6      	itet	lt
 80144f8:	189b      	addlt	r3, r3, r2
 80144fa:	1b9e      	subge	r6, r3, r6
 80144fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80144fe:	9b01      	ldr	r3, [sp, #4]
 8014500:	bfb8      	it	lt
 8014502:	2600      	movlt	r6, #0
 8014504:	2b00      	cmp	r3, #0
 8014506:	bfb5      	itete	lt
 8014508:	eba8 0503 	sublt.w	r5, r8, r3
 801450c:	9b01      	ldrge	r3, [sp, #4]
 801450e:	2300      	movlt	r3, #0
 8014510:	4645      	movge	r5, r8
 8014512:	e747      	b.n	80143a4 <_dtoa_r+0x75c>
 8014514:	9e06      	ldr	r6, [sp, #24]
 8014516:	9f08      	ldr	r7, [sp, #32]
 8014518:	4645      	mov	r5, r8
 801451a:	e74c      	b.n	80143b6 <_dtoa_r+0x76e>
 801451c:	9a06      	ldr	r2, [sp, #24]
 801451e:	e775      	b.n	801440c <_dtoa_r+0x7c4>
 8014520:	9b05      	ldr	r3, [sp, #20]
 8014522:	2b01      	cmp	r3, #1
 8014524:	dc18      	bgt.n	8014558 <_dtoa_r+0x910>
 8014526:	9b02      	ldr	r3, [sp, #8]
 8014528:	b9b3      	cbnz	r3, 8014558 <_dtoa_r+0x910>
 801452a:	9b03      	ldr	r3, [sp, #12]
 801452c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014530:	b9a3      	cbnz	r3, 801455c <_dtoa_r+0x914>
 8014532:	9b03      	ldr	r3, [sp, #12]
 8014534:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014538:	0d1b      	lsrs	r3, r3, #20
 801453a:	051b      	lsls	r3, r3, #20
 801453c:	b12b      	cbz	r3, 801454a <_dtoa_r+0x902>
 801453e:	9b04      	ldr	r3, [sp, #16]
 8014540:	3301      	adds	r3, #1
 8014542:	9304      	str	r3, [sp, #16]
 8014544:	f108 0801 	add.w	r8, r8, #1
 8014548:	2301      	movs	r3, #1
 801454a:	9306      	str	r3, [sp, #24]
 801454c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801454e:	2b00      	cmp	r3, #0
 8014550:	f47f af74 	bne.w	801443c <_dtoa_r+0x7f4>
 8014554:	2001      	movs	r0, #1
 8014556:	e779      	b.n	801444c <_dtoa_r+0x804>
 8014558:	2300      	movs	r3, #0
 801455a:	e7f6      	b.n	801454a <_dtoa_r+0x902>
 801455c:	9b02      	ldr	r3, [sp, #8]
 801455e:	e7f4      	b.n	801454a <_dtoa_r+0x902>
 8014560:	d085      	beq.n	801446e <_dtoa_r+0x826>
 8014562:	4618      	mov	r0, r3
 8014564:	301c      	adds	r0, #28
 8014566:	e77d      	b.n	8014464 <_dtoa_r+0x81c>
 8014568:	40240000 	.word	0x40240000
 801456c:	9b01      	ldr	r3, [sp, #4]
 801456e:	2b00      	cmp	r3, #0
 8014570:	dc38      	bgt.n	80145e4 <_dtoa_r+0x99c>
 8014572:	9b05      	ldr	r3, [sp, #20]
 8014574:	2b02      	cmp	r3, #2
 8014576:	dd35      	ble.n	80145e4 <_dtoa_r+0x99c>
 8014578:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801457c:	f1b9 0f00 	cmp.w	r9, #0
 8014580:	d10d      	bne.n	801459e <_dtoa_r+0x956>
 8014582:	4631      	mov	r1, r6
 8014584:	464b      	mov	r3, r9
 8014586:	2205      	movs	r2, #5
 8014588:	4620      	mov	r0, r4
 801458a:	f000 fd59 	bl	8015040 <__multadd>
 801458e:	4601      	mov	r1, r0
 8014590:	4606      	mov	r6, r0
 8014592:	4658      	mov	r0, fp
 8014594:	f000 ffba 	bl	801550c <__mcmp>
 8014598:	2800      	cmp	r0, #0
 801459a:	f73f adbd 	bgt.w	8014118 <_dtoa_r+0x4d0>
 801459e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145a0:	9d00      	ldr	r5, [sp, #0]
 80145a2:	ea6f 0a03 	mvn.w	sl, r3
 80145a6:	f04f 0800 	mov.w	r8, #0
 80145aa:	4631      	mov	r1, r6
 80145ac:	4620      	mov	r0, r4
 80145ae:	f000 fd25 	bl	8014ffc <_Bfree>
 80145b2:	2f00      	cmp	r7, #0
 80145b4:	f43f aeb4 	beq.w	8014320 <_dtoa_r+0x6d8>
 80145b8:	f1b8 0f00 	cmp.w	r8, #0
 80145bc:	d005      	beq.n	80145ca <_dtoa_r+0x982>
 80145be:	45b8      	cmp	r8, r7
 80145c0:	d003      	beq.n	80145ca <_dtoa_r+0x982>
 80145c2:	4641      	mov	r1, r8
 80145c4:	4620      	mov	r0, r4
 80145c6:	f000 fd19 	bl	8014ffc <_Bfree>
 80145ca:	4639      	mov	r1, r7
 80145cc:	4620      	mov	r0, r4
 80145ce:	f000 fd15 	bl	8014ffc <_Bfree>
 80145d2:	e6a5      	b.n	8014320 <_dtoa_r+0x6d8>
 80145d4:	2600      	movs	r6, #0
 80145d6:	4637      	mov	r7, r6
 80145d8:	e7e1      	b.n	801459e <_dtoa_r+0x956>
 80145da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80145dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80145e0:	4637      	mov	r7, r6
 80145e2:	e599      	b.n	8014118 <_dtoa_r+0x4d0>
 80145e4:	9b08      	ldr	r3, [sp, #32]
 80145e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	f000 80fd 	beq.w	80147ea <_dtoa_r+0xba2>
 80145f0:	2d00      	cmp	r5, #0
 80145f2:	dd05      	ble.n	8014600 <_dtoa_r+0x9b8>
 80145f4:	4639      	mov	r1, r7
 80145f6:	462a      	mov	r2, r5
 80145f8:	4620      	mov	r0, r4
 80145fa:	f000 ff1b 	bl	8015434 <__lshift>
 80145fe:	4607      	mov	r7, r0
 8014600:	9b06      	ldr	r3, [sp, #24]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d05c      	beq.n	80146c0 <_dtoa_r+0xa78>
 8014606:	6879      	ldr	r1, [r7, #4]
 8014608:	4620      	mov	r0, r4
 801460a:	f000 fcb7 	bl	8014f7c <_Balloc>
 801460e:	4605      	mov	r5, r0
 8014610:	b928      	cbnz	r0, 801461e <_dtoa_r+0x9d6>
 8014612:	4b80      	ldr	r3, [pc, #512]	; (8014814 <_dtoa_r+0xbcc>)
 8014614:	4602      	mov	r2, r0
 8014616:	f240 21ea 	movw	r1, #746	; 0x2ea
 801461a:	f7ff bb2e 	b.w	8013c7a <_dtoa_r+0x32>
 801461e:	693a      	ldr	r2, [r7, #16]
 8014620:	3202      	adds	r2, #2
 8014622:	0092      	lsls	r2, r2, #2
 8014624:	f107 010c 	add.w	r1, r7, #12
 8014628:	300c      	adds	r0, #12
 801462a:	f000 fc99 	bl	8014f60 <memcpy>
 801462e:	2201      	movs	r2, #1
 8014630:	4629      	mov	r1, r5
 8014632:	4620      	mov	r0, r4
 8014634:	f000 fefe 	bl	8015434 <__lshift>
 8014638:	9b00      	ldr	r3, [sp, #0]
 801463a:	3301      	adds	r3, #1
 801463c:	9301      	str	r3, [sp, #4]
 801463e:	9b00      	ldr	r3, [sp, #0]
 8014640:	444b      	add	r3, r9
 8014642:	9307      	str	r3, [sp, #28]
 8014644:	9b02      	ldr	r3, [sp, #8]
 8014646:	f003 0301 	and.w	r3, r3, #1
 801464a:	46b8      	mov	r8, r7
 801464c:	9306      	str	r3, [sp, #24]
 801464e:	4607      	mov	r7, r0
 8014650:	9b01      	ldr	r3, [sp, #4]
 8014652:	4631      	mov	r1, r6
 8014654:	3b01      	subs	r3, #1
 8014656:	4658      	mov	r0, fp
 8014658:	9302      	str	r3, [sp, #8]
 801465a:	f7ff fa67 	bl	8013b2c <quorem>
 801465e:	4603      	mov	r3, r0
 8014660:	3330      	adds	r3, #48	; 0x30
 8014662:	9004      	str	r0, [sp, #16]
 8014664:	4641      	mov	r1, r8
 8014666:	4658      	mov	r0, fp
 8014668:	9308      	str	r3, [sp, #32]
 801466a:	f000 ff4f 	bl	801550c <__mcmp>
 801466e:	463a      	mov	r2, r7
 8014670:	4681      	mov	r9, r0
 8014672:	4631      	mov	r1, r6
 8014674:	4620      	mov	r0, r4
 8014676:	f000 ff65 	bl	8015544 <__mdiff>
 801467a:	68c2      	ldr	r2, [r0, #12]
 801467c:	9b08      	ldr	r3, [sp, #32]
 801467e:	4605      	mov	r5, r0
 8014680:	bb02      	cbnz	r2, 80146c4 <_dtoa_r+0xa7c>
 8014682:	4601      	mov	r1, r0
 8014684:	4658      	mov	r0, fp
 8014686:	f000 ff41 	bl	801550c <__mcmp>
 801468a:	9b08      	ldr	r3, [sp, #32]
 801468c:	4602      	mov	r2, r0
 801468e:	4629      	mov	r1, r5
 8014690:	4620      	mov	r0, r4
 8014692:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8014696:	f000 fcb1 	bl	8014ffc <_Bfree>
 801469a:	9b05      	ldr	r3, [sp, #20]
 801469c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801469e:	9d01      	ldr	r5, [sp, #4]
 80146a0:	ea43 0102 	orr.w	r1, r3, r2
 80146a4:	9b06      	ldr	r3, [sp, #24]
 80146a6:	430b      	orrs	r3, r1
 80146a8:	9b08      	ldr	r3, [sp, #32]
 80146aa:	d10d      	bne.n	80146c8 <_dtoa_r+0xa80>
 80146ac:	2b39      	cmp	r3, #57	; 0x39
 80146ae:	d029      	beq.n	8014704 <_dtoa_r+0xabc>
 80146b0:	f1b9 0f00 	cmp.w	r9, #0
 80146b4:	dd01      	ble.n	80146ba <_dtoa_r+0xa72>
 80146b6:	9b04      	ldr	r3, [sp, #16]
 80146b8:	3331      	adds	r3, #49	; 0x31
 80146ba:	9a02      	ldr	r2, [sp, #8]
 80146bc:	7013      	strb	r3, [r2, #0]
 80146be:	e774      	b.n	80145aa <_dtoa_r+0x962>
 80146c0:	4638      	mov	r0, r7
 80146c2:	e7b9      	b.n	8014638 <_dtoa_r+0x9f0>
 80146c4:	2201      	movs	r2, #1
 80146c6:	e7e2      	b.n	801468e <_dtoa_r+0xa46>
 80146c8:	f1b9 0f00 	cmp.w	r9, #0
 80146cc:	db06      	blt.n	80146dc <_dtoa_r+0xa94>
 80146ce:	9905      	ldr	r1, [sp, #20]
 80146d0:	ea41 0909 	orr.w	r9, r1, r9
 80146d4:	9906      	ldr	r1, [sp, #24]
 80146d6:	ea59 0101 	orrs.w	r1, r9, r1
 80146da:	d120      	bne.n	801471e <_dtoa_r+0xad6>
 80146dc:	2a00      	cmp	r2, #0
 80146de:	ddec      	ble.n	80146ba <_dtoa_r+0xa72>
 80146e0:	4659      	mov	r1, fp
 80146e2:	2201      	movs	r2, #1
 80146e4:	4620      	mov	r0, r4
 80146e6:	9301      	str	r3, [sp, #4]
 80146e8:	f000 fea4 	bl	8015434 <__lshift>
 80146ec:	4631      	mov	r1, r6
 80146ee:	4683      	mov	fp, r0
 80146f0:	f000 ff0c 	bl	801550c <__mcmp>
 80146f4:	2800      	cmp	r0, #0
 80146f6:	9b01      	ldr	r3, [sp, #4]
 80146f8:	dc02      	bgt.n	8014700 <_dtoa_r+0xab8>
 80146fa:	d1de      	bne.n	80146ba <_dtoa_r+0xa72>
 80146fc:	07da      	lsls	r2, r3, #31
 80146fe:	d5dc      	bpl.n	80146ba <_dtoa_r+0xa72>
 8014700:	2b39      	cmp	r3, #57	; 0x39
 8014702:	d1d8      	bne.n	80146b6 <_dtoa_r+0xa6e>
 8014704:	9a02      	ldr	r2, [sp, #8]
 8014706:	2339      	movs	r3, #57	; 0x39
 8014708:	7013      	strb	r3, [r2, #0]
 801470a:	462b      	mov	r3, r5
 801470c:	461d      	mov	r5, r3
 801470e:	3b01      	subs	r3, #1
 8014710:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014714:	2a39      	cmp	r2, #57	; 0x39
 8014716:	d050      	beq.n	80147ba <_dtoa_r+0xb72>
 8014718:	3201      	adds	r2, #1
 801471a:	701a      	strb	r2, [r3, #0]
 801471c:	e745      	b.n	80145aa <_dtoa_r+0x962>
 801471e:	2a00      	cmp	r2, #0
 8014720:	dd03      	ble.n	801472a <_dtoa_r+0xae2>
 8014722:	2b39      	cmp	r3, #57	; 0x39
 8014724:	d0ee      	beq.n	8014704 <_dtoa_r+0xabc>
 8014726:	3301      	adds	r3, #1
 8014728:	e7c7      	b.n	80146ba <_dtoa_r+0xa72>
 801472a:	9a01      	ldr	r2, [sp, #4]
 801472c:	9907      	ldr	r1, [sp, #28]
 801472e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014732:	428a      	cmp	r2, r1
 8014734:	d02a      	beq.n	801478c <_dtoa_r+0xb44>
 8014736:	4659      	mov	r1, fp
 8014738:	2300      	movs	r3, #0
 801473a:	220a      	movs	r2, #10
 801473c:	4620      	mov	r0, r4
 801473e:	f000 fc7f 	bl	8015040 <__multadd>
 8014742:	45b8      	cmp	r8, r7
 8014744:	4683      	mov	fp, r0
 8014746:	f04f 0300 	mov.w	r3, #0
 801474a:	f04f 020a 	mov.w	r2, #10
 801474e:	4641      	mov	r1, r8
 8014750:	4620      	mov	r0, r4
 8014752:	d107      	bne.n	8014764 <_dtoa_r+0xb1c>
 8014754:	f000 fc74 	bl	8015040 <__multadd>
 8014758:	4680      	mov	r8, r0
 801475a:	4607      	mov	r7, r0
 801475c:	9b01      	ldr	r3, [sp, #4]
 801475e:	3301      	adds	r3, #1
 8014760:	9301      	str	r3, [sp, #4]
 8014762:	e775      	b.n	8014650 <_dtoa_r+0xa08>
 8014764:	f000 fc6c 	bl	8015040 <__multadd>
 8014768:	4639      	mov	r1, r7
 801476a:	4680      	mov	r8, r0
 801476c:	2300      	movs	r3, #0
 801476e:	220a      	movs	r2, #10
 8014770:	4620      	mov	r0, r4
 8014772:	f000 fc65 	bl	8015040 <__multadd>
 8014776:	4607      	mov	r7, r0
 8014778:	e7f0      	b.n	801475c <_dtoa_r+0xb14>
 801477a:	f1b9 0f00 	cmp.w	r9, #0
 801477e:	9a00      	ldr	r2, [sp, #0]
 8014780:	bfcc      	ite	gt
 8014782:	464d      	movgt	r5, r9
 8014784:	2501      	movle	r5, #1
 8014786:	4415      	add	r5, r2
 8014788:	f04f 0800 	mov.w	r8, #0
 801478c:	4659      	mov	r1, fp
 801478e:	2201      	movs	r2, #1
 8014790:	4620      	mov	r0, r4
 8014792:	9301      	str	r3, [sp, #4]
 8014794:	f000 fe4e 	bl	8015434 <__lshift>
 8014798:	4631      	mov	r1, r6
 801479a:	4683      	mov	fp, r0
 801479c:	f000 feb6 	bl	801550c <__mcmp>
 80147a0:	2800      	cmp	r0, #0
 80147a2:	dcb2      	bgt.n	801470a <_dtoa_r+0xac2>
 80147a4:	d102      	bne.n	80147ac <_dtoa_r+0xb64>
 80147a6:	9b01      	ldr	r3, [sp, #4]
 80147a8:	07db      	lsls	r3, r3, #31
 80147aa:	d4ae      	bmi.n	801470a <_dtoa_r+0xac2>
 80147ac:	462b      	mov	r3, r5
 80147ae:	461d      	mov	r5, r3
 80147b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80147b4:	2a30      	cmp	r2, #48	; 0x30
 80147b6:	d0fa      	beq.n	80147ae <_dtoa_r+0xb66>
 80147b8:	e6f7      	b.n	80145aa <_dtoa_r+0x962>
 80147ba:	9a00      	ldr	r2, [sp, #0]
 80147bc:	429a      	cmp	r2, r3
 80147be:	d1a5      	bne.n	801470c <_dtoa_r+0xac4>
 80147c0:	f10a 0a01 	add.w	sl, sl, #1
 80147c4:	2331      	movs	r3, #49	; 0x31
 80147c6:	e779      	b.n	80146bc <_dtoa_r+0xa74>
 80147c8:	4b13      	ldr	r3, [pc, #76]	; (8014818 <_dtoa_r+0xbd0>)
 80147ca:	f7ff baaf 	b.w	8013d2c <_dtoa_r+0xe4>
 80147ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	f47f aa86 	bne.w	8013ce2 <_dtoa_r+0x9a>
 80147d6:	4b11      	ldr	r3, [pc, #68]	; (801481c <_dtoa_r+0xbd4>)
 80147d8:	f7ff baa8 	b.w	8013d2c <_dtoa_r+0xe4>
 80147dc:	f1b9 0f00 	cmp.w	r9, #0
 80147e0:	dc03      	bgt.n	80147ea <_dtoa_r+0xba2>
 80147e2:	9b05      	ldr	r3, [sp, #20]
 80147e4:	2b02      	cmp	r3, #2
 80147e6:	f73f aec9 	bgt.w	801457c <_dtoa_r+0x934>
 80147ea:	9d00      	ldr	r5, [sp, #0]
 80147ec:	4631      	mov	r1, r6
 80147ee:	4658      	mov	r0, fp
 80147f0:	f7ff f99c 	bl	8013b2c <quorem>
 80147f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80147f8:	f805 3b01 	strb.w	r3, [r5], #1
 80147fc:	9a00      	ldr	r2, [sp, #0]
 80147fe:	1aaa      	subs	r2, r5, r2
 8014800:	4591      	cmp	r9, r2
 8014802:	ddba      	ble.n	801477a <_dtoa_r+0xb32>
 8014804:	4659      	mov	r1, fp
 8014806:	2300      	movs	r3, #0
 8014808:	220a      	movs	r2, #10
 801480a:	4620      	mov	r0, r4
 801480c:	f000 fc18 	bl	8015040 <__multadd>
 8014810:	4683      	mov	fp, r0
 8014812:	e7eb      	b.n	80147ec <_dtoa_r+0xba4>
 8014814:	0802a791 	.word	0x0802a791
 8014818:	0802a4f4 	.word	0x0802a4f4
 801481c:	0802a725 	.word	0x0802a725

08014820 <fiprintf>:
 8014820:	b40e      	push	{r1, r2, r3}
 8014822:	b503      	push	{r0, r1, lr}
 8014824:	4601      	mov	r1, r0
 8014826:	ab03      	add	r3, sp, #12
 8014828:	4805      	ldr	r0, [pc, #20]	; (8014840 <fiprintf+0x20>)
 801482a:	f853 2b04 	ldr.w	r2, [r3], #4
 801482e:	6800      	ldr	r0, [r0, #0]
 8014830:	9301      	str	r3, [sp, #4]
 8014832:	f001 fa9d 	bl	8015d70 <_vfiprintf_r>
 8014836:	b002      	add	sp, #8
 8014838:	f85d eb04 	ldr.w	lr, [sp], #4
 801483c:	b003      	add	sp, #12
 801483e:	4770      	bx	lr
 8014840:	20000044 	.word	0x20000044

08014844 <rshift>:
 8014844:	6903      	ldr	r3, [r0, #16]
 8014846:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801484a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801484e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014852:	f100 0414 	add.w	r4, r0, #20
 8014856:	dd45      	ble.n	80148e4 <rshift+0xa0>
 8014858:	f011 011f 	ands.w	r1, r1, #31
 801485c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014860:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014864:	d10c      	bne.n	8014880 <rshift+0x3c>
 8014866:	f100 0710 	add.w	r7, r0, #16
 801486a:	4629      	mov	r1, r5
 801486c:	42b1      	cmp	r1, r6
 801486e:	d334      	bcc.n	80148da <rshift+0x96>
 8014870:	1a9b      	subs	r3, r3, r2
 8014872:	009b      	lsls	r3, r3, #2
 8014874:	1eea      	subs	r2, r5, #3
 8014876:	4296      	cmp	r6, r2
 8014878:	bf38      	it	cc
 801487a:	2300      	movcc	r3, #0
 801487c:	4423      	add	r3, r4
 801487e:	e015      	b.n	80148ac <rshift+0x68>
 8014880:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014884:	f1c1 0820 	rsb	r8, r1, #32
 8014888:	40cf      	lsrs	r7, r1
 801488a:	f105 0e04 	add.w	lr, r5, #4
 801488e:	46a1      	mov	r9, r4
 8014890:	4576      	cmp	r6, lr
 8014892:	46f4      	mov	ip, lr
 8014894:	d815      	bhi.n	80148c2 <rshift+0x7e>
 8014896:	1a9b      	subs	r3, r3, r2
 8014898:	009a      	lsls	r2, r3, #2
 801489a:	3a04      	subs	r2, #4
 801489c:	3501      	adds	r5, #1
 801489e:	42ae      	cmp	r6, r5
 80148a0:	bf38      	it	cc
 80148a2:	2200      	movcc	r2, #0
 80148a4:	18a3      	adds	r3, r4, r2
 80148a6:	50a7      	str	r7, [r4, r2]
 80148a8:	b107      	cbz	r7, 80148ac <rshift+0x68>
 80148aa:	3304      	adds	r3, #4
 80148ac:	1b1a      	subs	r2, r3, r4
 80148ae:	42a3      	cmp	r3, r4
 80148b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80148b4:	bf08      	it	eq
 80148b6:	2300      	moveq	r3, #0
 80148b8:	6102      	str	r2, [r0, #16]
 80148ba:	bf08      	it	eq
 80148bc:	6143      	streq	r3, [r0, #20]
 80148be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148c2:	f8dc c000 	ldr.w	ip, [ip]
 80148c6:	fa0c fc08 	lsl.w	ip, ip, r8
 80148ca:	ea4c 0707 	orr.w	r7, ip, r7
 80148ce:	f849 7b04 	str.w	r7, [r9], #4
 80148d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80148d6:	40cf      	lsrs	r7, r1
 80148d8:	e7da      	b.n	8014890 <rshift+0x4c>
 80148da:	f851 cb04 	ldr.w	ip, [r1], #4
 80148de:	f847 cf04 	str.w	ip, [r7, #4]!
 80148e2:	e7c3      	b.n	801486c <rshift+0x28>
 80148e4:	4623      	mov	r3, r4
 80148e6:	e7e1      	b.n	80148ac <rshift+0x68>

080148e8 <__hexdig_fun>:
 80148e8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80148ec:	2b09      	cmp	r3, #9
 80148ee:	d802      	bhi.n	80148f6 <__hexdig_fun+0xe>
 80148f0:	3820      	subs	r0, #32
 80148f2:	b2c0      	uxtb	r0, r0
 80148f4:	4770      	bx	lr
 80148f6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80148fa:	2b05      	cmp	r3, #5
 80148fc:	d801      	bhi.n	8014902 <__hexdig_fun+0x1a>
 80148fe:	3847      	subs	r0, #71	; 0x47
 8014900:	e7f7      	b.n	80148f2 <__hexdig_fun+0xa>
 8014902:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014906:	2b05      	cmp	r3, #5
 8014908:	d801      	bhi.n	801490e <__hexdig_fun+0x26>
 801490a:	3827      	subs	r0, #39	; 0x27
 801490c:	e7f1      	b.n	80148f2 <__hexdig_fun+0xa>
 801490e:	2000      	movs	r0, #0
 8014910:	4770      	bx	lr
	...

08014914 <__gethex>:
 8014914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014918:	ed2d 8b02 	vpush	{d8}
 801491c:	b089      	sub	sp, #36	; 0x24
 801491e:	ee08 0a10 	vmov	s16, r0
 8014922:	9304      	str	r3, [sp, #16]
 8014924:	4bbc      	ldr	r3, [pc, #752]	; (8014c18 <__gethex+0x304>)
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	9301      	str	r3, [sp, #4]
 801492a:	4618      	mov	r0, r3
 801492c:	468b      	mov	fp, r1
 801492e:	4690      	mov	r8, r2
 8014930:	f7eb fc60 	bl	80001f4 <strlen>
 8014934:	9b01      	ldr	r3, [sp, #4]
 8014936:	f8db 2000 	ldr.w	r2, [fp]
 801493a:	4403      	add	r3, r0
 801493c:	4682      	mov	sl, r0
 801493e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014942:	9305      	str	r3, [sp, #20]
 8014944:	1c93      	adds	r3, r2, #2
 8014946:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801494a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801494e:	32fe      	adds	r2, #254	; 0xfe
 8014950:	18d1      	adds	r1, r2, r3
 8014952:	461f      	mov	r7, r3
 8014954:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014958:	9100      	str	r1, [sp, #0]
 801495a:	2830      	cmp	r0, #48	; 0x30
 801495c:	d0f8      	beq.n	8014950 <__gethex+0x3c>
 801495e:	f7ff ffc3 	bl	80148e8 <__hexdig_fun>
 8014962:	4604      	mov	r4, r0
 8014964:	2800      	cmp	r0, #0
 8014966:	d13a      	bne.n	80149de <__gethex+0xca>
 8014968:	9901      	ldr	r1, [sp, #4]
 801496a:	4652      	mov	r2, sl
 801496c:	4638      	mov	r0, r7
 801496e:	f001 fb47 	bl	8016000 <strncmp>
 8014972:	4605      	mov	r5, r0
 8014974:	2800      	cmp	r0, #0
 8014976:	d168      	bne.n	8014a4a <__gethex+0x136>
 8014978:	f817 000a 	ldrb.w	r0, [r7, sl]
 801497c:	eb07 060a 	add.w	r6, r7, sl
 8014980:	f7ff ffb2 	bl	80148e8 <__hexdig_fun>
 8014984:	2800      	cmp	r0, #0
 8014986:	d062      	beq.n	8014a4e <__gethex+0x13a>
 8014988:	4633      	mov	r3, r6
 801498a:	7818      	ldrb	r0, [r3, #0]
 801498c:	2830      	cmp	r0, #48	; 0x30
 801498e:	461f      	mov	r7, r3
 8014990:	f103 0301 	add.w	r3, r3, #1
 8014994:	d0f9      	beq.n	801498a <__gethex+0x76>
 8014996:	f7ff ffa7 	bl	80148e8 <__hexdig_fun>
 801499a:	2301      	movs	r3, #1
 801499c:	fab0 f480 	clz	r4, r0
 80149a0:	0964      	lsrs	r4, r4, #5
 80149a2:	4635      	mov	r5, r6
 80149a4:	9300      	str	r3, [sp, #0]
 80149a6:	463a      	mov	r2, r7
 80149a8:	4616      	mov	r6, r2
 80149aa:	3201      	adds	r2, #1
 80149ac:	7830      	ldrb	r0, [r6, #0]
 80149ae:	f7ff ff9b 	bl	80148e8 <__hexdig_fun>
 80149b2:	2800      	cmp	r0, #0
 80149b4:	d1f8      	bne.n	80149a8 <__gethex+0x94>
 80149b6:	9901      	ldr	r1, [sp, #4]
 80149b8:	4652      	mov	r2, sl
 80149ba:	4630      	mov	r0, r6
 80149bc:	f001 fb20 	bl	8016000 <strncmp>
 80149c0:	b980      	cbnz	r0, 80149e4 <__gethex+0xd0>
 80149c2:	b94d      	cbnz	r5, 80149d8 <__gethex+0xc4>
 80149c4:	eb06 050a 	add.w	r5, r6, sl
 80149c8:	462a      	mov	r2, r5
 80149ca:	4616      	mov	r6, r2
 80149cc:	3201      	adds	r2, #1
 80149ce:	7830      	ldrb	r0, [r6, #0]
 80149d0:	f7ff ff8a 	bl	80148e8 <__hexdig_fun>
 80149d4:	2800      	cmp	r0, #0
 80149d6:	d1f8      	bne.n	80149ca <__gethex+0xb6>
 80149d8:	1bad      	subs	r5, r5, r6
 80149da:	00ad      	lsls	r5, r5, #2
 80149dc:	e004      	b.n	80149e8 <__gethex+0xd4>
 80149de:	2400      	movs	r4, #0
 80149e0:	4625      	mov	r5, r4
 80149e2:	e7e0      	b.n	80149a6 <__gethex+0x92>
 80149e4:	2d00      	cmp	r5, #0
 80149e6:	d1f7      	bne.n	80149d8 <__gethex+0xc4>
 80149e8:	7833      	ldrb	r3, [r6, #0]
 80149ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80149ee:	2b50      	cmp	r3, #80	; 0x50
 80149f0:	d13b      	bne.n	8014a6a <__gethex+0x156>
 80149f2:	7873      	ldrb	r3, [r6, #1]
 80149f4:	2b2b      	cmp	r3, #43	; 0x2b
 80149f6:	d02c      	beq.n	8014a52 <__gethex+0x13e>
 80149f8:	2b2d      	cmp	r3, #45	; 0x2d
 80149fa:	d02e      	beq.n	8014a5a <__gethex+0x146>
 80149fc:	1c71      	adds	r1, r6, #1
 80149fe:	f04f 0900 	mov.w	r9, #0
 8014a02:	7808      	ldrb	r0, [r1, #0]
 8014a04:	f7ff ff70 	bl	80148e8 <__hexdig_fun>
 8014a08:	1e43      	subs	r3, r0, #1
 8014a0a:	b2db      	uxtb	r3, r3
 8014a0c:	2b18      	cmp	r3, #24
 8014a0e:	d82c      	bhi.n	8014a6a <__gethex+0x156>
 8014a10:	f1a0 0210 	sub.w	r2, r0, #16
 8014a14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014a18:	f7ff ff66 	bl	80148e8 <__hexdig_fun>
 8014a1c:	1e43      	subs	r3, r0, #1
 8014a1e:	b2db      	uxtb	r3, r3
 8014a20:	2b18      	cmp	r3, #24
 8014a22:	d91d      	bls.n	8014a60 <__gethex+0x14c>
 8014a24:	f1b9 0f00 	cmp.w	r9, #0
 8014a28:	d000      	beq.n	8014a2c <__gethex+0x118>
 8014a2a:	4252      	negs	r2, r2
 8014a2c:	4415      	add	r5, r2
 8014a2e:	f8cb 1000 	str.w	r1, [fp]
 8014a32:	b1e4      	cbz	r4, 8014a6e <__gethex+0x15a>
 8014a34:	9b00      	ldr	r3, [sp, #0]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	bf14      	ite	ne
 8014a3a:	2700      	movne	r7, #0
 8014a3c:	2706      	moveq	r7, #6
 8014a3e:	4638      	mov	r0, r7
 8014a40:	b009      	add	sp, #36	; 0x24
 8014a42:	ecbd 8b02 	vpop	{d8}
 8014a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a4a:	463e      	mov	r6, r7
 8014a4c:	4625      	mov	r5, r4
 8014a4e:	2401      	movs	r4, #1
 8014a50:	e7ca      	b.n	80149e8 <__gethex+0xd4>
 8014a52:	f04f 0900 	mov.w	r9, #0
 8014a56:	1cb1      	adds	r1, r6, #2
 8014a58:	e7d3      	b.n	8014a02 <__gethex+0xee>
 8014a5a:	f04f 0901 	mov.w	r9, #1
 8014a5e:	e7fa      	b.n	8014a56 <__gethex+0x142>
 8014a60:	230a      	movs	r3, #10
 8014a62:	fb03 0202 	mla	r2, r3, r2, r0
 8014a66:	3a10      	subs	r2, #16
 8014a68:	e7d4      	b.n	8014a14 <__gethex+0x100>
 8014a6a:	4631      	mov	r1, r6
 8014a6c:	e7df      	b.n	8014a2e <__gethex+0x11a>
 8014a6e:	1bf3      	subs	r3, r6, r7
 8014a70:	3b01      	subs	r3, #1
 8014a72:	4621      	mov	r1, r4
 8014a74:	2b07      	cmp	r3, #7
 8014a76:	dc0b      	bgt.n	8014a90 <__gethex+0x17c>
 8014a78:	ee18 0a10 	vmov	r0, s16
 8014a7c:	f000 fa7e 	bl	8014f7c <_Balloc>
 8014a80:	4604      	mov	r4, r0
 8014a82:	b940      	cbnz	r0, 8014a96 <__gethex+0x182>
 8014a84:	4b65      	ldr	r3, [pc, #404]	; (8014c1c <__gethex+0x308>)
 8014a86:	4602      	mov	r2, r0
 8014a88:	21de      	movs	r1, #222	; 0xde
 8014a8a:	4865      	ldr	r0, [pc, #404]	; (8014c20 <__gethex+0x30c>)
 8014a8c:	f7ff f830 	bl	8013af0 <__assert_func>
 8014a90:	3101      	adds	r1, #1
 8014a92:	105b      	asrs	r3, r3, #1
 8014a94:	e7ee      	b.n	8014a74 <__gethex+0x160>
 8014a96:	f100 0914 	add.w	r9, r0, #20
 8014a9a:	f04f 0b00 	mov.w	fp, #0
 8014a9e:	f1ca 0301 	rsb	r3, sl, #1
 8014aa2:	f8cd 9008 	str.w	r9, [sp, #8]
 8014aa6:	f8cd b000 	str.w	fp, [sp]
 8014aaa:	9306      	str	r3, [sp, #24]
 8014aac:	42b7      	cmp	r7, r6
 8014aae:	d340      	bcc.n	8014b32 <__gethex+0x21e>
 8014ab0:	9802      	ldr	r0, [sp, #8]
 8014ab2:	9b00      	ldr	r3, [sp, #0]
 8014ab4:	f840 3b04 	str.w	r3, [r0], #4
 8014ab8:	eba0 0009 	sub.w	r0, r0, r9
 8014abc:	1080      	asrs	r0, r0, #2
 8014abe:	0146      	lsls	r6, r0, #5
 8014ac0:	6120      	str	r0, [r4, #16]
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	f000 fb50 	bl	8015168 <__hi0bits>
 8014ac8:	1a30      	subs	r0, r6, r0
 8014aca:	f8d8 6000 	ldr.w	r6, [r8]
 8014ace:	42b0      	cmp	r0, r6
 8014ad0:	dd63      	ble.n	8014b9a <__gethex+0x286>
 8014ad2:	1b87      	subs	r7, r0, r6
 8014ad4:	4639      	mov	r1, r7
 8014ad6:	4620      	mov	r0, r4
 8014ad8:	f000 feea 	bl	80158b0 <__any_on>
 8014adc:	4682      	mov	sl, r0
 8014ade:	b1a8      	cbz	r0, 8014b0c <__gethex+0x1f8>
 8014ae0:	1e7b      	subs	r3, r7, #1
 8014ae2:	1159      	asrs	r1, r3, #5
 8014ae4:	f003 021f 	and.w	r2, r3, #31
 8014ae8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014aec:	f04f 0a01 	mov.w	sl, #1
 8014af0:	fa0a f202 	lsl.w	r2, sl, r2
 8014af4:	420a      	tst	r2, r1
 8014af6:	d009      	beq.n	8014b0c <__gethex+0x1f8>
 8014af8:	4553      	cmp	r3, sl
 8014afa:	dd05      	ble.n	8014b08 <__gethex+0x1f4>
 8014afc:	1eb9      	subs	r1, r7, #2
 8014afe:	4620      	mov	r0, r4
 8014b00:	f000 fed6 	bl	80158b0 <__any_on>
 8014b04:	2800      	cmp	r0, #0
 8014b06:	d145      	bne.n	8014b94 <__gethex+0x280>
 8014b08:	f04f 0a02 	mov.w	sl, #2
 8014b0c:	4639      	mov	r1, r7
 8014b0e:	4620      	mov	r0, r4
 8014b10:	f7ff fe98 	bl	8014844 <rshift>
 8014b14:	443d      	add	r5, r7
 8014b16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014b1a:	42ab      	cmp	r3, r5
 8014b1c:	da4c      	bge.n	8014bb8 <__gethex+0x2a4>
 8014b1e:	ee18 0a10 	vmov	r0, s16
 8014b22:	4621      	mov	r1, r4
 8014b24:	f000 fa6a 	bl	8014ffc <_Bfree>
 8014b28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	6013      	str	r3, [r2, #0]
 8014b2e:	27a3      	movs	r7, #163	; 0xa3
 8014b30:	e785      	b.n	8014a3e <__gethex+0x12a>
 8014b32:	1e73      	subs	r3, r6, #1
 8014b34:	9a05      	ldr	r2, [sp, #20]
 8014b36:	9303      	str	r3, [sp, #12]
 8014b38:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014b3c:	4293      	cmp	r3, r2
 8014b3e:	d019      	beq.n	8014b74 <__gethex+0x260>
 8014b40:	f1bb 0f20 	cmp.w	fp, #32
 8014b44:	d107      	bne.n	8014b56 <__gethex+0x242>
 8014b46:	9b02      	ldr	r3, [sp, #8]
 8014b48:	9a00      	ldr	r2, [sp, #0]
 8014b4a:	f843 2b04 	str.w	r2, [r3], #4
 8014b4e:	9302      	str	r3, [sp, #8]
 8014b50:	2300      	movs	r3, #0
 8014b52:	9300      	str	r3, [sp, #0]
 8014b54:	469b      	mov	fp, r3
 8014b56:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014b5a:	f7ff fec5 	bl	80148e8 <__hexdig_fun>
 8014b5e:	9b00      	ldr	r3, [sp, #0]
 8014b60:	f000 000f 	and.w	r0, r0, #15
 8014b64:	fa00 f00b 	lsl.w	r0, r0, fp
 8014b68:	4303      	orrs	r3, r0
 8014b6a:	9300      	str	r3, [sp, #0]
 8014b6c:	f10b 0b04 	add.w	fp, fp, #4
 8014b70:	9b03      	ldr	r3, [sp, #12]
 8014b72:	e00d      	b.n	8014b90 <__gethex+0x27c>
 8014b74:	9b03      	ldr	r3, [sp, #12]
 8014b76:	9a06      	ldr	r2, [sp, #24]
 8014b78:	4413      	add	r3, r2
 8014b7a:	42bb      	cmp	r3, r7
 8014b7c:	d3e0      	bcc.n	8014b40 <__gethex+0x22c>
 8014b7e:	4618      	mov	r0, r3
 8014b80:	9901      	ldr	r1, [sp, #4]
 8014b82:	9307      	str	r3, [sp, #28]
 8014b84:	4652      	mov	r2, sl
 8014b86:	f001 fa3b 	bl	8016000 <strncmp>
 8014b8a:	9b07      	ldr	r3, [sp, #28]
 8014b8c:	2800      	cmp	r0, #0
 8014b8e:	d1d7      	bne.n	8014b40 <__gethex+0x22c>
 8014b90:	461e      	mov	r6, r3
 8014b92:	e78b      	b.n	8014aac <__gethex+0x198>
 8014b94:	f04f 0a03 	mov.w	sl, #3
 8014b98:	e7b8      	b.n	8014b0c <__gethex+0x1f8>
 8014b9a:	da0a      	bge.n	8014bb2 <__gethex+0x29e>
 8014b9c:	1a37      	subs	r7, r6, r0
 8014b9e:	4621      	mov	r1, r4
 8014ba0:	ee18 0a10 	vmov	r0, s16
 8014ba4:	463a      	mov	r2, r7
 8014ba6:	f000 fc45 	bl	8015434 <__lshift>
 8014baa:	1bed      	subs	r5, r5, r7
 8014bac:	4604      	mov	r4, r0
 8014bae:	f100 0914 	add.w	r9, r0, #20
 8014bb2:	f04f 0a00 	mov.w	sl, #0
 8014bb6:	e7ae      	b.n	8014b16 <__gethex+0x202>
 8014bb8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014bbc:	42a8      	cmp	r0, r5
 8014bbe:	dd72      	ble.n	8014ca6 <__gethex+0x392>
 8014bc0:	1b45      	subs	r5, r0, r5
 8014bc2:	42ae      	cmp	r6, r5
 8014bc4:	dc36      	bgt.n	8014c34 <__gethex+0x320>
 8014bc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014bca:	2b02      	cmp	r3, #2
 8014bcc:	d02a      	beq.n	8014c24 <__gethex+0x310>
 8014bce:	2b03      	cmp	r3, #3
 8014bd0:	d02c      	beq.n	8014c2c <__gethex+0x318>
 8014bd2:	2b01      	cmp	r3, #1
 8014bd4:	d115      	bne.n	8014c02 <__gethex+0x2ee>
 8014bd6:	42ae      	cmp	r6, r5
 8014bd8:	d113      	bne.n	8014c02 <__gethex+0x2ee>
 8014bda:	2e01      	cmp	r6, #1
 8014bdc:	d10b      	bne.n	8014bf6 <__gethex+0x2e2>
 8014bde:	9a04      	ldr	r2, [sp, #16]
 8014be0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014be4:	6013      	str	r3, [r2, #0]
 8014be6:	2301      	movs	r3, #1
 8014be8:	6123      	str	r3, [r4, #16]
 8014bea:	f8c9 3000 	str.w	r3, [r9]
 8014bee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014bf0:	2762      	movs	r7, #98	; 0x62
 8014bf2:	601c      	str	r4, [r3, #0]
 8014bf4:	e723      	b.n	8014a3e <__gethex+0x12a>
 8014bf6:	1e71      	subs	r1, r6, #1
 8014bf8:	4620      	mov	r0, r4
 8014bfa:	f000 fe59 	bl	80158b0 <__any_on>
 8014bfe:	2800      	cmp	r0, #0
 8014c00:	d1ed      	bne.n	8014bde <__gethex+0x2ca>
 8014c02:	ee18 0a10 	vmov	r0, s16
 8014c06:	4621      	mov	r1, r4
 8014c08:	f000 f9f8 	bl	8014ffc <_Bfree>
 8014c0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014c0e:	2300      	movs	r3, #0
 8014c10:	6013      	str	r3, [r2, #0]
 8014c12:	2750      	movs	r7, #80	; 0x50
 8014c14:	e713      	b.n	8014a3e <__gethex+0x12a>
 8014c16:	bf00      	nop
 8014c18:	0802a80c 	.word	0x0802a80c
 8014c1c:	0802a791 	.word	0x0802a791
 8014c20:	0802a7a2 	.word	0x0802a7a2
 8014c24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d1eb      	bne.n	8014c02 <__gethex+0x2ee>
 8014c2a:	e7d8      	b.n	8014bde <__gethex+0x2ca>
 8014c2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d1d5      	bne.n	8014bde <__gethex+0x2ca>
 8014c32:	e7e6      	b.n	8014c02 <__gethex+0x2ee>
 8014c34:	1e6f      	subs	r7, r5, #1
 8014c36:	f1ba 0f00 	cmp.w	sl, #0
 8014c3a:	d131      	bne.n	8014ca0 <__gethex+0x38c>
 8014c3c:	b127      	cbz	r7, 8014c48 <__gethex+0x334>
 8014c3e:	4639      	mov	r1, r7
 8014c40:	4620      	mov	r0, r4
 8014c42:	f000 fe35 	bl	80158b0 <__any_on>
 8014c46:	4682      	mov	sl, r0
 8014c48:	117b      	asrs	r3, r7, #5
 8014c4a:	2101      	movs	r1, #1
 8014c4c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8014c50:	f007 071f 	and.w	r7, r7, #31
 8014c54:	fa01 f707 	lsl.w	r7, r1, r7
 8014c58:	421f      	tst	r7, r3
 8014c5a:	4629      	mov	r1, r5
 8014c5c:	4620      	mov	r0, r4
 8014c5e:	bf18      	it	ne
 8014c60:	f04a 0a02 	orrne.w	sl, sl, #2
 8014c64:	1b76      	subs	r6, r6, r5
 8014c66:	f7ff fded 	bl	8014844 <rshift>
 8014c6a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014c6e:	2702      	movs	r7, #2
 8014c70:	f1ba 0f00 	cmp.w	sl, #0
 8014c74:	d048      	beq.n	8014d08 <__gethex+0x3f4>
 8014c76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014c7a:	2b02      	cmp	r3, #2
 8014c7c:	d015      	beq.n	8014caa <__gethex+0x396>
 8014c7e:	2b03      	cmp	r3, #3
 8014c80:	d017      	beq.n	8014cb2 <__gethex+0x39e>
 8014c82:	2b01      	cmp	r3, #1
 8014c84:	d109      	bne.n	8014c9a <__gethex+0x386>
 8014c86:	f01a 0f02 	tst.w	sl, #2
 8014c8a:	d006      	beq.n	8014c9a <__gethex+0x386>
 8014c8c:	f8d9 0000 	ldr.w	r0, [r9]
 8014c90:	ea4a 0a00 	orr.w	sl, sl, r0
 8014c94:	f01a 0f01 	tst.w	sl, #1
 8014c98:	d10e      	bne.n	8014cb8 <__gethex+0x3a4>
 8014c9a:	f047 0710 	orr.w	r7, r7, #16
 8014c9e:	e033      	b.n	8014d08 <__gethex+0x3f4>
 8014ca0:	f04f 0a01 	mov.w	sl, #1
 8014ca4:	e7d0      	b.n	8014c48 <__gethex+0x334>
 8014ca6:	2701      	movs	r7, #1
 8014ca8:	e7e2      	b.n	8014c70 <__gethex+0x35c>
 8014caa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014cac:	f1c3 0301 	rsb	r3, r3, #1
 8014cb0:	9315      	str	r3, [sp, #84]	; 0x54
 8014cb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d0f0      	beq.n	8014c9a <__gethex+0x386>
 8014cb8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014cbc:	f104 0314 	add.w	r3, r4, #20
 8014cc0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014cc4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014cc8:	f04f 0c00 	mov.w	ip, #0
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8014cd2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014cd6:	d01c      	beq.n	8014d12 <__gethex+0x3fe>
 8014cd8:	3201      	adds	r2, #1
 8014cda:	6002      	str	r2, [r0, #0]
 8014cdc:	2f02      	cmp	r7, #2
 8014cde:	f104 0314 	add.w	r3, r4, #20
 8014ce2:	d13f      	bne.n	8014d64 <__gethex+0x450>
 8014ce4:	f8d8 2000 	ldr.w	r2, [r8]
 8014ce8:	3a01      	subs	r2, #1
 8014cea:	42b2      	cmp	r2, r6
 8014cec:	d10a      	bne.n	8014d04 <__gethex+0x3f0>
 8014cee:	1171      	asrs	r1, r6, #5
 8014cf0:	2201      	movs	r2, #1
 8014cf2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014cf6:	f006 061f 	and.w	r6, r6, #31
 8014cfa:	fa02 f606 	lsl.w	r6, r2, r6
 8014cfe:	421e      	tst	r6, r3
 8014d00:	bf18      	it	ne
 8014d02:	4617      	movne	r7, r2
 8014d04:	f047 0720 	orr.w	r7, r7, #32
 8014d08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014d0a:	601c      	str	r4, [r3, #0]
 8014d0c:	9b04      	ldr	r3, [sp, #16]
 8014d0e:	601d      	str	r5, [r3, #0]
 8014d10:	e695      	b.n	8014a3e <__gethex+0x12a>
 8014d12:	4299      	cmp	r1, r3
 8014d14:	f843 cc04 	str.w	ip, [r3, #-4]
 8014d18:	d8d8      	bhi.n	8014ccc <__gethex+0x3b8>
 8014d1a:	68a3      	ldr	r3, [r4, #8]
 8014d1c:	459b      	cmp	fp, r3
 8014d1e:	db19      	blt.n	8014d54 <__gethex+0x440>
 8014d20:	6861      	ldr	r1, [r4, #4]
 8014d22:	ee18 0a10 	vmov	r0, s16
 8014d26:	3101      	adds	r1, #1
 8014d28:	f000 f928 	bl	8014f7c <_Balloc>
 8014d2c:	4681      	mov	r9, r0
 8014d2e:	b918      	cbnz	r0, 8014d38 <__gethex+0x424>
 8014d30:	4b1a      	ldr	r3, [pc, #104]	; (8014d9c <__gethex+0x488>)
 8014d32:	4602      	mov	r2, r0
 8014d34:	2184      	movs	r1, #132	; 0x84
 8014d36:	e6a8      	b.n	8014a8a <__gethex+0x176>
 8014d38:	6922      	ldr	r2, [r4, #16]
 8014d3a:	3202      	adds	r2, #2
 8014d3c:	f104 010c 	add.w	r1, r4, #12
 8014d40:	0092      	lsls	r2, r2, #2
 8014d42:	300c      	adds	r0, #12
 8014d44:	f000 f90c 	bl	8014f60 <memcpy>
 8014d48:	4621      	mov	r1, r4
 8014d4a:	ee18 0a10 	vmov	r0, s16
 8014d4e:	f000 f955 	bl	8014ffc <_Bfree>
 8014d52:	464c      	mov	r4, r9
 8014d54:	6923      	ldr	r3, [r4, #16]
 8014d56:	1c5a      	adds	r2, r3, #1
 8014d58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014d5c:	6122      	str	r2, [r4, #16]
 8014d5e:	2201      	movs	r2, #1
 8014d60:	615a      	str	r2, [r3, #20]
 8014d62:	e7bb      	b.n	8014cdc <__gethex+0x3c8>
 8014d64:	6922      	ldr	r2, [r4, #16]
 8014d66:	455a      	cmp	r2, fp
 8014d68:	dd0b      	ble.n	8014d82 <__gethex+0x46e>
 8014d6a:	2101      	movs	r1, #1
 8014d6c:	4620      	mov	r0, r4
 8014d6e:	f7ff fd69 	bl	8014844 <rshift>
 8014d72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014d76:	3501      	adds	r5, #1
 8014d78:	42ab      	cmp	r3, r5
 8014d7a:	f6ff aed0 	blt.w	8014b1e <__gethex+0x20a>
 8014d7e:	2701      	movs	r7, #1
 8014d80:	e7c0      	b.n	8014d04 <__gethex+0x3f0>
 8014d82:	f016 061f 	ands.w	r6, r6, #31
 8014d86:	d0fa      	beq.n	8014d7e <__gethex+0x46a>
 8014d88:	449a      	add	sl, r3
 8014d8a:	f1c6 0620 	rsb	r6, r6, #32
 8014d8e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8014d92:	f000 f9e9 	bl	8015168 <__hi0bits>
 8014d96:	42b0      	cmp	r0, r6
 8014d98:	dbe7      	blt.n	8014d6a <__gethex+0x456>
 8014d9a:	e7f0      	b.n	8014d7e <__gethex+0x46a>
 8014d9c:	0802a791 	.word	0x0802a791

08014da0 <L_shift>:
 8014da0:	f1c2 0208 	rsb	r2, r2, #8
 8014da4:	0092      	lsls	r2, r2, #2
 8014da6:	b570      	push	{r4, r5, r6, lr}
 8014da8:	f1c2 0620 	rsb	r6, r2, #32
 8014dac:	6843      	ldr	r3, [r0, #4]
 8014dae:	6804      	ldr	r4, [r0, #0]
 8014db0:	fa03 f506 	lsl.w	r5, r3, r6
 8014db4:	432c      	orrs	r4, r5
 8014db6:	40d3      	lsrs	r3, r2
 8014db8:	6004      	str	r4, [r0, #0]
 8014dba:	f840 3f04 	str.w	r3, [r0, #4]!
 8014dbe:	4288      	cmp	r0, r1
 8014dc0:	d3f4      	bcc.n	8014dac <L_shift+0xc>
 8014dc2:	bd70      	pop	{r4, r5, r6, pc}

08014dc4 <__match>:
 8014dc4:	b530      	push	{r4, r5, lr}
 8014dc6:	6803      	ldr	r3, [r0, #0]
 8014dc8:	3301      	adds	r3, #1
 8014dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014dce:	b914      	cbnz	r4, 8014dd6 <__match+0x12>
 8014dd0:	6003      	str	r3, [r0, #0]
 8014dd2:	2001      	movs	r0, #1
 8014dd4:	bd30      	pop	{r4, r5, pc}
 8014dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014dda:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014dde:	2d19      	cmp	r5, #25
 8014de0:	bf98      	it	ls
 8014de2:	3220      	addls	r2, #32
 8014de4:	42a2      	cmp	r2, r4
 8014de6:	d0f0      	beq.n	8014dca <__match+0x6>
 8014de8:	2000      	movs	r0, #0
 8014dea:	e7f3      	b.n	8014dd4 <__match+0x10>

08014dec <__hexnan>:
 8014dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014df0:	680b      	ldr	r3, [r1, #0]
 8014df2:	6801      	ldr	r1, [r0, #0]
 8014df4:	115e      	asrs	r6, r3, #5
 8014df6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014dfa:	f013 031f 	ands.w	r3, r3, #31
 8014dfe:	b087      	sub	sp, #28
 8014e00:	bf18      	it	ne
 8014e02:	3604      	addne	r6, #4
 8014e04:	2500      	movs	r5, #0
 8014e06:	1f37      	subs	r7, r6, #4
 8014e08:	4682      	mov	sl, r0
 8014e0a:	4690      	mov	r8, r2
 8014e0c:	9301      	str	r3, [sp, #4]
 8014e0e:	f846 5c04 	str.w	r5, [r6, #-4]
 8014e12:	46b9      	mov	r9, r7
 8014e14:	463c      	mov	r4, r7
 8014e16:	9502      	str	r5, [sp, #8]
 8014e18:	46ab      	mov	fp, r5
 8014e1a:	784a      	ldrb	r2, [r1, #1]
 8014e1c:	1c4b      	adds	r3, r1, #1
 8014e1e:	9303      	str	r3, [sp, #12]
 8014e20:	b342      	cbz	r2, 8014e74 <__hexnan+0x88>
 8014e22:	4610      	mov	r0, r2
 8014e24:	9105      	str	r1, [sp, #20]
 8014e26:	9204      	str	r2, [sp, #16]
 8014e28:	f7ff fd5e 	bl	80148e8 <__hexdig_fun>
 8014e2c:	2800      	cmp	r0, #0
 8014e2e:	d14f      	bne.n	8014ed0 <__hexnan+0xe4>
 8014e30:	9a04      	ldr	r2, [sp, #16]
 8014e32:	9905      	ldr	r1, [sp, #20]
 8014e34:	2a20      	cmp	r2, #32
 8014e36:	d818      	bhi.n	8014e6a <__hexnan+0x7e>
 8014e38:	9b02      	ldr	r3, [sp, #8]
 8014e3a:	459b      	cmp	fp, r3
 8014e3c:	dd13      	ble.n	8014e66 <__hexnan+0x7a>
 8014e3e:	454c      	cmp	r4, r9
 8014e40:	d206      	bcs.n	8014e50 <__hexnan+0x64>
 8014e42:	2d07      	cmp	r5, #7
 8014e44:	dc04      	bgt.n	8014e50 <__hexnan+0x64>
 8014e46:	462a      	mov	r2, r5
 8014e48:	4649      	mov	r1, r9
 8014e4a:	4620      	mov	r0, r4
 8014e4c:	f7ff ffa8 	bl	8014da0 <L_shift>
 8014e50:	4544      	cmp	r4, r8
 8014e52:	d950      	bls.n	8014ef6 <__hexnan+0x10a>
 8014e54:	2300      	movs	r3, #0
 8014e56:	f1a4 0904 	sub.w	r9, r4, #4
 8014e5a:	f844 3c04 	str.w	r3, [r4, #-4]
 8014e5e:	f8cd b008 	str.w	fp, [sp, #8]
 8014e62:	464c      	mov	r4, r9
 8014e64:	461d      	mov	r5, r3
 8014e66:	9903      	ldr	r1, [sp, #12]
 8014e68:	e7d7      	b.n	8014e1a <__hexnan+0x2e>
 8014e6a:	2a29      	cmp	r2, #41	; 0x29
 8014e6c:	d156      	bne.n	8014f1c <__hexnan+0x130>
 8014e6e:	3102      	adds	r1, #2
 8014e70:	f8ca 1000 	str.w	r1, [sl]
 8014e74:	f1bb 0f00 	cmp.w	fp, #0
 8014e78:	d050      	beq.n	8014f1c <__hexnan+0x130>
 8014e7a:	454c      	cmp	r4, r9
 8014e7c:	d206      	bcs.n	8014e8c <__hexnan+0xa0>
 8014e7e:	2d07      	cmp	r5, #7
 8014e80:	dc04      	bgt.n	8014e8c <__hexnan+0xa0>
 8014e82:	462a      	mov	r2, r5
 8014e84:	4649      	mov	r1, r9
 8014e86:	4620      	mov	r0, r4
 8014e88:	f7ff ff8a 	bl	8014da0 <L_shift>
 8014e8c:	4544      	cmp	r4, r8
 8014e8e:	d934      	bls.n	8014efa <__hexnan+0x10e>
 8014e90:	f1a8 0204 	sub.w	r2, r8, #4
 8014e94:	4623      	mov	r3, r4
 8014e96:	f853 1b04 	ldr.w	r1, [r3], #4
 8014e9a:	f842 1f04 	str.w	r1, [r2, #4]!
 8014e9e:	429f      	cmp	r7, r3
 8014ea0:	d2f9      	bcs.n	8014e96 <__hexnan+0xaa>
 8014ea2:	1b3b      	subs	r3, r7, r4
 8014ea4:	f023 0303 	bic.w	r3, r3, #3
 8014ea8:	3304      	adds	r3, #4
 8014eaa:	3401      	adds	r4, #1
 8014eac:	3e03      	subs	r6, #3
 8014eae:	42b4      	cmp	r4, r6
 8014eb0:	bf88      	it	hi
 8014eb2:	2304      	movhi	r3, #4
 8014eb4:	4443      	add	r3, r8
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	f843 2b04 	str.w	r2, [r3], #4
 8014ebc:	429f      	cmp	r7, r3
 8014ebe:	d2fb      	bcs.n	8014eb8 <__hexnan+0xcc>
 8014ec0:	683b      	ldr	r3, [r7, #0]
 8014ec2:	b91b      	cbnz	r3, 8014ecc <__hexnan+0xe0>
 8014ec4:	4547      	cmp	r7, r8
 8014ec6:	d127      	bne.n	8014f18 <__hexnan+0x12c>
 8014ec8:	2301      	movs	r3, #1
 8014eca:	603b      	str	r3, [r7, #0]
 8014ecc:	2005      	movs	r0, #5
 8014ece:	e026      	b.n	8014f1e <__hexnan+0x132>
 8014ed0:	3501      	adds	r5, #1
 8014ed2:	2d08      	cmp	r5, #8
 8014ed4:	f10b 0b01 	add.w	fp, fp, #1
 8014ed8:	dd06      	ble.n	8014ee8 <__hexnan+0xfc>
 8014eda:	4544      	cmp	r4, r8
 8014edc:	d9c3      	bls.n	8014e66 <__hexnan+0x7a>
 8014ede:	2300      	movs	r3, #0
 8014ee0:	f844 3c04 	str.w	r3, [r4, #-4]
 8014ee4:	2501      	movs	r5, #1
 8014ee6:	3c04      	subs	r4, #4
 8014ee8:	6822      	ldr	r2, [r4, #0]
 8014eea:	f000 000f 	and.w	r0, r0, #15
 8014eee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8014ef2:	6022      	str	r2, [r4, #0]
 8014ef4:	e7b7      	b.n	8014e66 <__hexnan+0x7a>
 8014ef6:	2508      	movs	r5, #8
 8014ef8:	e7b5      	b.n	8014e66 <__hexnan+0x7a>
 8014efa:	9b01      	ldr	r3, [sp, #4]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d0df      	beq.n	8014ec0 <__hexnan+0xd4>
 8014f00:	f04f 32ff 	mov.w	r2, #4294967295
 8014f04:	f1c3 0320 	rsb	r3, r3, #32
 8014f08:	fa22 f303 	lsr.w	r3, r2, r3
 8014f0c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014f10:	401a      	ands	r2, r3
 8014f12:	f846 2c04 	str.w	r2, [r6, #-4]
 8014f16:	e7d3      	b.n	8014ec0 <__hexnan+0xd4>
 8014f18:	3f04      	subs	r7, #4
 8014f1a:	e7d1      	b.n	8014ec0 <__hexnan+0xd4>
 8014f1c:	2004      	movs	r0, #4
 8014f1e:	b007      	add	sp, #28
 8014f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014f24 <_localeconv_r>:
 8014f24:	4800      	ldr	r0, [pc, #0]	; (8014f28 <_localeconv_r+0x4>)
 8014f26:	4770      	bx	lr
 8014f28:	2000019c 	.word	0x2000019c

08014f2c <malloc>:
 8014f2c:	4b02      	ldr	r3, [pc, #8]	; (8014f38 <malloc+0xc>)
 8014f2e:	4601      	mov	r1, r0
 8014f30:	6818      	ldr	r0, [r3, #0]
 8014f32:	f000 bd3d 	b.w	80159b0 <_malloc_r>
 8014f36:	bf00      	nop
 8014f38:	20000044 	.word	0x20000044

08014f3c <__ascii_mbtowc>:
 8014f3c:	b082      	sub	sp, #8
 8014f3e:	b901      	cbnz	r1, 8014f42 <__ascii_mbtowc+0x6>
 8014f40:	a901      	add	r1, sp, #4
 8014f42:	b142      	cbz	r2, 8014f56 <__ascii_mbtowc+0x1a>
 8014f44:	b14b      	cbz	r3, 8014f5a <__ascii_mbtowc+0x1e>
 8014f46:	7813      	ldrb	r3, [r2, #0]
 8014f48:	600b      	str	r3, [r1, #0]
 8014f4a:	7812      	ldrb	r2, [r2, #0]
 8014f4c:	1e10      	subs	r0, r2, #0
 8014f4e:	bf18      	it	ne
 8014f50:	2001      	movne	r0, #1
 8014f52:	b002      	add	sp, #8
 8014f54:	4770      	bx	lr
 8014f56:	4610      	mov	r0, r2
 8014f58:	e7fb      	b.n	8014f52 <__ascii_mbtowc+0x16>
 8014f5a:	f06f 0001 	mvn.w	r0, #1
 8014f5e:	e7f8      	b.n	8014f52 <__ascii_mbtowc+0x16>

08014f60 <memcpy>:
 8014f60:	440a      	add	r2, r1
 8014f62:	4291      	cmp	r1, r2
 8014f64:	f100 33ff 	add.w	r3, r0, #4294967295
 8014f68:	d100      	bne.n	8014f6c <memcpy+0xc>
 8014f6a:	4770      	bx	lr
 8014f6c:	b510      	push	{r4, lr}
 8014f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014f72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014f76:	4291      	cmp	r1, r2
 8014f78:	d1f9      	bne.n	8014f6e <memcpy+0xe>
 8014f7a:	bd10      	pop	{r4, pc}

08014f7c <_Balloc>:
 8014f7c:	b570      	push	{r4, r5, r6, lr}
 8014f7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014f80:	4604      	mov	r4, r0
 8014f82:	460d      	mov	r5, r1
 8014f84:	b976      	cbnz	r6, 8014fa4 <_Balloc+0x28>
 8014f86:	2010      	movs	r0, #16
 8014f88:	f7ff ffd0 	bl	8014f2c <malloc>
 8014f8c:	4602      	mov	r2, r0
 8014f8e:	6260      	str	r0, [r4, #36]	; 0x24
 8014f90:	b920      	cbnz	r0, 8014f9c <_Balloc+0x20>
 8014f92:	4b18      	ldr	r3, [pc, #96]	; (8014ff4 <_Balloc+0x78>)
 8014f94:	4818      	ldr	r0, [pc, #96]	; (8014ff8 <_Balloc+0x7c>)
 8014f96:	2166      	movs	r1, #102	; 0x66
 8014f98:	f7fe fdaa 	bl	8013af0 <__assert_func>
 8014f9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014fa0:	6006      	str	r6, [r0, #0]
 8014fa2:	60c6      	str	r6, [r0, #12]
 8014fa4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014fa6:	68f3      	ldr	r3, [r6, #12]
 8014fa8:	b183      	cbz	r3, 8014fcc <_Balloc+0x50>
 8014faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014fac:	68db      	ldr	r3, [r3, #12]
 8014fae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014fb2:	b9b8      	cbnz	r0, 8014fe4 <_Balloc+0x68>
 8014fb4:	2101      	movs	r1, #1
 8014fb6:	fa01 f605 	lsl.w	r6, r1, r5
 8014fba:	1d72      	adds	r2, r6, #5
 8014fbc:	0092      	lsls	r2, r2, #2
 8014fbe:	4620      	mov	r0, r4
 8014fc0:	f000 fc97 	bl	80158f2 <_calloc_r>
 8014fc4:	b160      	cbz	r0, 8014fe0 <_Balloc+0x64>
 8014fc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014fca:	e00e      	b.n	8014fea <_Balloc+0x6e>
 8014fcc:	2221      	movs	r2, #33	; 0x21
 8014fce:	2104      	movs	r1, #4
 8014fd0:	4620      	mov	r0, r4
 8014fd2:	f000 fc8e 	bl	80158f2 <_calloc_r>
 8014fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014fd8:	60f0      	str	r0, [r6, #12]
 8014fda:	68db      	ldr	r3, [r3, #12]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d1e4      	bne.n	8014faa <_Balloc+0x2e>
 8014fe0:	2000      	movs	r0, #0
 8014fe2:	bd70      	pop	{r4, r5, r6, pc}
 8014fe4:	6802      	ldr	r2, [r0, #0]
 8014fe6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014fea:	2300      	movs	r3, #0
 8014fec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014ff0:	e7f7      	b.n	8014fe2 <_Balloc+0x66>
 8014ff2:	bf00      	nop
 8014ff4:	0802a570 	.word	0x0802a570
 8014ff8:	0802a820 	.word	0x0802a820

08014ffc <_Bfree>:
 8014ffc:	b570      	push	{r4, r5, r6, lr}
 8014ffe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015000:	4605      	mov	r5, r0
 8015002:	460c      	mov	r4, r1
 8015004:	b976      	cbnz	r6, 8015024 <_Bfree+0x28>
 8015006:	2010      	movs	r0, #16
 8015008:	f7ff ff90 	bl	8014f2c <malloc>
 801500c:	4602      	mov	r2, r0
 801500e:	6268      	str	r0, [r5, #36]	; 0x24
 8015010:	b920      	cbnz	r0, 801501c <_Bfree+0x20>
 8015012:	4b09      	ldr	r3, [pc, #36]	; (8015038 <_Bfree+0x3c>)
 8015014:	4809      	ldr	r0, [pc, #36]	; (801503c <_Bfree+0x40>)
 8015016:	218a      	movs	r1, #138	; 0x8a
 8015018:	f7fe fd6a 	bl	8013af0 <__assert_func>
 801501c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015020:	6006      	str	r6, [r0, #0]
 8015022:	60c6      	str	r6, [r0, #12]
 8015024:	b13c      	cbz	r4, 8015036 <_Bfree+0x3a>
 8015026:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015028:	6862      	ldr	r2, [r4, #4]
 801502a:	68db      	ldr	r3, [r3, #12]
 801502c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015030:	6021      	str	r1, [r4, #0]
 8015032:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015036:	bd70      	pop	{r4, r5, r6, pc}
 8015038:	0802a570 	.word	0x0802a570
 801503c:	0802a820 	.word	0x0802a820

08015040 <__multadd>:
 8015040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015044:	690e      	ldr	r6, [r1, #16]
 8015046:	4607      	mov	r7, r0
 8015048:	4698      	mov	r8, r3
 801504a:	460c      	mov	r4, r1
 801504c:	f101 0014 	add.w	r0, r1, #20
 8015050:	2300      	movs	r3, #0
 8015052:	6805      	ldr	r5, [r0, #0]
 8015054:	b2a9      	uxth	r1, r5
 8015056:	fb02 8101 	mla	r1, r2, r1, r8
 801505a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801505e:	0c2d      	lsrs	r5, r5, #16
 8015060:	fb02 c505 	mla	r5, r2, r5, ip
 8015064:	b289      	uxth	r1, r1
 8015066:	3301      	adds	r3, #1
 8015068:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801506c:	429e      	cmp	r6, r3
 801506e:	f840 1b04 	str.w	r1, [r0], #4
 8015072:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8015076:	dcec      	bgt.n	8015052 <__multadd+0x12>
 8015078:	f1b8 0f00 	cmp.w	r8, #0
 801507c:	d022      	beq.n	80150c4 <__multadd+0x84>
 801507e:	68a3      	ldr	r3, [r4, #8]
 8015080:	42b3      	cmp	r3, r6
 8015082:	dc19      	bgt.n	80150b8 <__multadd+0x78>
 8015084:	6861      	ldr	r1, [r4, #4]
 8015086:	4638      	mov	r0, r7
 8015088:	3101      	adds	r1, #1
 801508a:	f7ff ff77 	bl	8014f7c <_Balloc>
 801508e:	4605      	mov	r5, r0
 8015090:	b928      	cbnz	r0, 801509e <__multadd+0x5e>
 8015092:	4602      	mov	r2, r0
 8015094:	4b0d      	ldr	r3, [pc, #52]	; (80150cc <__multadd+0x8c>)
 8015096:	480e      	ldr	r0, [pc, #56]	; (80150d0 <__multadd+0x90>)
 8015098:	21b5      	movs	r1, #181	; 0xb5
 801509a:	f7fe fd29 	bl	8013af0 <__assert_func>
 801509e:	6922      	ldr	r2, [r4, #16]
 80150a0:	3202      	adds	r2, #2
 80150a2:	f104 010c 	add.w	r1, r4, #12
 80150a6:	0092      	lsls	r2, r2, #2
 80150a8:	300c      	adds	r0, #12
 80150aa:	f7ff ff59 	bl	8014f60 <memcpy>
 80150ae:	4621      	mov	r1, r4
 80150b0:	4638      	mov	r0, r7
 80150b2:	f7ff ffa3 	bl	8014ffc <_Bfree>
 80150b6:	462c      	mov	r4, r5
 80150b8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80150bc:	3601      	adds	r6, #1
 80150be:	f8c3 8014 	str.w	r8, [r3, #20]
 80150c2:	6126      	str	r6, [r4, #16]
 80150c4:	4620      	mov	r0, r4
 80150c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150ca:	bf00      	nop
 80150cc:	0802a791 	.word	0x0802a791
 80150d0:	0802a820 	.word	0x0802a820

080150d4 <__s2b>:
 80150d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150d8:	460c      	mov	r4, r1
 80150da:	4615      	mov	r5, r2
 80150dc:	461f      	mov	r7, r3
 80150de:	2209      	movs	r2, #9
 80150e0:	3308      	adds	r3, #8
 80150e2:	4606      	mov	r6, r0
 80150e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80150e8:	2100      	movs	r1, #0
 80150ea:	2201      	movs	r2, #1
 80150ec:	429a      	cmp	r2, r3
 80150ee:	db09      	blt.n	8015104 <__s2b+0x30>
 80150f0:	4630      	mov	r0, r6
 80150f2:	f7ff ff43 	bl	8014f7c <_Balloc>
 80150f6:	b940      	cbnz	r0, 801510a <__s2b+0x36>
 80150f8:	4602      	mov	r2, r0
 80150fa:	4b19      	ldr	r3, [pc, #100]	; (8015160 <__s2b+0x8c>)
 80150fc:	4819      	ldr	r0, [pc, #100]	; (8015164 <__s2b+0x90>)
 80150fe:	21ce      	movs	r1, #206	; 0xce
 8015100:	f7fe fcf6 	bl	8013af0 <__assert_func>
 8015104:	0052      	lsls	r2, r2, #1
 8015106:	3101      	adds	r1, #1
 8015108:	e7f0      	b.n	80150ec <__s2b+0x18>
 801510a:	9b08      	ldr	r3, [sp, #32]
 801510c:	6143      	str	r3, [r0, #20]
 801510e:	2d09      	cmp	r5, #9
 8015110:	f04f 0301 	mov.w	r3, #1
 8015114:	6103      	str	r3, [r0, #16]
 8015116:	dd16      	ble.n	8015146 <__s2b+0x72>
 8015118:	f104 0909 	add.w	r9, r4, #9
 801511c:	46c8      	mov	r8, r9
 801511e:	442c      	add	r4, r5
 8015120:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015124:	4601      	mov	r1, r0
 8015126:	3b30      	subs	r3, #48	; 0x30
 8015128:	220a      	movs	r2, #10
 801512a:	4630      	mov	r0, r6
 801512c:	f7ff ff88 	bl	8015040 <__multadd>
 8015130:	45a0      	cmp	r8, r4
 8015132:	d1f5      	bne.n	8015120 <__s2b+0x4c>
 8015134:	f1a5 0408 	sub.w	r4, r5, #8
 8015138:	444c      	add	r4, r9
 801513a:	1b2d      	subs	r5, r5, r4
 801513c:	1963      	adds	r3, r4, r5
 801513e:	42bb      	cmp	r3, r7
 8015140:	db04      	blt.n	801514c <__s2b+0x78>
 8015142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015146:	340a      	adds	r4, #10
 8015148:	2509      	movs	r5, #9
 801514a:	e7f6      	b.n	801513a <__s2b+0x66>
 801514c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015150:	4601      	mov	r1, r0
 8015152:	3b30      	subs	r3, #48	; 0x30
 8015154:	220a      	movs	r2, #10
 8015156:	4630      	mov	r0, r6
 8015158:	f7ff ff72 	bl	8015040 <__multadd>
 801515c:	e7ee      	b.n	801513c <__s2b+0x68>
 801515e:	bf00      	nop
 8015160:	0802a791 	.word	0x0802a791
 8015164:	0802a820 	.word	0x0802a820

08015168 <__hi0bits>:
 8015168:	0c03      	lsrs	r3, r0, #16
 801516a:	041b      	lsls	r3, r3, #16
 801516c:	b9d3      	cbnz	r3, 80151a4 <__hi0bits+0x3c>
 801516e:	0400      	lsls	r0, r0, #16
 8015170:	2310      	movs	r3, #16
 8015172:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015176:	bf04      	itt	eq
 8015178:	0200      	lsleq	r0, r0, #8
 801517a:	3308      	addeq	r3, #8
 801517c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015180:	bf04      	itt	eq
 8015182:	0100      	lsleq	r0, r0, #4
 8015184:	3304      	addeq	r3, #4
 8015186:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801518a:	bf04      	itt	eq
 801518c:	0080      	lsleq	r0, r0, #2
 801518e:	3302      	addeq	r3, #2
 8015190:	2800      	cmp	r0, #0
 8015192:	db05      	blt.n	80151a0 <__hi0bits+0x38>
 8015194:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015198:	f103 0301 	add.w	r3, r3, #1
 801519c:	bf08      	it	eq
 801519e:	2320      	moveq	r3, #32
 80151a0:	4618      	mov	r0, r3
 80151a2:	4770      	bx	lr
 80151a4:	2300      	movs	r3, #0
 80151a6:	e7e4      	b.n	8015172 <__hi0bits+0xa>

080151a8 <__lo0bits>:
 80151a8:	6803      	ldr	r3, [r0, #0]
 80151aa:	f013 0207 	ands.w	r2, r3, #7
 80151ae:	4601      	mov	r1, r0
 80151b0:	d00b      	beq.n	80151ca <__lo0bits+0x22>
 80151b2:	07da      	lsls	r2, r3, #31
 80151b4:	d424      	bmi.n	8015200 <__lo0bits+0x58>
 80151b6:	0798      	lsls	r0, r3, #30
 80151b8:	bf49      	itett	mi
 80151ba:	085b      	lsrmi	r3, r3, #1
 80151bc:	089b      	lsrpl	r3, r3, #2
 80151be:	2001      	movmi	r0, #1
 80151c0:	600b      	strmi	r3, [r1, #0]
 80151c2:	bf5c      	itt	pl
 80151c4:	600b      	strpl	r3, [r1, #0]
 80151c6:	2002      	movpl	r0, #2
 80151c8:	4770      	bx	lr
 80151ca:	b298      	uxth	r0, r3
 80151cc:	b9b0      	cbnz	r0, 80151fc <__lo0bits+0x54>
 80151ce:	0c1b      	lsrs	r3, r3, #16
 80151d0:	2010      	movs	r0, #16
 80151d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80151d6:	bf04      	itt	eq
 80151d8:	0a1b      	lsreq	r3, r3, #8
 80151da:	3008      	addeq	r0, #8
 80151dc:	071a      	lsls	r2, r3, #28
 80151de:	bf04      	itt	eq
 80151e0:	091b      	lsreq	r3, r3, #4
 80151e2:	3004      	addeq	r0, #4
 80151e4:	079a      	lsls	r2, r3, #30
 80151e6:	bf04      	itt	eq
 80151e8:	089b      	lsreq	r3, r3, #2
 80151ea:	3002      	addeq	r0, #2
 80151ec:	07da      	lsls	r2, r3, #31
 80151ee:	d403      	bmi.n	80151f8 <__lo0bits+0x50>
 80151f0:	085b      	lsrs	r3, r3, #1
 80151f2:	f100 0001 	add.w	r0, r0, #1
 80151f6:	d005      	beq.n	8015204 <__lo0bits+0x5c>
 80151f8:	600b      	str	r3, [r1, #0]
 80151fa:	4770      	bx	lr
 80151fc:	4610      	mov	r0, r2
 80151fe:	e7e8      	b.n	80151d2 <__lo0bits+0x2a>
 8015200:	2000      	movs	r0, #0
 8015202:	4770      	bx	lr
 8015204:	2020      	movs	r0, #32
 8015206:	4770      	bx	lr

08015208 <__i2b>:
 8015208:	b510      	push	{r4, lr}
 801520a:	460c      	mov	r4, r1
 801520c:	2101      	movs	r1, #1
 801520e:	f7ff feb5 	bl	8014f7c <_Balloc>
 8015212:	4602      	mov	r2, r0
 8015214:	b928      	cbnz	r0, 8015222 <__i2b+0x1a>
 8015216:	4b05      	ldr	r3, [pc, #20]	; (801522c <__i2b+0x24>)
 8015218:	4805      	ldr	r0, [pc, #20]	; (8015230 <__i2b+0x28>)
 801521a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801521e:	f7fe fc67 	bl	8013af0 <__assert_func>
 8015222:	2301      	movs	r3, #1
 8015224:	6144      	str	r4, [r0, #20]
 8015226:	6103      	str	r3, [r0, #16]
 8015228:	bd10      	pop	{r4, pc}
 801522a:	bf00      	nop
 801522c:	0802a791 	.word	0x0802a791
 8015230:	0802a820 	.word	0x0802a820

08015234 <__multiply>:
 8015234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015238:	4614      	mov	r4, r2
 801523a:	690a      	ldr	r2, [r1, #16]
 801523c:	6923      	ldr	r3, [r4, #16]
 801523e:	429a      	cmp	r2, r3
 8015240:	bfb8      	it	lt
 8015242:	460b      	movlt	r3, r1
 8015244:	460d      	mov	r5, r1
 8015246:	bfbc      	itt	lt
 8015248:	4625      	movlt	r5, r4
 801524a:	461c      	movlt	r4, r3
 801524c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8015250:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015254:	68ab      	ldr	r3, [r5, #8]
 8015256:	6869      	ldr	r1, [r5, #4]
 8015258:	eb0a 0709 	add.w	r7, sl, r9
 801525c:	42bb      	cmp	r3, r7
 801525e:	b085      	sub	sp, #20
 8015260:	bfb8      	it	lt
 8015262:	3101      	addlt	r1, #1
 8015264:	f7ff fe8a 	bl	8014f7c <_Balloc>
 8015268:	b930      	cbnz	r0, 8015278 <__multiply+0x44>
 801526a:	4602      	mov	r2, r0
 801526c:	4b42      	ldr	r3, [pc, #264]	; (8015378 <__multiply+0x144>)
 801526e:	4843      	ldr	r0, [pc, #268]	; (801537c <__multiply+0x148>)
 8015270:	f240 115d 	movw	r1, #349	; 0x15d
 8015274:	f7fe fc3c 	bl	8013af0 <__assert_func>
 8015278:	f100 0614 	add.w	r6, r0, #20
 801527c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8015280:	4633      	mov	r3, r6
 8015282:	2200      	movs	r2, #0
 8015284:	4543      	cmp	r3, r8
 8015286:	d31e      	bcc.n	80152c6 <__multiply+0x92>
 8015288:	f105 0c14 	add.w	ip, r5, #20
 801528c:	f104 0314 	add.w	r3, r4, #20
 8015290:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8015294:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8015298:	9202      	str	r2, [sp, #8]
 801529a:	ebac 0205 	sub.w	r2, ip, r5
 801529e:	3a15      	subs	r2, #21
 80152a0:	f022 0203 	bic.w	r2, r2, #3
 80152a4:	3204      	adds	r2, #4
 80152a6:	f105 0115 	add.w	r1, r5, #21
 80152aa:	458c      	cmp	ip, r1
 80152ac:	bf38      	it	cc
 80152ae:	2204      	movcc	r2, #4
 80152b0:	9201      	str	r2, [sp, #4]
 80152b2:	9a02      	ldr	r2, [sp, #8]
 80152b4:	9303      	str	r3, [sp, #12]
 80152b6:	429a      	cmp	r2, r3
 80152b8:	d808      	bhi.n	80152cc <__multiply+0x98>
 80152ba:	2f00      	cmp	r7, #0
 80152bc:	dc55      	bgt.n	801536a <__multiply+0x136>
 80152be:	6107      	str	r7, [r0, #16]
 80152c0:	b005      	add	sp, #20
 80152c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152c6:	f843 2b04 	str.w	r2, [r3], #4
 80152ca:	e7db      	b.n	8015284 <__multiply+0x50>
 80152cc:	f8b3 a000 	ldrh.w	sl, [r3]
 80152d0:	f1ba 0f00 	cmp.w	sl, #0
 80152d4:	d020      	beq.n	8015318 <__multiply+0xe4>
 80152d6:	f105 0e14 	add.w	lr, r5, #20
 80152da:	46b1      	mov	r9, r6
 80152dc:	2200      	movs	r2, #0
 80152de:	f85e 4b04 	ldr.w	r4, [lr], #4
 80152e2:	f8d9 b000 	ldr.w	fp, [r9]
 80152e6:	b2a1      	uxth	r1, r4
 80152e8:	fa1f fb8b 	uxth.w	fp, fp
 80152ec:	fb0a b101 	mla	r1, sl, r1, fp
 80152f0:	4411      	add	r1, r2
 80152f2:	f8d9 2000 	ldr.w	r2, [r9]
 80152f6:	0c24      	lsrs	r4, r4, #16
 80152f8:	0c12      	lsrs	r2, r2, #16
 80152fa:	fb0a 2404 	mla	r4, sl, r4, r2
 80152fe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8015302:	b289      	uxth	r1, r1
 8015304:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8015308:	45f4      	cmp	ip, lr
 801530a:	f849 1b04 	str.w	r1, [r9], #4
 801530e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8015312:	d8e4      	bhi.n	80152de <__multiply+0xaa>
 8015314:	9901      	ldr	r1, [sp, #4]
 8015316:	5072      	str	r2, [r6, r1]
 8015318:	9a03      	ldr	r2, [sp, #12]
 801531a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801531e:	3304      	adds	r3, #4
 8015320:	f1b9 0f00 	cmp.w	r9, #0
 8015324:	d01f      	beq.n	8015366 <__multiply+0x132>
 8015326:	6834      	ldr	r4, [r6, #0]
 8015328:	f105 0114 	add.w	r1, r5, #20
 801532c:	46b6      	mov	lr, r6
 801532e:	f04f 0a00 	mov.w	sl, #0
 8015332:	880a      	ldrh	r2, [r1, #0]
 8015334:	f8be b002 	ldrh.w	fp, [lr, #2]
 8015338:	fb09 b202 	mla	r2, r9, r2, fp
 801533c:	4492      	add	sl, r2
 801533e:	b2a4      	uxth	r4, r4
 8015340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8015344:	f84e 4b04 	str.w	r4, [lr], #4
 8015348:	f851 4b04 	ldr.w	r4, [r1], #4
 801534c:	f8be 2000 	ldrh.w	r2, [lr]
 8015350:	0c24      	lsrs	r4, r4, #16
 8015352:	fb09 2404 	mla	r4, r9, r4, r2
 8015356:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801535a:	458c      	cmp	ip, r1
 801535c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015360:	d8e7      	bhi.n	8015332 <__multiply+0xfe>
 8015362:	9a01      	ldr	r2, [sp, #4]
 8015364:	50b4      	str	r4, [r6, r2]
 8015366:	3604      	adds	r6, #4
 8015368:	e7a3      	b.n	80152b2 <__multiply+0x7e>
 801536a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801536e:	2b00      	cmp	r3, #0
 8015370:	d1a5      	bne.n	80152be <__multiply+0x8a>
 8015372:	3f01      	subs	r7, #1
 8015374:	e7a1      	b.n	80152ba <__multiply+0x86>
 8015376:	bf00      	nop
 8015378:	0802a791 	.word	0x0802a791
 801537c:	0802a820 	.word	0x0802a820

08015380 <__pow5mult>:
 8015380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015384:	4615      	mov	r5, r2
 8015386:	f012 0203 	ands.w	r2, r2, #3
 801538a:	4606      	mov	r6, r0
 801538c:	460f      	mov	r7, r1
 801538e:	d007      	beq.n	80153a0 <__pow5mult+0x20>
 8015390:	4c25      	ldr	r4, [pc, #148]	; (8015428 <__pow5mult+0xa8>)
 8015392:	3a01      	subs	r2, #1
 8015394:	2300      	movs	r3, #0
 8015396:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801539a:	f7ff fe51 	bl	8015040 <__multadd>
 801539e:	4607      	mov	r7, r0
 80153a0:	10ad      	asrs	r5, r5, #2
 80153a2:	d03d      	beq.n	8015420 <__pow5mult+0xa0>
 80153a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80153a6:	b97c      	cbnz	r4, 80153c8 <__pow5mult+0x48>
 80153a8:	2010      	movs	r0, #16
 80153aa:	f7ff fdbf 	bl	8014f2c <malloc>
 80153ae:	4602      	mov	r2, r0
 80153b0:	6270      	str	r0, [r6, #36]	; 0x24
 80153b2:	b928      	cbnz	r0, 80153c0 <__pow5mult+0x40>
 80153b4:	4b1d      	ldr	r3, [pc, #116]	; (801542c <__pow5mult+0xac>)
 80153b6:	481e      	ldr	r0, [pc, #120]	; (8015430 <__pow5mult+0xb0>)
 80153b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80153bc:	f7fe fb98 	bl	8013af0 <__assert_func>
 80153c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80153c4:	6004      	str	r4, [r0, #0]
 80153c6:	60c4      	str	r4, [r0, #12]
 80153c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80153cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80153d0:	b94c      	cbnz	r4, 80153e6 <__pow5mult+0x66>
 80153d2:	f240 2171 	movw	r1, #625	; 0x271
 80153d6:	4630      	mov	r0, r6
 80153d8:	f7ff ff16 	bl	8015208 <__i2b>
 80153dc:	2300      	movs	r3, #0
 80153de:	f8c8 0008 	str.w	r0, [r8, #8]
 80153e2:	4604      	mov	r4, r0
 80153e4:	6003      	str	r3, [r0, #0]
 80153e6:	f04f 0900 	mov.w	r9, #0
 80153ea:	07eb      	lsls	r3, r5, #31
 80153ec:	d50a      	bpl.n	8015404 <__pow5mult+0x84>
 80153ee:	4639      	mov	r1, r7
 80153f0:	4622      	mov	r2, r4
 80153f2:	4630      	mov	r0, r6
 80153f4:	f7ff ff1e 	bl	8015234 <__multiply>
 80153f8:	4639      	mov	r1, r7
 80153fa:	4680      	mov	r8, r0
 80153fc:	4630      	mov	r0, r6
 80153fe:	f7ff fdfd 	bl	8014ffc <_Bfree>
 8015402:	4647      	mov	r7, r8
 8015404:	106d      	asrs	r5, r5, #1
 8015406:	d00b      	beq.n	8015420 <__pow5mult+0xa0>
 8015408:	6820      	ldr	r0, [r4, #0]
 801540a:	b938      	cbnz	r0, 801541c <__pow5mult+0x9c>
 801540c:	4622      	mov	r2, r4
 801540e:	4621      	mov	r1, r4
 8015410:	4630      	mov	r0, r6
 8015412:	f7ff ff0f 	bl	8015234 <__multiply>
 8015416:	6020      	str	r0, [r4, #0]
 8015418:	f8c0 9000 	str.w	r9, [r0]
 801541c:	4604      	mov	r4, r0
 801541e:	e7e4      	b.n	80153ea <__pow5mult+0x6a>
 8015420:	4638      	mov	r0, r7
 8015422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015426:	bf00      	nop
 8015428:	0802a970 	.word	0x0802a970
 801542c:	0802a570 	.word	0x0802a570
 8015430:	0802a820 	.word	0x0802a820

08015434 <__lshift>:
 8015434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015438:	460c      	mov	r4, r1
 801543a:	6849      	ldr	r1, [r1, #4]
 801543c:	6923      	ldr	r3, [r4, #16]
 801543e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015442:	68a3      	ldr	r3, [r4, #8]
 8015444:	4607      	mov	r7, r0
 8015446:	4691      	mov	r9, r2
 8015448:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801544c:	f108 0601 	add.w	r6, r8, #1
 8015450:	42b3      	cmp	r3, r6
 8015452:	db0b      	blt.n	801546c <__lshift+0x38>
 8015454:	4638      	mov	r0, r7
 8015456:	f7ff fd91 	bl	8014f7c <_Balloc>
 801545a:	4605      	mov	r5, r0
 801545c:	b948      	cbnz	r0, 8015472 <__lshift+0x3e>
 801545e:	4602      	mov	r2, r0
 8015460:	4b28      	ldr	r3, [pc, #160]	; (8015504 <__lshift+0xd0>)
 8015462:	4829      	ldr	r0, [pc, #164]	; (8015508 <__lshift+0xd4>)
 8015464:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015468:	f7fe fb42 	bl	8013af0 <__assert_func>
 801546c:	3101      	adds	r1, #1
 801546e:	005b      	lsls	r3, r3, #1
 8015470:	e7ee      	b.n	8015450 <__lshift+0x1c>
 8015472:	2300      	movs	r3, #0
 8015474:	f100 0114 	add.w	r1, r0, #20
 8015478:	f100 0210 	add.w	r2, r0, #16
 801547c:	4618      	mov	r0, r3
 801547e:	4553      	cmp	r3, sl
 8015480:	db33      	blt.n	80154ea <__lshift+0xb6>
 8015482:	6920      	ldr	r0, [r4, #16]
 8015484:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015488:	f104 0314 	add.w	r3, r4, #20
 801548c:	f019 091f 	ands.w	r9, r9, #31
 8015490:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015494:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015498:	d02b      	beq.n	80154f2 <__lshift+0xbe>
 801549a:	f1c9 0e20 	rsb	lr, r9, #32
 801549e:	468a      	mov	sl, r1
 80154a0:	2200      	movs	r2, #0
 80154a2:	6818      	ldr	r0, [r3, #0]
 80154a4:	fa00 f009 	lsl.w	r0, r0, r9
 80154a8:	4302      	orrs	r2, r0
 80154aa:	f84a 2b04 	str.w	r2, [sl], #4
 80154ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80154b2:	459c      	cmp	ip, r3
 80154b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80154b8:	d8f3      	bhi.n	80154a2 <__lshift+0x6e>
 80154ba:	ebac 0304 	sub.w	r3, ip, r4
 80154be:	3b15      	subs	r3, #21
 80154c0:	f023 0303 	bic.w	r3, r3, #3
 80154c4:	3304      	adds	r3, #4
 80154c6:	f104 0015 	add.w	r0, r4, #21
 80154ca:	4584      	cmp	ip, r0
 80154cc:	bf38      	it	cc
 80154ce:	2304      	movcc	r3, #4
 80154d0:	50ca      	str	r2, [r1, r3]
 80154d2:	b10a      	cbz	r2, 80154d8 <__lshift+0xa4>
 80154d4:	f108 0602 	add.w	r6, r8, #2
 80154d8:	3e01      	subs	r6, #1
 80154da:	4638      	mov	r0, r7
 80154dc:	612e      	str	r6, [r5, #16]
 80154de:	4621      	mov	r1, r4
 80154e0:	f7ff fd8c 	bl	8014ffc <_Bfree>
 80154e4:	4628      	mov	r0, r5
 80154e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80154ee:	3301      	adds	r3, #1
 80154f0:	e7c5      	b.n	801547e <__lshift+0x4a>
 80154f2:	3904      	subs	r1, #4
 80154f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80154f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80154fc:	459c      	cmp	ip, r3
 80154fe:	d8f9      	bhi.n	80154f4 <__lshift+0xc0>
 8015500:	e7ea      	b.n	80154d8 <__lshift+0xa4>
 8015502:	bf00      	nop
 8015504:	0802a791 	.word	0x0802a791
 8015508:	0802a820 	.word	0x0802a820

0801550c <__mcmp>:
 801550c:	b530      	push	{r4, r5, lr}
 801550e:	6902      	ldr	r2, [r0, #16]
 8015510:	690c      	ldr	r4, [r1, #16]
 8015512:	1b12      	subs	r2, r2, r4
 8015514:	d10e      	bne.n	8015534 <__mcmp+0x28>
 8015516:	f100 0314 	add.w	r3, r0, #20
 801551a:	3114      	adds	r1, #20
 801551c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015520:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015524:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015528:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801552c:	42a5      	cmp	r5, r4
 801552e:	d003      	beq.n	8015538 <__mcmp+0x2c>
 8015530:	d305      	bcc.n	801553e <__mcmp+0x32>
 8015532:	2201      	movs	r2, #1
 8015534:	4610      	mov	r0, r2
 8015536:	bd30      	pop	{r4, r5, pc}
 8015538:	4283      	cmp	r3, r0
 801553a:	d3f3      	bcc.n	8015524 <__mcmp+0x18>
 801553c:	e7fa      	b.n	8015534 <__mcmp+0x28>
 801553e:	f04f 32ff 	mov.w	r2, #4294967295
 8015542:	e7f7      	b.n	8015534 <__mcmp+0x28>

08015544 <__mdiff>:
 8015544:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015548:	460c      	mov	r4, r1
 801554a:	4606      	mov	r6, r0
 801554c:	4611      	mov	r1, r2
 801554e:	4620      	mov	r0, r4
 8015550:	4617      	mov	r7, r2
 8015552:	f7ff ffdb 	bl	801550c <__mcmp>
 8015556:	1e05      	subs	r5, r0, #0
 8015558:	d110      	bne.n	801557c <__mdiff+0x38>
 801555a:	4629      	mov	r1, r5
 801555c:	4630      	mov	r0, r6
 801555e:	f7ff fd0d 	bl	8014f7c <_Balloc>
 8015562:	b930      	cbnz	r0, 8015572 <__mdiff+0x2e>
 8015564:	4b39      	ldr	r3, [pc, #228]	; (801564c <__mdiff+0x108>)
 8015566:	4602      	mov	r2, r0
 8015568:	f240 2132 	movw	r1, #562	; 0x232
 801556c:	4838      	ldr	r0, [pc, #224]	; (8015650 <__mdiff+0x10c>)
 801556e:	f7fe fabf 	bl	8013af0 <__assert_func>
 8015572:	2301      	movs	r3, #1
 8015574:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015578:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801557c:	bfa4      	itt	ge
 801557e:	463b      	movge	r3, r7
 8015580:	4627      	movge	r7, r4
 8015582:	4630      	mov	r0, r6
 8015584:	6879      	ldr	r1, [r7, #4]
 8015586:	bfa6      	itte	ge
 8015588:	461c      	movge	r4, r3
 801558a:	2500      	movge	r5, #0
 801558c:	2501      	movlt	r5, #1
 801558e:	f7ff fcf5 	bl	8014f7c <_Balloc>
 8015592:	b920      	cbnz	r0, 801559e <__mdiff+0x5a>
 8015594:	4b2d      	ldr	r3, [pc, #180]	; (801564c <__mdiff+0x108>)
 8015596:	4602      	mov	r2, r0
 8015598:	f44f 7110 	mov.w	r1, #576	; 0x240
 801559c:	e7e6      	b.n	801556c <__mdiff+0x28>
 801559e:	693e      	ldr	r6, [r7, #16]
 80155a0:	60c5      	str	r5, [r0, #12]
 80155a2:	6925      	ldr	r5, [r4, #16]
 80155a4:	f107 0114 	add.w	r1, r7, #20
 80155a8:	f104 0914 	add.w	r9, r4, #20
 80155ac:	f100 0e14 	add.w	lr, r0, #20
 80155b0:	f107 0210 	add.w	r2, r7, #16
 80155b4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80155b8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80155bc:	46f2      	mov	sl, lr
 80155be:	2700      	movs	r7, #0
 80155c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80155c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80155c8:	fa1f f883 	uxth.w	r8, r3
 80155cc:	fa17 f78b 	uxtah	r7, r7, fp
 80155d0:	0c1b      	lsrs	r3, r3, #16
 80155d2:	eba7 0808 	sub.w	r8, r7, r8
 80155d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80155da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80155de:	fa1f f888 	uxth.w	r8, r8
 80155e2:	141f      	asrs	r7, r3, #16
 80155e4:	454d      	cmp	r5, r9
 80155e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80155ea:	f84a 3b04 	str.w	r3, [sl], #4
 80155ee:	d8e7      	bhi.n	80155c0 <__mdiff+0x7c>
 80155f0:	1b2b      	subs	r3, r5, r4
 80155f2:	3b15      	subs	r3, #21
 80155f4:	f023 0303 	bic.w	r3, r3, #3
 80155f8:	3304      	adds	r3, #4
 80155fa:	3415      	adds	r4, #21
 80155fc:	42a5      	cmp	r5, r4
 80155fe:	bf38      	it	cc
 8015600:	2304      	movcc	r3, #4
 8015602:	4419      	add	r1, r3
 8015604:	4473      	add	r3, lr
 8015606:	469e      	mov	lr, r3
 8015608:	460d      	mov	r5, r1
 801560a:	4565      	cmp	r5, ip
 801560c:	d30e      	bcc.n	801562c <__mdiff+0xe8>
 801560e:	f10c 0203 	add.w	r2, ip, #3
 8015612:	1a52      	subs	r2, r2, r1
 8015614:	f022 0203 	bic.w	r2, r2, #3
 8015618:	3903      	subs	r1, #3
 801561a:	458c      	cmp	ip, r1
 801561c:	bf38      	it	cc
 801561e:	2200      	movcc	r2, #0
 8015620:	441a      	add	r2, r3
 8015622:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015626:	b17b      	cbz	r3, 8015648 <__mdiff+0x104>
 8015628:	6106      	str	r6, [r0, #16]
 801562a:	e7a5      	b.n	8015578 <__mdiff+0x34>
 801562c:	f855 8b04 	ldr.w	r8, [r5], #4
 8015630:	fa17 f488 	uxtah	r4, r7, r8
 8015634:	1422      	asrs	r2, r4, #16
 8015636:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801563a:	b2a4      	uxth	r4, r4
 801563c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8015640:	f84e 4b04 	str.w	r4, [lr], #4
 8015644:	1417      	asrs	r7, r2, #16
 8015646:	e7e0      	b.n	801560a <__mdiff+0xc6>
 8015648:	3e01      	subs	r6, #1
 801564a:	e7ea      	b.n	8015622 <__mdiff+0xde>
 801564c:	0802a791 	.word	0x0802a791
 8015650:	0802a820 	.word	0x0802a820

08015654 <__ulp>:
 8015654:	b082      	sub	sp, #8
 8015656:	ed8d 0b00 	vstr	d0, [sp]
 801565a:	9b01      	ldr	r3, [sp, #4]
 801565c:	4912      	ldr	r1, [pc, #72]	; (80156a8 <__ulp+0x54>)
 801565e:	4019      	ands	r1, r3
 8015660:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8015664:	2900      	cmp	r1, #0
 8015666:	dd05      	ble.n	8015674 <__ulp+0x20>
 8015668:	2200      	movs	r2, #0
 801566a:	460b      	mov	r3, r1
 801566c:	ec43 2b10 	vmov	d0, r2, r3
 8015670:	b002      	add	sp, #8
 8015672:	4770      	bx	lr
 8015674:	4249      	negs	r1, r1
 8015676:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801567a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801567e:	f04f 0200 	mov.w	r2, #0
 8015682:	f04f 0300 	mov.w	r3, #0
 8015686:	da04      	bge.n	8015692 <__ulp+0x3e>
 8015688:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801568c:	fa41 f300 	asr.w	r3, r1, r0
 8015690:	e7ec      	b.n	801566c <__ulp+0x18>
 8015692:	f1a0 0114 	sub.w	r1, r0, #20
 8015696:	291e      	cmp	r1, #30
 8015698:	bfda      	itte	le
 801569a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801569e:	fa20 f101 	lsrle.w	r1, r0, r1
 80156a2:	2101      	movgt	r1, #1
 80156a4:	460a      	mov	r2, r1
 80156a6:	e7e1      	b.n	801566c <__ulp+0x18>
 80156a8:	7ff00000 	.word	0x7ff00000

080156ac <__b2d>:
 80156ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156ae:	6905      	ldr	r5, [r0, #16]
 80156b0:	f100 0714 	add.w	r7, r0, #20
 80156b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80156b8:	1f2e      	subs	r6, r5, #4
 80156ba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80156be:	4620      	mov	r0, r4
 80156c0:	f7ff fd52 	bl	8015168 <__hi0bits>
 80156c4:	f1c0 0320 	rsb	r3, r0, #32
 80156c8:	280a      	cmp	r0, #10
 80156ca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015748 <__b2d+0x9c>
 80156ce:	600b      	str	r3, [r1, #0]
 80156d0:	dc14      	bgt.n	80156fc <__b2d+0x50>
 80156d2:	f1c0 0e0b 	rsb	lr, r0, #11
 80156d6:	fa24 f10e 	lsr.w	r1, r4, lr
 80156da:	42b7      	cmp	r7, r6
 80156dc:	ea41 030c 	orr.w	r3, r1, ip
 80156e0:	bf34      	ite	cc
 80156e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80156e6:	2100      	movcs	r1, #0
 80156e8:	3015      	adds	r0, #21
 80156ea:	fa04 f000 	lsl.w	r0, r4, r0
 80156ee:	fa21 f10e 	lsr.w	r1, r1, lr
 80156f2:	ea40 0201 	orr.w	r2, r0, r1
 80156f6:	ec43 2b10 	vmov	d0, r2, r3
 80156fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156fc:	42b7      	cmp	r7, r6
 80156fe:	bf3a      	itte	cc
 8015700:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015704:	f1a5 0608 	subcc.w	r6, r5, #8
 8015708:	2100      	movcs	r1, #0
 801570a:	380b      	subs	r0, #11
 801570c:	d017      	beq.n	801573e <__b2d+0x92>
 801570e:	f1c0 0c20 	rsb	ip, r0, #32
 8015712:	fa04 f500 	lsl.w	r5, r4, r0
 8015716:	42be      	cmp	r6, r7
 8015718:	fa21 f40c 	lsr.w	r4, r1, ip
 801571c:	ea45 0504 	orr.w	r5, r5, r4
 8015720:	bf8c      	ite	hi
 8015722:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015726:	2400      	movls	r4, #0
 8015728:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801572c:	fa01 f000 	lsl.w	r0, r1, r0
 8015730:	fa24 f40c 	lsr.w	r4, r4, ip
 8015734:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015738:	ea40 0204 	orr.w	r2, r0, r4
 801573c:	e7db      	b.n	80156f6 <__b2d+0x4a>
 801573e:	ea44 030c 	orr.w	r3, r4, ip
 8015742:	460a      	mov	r2, r1
 8015744:	e7d7      	b.n	80156f6 <__b2d+0x4a>
 8015746:	bf00      	nop
 8015748:	3ff00000 	.word	0x3ff00000

0801574c <__d2b>:
 801574c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015750:	4689      	mov	r9, r1
 8015752:	2101      	movs	r1, #1
 8015754:	ec57 6b10 	vmov	r6, r7, d0
 8015758:	4690      	mov	r8, r2
 801575a:	f7ff fc0f 	bl	8014f7c <_Balloc>
 801575e:	4604      	mov	r4, r0
 8015760:	b930      	cbnz	r0, 8015770 <__d2b+0x24>
 8015762:	4602      	mov	r2, r0
 8015764:	4b25      	ldr	r3, [pc, #148]	; (80157fc <__d2b+0xb0>)
 8015766:	4826      	ldr	r0, [pc, #152]	; (8015800 <__d2b+0xb4>)
 8015768:	f240 310a 	movw	r1, #778	; 0x30a
 801576c:	f7fe f9c0 	bl	8013af0 <__assert_func>
 8015770:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015774:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015778:	bb35      	cbnz	r5, 80157c8 <__d2b+0x7c>
 801577a:	2e00      	cmp	r6, #0
 801577c:	9301      	str	r3, [sp, #4]
 801577e:	d028      	beq.n	80157d2 <__d2b+0x86>
 8015780:	4668      	mov	r0, sp
 8015782:	9600      	str	r6, [sp, #0]
 8015784:	f7ff fd10 	bl	80151a8 <__lo0bits>
 8015788:	9900      	ldr	r1, [sp, #0]
 801578a:	b300      	cbz	r0, 80157ce <__d2b+0x82>
 801578c:	9a01      	ldr	r2, [sp, #4]
 801578e:	f1c0 0320 	rsb	r3, r0, #32
 8015792:	fa02 f303 	lsl.w	r3, r2, r3
 8015796:	430b      	orrs	r3, r1
 8015798:	40c2      	lsrs	r2, r0
 801579a:	6163      	str	r3, [r4, #20]
 801579c:	9201      	str	r2, [sp, #4]
 801579e:	9b01      	ldr	r3, [sp, #4]
 80157a0:	61a3      	str	r3, [r4, #24]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	bf14      	ite	ne
 80157a6:	2202      	movne	r2, #2
 80157a8:	2201      	moveq	r2, #1
 80157aa:	6122      	str	r2, [r4, #16]
 80157ac:	b1d5      	cbz	r5, 80157e4 <__d2b+0x98>
 80157ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80157b2:	4405      	add	r5, r0
 80157b4:	f8c9 5000 	str.w	r5, [r9]
 80157b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80157bc:	f8c8 0000 	str.w	r0, [r8]
 80157c0:	4620      	mov	r0, r4
 80157c2:	b003      	add	sp, #12
 80157c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80157cc:	e7d5      	b.n	801577a <__d2b+0x2e>
 80157ce:	6161      	str	r1, [r4, #20]
 80157d0:	e7e5      	b.n	801579e <__d2b+0x52>
 80157d2:	a801      	add	r0, sp, #4
 80157d4:	f7ff fce8 	bl	80151a8 <__lo0bits>
 80157d8:	9b01      	ldr	r3, [sp, #4]
 80157da:	6163      	str	r3, [r4, #20]
 80157dc:	2201      	movs	r2, #1
 80157de:	6122      	str	r2, [r4, #16]
 80157e0:	3020      	adds	r0, #32
 80157e2:	e7e3      	b.n	80157ac <__d2b+0x60>
 80157e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80157e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80157ec:	f8c9 0000 	str.w	r0, [r9]
 80157f0:	6918      	ldr	r0, [r3, #16]
 80157f2:	f7ff fcb9 	bl	8015168 <__hi0bits>
 80157f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80157fa:	e7df      	b.n	80157bc <__d2b+0x70>
 80157fc:	0802a791 	.word	0x0802a791
 8015800:	0802a820 	.word	0x0802a820

08015804 <__ratio>:
 8015804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015808:	4688      	mov	r8, r1
 801580a:	4669      	mov	r1, sp
 801580c:	4681      	mov	r9, r0
 801580e:	f7ff ff4d 	bl	80156ac <__b2d>
 8015812:	a901      	add	r1, sp, #4
 8015814:	4640      	mov	r0, r8
 8015816:	ec55 4b10 	vmov	r4, r5, d0
 801581a:	f7ff ff47 	bl	80156ac <__b2d>
 801581e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015822:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015826:	eba3 0c02 	sub.w	ip, r3, r2
 801582a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801582e:	1a9b      	subs	r3, r3, r2
 8015830:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015834:	ec51 0b10 	vmov	r0, r1, d0
 8015838:	2b00      	cmp	r3, #0
 801583a:	bfd6      	itet	le
 801583c:	460a      	movle	r2, r1
 801583e:	462a      	movgt	r2, r5
 8015840:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015844:	468b      	mov	fp, r1
 8015846:	462f      	mov	r7, r5
 8015848:	bfd4      	ite	le
 801584a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801584e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015852:	4620      	mov	r0, r4
 8015854:	ee10 2a10 	vmov	r2, s0
 8015858:	465b      	mov	r3, fp
 801585a:	4639      	mov	r1, r7
 801585c:	f7eb f80e 	bl	800087c <__aeabi_ddiv>
 8015860:	ec41 0b10 	vmov	d0, r0, r1
 8015864:	b003      	add	sp, #12
 8015866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801586a <__copybits>:
 801586a:	3901      	subs	r1, #1
 801586c:	b570      	push	{r4, r5, r6, lr}
 801586e:	1149      	asrs	r1, r1, #5
 8015870:	6914      	ldr	r4, [r2, #16]
 8015872:	3101      	adds	r1, #1
 8015874:	f102 0314 	add.w	r3, r2, #20
 8015878:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801587c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015880:	1f05      	subs	r5, r0, #4
 8015882:	42a3      	cmp	r3, r4
 8015884:	d30c      	bcc.n	80158a0 <__copybits+0x36>
 8015886:	1aa3      	subs	r3, r4, r2
 8015888:	3b11      	subs	r3, #17
 801588a:	f023 0303 	bic.w	r3, r3, #3
 801588e:	3211      	adds	r2, #17
 8015890:	42a2      	cmp	r2, r4
 8015892:	bf88      	it	hi
 8015894:	2300      	movhi	r3, #0
 8015896:	4418      	add	r0, r3
 8015898:	2300      	movs	r3, #0
 801589a:	4288      	cmp	r0, r1
 801589c:	d305      	bcc.n	80158aa <__copybits+0x40>
 801589e:	bd70      	pop	{r4, r5, r6, pc}
 80158a0:	f853 6b04 	ldr.w	r6, [r3], #4
 80158a4:	f845 6f04 	str.w	r6, [r5, #4]!
 80158a8:	e7eb      	b.n	8015882 <__copybits+0x18>
 80158aa:	f840 3b04 	str.w	r3, [r0], #4
 80158ae:	e7f4      	b.n	801589a <__copybits+0x30>

080158b0 <__any_on>:
 80158b0:	f100 0214 	add.w	r2, r0, #20
 80158b4:	6900      	ldr	r0, [r0, #16]
 80158b6:	114b      	asrs	r3, r1, #5
 80158b8:	4298      	cmp	r0, r3
 80158ba:	b510      	push	{r4, lr}
 80158bc:	db11      	blt.n	80158e2 <__any_on+0x32>
 80158be:	dd0a      	ble.n	80158d6 <__any_on+0x26>
 80158c0:	f011 011f 	ands.w	r1, r1, #31
 80158c4:	d007      	beq.n	80158d6 <__any_on+0x26>
 80158c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80158ca:	fa24 f001 	lsr.w	r0, r4, r1
 80158ce:	fa00 f101 	lsl.w	r1, r0, r1
 80158d2:	428c      	cmp	r4, r1
 80158d4:	d10b      	bne.n	80158ee <__any_on+0x3e>
 80158d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80158da:	4293      	cmp	r3, r2
 80158dc:	d803      	bhi.n	80158e6 <__any_on+0x36>
 80158de:	2000      	movs	r0, #0
 80158e0:	bd10      	pop	{r4, pc}
 80158e2:	4603      	mov	r3, r0
 80158e4:	e7f7      	b.n	80158d6 <__any_on+0x26>
 80158e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80158ea:	2900      	cmp	r1, #0
 80158ec:	d0f5      	beq.n	80158da <__any_on+0x2a>
 80158ee:	2001      	movs	r0, #1
 80158f0:	e7f6      	b.n	80158e0 <__any_on+0x30>

080158f2 <_calloc_r>:
 80158f2:	b513      	push	{r0, r1, r4, lr}
 80158f4:	434a      	muls	r2, r1
 80158f6:	4611      	mov	r1, r2
 80158f8:	9201      	str	r2, [sp, #4]
 80158fa:	f000 f859 	bl	80159b0 <_malloc_r>
 80158fe:	4604      	mov	r4, r0
 8015900:	b118      	cbz	r0, 801590a <_calloc_r+0x18>
 8015902:	9a01      	ldr	r2, [sp, #4]
 8015904:	2100      	movs	r1, #0
 8015906:	f7fc fb27 	bl	8011f58 <memset>
 801590a:	4620      	mov	r0, r4
 801590c:	b002      	add	sp, #8
 801590e:	bd10      	pop	{r4, pc}

08015910 <_free_r>:
 8015910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015912:	2900      	cmp	r1, #0
 8015914:	d048      	beq.n	80159a8 <_free_r+0x98>
 8015916:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801591a:	9001      	str	r0, [sp, #4]
 801591c:	2b00      	cmp	r3, #0
 801591e:	f1a1 0404 	sub.w	r4, r1, #4
 8015922:	bfb8      	it	lt
 8015924:	18e4      	addlt	r4, r4, r3
 8015926:	f000 fe8b 	bl	8016640 <__malloc_lock>
 801592a:	4a20      	ldr	r2, [pc, #128]	; (80159ac <_free_r+0x9c>)
 801592c:	9801      	ldr	r0, [sp, #4]
 801592e:	6813      	ldr	r3, [r2, #0]
 8015930:	4615      	mov	r5, r2
 8015932:	b933      	cbnz	r3, 8015942 <_free_r+0x32>
 8015934:	6063      	str	r3, [r4, #4]
 8015936:	6014      	str	r4, [r2, #0]
 8015938:	b003      	add	sp, #12
 801593a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801593e:	f000 be85 	b.w	801664c <__malloc_unlock>
 8015942:	42a3      	cmp	r3, r4
 8015944:	d90b      	bls.n	801595e <_free_r+0x4e>
 8015946:	6821      	ldr	r1, [r4, #0]
 8015948:	1862      	adds	r2, r4, r1
 801594a:	4293      	cmp	r3, r2
 801594c:	bf04      	itt	eq
 801594e:	681a      	ldreq	r2, [r3, #0]
 8015950:	685b      	ldreq	r3, [r3, #4]
 8015952:	6063      	str	r3, [r4, #4]
 8015954:	bf04      	itt	eq
 8015956:	1852      	addeq	r2, r2, r1
 8015958:	6022      	streq	r2, [r4, #0]
 801595a:	602c      	str	r4, [r5, #0]
 801595c:	e7ec      	b.n	8015938 <_free_r+0x28>
 801595e:	461a      	mov	r2, r3
 8015960:	685b      	ldr	r3, [r3, #4]
 8015962:	b10b      	cbz	r3, 8015968 <_free_r+0x58>
 8015964:	42a3      	cmp	r3, r4
 8015966:	d9fa      	bls.n	801595e <_free_r+0x4e>
 8015968:	6811      	ldr	r1, [r2, #0]
 801596a:	1855      	adds	r5, r2, r1
 801596c:	42a5      	cmp	r5, r4
 801596e:	d10b      	bne.n	8015988 <_free_r+0x78>
 8015970:	6824      	ldr	r4, [r4, #0]
 8015972:	4421      	add	r1, r4
 8015974:	1854      	adds	r4, r2, r1
 8015976:	42a3      	cmp	r3, r4
 8015978:	6011      	str	r1, [r2, #0]
 801597a:	d1dd      	bne.n	8015938 <_free_r+0x28>
 801597c:	681c      	ldr	r4, [r3, #0]
 801597e:	685b      	ldr	r3, [r3, #4]
 8015980:	6053      	str	r3, [r2, #4]
 8015982:	4421      	add	r1, r4
 8015984:	6011      	str	r1, [r2, #0]
 8015986:	e7d7      	b.n	8015938 <_free_r+0x28>
 8015988:	d902      	bls.n	8015990 <_free_r+0x80>
 801598a:	230c      	movs	r3, #12
 801598c:	6003      	str	r3, [r0, #0]
 801598e:	e7d3      	b.n	8015938 <_free_r+0x28>
 8015990:	6825      	ldr	r5, [r4, #0]
 8015992:	1961      	adds	r1, r4, r5
 8015994:	428b      	cmp	r3, r1
 8015996:	bf04      	itt	eq
 8015998:	6819      	ldreq	r1, [r3, #0]
 801599a:	685b      	ldreq	r3, [r3, #4]
 801599c:	6063      	str	r3, [r4, #4]
 801599e:	bf04      	itt	eq
 80159a0:	1949      	addeq	r1, r1, r5
 80159a2:	6021      	streq	r1, [r4, #0]
 80159a4:	6054      	str	r4, [r2, #4]
 80159a6:	e7c7      	b.n	8015938 <_free_r+0x28>
 80159a8:	b003      	add	sp, #12
 80159aa:	bd30      	pop	{r4, r5, pc}
 80159ac:	200002c4 	.word	0x200002c4

080159b0 <_malloc_r>:
 80159b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159b2:	1ccd      	adds	r5, r1, #3
 80159b4:	f025 0503 	bic.w	r5, r5, #3
 80159b8:	3508      	adds	r5, #8
 80159ba:	2d0c      	cmp	r5, #12
 80159bc:	bf38      	it	cc
 80159be:	250c      	movcc	r5, #12
 80159c0:	2d00      	cmp	r5, #0
 80159c2:	4606      	mov	r6, r0
 80159c4:	db01      	blt.n	80159ca <_malloc_r+0x1a>
 80159c6:	42a9      	cmp	r1, r5
 80159c8:	d903      	bls.n	80159d2 <_malloc_r+0x22>
 80159ca:	230c      	movs	r3, #12
 80159cc:	6033      	str	r3, [r6, #0]
 80159ce:	2000      	movs	r0, #0
 80159d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159d2:	f000 fe35 	bl	8016640 <__malloc_lock>
 80159d6:	4921      	ldr	r1, [pc, #132]	; (8015a5c <_malloc_r+0xac>)
 80159d8:	680a      	ldr	r2, [r1, #0]
 80159da:	4614      	mov	r4, r2
 80159dc:	b99c      	cbnz	r4, 8015a06 <_malloc_r+0x56>
 80159de:	4f20      	ldr	r7, [pc, #128]	; (8015a60 <_malloc_r+0xb0>)
 80159e0:	683b      	ldr	r3, [r7, #0]
 80159e2:	b923      	cbnz	r3, 80159ee <_malloc_r+0x3e>
 80159e4:	4621      	mov	r1, r4
 80159e6:	4630      	mov	r0, r6
 80159e8:	f000 fafa 	bl	8015fe0 <_sbrk_r>
 80159ec:	6038      	str	r0, [r7, #0]
 80159ee:	4629      	mov	r1, r5
 80159f0:	4630      	mov	r0, r6
 80159f2:	f000 faf5 	bl	8015fe0 <_sbrk_r>
 80159f6:	1c43      	adds	r3, r0, #1
 80159f8:	d123      	bne.n	8015a42 <_malloc_r+0x92>
 80159fa:	230c      	movs	r3, #12
 80159fc:	6033      	str	r3, [r6, #0]
 80159fe:	4630      	mov	r0, r6
 8015a00:	f000 fe24 	bl	801664c <__malloc_unlock>
 8015a04:	e7e3      	b.n	80159ce <_malloc_r+0x1e>
 8015a06:	6823      	ldr	r3, [r4, #0]
 8015a08:	1b5b      	subs	r3, r3, r5
 8015a0a:	d417      	bmi.n	8015a3c <_malloc_r+0x8c>
 8015a0c:	2b0b      	cmp	r3, #11
 8015a0e:	d903      	bls.n	8015a18 <_malloc_r+0x68>
 8015a10:	6023      	str	r3, [r4, #0]
 8015a12:	441c      	add	r4, r3
 8015a14:	6025      	str	r5, [r4, #0]
 8015a16:	e004      	b.n	8015a22 <_malloc_r+0x72>
 8015a18:	6863      	ldr	r3, [r4, #4]
 8015a1a:	42a2      	cmp	r2, r4
 8015a1c:	bf0c      	ite	eq
 8015a1e:	600b      	streq	r3, [r1, #0]
 8015a20:	6053      	strne	r3, [r2, #4]
 8015a22:	4630      	mov	r0, r6
 8015a24:	f000 fe12 	bl	801664c <__malloc_unlock>
 8015a28:	f104 000b 	add.w	r0, r4, #11
 8015a2c:	1d23      	adds	r3, r4, #4
 8015a2e:	f020 0007 	bic.w	r0, r0, #7
 8015a32:	1ac2      	subs	r2, r0, r3
 8015a34:	d0cc      	beq.n	80159d0 <_malloc_r+0x20>
 8015a36:	1a1b      	subs	r3, r3, r0
 8015a38:	50a3      	str	r3, [r4, r2]
 8015a3a:	e7c9      	b.n	80159d0 <_malloc_r+0x20>
 8015a3c:	4622      	mov	r2, r4
 8015a3e:	6864      	ldr	r4, [r4, #4]
 8015a40:	e7cc      	b.n	80159dc <_malloc_r+0x2c>
 8015a42:	1cc4      	adds	r4, r0, #3
 8015a44:	f024 0403 	bic.w	r4, r4, #3
 8015a48:	42a0      	cmp	r0, r4
 8015a4a:	d0e3      	beq.n	8015a14 <_malloc_r+0x64>
 8015a4c:	1a21      	subs	r1, r4, r0
 8015a4e:	4630      	mov	r0, r6
 8015a50:	f000 fac6 	bl	8015fe0 <_sbrk_r>
 8015a54:	3001      	adds	r0, #1
 8015a56:	d1dd      	bne.n	8015a14 <_malloc_r+0x64>
 8015a58:	e7cf      	b.n	80159fa <_malloc_r+0x4a>
 8015a5a:	bf00      	nop
 8015a5c:	200002c4 	.word	0x200002c4
 8015a60:	200002c8 	.word	0x200002c8

08015a64 <__ssputs_r>:
 8015a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a68:	688e      	ldr	r6, [r1, #8]
 8015a6a:	429e      	cmp	r6, r3
 8015a6c:	4682      	mov	sl, r0
 8015a6e:	460c      	mov	r4, r1
 8015a70:	4690      	mov	r8, r2
 8015a72:	461f      	mov	r7, r3
 8015a74:	d838      	bhi.n	8015ae8 <__ssputs_r+0x84>
 8015a76:	898a      	ldrh	r2, [r1, #12]
 8015a78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015a7c:	d032      	beq.n	8015ae4 <__ssputs_r+0x80>
 8015a7e:	6825      	ldr	r5, [r4, #0]
 8015a80:	6909      	ldr	r1, [r1, #16]
 8015a82:	eba5 0901 	sub.w	r9, r5, r1
 8015a86:	6965      	ldr	r5, [r4, #20]
 8015a88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015a8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015a90:	3301      	adds	r3, #1
 8015a92:	444b      	add	r3, r9
 8015a94:	106d      	asrs	r5, r5, #1
 8015a96:	429d      	cmp	r5, r3
 8015a98:	bf38      	it	cc
 8015a9a:	461d      	movcc	r5, r3
 8015a9c:	0553      	lsls	r3, r2, #21
 8015a9e:	d531      	bpl.n	8015b04 <__ssputs_r+0xa0>
 8015aa0:	4629      	mov	r1, r5
 8015aa2:	f7ff ff85 	bl	80159b0 <_malloc_r>
 8015aa6:	4606      	mov	r6, r0
 8015aa8:	b950      	cbnz	r0, 8015ac0 <__ssputs_r+0x5c>
 8015aaa:	230c      	movs	r3, #12
 8015aac:	f8ca 3000 	str.w	r3, [sl]
 8015ab0:	89a3      	ldrh	r3, [r4, #12]
 8015ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ab6:	81a3      	strh	r3, [r4, #12]
 8015ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8015abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ac0:	6921      	ldr	r1, [r4, #16]
 8015ac2:	464a      	mov	r2, r9
 8015ac4:	f7ff fa4c 	bl	8014f60 <memcpy>
 8015ac8:	89a3      	ldrh	r3, [r4, #12]
 8015aca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ad2:	81a3      	strh	r3, [r4, #12]
 8015ad4:	6126      	str	r6, [r4, #16]
 8015ad6:	6165      	str	r5, [r4, #20]
 8015ad8:	444e      	add	r6, r9
 8015ada:	eba5 0509 	sub.w	r5, r5, r9
 8015ade:	6026      	str	r6, [r4, #0]
 8015ae0:	60a5      	str	r5, [r4, #8]
 8015ae2:	463e      	mov	r6, r7
 8015ae4:	42be      	cmp	r6, r7
 8015ae6:	d900      	bls.n	8015aea <__ssputs_r+0x86>
 8015ae8:	463e      	mov	r6, r7
 8015aea:	4632      	mov	r2, r6
 8015aec:	6820      	ldr	r0, [r4, #0]
 8015aee:	4641      	mov	r1, r8
 8015af0:	f000 fd8c 	bl	801660c <memmove>
 8015af4:	68a3      	ldr	r3, [r4, #8]
 8015af6:	6822      	ldr	r2, [r4, #0]
 8015af8:	1b9b      	subs	r3, r3, r6
 8015afa:	4432      	add	r2, r6
 8015afc:	60a3      	str	r3, [r4, #8]
 8015afe:	6022      	str	r2, [r4, #0]
 8015b00:	2000      	movs	r0, #0
 8015b02:	e7db      	b.n	8015abc <__ssputs_r+0x58>
 8015b04:	462a      	mov	r2, r5
 8015b06:	f000 fda7 	bl	8016658 <_realloc_r>
 8015b0a:	4606      	mov	r6, r0
 8015b0c:	2800      	cmp	r0, #0
 8015b0e:	d1e1      	bne.n	8015ad4 <__ssputs_r+0x70>
 8015b10:	6921      	ldr	r1, [r4, #16]
 8015b12:	4650      	mov	r0, sl
 8015b14:	f7ff fefc 	bl	8015910 <_free_r>
 8015b18:	e7c7      	b.n	8015aaa <__ssputs_r+0x46>
	...

08015b1c <_svfiprintf_r>:
 8015b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b20:	4698      	mov	r8, r3
 8015b22:	898b      	ldrh	r3, [r1, #12]
 8015b24:	061b      	lsls	r3, r3, #24
 8015b26:	b09d      	sub	sp, #116	; 0x74
 8015b28:	4607      	mov	r7, r0
 8015b2a:	460d      	mov	r5, r1
 8015b2c:	4614      	mov	r4, r2
 8015b2e:	d50e      	bpl.n	8015b4e <_svfiprintf_r+0x32>
 8015b30:	690b      	ldr	r3, [r1, #16]
 8015b32:	b963      	cbnz	r3, 8015b4e <_svfiprintf_r+0x32>
 8015b34:	2140      	movs	r1, #64	; 0x40
 8015b36:	f7ff ff3b 	bl	80159b0 <_malloc_r>
 8015b3a:	6028      	str	r0, [r5, #0]
 8015b3c:	6128      	str	r0, [r5, #16]
 8015b3e:	b920      	cbnz	r0, 8015b4a <_svfiprintf_r+0x2e>
 8015b40:	230c      	movs	r3, #12
 8015b42:	603b      	str	r3, [r7, #0]
 8015b44:	f04f 30ff 	mov.w	r0, #4294967295
 8015b48:	e0d1      	b.n	8015cee <_svfiprintf_r+0x1d2>
 8015b4a:	2340      	movs	r3, #64	; 0x40
 8015b4c:	616b      	str	r3, [r5, #20]
 8015b4e:	2300      	movs	r3, #0
 8015b50:	9309      	str	r3, [sp, #36]	; 0x24
 8015b52:	2320      	movs	r3, #32
 8015b54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015b58:	f8cd 800c 	str.w	r8, [sp, #12]
 8015b5c:	2330      	movs	r3, #48	; 0x30
 8015b5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015d08 <_svfiprintf_r+0x1ec>
 8015b62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015b66:	f04f 0901 	mov.w	r9, #1
 8015b6a:	4623      	mov	r3, r4
 8015b6c:	469a      	mov	sl, r3
 8015b6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015b72:	b10a      	cbz	r2, 8015b78 <_svfiprintf_r+0x5c>
 8015b74:	2a25      	cmp	r2, #37	; 0x25
 8015b76:	d1f9      	bne.n	8015b6c <_svfiprintf_r+0x50>
 8015b78:	ebba 0b04 	subs.w	fp, sl, r4
 8015b7c:	d00b      	beq.n	8015b96 <_svfiprintf_r+0x7a>
 8015b7e:	465b      	mov	r3, fp
 8015b80:	4622      	mov	r2, r4
 8015b82:	4629      	mov	r1, r5
 8015b84:	4638      	mov	r0, r7
 8015b86:	f7ff ff6d 	bl	8015a64 <__ssputs_r>
 8015b8a:	3001      	adds	r0, #1
 8015b8c:	f000 80aa 	beq.w	8015ce4 <_svfiprintf_r+0x1c8>
 8015b90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b92:	445a      	add	r2, fp
 8015b94:	9209      	str	r2, [sp, #36]	; 0x24
 8015b96:	f89a 3000 	ldrb.w	r3, [sl]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	f000 80a2 	beq.w	8015ce4 <_svfiprintf_r+0x1c8>
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8015ba6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015baa:	f10a 0a01 	add.w	sl, sl, #1
 8015bae:	9304      	str	r3, [sp, #16]
 8015bb0:	9307      	str	r3, [sp, #28]
 8015bb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015bb6:	931a      	str	r3, [sp, #104]	; 0x68
 8015bb8:	4654      	mov	r4, sl
 8015bba:	2205      	movs	r2, #5
 8015bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bc0:	4851      	ldr	r0, [pc, #324]	; (8015d08 <_svfiprintf_r+0x1ec>)
 8015bc2:	f7ea fb25 	bl	8000210 <memchr>
 8015bc6:	9a04      	ldr	r2, [sp, #16]
 8015bc8:	b9d8      	cbnz	r0, 8015c02 <_svfiprintf_r+0xe6>
 8015bca:	06d0      	lsls	r0, r2, #27
 8015bcc:	bf44      	itt	mi
 8015bce:	2320      	movmi	r3, #32
 8015bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015bd4:	0711      	lsls	r1, r2, #28
 8015bd6:	bf44      	itt	mi
 8015bd8:	232b      	movmi	r3, #43	; 0x2b
 8015bda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015bde:	f89a 3000 	ldrb.w	r3, [sl]
 8015be2:	2b2a      	cmp	r3, #42	; 0x2a
 8015be4:	d015      	beq.n	8015c12 <_svfiprintf_r+0xf6>
 8015be6:	9a07      	ldr	r2, [sp, #28]
 8015be8:	4654      	mov	r4, sl
 8015bea:	2000      	movs	r0, #0
 8015bec:	f04f 0c0a 	mov.w	ip, #10
 8015bf0:	4621      	mov	r1, r4
 8015bf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015bf6:	3b30      	subs	r3, #48	; 0x30
 8015bf8:	2b09      	cmp	r3, #9
 8015bfa:	d94e      	bls.n	8015c9a <_svfiprintf_r+0x17e>
 8015bfc:	b1b0      	cbz	r0, 8015c2c <_svfiprintf_r+0x110>
 8015bfe:	9207      	str	r2, [sp, #28]
 8015c00:	e014      	b.n	8015c2c <_svfiprintf_r+0x110>
 8015c02:	eba0 0308 	sub.w	r3, r0, r8
 8015c06:	fa09 f303 	lsl.w	r3, r9, r3
 8015c0a:	4313      	orrs	r3, r2
 8015c0c:	9304      	str	r3, [sp, #16]
 8015c0e:	46a2      	mov	sl, r4
 8015c10:	e7d2      	b.n	8015bb8 <_svfiprintf_r+0x9c>
 8015c12:	9b03      	ldr	r3, [sp, #12]
 8015c14:	1d19      	adds	r1, r3, #4
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	9103      	str	r1, [sp, #12]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	bfbb      	ittet	lt
 8015c1e:	425b      	neglt	r3, r3
 8015c20:	f042 0202 	orrlt.w	r2, r2, #2
 8015c24:	9307      	strge	r3, [sp, #28]
 8015c26:	9307      	strlt	r3, [sp, #28]
 8015c28:	bfb8      	it	lt
 8015c2a:	9204      	strlt	r2, [sp, #16]
 8015c2c:	7823      	ldrb	r3, [r4, #0]
 8015c2e:	2b2e      	cmp	r3, #46	; 0x2e
 8015c30:	d10c      	bne.n	8015c4c <_svfiprintf_r+0x130>
 8015c32:	7863      	ldrb	r3, [r4, #1]
 8015c34:	2b2a      	cmp	r3, #42	; 0x2a
 8015c36:	d135      	bne.n	8015ca4 <_svfiprintf_r+0x188>
 8015c38:	9b03      	ldr	r3, [sp, #12]
 8015c3a:	1d1a      	adds	r2, r3, #4
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	9203      	str	r2, [sp, #12]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	bfb8      	it	lt
 8015c44:	f04f 33ff 	movlt.w	r3, #4294967295
 8015c48:	3402      	adds	r4, #2
 8015c4a:	9305      	str	r3, [sp, #20]
 8015c4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015d18 <_svfiprintf_r+0x1fc>
 8015c50:	7821      	ldrb	r1, [r4, #0]
 8015c52:	2203      	movs	r2, #3
 8015c54:	4650      	mov	r0, sl
 8015c56:	f7ea fadb 	bl	8000210 <memchr>
 8015c5a:	b140      	cbz	r0, 8015c6e <_svfiprintf_r+0x152>
 8015c5c:	2340      	movs	r3, #64	; 0x40
 8015c5e:	eba0 000a 	sub.w	r0, r0, sl
 8015c62:	fa03 f000 	lsl.w	r0, r3, r0
 8015c66:	9b04      	ldr	r3, [sp, #16]
 8015c68:	4303      	orrs	r3, r0
 8015c6a:	3401      	adds	r4, #1
 8015c6c:	9304      	str	r3, [sp, #16]
 8015c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c72:	4826      	ldr	r0, [pc, #152]	; (8015d0c <_svfiprintf_r+0x1f0>)
 8015c74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015c78:	2206      	movs	r2, #6
 8015c7a:	f7ea fac9 	bl	8000210 <memchr>
 8015c7e:	2800      	cmp	r0, #0
 8015c80:	d038      	beq.n	8015cf4 <_svfiprintf_r+0x1d8>
 8015c82:	4b23      	ldr	r3, [pc, #140]	; (8015d10 <_svfiprintf_r+0x1f4>)
 8015c84:	bb1b      	cbnz	r3, 8015cce <_svfiprintf_r+0x1b2>
 8015c86:	9b03      	ldr	r3, [sp, #12]
 8015c88:	3307      	adds	r3, #7
 8015c8a:	f023 0307 	bic.w	r3, r3, #7
 8015c8e:	3308      	adds	r3, #8
 8015c90:	9303      	str	r3, [sp, #12]
 8015c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c94:	4433      	add	r3, r6
 8015c96:	9309      	str	r3, [sp, #36]	; 0x24
 8015c98:	e767      	b.n	8015b6a <_svfiprintf_r+0x4e>
 8015c9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8015c9e:	460c      	mov	r4, r1
 8015ca0:	2001      	movs	r0, #1
 8015ca2:	e7a5      	b.n	8015bf0 <_svfiprintf_r+0xd4>
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	3401      	adds	r4, #1
 8015ca8:	9305      	str	r3, [sp, #20]
 8015caa:	4619      	mov	r1, r3
 8015cac:	f04f 0c0a 	mov.w	ip, #10
 8015cb0:	4620      	mov	r0, r4
 8015cb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015cb6:	3a30      	subs	r2, #48	; 0x30
 8015cb8:	2a09      	cmp	r2, #9
 8015cba:	d903      	bls.n	8015cc4 <_svfiprintf_r+0x1a8>
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d0c5      	beq.n	8015c4c <_svfiprintf_r+0x130>
 8015cc0:	9105      	str	r1, [sp, #20]
 8015cc2:	e7c3      	b.n	8015c4c <_svfiprintf_r+0x130>
 8015cc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8015cc8:	4604      	mov	r4, r0
 8015cca:	2301      	movs	r3, #1
 8015ccc:	e7f0      	b.n	8015cb0 <_svfiprintf_r+0x194>
 8015cce:	ab03      	add	r3, sp, #12
 8015cd0:	9300      	str	r3, [sp, #0]
 8015cd2:	462a      	mov	r2, r5
 8015cd4:	4b0f      	ldr	r3, [pc, #60]	; (8015d14 <_svfiprintf_r+0x1f8>)
 8015cd6:	a904      	add	r1, sp, #16
 8015cd8:	4638      	mov	r0, r7
 8015cda:	f7fc f9e5 	bl	80120a8 <_printf_float>
 8015cde:	1c42      	adds	r2, r0, #1
 8015ce0:	4606      	mov	r6, r0
 8015ce2:	d1d6      	bne.n	8015c92 <_svfiprintf_r+0x176>
 8015ce4:	89ab      	ldrh	r3, [r5, #12]
 8015ce6:	065b      	lsls	r3, r3, #25
 8015ce8:	f53f af2c 	bmi.w	8015b44 <_svfiprintf_r+0x28>
 8015cec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015cee:	b01d      	add	sp, #116	; 0x74
 8015cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cf4:	ab03      	add	r3, sp, #12
 8015cf6:	9300      	str	r3, [sp, #0]
 8015cf8:	462a      	mov	r2, r5
 8015cfa:	4b06      	ldr	r3, [pc, #24]	; (8015d14 <_svfiprintf_r+0x1f8>)
 8015cfc:	a904      	add	r1, sp, #16
 8015cfe:	4638      	mov	r0, r7
 8015d00:	f7fc fc76 	bl	80125f0 <_printf_i>
 8015d04:	e7eb      	b.n	8015cde <_svfiprintf_r+0x1c2>
 8015d06:	bf00      	nop
 8015d08:	0802a97c 	.word	0x0802a97c
 8015d0c:	0802a986 	.word	0x0802a986
 8015d10:	080120a9 	.word	0x080120a9
 8015d14:	08015a65 	.word	0x08015a65
 8015d18:	0802a982 	.word	0x0802a982

08015d1c <__sfputc_r>:
 8015d1c:	6893      	ldr	r3, [r2, #8]
 8015d1e:	3b01      	subs	r3, #1
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	b410      	push	{r4}
 8015d24:	6093      	str	r3, [r2, #8]
 8015d26:	da08      	bge.n	8015d3a <__sfputc_r+0x1e>
 8015d28:	6994      	ldr	r4, [r2, #24]
 8015d2a:	42a3      	cmp	r3, r4
 8015d2c:	db01      	blt.n	8015d32 <__sfputc_r+0x16>
 8015d2e:	290a      	cmp	r1, #10
 8015d30:	d103      	bne.n	8015d3a <__sfputc_r+0x1e>
 8015d32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d36:	f000 b975 	b.w	8016024 <__swbuf_r>
 8015d3a:	6813      	ldr	r3, [r2, #0]
 8015d3c:	1c58      	adds	r0, r3, #1
 8015d3e:	6010      	str	r0, [r2, #0]
 8015d40:	7019      	strb	r1, [r3, #0]
 8015d42:	4608      	mov	r0, r1
 8015d44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d48:	4770      	bx	lr

08015d4a <__sfputs_r>:
 8015d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d4c:	4606      	mov	r6, r0
 8015d4e:	460f      	mov	r7, r1
 8015d50:	4614      	mov	r4, r2
 8015d52:	18d5      	adds	r5, r2, r3
 8015d54:	42ac      	cmp	r4, r5
 8015d56:	d101      	bne.n	8015d5c <__sfputs_r+0x12>
 8015d58:	2000      	movs	r0, #0
 8015d5a:	e007      	b.n	8015d6c <__sfputs_r+0x22>
 8015d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d60:	463a      	mov	r2, r7
 8015d62:	4630      	mov	r0, r6
 8015d64:	f7ff ffda 	bl	8015d1c <__sfputc_r>
 8015d68:	1c43      	adds	r3, r0, #1
 8015d6a:	d1f3      	bne.n	8015d54 <__sfputs_r+0xa>
 8015d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015d70 <_vfiprintf_r>:
 8015d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d74:	460d      	mov	r5, r1
 8015d76:	b09d      	sub	sp, #116	; 0x74
 8015d78:	4614      	mov	r4, r2
 8015d7a:	4698      	mov	r8, r3
 8015d7c:	4606      	mov	r6, r0
 8015d7e:	b118      	cbz	r0, 8015d88 <_vfiprintf_r+0x18>
 8015d80:	6983      	ldr	r3, [r0, #24]
 8015d82:	b90b      	cbnz	r3, 8015d88 <_vfiprintf_r+0x18>
 8015d84:	f000 fb3e 	bl	8016404 <__sinit>
 8015d88:	4b89      	ldr	r3, [pc, #548]	; (8015fb0 <_vfiprintf_r+0x240>)
 8015d8a:	429d      	cmp	r5, r3
 8015d8c:	d11b      	bne.n	8015dc6 <_vfiprintf_r+0x56>
 8015d8e:	6875      	ldr	r5, [r6, #4]
 8015d90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015d92:	07d9      	lsls	r1, r3, #31
 8015d94:	d405      	bmi.n	8015da2 <_vfiprintf_r+0x32>
 8015d96:	89ab      	ldrh	r3, [r5, #12]
 8015d98:	059a      	lsls	r2, r3, #22
 8015d9a:	d402      	bmi.n	8015da2 <_vfiprintf_r+0x32>
 8015d9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015d9e:	f000 fbcf 	bl	8016540 <__retarget_lock_acquire_recursive>
 8015da2:	89ab      	ldrh	r3, [r5, #12]
 8015da4:	071b      	lsls	r3, r3, #28
 8015da6:	d501      	bpl.n	8015dac <_vfiprintf_r+0x3c>
 8015da8:	692b      	ldr	r3, [r5, #16]
 8015daa:	b9eb      	cbnz	r3, 8015de8 <_vfiprintf_r+0x78>
 8015dac:	4629      	mov	r1, r5
 8015dae:	4630      	mov	r0, r6
 8015db0:	f000 f998 	bl	80160e4 <__swsetup_r>
 8015db4:	b1c0      	cbz	r0, 8015de8 <_vfiprintf_r+0x78>
 8015db6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015db8:	07dc      	lsls	r4, r3, #31
 8015dba:	d50e      	bpl.n	8015dda <_vfiprintf_r+0x6a>
 8015dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8015dc0:	b01d      	add	sp, #116	; 0x74
 8015dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dc6:	4b7b      	ldr	r3, [pc, #492]	; (8015fb4 <_vfiprintf_r+0x244>)
 8015dc8:	429d      	cmp	r5, r3
 8015dca:	d101      	bne.n	8015dd0 <_vfiprintf_r+0x60>
 8015dcc:	68b5      	ldr	r5, [r6, #8]
 8015dce:	e7df      	b.n	8015d90 <_vfiprintf_r+0x20>
 8015dd0:	4b79      	ldr	r3, [pc, #484]	; (8015fb8 <_vfiprintf_r+0x248>)
 8015dd2:	429d      	cmp	r5, r3
 8015dd4:	bf08      	it	eq
 8015dd6:	68f5      	ldreq	r5, [r6, #12]
 8015dd8:	e7da      	b.n	8015d90 <_vfiprintf_r+0x20>
 8015dda:	89ab      	ldrh	r3, [r5, #12]
 8015ddc:	0598      	lsls	r0, r3, #22
 8015dde:	d4ed      	bmi.n	8015dbc <_vfiprintf_r+0x4c>
 8015de0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015de2:	f000 fbae 	bl	8016542 <__retarget_lock_release_recursive>
 8015de6:	e7e9      	b.n	8015dbc <_vfiprintf_r+0x4c>
 8015de8:	2300      	movs	r3, #0
 8015dea:	9309      	str	r3, [sp, #36]	; 0x24
 8015dec:	2320      	movs	r3, #32
 8015dee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015df2:	f8cd 800c 	str.w	r8, [sp, #12]
 8015df6:	2330      	movs	r3, #48	; 0x30
 8015df8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015fbc <_vfiprintf_r+0x24c>
 8015dfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015e00:	f04f 0901 	mov.w	r9, #1
 8015e04:	4623      	mov	r3, r4
 8015e06:	469a      	mov	sl, r3
 8015e08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e0c:	b10a      	cbz	r2, 8015e12 <_vfiprintf_r+0xa2>
 8015e0e:	2a25      	cmp	r2, #37	; 0x25
 8015e10:	d1f9      	bne.n	8015e06 <_vfiprintf_r+0x96>
 8015e12:	ebba 0b04 	subs.w	fp, sl, r4
 8015e16:	d00b      	beq.n	8015e30 <_vfiprintf_r+0xc0>
 8015e18:	465b      	mov	r3, fp
 8015e1a:	4622      	mov	r2, r4
 8015e1c:	4629      	mov	r1, r5
 8015e1e:	4630      	mov	r0, r6
 8015e20:	f7ff ff93 	bl	8015d4a <__sfputs_r>
 8015e24:	3001      	adds	r0, #1
 8015e26:	f000 80aa 	beq.w	8015f7e <_vfiprintf_r+0x20e>
 8015e2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e2c:	445a      	add	r2, fp
 8015e2e:	9209      	str	r2, [sp, #36]	; 0x24
 8015e30:	f89a 3000 	ldrb.w	r3, [sl]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	f000 80a2 	beq.w	8015f7e <_vfiprintf_r+0x20e>
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8015e40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015e44:	f10a 0a01 	add.w	sl, sl, #1
 8015e48:	9304      	str	r3, [sp, #16]
 8015e4a:	9307      	str	r3, [sp, #28]
 8015e4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015e50:	931a      	str	r3, [sp, #104]	; 0x68
 8015e52:	4654      	mov	r4, sl
 8015e54:	2205      	movs	r2, #5
 8015e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e5a:	4858      	ldr	r0, [pc, #352]	; (8015fbc <_vfiprintf_r+0x24c>)
 8015e5c:	f7ea f9d8 	bl	8000210 <memchr>
 8015e60:	9a04      	ldr	r2, [sp, #16]
 8015e62:	b9d8      	cbnz	r0, 8015e9c <_vfiprintf_r+0x12c>
 8015e64:	06d1      	lsls	r1, r2, #27
 8015e66:	bf44      	itt	mi
 8015e68:	2320      	movmi	r3, #32
 8015e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e6e:	0713      	lsls	r3, r2, #28
 8015e70:	bf44      	itt	mi
 8015e72:	232b      	movmi	r3, #43	; 0x2b
 8015e74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e78:	f89a 3000 	ldrb.w	r3, [sl]
 8015e7c:	2b2a      	cmp	r3, #42	; 0x2a
 8015e7e:	d015      	beq.n	8015eac <_vfiprintf_r+0x13c>
 8015e80:	9a07      	ldr	r2, [sp, #28]
 8015e82:	4654      	mov	r4, sl
 8015e84:	2000      	movs	r0, #0
 8015e86:	f04f 0c0a 	mov.w	ip, #10
 8015e8a:	4621      	mov	r1, r4
 8015e8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015e90:	3b30      	subs	r3, #48	; 0x30
 8015e92:	2b09      	cmp	r3, #9
 8015e94:	d94e      	bls.n	8015f34 <_vfiprintf_r+0x1c4>
 8015e96:	b1b0      	cbz	r0, 8015ec6 <_vfiprintf_r+0x156>
 8015e98:	9207      	str	r2, [sp, #28]
 8015e9a:	e014      	b.n	8015ec6 <_vfiprintf_r+0x156>
 8015e9c:	eba0 0308 	sub.w	r3, r0, r8
 8015ea0:	fa09 f303 	lsl.w	r3, r9, r3
 8015ea4:	4313      	orrs	r3, r2
 8015ea6:	9304      	str	r3, [sp, #16]
 8015ea8:	46a2      	mov	sl, r4
 8015eaa:	e7d2      	b.n	8015e52 <_vfiprintf_r+0xe2>
 8015eac:	9b03      	ldr	r3, [sp, #12]
 8015eae:	1d19      	adds	r1, r3, #4
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	9103      	str	r1, [sp, #12]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	bfbb      	ittet	lt
 8015eb8:	425b      	neglt	r3, r3
 8015eba:	f042 0202 	orrlt.w	r2, r2, #2
 8015ebe:	9307      	strge	r3, [sp, #28]
 8015ec0:	9307      	strlt	r3, [sp, #28]
 8015ec2:	bfb8      	it	lt
 8015ec4:	9204      	strlt	r2, [sp, #16]
 8015ec6:	7823      	ldrb	r3, [r4, #0]
 8015ec8:	2b2e      	cmp	r3, #46	; 0x2e
 8015eca:	d10c      	bne.n	8015ee6 <_vfiprintf_r+0x176>
 8015ecc:	7863      	ldrb	r3, [r4, #1]
 8015ece:	2b2a      	cmp	r3, #42	; 0x2a
 8015ed0:	d135      	bne.n	8015f3e <_vfiprintf_r+0x1ce>
 8015ed2:	9b03      	ldr	r3, [sp, #12]
 8015ed4:	1d1a      	adds	r2, r3, #4
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	9203      	str	r2, [sp, #12]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	bfb8      	it	lt
 8015ede:	f04f 33ff 	movlt.w	r3, #4294967295
 8015ee2:	3402      	adds	r4, #2
 8015ee4:	9305      	str	r3, [sp, #20]
 8015ee6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015fcc <_vfiprintf_r+0x25c>
 8015eea:	7821      	ldrb	r1, [r4, #0]
 8015eec:	2203      	movs	r2, #3
 8015eee:	4650      	mov	r0, sl
 8015ef0:	f7ea f98e 	bl	8000210 <memchr>
 8015ef4:	b140      	cbz	r0, 8015f08 <_vfiprintf_r+0x198>
 8015ef6:	2340      	movs	r3, #64	; 0x40
 8015ef8:	eba0 000a 	sub.w	r0, r0, sl
 8015efc:	fa03 f000 	lsl.w	r0, r3, r0
 8015f00:	9b04      	ldr	r3, [sp, #16]
 8015f02:	4303      	orrs	r3, r0
 8015f04:	3401      	adds	r4, #1
 8015f06:	9304      	str	r3, [sp, #16]
 8015f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f0c:	482c      	ldr	r0, [pc, #176]	; (8015fc0 <_vfiprintf_r+0x250>)
 8015f0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015f12:	2206      	movs	r2, #6
 8015f14:	f7ea f97c 	bl	8000210 <memchr>
 8015f18:	2800      	cmp	r0, #0
 8015f1a:	d03f      	beq.n	8015f9c <_vfiprintf_r+0x22c>
 8015f1c:	4b29      	ldr	r3, [pc, #164]	; (8015fc4 <_vfiprintf_r+0x254>)
 8015f1e:	bb1b      	cbnz	r3, 8015f68 <_vfiprintf_r+0x1f8>
 8015f20:	9b03      	ldr	r3, [sp, #12]
 8015f22:	3307      	adds	r3, #7
 8015f24:	f023 0307 	bic.w	r3, r3, #7
 8015f28:	3308      	adds	r3, #8
 8015f2a:	9303      	str	r3, [sp, #12]
 8015f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f2e:	443b      	add	r3, r7
 8015f30:	9309      	str	r3, [sp, #36]	; 0x24
 8015f32:	e767      	b.n	8015e04 <_vfiprintf_r+0x94>
 8015f34:	fb0c 3202 	mla	r2, ip, r2, r3
 8015f38:	460c      	mov	r4, r1
 8015f3a:	2001      	movs	r0, #1
 8015f3c:	e7a5      	b.n	8015e8a <_vfiprintf_r+0x11a>
 8015f3e:	2300      	movs	r3, #0
 8015f40:	3401      	adds	r4, #1
 8015f42:	9305      	str	r3, [sp, #20]
 8015f44:	4619      	mov	r1, r3
 8015f46:	f04f 0c0a 	mov.w	ip, #10
 8015f4a:	4620      	mov	r0, r4
 8015f4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015f50:	3a30      	subs	r2, #48	; 0x30
 8015f52:	2a09      	cmp	r2, #9
 8015f54:	d903      	bls.n	8015f5e <_vfiprintf_r+0x1ee>
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d0c5      	beq.n	8015ee6 <_vfiprintf_r+0x176>
 8015f5a:	9105      	str	r1, [sp, #20]
 8015f5c:	e7c3      	b.n	8015ee6 <_vfiprintf_r+0x176>
 8015f5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015f62:	4604      	mov	r4, r0
 8015f64:	2301      	movs	r3, #1
 8015f66:	e7f0      	b.n	8015f4a <_vfiprintf_r+0x1da>
 8015f68:	ab03      	add	r3, sp, #12
 8015f6a:	9300      	str	r3, [sp, #0]
 8015f6c:	462a      	mov	r2, r5
 8015f6e:	4b16      	ldr	r3, [pc, #88]	; (8015fc8 <_vfiprintf_r+0x258>)
 8015f70:	a904      	add	r1, sp, #16
 8015f72:	4630      	mov	r0, r6
 8015f74:	f7fc f898 	bl	80120a8 <_printf_float>
 8015f78:	4607      	mov	r7, r0
 8015f7a:	1c78      	adds	r0, r7, #1
 8015f7c:	d1d6      	bne.n	8015f2c <_vfiprintf_r+0x1bc>
 8015f7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015f80:	07d9      	lsls	r1, r3, #31
 8015f82:	d405      	bmi.n	8015f90 <_vfiprintf_r+0x220>
 8015f84:	89ab      	ldrh	r3, [r5, #12]
 8015f86:	059a      	lsls	r2, r3, #22
 8015f88:	d402      	bmi.n	8015f90 <_vfiprintf_r+0x220>
 8015f8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015f8c:	f000 fad9 	bl	8016542 <__retarget_lock_release_recursive>
 8015f90:	89ab      	ldrh	r3, [r5, #12]
 8015f92:	065b      	lsls	r3, r3, #25
 8015f94:	f53f af12 	bmi.w	8015dbc <_vfiprintf_r+0x4c>
 8015f98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015f9a:	e711      	b.n	8015dc0 <_vfiprintf_r+0x50>
 8015f9c:	ab03      	add	r3, sp, #12
 8015f9e:	9300      	str	r3, [sp, #0]
 8015fa0:	462a      	mov	r2, r5
 8015fa2:	4b09      	ldr	r3, [pc, #36]	; (8015fc8 <_vfiprintf_r+0x258>)
 8015fa4:	a904      	add	r1, sp, #16
 8015fa6:	4630      	mov	r0, r6
 8015fa8:	f7fc fb22 	bl	80125f0 <_printf_i>
 8015fac:	e7e4      	b.n	8015f78 <_vfiprintf_r+0x208>
 8015fae:	bf00      	nop
 8015fb0:	0802a9b0 	.word	0x0802a9b0
 8015fb4:	0802a9d0 	.word	0x0802a9d0
 8015fb8:	0802a990 	.word	0x0802a990
 8015fbc:	0802a97c 	.word	0x0802a97c
 8015fc0:	0802a986 	.word	0x0802a986
 8015fc4:	080120a9 	.word	0x080120a9
 8015fc8:	08015d4b 	.word	0x08015d4b
 8015fcc:	0802a982 	.word	0x0802a982

08015fd0 <nan>:
 8015fd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015fd8 <nan+0x8>
 8015fd4:	4770      	bx	lr
 8015fd6:	bf00      	nop
 8015fd8:	00000000 	.word	0x00000000
 8015fdc:	7ff80000 	.word	0x7ff80000

08015fe0 <_sbrk_r>:
 8015fe0:	b538      	push	{r3, r4, r5, lr}
 8015fe2:	4d06      	ldr	r5, [pc, #24]	; (8015ffc <_sbrk_r+0x1c>)
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	4604      	mov	r4, r0
 8015fe8:	4608      	mov	r0, r1
 8015fea:	602b      	str	r3, [r5, #0]
 8015fec:	f7f4 fb42 	bl	800a674 <_sbrk>
 8015ff0:	1c43      	adds	r3, r0, #1
 8015ff2:	d102      	bne.n	8015ffa <_sbrk_r+0x1a>
 8015ff4:	682b      	ldr	r3, [r5, #0]
 8015ff6:	b103      	cbz	r3, 8015ffa <_sbrk_r+0x1a>
 8015ff8:	6023      	str	r3, [r4, #0]
 8015ffa:	bd38      	pop	{r3, r4, r5, pc}
 8015ffc:	20000c8c 	.word	0x20000c8c

08016000 <strncmp>:
 8016000:	b510      	push	{r4, lr}
 8016002:	b16a      	cbz	r2, 8016020 <strncmp+0x20>
 8016004:	3901      	subs	r1, #1
 8016006:	1884      	adds	r4, r0, r2
 8016008:	f810 3b01 	ldrb.w	r3, [r0], #1
 801600c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016010:	4293      	cmp	r3, r2
 8016012:	d103      	bne.n	801601c <strncmp+0x1c>
 8016014:	42a0      	cmp	r0, r4
 8016016:	d001      	beq.n	801601c <strncmp+0x1c>
 8016018:	2b00      	cmp	r3, #0
 801601a:	d1f5      	bne.n	8016008 <strncmp+0x8>
 801601c:	1a98      	subs	r0, r3, r2
 801601e:	bd10      	pop	{r4, pc}
 8016020:	4610      	mov	r0, r2
 8016022:	e7fc      	b.n	801601e <strncmp+0x1e>

08016024 <__swbuf_r>:
 8016024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016026:	460e      	mov	r6, r1
 8016028:	4614      	mov	r4, r2
 801602a:	4605      	mov	r5, r0
 801602c:	b118      	cbz	r0, 8016036 <__swbuf_r+0x12>
 801602e:	6983      	ldr	r3, [r0, #24]
 8016030:	b90b      	cbnz	r3, 8016036 <__swbuf_r+0x12>
 8016032:	f000 f9e7 	bl	8016404 <__sinit>
 8016036:	4b21      	ldr	r3, [pc, #132]	; (80160bc <__swbuf_r+0x98>)
 8016038:	429c      	cmp	r4, r3
 801603a:	d12b      	bne.n	8016094 <__swbuf_r+0x70>
 801603c:	686c      	ldr	r4, [r5, #4]
 801603e:	69a3      	ldr	r3, [r4, #24]
 8016040:	60a3      	str	r3, [r4, #8]
 8016042:	89a3      	ldrh	r3, [r4, #12]
 8016044:	071a      	lsls	r2, r3, #28
 8016046:	d52f      	bpl.n	80160a8 <__swbuf_r+0x84>
 8016048:	6923      	ldr	r3, [r4, #16]
 801604a:	b36b      	cbz	r3, 80160a8 <__swbuf_r+0x84>
 801604c:	6923      	ldr	r3, [r4, #16]
 801604e:	6820      	ldr	r0, [r4, #0]
 8016050:	1ac0      	subs	r0, r0, r3
 8016052:	6963      	ldr	r3, [r4, #20]
 8016054:	b2f6      	uxtb	r6, r6
 8016056:	4283      	cmp	r3, r0
 8016058:	4637      	mov	r7, r6
 801605a:	dc04      	bgt.n	8016066 <__swbuf_r+0x42>
 801605c:	4621      	mov	r1, r4
 801605e:	4628      	mov	r0, r5
 8016060:	f000 f93c 	bl	80162dc <_fflush_r>
 8016064:	bb30      	cbnz	r0, 80160b4 <__swbuf_r+0x90>
 8016066:	68a3      	ldr	r3, [r4, #8]
 8016068:	3b01      	subs	r3, #1
 801606a:	60a3      	str	r3, [r4, #8]
 801606c:	6823      	ldr	r3, [r4, #0]
 801606e:	1c5a      	adds	r2, r3, #1
 8016070:	6022      	str	r2, [r4, #0]
 8016072:	701e      	strb	r6, [r3, #0]
 8016074:	6963      	ldr	r3, [r4, #20]
 8016076:	3001      	adds	r0, #1
 8016078:	4283      	cmp	r3, r0
 801607a:	d004      	beq.n	8016086 <__swbuf_r+0x62>
 801607c:	89a3      	ldrh	r3, [r4, #12]
 801607e:	07db      	lsls	r3, r3, #31
 8016080:	d506      	bpl.n	8016090 <__swbuf_r+0x6c>
 8016082:	2e0a      	cmp	r6, #10
 8016084:	d104      	bne.n	8016090 <__swbuf_r+0x6c>
 8016086:	4621      	mov	r1, r4
 8016088:	4628      	mov	r0, r5
 801608a:	f000 f927 	bl	80162dc <_fflush_r>
 801608e:	b988      	cbnz	r0, 80160b4 <__swbuf_r+0x90>
 8016090:	4638      	mov	r0, r7
 8016092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016094:	4b0a      	ldr	r3, [pc, #40]	; (80160c0 <__swbuf_r+0x9c>)
 8016096:	429c      	cmp	r4, r3
 8016098:	d101      	bne.n	801609e <__swbuf_r+0x7a>
 801609a:	68ac      	ldr	r4, [r5, #8]
 801609c:	e7cf      	b.n	801603e <__swbuf_r+0x1a>
 801609e:	4b09      	ldr	r3, [pc, #36]	; (80160c4 <__swbuf_r+0xa0>)
 80160a0:	429c      	cmp	r4, r3
 80160a2:	bf08      	it	eq
 80160a4:	68ec      	ldreq	r4, [r5, #12]
 80160a6:	e7ca      	b.n	801603e <__swbuf_r+0x1a>
 80160a8:	4621      	mov	r1, r4
 80160aa:	4628      	mov	r0, r5
 80160ac:	f000 f81a 	bl	80160e4 <__swsetup_r>
 80160b0:	2800      	cmp	r0, #0
 80160b2:	d0cb      	beq.n	801604c <__swbuf_r+0x28>
 80160b4:	f04f 37ff 	mov.w	r7, #4294967295
 80160b8:	e7ea      	b.n	8016090 <__swbuf_r+0x6c>
 80160ba:	bf00      	nop
 80160bc:	0802a9b0 	.word	0x0802a9b0
 80160c0:	0802a9d0 	.word	0x0802a9d0
 80160c4:	0802a990 	.word	0x0802a990

080160c8 <__ascii_wctomb>:
 80160c8:	b149      	cbz	r1, 80160de <__ascii_wctomb+0x16>
 80160ca:	2aff      	cmp	r2, #255	; 0xff
 80160cc:	bf85      	ittet	hi
 80160ce:	238a      	movhi	r3, #138	; 0x8a
 80160d0:	6003      	strhi	r3, [r0, #0]
 80160d2:	700a      	strbls	r2, [r1, #0]
 80160d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80160d8:	bf98      	it	ls
 80160da:	2001      	movls	r0, #1
 80160dc:	4770      	bx	lr
 80160de:	4608      	mov	r0, r1
 80160e0:	4770      	bx	lr
	...

080160e4 <__swsetup_r>:
 80160e4:	4b32      	ldr	r3, [pc, #200]	; (80161b0 <__swsetup_r+0xcc>)
 80160e6:	b570      	push	{r4, r5, r6, lr}
 80160e8:	681d      	ldr	r5, [r3, #0]
 80160ea:	4606      	mov	r6, r0
 80160ec:	460c      	mov	r4, r1
 80160ee:	b125      	cbz	r5, 80160fa <__swsetup_r+0x16>
 80160f0:	69ab      	ldr	r3, [r5, #24]
 80160f2:	b913      	cbnz	r3, 80160fa <__swsetup_r+0x16>
 80160f4:	4628      	mov	r0, r5
 80160f6:	f000 f985 	bl	8016404 <__sinit>
 80160fa:	4b2e      	ldr	r3, [pc, #184]	; (80161b4 <__swsetup_r+0xd0>)
 80160fc:	429c      	cmp	r4, r3
 80160fe:	d10f      	bne.n	8016120 <__swsetup_r+0x3c>
 8016100:	686c      	ldr	r4, [r5, #4]
 8016102:	89a3      	ldrh	r3, [r4, #12]
 8016104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016108:	0719      	lsls	r1, r3, #28
 801610a:	d42c      	bmi.n	8016166 <__swsetup_r+0x82>
 801610c:	06dd      	lsls	r5, r3, #27
 801610e:	d411      	bmi.n	8016134 <__swsetup_r+0x50>
 8016110:	2309      	movs	r3, #9
 8016112:	6033      	str	r3, [r6, #0]
 8016114:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016118:	81a3      	strh	r3, [r4, #12]
 801611a:	f04f 30ff 	mov.w	r0, #4294967295
 801611e:	e03e      	b.n	801619e <__swsetup_r+0xba>
 8016120:	4b25      	ldr	r3, [pc, #148]	; (80161b8 <__swsetup_r+0xd4>)
 8016122:	429c      	cmp	r4, r3
 8016124:	d101      	bne.n	801612a <__swsetup_r+0x46>
 8016126:	68ac      	ldr	r4, [r5, #8]
 8016128:	e7eb      	b.n	8016102 <__swsetup_r+0x1e>
 801612a:	4b24      	ldr	r3, [pc, #144]	; (80161bc <__swsetup_r+0xd8>)
 801612c:	429c      	cmp	r4, r3
 801612e:	bf08      	it	eq
 8016130:	68ec      	ldreq	r4, [r5, #12]
 8016132:	e7e6      	b.n	8016102 <__swsetup_r+0x1e>
 8016134:	0758      	lsls	r0, r3, #29
 8016136:	d512      	bpl.n	801615e <__swsetup_r+0x7a>
 8016138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801613a:	b141      	cbz	r1, 801614e <__swsetup_r+0x6a>
 801613c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016140:	4299      	cmp	r1, r3
 8016142:	d002      	beq.n	801614a <__swsetup_r+0x66>
 8016144:	4630      	mov	r0, r6
 8016146:	f7ff fbe3 	bl	8015910 <_free_r>
 801614a:	2300      	movs	r3, #0
 801614c:	6363      	str	r3, [r4, #52]	; 0x34
 801614e:	89a3      	ldrh	r3, [r4, #12]
 8016150:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016154:	81a3      	strh	r3, [r4, #12]
 8016156:	2300      	movs	r3, #0
 8016158:	6063      	str	r3, [r4, #4]
 801615a:	6923      	ldr	r3, [r4, #16]
 801615c:	6023      	str	r3, [r4, #0]
 801615e:	89a3      	ldrh	r3, [r4, #12]
 8016160:	f043 0308 	orr.w	r3, r3, #8
 8016164:	81a3      	strh	r3, [r4, #12]
 8016166:	6923      	ldr	r3, [r4, #16]
 8016168:	b94b      	cbnz	r3, 801617e <__swsetup_r+0x9a>
 801616a:	89a3      	ldrh	r3, [r4, #12]
 801616c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016174:	d003      	beq.n	801617e <__swsetup_r+0x9a>
 8016176:	4621      	mov	r1, r4
 8016178:	4630      	mov	r0, r6
 801617a:	f000 fa07 	bl	801658c <__smakebuf_r>
 801617e:	89a0      	ldrh	r0, [r4, #12]
 8016180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016184:	f010 0301 	ands.w	r3, r0, #1
 8016188:	d00a      	beq.n	80161a0 <__swsetup_r+0xbc>
 801618a:	2300      	movs	r3, #0
 801618c:	60a3      	str	r3, [r4, #8]
 801618e:	6963      	ldr	r3, [r4, #20]
 8016190:	425b      	negs	r3, r3
 8016192:	61a3      	str	r3, [r4, #24]
 8016194:	6923      	ldr	r3, [r4, #16]
 8016196:	b943      	cbnz	r3, 80161aa <__swsetup_r+0xc6>
 8016198:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801619c:	d1ba      	bne.n	8016114 <__swsetup_r+0x30>
 801619e:	bd70      	pop	{r4, r5, r6, pc}
 80161a0:	0781      	lsls	r1, r0, #30
 80161a2:	bf58      	it	pl
 80161a4:	6963      	ldrpl	r3, [r4, #20]
 80161a6:	60a3      	str	r3, [r4, #8]
 80161a8:	e7f4      	b.n	8016194 <__swsetup_r+0xb0>
 80161aa:	2000      	movs	r0, #0
 80161ac:	e7f7      	b.n	801619e <__swsetup_r+0xba>
 80161ae:	bf00      	nop
 80161b0:	20000044 	.word	0x20000044
 80161b4:	0802a9b0 	.word	0x0802a9b0
 80161b8:	0802a9d0 	.word	0x0802a9d0
 80161bc:	0802a990 	.word	0x0802a990

080161c0 <abort>:
 80161c0:	b508      	push	{r3, lr}
 80161c2:	2006      	movs	r0, #6
 80161c4:	f000 fa96 	bl	80166f4 <raise>
 80161c8:	2001      	movs	r0, #1
 80161ca:	f7f4 f9db 	bl	800a584 <_exit>
	...

080161d0 <__sflush_r>:
 80161d0:	898a      	ldrh	r2, [r1, #12]
 80161d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161d6:	4605      	mov	r5, r0
 80161d8:	0710      	lsls	r0, r2, #28
 80161da:	460c      	mov	r4, r1
 80161dc:	d458      	bmi.n	8016290 <__sflush_r+0xc0>
 80161de:	684b      	ldr	r3, [r1, #4]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	dc05      	bgt.n	80161f0 <__sflush_r+0x20>
 80161e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	dc02      	bgt.n	80161f0 <__sflush_r+0x20>
 80161ea:	2000      	movs	r0, #0
 80161ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80161f2:	2e00      	cmp	r6, #0
 80161f4:	d0f9      	beq.n	80161ea <__sflush_r+0x1a>
 80161f6:	2300      	movs	r3, #0
 80161f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80161fc:	682f      	ldr	r7, [r5, #0]
 80161fe:	602b      	str	r3, [r5, #0]
 8016200:	d032      	beq.n	8016268 <__sflush_r+0x98>
 8016202:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016204:	89a3      	ldrh	r3, [r4, #12]
 8016206:	075a      	lsls	r2, r3, #29
 8016208:	d505      	bpl.n	8016216 <__sflush_r+0x46>
 801620a:	6863      	ldr	r3, [r4, #4]
 801620c:	1ac0      	subs	r0, r0, r3
 801620e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016210:	b10b      	cbz	r3, 8016216 <__sflush_r+0x46>
 8016212:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016214:	1ac0      	subs	r0, r0, r3
 8016216:	2300      	movs	r3, #0
 8016218:	4602      	mov	r2, r0
 801621a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801621c:	6a21      	ldr	r1, [r4, #32]
 801621e:	4628      	mov	r0, r5
 8016220:	47b0      	blx	r6
 8016222:	1c43      	adds	r3, r0, #1
 8016224:	89a3      	ldrh	r3, [r4, #12]
 8016226:	d106      	bne.n	8016236 <__sflush_r+0x66>
 8016228:	6829      	ldr	r1, [r5, #0]
 801622a:	291d      	cmp	r1, #29
 801622c:	d82c      	bhi.n	8016288 <__sflush_r+0xb8>
 801622e:	4a2a      	ldr	r2, [pc, #168]	; (80162d8 <__sflush_r+0x108>)
 8016230:	40ca      	lsrs	r2, r1
 8016232:	07d6      	lsls	r6, r2, #31
 8016234:	d528      	bpl.n	8016288 <__sflush_r+0xb8>
 8016236:	2200      	movs	r2, #0
 8016238:	6062      	str	r2, [r4, #4]
 801623a:	04d9      	lsls	r1, r3, #19
 801623c:	6922      	ldr	r2, [r4, #16]
 801623e:	6022      	str	r2, [r4, #0]
 8016240:	d504      	bpl.n	801624c <__sflush_r+0x7c>
 8016242:	1c42      	adds	r2, r0, #1
 8016244:	d101      	bne.n	801624a <__sflush_r+0x7a>
 8016246:	682b      	ldr	r3, [r5, #0]
 8016248:	b903      	cbnz	r3, 801624c <__sflush_r+0x7c>
 801624a:	6560      	str	r0, [r4, #84]	; 0x54
 801624c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801624e:	602f      	str	r7, [r5, #0]
 8016250:	2900      	cmp	r1, #0
 8016252:	d0ca      	beq.n	80161ea <__sflush_r+0x1a>
 8016254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016258:	4299      	cmp	r1, r3
 801625a:	d002      	beq.n	8016262 <__sflush_r+0x92>
 801625c:	4628      	mov	r0, r5
 801625e:	f7ff fb57 	bl	8015910 <_free_r>
 8016262:	2000      	movs	r0, #0
 8016264:	6360      	str	r0, [r4, #52]	; 0x34
 8016266:	e7c1      	b.n	80161ec <__sflush_r+0x1c>
 8016268:	6a21      	ldr	r1, [r4, #32]
 801626a:	2301      	movs	r3, #1
 801626c:	4628      	mov	r0, r5
 801626e:	47b0      	blx	r6
 8016270:	1c41      	adds	r1, r0, #1
 8016272:	d1c7      	bne.n	8016204 <__sflush_r+0x34>
 8016274:	682b      	ldr	r3, [r5, #0]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d0c4      	beq.n	8016204 <__sflush_r+0x34>
 801627a:	2b1d      	cmp	r3, #29
 801627c:	d001      	beq.n	8016282 <__sflush_r+0xb2>
 801627e:	2b16      	cmp	r3, #22
 8016280:	d101      	bne.n	8016286 <__sflush_r+0xb6>
 8016282:	602f      	str	r7, [r5, #0]
 8016284:	e7b1      	b.n	80161ea <__sflush_r+0x1a>
 8016286:	89a3      	ldrh	r3, [r4, #12]
 8016288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801628c:	81a3      	strh	r3, [r4, #12]
 801628e:	e7ad      	b.n	80161ec <__sflush_r+0x1c>
 8016290:	690f      	ldr	r7, [r1, #16]
 8016292:	2f00      	cmp	r7, #0
 8016294:	d0a9      	beq.n	80161ea <__sflush_r+0x1a>
 8016296:	0793      	lsls	r3, r2, #30
 8016298:	680e      	ldr	r6, [r1, #0]
 801629a:	bf08      	it	eq
 801629c:	694b      	ldreq	r3, [r1, #20]
 801629e:	600f      	str	r7, [r1, #0]
 80162a0:	bf18      	it	ne
 80162a2:	2300      	movne	r3, #0
 80162a4:	eba6 0807 	sub.w	r8, r6, r7
 80162a8:	608b      	str	r3, [r1, #8]
 80162aa:	f1b8 0f00 	cmp.w	r8, #0
 80162ae:	dd9c      	ble.n	80161ea <__sflush_r+0x1a>
 80162b0:	6a21      	ldr	r1, [r4, #32]
 80162b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80162b4:	4643      	mov	r3, r8
 80162b6:	463a      	mov	r2, r7
 80162b8:	4628      	mov	r0, r5
 80162ba:	47b0      	blx	r6
 80162bc:	2800      	cmp	r0, #0
 80162be:	dc06      	bgt.n	80162ce <__sflush_r+0xfe>
 80162c0:	89a3      	ldrh	r3, [r4, #12]
 80162c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80162c6:	81a3      	strh	r3, [r4, #12]
 80162c8:	f04f 30ff 	mov.w	r0, #4294967295
 80162cc:	e78e      	b.n	80161ec <__sflush_r+0x1c>
 80162ce:	4407      	add	r7, r0
 80162d0:	eba8 0800 	sub.w	r8, r8, r0
 80162d4:	e7e9      	b.n	80162aa <__sflush_r+0xda>
 80162d6:	bf00      	nop
 80162d8:	20400001 	.word	0x20400001

080162dc <_fflush_r>:
 80162dc:	b538      	push	{r3, r4, r5, lr}
 80162de:	690b      	ldr	r3, [r1, #16]
 80162e0:	4605      	mov	r5, r0
 80162e2:	460c      	mov	r4, r1
 80162e4:	b913      	cbnz	r3, 80162ec <_fflush_r+0x10>
 80162e6:	2500      	movs	r5, #0
 80162e8:	4628      	mov	r0, r5
 80162ea:	bd38      	pop	{r3, r4, r5, pc}
 80162ec:	b118      	cbz	r0, 80162f6 <_fflush_r+0x1a>
 80162ee:	6983      	ldr	r3, [r0, #24]
 80162f0:	b90b      	cbnz	r3, 80162f6 <_fflush_r+0x1a>
 80162f2:	f000 f887 	bl	8016404 <__sinit>
 80162f6:	4b14      	ldr	r3, [pc, #80]	; (8016348 <_fflush_r+0x6c>)
 80162f8:	429c      	cmp	r4, r3
 80162fa:	d11b      	bne.n	8016334 <_fflush_r+0x58>
 80162fc:	686c      	ldr	r4, [r5, #4]
 80162fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016302:	2b00      	cmp	r3, #0
 8016304:	d0ef      	beq.n	80162e6 <_fflush_r+0xa>
 8016306:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016308:	07d0      	lsls	r0, r2, #31
 801630a:	d404      	bmi.n	8016316 <_fflush_r+0x3a>
 801630c:	0599      	lsls	r1, r3, #22
 801630e:	d402      	bmi.n	8016316 <_fflush_r+0x3a>
 8016310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016312:	f000 f915 	bl	8016540 <__retarget_lock_acquire_recursive>
 8016316:	4628      	mov	r0, r5
 8016318:	4621      	mov	r1, r4
 801631a:	f7ff ff59 	bl	80161d0 <__sflush_r>
 801631e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016320:	07da      	lsls	r2, r3, #31
 8016322:	4605      	mov	r5, r0
 8016324:	d4e0      	bmi.n	80162e8 <_fflush_r+0xc>
 8016326:	89a3      	ldrh	r3, [r4, #12]
 8016328:	059b      	lsls	r3, r3, #22
 801632a:	d4dd      	bmi.n	80162e8 <_fflush_r+0xc>
 801632c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801632e:	f000 f908 	bl	8016542 <__retarget_lock_release_recursive>
 8016332:	e7d9      	b.n	80162e8 <_fflush_r+0xc>
 8016334:	4b05      	ldr	r3, [pc, #20]	; (801634c <_fflush_r+0x70>)
 8016336:	429c      	cmp	r4, r3
 8016338:	d101      	bne.n	801633e <_fflush_r+0x62>
 801633a:	68ac      	ldr	r4, [r5, #8]
 801633c:	e7df      	b.n	80162fe <_fflush_r+0x22>
 801633e:	4b04      	ldr	r3, [pc, #16]	; (8016350 <_fflush_r+0x74>)
 8016340:	429c      	cmp	r4, r3
 8016342:	bf08      	it	eq
 8016344:	68ec      	ldreq	r4, [r5, #12]
 8016346:	e7da      	b.n	80162fe <_fflush_r+0x22>
 8016348:	0802a9b0 	.word	0x0802a9b0
 801634c:	0802a9d0 	.word	0x0802a9d0
 8016350:	0802a990 	.word	0x0802a990

08016354 <std>:
 8016354:	2300      	movs	r3, #0
 8016356:	b510      	push	{r4, lr}
 8016358:	4604      	mov	r4, r0
 801635a:	e9c0 3300 	strd	r3, r3, [r0]
 801635e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016362:	6083      	str	r3, [r0, #8]
 8016364:	8181      	strh	r1, [r0, #12]
 8016366:	6643      	str	r3, [r0, #100]	; 0x64
 8016368:	81c2      	strh	r2, [r0, #14]
 801636a:	6183      	str	r3, [r0, #24]
 801636c:	4619      	mov	r1, r3
 801636e:	2208      	movs	r2, #8
 8016370:	305c      	adds	r0, #92	; 0x5c
 8016372:	f7fb fdf1 	bl	8011f58 <memset>
 8016376:	4b05      	ldr	r3, [pc, #20]	; (801638c <std+0x38>)
 8016378:	6263      	str	r3, [r4, #36]	; 0x24
 801637a:	4b05      	ldr	r3, [pc, #20]	; (8016390 <std+0x3c>)
 801637c:	62a3      	str	r3, [r4, #40]	; 0x28
 801637e:	4b05      	ldr	r3, [pc, #20]	; (8016394 <std+0x40>)
 8016380:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016382:	4b05      	ldr	r3, [pc, #20]	; (8016398 <std+0x44>)
 8016384:	6224      	str	r4, [r4, #32]
 8016386:	6323      	str	r3, [r4, #48]	; 0x30
 8016388:	bd10      	pop	{r4, pc}
 801638a:	bf00      	nop
 801638c:	0801672d 	.word	0x0801672d
 8016390:	0801674f 	.word	0x0801674f
 8016394:	08016787 	.word	0x08016787
 8016398:	080167ab 	.word	0x080167ab

0801639c <_cleanup_r>:
 801639c:	4901      	ldr	r1, [pc, #4]	; (80163a4 <_cleanup_r+0x8>)
 801639e:	f000 b8af 	b.w	8016500 <_fwalk_reent>
 80163a2:	bf00      	nop
 80163a4:	080162dd 	.word	0x080162dd

080163a8 <__sfmoreglue>:
 80163a8:	b570      	push	{r4, r5, r6, lr}
 80163aa:	1e4a      	subs	r2, r1, #1
 80163ac:	2568      	movs	r5, #104	; 0x68
 80163ae:	4355      	muls	r5, r2
 80163b0:	460e      	mov	r6, r1
 80163b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80163b6:	f7ff fafb 	bl	80159b0 <_malloc_r>
 80163ba:	4604      	mov	r4, r0
 80163bc:	b140      	cbz	r0, 80163d0 <__sfmoreglue+0x28>
 80163be:	2100      	movs	r1, #0
 80163c0:	e9c0 1600 	strd	r1, r6, [r0]
 80163c4:	300c      	adds	r0, #12
 80163c6:	60a0      	str	r0, [r4, #8]
 80163c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80163cc:	f7fb fdc4 	bl	8011f58 <memset>
 80163d0:	4620      	mov	r0, r4
 80163d2:	bd70      	pop	{r4, r5, r6, pc}

080163d4 <__sfp_lock_acquire>:
 80163d4:	4801      	ldr	r0, [pc, #4]	; (80163dc <__sfp_lock_acquire+0x8>)
 80163d6:	f000 b8b3 	b.w	8016540 <__retarget_lock_acquire_recursive>
 80163da:	bf00      	nop
 80163dc:	20000c88 	.word	0x20000c88

080163e0 <__sfp_lock_release>:
 80163e0:	4801      	ldr	r0, [pc, #4]	; (80163e8 <__sfp_lock_release+0x8>)
 80163e2:	f000 b8ae 	b.w	8016542 <__retarget_lock_release_recursive>
 80163e6:	bf00      	nop
 80163e8:	20000c88 	.word	0x20000c88

080163ec <__sinit_lock_acquire>:
 80163ec:	4801      	ldr	r0, [pc, #4]	; (80163f4 <__sinit_lock_acquire+0x8>)
 80163ee:	f000 b8a7 	b.w	8016540 <__retarget_lock_acquire_recursive>
 80163f2:	bf00      	nop
 80163f4:	20000c83 	.word	0x20000c83

080163f8 <__sinit_lock_release>:
 80163f8:	4801      	ldr	r0, [pc, #4]	; (8016400 <__sinit_lock_release+0x8>)
 80163fa:	f000 b8a2 	b.w	8016542 <__retarget_lock_release_recursive>
 80163fe:	bf00      	nop
 8016400:	20000c83 	.word	0x20000c83

08016404 <__sinit>:
 8016404:	b510      	push	{r4, lr}
 8016406:	4604      	mov	r4, r0
 8016408:	f7ff fff0 	bl	80163ec <__sinit_lock_acquire>
 801640c:	69a3      	ldr	r3, [r4, #24]
 801640e:	b11b      	cbz	r3, 8016418 <__sinit+0x14>
 8016410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016414:	f7ff bff0 	b.w	80163f8 <__sinit_lock_release>
 8016418:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801641c:	6523      	str	r3, [r4, #80]	; 0x50
 801641e:	4b13      	ldr	r3, [pc, #76]	; (801646c <__sinit+0x68>)
 8016420:	4a13      	ldr	r2, [pc, #76]	; (8016470 <__sinit+0x6c>)
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	62a2      	str	r2, [r4, #40]	; 0x28
 8016426:	42a3      	cmp	r3, r4
 8016428:	bf04      	itt	eq
 801642a:	2301      	moveq	r3, #1
 801642c:	61a3      	streq	r3, [r4, #24]
 801642e:	4620      	mov	r0, r4
 8016430:	f000 f820 	bl	8016474 <__sfp>
 8016434:	6060      	str	r0, [r4, #4]
 8016436:	4620      	mov	r0, r4
 8016438:	f000 f81c 	bl	8016474 <__sfp>
 801643c:	60a0      	str	r0, [r4, #8]
 801643e:	4620      	mov	r0, r4
 8016440:	f000 f818 	bl	8016474 <__sfp>
 8016444:	2200      	movs	r2, #0
 8016446:	60e0      	str	r0, [r4, #12]
 8016448:	2104      	movs	r1, #4
 801644a:	6860      	ldr	r0, [r4, #4]
 801644c:	f7ff ff82 	bl	8016354 <std>
 8016450:	68a0      	ldr	r0, [r4, #8]
 8016452:	2201      	movs	r2, #1
 8016454:	2109      	movs	r1, #9
 8016456:	f7ff ff7d 	bl	8016354 <std>
 801645a:	68e0      	ldr	r0, [r4, #12]
 801645c:	2202      	movs	r2, #2
 801645e:	2112      	movs	r1, #18
 8016460:	f7ff ff78 	bl	8016354 <std>
 8016464:	2301      	movs	r3, #1
 8016466:	61a3      	str	r3, [r4, #24]
 8016468:	e7d2      	b.n	8016410 <__sinit+0xc>
 801646a:	bf00      	nop
 801646c:	0802a4e0 	.word	0x0802a4e0
 8016470:	0801639d 	.word	0x0801639d

08016474 <__sfp>:
 8016474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016476:	4607      	mov	r7, r0
 8016478:	f7ff ffac 	bl	80163d4 <__sfp_lock_acquire>
 801647c:	4b1e      	ldr	r3, [pc, #120]	; (80164f8 <__sfp+0x84>)
 801647e:	681e      	ldr	r6, [r3, #0]
 8016480:	69b3      	ldr	r3, [r6, #24]
 8016482:	b913      	cbnz	r3, 801648a <__sfp+0x16>
 8016484:	4630      	mov	r0, r6
 8016486:	f7ff ffbd 	bl	8016404 <__sinit>
 801648a:	3648      	adds	r6, #72	; 0x48
 801648c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016490:	3b01      	subs	r3, #1
 8016492:	d503      	bpl.n	801649c <__sfp+0x28>
 8016494:	6833      	ldr	r3, [r6, #0]
 8016496:	b30b      	cbz	r3, 80164dc <__sfp+0x68>
 8016498:	6836      	ldr	r6, [r6, #0]
 801649a:	e7f7      	b.n	801648c <__sfp+0x18>
 801649c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80164a0:	b9d5      	cbnz	r5, 80164d8 <__sfp+0x64>
 80164a2:	4b16      	ldr	r3, [pc, #88]	; (80164fc <__sfp+0x88>)
 80164a4:	60e3      	str	r3, [r4, #12]
 80164a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80164aa:	6665      	str	r5, [r4, #100]	; 0x64
 80164ac:	f000 f847 	bl	801653e <__retarget_lock_init_recursive>
 80164b0:	f7ff ff96 	bl	80163e0 <__sfp_lock_release>
 80164b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80164b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80164bc:	6025      	str	r5, [r4, #0]
 80164be:	61a5      	str	r5, [r4, #24]
 80164c0:	2208      	movs	r2, #8
 80164c2:	4629      	mov	r1, r5
 80164c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80164c8:	f7fb fd46 	bl	8011f58 <memset>
 80164cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80164d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80164d4:	4620      	mov	r0, r4
 80164d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164d8:	3468      	adds	r4, #104	; 0x68
 80164da:	e7d9      	b.n	8016490 <__sfp+0x1c>
 80164dc:	2104      	movs	r1, #4
 80164de:	4638      	mov	r0, r7
 80164e0:	f7ff ff62 	bl	80163a8 <__sfmoreglue>
 80164e4:	4604      	mov	r4, r0
 80164e6:	6030      	str	r0, [r6, #0]
 80164e8:	2800      	cmp	r0, #0
 80164ea:	d1d5      	bne.n	8016498 <__sfp+0x24>
 80164ec:	f7ff ff78 	bl	80163e0 <__sfp_lock_release>
 80164f0:	230c      	movs	r3, #12
 80164f2:	603b      	str	r3, [r7, #0]
 80164f4:	e7ee      	b.n	80164d4 <__sfp+0x60>
 80164f6:	bf00      	nop
 80164f8:	0802a4e0 	.word	0x0802a4e0
 80164fc:	ffff0001 	.word	0xffff0001

08016500 <_fwalk_reent>:
 8016500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016504:	4606      	mov	r6, r0
 8016506:	4688      	mov	r8, r1
 8016508:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801650c:	2700      	movs	r7, #0
 801650e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016512:	f1b9 0901 	subs.w	r9, r9, #1
 8016516:	d505      	bpl.n	8016524 <_fwalk_reent+0x24>
 8016518:	6824      	ldr	r4, [r4, #0]
 801651a:	2c00      	cmp	r4, #0
 801651c:	d1f7      	bne.n	801650e <_fwalk_reent+0xe>
 801651e:	4638      	mov	r0, r7
 8016520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016524:	89ab      	ldrh	r3, [r5, #12]
 8016526:	2b01      	cmp	r3, #1
 8016528:	d907      	bls.n	801653a <_fwalk_reent+0x3a>
 801652a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801652e:	3301      	adds	r3, #1
 8016530:	d003      	beq.n	801653a <_fwalk_reent+0x3a>
 8016532:	4629      	mov	r1, r5
 8016534:	4630      	mov	r0, r6
 8016536:	47c0      	blx	r8
 8016538:	4307      	orrs	r7, r0
 801653a:	3568      	adds	r5, #104	; 0x68
 801653c:	e7e9      	b.n	8016512 <_fwalk_reent+0x12>

0801653e <__retarget_lock_init_recursive>:
 801653e:	4770      	bx	lr

08016540 <__retarget_lock_acquire_recursive>:
 8016540:	4770      	bx	lr

08016542 <__retarget_lock_release_recursive>:
 8016542:	4770      	bx	lr

08016544 <__swhatbuf_r>:
 8016544:	b570      	push	{r4, r5, r6, lr}
 8016546:	460e      	mov	r6, r1
 8016548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801654c:	2900      	cmp	r1, #0
 801654e:	b096      	sub	sp, #88	; 0x58
 8016550:	4614      	mov	r4, r2
 8016552:	461d      	mov	r5, r3
 8016554:	da07      	bge.n	8016566 <__swhatbuf_r+0x22>
 8016556:	2300      	movs	r3, #0
 8016558:	602b      	str	r3, [r5, #0]
 801655a:	89b3      	ldrh	r3, [r6, #12]
 801655c:	061a      	lsls	r2, r3, #24
 801655e:	d410      	bmi.n	8016582 <__swhatbuf_r+0x3e>
 8016560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016564:	e00e      	b.n	8016584 <__swhatbuf_r+0x40>
 8016566:	466a      	mov	r2, sp
 8016568:	f000 f946 	bl	80167f8 <_fstat_r>
 801656c:	2800      	cmp	r0, #0
 801656e:	dbf2      	blt.n	8016556 <__swhatbuf_r+0x12>
 8016570:	9a01      	ldr	r2, [sp, #4]
 8016572:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016576:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801657a:	425a      	negs	r2, r3
 801657c:	415a      	adcs	r2, r3
 801657e:	602a      	str	r2, [r5, #0]
 8016580:	e7ee      	b.n	8016560 <__swhatbuf_r+0x1c>
 8016582:	2340      	movs	r3, #64	; 0x40
 8016584:	2000      	movs	r0, #0
 8016586:	6023      	str	r3, [r4, #0]
 8016588:	b016      	add	sp, #88	; 0x58
 801658a:	bd70      	pop	{r4, r5, r6, pc}

0801658c <__smakebuf_r>:
 801658c:	898b      	ldrh	r3, [r1, #12]
 801658e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016590:	079d      	lsls	r5, r3, #30
 8016592:	4606      	mov	r6, r0
 8016594:	460c      	mov	r4, r1
 8016596:	d507      	bpl.n	80165a8 <__smakebuf_r+0x1c>
 8016598:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801659c:	6023      	str	r3, [r4, #0]
 801659e:	6123      	str	r3, [r4, #16]
 80165a0:	2301      	movs	r3, #1
 80165a2:	6163      	str	r3, [r4, #20]
 80165a4:	b002      	add	sp, #8
 80165a6:	bd70      	pop	{r4, r5, r6, pc}
 80165a8:	ab01      	add	r3, sp, #4
 80165aa:	466a      	mov	r2, sp
 80165ac:	f7ff ffca 	bl	8016544 <__swhatbuf_r>
 80165b0:	9900      	ldr	r1, [sp, #0]
 80165b2:	4605      	mov	r5, r0
 80165b4:	4630      	mov	r0, r6
 80165b6:	f7ff f9fb 	bl	80159b0 <_malloc_r>
 80165ba:	b948      	cbnz	r0, 80165d0 <__smakebuf_r+0x44>
 80165bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80165c0:	059a      	lsls	r2, r3, #22
 80165c2:	d4ef      	bmi.n	80165a4 <__smakebuf_r+0x18>
 80165c4:	f023 0303 	bic.w	r3, r3, #3
 80165c8:	f043 0302 	orr.w	r3, r3, #2
 80165cc:	81a3      	strh	r3, [r4, #12]
 80165ce:	e7e3      	b.n	8016598 <__smakebuf_r+0xc>
 80165d0:	4b0d      	ldr	r3, [pc, #52]	; (8016608 <__smakebuf_r+0x7c>)
 80165d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80165d4:	89a3      	ldrh	r3, [r4, #12]
 80165d6:	6020      	str	r0, [r4, #0]
 80165d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80165dc:	81a3      	strh	r3, [r4, #12]
 80165de:	9b00      	ldr	r3, [sp, #0]
 80165e0:	6163      	str	r3, [r4, #20]
 80165e2:	9b01      	ldr	r3, [sp, #4]
 80165e4:	6120      	str	r0, [r4, #16]
 80165e6:	b15b      	cbz	r3, 8016600 <__smakebuf_r+0x74>
 80165e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80165ec:	4630      	mov	r0, r6
 80165ee:	f000 f915 	bl	801681c <_isatty_r>
 80165f2:	b128      	cbz	r0, 8016600 <__smakebuf_r+0x74>
 80165f4:	89a3      	ldrh	r3, [r4, #12]
 80165f6:	f023 0303 	bic.w	r3, r3, #3
 80165fa:	f043 0301 	orr.w	r3, r3, #1
 80165fe:	81a3      	strh	r3, [r4, #12]
 8016600:	89a0      	ldrh	r0, [r4, #12]
 8016602:	4305      	orrs	r5, r0
 8016604:	81a5      	strh	r5, [r4, #12]
 8016606:	e7cd      	b.n	80165a4 <__smakebuf_r+0x18>
 8016608:	0801639d 	.word	0x0801639d

0801660c <memmove>:
 801660c:	4288      	cmp	r0, r1
 801660e:	b510      	push	{r4, lr}
 8016610:	eb01 0402 	add.w	r4, r1, r2
 8016614:	d902      	bls.n	801661c <memmove+0x10>
 8016616:	4284      	cmp	r4, r0
 8016618:	4623      	mov	r3, r4
 801661a:	d807      	bhi.n	801662c <memmove+0x20>
 801661c:	1e43      	subs	r3, r0, #1
 801661e:	42a1      	cmp	r1, r4
 8016620:	d008      	beq.n	8016634 <memmove+0x28>
 8016622:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016626:	f803 2f01 	strb.w	r2, [r3, #1]!
 801662a:	e7f8      	b.n	801661e <memmove+0x12>
 801662c:	4402      	add	r2, r0
 801662e:	4601      	mov	r1, r0
 8016630:	428a      	cmp	r2, r1
 8016632:	d100      	bne.n	8016636 <memmove+0x2a>
 8016634:	bd10      	pop	{r4, pc}
 8016636:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801663a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801663e:	e7f7      	b.n	8016630 <memmove+0x24>

08016640 <__malloc_lock>:
 8016640:	4801      	ldr	r0, [pc, #4]	; (8016648 <__malloc_lock+0x8>)
 8016642:	f7ff bf7d 	b.w	8016540 <__retarget_lock_acquire_recursive>
 8016646:	bf00      	nop
 8016648:	20000c84 	.word	0x20000c84

0801664c <__malloc_unlock>:
 801664c:	4801      	ldr	r0, [pc, #4]	; (8016654 <__malloc_unlock+0x8>)
 801664e:	f7ff bf78 	b.w	8016542 <__retarget_lock_release_recursive>
 8016652:	bf00      	nop
 8016654:	20000c84 	.word	0x20000c84

08016658 <_realloc_r>:
 8016658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801665a:	4607      	mov	r7, r0
 801665c:	4614      	mov	r4, r2
 801665e:	460e      	mov	r6, r1
 8016660:	b921      	cbnz	r1, 801666c <_realloc_r+0x14>
 8016662:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016666:	4611      	mov	r1, r2
 8016668:	f7ff b9a2 	b.w	80159b0 <_malloc_r>
 801666c:	b922      	cbnz	r2, 8016678 <_realloc_r+0x20>
 801666e:	f7ff f94f 	bl	8015910 <_free_r>
 8016672:	4625      	mov	r5, r4
 8016674:	4628      	mov	r0, r5
 8016676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016678:	f000 f8f2 	bl	8016860 <_malloc_usable_size_r>
 801667c:	42a0      	cmp	r0, r4
 801667e:	d20f      	bcs.n	80166a0 <_realloc_r+0x48>
 8016680:	4621      	mov	r1, r4
 8016682:	4638      	mov	r0, r7
 8016684:	f7ff f994 	bl	80159b0 <_malloc_r>
 8016688:	4605      	mov	r5, r0
 801668a:	2800      	cmp	r0, #0
 801668c:	d0f2      	beq.n	8016674 <_realloc_r+0x1c>
 801668e:	4631      	mov	r1, r6
 8016690:	4622      	mov	r2, r4
 8016692:	f7fe fc65 	bl	8014f60 <memcpy>
 8016696:	4631      	mov	r1, r6
 8016698:	4638      	mov	r0, r7
 801669a:	f7ff f939 	bl	8015910 <_free_r>
 801669e:	e7e9      	b.n	8016674 <_realloc_r+0x1c>
 80166a0:	4635      	mov	r5, r6
 80166a2:	e7e7      	b.n	8016674 <_realloc_r+0x1c>

080166a4 <_raise_r>:
 80166a4:	291f      	cmp	r1, #31
 80166a6:	b538      	push	{r3, r4, r5, lr}
 80166a8:	4604      	mov	r4, r0
 80166aa:	460d      	mov	r5, r1
 80166ac:	d904      	bls.n	80166b8 <_raise_r+0x14>
 80166ae:	2316      	movs	r3, #22
 80166b0:	6003      	str	r3, [r0, #0]
 80166b2:	f04f 30ff 	mov.w	r0, #4294967295
 80166b6:	bd38      	pop	{r3, r4, r5, pc}
 80166b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80166ba:	b112      	cbz	r2, 80166c2 <_raise_r+0x1e>
 80166bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80166c0:	b94b      	cbnz	r3, 80166d6 <_raise_r+0x32>
 80166c2:	4620      	mov	r0, r4
 80166c4:	f000 f830 	bl	8016728 <_getpid_r>
 80166c8:	462a      	mov	r2, r5
 80166ca:	4601      	mov	r1, r0
 80166cc:	4620      	mov	r0, r4
 80166ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80166d2:	f000 b817 	b.w	8016704 <_kill_r>
 80166d6:	2b01      	cmp	r3, #1
 80166d8:	d00a      	beq.n	80166f0 <_raise_r+0x4c>
 80166da:	1c59      	adds	r1, r3, #1
 80166dc:	d103      	bne.n	80166e6 <_raise_r+0x42>
 80166de:	2316      	movs	r3, #22
 80166e0:	6003      	str	r3, [r0, #0]
 80166e2:	2001      	movs	r0, #1
 80166e4:	e7e7      	b.n	80166b6 <_raise_r+0x12>
 80166e6:	2400      	movs	r4, #0
 80166e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80166ec:	4628      	mov	r0, r5
 80166ee:	4798      	blx	r3
 80166f0:	2000      	movs	r0, #0
 80166f2:	e7e0      	b.n	80166b6 <_raise_r+0x12>

080166f4 <raise>:
 80166f4:	4b02      	ldr	r3, [pc, #8]	; (8016700 <raise+0xc>)
 80166f6:	4601      	mov	r1, r0
 80166f8:	6818      	ldr	r0, [r3, #0]
 80166fa:	f7ff bfd3 	b.w	80166a4 <_raise_r>
 80166fe:	bf00      	nop
 8016700:	20000044 	.word	0x20000044

08016704 <_kill_r>:
 8016704:	b538      	push	{r3, r4, r5, lr}
 8016706:	4d07      	ldr	r5, [pc, #28]	; (8016724 <_kill_r+0x20>)
 8016708:	2300      	movs	r3, #0
 801670a:	4604      	mov	r4, r0
 801670c:	4608      	mov	r0, r1
 801670e:	4611      	mov	r1, r2
 8016710:	602b      	str	r3, [r5, #0]
 8016712:	f7f3 ff27 	bl	800a564 <_kill>
 8016716:	1c43      	adds	r3, r0, #1
 8016718:	d102      	bne.n	8016720 <_kill_r+0x1c>
 801671a:	682b      	ldr	r3, [r5, #0]
 801671c:	b103      	cbz	r3, 8016720 <_kill_r+0x1c>
 801671e:	6023      	str	r3, [r4, #0]
 8016720:	bd38      	pop	{r3, r4, r5, pc}
 8016722:	bf00      	nop
 8016724:	20000c8c 	.word	0x20000c8c

08016728 <_getpid_r>:
 8016728:	f7f3 bf14 	b.w	800a554 <_getpid>

0801672c <__sread>:
 801672c:	b510      	push	{r4, lr}
 801672e:	460c      	mov	r4, r1
 8016730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016734:	f000 f89c 	bl	8016870 <_read_r>
 8016738:	2800      	cmp	r0, #0
 801673a:	bfab      	itete	ge
 801673c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801673e:	89a3      	ldrhlt	r3, [r4, #12]
 8016740:	181b      	addge	r3, r3, r0
 8016742:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016746:	bfac      	ite	ge
 8016748:	6563      	strge	r3, [r4, #84]	; 0x54
 801674a:	81a3      	strhlt	r3, [r4, #12]
 801674c:	bd10      	pop	{r4, pc}

0801674e <__swrite>:
 801674e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016752:	461f      	mov	r7, r3
 8016754:	898b      	ldrh	r3, [r1, #12]
 8016756:	05db      	lsls	r3, r3, #23
 8016758:	4605      	mov	r5, r0
 801675a:	460c      	mov	r4, r1
 801675c:	4616      	mov	r6, r2
 801675e:	d505      	bpl.n	801676c <__swrite+0x1e>
 8016760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016764:	2302      	movs	r3, #2
 8016766:	2200      	movs	r2, #0
 8016768:	f000 f868 	bl	801683c <_lseek_r>
 801676c:	89a3      	ldrh	r3, [r4, #12]
 801676e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016772:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016776:	81a3      	strh	r3, [r4, #12]
 8016778:	4632      	mov	r2, r6
 801677a:	463b      	mov	r3, r7
 801677c:	4628      	mov	r0, r5
 801677e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016782:	f000 b817 	b.w	80167b4 <_write_r>

08016786 <__sseek>:
 8016786:	b510      	push	{r4, lr}
 8016788:	460c      	mov	r4, r1
 801678a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801678e:	f000 f855 	bl	801683c <_lseek_r>
 8016792:	1c43      	adds	r3, r0, #1
 8016794:	89a3      	ldrh	r3, [r4, #12]
 8016796:	bf15      	itete	ne
 8016798:	6560      	strne	r0, [r4, #84]	; 0x54
 801679a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801679e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80167a2:	81a3      	strheq	r3, [r4, #12]
 80167a4:	bf18      	it	ne
 80167a6:	81a3      	strhne	r3, [r4, #12]
 80167a8:	bd10      	pop	{r4, pc}

080167aa <__sclose>:
 80167aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167ae:	f000 b813 	b.w	80167d8 <_close_r>
	...

080167b4 <_write_r>:
 80167b4:	b538      	push	{r3, r4, r5, lr}
 80167b6:	4d07      	ldr	r5, [pc, #28]	; (80167d4 <_write_r+0x20>)
 80167b8:	4604      	mov	r4, r0
 80167ba:	4608      	mov	r0, r1
 80167bc:	4611      	mov	r1, r2
 80167be:	2200      	movs	r2, #0
 80167c0:	602a      	str	r2, [r5, #0]
 80167c2:	461a      	mov	r2, r3
 80167c4:	f7f3 ff05 	bl	800a5d2 <_write>
 80167c8:	1c43      	adds	r3, r0, #1
 80167ca:	d102      	bne.n	80167d2 <_write_r+0x1e>
 80167cc:	682b      	ldr	r3, [r5, #0]
 80167ce:	b103      	cbz	r3, 80167d2 <_write_r+0x1e>
 80167d0:	6023      	str	r3, [r4, #0]
 80167d2:	bd38      	pop	{r3, r4, r5, pc}
 80167d4:	20000c8c 	.word	0x20000c8c

080167d8 <_close_r>:
 80167d8:	b538      	push	{r3, r4, r5, lr}
 80167da:	4d06      	ldr	r5, [pc, #24]	; (80167f4 <_close_r+0x1c>)
 80167dc:	2300      	movs	r3, #0
 80167de:	4604      	mov	r4, r0
 80167e0:	4608      	mov	r0, r1
 80167e2:	602b      	str	r3, [r5, #0]
 80167e4:	f7f3 ff11 	bl	800a60a <_close>
 80167e8:	1c43      	adds	r3, r0, #1
 80167ea:	d102      	bne.n	80167f2 <_close_r+0x1a>
 80167ec:	682b      	ldr	r3, [r5, #0]
 80167ee:	b103      	cbz	r3, 80167f2 <_close_r+0x1a>
 80167f0:	6023      	str	r3, [r4, #0]
 80167f2:	bd38      	pop	{r3, r4, r5, pc}
 80167f4:	20000c8c 	.word	0x20000c8c

080167f8 <_fstat_r>:
 80167f8:	b538      	push	{r3, r4, r5, lr}
 80167fa:	4d07      	ldr	r5, [pc, #28]	; (8016818 <_fstat_r+0x20>)
 80167fc:	2300      	movs	r3, #0
 80167fe:	4604      	mov	r4, r0
 8016800:	4608      	mov	r0, r1
 8016802:	4611      	mov	r1, r2
 8016804:	602b      	str	r3, [r5, #0]
 8016806:	f7f3 ff0c 	bl	800a622 <_fstat>
 801680a:	1c43      	adds	r3, r0, #1
 801680c:	d102      	bne.n	8016814 <_fstat_r+0x1c>
 801680e:	682b      	ldr	r3, [r5, #0]
 8016810:	b103      	cbz	r3, 8016814 <_fstat_r+0x1c>
 8016812:	6023      	str	r3, [r4, #0]
 8016814:	bd38      	pop	{r3, r4, r5, pc}
 8016816:	bf00      	nop
 8016818:	20000c8c 	.word	0x20000c8c

0801681c <_isatty_r>:
 801681c:	b538      	push	{r3, r4, r5, lr}
 801681e:	4d06      	ldr	r5, [pc, #24]	; (8016838 <_isatty_r+0x1c>)
 8016820:	2300      	movs	r3, #0
 8016822:	4604      	mov	r4, r0
 8016824:	4608      	mov	r0, r1
 8016826:	602b      	str	r3, [r5, #0]
 8016828:	f7f3 ff0b 	bl	800a642 <_isatty>
 801682c:	1c43      	adds	r3, r0, #1
 801682e:	d102      	bne.n	8016836 <_isatty_r+0x1a>
 8016830:	682b      	ldr	r3, [r5, #0]
 8016832:	b103      	cbz	r3, 8016836 <_isatty_r+0x1a>
 8016834:	6023      	str	r3, [r4, #0]
 8016836:	bd38      	pop	{r3, r4, r5, pc}
 8016838:	20000c8c 	.word	0x20000c8c

0801683c <_lseek_r>:
 801683c:	b538      	push	{r3, r4, r5, lr}
 801683e:	4d07      	ldr	r5, [pc, #28]	; (801685c <_lseek_r+0x20>)
 8016840:	4604      	mov	r4, r0
 8016842:	4608      	mov	r0, r1
 8016844:	4611      	mov	r1, r2
 8016846:	2200      	movs	r2, #0
 8016848:	602a      	str	r2, [r5, #0]
 801684a:	461a      	mov	r2, r3
 801684c:	f7f3 ff04 	bl	800a658 <_lseek>
 8016850:	1c43      	adds	r3, r0, #1
 8016852:	d102      	bne.n	801685a <_lseek_r+0x1e>
 8016854:	682b      	ldr	r3, [r5, #0]
 8016856:	b103      	cbz	r3, 801685a <_lseek_r+0x1e>
 8016858:	6023      	str	r3, [r4, #0]
 801685a:	bd38      	pop	{r3, r4, r5, pc}
 801685c:	20000c8c 	.word	0x20000c8c

08016860 <_malloc_usable_size_r>:
 8016860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016864:	1f18      	subs	r0, r3, #4
 8016866:	2b00      	cmp	r3, #0
 8016868:	bfbc      	itt	lt
 801686a:	580b      	ldrlt	r3, [r1, r0]
 801686c:	18c0      	addlt	r0, r0, r3
 801686e:	4770      	bx	lr

08016870 <_read_r>:
 8016870:	b538      	push	{r3, r4, r5, lr}
 8016872:	4d07      	ldr	r5, [pc, #28]	; (8016890 <_read_r+0x20>)
 8016874:	4604      	mov	r4, r0
 8016876:	4608      	mov	r0, r1
 8016878:	4611      	mov	r1, r2
 801687a:	2200      	movs	r2, #0
 801687c:	602a      	str	r2, [r5, #0]
 801687e:	461a      	mov	r2, r3
 8016880:	f7f3 fe8a 	bl	800a598 <_read>
 8016884:	1c43      	adds	r3, r0, #1
 8016886:	d102      	bne.n	801688e <_read_r+0x1e>
 8016888:	682b      	ldr	r3, [r5, #0]
 801688a:	b103      	cbz	r3, 801688e <_read_r+0x1e>
 801688c:	6023      	str	r3, [r4, #0]
 801688e:	bd38      	pop	{r3, r4, r5, pc}
 8016890:	20000c8c 	.word	0x20000c8c

08016894 <_init>:
 8016894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016896:	bf00      	nop
 8016898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801689a:	bc08      	pop	{r3}
 801689c:	469e      	mov	lr, r3
 801689e:	4770      	bx	lr

080168a0 <_fini>:
 80168a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168a2:	bf00      	nop
 80168a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80168a6:	bc08      	pop	{r3}
 80168a8:	469e      	mov	lr, r3
 80168aa:	4770      	bx	lr
