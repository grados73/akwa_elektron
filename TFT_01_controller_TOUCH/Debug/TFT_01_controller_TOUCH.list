
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000159ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014058  08015b90  08015b90  00025b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029be8  08029be8  00040214  2**0
                  CONTENTS
  4 .ARM          00000008  08029be8  08029be8  00039be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029bf0  08029bf0  00040214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029bf0  08029bf0  00039bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029bf4  08029bf4  00039bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08029bf8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a70  20000214  08029e0c  00040214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c84  08029e0c  00040c84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002575a  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004da6  00000000  00000000  0006599e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a70  00000000  00000000  0006a748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018c0  00000000  00000000  0006c1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c6f4  00000000  00000000  0006da78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026fee  00000000  00000000  0008a16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099826  00000000  00000000  000b115a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014a980  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000823c  00000000  00000000  0014a9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08015b74 	.word	0x08015b74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	08015b74 	.word	0x08015b74

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <UART_ESP_ParseLine>:

BlynkServerData Blynk1;


void UART_ESP_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b094      	sub	sp, #80	; 0x50
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

		if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	4619      	mov	r1, r3
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f008 ff67 	bl	8009efe <UARTDMA_GetLineFromReceiveBuffer>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10f      	bne.n	8001056 <UART_ESP_ParseLine+0x3a>
		{
			// Header
			char* ParsePointer = strtok(BufferReceive, "=");
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	4909      	ldr	r1, [pc, #36]	; (8001060 <UART_ESP_ParseLine+0x44>)
 800103c:	4618      	mov	r0, r3
 800103e:	f011 fddb 	bl	8012bf8 <strtok>
 8001042:	64f8      	str	r0, [r7, #76]	; 0x4c

			if (strcmp(ParsePointer, "CHRELAY") == 0) // Command to change state of Relays
 8001044:	4907      	ldr	r1, [pc, #28]	; (8001064 <UART_ESP_ParseLine+0x48>)
 8001046:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001048:	f7ff f8ca 	bl	80001e0 <strcmp>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <UART_ESP_ParseLine+0x3a>
			{
				ESP_ParseChangeRelayState();
 8001052:	f000 f809 	bl	8001068 <ESP_ParseChangeRelayState>
			}
		}
}
 8001056:	bf00      	nop
 8001058:	3750      	adds	r7, #80	; 0x50
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	08015b90 	.word	0x08015b90
 8001064:	08015b94 	.word	0x08015b94

08001068 <ESP_ParseChangeRelayState>:

//
// Get info from Blynk Server About change Relays state
// CHRELAY=7,1\n
void ESP_ParseChangeRelayState(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
	uint8_t RelayNr = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	73fb      	strb	r3, [r7, #15]
	uint8_t NewState = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	73bb      	strb	r3, [r7, #14]
	char* ParsePointer = strtok(NULL, ",");
 8001076:	4913      	ldr	r1, [pc, #76]	; (80010c4 <ESP_ParseChangeRelayState+0x5c>)
 8001078:	2000      	movs	r0, #0
 800107a:	f011 fdbd 	bl	8012bf8 <strtok>
 800107e:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d012      	beq.n	80010ae <ESP_ParseChangeRelayState+0x46>
	{
		RelayNr = atoi(ParsePointer);
 8001088:	68b8      	ldr	r0, [r7, #8]
 800108a:	f010 f8a6 	bl	80111da <atoi>
 800108e:	4603      	mov	r3, r0
 8001090:	73fb      	strb	r3, [r7, #15]
		if(strlen(ParsePointer) > 0)
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d009      	beq.n	80010ae <ESP_ParseChangeRelayState+0x46>
		{
			char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800109a:	490a      	ldr	r1, [pc, #40]	; (80010c4 <ESP_ParseChangeRelayState+0x5c>)
 800109c:	2000      	movs	r0, #0
 800109e:	f011 fdab 	bl	8012bf8 <strtok>
 80010a2:	6078      	str	r0, [r7, #4]
			NewState = atoi(ParsePointer); // If there are no chars, change string to integer
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f010 f898 	bl	80111da <atoi>
 80010aa:	4603      	mov	r3, r0
 80010ac:	73bb      	strb	r3, [r7, #14]
		}
	}
	ESP_ChangeRelayState(RelayNr, NewState);
 80010ae:	7bba      	ldrb	r2, [r7, #14]
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 f807 	bl	80010c8 <ESP_ChangeRelayState>
}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	08015b9c 	.word	0x08015b9c

080010c8 <ESP_ChangeRelayState>:


void ESP_ChangeRelayState(uint8_t RelayNumber, uint8_t NewState)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	460a      	mov	r2, r1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	4613      	mov	r3, r2
 80010d6:	71bb      	strb	r3, [r7, #6]
	// First Relay (Switch)
	if(1 == RelayNumber)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d10a      	bne.n	80010f4 <ESP_ChangeRelayState+0x2c>
	{
		if(0 == NewState) firstSwitchTurn(0); //Turn OFF
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d103      	bne.n	80010ec <ESP_ChangeRelayState+0x24>
 80010e4:	2000      	movs	r0, #0
 80010e6:	f007 f91d 	bl	8008324 <firstSwitchTurn>
	else if(8 == RelayNumber)
	{
		if(0 == NewState) fourthLightTurn(0); //Turn OFF
		else fourthLightTurn(1); //Turn ON
	}
}
 80010ea:	e064      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else firstSwitchTurn(1); //Turn ON
 80010ec:	2001      	movs	r0, #1
 80010ee:	f007 f919 	bl	8008324 <firstSwitchTurn>
}
 80010f2:	e060      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(2 == RelayNumber)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d10a      	bne.n	8001110 <ESP_ChangeRelayState+0x48>
		if(0 == NewState) secondSwitchTurn(0); //Turn OFF
 80010fa:	79bb      	ldrb	r3, [r7, #6]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d103      	bne.n	8001108 <ESP_ChangeRelayState+0x40>
 8001100:	2000      	movs	r0, #0
 8001102:	f007 f991 	bl	8008428 <secondSwitchTurn>
}
 8001106:	e056      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else secondSwitchTurn(1); //Turn ON
 8001108:	2001      	movs	r0, #1
 800110a:	f007 f98d 	bl	8008428 <secondSwitchTurn>
}
 800110e:	e052      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(3 == RelayNumber)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	2b03      	cmp	r3, #3
 8001114:	d10a      	bne.n	800112c <ESP_ChangeRelayState+0x64>
		if(0 == NewState) thirdSwitchTurn(0); //Turn OFF
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d103      	bne.n	8001124 <ESP_ChangeRelayState+0x5c>
 800111c:	2000      	movs	r0, #0
 800111e:	f007 fa05 	bl	800852c <thirdSwitchTurn>
}
 8001122:	e048      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else thirdSwitchTurn(1); //Turn ON
 8001124:	2001      	movs	r0, #1
 8001126:	f007 fa01 	bl	800852c <thirdSwitchTurn>
}
 800112a:	e044      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(4 == RelayNumber)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2b04      	cmp	r3, #4
 8001130:	d10a      	bne.n	8001148 <ESP_ChangeRelayState+0x80>
		if(0 == NewState) fourthSwitchTurn(0); //Turn OFF
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d103      	bne.n	8001140 <ESP_ChangeRelayState+0x78>
 8001138:	2000      	movs	r0, #0
 800113a:	f007 fa79 	bl	8008630 <fourthSwitchTurn>
}
 800113e:	e03a      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else fourthSwitchTurn(1); //Turn ON
 8001140:	2001      	movs	r0, #1
 8001142:	f007 fa75 	bl	8008630 <fourthSwitchTurn>
}
 8001146:	e036      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(5 == RelayNumber)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	2b05      	cmp	r3, #5
 800114c:	d10a      	bne.n	8001164 <ESP_ChangeRelayState+0x9c>
		if(0 == NewState) firstLightTurn(0); //Turn OFF
 800114e:	79bb      	ldrb	r3, [r7, #6]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d103      	bne.n	800115c <ESP_ChangeRelayState+0x94>
 8001154:	2000      	movs	r0, #0
 8001156:	f007 faed 	bl	8008734 <firstLightTurn>
}
 800115a:	e02c      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else firstLightTurn(1); //Turn ON
 800115c:	2001      	movs	r0, #1
 800115e:	f007 fae9 	bl	8008734 <firstLightTurn>
}
 8001162:	e028      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(6 == RelayNumber)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2b06      	cmp	r3, #6
 8001168:	d10a      	bne.n	8001180 <ESP_ChangeRelayState+0xb8>
		if(0 == NewState) secondLightTurn(0); //Turn OFF
 800116a:	79bb      	ldrb	r3, [r7, #6]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d103      	bne.n	8001178 <ESP_ChangeRelayState+0xb0>
 8001170:	2000      	movs	r0, #0
 8001172:	f007 fb5d 	bl	8008830 <secondLightTurn>
}
 8001176:	e01e      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else secondLightTurn(1); //Turn ON
 8001178:	2001      	movs	r0, #1
 800117a:	f007 fb59 	bl	8008830 <secondLightTurn>
}
 800117e:	e01a      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(7 == RelayNumber)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b07      	cmp	r3, #7
 8001184:	d10a      	bne.n	800119c <ESP_ChangeRelayState+0xd4>
		if(0 == NewState) thirdLightTurn(0); //Turn OFF
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d103      	bne.n	8001194 <ESP_ChangeRelayState+0xcc>
 800118c:	2000      	movs	r0, #0
 800118e:	f007 fbcd 	bl	800892c <thirdLightTurn>
}
 8001192:	e010      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else thirdLightTurn(1); //Turn ON
 8001194:	2001      	movs	r0, #1
 8001196:	f007 fbc9 	bl	800892c <thirdLightTurn>
}
 800119a:	e00c      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(8 == RelayNumber)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d109      	bne.n	80011b6 <ESP_ChangeRelayState+0xee>
		if(0 == NewState) fourthLightTurn(0); //Turn OFF
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d103      	bne.n	80011b0 <ESP_ChangeRelayState+0xe8>
 80011a8:	2000      	movs	r0, #0
 80011aa:	f007 fc3d 	bl	8008a28 <fourthLightTurn>
}
 80011ae:	e002      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else fourthLightTurn(1); //Turn ON
 80011b0:	2001      	movs	r0, #1
 80011b2:	f007 fc39 	bl	8008a28 <fourthLightTurn>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <ESP_SendCurrentTempInside>:

//
// Send info to Blynk Server
//
void ESP_SendCurrentTempInside(float CurrentTemp)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "TEMPINS=%f\n", CurrentTemp);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff f9d4 	bl	8000578 <__aeabi_f2d>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4905      	ldr	r1, [pc, #20]	; (80011ec <ESP_SendCurrentTempInside+0x2c>)
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <ESP_SendCurrentTempInside+0x30>)
 80011d8:	f010 feb6 	bl	8011f48 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 80011dc:	4904      	ldr	r1, [pc, #16]	; (80011f0 <ESP_SendCurrentTempInside+0x30>)
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <ESP_SendCurrentTempInside+0x34>)
 80011e0:	f008 febe 	bl	8009f60 <UARTDMA_Print>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	08015ba0 	.word	0x08015ba0
 80011f0:	20000300 	.word	0x20000300
 80011f4:	200006bc 	.word	0x200006bc

080011f8 <ESP_SendCurrentTempOutside>:

void ESP_SendCurrentTempOutside(float CurrentTemp)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "TEMPOUT=%f\n", CurrentTemp);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff f9b8 	bl	8000578 <__aeabi_f2d>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4905      	ldr	r1, [pc, #20]	; (8001224 <ESP_SendCurrentTempOutside+0x2c>)
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <ESP_SendCurrentTempOutside+0x30>)
 8001210:	f010 fe9a 	bl	8011f48 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 8001214:	4904      	ldr	r1, [pc, #16]	; (8001228 <ESP_SendCurrentTempOutside+0x30>)
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <ESP_SendCurrentTempOutside+0x34>)
 8001218:	f008 fea2 	bl	8009f60 <UARTDMA_Print>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	08015bac 	.word	0x08015bac
 8001228:	20000300 	.word	0x20000300
 800122c:	200006bc 	.word	0x200006bc

08001230 <ESP_SendCurrentPressure>:

void ESP_SendCurrentPressure(float CurrentPress)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "PRES=%f\n", CurrentPress);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff f99c 	bl	8000578 <__aeabi_f2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4905      	ldr	r1, [pc, #20]	; (800125c <ESP_SendCurrentPressure+0x2c>)
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <ESP_SendCurrentPressure+0x30>)
 8001248:	f010 fe7e 	bl	8011f48 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 800124c:	4904      	ldr	r1, [pc, #16]	; (8001260 <ESP_SendCurrentPressure+0x30>)
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <ESP_SendCurrentPressure+0x34>)
 8001250:	f008 fe86 	bl	8009f60 <UARTDMA_Print>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	08015bb8 	.word	0x08015bb8
 8001260:	20000300 	.word	0x20000300
 8001264:	200006bc 	.word	0x200006bc

08001268 <ESP_SendCurrentWaterLvl>:

void ESP_SendCurrentWaterLvl(uint32_t CurrentWaterLvl)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	sprintf(Message, "WLVL=%ld\n", CurrentWaterLvl);
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	4906      	ldr	r1, [pc, #24]	; (800128c <ESP_SendCurrentWaterLvl+0x24>)
 8001274:	4806      	ldr	r0, [pc, #24]	; (8001290 <ESP_SendCurrentWaterLvl+0x28>)
 8001276:	f010 fe67 	bl	8011f48 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 800127a:	4905      	ldr	r1, [pc, #20]	; (8001290 <ESP_SendCurrentWaterLvl+0x28>)
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <ESP_SendCurrentWaterLvl+0x2c>)
 800127e:	f008 fe6f 	bl	8009f60 <UARTDMA_Print>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	08015bc4 	.word	0x08015bc4
 8001290:	20000300 	.word	0x20000300
 8001294:	200006bc 	.word	0x200006bc

08001298 <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	; 0x30
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80012b0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1acb      	subs	r3, r1, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	bfb8      	it	lt
 80012be:	425b      	neglt	r3, r3
 80012c0:	429a      	cmp	r2, r3
 80012c2:	bfcc      	ite	gt
 80012c4:	2301      	movgt	r3, #1
 80012c6:	2300      	movle	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 80012cc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00b      	beq.n	80012ec <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	623b      	str	r3, [r7, #32]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dd0b      	ble.n	800130c <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	61bb      	str	r3, [r7, #24]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	b29a      	uxth	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	b29b      	uxth	r3, r3
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	b29b      	uxth	r3, r3
 8001318:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	bfb8      	it	lt
 8001324:	425b      	neglt	r3, r3
 8001326:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001328:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800132c:	0fda      	lsrs	r2, r3, #31
 800132e:	4413      	add	r3, r2
 8001330:	105b      	asrs	r3, r3, #1
 8001332:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	da02      	bge.n	8001342 <GFX_WriteLine+0xaa>
	        ystep = 1;
 800133c:	2301      	movs	r3, #1
 800133e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001340:	e02e      	b.n	80013a0 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 8001342:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001346:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8001348:	e02a      	b.n	80013a0 <GFX_WriteLine+0x108>
	        if (steep) {
 800134a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800134e:	2b00      	cmp	r3, #0
 8001350:	d008      	beq.n	8001364 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	b21b      	sxth	r3, r3
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	b211      	sxth	r1, r2
 800135a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800135c:	4618      	mov	r0, r3
 800135e:	f000 feab 	bl	80020b8 <ILI9341_WritePixel>
 8001362:	e007      	b.n	8001374 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	b21b      	sxth	r3, r3
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	b211      	sxth	r1, r2
 800136c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800136e:	4618      	mov	r0, r3
 8001370:	f000 fea2 	bl	80020b8 <ILI9341_WritePixel>
	        }
	        err -= dy;
 8001374:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001376:	8abb      	ldrh	r3, [r7, #20]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	b29b      	uxth	r3, r3
 800137c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 800137e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001382:	2b00      	cmp	r3, #0
 8001384:	da09      	bge.n	800139a <GFX_WriteLine+0x102>
	            y_start += ystep;
 8001386:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	4413      	add	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001390:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001392:	8afb      	ldrh	r3, [r7, #22]
 8001394:	4413      	add	r3, r2
 8001396:	b29b      	uxth	r3, r3
 8001398:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3301      	adds	r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	ddd0      	ble.n	800134a <GFX_WriteLine+0xb2>
	        }
	    }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3730      	adds	r7, #48	; 0x30
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af02      	add	r7, sp, #8
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	1e5a      	subs	r2, r3, #1
 80013c8:	887b      	ldrh	r3, [r7, #2]
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	4613      	mov	r3, r2
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f7ff ff60 	bl	8001298 <GFX_WriteLine>
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	1e5a      	subs	r2, r3, #1
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f7ff ff4a 	bl	8001298 <GFX_WriteLine>
}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af02      	add	r7, sp, #8
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	429a      	cmp	r2, r3
 8001420:	d113      	bne.n	800144a <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	dd05      	ble.n	8001436 <GFX_DrawLine+0x2a>
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	1c5a      	adds	r2, r3, #1
 800143e:	8c3b      	ldrh	r3, [r7, #32]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f7ff ffb5 	bl	80013b2 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 8001448:	e01f      	b.n	800148a <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d113      	bne.n	800147a <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	429a      	cmp	r2, r3
 8001458:	dd05      	ble.n	8001466 <GFX_DrawLine+0x5a>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	8c3b      	ldrh	r3, [r7, #32]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f7ff ffb4 	bl	80013e0 <GFX_DrawFastHLine>
}
 8001478:	e007      	b.n	800148a <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 800147a:	8c3b      	ldrh	r3, [r7, #32]
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	68b9      	ldr	r1, [r7, #8]
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f7ff ff07 	bl	8001298 <GFX_WriteLine>
}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	4611      	mov	r1, r2
 800149e:	461a      	mov	r2, r3
 80014a0:	460b      	mov	r3, r1
 80014a2:	80fb      	strh	r3, [r7, #6]
 80014a4:	4613      	mov	r3, r2
 80014a6:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e008      	b.n	80014c0 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 80014ae:	88ba      	ldrh	r2, [r7, #4]
 80014b0:	8c3b      	ldrh	r3, [r7, #32]
 80014b2:	68b9      	ldr	r1, [r7, #8]
 80014b4:	6978      	ldr	r0, [r7, #20]
 80014b6:	f7ff ff7c 	bl	80013b2 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	88fa      	ldrh	r2, [r7, #6]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4413      	add	r3, r2
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	dbf0      	blt.n	80014ae <GFX_DrawFillRectangle+0x1c>
    }

}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b088      	sub	sp, #32
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	4611      	mov	r1, r2
 80014e2:	461a      	mov	r2, r3
 80014e4:	460b      	mov	r3, r1
 80014e6:	80fb      	strh	r3, [r7, #6]
 80014e8:	4613      	mov	r3, r2
 80014ea:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	f1c3 0301 	rsb	r3, r3, #1
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 80014f6:	2301      	movs	r3, #1
 80014f8:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	461a      	mov	r2, r3
 80014fe:	03d2      	lsls	r2, r2, #15
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	b29b      	uxth	r3, r3
 8001506:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001510:	e0b5      	b.n	800167e <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 8001512:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db0e      	blt.n	8001538 <GFX_DrawCircleHelper+0x62>
            y--;
 800151a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800151e:	b29b      	uxth	r3, r3
 8001520:	3b01      	subs	r3, #1
 8001522:	b29b      	uxth	r3, r3
 8001524:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8001526:	8b7b      	ldrh	r3, [r7, #26]
 8001528:	3302      	adds	r3, #2
 800152a:	b29b      	uxth	r3, r3
 800152c:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 800152e:	8bfa      	ldrh	r2, [r7, #30]
 8001530:	8b7b      	ldrh	r3, [r7, #26]
 8001532:	4413      	add	r3, r2
 8001534:	b29b      	uxth	r3, r3
 8001536:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8001538:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800153c:	b29b      	uxth	r3, r3
 800153e:	3301      	adds	r3, #1
 8001540:	b29b      	uxth	r3, r3
 8001542:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001544:	8bbb      	ldrh	r3, [r7, #28]
 8001546:	3302      	adds	r3, #2
 8001548:	b29b      	uxth	r3, r3
 800154a:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 800154c:	8bfa      	ldrh	r2, [r7, #30]
 800154e:	8bbb      	ldrh	r3, [r7, #28]
 8001550:	4413      	add	r3, r2
 8001552:	b29b      	uxth	r3, r3
 8001554:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 8001556:	797b      	ldrb	r3, [r7, #5]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	d01f      	beq.n	80015a0 <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	b29a      	uxth	r2, r3
 8001564:	8b3b      	ldrh	r3, [r7, #24]
 8001566:	4413      	add	r3, r2
 8001568:	b29b      	uxth	r3, r3
 800156a:	b218      	sxth	r0, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	b29a      	uxth	r2, r3
 8001570:	8afb      	ldrh	r3, [r7, #22]
 8001572:	4413      	add	r3, r2
 8001574:	b29b      	uxth	r3, r3
 8001576:	b21b      	sxth	r3, r3
 8001578:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800157a:	4619      	mov	r1, r3
 800157c:	f000 fd9c 	bl	80020b8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	b29a      	uxth	r2, r3
 8001584:	8afb      	ldrh	r3, [r7, #22]
 8001586:	4413      	add	r3, r2
 8001588:	b29b      	uxth	r3, r3
 800158a:	b218      	sxth	r0, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	b29a      	uxth	r2, r3
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	4413      	add	r3, r2
 8001594:	b29b      	uxth	r3, r3
 8001596:	b21b      	sxth	r3, r3
 8001598:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800159a:	4619      	mov	r1, r3
 800159c:	f000 fd8c 	bl	80020b8 <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 80015a0:	797b      	ldrb	r3, [r7, #5]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d01f      	beq.n	80015ea <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	8b3b      	ldrh	r3, [r7, #24]
 80015b0:	4413      	add	r3, r2
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	b218      	sxth	r0, r3
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	8afb      	ldrh	r3, [r7, #22]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	b29b      	uxth	r3, r3
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015c4:	4619      	mov	r1, r3
 80015c6:	f000 fd77 	bl	80020b8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	8afb      	ldrh	r3, [r7, #22]
 80015d0:	4413      	add	r3, r2
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	b218      	sxth	r0, r3
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	8b3b      	ldrh	r3, [r7, #24]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	b29b      	uxth	r3, r3
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015e4:	4619      	mov	r1, r3
 80015e6:	f000 fd67 	bl	80020b8 <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 80015ea:	797b      	ldrb	r3, [r7, #5]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d01f      	beq.n	8001634 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	8afb      	ldrh	r3, [r7, #22]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	b218      	sxth	r0, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	b29a      	uxth	r2, r3
 8001604:	8b3b      	ldrh	r3, [r7, #24]
 8001606:	4413      	add	r3, r2
 8001608:	b29b      	uxth	r3, r3
 800160a:	b21b      	sxth	r3, r3
 800160c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800160e:	4619      	mov	r1, r3
 8001610:	f000 fd52 	bl	80020b8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	b29a      	uxth	r2, r3
 8001618:	8b3b      	ldrh	r3, [r7, #24]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	b29b      	uxth	r3, r3
 800161e:	b218      	sxth	r0, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	b29a      	uxth	r2, r3
 8001624:	8afb      	ldrh	r3, [r7, #22]
 8001626:	4413      	add	r3, r2
 8001628:	b29b      	uxth	r3, r3
 800162a:	b21b      	sxth	r3, r3
 800162c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800162e:	4619      	mov	r1, r3
 8001630:	f000 fd42 	bl	80020b8 <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 8001634:	797b      	ldrb	r3, [r7, #5]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d01f      	beq.n	800167e <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	b29a      	uxth	r2, r3
 8001642:	8afb      	ldrh	r3, [r7, #22]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	b29b      	uxth	r3, r3
 8001648:	b218      	sxth	r0, r3
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	b29a      	uxth	r2, r3
 800164e:	8b3b      	ldrh	r3, [r7, #24]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	b29b      	uxth	r3, r3
 8001654:	b21b      	sxth	r3, r3
 8001656:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001658:	4619      	mov	r1, r3
 800165a:	f000 fd2d 	bl	80020b8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	b29a      	uxth	r2, r3
 8001662:	8b3b      	ldrh	r3, [r7, #24]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	b29b      	uxth	r3, r3
 8001668:	b218      	sxth	r0, r3
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	b29a      	uxth	r2, r3
 800166e:	8afb      	ldrh	r3, [r7, #22]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	b29b      	uxth	r3, r3
 8001674:	b21b      	sxth	r3, r3
 8001676:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001678:	4619      	mov	r1, r3
 800167a:	f000 fd1d 	bl	80020b8 <ILI9341_WritePixel>
    while (x<y) {
 800167e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001682:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001686:	429a      	cmp	r2, r3
 8001688:	f6ff af43 	blt.w	8001512 <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3720      	adds	r7, #32
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b088      	sub	sp, #32
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	4611      	mov	r1, r2
 80016a2:	461a      	mov	r2, r3
 80016a4:	460b      	mov	r3, r1
 80016a6:	80fb      	strh	r3, [r7, #6]
 80016a8:	4613      	mov	r3, r2
 80016aa:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	f1c3 0301 	rsb	r3, r3, #1
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 80016b6:	2301      	movs	r3, #1
 80016b8:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	461a      	mov	r2, r3
 80016be:	03d2      	lsls	r2, r2, #15
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 80016d0:	e073      	b.n	80017ba <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 80016d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	db0e      	blt.n	80016f8 <GFX_DrawFillCircleHelper+0x62>
            y--;
 80016da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	3b01      	subs	r3, #1
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80016e6:	8b7b      	ldrh	r3, [r7, #26]
 80016e8:	3302      	adds	r3, #2
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80016ee:	8bfa      	ldrh	r2, [r7, #30]
 80016f0:	8b7b      	ldrh	r3, [r7, #26]
 80016f2:	4413      	add	r3, r2
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80016f8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	3301      	adds	r3, #1
 8001700:	b29b      	uxth	r3, r3
 8001702:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001704:	8bbb      	ldrh	r3, [r7, #28]
 8001706:	3302      	adds	r3, #2
 8001708:	b29b      	uxth	r3, r3
 800170a:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 800170c:	8bfa      	ldrh	r2, [r7, #30]
 800170e:	8bbb      	ldrh	r3, [r7, #28]
 8001710:	4413      	add	r3, r2
 8001712:	b29b      	uxth	r3, r3
 8001714:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8001716:	797b      	ldrb	r3, [r7, #5]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d023      	beq.n	8001768 <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 8001720:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	18d0      	adds	r0, r2, r3
 8001728:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	1ad1      	subs	r1, r2, r3
 8001730:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800173c:	441a      	add	r2, r3
 800173e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001740:	f7ff fe37 	bl	80013b2 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8001744:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	18d0      	adds	r0, r2, r3
 800174c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	1ad1      	subs	r1, r2, r3
 8001754:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001760:	441a      	add	r2, r3
 8001762:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001764:	f7ff fe25 	bl	80013b2 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 8001768:	797b      	ldrb	r3, [r7, #5]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d023      	beq.n	80017ba <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 8001772:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	1ad0      	subs	r0, r2, r3
 800177a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	1ad1      	subs	r1, r2, r3
 8001782:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800178e:	441a      	add	r2, r3
 8001790:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001792:	f7ff fe0e 	bl	80013b2 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8001796:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	1ad0      	subs	r0, r2, r3
 800179e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	1ad1      	subs	r1, r2, r3
 80017a6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80017b2:	441a      	add	r2, r3
 80017b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80017b6:	f7ff fdfc 	bl	80013b2 <GFX_DrawFastVLine>
    while (x<y) {
 80017ba:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80017be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	db85      	blt.n	80016d2 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 80017c6:	bf00      	nop
 80017c8:	bf00      	nop
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af02      	add	r7, sp, #8
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	4611      	mov	r1, r2
 80017dc:	461a      	mov	r2, r3
 80017de:	460b      	mov	r3, r1
 80017e0:	80fb      	strh	r3, [r7, #6]
 80017e2:	4613      	mov	r3, r2
 80017e4:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 80017e6:	8b3a      	ldrh	r2, [r7, #24]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	18d0      	adds	r0, r2, r3
 80017ec:	88fa      	ldrh	r2, [r7, #6]
 80017ee:	8b3b      	ldrh	r3, [r7, #24]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	1ad2      	subs	r2, r2, r3
 80017f4:	8bbb      	ldrh	r3, [r7, #28]
 80017f6:	68b9      	ldr	r1, [r7, #8]
 80017f8:	f7ff fdf2 	bl	80013e0 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 80017fc:	8b3a      	ldrh	r2, [r7, #24]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	18d0      	adds	r0, r2, r3
 8001802:	88ba      	ldrh	r2, [r7, #4]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4413      	add	r3, r2
 8001808:	1e59      	subs	r1, r3, #1
 800180a:	88fa      	ldrh	r2, [r7, #6]
 800180c:	8b3b      	ldrh	r3, [r7, #24]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	1ad2      	subs	r2, r2, r3
 8001812:	8bbb      	ldrh	r3, [r7, #28]
 8001814:	f7ff fde4 	bl	80013e0 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 8001818:	8b3a      	ldrh	r2, [r7, #24]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	18d1      	adds	r1, r2, r3
 800181e:	88ba      	ldrh	r2, [r7, #4]
 8001820:	8b3b      	ldrh	r3, [r7, #24]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	1ad2      	subs	r2, r2, r3
 8001826:	8bbb      	ldrh	r3, [r7, #28]
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f7ff fdc2 	bl	80013b2 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 800182e:	88fa      	ldrh	r2, [r7, #6]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	1e58      	subs	r0, r3, #1
 8001836:	8b3a      	ldrh	r2, [r7, #24]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	18d1      	adds	r1, r2, r3
 800183c:	88ba      	ldrh	r2, [r7, #4]
 800183e:	8b3b      	ldrh	r3, [r7, #24]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	1ad2      	subs	r2, r2, r3
 8001844:	8bbb      	ldrh	r3, [r7, #28]
 8001846:	f7ff fdb4 	bl	80013b2 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 800184a:	8b3a      	ldrh	r2, [r7, #24]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	18d0      	adds	r0, r2, r3
 8001850:	8b3a      	ldrh	r2, [r7, #24]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	18d1      	adds	r1, r2, r3
 8001856:	8b3a      	ldrh	r2, [r7, #24]
 8001858:	8bbb      	ldrh	r3, [r7, #28]
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	2301      	movs	r3, #1
 800185e:	f7ff fe3a 	bl	80014d6 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8001862:	88fa      	ldrh	r2, [r7, #6]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	441a      	add	r2, r3
 8001868:	8b3b      	ldrh	r3, [r7, #24]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	1e58      	subs	r0, r3, #1
 800186e:	8b3a      	ldrh	r2, [r7, #24]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	18d1      	adds	r1, r2, r3
 8001874:	8b3a      	ldrh	r2, [r7, #24]
 8001876:	8bbb      	ldrh	r3, [r7, #28]
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2302      	movs	r3, #2
 800187c:	f7ff fe2b 	bl	80014d6 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8001880:	88fa      	ldrh	r2, [r7, #6]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	441a      	add	r2, r3
 8001886:	8b3b      	ldrh	r3, [r7, #24]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	1e58      	subs	r0, r3, #1
 800188c:	88ba      	ldrh	r2, [r7, #4]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	441a      	add	r2, r3
 8001892:	8b3b      	ldrh	r3, [r7, #24]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	1e59      	subs	r1, r3, #1
 8001898:	8b3a      	ldrh	r2, [r7, #24]
 800189a:	8bbb      	ldrh	r3, [r7, #28]
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	2304      	movs	r3, #4
 80018a0:	f7ff fe19 	bl	80014d6 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 80018a4:	8b3a      	ldrh	r2, [r7, #24]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	18d0      	adds	r0, r2, r3
 80018aa:	88ba      	ldrh	r2, [r7, #4]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	441a      	add	r2, r3
 80018b0:	8b3b      	ldrh	r3, [r7, #24]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	1e59      	subs	r1, r3, #1
 80018b6:	8b3a      	ldrh	r2, [r7, #24]
 80018b8:	8bbb      	ldrh	r3, [r7, #28]
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	2308      	movs	r3, #8
 80018be:	f7ff fe0a 	bl	80014d6 <GFX_DrawCircleHelper>
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 80018ca:	b590      	push	{r4, r7, lr}
 80018cc:	b087      	sub	sp, #28
 80018ce:	af02      	add	r7, sp, #8
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	4611      	mov	r1, r2
 80018d6:	461a      	mov	r2, r3
 80018d8:	460b      	mov	r3, r1
 80018da:	80fb      	strh	r3, [r7, #6]
 80018dc:	4613      	mov	r3, r2
 80018de:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 80018e0:	8c3a      	ldrh	r2, [r7, #32]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	18d0      	adds	r0, r2, r3
 80018e6:	8c3b      	ldrh	r3, [r7, #32]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	88fa      	ldrh	r2, [r7, #6]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	88b9      	ldrh	r1, [r7, #4]
 80018f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	460b      	mov	r3, r1
 80018fa:	68b9      	ldr	r1, [r7, #8]
 80018fc:	f7ff fdc9 	bl	8001492 <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001900:	88fa      	ldrh	r2, [r7, #6]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	441a      	add	r2, r3
 8001906:	8c3b      	ldrh	r3, [r7, #32]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	1e58      	subs	r0, r3, #1
 800190c:	8c3a      	ldrh	r2, [r7, #32]
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	18d1      	adds	r1, r2, r3
 8001912:	8c3b      	ldrh	r3, [r7, #32]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	88ba      	ldrh	r2, [r7, #4]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	b29b      	uxth	r3, r3
 800191e:	3b01      	subs	r3, #1
 8001920:	b29b      	uxth	r3, r3
 8001922:	b21b      	sxth	r3, r3
 8001924:	8c3c      	ldrh	r4, [r7, #32]
 8001926:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001928:	9201      	str	r2, [sp, #4]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2301      	movs	r3, #1
 800192e:	4622      	mov	r2, r4
 8001930:	f7ff feb1 	bl	8001696 <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8001934:	8c3a      	ldrh	r2, [r7, #32]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	18d0      	adds	r0, r2, r3
 800193a:	8c3a      	ldrh	r2, [r7, #32]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	18d1      	adds	r1, r2, r3
 8001940:	8c3b      	ldrh	r3, [r7, #32]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	b29b      	uxth	r3, r3
 8001946:	88ba      	ldrh	r2, [r7, #4]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	b29b      	uxth	r3, r3
 800194c:	3b01      	subs	r3, #1
 800194e:	b29b      	uxth	r3, r3
 8001950:	b21b      	sxth	r3, r3
 8001952:	8c3c      	ldrh	r4, [r7, #32]
 8001954:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001956:	9201      	str	r2, [sp, #4]
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2302      	movs	r3, #2
 800195c:	4622      	mov	r2, r4
 800195e:	f7ff fe9a 	bl	8001696 <GFX_DrawFillCircleHelper>
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
	...

0800196c <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <EF_SetFont+0x1c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	2000034c 	.word	0x2000034c

0800198c <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <EF_GetFontHeight+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	781b      	ldrb	r3, [r3, #0]
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	2000034c 	.word	0x2000034c

080019a4 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <EF_GetFontStartChar+0x14>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	785b      	ldrb	r3, [r3, #1]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	2000034c 	.word	0x2000034c

080019bc <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <EF_GetFontEndChar+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	789b      	ldrb	r3, [r3, #2]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	2000034c 	.word	0x2000034c

080019d4 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <EF_GetFontSpaceWidth+0x14>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	78db      	ldrb	r3, [r3, #3]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	2000034c 	.word	0x2000034c

080019ec <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	460a      	mov	r2, r1
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	4613      	mov	r3, r2
 80019fa:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	2bc5      	cmp	r3, #197	; 0xc5
 8001a00:	d052      	beq.n	8001aa8 <EF_DecodePolish+0xbc>
 8001a02:	2bc5      	cmp	r3, #197	; 0xc5
 8001a04:	f300 80e7 	bgt.w	8001bd6 <EF_DecodePolish+0x1ea>
 8001a08:	2bc3      	cmp	r3, #195	; 0xc3
 8001a0a:	d002      	beq.n	8001a12 <EF_DecodePolish+0x26>
 8001a0c:	2bc4      	cmp	r3, #196	; 0xc4
 8001a0e:	d00a      	beq.n	8001a26 <EF_DecodePolish+0x3a>
 8001a10:	e0e1      	b.n	8001bd6 <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001a12:	79bb      	ldrb	r3, [r7, #6]
 8001a14:	2b93      	cmp	r3, #147	; 0x93
 8001a16:	d002      	beq.n	8001a1e <EF_DecodePolish+0x32>
 8001a18:	2bb3      	cmp	r3, #179	; 0xb3
 8001a1a:	d002      	beq.n	8001a22 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 8001a1c:	e0db      	b.n	8001bd6 <EF_DecodePolish+0x1ea>
			return 0x84;
 8001a1e:	2384      	movs	r3, #132	; 0x84
 8001a20:	e0da      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			return 0x8D;
 8001a22:	238d      	movs	r3, #141	; 0x8d
 8001a24:	e0d8      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 8001a26:	79bb      	ldrb	r3, [r7, #6]
 8001a28:	3b84      	subs	r3, #132	; 0x84
 8001a2a:	2b15      	cmp	r3, #21
 8001a2c:	f200 80d0 	bhi.w	8001bd0 <EF_DecodePolish+0x1e4>
 8001a30:	a201      	add	r2, pc, #4	; (adr r2, 8001a38 <EF_DecodePolish+0x4c>)
 8001a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a36:	bf00      	nop
 8001a38:	08001a91 	.word	0x08001a91
 8001a3c:	08001a9d 	.word	0x08001a9d
 8001a40:	08001a99 	.word	0x08001a99
 8001a44:	08001aa5 	.word	0x08001aa5
 8001a48:	08001bd1 	.word	0x08001bd1
 8001a4c:	08001bd1 	.word	0x08001bd1
 8001a50:	08001bd1 	.word	0x08001bd1
 8001a54:	08001bd1 	.word	0x08001bd1
 8001a58:	08001bd1 	.word	0x08001bd1
 8001a5c:	08001bd1 	.word	0x08001bd1
 8001a60:	08001bd1 	.word	0x08001bd1
 8001a64:	08001bd1 	.word	0x08001bd1
 8001a68:	08001bd1 	.word	0x08001bd1
 8001a6c:	08001bd1 	.word	0x08001bd1
 8001a70:	08001bd1 	.word	0x08001bd1
 8001a74:	08001bd1 	.word	0x08001bd1
 8001a78:	08001bd1 	.word	0x08001bd1
 8001a7c:	08001bd1 	.word	0x08001bd1
 8001a80:	08001bd1 	.word	0x08001bd1
 8001a84:	08001bd1 	.word	0x08001bd1
 8001a88:	08001a95 	.word	0x08001a95
 8001a8c:	08001aa1 	.word	0x08001aa1
		{
		case 0x84: // Ą
			return 0x7F;
 8001a90:	237f      	movs	r3, #127	; 0x7f
 8001a92:	e0a1      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001a94:	2381      	movs	r3, #129	; 0x81
 8001a96:	e09f      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	e09d      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001a9c:	2388      	movs	r3, #136	; 0x88
 8001a9e:	e09b      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001aa0:	238a      	movs	r3, #138	; 0x8a
 8001aa2:	e099      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001aa4:	2389      	movs	r3, #137	; 0x89
 8001aa6:	e097      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 8001aa8:	79bb      	ldrb	r3, [r7, #6]
 8001aaa:	3b81      	subs	r3, #129	; 0x81
 8001aac:	2b3b      	cmp	r3, #59	; 0x3b
 8001aae:	f200 8091 	bhi.w	8001bd4 <EF_DecodePolish+0x1e8>
 8001ab2:	a201      	add	r2, pc, #4	; (adr r2, 8001ab8 <EF_DecodePolish+0xcc>)
 8001ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab8:	08001ba9 	.word	0x08001ba9
 8001abc:	08001bbd 	.word	0x08001bbd
 8001ac0:	08001bad 	.word	0x08001bad
 8001ac4:	08001bc1 	.word	0x08001bc1
 8001ac8:	08001bd5 	.word	0x08001bd5
 8001acc:	08001bd5 	.word	0x08001bd5
 8001ad0:	08001bd5 	.word	0x08001bd5
 8001ad4:	08001bd5 	.word	0x08001bd5
 8001ad8:	08001bd5 	.word	0x08001bd5
 8001adc:	08001bd5 	.word	0x08001bd5
 8001ae0:	08001bd5 	.word	0x08001bd5
 8001ae4:	08001bd5 	.word	0x08001bd5
 8001ae8:	08001bd5 	.word	0x08001bd5
 8001aec:	08001bd5 	.word	0x08001bd5
 8001af0:	08001bd5 	.word	0x08001bd5
 8001af4:	08001bd5 	.word	0x08001bd5
 8001af8:	08001bd5 	.word	0x08001bd5
 8001afc:	08001bd5 	.word	0x08001bd5
 8001b00:	08001bd5 	.word	0x08001bd5
 8001b04:	08001bd5 	.word	0x08001bd5
 8001b08:	08001bd5 	.word	0x08001bd5
 8001b0c:	08001bd5 	.word	0x08001bd5
 8001b10:	08001bd5 	.word	0x08001bd5
 8001b14:	08001bd5 	.word	0x08001bd5
 8001b18:	08001bd5 	.word	0x08001bd5
 8001b1c:	08001bb1 	.word	0x08001bb1
 8001b20:	08001bc5 	.word	0x08001bc5
 8001b24:	08001bd5 	.word	0x08001bd5
 8001b28:	08001bd5 	.word	0x08001bd5
 8001b2c:	08001bd5 	.word	0x08001bd5
 8001b30:	08001bd5 	.word	0x08001bd5
 8001b34:	08001bd5 	.word	0x08001bd5
 8001b38:	08001bd5 	.word	0x08001bd5
 8001b3c:	08001bd5 	.word	0x08001bd5
 8001b40:	08001bd5 	.word	0x08001bd5
 8001b44:	08001bd5 	.word	0x08001bd5
 8001b48:	08001bd5 	.word	0x08001bd5
 8001b4c:	08001bd5 	.word	0x08001bd5
 8001b50:	08001bd5 	.word	0x08001bd5
 8001b54:	08001bd5 	.word	0x08001bd5
 8001b58:	08001bd5 	.word	0x08001bd5
 8001b5c:	08001bd5 	.word	0x08001bd5
 8001b60:	08001bd5 	.word	0x08001bd5
 8001b64:	08001bd5 	.word	0x08001bd5
 8001b68:	08001bd5 	.word	0x08001bd5
 8001b6c:	08001bd5 	.word	0x08001bd5
 8001b70:	08001bd5 	.word	0x08001bd5
 8001b74:	08001bd5 	.word	0x08001bd5
 8001b78:	08001bd5 	.word	0x08001bd5
 8001b7c:	08001bd5 	.word	0x08001bd5
 8001b80:	08001bd5 	.word	0x08001bd5
 8001b84:	08001bd5 	.word	0x08001bd5
 8001b88:	08001bd5 	.word	0x08001bd5
 8001b8c:	08001bd5 	.word	0x08001bd5
 8001b90:	08001bd5 	.word	0x08001bd5
 8001b94:	08001bd5 	.word	0x08001bd5
 8001b98:	08001bb5 	.word	0x08001bb5
 8001b9c:	08001bc9 	.word	0x08001bc9
 8001ba0:	08001bb9 	.word	0x08001bb9
 8001ba4:	08001bcd 	.word	0x08001bcd
		{
		case 0x81: // Ł
			return 0x82;
 8001ba8:	2382      	movs	r3, #130	; 0x82
 8001baa:	e015      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001bac:	2383      	movs	r3, #131	; 0x83
 8001bae:	e013      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001bb0:	2385      	movs	r3, #133	; 0x85
 8001bb2:	e011      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001bb4:	2386      	movs	r3, #134	; 0x86
 8001bb6:	e00f      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 8001bb8:	2387      	movs	r3, #135	; 0x87
 8001bba:	e00d      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001bbc:	238b      	movs	r3, #139	; 0x8b
 8001bbe:	e00b      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001bc0:	238c      	movs	r3, #140	; 0x8c
 8001bc2:	e009      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001bc4:	238e      	movs	r3, #142	; 0x8e
 8001bc6:	e007      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 8001bc8:	238f      	movs	r3, #143	; 0x8f
 8001bca:	e005      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001bcc:	2390      	movs	r3, #144	; 0x90
 8001bce:	e003      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
		break;
 8001bd0:	bf00      	nop
 8001bd2:	e000      	b.n	8001bd6 <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001bd4:	bf00      	nop
	}

	return 0;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001be4:	b5b0      	push	{r4, r5, r7, lr}
 8001be6:	b08a      	sub	sp, #40	; 0x28
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	4604      	mov	r4, r0
 8001bec:	4608      	mov	r0, r1
 8001bee:	4611      	mov	r1, r2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4623      	mov	r3, r4
 8001bf4:	71fb      	strb	r3, [r7, #7]
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	80bb      	strh	r3, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	807b      	strh	r3, [r7, #2]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001c02:	f7ff fecf 	bl	80019a4 <EF_GetFontStartChar>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	2b20      	cmp	r3, #32
 8001c14:	d120      	bne.n	8001c58 <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 8001c16:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d114      	bne.n	8001c48 <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 8001c1e:	88bc      	ldrh	r4, [r7, #4]
 8001c20:	887d      	ldrh	r5, [r7, #2]
 8001c22:	f7ff fed7 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001c26:	4603      	mov	r3, r0
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	0052      	lsls	r2, r2, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	4b5a      	ldr	r3, [pc, #360]	; (8001d9c <EF_PutChar+0x1b8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b299      	uxth	r1, r3
 8001c3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4629      	mov	r1, r5
 8001c42:	4620      	mov	r0, r4
 8001c44:	f7ff fc25 	bl	8001492 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 8001c48:	f7ff fec4 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	0052      	lsls	r2, r2, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	e09c      	b.n	8001d92 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 8001c58:	f7ff fea4 	bl	80019a4 <EF_GetFontStartChar>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d201      	bcs.n	8001c6a <EF_PutChar+0x86>
	{
		return 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e093      	b.n	8001d92 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 8001c6a:	f7ff fea7 	bl	80019bc <EF_GetFontEndChar>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	7c7b      	ldrb	r3, [r7, #17]
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d901      	bls.n	8001c7c <EF_PutChar+0x98>
	{
		return 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	e08a      	b.n	8001d92 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001c7c:	4b47      	ldr	r3, [pc, #284]	; (8001d9c <EF_PutChar+0x1b8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	7c7b      	ldrb	r3, [r7, #17]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001c8a:	4b44      	ldr	r3, [pc, #272]	; (8001d9c <EF_PutChar+0x1b8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	4a42      	ldr	r2, [pc, #264]	; (8001d9c <EF_PutChar+0x1b8>)
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	6851      	ldr	r1, [r2, #4]
 8001c96:	7c7a      	ldrb	r2, [r7, #17]
 8001c98:	0092      	lsls	r2, r2, #2
 8001c9a:	440a      	add	r2, r1
 8001c9c:	8852      	ldrh	r2, [r2, #2]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	83fb      	strh	r3, [r7, #30]
 8001ca6:	e066      	b.n	8001d76 <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	777b      	strb	r3, [r7, #29]
 8001cb2:	e053      	b.n	8001d5c <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001cba:	7efb      	ldrb	r3, [r7, #27]
 8001cbc:	2b07      	cmp	r3, #7
 8001cbe:	d905      	bls.n	8001ccc <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001cc0:	2308      	movs	r3, #8
 8001cc2:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001cc4:	7efb      	ldrb	r3, [r7, #27]
 8001cc6:	3b08      	subs	r3, #8
 8001cc8:	76fb      	strb	r3, [r7, #27]
 8001cca:	e001      	b.n	8001cd0 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001ccc:	7efb      	ldrb	r3, [r7, #27]
 8001cce:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	74bb      	strb	r3, [r7, #18]
 8001cd4:	e038      	b.n	8001d48 <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001cd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	da15      	bge.n	8001d0a <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001cde:	7f7b      	ldrb	r3, [r7, #29]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	88bb      	ldrh	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	7cbb      	ldrb	r3, [r7, #18]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b218      	sxth	r0, r3
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	8bfb      	ldrh	r3, [r7, #30]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	883a      	ldrh	r2, [r7, #0]
 8001d02:	4619      	mov	r1, r3
 8001d04:	f000 f9d8 	bl	80020b8 <ILI9341_WritePixel>
 8001d08:	e018      	b.n	8001d3c <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001d0a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d114      	bne.n	8001d3c <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001d12:	7f7b      	ldrb	r3, [r7, #29]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	88bb      	ldrh	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	7cbb      	ldrb	r3, [r7, #18]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	b218      	sxth	r0, r3
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	8bfb      	ldrh	r3, [r7, #30]
 8001d2e:	4413      	add	r3, r2
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d36:	4619      	mov	r1, r3
 8001d38:	f000 f9be 	bl	80020b8 <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001d3c:	7cbb      	ldrb	r3, [r7, #18]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	74bb      	strb	r3, [r7, #18]
 8001d42:	7cfb      	ldrb	r3, [r7, #19]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	74fb      	strb	r3, [r7, #19]
 8001d48:	7cba      	ldrb	r2, [r7, #18]
 8001d4a:	7f3b      	ldrb	r3, [r7, #28]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d3c2      	bcc.n	8001cd6 <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	3301      	adds	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001d56:	7f7b      	ldrb	r3, [r7, #29]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	777b      	strb	r3, [r7, #29]
 8001d5c:	7f7a      	ldrb	r2, [r7, #29]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	da00      	bge.n	8001d6a <EF_PutChar+0x186>
 8001d68:	3307      	adds	r3, #7
 8001d6a:	10db      	asrs	r3, r3, #3
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	dda1      	ble.n	8001cb4 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001d70:	8bfb      	ldrh	r3, [r7, #30]
 8001d72:	3301      	adds	r3, #1
 8001d74:	83fb      	strh	r3, [r7, #30]
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <EF_PutChar+0x1b8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	8bfa      	ldrh	r2, [r7, #30]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d391      	bcc.n	8001ca8 <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <EF_PutChar+0x1b8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	7c7b      	ldrb	r3, [r7, #17]
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	781b      	ldrb	r3, [r3, #0]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3720      	adds	r7, #32
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bdb0      	pop	{r4, r5, r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	2000034c 	.word	0x2000034c

08001da0 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	4608      	mov	r0, r1
 8001daa:	4611      	mov	r1, r2
 8001dac:	461a      	mov	r2, r3
 8001dae:	4603      	mov	r3, r0
 8001db0:	817b      	strh	r3, [r7, #10]
 8001db2:	460b      	mov	r3, r1
 8001db4:	813b      	strh	r3, [r7, #8]
 8001db6:	4613      	mov	r3, r2
 8001db8:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f7fe fa1a 	bl	80001f4 <strlen>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001dc8:	2300      	movs	r3, #0
 8001dca:	75fb      	strb	r3, [r7, #23]
 8001dcc:	e05a      	b.n	8001e84 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2bc5      	cmp	r3, #197	; 0xc5
 8001dd8:	d817      	bhi.n	8001e0a <EF_PutString+0x6a>
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2bc2      	cmp	r3, #194	; 0xc2
 8001de4:	d911      	bls.n	8001e0a <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	7818      	ldrb	r0, [r3, #0]
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
 8001df0:	3301      	adds	r3, #1
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	4413      	add	r3, r2
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7ff fdf7 	bl	80019ec <EF_DecodePolish>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
 8001e04:	3301      	adds	r3, #1
 8001e06:	75fb      	strb	r3, [r7, #23]
 8001e08:	e004      	b.n	8001e14 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001e14:	897a      	ldrh	r2, [r7, #10]
 8001e16:	8abb      	ldrh	r3, [r7, #20]
 8001e18:	4413      	add	r3, r2
 8001e1a:	b299      	uxth	r1, r3
 8001e1c:	88fc      	ldrh	r4, [r7, #6]
 8001e1e:	893a      	ldrh	r2, [r7, #8]
 8001e20:	7cf8      	ldrb	r0, [r7, #19]
 8001e22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	4623      	mov	r3, r4
 8001e2e:	f7ff fed9 	bl	8001be4 <EF_PutChar>
 8001e32:	4603      	mov	r3, r0
 8001e34:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001e36:	7c7b      	ldrb	r3, [r7, #17]
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	8abb      	ldrh	r3, [r7, #20]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001e40:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d113      	bne.n	8001e70 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001e48:	897a      	ldrh	r2, [r7, #10]
 8001e4a:	8abb      	ldrh	r3, [r7, #20]
 8001e4c:	18d4      	adds	r4, r2, r3
 8001e4e:	893d      	ldrh	r5, [r7, #8]
 8001e50:	f7ff fdc0 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001e54:	4603      	mov	r3, r0
 8001e56:	b29e      	uxth	r6, r3
 8001e58:	f7ff fd98 	bl	800198c <EF_GetFontHeight>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	4613      	mov	r3, r2
 8001e66:	4632      	mov	r2, r6
 8001e68:	4629      	mov	r1, r5
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f7ff fb11 	bl	8001492 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001e70:	f7ff fdb0 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001e74:	4603      	mov	r3, r0
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	8abb      	ldrh	r3, [r7, #20]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001e7e:	7dfb      	ldrb	r3, [r7, #23]
 8001e80:	3301      	adds	r3, #1
 8001e82:	75fb      	strb	r3, [r7, #23]
 8001e84:	7dfa      	ldrb	r2, [r7, #23]
 8001e86:	7cbb      	ldrb	r3, [r7, #18]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d3a0      	bcc.n	8001dce <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001e8c:	8abb      	ldrh	r3, [r7, #20]
 8001e8e:	b2dc      	uxtb	r4, r3
 8001e90:	f7ff fda0 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001e94:	4603      	mov	r3, r0
 8001e96:	1ae3      	subs	r3, r4, r3
 8001e98:	b2db      	uxtb	r3, r3
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	371c      	adds	r7, #28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ea2 <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f008 fb7c 	bl	800a5a8 <HAL_Delay>
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001ec2:	e014      	b.n	8001eee <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <ILI9341_SendToTFT+0x5c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d10c      	bne.n	8001eee <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <ILI9341_SendToTFT+0x5c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	330c      	adds	r3, #12
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	7812      	ldrb	r2, [r2, #0]
 8001ee0:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1e7      	bne.n	8001ec4 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001ef4:	bf00      	nop
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <ILI9341_SendToTFT+0x5c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f02:	2b80      	cmp	r3, #128	; 0x80
 8001f04:	d0f7      	beq.n	8001ef6 <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001f06:	bf00      	nop
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	20000350 	.word	0x20000350

08001f18 <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f22:	2200      	movs	r2, #0
 8001f24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f28:	480b      	ldr	r0, [pc, #44]	; (8001f58 <ILI9341_SendComand+0x40>)
 8001f2a:	f009 faad 	bl	800b488 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f34:	4808      	ldr	r0, [pc, #32]	; (8001f58 <ILI9341_SendComand+0x40>)
 8001f36:	f009 faa7 	bl	800b488 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001f3a:	1dfb      	adds	r3, r7, #7
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ffba 	bl	8001eb8 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f44:	2201      	movs	r2, #1
 8001f46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f4a:	4803      	ldr	r0, [pc, #12]	; (8001f58 <ILI9341_SendComand+0x40>)
 8001f4c:	f009 fa9c 	bl	800b488 <HAL_GPIO_WritePin>
#endif
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40020400 	.word	0x40020400

08001f5c <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f70:	4811      	ldr	r0, [pc, #68]	; (8001fb8 <ILI9341_SendCommandAndData+0x5c>)
 8001f72:	f009 fa89 	bl	800b488 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f7c:	480e      	ldr	r0, [pc, #56]	; (8001fb8 <ILI9341_SendCommandAndData+0x5c>)
 8001f7e:	f009 fa83 	bl	800b488 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001f82:	f107 030f 	add.w	r3, r7, #15
 8001f86:	2101      	movs	r1, #1
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff95 	bl	8001eb8 <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f94:	4808      	ldr	r0, [pc, #32]	; (8001fb8 <ILI9341_SendCommandAndData+0x5c>)
 8001f96:	f009 fa77 	bl	800b488 <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	68b8      	ldr	r0, [r7, #8]
 8001f9e:	f7ff ff8b 	bl	8001eb8 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa8:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <ILI9341_SendCommandAndData+0x5c>)
 8001faa:	f009 fa6d 	bl	800b488 <HAL_GPIO_WritePin>
#endif

}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40020400 	.word	0x40020400

08001fbc <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d820      	bhi.n	800200e <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d816      	bhi.n	8002000 <ILI9341_SetRotation+0x44>
 8001fd2:	a201      	add	r2, pc, #4	; (adr r2, 8001fd8 <ILI9341_SetRotation+0x1c>)
 8001fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd8:	08001fe9 	.word	0x08001fe9
 8001fdc:	08001fef 	.word	0x08001fef
 8001fe0:	08001ff5 	.word	0x08001ff5
 8001fe4:	08001ffb 	.word	0x08001ffb
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001fe8:	2348      	movs	r3, #72	; 0x48
 8001fea:	71fb      	strb	r3, [r7, #7]
		break;
 8001fec:	e008      	b.n	8002000 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001fee:	2328      	movs	r3, #40	; 0x28
 8001ff0:	71fb      	strb	r3, [r7, #7]
		break;
 8001ff2:	e005      	b.n	8002000 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001ff4:	2388      	movs	r3, #136	; 0x88
 8001ff6:	71fb      	strb	r3, [r7, #7]
		break;
 8001ff8:	e002      	b.n	8002000 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001ffa:	23e8      	movs	r3, #232	; 0xe8
 8001ffc:	71fb      	strb	r3, [r7, #7]
		break;
 8001ffe:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8002000:	1dfb      	adds	r3, r7, #7
 8002002:	2201      	movs	r2, #1
 8002004:	4619      	mov	r1, r3
 8002006:	2036      	movs	r0, #54	; 0x36
 8002008:	f7ff ffa8 	bl	8001f5c <ILI9341_SendCommandAndData>
 800200c:	e000      	b.n	8002010 <ILI9341_SetRotation+0x54>
		return;
 800200e:	bf00      	nop
}
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop

08002018 <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	4604      	mov	r4, r0
 8002020:	4608      	mov	r0, r1
 8002022:	4611      	mov	r1, r2
 8002024:	461a      	mov	r2, r3
 8002026:	4623      	mov	r3, r4
 8002028:	80fb      	strh	r3, [r7, #6]
 800202a:	4603      	mov	r3, r0
 800202c:	80bb      	strh	r3, [r7, #4]
 800202e:	460b      	mov	r3, r1
 8002030:	807b      	strh	r3, [r7, #2]
 8002032:	4613      	mov	r3, r2
 8002034:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8002036:	88fa      	ldrh	r2, [r7, #6]
 8002038:	887b      	ldrh	r3, [r7, #2]
 800203a:	4413      	add	r3, r2
 800203c:	b29b      	uxth	r3, r3
 800203e:	3b01      	subs	r3, #1
 8002040:	81fb      	strh	r3, [r7, #14]
 8002042:	88ba      	ldrh	r2, [r7, #4]
 8002044:	883b      	ldrh	r3, [r7, #0]
 8002046:	4413      	add	r3, r2
 8002048:	b29b      	uxth	r3, r3
 800204a:	3b01      	subs	r3, #1
 800204c:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	b29b      	uxth	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 800205e:	89fb      	ldrh	r3, [r7, #14]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	b29b      	uxth	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8002068:	89fb      	ldrh	r3, [r7, #14]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 800206e:	f107 0308 	add.w	r3, r7, #8
 8002072:	2204      	movs	r2, #4
 8002074:	4619      	mov	r1, r3
 8002076:	202a      	movs	r0, #42	; 0x2a
 8002078:	f7ff ff70 	bl	8001f5c <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 800207c:	88bb      	ldrh	r3, [r7, #4]
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	b29b      	uxth	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8002086:	88bb      	ldrh	r3, [r7, #4]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 800208c:	89bb      	ldrh	r3, [r7, #12]
 800208e:	0a1b      	lsrs	r3, r3, #8
 8002090:	b29b      	uxth	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8002096:	89bb      	ldrh	r3, [r7, #12]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	2204      	movs	r2, #4
 80020a2:	4619      	mov	r1, r3
 80020a4:	202b      	movs	r0, #43	; 0x2b
 80020a6:	f7ff ff59 	bl	8001f5c <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 80020aa:	202c      	movs	r0, #44	; 0x2c
 80020ac:	f7ff ff34 	bl	8001f18 <ILI9341_SendComand>

}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd90      	pop	{r4, r7, pc}

080020b8 <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
 80020c2:	460b      	mov	r3, r1
 80020c4:	80bb      	strh	r3, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 80020ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	db21      	blt.n	8002116 <ILI9341_WritePixel+0x5e>
 80020d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020d6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80020da:	da1c      	bge.n	8002116 <ILI9341_WritePixel+0x5e>
 80020dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	db18      	blt.n	8002116 <ILI9341_WritePixel+0x5e>
 80020e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020e8:	2bef      	cmp	r3, #239	; 0xef
 80020ea:	dc14      	bgt.n	8002116 <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 80020ec:	88f8      	ldrh	r0, [r7, #6]
 80020ee:	88b9      	ldrh	r1, [r7, #4]
 80020f0:	2301      	movs	r3, #1
 80020f2:	2201      	movs	r2, #1
 80020f4:	f7ff ff90 	bl	8002018 <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 80020f8:	887b      	ldrh	r3, [r7, #2]
 80020fa:	0a1b      	lsrs	r3, r3, #8
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8002102:	887b      	ldrh	r3, [r7, #2]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8002108:	f107 030c 	add.w	r3, r7, #12
 800210c:	2202      	movs	r2, #2
 800210e:	4619      	mov	r1, r3
 8002110:	202c      	movs	r0, #44	; 0x2c
 8002112:	f7ff ff23 	bl	8001f5c <ILI9341_SendCommandAndData>
	}

}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b084      	sub	sp, #16
 8002122:	af00      	add	r7, sp, #0
 8002124:	60ba      	str	r2, [r7, #8]
 8002126:	461a      	mov	r2, r3
 8002128:	4603      	mov	r3, r0
 800212a:	81fb      	strh	r3, [r7, #14]
 800212c:	460b      	mov	r3, r1
 800212e:	81bb      	strh	r3, [r7, #12]
 8002130:	4613      	mov	r3, r2
 8002132:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8002134:	89fa      	ldrh	r2, [r7, #14]
 8002136:	88fb      	ldrh	r3, [r7, #6]
 8002138:	4413      	add	r3, r2
 800213a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800213e:	dc14      	bgt.n	800216a <ILI9341_DrawImage+0x4c>
 8002140:	89ba      	ldrh	r2, [r7, #12]
 8002142:	8b3b      	ldrh	r3, [r7, #24]
 8002144:	4413      	add	r3, r2
 8002146:	2bf0      	cmp	r3, #240	; 0xf0
 8002148:	dc0f      	bgt.n	800216a <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 800214a:	8b3b      	ldrh	r3, [r7, #24]
 800214c:	88fa      	ldrh	r2, [r7, #6]
 800214e:	89b9      	ldrh	r1, [r7, #12]
 8002150:	89f8      	ldrh	r0, [r7, #14]
 8002152:	f7ff ff61 	bl	8002018 <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	8b3a      	ldrh	r2, [r7, #24]
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	461a      	mov	r2, r3
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	202c      	movs	r0, #44	; 0x2c
 8002166:	f7ff fef9 	bl	8001f5c <ILI9341_SendCommandAndData>
	}
}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 800217e:	23f0      	movs	r3, #240	; 0xf0
 8002180:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002184:	2100      	movs	r1, #0
 8002186:	2000      	movs	r0, #0
 8002188:	f7ff ff46 	bl	8002018 <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 800218c:	202c      	movs	r0, #44	; 0x2c
 800218e:	f7ff fec3 	bl	8001f18 <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8002192:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002196:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8002198:	2200      	movs	r2, #0
 800219a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800219e:	4822      	ldr	r0, [pc, #136]	; (8002228 <ILI9341_ClearDisplay+0xb4>)
 80021a0:	f009 f972 	bl	800b488 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 80021a4:	2201      	movs	r2, #1
 80021a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021aa:	481f      	ldr	r0, [pc, #124]	; (8002228 <ILI9341_ClearDisplay+0xb4>)
 80021ac:	f009 f96c 	bl	800b488 <HAL_GPIO_WritePin>

    while (Length > 0U)
 80021b0:	e023      	b.n	80021fa <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 80021b2:	4b1e      	ldr	r3, [pc, #120]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d11b      	bne.n	80021fa <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	4b18      	ldr	r3, [pc, #96]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	330c      	adds	r3, #12
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 80021d4:	bf00      	nop
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d1f7      	bne.n	80021d6 <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	330c      	adds	r3, #12
 80021ee:	88fa      	ldrh	r2, [r7, #6]
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1d8      	bne.n	80021b2 <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8002200:	bf00      	nop
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220e:	2b80      	cmp	r3, #128	; 0x80
 8002210:	d0f7      	beq.n	8002202 <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8002212:	2201      	movs	r2, #1
 8002214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002218:	4803      	ldr	r0, [pc, #12]	; (8002228 <ILI9341_ClearDisplay+0xb4>)
 800221a:	f009 f935 	bl	800b488 <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40020400 	.word	0x40020400
 800222c:	20000350 	.word	0x20000350

08002230 <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8002238:	4a24      	ldr	r2, [pc, #144]	; (80022cc <ILI9341_Init+0x9c>)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 800223e:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <ILI9341_Init+0xa0>)
 8002240:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002250:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 8002252:	2200      	movs	r2, #0
 8002254:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002258:	481e      	ldr	r0, [pc, #120]	; (80022d4 <ILI9341_Init+0xa4>)
 800225a:	f009 f915 	bl	800b488 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 800225e:	200a      	movs	r0, #10
 8002260:	f7ff fe1f 	bl	8001ea2 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8002264:	2201      	movs	r2, #1
 8002266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800226a:	481a      	ldr	r0, [pc, #104]	; (80022d4 <ILI9341_Init+0xa4>)
 800226c:	f009 f90c 	bl	800b488 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8002270:	200a      	movs	r0, #10
 8002272:	f7ff fe16 	bl	8001ea2 <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8002276:	e019      	b.n	80022ac <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	60fa      	str	r2, [r7, #12]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 8002282:	7abb      	ldrb	r3, [r7, #10]
 8002284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002288:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 800228a:	7a7a      	ldrb	r2, [r7, #9]
 800228c:	7afb      	ldrb	r3, [r7, #11]
 800228e:	68f9      	ldr	r1, [r7, #12]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fe63 	bl	8001f5c <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 8002296:	7a7b      	ldrb	r3, [r7, #9]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4413      	add	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 800229e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	da02      	bge.n	80022ac <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 80022a6:	2096      	movs	r0, #150	; 0x96
 80022a8:	f7ff fdfb 	bl	8001ea2 <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	60fa      	str	r2, [r7, #12]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	72fb      	strb	r3, [r7, #11]
 80022b6:	7afb      	ldrb	r3, [r7, #11]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1dd      	bne.n	8002278 <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 80022bc:	2003      	movs	r0, #3
 80022be:	f7ff fe7d 	bl	8001fbc <ILI9341_SetRotation>
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000350 	.word	0x20000350
 80022d0:	0801658c 	.word	0x0801658c
 80022d4:	40020400 	.word	0x40020400

080022d8 <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 80022de:	2200      	movs	r2, #0
 80022e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022e4:	480a      	ldr	r0, [pc, #40]	; (8002310 <XPT2046_GetRawData+0x38>)
 80022e6:	f009 f8cf 	bl	800b488 <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <XPT2046_GetRawData+0x3c>)
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	2305      	movs	r3, #5
 80022f6:	4a08      	ldr	r2, [pc, #32]	; (8002318 <XPT2046_GetRawData+0x40>)
 80022f8:	4908      	ldr	r1, [pc, #32]	; (800231c <XPT2046_GetRawData+0x44>)
 80022fa:	f00c fee6 	bl	800f0ca <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 80022fe:	2201      	movs	r2, #1
 8002300:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <XPT2046_GetRawData+0x38>)
 8002306:	f009 f8bf 	bl	800b488 <HAL_GPIO_WritePin>
#endif
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40020400 	.word	0x40020400
 8002314:	20000230 	.word	0x20000230
 8002318:	20000240 	.word	0x20000240
 800231c:	20000238 	.word	0x20000238

08002320 <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <XPT2046_ReadRawData+0x48>)
 800232c:	785b      	ldrb	r3, [r3, #1]
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	b21a      	sxth	r2, r3
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <XPT2046_ReadRawData+0x48>)
 8002334:	789b      	ldrb	r3, [r3, #2]
 8002336:	b21b      	sxth	r3, r3
 8002338:	4313      	orrs	r3, r2
 800233a:	b21b      	sxth	r3, r3
 800233c:	b29a      	uxth	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <XPT2046_ReadRawData+0x48>)
 8002344:	78db      	ldrb	r3, [r3, #3]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	b21a      	sxth	r2, r3
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <XPT2046_ReadRawData+0x48>)
 800234c:	791b      	ldrb	r3, [r3, #4]
 800234e:	b21b      	sxth	r3, r3
 8002350:	4313      	orrs	r3, r2
 8002352:	b21b      	sxth	r3, r3
 8002354:	b29a      	uxth	r2, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	801a      	strh	r2, [r3, #0]
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000240 	.word	0x20000240

0800236c <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 800236c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 8002378:	f107 020c 	add.w	r2, r7, #12
 800237c:	f107 030e 	add.w	r3, r7, #14
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ffcc 	bl	8002320 <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 8002388:	4b3e      	ldr	r3, [pc, #248]	; (8002484 <XPT2046_ReadTouchPoint+0x118>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d16e      	bne.n	800246e <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 8002390:	4b3d      	ldr	r3, [pc, #244]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 8002392:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002396:	89fb      	ldrh	r3, [r7, #14]
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe f8db 	bl	8000554 <__aeabi_i2d>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4620      	mov	r0, r4
 80023a4:	4629      	mov	r1, r5
 80023a6:	f7fe f93f 	bl	8000628 <__aeabi_dmul>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4690      	mov	r8, r2
 80023b0:	4699      	mov	r9, r3
 80023b2:	4b35      	ldr	r3, [pc, #212]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 80023b4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80023b8:	89bb      	ldrh	r3, [r7, #12]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe f8ca 	bl	8000554 <__aeabi_i2d>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4620      	mov	r0, r4
 80023c6:	4629      	mov	r1, r5
 80023c8:	f7fe f92e 	bl	8000628 <__aeabi_dmul>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4640      	mov	r0, r8
 80023d2:	4649      	mov	r1, r9
 80023d4:	f7fd ff72 	bl	80002bc <__adddf3>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	4b29      	ldr	r3, [pc, #164]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 80023e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80023e6:	f7fd ff69 	bl	80002bc <__adddf3>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	f7fe fbf1 	bl	8000bd8 <__aeabi_d2uiz>
 80023f6:	4603      	mov	r3, r0
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 80023fe:	4b22      	ldr	r3, [pc, #136]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 8002400:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002404:	89fb      	ldrh	r3, [r7, #14]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe f8a4 	bl	8000554 <__aeabi_i2d>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4620      	mov	r0, r4
 8002412:	4629      	mov	r1, r5
 8002414:	f7fe f908 	bl	8000628 <__aeabi_dmul>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4690      	mov	r8, r2
 800241e:	4699      	mov	r9, r3
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 8002422:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002426:	89bb      	ldrh	r3, [r7, #12]
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe f893 	bl	8000554 <__aeabi_i2d>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4620      	mov	r0, r4
 8002434:	4629      	mov	r1, r5
 8002436:	f7fe f8f7 	bl	8000628 <__aeabi_dmul>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4640      	mov	r0, r8
 8002440:	4649      	mov	r1, r9
 8002442:	f7fd ff3b 	bl	80002bc <__adddf3>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4610      	mov	r0, r2
 800244c:	4619      	mov	r1, r3
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 8002450:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002454:	f7fd ff32 	bl	80002bc <__adddf3>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	f7fe fbba 	bl	8000bd8 <__aeabi_d2uiz>
 8002464:	4603      	mov	r3, r0
 8002466:	b29a      	uxth	r2, r3
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 800246c:	e005      	b.n	800247a <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 800246e:	89fa      	ldrh	r2, [r7, #14]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 8002474:	89ba      	ldrh	r2, [r7, #12]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	801a      	strh	r2, [r3, #0]
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002484:	20000245 	.word	0x20000245
 8002488:	20000000 	.word	0x20000000

0800248c <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 800249e:	2300      	movs	r3, #0
 80024a0:	73fb      	strb	r3, [r7, #15]
 80024a2:	e013      	b.n	80024cc <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	4a16      	ldr	r2, [pc, #88]	; (8002500 <XPT2046_GetTouchPoint+0x74>)
 80024a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024ac:	461a      	mov	r2, r3
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	4413      	add	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <XPT2046_GetTouchPoint+0x74>)
 80024b8:	330a      	adds	r3, #10
 80024ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024be:	461a      	mov	r2, r3
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4413      	add	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	3301      	adds	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	2b09      	cmp	r3, #9
 80024d0:	d9e8      	bls.n	80024a4 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <XPT2046_GetTouchPoint+0x78>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	08db      	lsrs	r3, r3, #3
 80024dc:	b29a      	uxth	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4a07      	ldr	r2, [pc, #28]	; (8002504 <XPT2046_GetTouchPoint+0x78>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	08db      	lsrs	r3, r3, #3
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	801a      	strh	r2, [r3, #0]
}
 80024f2:	bf00      	nop
 80024f4:	371c      	adds	r7, #28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000354 	.word	0x20000354
 8002504:	cccccccd 	.word	0xcccccccd

08002508 <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <XPT2046_IsTouched+0x20>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d101      	bne.n	800251a <XPT2046_IsTouched+0x12>
		return 1;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <XPT2046_IsTouched+0x14>

	return 0;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	2000037d 	.word	0x2000037d

0800252c <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
	  switch(TouchState)
 8002530:	4b59      	ldr	r3, [pc, #356]	; (8002698 <XPT2046_Task+0x16c>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b03      	cmp	r3, #3
 8002538:	f200 80ab 	bhi.w	8002692 <XPT2046_Task+0x166>
 800253c:	a201      	add	r2, pc, #4	; (adr r2, 8002544 <XPT2046_Task+0x18>)
 800253e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002542:	bf00      	nop
 8002544:	08002689 	.word	0x08002689
 8002548:	08002555 	.word	0x08002555
 800254c:	080025cb 	.word	0x080025cb
 8002550:	08002647 	.word	0x08002647
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 8002554:	f008 f81c 	bl	800a590 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	4b50      	ldr	r3, [pc, #320]	; (800269c <XPT2046_Task+0x170>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b05      	cmp	r3, #5
 8002562:	f240 8093 	bls.w	800268c <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 8002566:	f7ff feb7 	bl	80022d8 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 800256a:	4b4d      	ldr	r3, [pc, #308]	; (80026a0 <XPT2046_Task+0x174>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4a4c      	ldr	r2, [pc, #304]	; (80026a4 <XPT2046_Task+0x178>)
 8002572:	441a      	add	r2, r3
 8002574:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <XPT2046_Task+0x174>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	330a      	adds	r3, #10
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4949      	ldr	r1, [pc, #292]	; (80026a4 <XPT2046_Task+0x178>)
 800257e:	440b      	add	r3, r1
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f7ff fef2 	bl	800236c <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002588:	4b45      	ldr	r3, [pc, #276]	; (80026a0 <XPT2046_Task+0x174>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	3301      	adds	r3, #1
 800258e:	b2da      	uxtb	r2, r3
 8002590:	4b43      	ldr	r3, [pc, #268]	; (80026a0 <XPT2046_Task+0x174>)
 8002592:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8002594:	4b42      	ldr	r3, [pc, #264]	; (80026a0 <XPT2046_Task+0x174>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b0a      	cmp	r3, #10
 800259a:	d105      	bne.n	80025a8 <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 800259c:	4b40      	ldr	r3, [pc, #256]	; (80026a0 <XPT2046_Task+0x174>)
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 80025a2:	4b3d      	ldr	r3, [pc, #244]	; (8002698 <XPT2046_Task+0x16c>)
 80025a4:	2202      	movs	r2, #2
 80025a6:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80025a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025ac:	483e      	ldr	r0, [pc, #248]	; (80026a8 <XPT2046_Task+0x17c>)
 80025ae:	f008 ff53 	bl	800b458 <HAL_GPIO_ReadPin>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d102      	bne.n	80025be <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80025b8:	4b37      	ldr	r3, [pc, #220]	; (8002698 <XPT2046_Task+0x16c>)
 80025ba:	2203      	movs	r2, #3
 80025bc:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80025be:	f007 ffe7 	bl	800a590 <HAL_GetTick>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4a35      	ldr	r2, [pc, #212]	; (800269c <XPT2046_Task+0x170>)
 80025c6:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80025c8:	e060      	b.n	800268c <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80025ca:	f007 ffe1 	bl	800a590 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	4b32      	ldr	r3, [pc, #200]	; (800269c <XPT2046_Task+0x170>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	d95a      	bls.n	8002690 <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80025da:	f7ff fe7d 	bl	80022d8 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80025de:	4b30      	ldr	r3, [pc, #192]	; (80026a0 <XPT2046_Task+0x174>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4a2f      	ldr	r2, [pc, #188]	; (80026a4 <XPT2046_Task+0x178>)
 80025e6:	441a      	add	r2, r3
 80025e8:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <XPT2046_Task+0x174>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	330a      	adds	r3, #10
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	492c      	ldr	r1, [pc, #176]	; (80026a4 <XPT2046_Task+0x178>)
 80025f2:	440b      	add	r3, r1
 80025f4:	4619      	mov	r1, r3
 80025f6:	4610      	mov	r0, r2
 80025f8:	f7ff feb8 	bl	800236c <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 80025fc:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <XPT2046_Task+0x174>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	b2da      	uxtb	r2, r3
 8002604:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <XPT2046_Task+0x174>)
 8002606:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 8002608:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <XPT2046_Task+0x174>)
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	4b27      	ldr	r3, [pc, #156]	; (80026ac <XPT2046_Task+0x180>)
 800260e:	fba3 1302 	umull	r1, r3, r3, r2
 8002612:	08d9      	lsrs	r1, r3, #3
 8002614:	460b      	mov	r3, r1
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	b2da      	uxtb	r2, r3
 8002620:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <XPT2046_Task+0x174>)
 8002622:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 8002624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002628:	481f      	ldr	r0, [pc, #124]	; (80026a8 <XPT2046_Task+0x17c>)
 800262a:	f008 ff15 	bl	800b458 <HAL_GPIO_ReadPin>
 800262e:	4603      	mov	r3, r0
 8002630:	2b01      	cmp	r3, #1
 8002632:	d102      	bne.n	800263a <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 8002634:	4b18      	ldr	r3, [pc, #96]	; (8002698 <XPT2046_Task+0x16c>)
 8002636:	2203      	movs	r2, #3
 8002638:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 800263a:	f007 ffa9 	bl	800a590 <HAL_GetTick>
 800263e:	4603      	mov	r3, r0
 8002640:	4a16      	ldr	r2, [pc, #88]	; (800269c <XPT2046_Task+0x170>)
 8002642:	6013      	str	r3, [r2, #0]
		  }

		  break;
 8002644:	e024      	b.n	8002690 <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <XPT2046_Task+0x16c>)
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <XPT2046_Task+0x174>)
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 8002652:	e009      	b.n	8002668 <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 8002654:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <XPT2046_Task+0x184>)
 8002656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265a:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 800265c:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <XPT2046_Task+0x188>)
 800265e:	f993 3000 	ldrsb.w	r3, [r3]
 8002662:	4618      	mov	r0, r3
 8002664:	f008 f956 	bl	800a914 <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <XPT2046_Task+0x188>)
 800266a:	f993 3000 	ldrsb.w	r3, [r3]
 800266e:	4618      	mov	r0, r3
 8002670:	f008 f941 	bl	800a8f6 <HAL_NVIC_GetPendingIRQ>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1ec      	bne.n	8002654 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 800267a:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <XPT2046_Task+0x188>)
 800267c:	f993 3000 	ldrsb.w	r3, [r3]
 8002680:	4618      	mov	r0, r3
 8002682:	f008 f910 	bl	800a8a6 <HAL_NVIC_EnableIRQ>
		  break;
 8002686:	e004      	b.n	8002692 <XPT2046_Task+0x166>
		  break;
 8002688:	bf00      	nop
 800268a:	e002      	b.n	8002692 <XPT2046_Task+0x166>
		  break;
 800268c:	bf00      	nop
 800268e:	e000      	b.n	8002692 <XPT2046_Task+0x166>
		  break;
 8002690:	bf00      	nop

	  }
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	2000037d 	.word	0x2000037d
 800269c:	20000380 	.word	0x20000380
 80026a0:	2000037c 	.word	0x2000037c
 80026a4:	20000354 	.word	0x20000354
 80026a8:	40020000 	.word	0x40020000
 80026ac:	cccccccd 	.word	0xcccccccd
 80026b0:	40013c00 	.word	0x40013c00
 80026b4:	20000234 	.word	0x20000234

080026b8 <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80026bc:	2017      	movs	r0, #23
 80026be:	f008 f900 	bl	800a8c2 <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 80026c2:	4b02      	ldr	r3, [pc, #8]	; (80026cc <XPT2046_IRQ+0x14>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	2000037d 	.word	0x2000037d

080026d0 <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 80026dc:	4a1d      	ldr	r2, [pc, #116]	; (8002754 <XPT2046_Init+0x84>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 80026e2:	4a1d      	ldr	r2, [pc, #116]	; (8002758 <XPT2046_Init+0x88>)
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 80026e8:	4b1c      	ldr	r3, [pc, #112]	; (800275c <XPT2046_Init+0x8c>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 80026ee:	2201      	movs	r2, #1
 80026f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026f4:	481a      	ldr	r0, [pc, #104]	; (8002760 <XPT2046_Init+0x90>)
 80026f6:	f008 fec7 	bl	800b488 <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 80026fa:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <XPT2046_Init+0x94>)
 80026fc:	2290      	movs	r2, #144	; 0x90
 80026fe:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <XPT2046_Init+0x98>)
 8002702:	22d0      	movs	r2, #208	; 0xd0
 8002704:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 8002706:	4b19      	ldr	r3, [pc, #100]	; (800276c <XPT2046_Init+0x9c>)
 8002708:	2280      	movs	r2, #128	; 0x80
 800270a:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 800270c:	f7ff fde4 	bl	80022d8 <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 8002710:	2001      	movs	r0, #1
 8002712:	f007 ff49 	bl	800a5a8 <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <XPT2046_Init+0x94>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	08db      	lsrs	r3, r3, #3
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <XPT2046_Init+0x9c>)
 8002720:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 8002722:	4b10      	ldr	r3, [pc, #64]	; (8002764 <XPT2046_Init+0x94>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	015b      	lsls	r3, r3, #5
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <XPT2046_Init+0x9c>)
 800272c:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <XPT2046_Init+0x98>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	08db      	lsrs	r3, r3, #3
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <XPT2046_Init+0x9c>)
 8002738:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 800273a:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <XPT2046_Init+0x98>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	015b      	lsls	r3, r3, #5
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <XPT2046_Init+0x9c>)
 8002744:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <XPT2046_Init+0x9c>)
 8002748:	2200      	movs	r2, #0
 800274a:	711a      	strb	r2, [r3, #4]
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000230 	.word	0x20000230
 8002758:	20000234 	.word	0x20000234
 800275c:	2000037d 	.word	0x2000037d
 8002760:	40020400 	.word	0x40020400
 8002764:	20000235 	.word	0x20000235
 8002768:	20000236 	.word	0x20000236
 800276c:	20000238 	.word	0x20000238

08002770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	4b27      	ldr	r3, [pc, #156]	; (8002818 <MX_DMA_Init+0xa8>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a26      	ldr	r2, [pc, #152]	; (8002818 <MX_DMA_Init+0xa8>)
 8002780:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b24      	ldr	r3, [pc, #144]	; (8002818 <MX_DMA_Init+0xa8>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	603b      	str	r3, [r7, #0]
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <MX_DMA_Init+0xa8>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <MX_DMA_Init+0xa8>)
 800279c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <MX_DMA_Init+0xa8>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	200b      	movs	r0, #11
 80027b4:	f008 f85b 	bl	800a86e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80027b8:	200b      	movs	r0, #11
 80027ba:	f008 f874 	bl	800a8a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	2100      	movs	r1, #0
 80027c2:	200c      	movs	r0, #12
 80027c4:	f008 f853 	bl	800a86e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80027c8:	200c      	movs	r0, #12
 80027ca:	f008 f86c 	bl	800a8a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2100      	movs	r1, #0
 80027d2:	2010      	movs	r0, #16
 80027d4:	f008 f84b 	bl	800a86e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80027d8:	2010      	movs	r0, #16
 80027da:	f008 f864 	bl	800a8a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2100      	movs	r1, #0
 80027e2:	2011      	movs	r0, #17
 80027e4:	f008 f843 	bl	800a86e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80027e8:	2011      	movs	r0, #17
 80027ea:	f008 f85c 	bl	800a8a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	2100      	movs	r1, #0
 80027f2:	203a      	movs	r0, #58	; 0x3a
 80027f4:	f008 f83b 	bl	800a86e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80027f8:	203a      	movs	r0, #58	; 0x3a
 80027fa:	f008 f854 	bl	800a8a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80027fe:	2200      	movs	r2, #0
 8002800:	2100      	movs	r1, #0
 8002802:	2046      	movs	r0, #70	; 0x46
 8002804:	f008 f833 	bl	800a86e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002808:	2046      	movs	r0, #70	; 0x46
 800280a:	f008 f84c 	bl	800a8a6 <HAL_NVIC_EnableIRQ>

}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800

0800281c <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 8002824:	4a09      	ldr	r2, [pc, #36]	; (800284c <DS3231_Init+0x30>)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 800282a:	2000      	movs	r0, #0
 800282c:	f000 f8ca 	bl	80029c4 <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8002830:	2000      	movs	r0, #0
 8002832:	f000 f88e 	bl	8002952 <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8002836:	f000 f8e7 	bl	8002a08 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 800283a:	f000 f8ad 	bl	8002998 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800283e:	2001      	movs	r0, #1
 8002840:	f000 f846 	bl	80028d0 <DS3231_SetInterruptMode>
}
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000384 	.word	0x20000384

08002850 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af02      	add	r7, sp, #8
 8002856:	4603      	mov	r3, r0
 8002858:	460a      	mov	r2, r1
 800285a:	71fb      	strb	r3, [r7, #7]
 800285c:	4613      	mov	r3, r2
 800285e:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	733b      	strb	r3, [r7, #12]
 8002864:	79bb      	ldrb	r3, [r7, #6]
 8002866:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8002868:	4b07      	ldr	r3, [pc, #28]	; (8002888 <DS3231_SetRegByte+0x38>)
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	f107 020c 	add.w	r2, r7, #12
 8002870:	f04f 33ff 	mov.w	r3, #4294967295
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	2302      	movs	r3, #2
 8002878:	21d0      	movs	r1, #208	; 0xd0
 800287a:	f008 ff95 	bl	800b7a8 <HAL_I2C_Master_Transmit>
}
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000384 	.word	0x20000384

0800288c <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af02      	add	r7, sp, #8
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <DS3231_GetRegByte+0x40>)
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	1dfa      	adds	r2, r7, #7
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	2301      	movs	r3, #1
 80028a4:	21d0      	movs	r1, #208	; 0xd0
 80028a6:	f008 ff7f 	bl	800b7a8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <DS3231_GetRegByte+0x40>)
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	f107 020f 	add.w	r2, r7, #15
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2301      	movs	r3, #1
 80028ba:	21d0      	movs	r1, #208	; 0xd0
 80028bc:	f009 f872 	bl	800b9a4 <HAL_I2C_Master_Receive>
	return val;
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000384 	.word	0x20000384

080028d0 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80028da:	200e      	movs	r0, #14
 80028dc:	f7ff ffd6 	bl	800288c <DS3231_GetRegByte>
 80028e0:	4603      	mov	r3, r0
 80028e2:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 80028e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	b25a      	sxtb	r2, r3
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	b25b      	sxtb	r3, r3
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	b25b      	sxtb	r3, r3
 80028fa:	4313      	orrs	r3, r2
 80028fc:	b25b      	sxtb	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	4619      	mov	r1, r3
 8002902:	200e      	movs	r0, #14
 8002904:	f7ff ffa4 	bl	8002850 <DS3231_SetRegByte>
}
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800291a:	200e      	movs	r0, #14
 800291c:	f7ff ffb6 	bl	800288c <DS3231_GetRegByte>
 8002920:	4603      	mov	r3, r0
 8002922:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 8002924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800292c:	b25b      	sxtb	r3, r3
 800292e:	79fa      	ldrb	r2, [r7, #7]
 8002930:	2a00      	cmp	r2, #0
 8002932:	d102      	bne.n	800293a <DS3231_EnableOscillator+0x2a>
 8002934:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002938:	e000      	b.n	800293c <DS3231_EnableOscillator+0x2c>
 800293a:	2200      	movs	r2, #0
 800293c:	4313      	orrs	r3, r2
 800293e:	b25b      	sxtb	r3, r3
 8002940:	b2db      	uxtb	r3, r3
 8002942:	4619      	mov	r1, r3
 8002944:	200e      	movs	r0, #14
 8002946:	f7ff ff83 	bl	8002850 <DS3231_SetRegByte>
}
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800295c:	200e      	movs	r0, #14
 800295e:	f7ff ff95 	bl	800288c <DS3231_GetRegByte>
 8002962:	4603      	mov	r3, r0
 8002964:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 8002966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296a:	f023 0302 	bic.w	r3, r3, #2
 800296e:	b25a      	sxtb	r2, r3
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	b25b      	sxtb	r3, r3
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	b25b      	sxtb	r3, r3
 800297c:	4313      	orrs	r3, r2
 800297e:	b25b      	sxtb	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	4619      	mov	r1, r3
 8002984:	200e      	movs	r0, #14
 8002986:	f7ff ff63 	bl	8002850 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800298a:	2001      	movs	r0, #1
 800298c:	f7ff ffa0 	bl	80028d0 <DS3231_SetInterruptMode>
}
 8002990:	bf00      	nop
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 800299e:	200f      	movs	r0, #15
 80029a0:	f7ff ff74 	bl	800288c <DS3231_GetRegByte>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f023 0302 	bic.w	r3, r3, #2
 80029aa:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	f023 0302 	bic.w	r3, r3, #2
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	4619      	mov	r1, r3
 80029b6:	200f      	movs	r0, #15
 80029b8:	f7ff ff4a 	bl	8002850 <DS3231_SetRegByte>
}
 80029bc:	bf00      	nop
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80029ce:	200e      	movs	r0, #14
 80029d0:	f7ff ff5c 	bl	800288c <DS3231_GetRegByte>
 80029d4:	4603      	mov	r3, r0
 80029d6:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 80029d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029dc:	f023 0301 	bic.w	r3, r3, #1
 80029e0:	b25a      	sxtb	r2, r3
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	b25b      	sxtb	r3, r3
 80029ec:	4313      	orrs	r3, r2
 80029ee:	b25b      	sxtb	r3, r3
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	4619      	mov	r1, r3
 80029f4:	200e      	movs	r0, #14
 80029f6:	f7ff ff2b 	bl	8002850 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80029fa:	2001      	movs	r0, #1
 80029fc:	f7ff ff68 	bl	80028d0 <DS3231_SetInterruptMode>
}
 8002a00:	bf00      	nop
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002a0e:	200f      	movs	r0, #15
 8002a10:	f7ff ff3c 	bl	800288c <DS3231_GetRegByte>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f023 0301 	bic.w	r3, r3, #1
 8002a1a:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	f023 0301 	bic.w	r3, r3, #1
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	4619      	mov	r1, r3
 8002a26:	200f      	movs	r0, #15
 8002a28:	f7ff ff12 	bl	8002850 <DS3231_SetRegByte>
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8002a38:	2003      	movs	r0, #3
 8002a3a:	f7ff ff27 	bl	800288c <DS3231_GetRegByte>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 f866 	bl	8002b12 <DS3231_DecodeBCD>
 8002a46:	4603      	mov	r3, r0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002a50:	2002      	movs	r0, #2
 8002a52:	f7ff ff1b 	bl	800288c <DS3231_GetRegByte>
 8002a56:	4603      	mov	r3, r0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 f85a 	bl	8002b12 <DS3231_DecodeBCD>
 8002a5e:	4603      	mov	r3, r0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8002a68:	2001      	movs	r0, #1
 8002a6a:	f7ff ff0f 	bl	800288c <DS3231_GetRegByte>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 f84e 	bl	8002b12 <DS3231_DecodeBCD>
 8002a76:	4603      	mov	r3, r0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 f85b 	bl	8002b44 <DS3231_EncodeBCD>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4619      	mov	r1, r3
 8002a92:	2003      	movs	r0, #3
 8002a94:	f7ff fedc 	bl	8002850 <DS3231_SetRegByte>
}
 8002a98:	bf00      	nop
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 f846 	bl	8002b44 <DS3231_EncodeBCD>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4619      	mov	r1, r3
 8002abc:	2002      	movs	r0, #2
 8002abe:	f7ff fec7 	bl	8002850 <DS3231_SetRegByte>
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f834 	bl	8002b44 <DS3231_EncodeBCD>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4619      	mov	r1, r3
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	f7ff feb5 	bl	8002850 <DS3231_SetRegByte>
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	4603      	mov	r3, r0
 8002af6:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f822 	bl	8002b44 <DS3231_EncodeBCD>
 8002b00:	4603      	mov	r3, r0
 8002b02:	4619      	mov	r1, r3
 8002b04:	2000      	movs	r0, #0
 8002b06:	f7ff fea3 	bl	8002850 <DS3231_SetRegByte>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	4603      	mov	r3, r0
 8002b1a:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	091b      	lsrs	r3, r3, #4
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	461a      	mov	r2, r3
 8002b24:	0092      	lsls	r2, r2, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	4413      	add	r3, r2
 8002b36:	b2db      	uxtb	r3, r3
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8002b4e:	79fa      	ldrb	r2, [r7, #7]
 8002b50:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <DS3231_EncodeBCD+0x40>)
 8002b52:	fba3 1302 	umull	r1, r3, r3, r2
 8002b56:	08d9      	lsrs	r1, r3, #3
 8002b58:	460b      	mov	r3, r1
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	4907      	ldr	r1, [pc, #28]	; (8002b84 <DS3231_EncodeBCD+0x40>)
 8002b68:	fba1 1303 	umull	r1, r3, r1, r3
 8002b6c:	08db      	lsrs	r3, r3, #3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	b2db      	uxtb	r3, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	cccccccd 	.word	0xcccccccd

08002b88 <eeprom_wait>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Basic function to work with I2C EEPROM
//
void eeprom_wait(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 8002b8c:	bf00      	nop
 8002b8e:	f007 fcff 	bl	800a590 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <eeprom_wait+0x1c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d9f7      	bls.n	8002b8e <eeprom_wait+0x6>
    {
    }
}
 8002b9e:	bf00      	nop
 8002ba0:	bf00      	nop
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20000248 	.word	0x20000248

08002ba8 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af04      	add	r7, sp, #16
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 8002bb4:	f7ff ffe8 	bl	8002b88 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc4:	9102      	str	r1, [sp, #8]
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2301      	movs	r3, #1
 8002bce:	21a0      	movs	r1, #160	; 0xa0
 8002bd0:	4803      	ldr	r0, [pc, #12]	; (8002be0 <eeprom_read+0x38>)
 8002bd2:	f009 fa07 	bl	800bfe4 <HAL_I2C_Mem_Read>
 8002bd6:	4603      	mov	r3, r0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20000388 	.word	0x20000388

08002be4 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08a      	sub	sp, #40	; 0x28
 8002be8:	af04      	add	r7, sp, #16
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8002bf0:	f7ff ffca 	bl	8002b88 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002c00:	9102      	str	r1, [sp, #8]
 8002c02:	9301      	str	r3, [sp, #4]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	2301      	movs	r3, #1
 8002c0a:	21a0      	movs	r1, #160	; 0xa0
 8002c0c:	4807      	ldr	r0, [pc, #28]	; (8002c2c <eeprom_write+0x48>)
 8002c0e:	f009 f8ef 	bl	800bdf0 <HAL_I2C_Mem_Write>
 8002c12:	4603      	mov	r3, r0
 8002c14:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 8002c16:	f007 fcbb 	bl	800a590 <HAL_GetTick>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4a04      	ldr	r2, [pc, #16]	; (8002c30 <eeprom_write+0x4c>)
 8002c1e:	6013      	str	r3, [r2, #0]

    return rc;
 8002c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000388 	.word	0x20000388
 8002c30:	20000248 	.word	0x20000248

08002c34 <EEPROM_RelayStateUpdate>:
//
// Function to Read, Update and Restore from EEPROM memory last state of Relay and Lights after lack of energy
//
// Function to update in EEPROM current state of all Relay
void EEPROM_RelayStateUpdate(uint8_t RelayNumber, uint8_t NewState)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	460a      	mov	r2, r1
 8002c3e:	71fb      	strb	r3, [r7, #7]
 8002c40:	4613      	mov	r3, r2
 8002c42:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002c44:	79bb      	ldrb	r3, [r7, #6]
 8002c46:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_write(EEPROM_ADR_RELAY_1_STATE, &State, sizeof(State));
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d107      	bne.n	8002c5e <EEPROM_RelayStateUpdate+0x2a>
 8002c4e:	f107 030f 	add.w	r3, r7, #15
 8002c52:	2201      	movs	r2, #1
 8002c54:	4619      	mov	r1, r3
 8002c56:	202e      	movs	r0, #46	; 0x2e
 8002c58:	f7ff ffc4 	bl	8002be4 <eeprom_write>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
}
 8002c5c:	e01f      	b.n	8002c9e <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d107      	bne.n	8002c74 <EEPROM_RelayStateUpdate+0x40>
 8002c64:	f107 030f 	add.w	r3, r7, #15
 8002c68:	2201      	movs	r2, #1
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	202f      	movs	r0, #47	; 0x2f
 8002c6e:	f7ff ffb9 	bl	8002be4 <eeprom_write>
}
 8002c72:	e014      	b.n	8002c9e <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d107      	bne.n	8002c8a <EEPROM_RelayStateUpdate+0x56>
 8002c7a:	f107 030f 	add.w	r3, r7, #15
 8002c7e:	2201      	movs	r2, #1
 8002c80:	4619      	mov	r1, r3
 8002c82:	2030      	movs	r0, #48	; 0x30
 8002c84:	f7ff ffae 	bl	8002be4 <eeprom_write>
}
 8002c88:	e009      	b.n	8002c9e <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d106      	bne.n	8002c9e <EEPROM_RelayStateUpdate+0x6a>
 8002c90:	f107 030f 	add.w	r3, r7, #15
 8002c94:	2201      	movs	r2, #1
 8002c96:	4619      	mov	r1, r3
 8002c98:	2031      	movs	r0, #49	; 0x31
 8002c9a:	f7ff ffa3 	bl	8002be4 <eeprom_write>
}
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <EEPROM_LightStateUpdate>:

//
// Function to update in EEPROM current state of all Lights
void EEPROM_LightStateUpdate(uint8_t LightNumber, uint8_t NewState)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	460a      	mov	r2, r1
 8002cb0:	71fb      	strb	r3, [r7, #7]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002cb6:	79bb      	ldrb	r3, [r7, #6]
 8002cb8:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_write(EEPROM_ADR_LIGHT_1_STATE, &State, sizeof(State));
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d107      	bne.n	8002cd0 <EEPROM_LightStateUpdate+0x2a>
 8002cc0:	f107 030f 	add.w	r3, r7, #15
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	2033      	movs	r0, #51	; 0x33
 8002cca:	f7ff ff8b 	bl	8002be4 <eeprom_write>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
}
 8002cce:	e01f      	b.n	8002d10 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d107      	bne.n	8002ce6 <EEPROM_LightStateUpdate+0x40>
 8002cd6:	f107 030f 	add.w	r3, r7, #15
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4619      	mov	r1, r3
 8002cde:	2034      	movs	r0, #52	; 0x34
 8002ce0:	f7ff ff80 	bl	8002be4 <eeprom_write>
}
 8002ce4:	e014      	b.n	8002d10 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d107      	bne.n	8002cfc <EEPROM_LightStateUpdate+0x56>
 8002cec:	f107 030f 	add.w	r3, r7, #15
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	2035      	movs	r0, #53	; 0x35
 8002cf6:	f7ff ff75 	bl	8002be4 <eeprom_write>
}
 8002cfa:	e009      	b.n	8002d10 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d106      	bne.n	8002d10 <EEPROM_LightStateUpdate+0x6a>
 8002d02:	f107 030f 	add.w	r3, r7, #15
 8002d06:	2201      	movs	r2, #1
 8002d08:	4619      	mov	r1, r3
 8002d0a:	2036      	movs	r0, #54	; 0x36
 8002d0c:	f7ff ff6a 	bl	8002be4 <eeprom_write>
}
 8002d10:	bf00      	nop
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <EEPROM_RelayStateRead>:

//
// Function to read in EEPROM current state of all Relay
uint8_t EEPROM_RelayStateRead(uint8_t RelayNumber)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]
	uint8_t RelayStan = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_read(EEPROM_ADR_RELAY_1_STATE, &RelayStan, sizeof(RelayStan));
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d107      	bne.n	8002d3c <EEPROM_RelayStateRead+0x24>
 8002d2c:	f107 030f 	add.w	r3, r7, #15
 8002d30:	2201      	movs	r2, #1
 8002d32:	4619      	mov	r1, r3
 8002d34:	202e      	movs	r0, #46	; 0x2e
 8002d36:	f7ff ff37 	bl	8002ba8 <eeprom_read>
 8002d3a:	e01f      	b.n	8002d7c <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 2) eeprom_read(EEPROM_ADR_RELAY_2_STATE, &RelayStan, sizeof(RelayStan));
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d107      	bne.n	8002d52 <EEPROM_RelayStateRead+0x3a>
 8002d42:	f107 030f 	add.w	r3, r7, #15
 8002d46:	2201      	movs	r2, #1
 8002d48:	4619      	mov	r1, r3
 8002d4a:	202f      	movs	r0, #47	; 0x2f
 8002d4c:	f7ff ff2c 	bl	8002ba8 <eeprom_read>
 8002d50:	e014      	b.n	8002d7c <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 3) eeprom_read(EEPROM_ADR_RELAY_3_STATE, &RelayStan, sizeof(RelayStan));
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d107      	bne.n	8002d68 <EEPROM_RelayStateRead+0x50>
 8002d58:	f107 030f 	add.w	r3, r7, #15
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	4619      	mov	r1, r3
 8002d60:	2030      	movs	r0, #48	; 0x30
 8002d62:	f7ff ff21 	bl	8002ba8 <eeprom_read>
 8002d66:	e009      	b.n	8002d7c <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 4) eeprom_read(EEPROM_ADR_RELAY_4_STATE, &RelayStan, sizeof(RelayStan));
 8002d68:	79fb      	ldrb	r3, [r7, #7]
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d106      	bne.n	8002d7c <EEPROM_RelayStateRead+0x64>
 8002d6e:	f107 030f 	add.w	r3, r7, #15
 8002d72:	2201      	movs	r2, #1
 8002d74:	4619      	mov	r1, r3
 8002d76:	2031      	movs	r0, #49	; 0x31
 8002d78:	f7ff ff16 	bl	8002ba8 <eeprom_read>

	return RelayStan;
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <EEPROM_LightStateRead>:

//
// Function to read in EEPROM current state of all Lights
uint8_t EEPROM_LightStateRead(uint8_t LightNumber)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	71fb      	strb	r3, [r7, #7]
	uint8_t AktualnyStan = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_read(EEPROM_ADR_LIGHT_1_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d107      	bne.n	8002daa <EEPROM_LightStateRead+0x24>
 8002d9a:	f107 030f 	add.w	r3, r7, #15
 8002d9e:	2201      	movs	r2, #1
 8002da0:	4619      	mov	r1, r3
 8002da2:	2033      	movs	r0, #51	; 0x33
 8002da4:	f7ff ff00 	bl	8002ba8 <eeprom_read>
 8002da8:	e01f      	b.n	8002dea <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 2) eeprom_read(EEPROM_ADR_LIGHT_2_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d107      	bne.n	8002dc0 <EEPROM_LightStateRead+0x3a>
 8002db0:	f107 030f 	add.w	r3, r7, #15
 8002db4:	2201      	movs	r2, #1
 8002db6:	4619      	mov	r1, r3
 8002db8:	2034      	movs	r0, #52	; 0x34
 8002dba:	f7ff fef5 	bl	8002ba8 <eeprom_read>
 8002dbe:	e014      	b.n	8002dea <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 3) eeprom_read(EEPROM_ADR_LIGHT_3_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d107      	bne.n	8002dd6 <EEPROM_LightStateRead+0x50>
 8002dc6:	f107 030f 	add.w	r3, r7, #15
 8002dca:	2201      	movs	r2, #1
 8002dcc:	4619      	mov	r1, r3
 8002dce:	2035      	movs	r0, #53	; 0x35
 8002dd0:	f7ff feea 	bl	8002ba8 <eeprom_read>
 8002dd4:	e009      	b.n	8002dea <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 4) eeprom_read(EEPROM_ADR_LIGHT_4_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d106      	bne.n	8002dea <EEPROM_LightStateRead+0x64>
 8002ddc:	f107 030f 	add.w	r3, r7, #15
 8002de0:	2201      	movs	r2, #1
 8002de2:	4619      	mov	r1, r3
 8002de4:	2036      	movs	r0, #54	; 0x36
 8002de6:	f7ff fedf 	bl	8002ba8 <eeprom_read>

	return AktualnyStan;
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <EEPROM_RelayStateRestore>:

//
// Function to restore from EEPROM memory last state of all Relay
void EEPROM_RelayStateRestore(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
	if(EEPROM_RelayStateRead(1)) SendComand(UCMD_RELAY_1_ON);
 8002df8:	2001      	movs	r0, #1
 8002dfa:	f7ff ff8d 	bl	8002d18 <EEPROM_RelayStateRead>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <EEPROM_RelayStateRestore+0x18>
 8002e04:	2005      	movs	r0, #5
 8002e06:	f006 f983 	bl	8009110 <SendComand>
 8002e0a:	e002      	b.n	8002e12 <EEPROM_RelayStateRestore+0x1e>
	else SendComand(UCMD_RELAY_1_OFF);
 8002e0c:	2006      	movs	r0, #6
 8002e0e:	f006 f97f 	bl	8009110 <SendComand>
	if(EEPROM_RelayStateRead(2)) SendComand(UCMD_RELAY_2_ON);
 8002e12:	2002      	movs	r0, #2
 8002e14:	f7ff ff80 	bl	8002d18 <EEPROM_RelayStateRead>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <EEPROM_RelayStateRestore+0x32>
 8002e1e:	2007      	movs	r0, #7
 8002e20:	f006 f976 	bl	8009110 <SendComand>
 8002e24:	e002      	b.n	8002e2c <EEPROM_RelayStateRestore+0x38>
	else SendComand(UCMD_RELAY_2_OFF);
 8002e26:	2008      	movs	r0, #8
 8002e28:	f006 f972 	bl	8009110 <SendComand>
	if(EEPROM_RelayStateRead(3)) SendComand(UCMD_RELAY_3_ON);
 8002e2c:	2003      	movs	r0, #3
 8002e2e:	f7ff ff73 	bl	8002d18 <EEPROM_RelayStateRead>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <EEPROM_RelayStateRestore+0x4c>
 8002e38:	2009      	movs	r0, #9
 8002e3a:	f006 f969 	bl	8009110 <SendComand>
 8002e3e:	e002      	b.n	8002e46 <EEPROM_RelayStateRestore+0x52>
	else SendComand(UCMD_RELAY_3_OFF);
 8002e40:	200a      	movs	r0, #10
 8002e42:	f006 f965 	bl	8009110 <SendComand>
	if(EEPROM_RelayStateRead(4)) SendComand(UCMD_RELAY_4_ON);
 8002e46:	2004      	movs	r0, #4
 8002e48:	f7ff ff66 	bl	8002d18 <EEPROM_RelayStateRead>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <EEPROM_RelayStateRestore+0x66>
 8002e52:	200b      	movs	r0, #11
 8002e54:	f006 f95c 	bl	8009110 <SendComand>
	else SendComand(UCMD_RELAY_4_OFF);

}
 8002e58:	e002      	b.n	8002e60 <EEPROM_RelayStateRestore+0x6c>
	else SendComand(UCMD_RELAY_4_OFF);
 8002e5a:	200c      	movs	r0, #12
 8002e5c:	f006 f958 	bl	8009110 <SendComand>
}
 8002e60:	bf00      	nop
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <EEPROM_LightStateRestore>:

//
// Function to restore from EEPROM memory last state of all Lights
void EEPROM_LightStateRestore(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
	if(EEPROM_LightStateRead(1)) SendComand(UCMD_LIGHT_1_ON);
 8002e68:	2001      	movs	r0, #1
 8002e6a:	f7ff ff8c 	bl	8002d86 <EEPROM_LightStateRead>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <EEPROM_LightStateRestore+0x18>
 8002e74:	200d      	movs	r0, #13
 8002e76:	f006 f94b 	bl	8009110 <SendComand>
 8002e7a:	e002      	b.n	8002e82 <EEPROM_LightStateRestore+0x1e>
	else SendComand(UCMD_LIGHT_1_OFF);
 8002e7c:	200e      	movs	r0, #14
 8002e7e:	f006 f947 	bl	8009110 <SendComand>
	if(EEPROM_LightStateRead(2)) SendComand(UCMD_LIGHT_2_ON);
 8002e82:	2002      	movs	r0, #2
 8002e84:	f7ff ff7f 	bl	8002d86 <EEPROM_LightStateRead>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <EEPROM_LightStateRestore+0x32>
 8002e8e:	200f      	movs	r0, #15
 8002e90:	f006 f93e 	bl	8009110 <SendComand>
 8002e94:	e002      	b.n	8002e9c <EEPROM_LightStateRestore+0x38>
	else SendComand(UCMD_LIGHT_2_OFF);
 8002e96:	2010      	movs	r0, #16
 8002e98:	f006 f93a 	bl	8009110 <SendComand>
	if(EEPROM_LightStateRead(3)) SendComand(UCMD_LIGHT_3_ON);
 8002e9c:	2003      	movs	r0, #3
 8002e9e:	f7ff ff72 	bl	8002d86 <EEPROM_LightStateRead>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <EEPROM_LightStateRestore+0x4c>
 8002ea8:	2011      	movs	r0, #17
 8002eaa:	f006 f931 	bl	8009110 <SendComand>
 8002eae:	e002      	b.n	8002eb6 <EEPROM_LightStateRestore+0x52>
	else SendComand(UCMD_LIGHT_3_OFF);
 8002eb0:	2012      	movs	r0, #18
 8002eb2:	f006 f92d 	bl	8009110 <SendComand>
	if(EEPROM_LightStateRead(4)) SendComand(UCMD_LIGHT_4_ON);
 8002eb6:	2004      	movs	r0, #4
 8002eb8:	f7ff ff65 	bl	8002d86 <EEPROM_LightStateRead>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <EEPROM_LightStateRestore+0x66>
 8002ec2:	2013      	movs	r0, #19
 8002ec4:	f006 f924 	bl	8009110 <SendComand>
	else SendComand(UCMD_LIGHT_4_OFF);
}
 8002ec8:	e002      	b.n	8002ed0 <EEPROM_LightStateRestore+0x6c>
	else SendComand(UCMD_LIGHT_4_OFF);
 8002eca:	2014      	movs	r0, #20
 8002ecc:	f006 f920 	bl	8009110 <SendComand>
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <EEPROM_ScheduleDayInWeekRead>:
//
// Function to Read, Update and Restore from EEPROM memory day of week which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleDayInWeekRead(uint8_t NrOfSchedule, uint8_t * scheduleDayInWeekTab)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	6039      	str	r1, [r7, #0]
 8002ede:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayInWeek = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	72bb      	strb	r3, [r7, #10]

	if(1 == NrOfSchedule)
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d107      	bne.n	8002efa <EEPROM_ScheduleDayInWeekRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002eea:	f107 030a 	add.w	r3, r7, #10
 8002eee:	2201      	movs	r2, #1
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	2005      	movs	r0, #5
 8002ef4:	f7ff fe58 	bl	8002ba8 <eeprom_read>
 8002ef8:	e009      	b.n	8002f0e <EEPROM_ScheduleDayInWeekRead+0x3a>
	}
	else if(2 == NrOfSchedule)
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d106      	bne.n	8002f0e <EEPROM_ScheduleDayInWeekRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002f00:	f107 030a 	add.w	r3, r7, #10
 8002f04:	2201      	movs	r2, #1
 8002f06:	4619      	mov	r1, r3
 8002f08:	200c      	movs	r0, #12
 8002f0a:	f7ff fe4d 	bl	8002ba8 <eeprom_read>
	}

	uint32_t a = 0x01;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	72fb      	strb	r3, [r7, #11]
 8002f16:	e016      	b.n	8002f46 <EEPROM_ScheduleDayInWeekRead+0x72>
	{
		if(TempDayInWeek & a) // check every bit in TempDayInWeek (EEPROM) if is 1
 8002f18:	7abb      	ldrb	r3, [r7, #10]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <EEPROM_ScheduleDayInWeekRead+0x5c>
		{
			scheduleDayInWeekTab[i] = 1;
 8002f24:	7afb      	ldrb	r3, [r7, #11]
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	4413      	add	r3, r2
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	e004      	b.n	8002f3a <EEPROM_ScheduleDayInWeekRead+0x66>
		}
		else // or is 0
		{
			scheduleDayInWeekTab[i] = 0;
 8002f30:	7afb      	ldrb	r3, [r7, #11]
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	4413      	add	r3, r2
 8002f36:	2200      	movs	r2, #0
 8002f38:	701a      	strb	r2, [r3, #0]
		}
		a = a << 1; // Mask bit shift
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002f40:	7afb      	ldrb	r3, [r7, #11]
 8002f42:	3301      	adds	r3, #1
 8002f44:	72fb      	strb	r3, [r7, #11]
 8002f46:	7afb      	ldrb	r3, [r7, #11]
 8002f48:	2b06      	cmp	r3, #6
 8002f4a:	d9e5      	bls.n	8002f18 <EEPROM_ScheduleDayInWeekRead+0x44>
	}
}
 8002f4c:	bf00      	nop
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <EEPROM_ScheduleDayInWeekUpdate>:

//
// Function to update to EEPROM day which apply this schedule
void EEPROM_ScheduleDayInWeekUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleDayInWeekTab)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	6039      	str	r1, [r7, #0]
 8002f60:	71fb      	strb	r3, [r7, #7]

	uint8_t TempDayInWeek = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	72bb      	strb	r3, [r7, #10]
	uint32_t a = 0x01;
 8002f66:	2301      	movs	r3, #1
 8002f68:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	72fb      	strb	r3, [r7, #11]
 8002f6e:	e011      	b.n	8002f94 <EEPROM_ScheduleDayInWeekUpdate+0x3e>
	{
		if(scheduleDayInWeekTab[i])
 8002f70:	7afb      	ldrb	r3, [r7, #11]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	4413      	add	r3, r2
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <EEPROM_ScheduleDayInWeekUpdate+0x32>
		{
			TempDayInWeek = TempDayInWeek | a;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	7abb      	ldrb	r3, [r7, #10]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	72bb      	strb	r3, [r7, #10]
		}
		a = a << 1; // Mask bit shift
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002f8e:	7afb      	ldrb	r3, [r7, #11]
 8002f90:	3301      	adds	r3, #1
 8002f92:	72fb      	strb	r3, [r7, #11]
 8002f94:	7afb      	ldrb	r3, [r7, #11]
 8002f96:	2b06      	cmp	r3, #6
 8002f98:	d9ea      	bls.n	8002f70 <EEPROM_ScheduleDayInWeekUpdate+0x1a>
	}

	if(1 == NrOfSchedule)
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d107      	bne.n	8002fb0 <EEPROM_ScheduleDayInWeekUpdate+0x5a>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002fa0:	f107 030a 	add.w	r3, r7, #10
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	2005      	movs	r0, #5
 8002faa:	f7ff fe1b 	bl	8002be4 <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
	}

}
 8002fae:	e009      	b.n	8002fc4 <EEPROM_ScheduleDayInWeekUpdate+0x6e>
	else if(2 == NrOfSchedule)
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d106      	bne.n	8002fc4 <EEPROM_ScheduleDayInWeekUpdate+0x6e>
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002fb6:	f107 030a 	add.w	r3, r7, #10
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	200c      	movs	r0, #12
 8002fc0:	f7ff fe10 	bl	8002be4 <eeprom_write>
}
 8002fc4:	bf00      	nop
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <EEPROM_ScheduleRelayAndSwitchTabRead>:
//
// Function to Read, Update and Restore from EEPROM memory Relays and Lights which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleRelayAndSwitchTabRead(uint8_t NrOfSchedule, uint8_t * scheduleRelayAndSwitchTab)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	6039      	str	r1, [r7, #0]
 8002fd6:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelays = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	727b      	strb	r3, [r7, #9]
	uint8_t TempLights = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	723b      	strb	r3, [r7, #8]

		if(1 == NrOfSchedule)
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d10e      	bne.n	8003004 <EEPROM_ScheduleRelayAndSwitchTabRead+0x38>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelays, sizeof(TempRelays));
 8002fe6:	f107 0309 	add.w	r3, r7, #9
 8002fea:	2201      	movs	r2, #1
 8002fec:	4619      	mov	r1, r3
 8002fee:	2006      	movs	r0, #6
 8002ff0:	f7ff fdda 	bl	8002ba8 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLights, sizeof(TempLights));
 8002ff4:	f107 0308 	add.w	r3, r7, #8
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	2007      	movs	r0, #7
 8002ffe:	f7ff fdd3 	bl	8002ba8 <eeprom_read>
 8003002:	e010      	b.n	8003026 <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>

		}
		else if(2 == NrOfSchedule)
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d10d      	bne.n	8003026 <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelays, sizeof(TempRelays));
 800300a:	f107 0309 	add.w	r3, r7, #9
 800300e:	2201      	movs	r2, #1
 8003010:	4619      	mov	r1, r3
 8003012:	200d      	movs	r0, #13
 8003014:	f7ff fdc8 	bl	8002ba8 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLights, sizeof(TempLights));
 8003018:	f107 0308 	add.w	r3, r7, #8
 800301c:	2201      	movs	r2, #1
 800301e:	4619      	mov	r1, r3
 8003020:	200e      	movs	r0, #14
 8003022:	f7ff fdc1 	bl	8002ba8 <eeprom_read>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 =	 =	 =	 =
		uint32_t a = 0x01;
 8003026:	2301      	movs	r3, #1
 8003028:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 800302a:	2300      	movs	r3, #0
 800302c:	72fb      	strb	r3, [r7, #11]
 800302e:	e016      	b.n	800305e <EEPROM_ScheduleRelayAndSwitchTabRead+0x92>
		{
			if(TempRelays & a) // check every bit in TempRelays (EEPROM) if is 1
 8003030:	7a7b      	ldrb	r3, [r7, #9]
 8003032:	461a      	mov	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <EEPROM_ScheduleRelayAndSwitchTabRead+0x7c>
			{
				scheduleRelayAndSwitchTab[i] = 1;
 800303c:	7afb      	ldrb	r3, [r7, #11]
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	4413      	add	r3, r2
 8003042:	2201      	movs	r2, #1
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e004      	b.n	8003052 <EEPROM_ScheduleRelayAndSwitchTabRead+0x86>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[i] = 0;
 8003048:	7afb      	ldrb	r3, [r7, #11]
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	4413      	add	r3, r2
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 8003058:	7afb      	ldrb	r3, [r7, #11]
 800305a:	3301      	adds	r3, #1
 800305c:	72fb      	strb	r3, [r7, #11]
 800305e:	7afb      	ldrb	r3, [r7, #11]
 8003060:	2b03      	cmp	r3, #3
 8003062:	d9e5      	bls.n	8003030 <EEPROM_ScheduleRelayAndSwitchTabRead+0x64>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 				  =	  =	  =	  =	 =
		a = 0x01; // reseting Mask to check from first bit in TempLights
 8003064:	2301      	movs	r3, #1
 8003066:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 8003068:	2304      	movs	r3, #4
 800306a:	72bb      	strb	r3, [r7, #10]
 800306c:	e016      	b.n	800309c <EEPROM_ScheduleRelayAndSwitchTabRead+0xd0>
		{
			if(TempLights & a) // check every bit in TempRelays (EEPROM) if is 1
 800306e:	7a3b      	ldrb	r3, [r7, #8]
 8003070:	461a      	mov	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4013      	ands	r3, r2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <EEPROM_ScheduleRelayAndSwitchTabRead+0xba>
			{
				scheduleRelayAndSwitchTab[j] = 1;
 800307a:	7abb      	ldrb	r3, [r7, #10]
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	4413      	add	r3, r2
 8003080:	2201      	movs	r2, #1
 8003082:	701a      	strb	r2, [r3, #0]
 8003084:	e004      	b.n	8003090 <EEPROM_ScheduleRelayAndSwitchTabRead+0xc4>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[j] = 0;
 8003086:	7abb      	ldrb	r3, [r7, #10]
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	4413      	add	r3, r2
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 8003096:	7abb      	ldrb	r3, [r7, #10]
 8003098:	3301      	adds	r3, #1
 800309a:	72bb      	strb	r3, [r7, #10]
 800309c:	7abb      	ldrb	r3, [r7, #10]
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d9e5      	bls.n	800306e <EEPROM_ScheduleRelayAndSwitchTabRead+0xa2>
		}

}
 80030a2:	bf00      	nop
 80030a4:	bf00      	nop
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <EEPROM_ScheduleRelayAndSwitchTabUpdate>:
//
// Function to update saved day which apply this schedule
//
// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
void EEPROM_ScheduleRelayAndSwitchTabUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleRelayAndSwitchTab)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	6039      	str	r1, [r7, #0]
 80030b6:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelay = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	727b      	strb	r3, [r7, #9]
	uint8_t TempLight = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	723b      	strb	r3, [r7, #8]
	uint32_t a = 0x01;
 80030c0:	2301      	movs	r3, #1
 80030c2:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 80030c4:	2300      	movs	r3, #0
 80030c6:	72fb      	strb	r3, [r7, #11]
 80030c8:	e011      	b.n	80030ee <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x42>
	{
		if(scheduleRelayAndSwitchTab[i])
 80030ca:	7afb      	ldrb	r3, [r7, #11]
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	4413      	add	r3, r2
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d005      	beq.n	80030e2 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x36>
		{
			TempRelay = TempRelay | a;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	7a7b      	ldrb	r3, [r7, #9]
 80030dc:	4313      	orrs	r3, r2
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	727b      	strb	r3, [r7, #9]
		}
		a = a << 1; // Mask bit shift
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 80030e8:	7afb      	ldrb	r3, [r7, #11]
 80030ea:	3301      	adds	r3, #1
 80030ec:	72fb      	strb	r3, [r7, #11]
 80030ee:	7afb      	ldrb	r3, [r7, #11]
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d9ea      	bls.n	80030ca <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x1e>
	}
	a = 0x01;  // reseting Mask to check from first bit in TempLights
 80030f4:	2301      	movs	r3, #1
 80030f6:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 80030f8:	2304      	movs	r3, #4
 80030fa:	72bb      	strb	r3, [r7, #10]
 80030fc:	e011      	b.n	8003122 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x76>
	{
		if(scheduleRelayAndSwitchTab[j])
 80030fe:	7abb      	ldrb	r3, [r7, #10]
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	4413      	add	r3, r2
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d005      	beq.n	8003116 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x6a>
		{
			TempLight = TempLight | a;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	b2da      	uxtb	r2, r3
 800310e:	7a3b      	ldrb	r3, [r7, #8]
 8003110:	4313      	orrs	r3, r2
 8003112:	b2db      	uxtb	r3, r3
 8003114:	723b      	strb	r3, [r7, #8]
		}
		a = a << 1; // Mask bit shift
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 800311c:	7abb      	ldrb	r3, [r7, #10]
 800311e:	3301      	adds	r3, #1
 8003120:	72bb      	strb	r3, [r7, #10]
 8003122:	7abb      	ldrb	r3, [r7, #10]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d9ea      	bls.n	80030fe <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x52>
	}

	if(1 == NrOfSchedule)
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d10e      	bne.n	800314c <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xa0>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelay, sizeof(TempRelay));
 800312e:	f107 0309 	add.w	r3, r7, #9
 8003132:	2201      	movs	r2, #1
 8003134:	4619      	mov	r1, r3
 8003136:	2006      	movs	r0, #6
 8003138:	f7ff fd54 	bl	8002be4 <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLight, sizeof(TempLight));
 800313c:	f107 0308 	add.w	r3, r7, #8
 8003140:	2201      	movs	r2, #1
 8003142:	4619      	mov	r1, r3
 8003144:	2007      	movs	r0, #7
 8003146:	f7ff fd4d 	bl	8002be4 <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
	}
}
 800314a:	e010      	b.n	800316e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
	else if(2 == NrOfSchedule)
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d10d      	bne.n	800316e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
 8003152:	f107 0309 	add.w	r3, r7, #9
 8003156:	2201      	movs	r2, #1
 8003158:	4619      	mov	r1, r3
 800315a:	200d      	movs	r0, #13
 800315c:	f7ff fd42 	bl	8002be4 <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
 8003160:	f107 0308 	add.w	r3, r7, #8
 8003164:	2201      	movs	r2, #1
 8003166:	4619      	mov	r1, r3
 8003168:	200e      	movs	r0, #14
 800316a:	f7ff fd3b 	bl	8002be4 <eeprom_write>
}
 800316e:	bf00      	nop
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <EEPROM_ScheduleHourOnRead>:
//
// Function to Read and Update from EEPROM memory Hours and Minutes ON / OFF which schedule apply
//
// ON READ
void EEPROM_ScheduleHourOnRead(uint8_t NrOfSchedule, uint8_t * hourOn)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	4603      	mov	r3, r0
 800317e:	6039      	str	r1, [r7, #0]
 8003180:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d107      	bne.n	800319c <EEPROM_ScheduleHourOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_ON, &TempHour, sizeof(TempHour));
 800318c:	f107 030f 	add.w	r3, r7, #15
 8003190:	2201      	movs	r2, #1
 8003192:	4619      	mov	r1, r3
 8003194:	2008      	movs	r0, #8
 8003196:	f7ff fd07 	bl	8002ba8 <eeprom_read>
 800319a:	e009      	b.n	80031b0 <EEPROM_ScheduleHourOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d106      	bne.n	80031b0 <EEPROM_ScheduleHourOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_ON, &TempHour, sizeof(TempHour));
 80031a2:	f107 030f 	add.w	r3, r7, #15
 80031a6:	2201      	movs	r2, #1
 80031a8:	4619      	mov	r1, r3
 80031aa:	200f      	movs	r0, #15
 80031ac:	f7ff fcfc 	bl	8002ba8 <eeprom_read>
	}

	*hourOn = TempHour;
 80031b0:	7bfa      	ldrb	r2, [r7, #15]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	701a      	strb	r2, [r3, #0]
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <EEPROM_ScheduleMinuteOnRead>:

void EEPROM_ScheduleMinuteOnRead(uint8_t NrOfSchedule, uint8_t * minuteOn)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	4603      	mov	r3, r0
 80031c6:	6039      	str	r1, [r7, #0]
 80031c8:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d107      	bne.n	80031e4 <EEPROM_ScheduleMinuteOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 80031d4:	f107 030f 	add.w	r3, r7, #15
 80031d8:	2201      	movs	r2, #1
 80031da:	4619      	mov	r1, r3
 80031dc:	2009      	movs	r0, #9
 80031de:	f7ff fce3 	bl	8002ba8 <eeprom_read>
 80031e2:	e009      	b.n	80031f8 <EEPROM_ScheduleMinuteOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d106      	bne.n	80031f8 <EEPROM_ScheduleMinuteOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 80031ea:	f107 030f 	add.w	r3, r7, #15
 80031ee:	2201      	movs	r2, #1
 80031f0:	4619      	mov	r1, r3
 80031f2:	2010      	movs	r0, #16
 80031f4:	f7ff fcd8 	bl	8002ba8 <eeprom_read>
	}
	*minuteOn = TempMinute;
 80031f8:	7bfa      	ldrb	r2, [r7, #15]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	701a      	strb	r2, [r3, #0]
}
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <EEPROM_ScheduleHourOffRead>:

//
// OFF READ
void EEPROM_ScheduleHourOffRead(uint8_t NrOfSchedule, uint8_t * hourOff)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b084      	sub	sp, #16
 800320a:	af00      	add	r7, sp, #0
 800320c:	4603      	mov	r3, r0
 800320e:	6039      	str	r1, [r7, #0]
 8003210:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d107      	bne.n	800322c <EEPROM_ScheduleHourOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &TempHour, sizeof(TempHour));
 800321c:	f107 030f 	add.w	r3, r7, #15
 8003220:	2201      	movs	r2, #1
 8003222:	4619      	mov	r1, r3
 8003224:	200a      	movs	r0, #10
 8003226:	f7ff fcbf 	bl	8002ba8 <eeprom_read>
 800322a:	e009      	b.n	8003240 <EEPROM_ScheduleHourOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d106      	bne.n	8003240 <EEPROM_ScheduleHourOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &TempHour, sizeof(TempHour));
 8003232:	f107 030f 	add.w	r3, r7, #15
 8003236:	2201      	movs	r2, #1
 8003238:	4619      	mov	r1, r3
 800323a:	2011      	movs	r0, #17
 800323c:	f7ff fcb4 	bl	8002ba8 <eeprom_read>
	}

	*hourOff = TempHour;
 8003240:	7bfa      	ldrb	r2, [r7, #15]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	701a      	strb	r2, [r3, #0]

}
 8003246:	bf00      	nop
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <EEPROM_ScheduleMinuteOffRead>:
void EEPROM_ScheduleMinuteOffRead(uint8_t NrOfSchedule, uint8_t * minuteOff)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	4603      	mov	r3, r0
 8003256:	6039      	str	r1, [r7, #0]
 8003258:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 800325a:	2300      	movs	r3, #0
 800325c:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d107      	bne.n	8003274 <EEPROM_ScheduleMinuteOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 8003264:	f107 030f 	add.w	r3, r7, #15
 8003268:	2201      	movs	r2, #1
 800326a:	4619      	mov	r1, r3
 800326c:	200b      	movs	r0, #11
 800326e:	f7ff fc9b 	bl	8002ba8 <eeprom_read>
 8003272:	e009      	b.n	8003288 <EEPROM_ScheduleMinuteOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d106      	bne.n	8003288 <EEPROM_ScheduleMinuteOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 800327a:	f107 030f 	add.w	r3, r7, #15
 800327e:	2201      	movs	r2, #1
 8003280:	4619      	mov	r1, r3
 8003282:	2012      	movs	r0, #18
 8003284:	f7ff fc90 	bl	8002ba8 <eeprom_read>
	}
	*minuteOff = TempMinute;
 8003288:	7bfa      	ldrb	r2, [r7, #15]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	701a      	strb	r2, [r3, #0]
}
 800328e:	bf00      	nop
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <EEPROM_ScheduleHourOnUpdate>:

//
// ON UPDATE IN EEPROM
void EEPROM_ScheduleHourOnUpdate(uint8_t NrOfSchedule, uint8_t hourOn)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	4603      	mov	r3, r0
 800329e:	460a      	mov	r2, r1
 80032a0:	71fb      	strb	r3, [r7, #7]
 80032a2:	4613      	mov	r3, r2
 80032a4:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOn;
 80032a6:	79bb      	ldrb	r3, [r7, #6]
 80032a8:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_ON, &NewHour, sizeof(NewHour));
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d107      	bne.n	80032c0 <EEPROM_ScheduleHourOnUpdate+0x2a>
 80032b0:	f107 030f 	add.w	r3, r7, #15
 80032b4:	2201      	movs	r2, #1
 80032b6:	4619      	mov	r1, r3
 80032b8:	2008      	movs	r0, #8
 80032ba:	f7ff fc93 	bl	8002be4 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
}
 80032be:	e009      	b.n	80032d4 <EEPROM_ScheduleHourOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d106      	bne.n	80032d4 <EEPROM_ScheduleHourOnUpdate+0x3e>
 80032c6:	f107 030f 	add.w	r3, r7, #15
 80032ca:	2201      	movs	r2, #1
 80032cc:	4619      	mov	r1, r3
 80032ce:	200f      	movs	r0, #15
 80032d0:	f7ff fc88 	bl	8002be4 <eeprom_write>
}
 80032d4:	bf00      	nop
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <EEPROM_ScheduleMinuteOnUpdate>:
void EEPROM_ScheduleMinuteOnUpdate(uint8_t NrOfSchedule, uint8_t minuteOn)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	460a      	mov	r2, r1
 80032e6:	71fb      	strb	r3, [r7, #7]
 80032e8:	4613      	mov	r3, r2
 80032ea:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOn;
 80032ec:	79bb      	ldrb	r3, [r7, #6]
 80032ee:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d107      	bne.n	8003306 <EEPROM_ScheduleMinuteOnUpdate+0x2a>
 80032f6:	f107 030f 	add.w	r3, r7, #15
 80032fa:	2201      	movs	r2, #1
 80032fc:	4619      	mov	r1, r3
 80032fe:	2009      	movs	r0, #9
 8003300:	f7ff fc70 	bl	8002be4 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
}
 8003304:	e009      	b.n	800331a <EEPROM_ScheduleMinuteOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d106      	bne.n	800331a <EEPROM_ScheduleMinuteOnUpdate+0x3e>
 800330c:	f107 030f 	add.w	r3, r7, #15
 8003310:	2201      	movs	r2, #1
 8003312:	4619      	mov	r1, r3
 8003314:	2010      	movs	r0, #16
 8003316:	f7ff fc65 	bl	8002be4 <eeprom_write>
}
 800331a:	bf00      	nop
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <EEPROM_ScheduleHourOffUpdate>:

//
// OFF UPDATE IN EEPROM
void EEPROM_ScheduleHourOffUpdate(uint8_t NrOfSchedule, uint8_t hourOff)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b084      	sub	sp, #16
 8003326:	af00      	add	r7, sp, #0
 8003328:	4603      	mov	r3, r0
 800332a:	460a      	mov	r2, r1
 800332c:	71fb      	strb	r3, [r7, #7]
 800332e:	4613      	mov	r3, r2
 8003330:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOff;
 8003332:	79bb      	ldrb	r3, [r7, #6]
 8003334:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &NewHour, sizeof(NewHour));
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d107      	bne.n	800334c <EEPROM_ScheduleHourOffUpdate+0x2a>
 800333c:	f107 030f 	add.w	r3, r7, #15
 8003340:	2201      	movs	r2, #1
 8003342:	4619      	mov	r1, r3
 8003344:	200a      	movs	r0, #10
 8003346:	f7ff fc4d 	bl	8002be4 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));

}
 800334a:	e009      	b.n	8003360 <EEPROM_ScheduleHourOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d106      	bne.n	8003360 <EEPROM_ScheduleHourOffUpdate+0x3e>
 8003352:	f107 030f 	add.w	r3, r7, #15
 8003356:	2201      	movs	r2, #1
 8003358:	4619      	mov	r1, r3
 800335a:	2011      	movs	r0, #17
 800335c:	f7ff fc42 	bl	8002be4 <eeprom_write>
}
 8003360:	bf00      	nop
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <EEPROM_ScheduleMinuteOffUpdate>:
void EEPROM_ScheduleMinuteOffUpdate(uint8_t NrOfSchedule, uint8_t minuteOff)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	460a      	mov	r2, r1
 8003372:	71fb      	strb	r3, [r7, #7]
 8003374:	4613      	mov	r3, r2
 8003376:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOff;
 8003378:	79bb      	ldrb	r3, [r7, #6]
 800337a:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d107      	bne.n	8003392 <EEPROM_ScheduleMinuteOffUpdate+0x2a>
 8003382:	f107 030f 	add.w	r3, r7, #15
 8003386:	2201      	movs	r2, #1
 8003388:	4619      	mov	r1, r3
 800338a:	200b      	movs	r0, #11
 800338c:	f7ff fc2a 	bl	8002be4 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));

}
 8003390:	e009      	b.n	80033a6 <EEPROM_ScheduleMinuteOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d106      	bne.n	80033a6 <EEPROM_ScheduleMinuteOffUpdate+0x3e>
 8003398:	f107 030f 	add.w	r3, r7, #15
 800339c:	2201      	movs	r2, #1
 800339e:	4619      	mov	r1, r3
 80033a0:	2012      	movs	r0, #18
 80033a2:	f7ff fc1f 	bl	8002be4 <eeprom_write>
}
 80033a6:	bf00      	nop
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80033b6:	f24c 6018 	movw	r0, #50712	; 0xc618
 80033ba:	f7fe fedb 	bl	8002174 <ILI9341_ClearDisplay>
	  //
	  // Draw Image with LOGO
	  ILI9341_DrawImage(30, 50, logo, 240, 140);
 80033be:	238c      	movs	r3, #140	; 0x8c
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	23f0      	movs	r3, #240	; 0xf0
 80033c4:	4aae      	ldr	r2, [pc, #696]	; (8003680 <system_init+0x2d0>)
 80033c6:	2132      	movs	r1, #50	; 0x32
 80033c8:	201e      	movs	r0, #30
 80033ca:	f7fe fea8 	bl	800211e <ILI9341_DrawImage>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 80033ce:	48ad      	ldr	r0, [pc, #692]	; (8003684 <system_init+0x2d4>)
 80033d0:	f7fe facc 	bl	800196c <EF_SetFont>
	  sprintf((char*)Msg, "Inicjalizacja...");
 80033d4:	49ac      	ldr	r1, [pc, #688]	; (8003688 <system_init+0x2d8>)
 80033d6:	48ad      	ldr	r0, [pc, #692]	; (800368c <system_init+0x2dc>)
 80033d8:	f00e fdb6 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, 60, 10, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80033dc:	f24c 6318 	movw	r3, #50712	; 0xc618
 80033e0:	9301      	str	r3, [sp, #4]
 80033e2:	2300      	movs	r3, #0
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	2300      	movs	r3, #0
 80033e8:	220a      	movs	r2, #10
 80033ea:	213c      	movs	r1, #60	; 0x3c
 80033ec:	48a7      	ldr	r0, [pc, #668]	; (800368c <system_init+0x2dc>)
 80033ee:	f7fe fcd7 	bl	8001da0 <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  LastTime = HAL_GetTick();
 80033f2:	f007 f8cd 	bl	800a590 <HAL_GetTick>
 80033f6:	4603      	mov	r3, r0
 80033f8:	4aa5      	ldr	r2, [pc, #660]	; (8003690 <system_init+0x2e0>)
 80033fa:	6013      	str	r3, [r2, #0]
	  GFX_DrawRoundRectangle(60, 190, 20, 20, 5, ILI9341_RED);
 80033fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003400:	9301      	str	r3, [sp, #4]
 8003402:	2305      	movs	r3, #5
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	2314      	movs	r3, #20
 8003408:	2214      	movs	r2, #20
 800340a:	21be      	movs	r1, #190	; 0xbe
 800340c:	203c      	movs	r0, #60	; 0x3c
 800340e:	f7fe f9df 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 190, 20, 20, 5, ILI9341_RED);
 8003412:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003416:	9301      	str	r3, [sp, #4]
 8003418:	2305      	movs	r3, #5
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	2314      	movs	r3, #20
 800341e:	2214      	movs	r2, #20
 8003420:	21be      	movs	r1, #190	; 0xbe
 8003422:	205a      	movs	r0, #90	; 0x5a
 8003424:	f7fe f9d4 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 190, 20, 20, 5, ILI9341_RED);
 8003428:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800342c:	9301      	str	r3, [sp, #4]
 800342e:	2305      	movs	r3, #5
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	2314      	movs	r3, #20
 8003434:	2214      	movs	r2, #20
 8003436:	21be      	movs	r1, #190	; 0xbe
 8003438:	2078      	movs	r0, #120	; 0x78
 800343a:	f7fe f9c9 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 190, 20, 20, 5, ILI9341_RED);
 800343e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003442:	9301      	str	r3, [sp, #4]
 8003444:	2305      	movs	r3, #5
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	2314      	movs	r3, #20
 800344a:	2214      	movs	r2, #20
 800344c:	21be      	movs	r1, #190	; 0xbe
 800344e:	2096      	movs	r0, #150	; 0x96
 8003450:	f7fe f9be 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 190, 20, 20, 5, ILI9341_RED);
 8003454:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003458:	9301      	str	r3, [sp, #4]
 800345a:	2305      	movs	r3, #5
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	2314      	movs	r3, #20
 8003460:	2214      	movs	r2, #20
 8003462:	21be      	movs	r1, #190	; 0xbe
 8003464:	20b4      	movs	r0, #180	; 0xb4
 8003466:	f7fe f9b3 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 190, 20, 20, 5, ILI9341_RED);
 800346a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800346e:	9301      	str	r3, [sp, #4]
 8003470:	2305      	movs	r3, #5
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	2314      	movs	r3, #20
 8003476:	2214      	movs	r2, #20
 8003478:	21be      	movs	r1, #190	; 0xbe
 800347a:	20d2      	movs	r0, #210	; 0xd2
 800347c:	f7fe f9a8 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 190, 20, 20, 5, ILI9341_RED);
 8003480:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	2305      	movs	r3, #5
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2314      	movs	r3, #20
 800348c:	2214      	movs	r2, #20
 800348e:	21be      	movs	r1, #190	; 0xbe
 8003490:	20f0      	movs	r0, #240	; 0xf0
 8003492:	f7fe f99d 	bl	80017d0 <GFX_DrawRoundRectangle>
	  LastTime = HAL_GetTick();
 8003496:	f007 f87b 	bl	800a590 <HAL_GetTick>
 800349a:	4603      	mov	r3, r0
 800349c:	4a7c      	ldr	r2, [pc, #496]	; (8003690 <system_init+0x2e0>)
 800349e:	6013      	str	r3, [r2, #0]
	  EF_SetFont(&arial_11ptFontInfo);
 80034a0:	487c      	ldr	r0, [pc, #496]	; (8003694 <system_init+0x2e4>)
 80034a2:	f7fe fa63 	bl	800196c <EF_SetFont>
	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80034a6:	20c8      	movs	r0, #200	; 0xc8
 80034a8:	f002 f8ea 	bl	8005680 <initWait>
	  	  LastTime = HAL_GetTick();
 80034ac:	f007 f870 	bl	800a590 <HAL_GetTick>
 80034b0:	4603      	mov	r3, r0
 80034b2:	4a77      	ldr	r2, [pc, #476]	; (8003690 <system_init+0x2e0>)
 80034b4:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//First step of initialization
//
	  GFX_DrawFillRoundRectangle(60, 190, 20, 20, 5, ILI9341_GREEN);
 80034b6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	2305      	movs	r3, #5
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2314      	movs	r3, #20
 80034c2:	2214      	movs	r2, #20
 80034c4:	21be      	movs	r1, #190	; 0xbe
 80034c6:	203c      	movs	r0, #60	; 0x3c
 80034c8:	f7fe f9ff 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)); // read number of leds
 80034cc:	2201      	movs	r2, #1
 80034ce:	4972      	ldr	r1, [pc, #456]	; (8003698 <system_init+0x2e8>)
 80034d0:	2001      	movs	r0, #1
 80034d2:	f7ff fb69 	bl	8002ba8 <eeprom_read>
	  	  SendComand(UCMD_WS_NUMBER_LED); // Send number of LEDs
 80034d6:	2025      	movs	r0, #37	; 0x25
 80034d8:	f005 fe1a 	bl	8009110 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80034dc:	486f      	ldr	r0, [pc, #444]	; (800369c <system_init+0x2ec>)
 80034de:	f006 fd77 	bl	8009fd0 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o ledach...    ");
 80034e2:	496f      	ldr	r1, [pc, #444]	; (80036a0 <system_init+0x2f0>)
 80034e4:	4869      	ldr	r0, [pc, #420]	; (800368c <system_init+0x2dc>)
 80034e6:	f00e fd2f 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80034ea:	f24c 6318 	movw	r3, #50712	; 0xc618
 80034ee:	9301      	str	r3, [sp, #4]
 80034f0:	2301      	movs	r3, #1
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	2300      	movs	r3, #0
 80034f6:	22dc      	movs	r2, #220	; 0xdc
 80034f8:	2114      	movs	r1, #20
 80034fa:	4864      	ldr	r0, [pc, #400]	; (800368c <system_init+0x2dc>)
 80034fc:	f7fe fc50 	bl	8001da0 <EF_PutString>
	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003500:	20c8      	movs	r0, #200	; 0xc8
 8003502:	f002 f8bd 	bl	8005680 <initWait>
	  	  	  LastTime = HAL_GetTick();
 8003506:	f007 f843 	bl	800a590 <HAL_GetTick>
 800350a:	4603      	mov	r3, r0
 800350c:	4a60      	ldr	r2, [pc, #384]	; (8003690 <system_init+0x2e0>)
 800350e:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Second step of initialization
//
	  GFX_DrawFillRoundRectangle(90, 190, 20, 20, 5, ILI9341_GREEN);
 8003510:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	2305      	movs	r3, #5
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	2314      	movs	r3, #20
 800351c:	2214      	movs	r2, #20
 800351e:	21be      	movs	r1, #190	; 0xbe
 8003520:	205a      	movs	r0, #90	; 0x5a
 8003522:	f7fe f9d2 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);	// ASK for current temperature inside
 8003526:	201b      	movs	r0, #27
 8003528:	f005 fdf2 	bl	8009110 <SendComand>
  	  	  EEPROM_RelayStateRestore(); // Restore state of relay to state before power off, from EEPROM memory
 800352c:	f7ff fc62 	bl	8002df4 <EEPROM_RelayStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003530:	485a      	ldr	r0, [pc, #360]	; (800369c <system_init+0x2ec>)
 8003532:	f006 fd4d 	bl	8009fd0 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o przekaźnikach...  ");
 8003536:	495b      	ldr	r1, [pc, #364]	; (80036a4 <system_init+0x2f4>)
 8003538:	4854      	ldr	r0, [pc, #336]	; (800368c <system_init+0x2dc>)
 800353a:	f00e fd05 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800353e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003542:	9301      	str	r3, [sp, #4]
 8003544:	2301      	movs	r3, #1
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	2300      	movs	r3, #0
 800354a:	22dc      	movs	r2, #220	; 0xdc
 800354c:	2114      	movs	r1, #20
 800354e:	484f      	ldr	r0, [pc, #316]	; (800368c <system_init+0x2dc>)
 8003550:	f7fe fc26 	bl	8001da0 <EF_PutString>
  	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003554:	20c8      	movs	r0, #200	; 0xc8
 8003556:	f002 f893 	bl	8005680 <initWait>
  	  	  	  LastTime = HAL_GetTick();
 800355a:	f007 f819 	bl	800a590 <HAL_GetTick>
 800355e:	4603      	mov	r3, r0
 8003560:	4a4b      	ldr	r2, [pc, #300]	; (8003690 <system_init+0x2e0>)
 8003562:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Third step of initialization
//
	  GFX_DrawFillRoundRectangle(120, 190, 20, 20, 5, ILI9341_GREEN);
 8003564:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003568:	9301      	str	r3, [sp, #4]
 800356a:	2305      	movs	r3, #5
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	2314      	movs	r3, #20
 8003570:	2214      	movs	r2, #20
 8003572:	21be      	movs	r1, #190	; 0xbe
 8003574:	2078      	movs	r0, #120	; 0x78
 8003576:	f7fe f9a8 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 800357a:	2004      	movs	r0, #4
 800357c:	f005 fdc8 	bl	8009110 <SendComand>
	  	  updateAllSchedulesInfo(1); // Read all info about schedule 1
 8003580:	2001      	movs	r0, #1
 8003582:	f004 fabf 	bl	8007b04 <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003586:	20c8      	movs	r0, #200	; 0xc8
 8003588:	f002 f87a 	bl	8005680 <initWait>
			  LastTime = HAL_GetTick();
 800358c:	f007 f800 	bl	800a590 <HAL_GetTick>
 8003590:	4603      	mov	r3, r0
 8003592:	4a3f      	ldr	r2, [pc, #252]	; (8003690 <system_init+0x2e0>)
 8003594:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fourth step of initialization
//
	  GFX_DrawFillRoundRectangle(150, 190, 20, 20, 5, ILI9341_GREEN);
 8003596:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	2305      	movs	r3, #5
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	2314      	movs	r3, #20
 80035a2:	2214      	movs	r2, #20
 80035a4:	21be      	movs	r1, #190	; 0xbe
 80035a6:	2096      	movs	r0, #150	; 0x96
 80035a8:	f7fe f98f 	bl	80018ca <GFX_DrawFillRoundRectangle>
  	  	  EEPROM_LightStateRestore(); // Restore state of lights to state before power off, from EEPROM memory
 80035ac:	f7ff fc5a 	bl	8002e64 <EEPROM_LightStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80035b0:	483a      	ldr	r0, [pc, #232]	; (800369c <system_init+0x2ec>)
 80035b2:	f006 fd0d 	bl	8009fd0 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o światlach...    ");
 80035b6:	493c      	ldr	r1, [pc, #240]	; (80036a8 <system_init+0x2f8>)
 80035b8:	4834      	ldr	r0, [pc, #208]	; (800368c <system_init+0x2dc>)
 80035ba:	f00e fcc5 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80035be:	f24c 6318 	movw	r3, #50712	; 0xc618
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	2301      	movs	r3, #1
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	2300      	movs	r3, #0
 80035ca:	22dc      	movs	r2, #220	; 0xdc
 80035cc:	2114      	movs	r1, #20
 80035ce:	482f      	ldr	r0, [pc, #188]	; (800368c <system_init+0x2dc>)
 80035d0:	f7fe fbe6 	bl	8001da0 <EF_PutString>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80035d4:	20c8      	movs	r0, #200	; 0xc8
 80035d6:	f002 f853 	bl	8005680 <initWait>
			  LastTime = HAL_GetTick();
 80035da:	f006 ffd9 	bl	800a590 <HAL_GetTick>
 80035de:	4603      	mov	r3, r0
 80035e0:	4a2b      	ldr	r2, [pc, #172]	; (8003690 <system_init+0x2e0>)
 80035e2:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(180, 190, 20, 20, 5, ILI9341_GREEN);
 80035e4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	2305      	movs	r3, #5
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	2314      	movs	r3, #20
 80035f0:	2214      	movs	r2, #20
 80035f2:	21be      	movs	r1, #190	; 0xbe
 80035f4:	20b4      	movs	r0, #180	; 0xb4
 80035f6:	f7fe f968 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  	SendComand(UCMD_TEMP_1);	// ASK for current temperature outside
 80035fa:	2003      	movs	r0, #3
 80035fc:	f005 fd88 	bl	8009110 <SendComand>
	  	  	updateAllSchedulesInfo(2); // Read all info about schedule 2
 8003600:	2002      	movs	r0, #2
 8003602:	f004 fa7f 	bl	8007b04 <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003606:	20c8      	movs	r0, #200	; 0xc8
 8003608:	f002 f83a 	bl	8005680 <initWait>
			  LastTime = HAL_GetTick();
 800360c:	f006 ffc0 	bl	800a590 <HAL_GetTick>
 8003610:	4603      	mov	r3, r0
 8003612:	4a1f      	ldr	r2, [pc, #124]	; (8003690 <system_init+0x2e0>)
 8003614:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Sixth step of initialization
//
	  GFX_DrawFillRoundRectangle(210, 190, 20, 20, 5, ILI9341_GREEN);
 8003616:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800361a:	9301      	str	r3, [sp, #4]
 800361c:	2305      	movs	r3, #5
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	2314      	movs	r3, #20
 8003622:	2214      	movs	r2, #20
 8003624:	21be      	movs	r1, #190	; 0xbe
 8003626:	20d2      	movs	r0, #210	; 0xd2
 8003628:	f7fe f94f 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 800362c:	2015      	movs	r0, #21
 800362e:	f005 fd6f 	bl	8009110 <SendComand>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003632:	20c8      	movs	r0, #200	; 0xc8
 8003634:	f002 f824 	bl	8005680 <initWait>
			  LastTime = HAL_GetTick();
 8003638:	f006 ffaa 	bl	800a590 <HAL_GetTick>
 800363c:	4603      	mov	r3, r0
 800363e:	4a14      	ldr	r2, [pc, #80]	; (8003690 <system_init+0x2e0>)
 8003640:	6013      	str	r3, [r2, #0]
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(240, 190, 20, 20, 5, ILI9341_GREEN);
 8003642:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003646:	9301      	str	r3, [sp, #4]
 8003648:	2305      	movs	r3, #5
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	2314      	movs	r3, #20
 800364e:	2214      	movs	r2, #20
 8003650:	21be      	movs	r1, #190	; 0xbe
 8003652:	20f0      	movs	r0, #240	; 0xf0
 8003654:	f7fe f939 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8003658:	2016      	movs	r0, #22
 800365a:	f005 fd59 	bl	8009110 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 800365e:	480f      	ldr	r0, [pc, #60]	; (800369c <system_init+0x2ec>)
 8003660:	f006 fcb6 	bl	8009fd0 <UARTDMA_TransmitEvent>
			  initWait(2*ONE_MODULE_INIT_TIME_IN_MS);
 8003664:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003668:	f002 f80a 	bl	8005680 <initWait>
			  LastTime = HAL_GetTick();
 800366c:	f006 ff90 	bl	800a590 <HAL_GetTick>
 8003670:	4603      	mov	r3, r0
 8003672:	4a07      	ldr	r2, [pc, #28]	; (8003690 <system_init+0x2e0>)
 8003674:	6013      	str	r3, [r2, #0]

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 8003676:	2301      	movs	r3, #1
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	080165fc 	.word	0x080165fc
 8003684:	080296c4 	.word	0x080296c4
 8003688:	08015bd0 	.word	0x08015bd0
 800368c:	200002c0 	.word	0x200002c0
 8003690:	20000250 	.word	0x20000250
 8003694:	0802774c 	.word	0x0802774c
 8003698:	20000033 	.word	0x20000033
 800369c:	200004f0 	.word	0x200004f0
 80036a0:	08015be4 	.word	0x08015be4
 80036a4:	08015c00 	.word	0x08015c00
 80036a8:	08015c20 	.word	0x08015c20

080036ac <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08a      	sub	sp, #40	; 0x28
 80036b0:	af02      	add	r7, sp, #8
 80036b2:	ed87 0a05 	vstr	s0, [r7, #20]
 80036b6:	edc7 0a04 	vstr	s1, [r7, #16]
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	460b      	mov	r3, r1
 80036be:	ed87 1a01 	vstr	s2, [r7, #4]
 80036c2:	72fb      	strb	r3, [r7, #11]
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80036c4:	f24c 6018 	movw	r0, #50712	; 0xc618
 80036c8:	f7fe fd54 	bl	8002174 <ILI9341_ClearDisplay>
	  SendComand(UCMD_TEMP_1);
 80036cc:	2003      	movs	r0, #3
 80036ce:	f005 fd1f 	bl	8009110 <SendComand>
	  SendComand(UCMD_PRES_1);
 80036d2:	2004      	movs	r0, #4
 80036d4:	f005 fd1c 	bl	8009110 <SendComand>
	  SendComand(UCMD_TEMP_2);
 80036d8:	201b      	movs	r0, #27
 80036da:	f005 fd19 	bl	8009110 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 80036de:	f7ff f9b5 	bl	8002a4c <DS3231_GetHour>
 80036e2:	4603      	mov	r3, r0
 80036e4:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 80036e6:	f7ff f9bd 	bl	8002a64 <DS3231_GetMinute>
 80036ea:	4603      	mov	r3, r0
 80036ec:	77bb      	strb	r3, [r7, #30]


	  EF_SetFont(&arialBlack_20ptFontInfo);
 80036ee:	4881      	ldr	r0, [pc, #516]	; (80038f4 <showCurrentParameters+0x248>)
 80036f0:	f7fe f93c 	bl	800196c <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)Msg, "-=PARAMETRY=-");
 80036f4:	4980      	ldr	r1, [pc, #512]	; (80038f8 <showCurrentParameters+0x24c>)
 80036f6:	4881      	ldr	r0, [pc, #516]	; (80038fc <showCurrentParameters+0x250>)
 80036f8:	f00e fc26 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80036fc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	2300      	movs	r3, #0
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800370a:	220a      	movs	r2, #10
 800370c:	212f      	movs	r1, #47	; 0x2f
 800370e:	487b      	ldr	r0, [pc, #492]	; (80038fc <showCurrentParameters+0x250>)
 8003710:	f7fe fb46 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003714:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	2329      	movs	r3, #41	; 0x29
 800371c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003720:	2129      	movs	r1, #41	; 0x29
 8003722:	2000      	movs	r0, #0
 8003724:	f7fd fe72 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003728:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	232b      	movs	r3, #43	; 0x2b
 8003730:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003734:	212b      	movs	r1, #43	; 0x2b
 8003736:	2000      	movs	r0, #0
 8003738:	f7fd fe68 	bl	800140c <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 800373c:	7ffb      	ldrb	r3, [r7, #31]
 800373e:	2b09      	cmp	r3, #9
 8003740:	d809      	bhi.n	8003756 <showCurrentParameters+0xaa>
 8003742:	7fbb      	ldrb	r3, [r7, #30]
 8003744:	2b09      	cmp	r3, #9
 8003746:	d806      	bhi.n	8003756 <showCurrentParameters+0xaa>
 8003748:	7ffa      	ldrb	r2, [r7, #31]
 800374a:	7fbb      	ldrb	r3, [r7, #30]
 800374c:	496c      	ldr	r1, [pc, #432]	; (8003900 <showCurrentParameters+0x254>)
 800374e:	486b      	ldr	r0, [pc, #428]	; (80038fc <showCurrentParameters+0x250>)
 8003750:	f00e fbfa 	bl	8011f48 <siprintf>
 8003754:	e019      	b.n	800378a <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 8003756:	7ffb      	ldrb	r3, [r7, #31]
 8003758:	2b09      	cmp	r3, #9
 800375a:	d806      	bhi.n	800376a <showCurrentParameters+0xbe>
 800375c:	7ffa      	ldrb	r2, [r7, #31]
 800375e:	7fbb      	ldrb	r3, [r7, #30]
 8003760:	4968      	ldr	r1, [pc, #416]	; (8003904 <showCurrentParameters+0x258>)
 8003762:	4866      	ldr	r0, [pc, #408]	; (80038fc <showCurrentParameters+0x250>)
 8003764:	f00e fbf0 	bl	8011f48 <siprintf>
 8003768:	e00f      	b.n	800378a <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 800376a:	7fbb      	ldrb	r3, [r7, #30]
 800376c:	2b09      	cmp	r3, #9
 800376e:	d806      	bhi.n	800377e <showCurrentParameters+0xd2>
 8003770:	7ffa      	ldrb	r2, [r7, #31]
 8003772:	7fbb      	ldrb	r3, [r7, #30]
 8003774:	4964      	ldr	r1, [pc, #400]	; (8003908 <showCurrentParameters+0x25c>)
 8003776:	4861      	ldr	r0, [pc, #388]	; (80038fc <showCurrentParameters+0x250>)
 8003778:	f00e fbe6 	bl	8011f48 <siprintf>
 800377c:	e005      	b.n	800378a <showCurrentParameters+0xde>
	  else sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 800377e:	7ffa      	ldrb	r2, [r7, #31]
 8003780:	7fbb      	ldrb	r3, [r7, #30]
 8003782:	4962      	ldr	r1, [pc, #392]	; (800390c <showCurrentParameters+0x260>)
 8003784:	485d      	ldr	r0, [pc, #372]	; (80038fc <showCurrentParameters+0x250>)
 8003786:	f00e fbdf 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800378a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800378e:	9301      	str	r3, [sp, #4]
 8003790:	2300      	movs	r3, #0
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	2300      	movs	r3, #0
 8003796:	2232      	movs	r2, #50	; 0x32
 8003798:	2114      	movs	r1, #20
 800379a:	4858      	ldr	r0, [pc, #352]	; (80038fc <showCurrentParameters+0x250>)
 800379c:	f7fe fb00 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 80037a0:	4b5b      	ldr	r3, [pc, #364]	; (8003910 <showCurrentParameters+0x264>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fc fee7 	bl	8000578 <__aeabi_f2d>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4959      	ldr	r1, [pc, #356]	; (8003914 <showCurrentParameters+0x268>)
 80037b0:	4852      	ldr	r0, [pc, #328]	; (80038fc <showCurrentParameters+0x250>)
 80037b2:	f00e fbc9 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80037b6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	2301      	movs	r3, #1
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	2300      	movs	r3, #0
 80037c2:	2250      	movs	r2, #80	; 0x50
 80037c4:	2114      	movs	r1, #20
 80037c6:	484d      	ldr	r0, [pc, #308]	; (80038fc <showCurrentParameters+0x250>)
 80037c8:	f7fe faea 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 80037cc:	4b52      	ldr	r3, [pc, #328]	; (8003918 <showCurrentParameters+0x26c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fc fed1 	bl	8000578 <__aeabi_f2d>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4950      	ldr	r1, [pc, #320]	; (800391c <showCurrentParameters+0x270>)
 80037dc:	4847      	ldr	r0, [pc, #284]	; (80038fc <showCurrentParameters+0x250>)
 80037de:	f00e fbb3 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80037e2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80037e6:	9301      	str	r3, [sp, #4]
 80037e8:	2300      	movs	r3, #0
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	2300      	movs	r3, #0
 80037ee:	226e      	movs	r2, #110	; 0x6e
 80037f0:	2114      	movs	r1, #20
 80037f2:	4842      	ldr	r0, [pc, #264]	; (80038fc <showCurrentParameters+0x250>)
 80037f4:	f7fe fad4 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "Poz. wody: -%ldmm", CDist2water);
 80037f8:	4b49      	ldr	r3, [pc, #292]	; (8003920 <showCurrentParameters+0x274>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	4949      	ldr	r1, [pc, #292]	; (8003924 <showCurrentParameters+0x278>)
 8003800:	483e      	ldr	r0, [pc, #248]	; (80038fc <showCurrentParameters+0x250>)
 8003802:	f00e fba1 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003806:	f24c 6318 	movw	r3, #50712	; 0xc618
 800380a:	9301      	str	r3, [sp, #4]
 800380c:	2300      	movs	r3, #0
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	2300      	movs	r3, #0
 8003812:	228c      	movs	r2, #140	; 0x8c
 8003814:	2114      	movs	r1, #20
 8003816:	4839      	ldr	r0, [pc, #228]	; (80038fc <showCurrentParameters+0x250>)
 8003818:	f7fe fac2 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 800381c:	4b42      	ldr	r3, [pc, #264]	; (8003928 <showCurrentParameters+0x27c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f7fc fea9 	bl	8000578 <__aeabi_f2d>
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	4940      	ldr	r1, [pc, #256]	; (800392c <showCurrentParameters+0x280>)
 800382c:	4833      	ldr	r0, [pc, #204]	; (80038fc <showCurrentParameters+0x250>)
 800382e:	f00e fb8b 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003832:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003836:	9301      	str	r3, [sp, #4]
 8003838:	2300      	movs	r3, #0
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	2300      	movs	r3, #0
 800383e:	22aa      	movs	r2, #170	; 0xaa
 8003840:	2114      	movs	r1, #20
 8003842:	482e      	ldr	r0, [pc, #184]	; (80038fc <showCurrentParameters+0x250>)
 8003844:	f7fe faac 	bl	8001da0 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003848:	4839      	ldr	r0, [pc, #228]	; (8003930 <showCurrentParameters+0x284>)
 800384a:	f7fe f88f 	bl	800196c <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800384e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	2305      	movs	r3, #5
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	2314      	movs	r3, #20
 800385a:	225f      	movs	r2, #95	; 0x5f
 800385c:	21d8      	movs	r1, #216	; 0xd8
 800385e:	20dc      	movs	r0, #220	; 0xdc
 8003860:	f7fe f833 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "CONTROL=>");
 8003864:	4933      	ldr	r1, [pc, #204]	; (8003934 <showCurrentParameters+0x288>)
 8003866:	4825      	ldr	r0, [pc, #148]	; (80038fc <showCurrentParameters+0x250>)
 8003868:	f00e fb6e 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800386c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	2300      	movs	r3, #0
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	2300      	movs	r3, #0
 8003878:	22da      	movs	r2, #218	; 0xda
 800387a:	21df      	movs	r1, #223	; 0xdf
 800387c:	481f      	ldr	r0, [pc, #124]	; (80038fc <showCurrentParameters+0x250>)
 800387e:	f7fe fa8f 	bl	8001da0 <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003882:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003886:	9301      	str	r3, [sp, #4]
 8003888:	2305      	movs	r3, #5
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	2314      	movs	r3, #20
 800388e:	2264      	movs	r2, #100	; 0x64
 8003890:	21d8      	movs	r1, #216	; 0xd8
 8003892:	200a      	movs	r0, #10
 8003894:	f7fe f819 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=LIGHTS");
 8003898:	4927      	ldr	r1, [pc, #156]	; (8003938 <showCurrentParameters+0x28c>)
 800389a:	4818      	ldr	r0, [pc, #96]	; (80038fc <showCurrentParameters+0x250>)
 800389c:	f00e fb54 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80038a0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038a4:	9301      	str	r3, [sp, #4]
 80038a6:	2300      	movs	r3, #0
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	2300      	movs	r3, #0
 80038ac:	22da      	movs	r2, #218	; 0xda
 80038ae:	2114      	movs	r1, #20
 80038b0:	4812      	ldr	r0, [pc, #72]	; (80038fc <showCurrentParameters+0x250>)
 80038b2:	f7fe fa75 	bl	8001da0 <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 80038b6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80038ba:	9301      	str	r3, [sp, #4]
 80038bc:	2305      	movs	r3, #5
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	2314      	movs	r3, #20
 80038c2:	225a      	movs	r2, #90	; 0x5a
 80038c4:	21d8      	movs	r1, #216	; 0xd8
 80038c6:	2078      	movs	r0, #120	; 0x78
 80038c8:	f7fd ffff 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">CLOCK<");
 80038cc:	491b      	ldr	r1, [pc, #108]	; (800393c <showCurrentParameters+0x290>)
 80038ce:	480b      	ldr	r0, [pc, #44]	; (80038fc <showCurrentParameters+0x250>)
 80038d0:	f00e fb3a 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80038d4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	2300      	movs	r3, #0
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	2300      	movs	r3, #0
 80038e0:	22da      	movs	r2, #218	; 0xda
 80038e2:	2184      	movs	r1, #132	; 0x84
 80038e4:	4805      	ldr	r0, [pc, #20]	; (80038fc <showCurrentParameters+0x250>)
 80038e6:	f7fe fa5b 	bl	8001da0 <EF_PutString>
}
 80038ea:	bf00      	nop
 80038ec:	3720      	adds	r7, #32
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	080296c4 	.word	0x080296c4
 80038f8:	08015c40 	.word	0x08015c40
 80038fc:	200002c0 	.word	0x200002c0
 8003900:	08015c50 	.word	0x08015c50
 8003904:	08015c60 	.word	0x08015c60
 8003908:	08015c70 	.word	0x08015c70
 800390c:	08015c80 	.word	0x08015c80
 8003910:	20000294 	.word	0x20000294
 8003914:	08015c90 	.word	0x08015c90
 8003918:	200002a0 	.word	0x200002a0
 800391c:	08015ca4 	.word	0x08015ca4
 8003920:	200002a4 	.word	0x200002a4
 8003924:	08015cb8 	.word	0x08015cb8
 8003928:	2000029c 	.word	0x2000029c
 800392c:	08015ccc 	.word	0x08015ccc
 8003930:	0802774c 	.word	0x0802774c
 8003934:	08015ce4 	.word	0x08015ce4
 8003938:	08015cf0 	.word	0x08015cf0
 800393c:	08015cfc 	.word	0x08015cfc

08003940 <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8003946:	2015      	movs	r0, #21
 8003948:	f005 fbe2 	bl	8009110 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800394c:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003950:	f7fe fc10 	bl	8002174 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003954:	485c      	ldr	r0, [pc, #368]	; (8003ac8 <showControlPanel+0x188>)
 8003956:	f7fe f809 	bl	800196c <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 800395a:	495c      	ldr	r1, [pc, #368]	; (8003acc <showControlPanel+0x18c>)
 800395c:	485c      	ldr	r0, [pc, #368]	; (8003ad0 <showControlPanel+0x190>)
 800395e:	f00e faf3 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003962:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003966:	9301      	str	r3, [sp, #4]
 8003968:	2300      	movs	r3, #0
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	231f      	movs	r3, #31
 800396e:	220a      	movs	r2, #10
 8003970:	2123      	movs	r1, #35	; 0x23
 8003972:	4857      	ldr	r0, [pc, #348]	; (8003ad0 <showControlPanel+0x190>)
 8003974:	f7fe fa14 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003978:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	2329      	movs	r3, #41	; 0x29
 8003980:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003984:	2129      	movs	r1, #41	; 0x29
 8003986:	2000      	movs	r0, #0
 8003988:	f7fd fd40 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800398c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	232b      	movs	r3, #43	; 0x2b
 8003994:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003998:	212b      	movs	r1, #43	; 0x2b
 800399a:	2000      	movs	r0, #0
 800399c:	f7fd fd36 	bl	800140c <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 80039a0:	494c      	ldr	r1, [pc, #304]	; (8003ad4 <showControlPanel+0x194>)
 80039a2:	484b      	ldr	r0, [pc, #300]	; (8003ad0 <showControlPanel+0x190>)
 80039a4:	f00e fad0 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80039a8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80039ac:	9301      	str	r3, [sp, #4]
 80039ae:	2300      	movs	r3, #0
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	2300      	movs	r3, #0
 80039b4:	223c      	movs	r2, #60	; 0x3c
 80039b6:	2114      	movs	r1, #20
 80039b8:	4845      	ldr	r0, [pc, #276]	; (8003ad0 <showControlPanel+0x190>)
 80039ba:	f7fe f9f1 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 80039be:	4946      	ldr	r1, [pc, #280]	; (8003ad8 <showControlPanel+0x198>)
 80039c0:	4843      	ldr	r0, [pc, #268]	; (8003ad0 <showControlPanel+0x190>)
 80039c2:	f00e fac1 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80039c6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80039ca:	9301      	str	r3, [sp, #4]
 80039cc:	2301      	movs	r3, #1
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	2300      	movs	r3, #0
 80039d2:	225a      	movs	r2, #90	; 0x5a
 80039d4:	2114      	movs	r1, #20
 80039d6:	483e      	ldr	r0, [pc, #248]	; (8003ad0 <showControlPanel+0x190>)
 80039d8:	f7fe f9e2 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 80039dc:	493f      	ldr	r1, [pc, #252]	; (8003adc <showControlPanel+0x19c>)
 80039de:	483c      	ldr	r0, [pc, #240]	; (8003ad0 <showControlPanel+0x190>)
 80039e0:	f00e fab2 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80039e4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80039e8:	9301      	str	r3, [sp, #4]
 80039ea:	2300      	movs	r3, #0
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	2300      	movs	r3, #0
 80039f0:	2278      	movs	r2, #120	; 0x78
 80039f2:	2114      	movs	r1, #20
 80039f4:	4836      	ldr	r0, [pc, #216]	; (8003ad0 <showControlPanel+0x190>)
 80039f6:	f7fe f9d3 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 80039fa:	4939      	ldr	r1, [pc, #228]	; (8003ae0 <showControlPanel+0x1a0>)
 80039fc:	4834      	ldr	r0, [pc, #208]	; (8003ad0 <showControlPanel+0x190>)
 80039fe:	f00e faa3 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a02:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a06:	9301      	str	r3, [sp, #4]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	2296      	movs	r2, #150	; 0x96
 8003a10:	2114      	movs	r1, #20
 8003a12:	482f      	ldr	r0, [pc, #188]	; (8003ad0 <showControlPanel+0x190>)
 8003a14:	f7fe f9c4 	bl	8001da0 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003a18:	4832      	ldr	r0, [pc, #200]	; (8003ae4 <showControlPanel+0x1a4>)
 8003a1a:	f7fd ffa7 	bl	800196c <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003a1e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a22:	9301      	str	r3, [sp, #4]
 8003a24:	2305      	movs	r3, #5
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	2314      	movs	r3, #20
 8003a2a:	225f      	movs	r2, #95	; 0x5f
 8003a2c:	21d8      	movs	r1, #216	; 0xd8
 8003a2e:	20dc      	movs	r0, #220	; 0xdc
 8003a30:	f7fd ff4b 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "LIGHTS=>");
 8003a34:	492c      	ldr	r1, [pc, #176]	; (8003ae8 <showControlPanel+0x1a8>)
 8003a36:	4826      	ldr	r0, [pc, #152]	; (8003ad0 <showControlPanel+0x190>)
 8003a38:	f00e fa86 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003a3c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	2300      	movs	r3, #0
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	2300      	movs	r3, #0
 8003a48:	22da      	movs	r2, #218	; 0xda
 8003a4a:	21df      	movs	r1, #223	; 0xdf
 8003a4c:	4820      	ldr	r0, [pc, #128]	; (8003ad0 <showControlPanel+0x190>)
 8003a4e:	f7fe f9a7 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003a52:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a56:	9301      	str	r3, [sp, #4]
 8003a58:	2305      	movs	r3, #5
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	2314      	movs	r3, #20
 8003a5e:	2264      	movs	r2, #100	; 0x64
 8003a60:	21d8      	movs	r1, #216	; 0xd8
 8003a62:	200a      	movs	r0, #10
 8003a64:	f7fd ff31 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=PARAM");
 8003a68:	4920      	ldr	r1, [pc, #128]	; (8003aec <showControlPanel+0x1ac>)
 8003a6a:	4819      	ldr	r0, [pc, #100]	; (8003ad0 <showControlPanel+0x190>)
 8003a6c:	f00e fa6c 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003a70:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a74:	9301      	str	r3, [sp, #4]
 8003a76:	2300      	movs	r3, #0
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	22da      	movs	r2, #218	; 0xda
 8003a7e:	2114      	movs	r1, #20
 8003a80:	4813      	ldr	r0, [pc, #76]	; (8003ad0 <showControlPanel+0x190>)
 8003a82:	f7fe f98d 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003a86:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a8a:	9301      	str	r3, [sp, #4]
 8003a8c:	2305      	movs	r3, #5
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	2314      	movs	r3, #20
 8003a92:	225a      	movs	r2, #90	; 0x5a
 8003a94:	21d8      	movs	r1, #216	; 0xd8
 8003a96:	2078      	movs	r0, #120	; 0x78
 8003a98:	f7fd ff17 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "ACTIVITIES");
 8003a9c:	4914      	ldr	r1, [pc, #80]	; (8003af0 <showControlPanel+0x1b0>)
 8003a9e:	480c      	ldr	r0, [pc, #48]	; (8003ad0 <showControlPanel+0x190>)
 8003aa0:	f00e fa52 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003aa4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003aa8:	9301      	str	r3, [sp, #4]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	22da      	movs	r2, #218	; 0xda
 8003ab2:	217e      	movs	r1, #126	; 0x7e
 8003ab4:	4806      	ldr	r0, [pc, #24]	; (8003ad0 <showControlPanel+0x190>)
 8003ab6:	f7fe f973 	bl	8001da0 <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003aba:	4803      	ldr	r0, [pc, #12]	; (8003ac8 <showControlPanel+0x188>)
 8003abc:	f7fd ff56 	bl	800196c <EF_SetFont>


}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	080296c4 	.word	0x080296c4
 8003acc:	08015d04 	.word	0x08015d04
 8003ad0:	200002c0 	.word	0x200002c0
 8003ad4:	08015d18 	.word	0x08015d18
 8003ad8:	08015d2c 	.word	0x08015d2c
 8003adc:	08015d40 	.word	0x08015d40
 8003ae0:	08015d54 	.word	0x08015d54
 8003ae4:	0802774c 	.word	0x0802774c
 8003ae8:	08015d68 	.word	0x08015d68
 8003aec:	08015d74 	.word	0x08015d74
 8003af0:	08015d7c 	.word	0x08015d7c

08003af4 <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8003afa:	2016      	movs	r0, #22
 8003afc:	f005 fb08 	bl	8009110 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003b00:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003b04:	f7fe fb36 	bl	8002174 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003b08:	485b      	ldr	r0, [pc, #364]	; (8003c78 <showLightsControlPanel+0x184>)
 8003b0a:	f7fd ff2f 	bl	800196c <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "-=ŚWIATŁA=-");
 8003b0e:	495b      	ldr	r1, [pc, #364]	; (8003c7c <showLightsControlPanel+0x188>)
 8003b10:	485b      	ldr	r0, [pc, #364]	; (8003c80 <showLightsControlPanel+0x18c>)
 8003b12:	f00e fa19 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003b16:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003b1a:	9301      	str	r3, [sp, #4]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b24:	220a      	movs	r2, #10
 8003b26:	2146      	movs	r1, #70	; 0x46
 8003b28:	4855      	ldr	r0, [pc, #340]	; (8003c80 <showLightsControlPanel+0x18c>)
 8003b2a:	f7fe f939 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003b2e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	2329      	movs	r3, #41	; 0x29
 8003b36:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b3a:	2129      	movs	r1, #41	; 0x29
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	f7fd fc65 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003b42:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	232b      	movs	r3, #43	; 0x2b
 8003b4a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b4e:	212b      	movs	r1, #43	; 0x2b
 8003b50:	2000      	movs	r0, #0
 8003b52:	f7fd fc5b 	bl	800140c <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)Msg, "ŚWIATŁO 1:");
 8003b56:	494b      	ldr	r1, [pc, #300]	; (8003c84 <showLightsControlPanel+0x190>)
 8003b58:	4849      	ldr	r0, [pc, #292]	; (8003c80 <showLightsControlPanel+0x18c>)
 8003b5a:	f00e f9f5 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003b5e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003b62:	9301      	str	r3, [sp, #4]
 8003b64:	2300      	movs	r3, #0
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	223c      	movs	r2, #60	; 0x3c
 8003b6c:	2114      	movs	r1, #20
 8003b6e:	4844      	ldr	r0, [pc, #272]	; (8003c80 <showLightsControlPanel+0x18c>)
 8003b70:	f7fe f916 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 2:");
 8003b74:	4944      	ldr	r1, [pc, #272]	; (8003c88 <showLightsControlPanel+0x194>)
 8003b76:	4842      	ldr	r0, [pc, #264]	; (8003c80 <showLightsControlPanel+0x18c>)
 8003b78:	f00e f9e6 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003b7c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003b80:	9301      	str	r3, [sp, #4]
 8003b82:	2301      	movs	r3, #1
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	2300      	movs	r3, #0
 8003b88:	225a      	movs	r2, #90	; 0x5a
 8003b8a:	2114      	movs	r1, #20
 8003b8c:	483c      	ldr	r0, [pc, #240]	; (8003c80 <showLightsControlPanel+0x18c>)
 8003b8e:	f7fe f907 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 3:");
 8003b92:	493e      	ldr	r1, [pc, #248]	; (8003c8c <showLightsControlPanel+0x198>)
 8003b94:	483a      	ldr	r0, [pc, #232]	; (8003c80 <showLightsControlPanel+0x18c>)
 8003b96:	f00e f9d7 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003b9a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	2278      	movs	r2, #120	; 0x78
 8003ba8:	2114      	movs	r1, #20
 8003baa:	4835      	ldr	r0, [pc, #212]	; (8003c80 <showLightsControlPanel+0x18c>)
 8003bac:	f7fe f8f8 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 4:");
 8003bb0:	4937      	ldr	r1, [pc, #220]	; (8003c90 <showLightsControlPanel+0x19c>)
 8003bb2:	4833      	ldr	r0, [pc, #204]	; (8003c80 <showLightsControlPanel+0x18c>)
 8003bb4:	f00e f9c8 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003bb8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003bbc:	9301      	str	r3, [sp, #4]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	2296      	movs	r2, #150	; 0x96
 8003bc6:	2114      	movs	r1, #20
 8003bc8:	482d      	ldr	r0, [pc, #180]	; (8003c80 <showLightsControlPanel+0x18c>)
 8003bca:	f7fe f8e9 	bl	8001da0 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003bce:	4831      	ldr	r0, [pc, #196]	; (8003c94 <showLightsControlPanel+0x1a0>)
 8003bd0:	f7fd fecc 	bl	800196c <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003bd4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003bd8:	9301      	str	r3, [sp, #4]
 8003bda:	2305      	movs	r3, #5
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	2314      	movs	r3, #20
 8003be0:	225f      	movs	r2, #95	; 0x5f
 8003be2:	21d8      	movs	r1, #216	; 0xd8
 8003be4:	20dc      	movs	r0, #220	; 0xdc
 8003be6:	f7fd fe70 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "PARAM=>");
 8003bea:	492b      	ldr	r1, [pc, #172]	; (8003c98 <showLightsControlPanel+0x1a4>)
 8003bec:	4824      	ldr	r0, [pc, #144]	; (8003c80 <showLightsControlPanel+0x18c>)
 8003bee:	f00e f9ab 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003bf2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003bf6:	9301      	str	r3, [sp, #4]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	22da      	movs	r2, #218	; 0xda
 8003c00:	21e6      	movs	r1, #230	; 0xe6
 8003c02:	481f      	ldr	r0, [pc, #124]	; (8003c80 <showLightsControlPanel+0x18c>)
 8003c04:	f7fe f8cc 	bl	8001da0 <EF_PutString>

	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003c08:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c0c:	9301      	str	r3, [sp, #4]
 8003c0e:	2305      	movs	r3, #5
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	2314      	movs	r3, #20
 8003c14:	225a      	movs	r2, #90	; 0x5a
 8003c16:	21d8      	movs	r1, #216	; 0xd8
 8003c18:	2078      	movs	r0, #120	; 0x78
 8003c1a:	f7fd fe56 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">WS2812b<");
 8003c1e:	491f      	ldr	r1, [pc, #124]	; (8003c9c <showLightsControlPanel+0x1a8>)
 8003c20:	4817      	ldr	r0, [pc, #92]	; (8003c80 <showLightsControlPanel+0x18c>)
 8003c22:	f00e f991 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003c26:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c2a:	9301      	str	r3, [sp, #4]
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	2300      	movs	r3, #0
 8003c32:	22da      	movs	r2, #218	; 0xda
 8003c34:	217e      	movs	r1, #126	; 0x7e
 8003c36:	4812      	ldr	r0, [pc, #72]	; (8003c80 <showLightsControlPanel+0x18c>)
 8003c38:	f7fe f8b2 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003c3c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c40:	9301      	str	r3, [sp, #4]
 8003c42:	2305      	movs	r3, #5
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	2314      	movs	r3, #20
 8003c48:	2264      	movs	r2, #100	; 0x64
 8003c4a:	21d8      	movs	r1, #216	; 0xd8
 8003c4c:	200a      	movs	r0, #10
 8003c4e:	f7fd fe3c 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=CONTROL");
 8003c52:	4913      	ldr	r1, [pc, #76]	; (8003ca0 <showLightsControlPanel+0x1ac>)
 8003c54:	480a      	ldr	r0, [pc, #40]	; (8003c80 <showLightsControlPanel+0x18c>)
 8003c56:	f00e f977 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003c5a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c5e:	9301      	str	r3, [sp, #4]
 8003c60:	2300      	movs	r3, #0
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	2300      	movs	r3, #0
 8003c66:	22da      	movs	r2, #218	; 0xda
 8003c68:	210d      	movs	r1, #13
 8003c6a:	4805      	ldr	r0, [pc, #20]	; (8003c80 <showLightsControlPanel+0x18c>)
 8003c6c:	f7fe f898 	bl	8001da0 <EF_PutString>


}
 8003c70:	bf00      	nop
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	080296c4 	.word	0x080296c4
 8003c7c:	08015d88 	.word	0x08015d88
 8003c80:	200002c0 	.word	0x200002c0
 8003c84:	08015d98 	.word	0x08015d98
 8003c88:	08015da8 	.word	0x08015da8
 8003c8c:	08015db8 	.word	0x08015db8
 8003c90:	08015dc8 	.word	0x08015dc8
 8003c94:	0802774c 	.word	0x0802774c
 8003c98:	08015dd8 	.word	0x08015dd8
 8003c9c:	08015de0 	.word	0x08015de0
 8003ca0:	08015dec 	.word	0x08015dec

08003ca4 <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003caa:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003cae:	f7fe fa61 	bl	8002174 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003cb2:	48a2      	ldr	r0, [pc, #648]	; (8003f3c <showClockSetPanel+0x298>)
 8003cb4:	f7fd fe5a 	bl	800196c <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 8003cb8:	f7fe fec8 	bl	8002a4c <DS3231_GetHour>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 8003cc0:	f7fe fed0 	bl	8002a64 <DS3231_GetMinute>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	71bb      	strb	r3, [r7, #6]
	uint8_t CDayOfWeek = DS3231_GetDayOfWeek();
 8003cc8:	f7fe feb4 	bl	8002a34 <DS3231_GetDayOfWeek>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	717b      	strb	r3, [r7, #5]

	//
	// Display HEADER string
	sprintf((char*)Msg, "-=SET CLOCK=-");
 8003cd0:	499b      	ldr	r1, [pc, #620]	; (8003f40 <showClockSetPanel+0x29c>)
 8003cd2:	489c      	ldr	r0, [pc, #624]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003cd4:	f00e f938 	bl	8011f48 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003cd8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003cdc:	9301      	str	r3, [sp, #4]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ce6:	220a      	movs	r2, #10
 8003ce8:	212f      	movs	r1, #47	; 0x2f
 8003cea:	4896      	ldr	r0, [pc, #600]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003cec:	f7fe f858 	bl	8001da0 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003cf0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	2329      	movs	r3, #41	; 0x29
 8003cf8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003cfc:	2129      	movs	r1, #41	; 0x29
 8003cfe:	2000      	movs	r0, #0
 8003d00:	f7fd fb84 	bl	800140c <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003d04:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	232b      	movs	r3, #43	; 0x2b
 8003d0c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003d10:	212b      	movs	r1, #43	; 0x2b
 8003d12:	2000      	movs	r0, #0
 8003d14:	f7fd fb7a 	bl	800140c <GFX_DrawLine>

	sprintf((char*)Msg, "GODZINA: %d", CHour);
 8003d18:	79fb      	ldrb	r3, [r7, #7]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	498a      	ldr	r1, [pc, #552]	; (8003f48 <showClockSetPanel+0x2a4>)
 8003d1e:	4889      	ldr	r0, [pc, #548]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003d20:	f00e f912 	bl	8011f48 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003d24:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003d28:	9301      	str	r3, [sp, #4]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	2246      	movs	r2, #70	; 0x46
 8003d32:	2114      	movs	r1, #20
 8003d34:	4883      	ldr	r0, [pc, #524]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003d36:	f7fe f833 	bl	8001da0 <EF_PutString>

	sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 8003d3a:	79bb      	ldrb	r3, [r7, #6]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4983      	ldr	r1, [pc, #524]	; (8003f4c <showClockSetPanel+0x2a8>)
 8003d40:	4880      	ldr	r0, [pc, #512]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003d42:	f00e f901 	bl	8011f48 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003d46:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003d4a:	9301      	str	r3, [sp, #4]
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	2300      	movs	r3, #0
 8003d52:	226e      	movs	r2, #110	; 0x6e
 8003d54:	2114      	movs	r1, #20
 8003d56:	487b      	ldr	r0, [pc, #492]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003d58:	f7fe f822 	bl	8001da0 <EF_PutString>

	sprintf((char*)Msg, "DZIEŃ TYG:  %d", CDayOfWeek);
 8003d5c:	797b      	ldrb	r3, [r7, #5]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	497b      	ldr	r1, [pc, #492]	; (8003f50 <showClockSetPanel+0x2ac>)
 8003d62:	4878      	ldr	r0, [pc, #480]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003d64:	f00e f8f0 	bl	8011f48 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003d68:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003d6c:	9301      	str	r3, [sp, #4]
 8003d6e:	2301      	movs	r3, #1
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	2300      	movs	r3, #0
 8003d74:	2296      	movs	r2, #150	; 0x96
 8003d76:	2114      	movs	r1, #20
 8003d78:	4872      	ldr	r0, [pc, #456]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003d7a:	f7fe f811 	bl	8001da0 <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 8003d7e:	4875      	ldr	r0, [pc, #468]	; (8003f54 <showClockSetPanel+0x2b0>)
 8003d80:	f7fd fdf4 	bl	800196c <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003d84:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003d88:	9301      	str	r3, [sp, #4]
 8003d8a:	2305      	movs	r3, #5
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	2315      	movs	r3, #21
 8003d90:	221e      	movs	r2, #30
 8003d92:	214b      	movs	r1, #75	; 0x4b
 8003d94:	20f0      	movs	r0, #240	; 0xf0
 8003d96:	f7fd fd98 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003d9a:	496f      	ldr	r1, [pc, #444]	; (8003f58 <showClockSetPanel+0x2b4>)
 8003d9c:	4869      	ldr	r0, [pc, #420]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003d9e:	f00e f8d3 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003da2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003da6:	9301      	str	r3, [sp, #4]
 8003da8:	2300      	movs	r3, #0
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	2300      	movs	r3, #0
 8003dae:	224d      	movs	r2, #77	; 0x4d
 8003db0:	21f3      	movs	r1, #243	; 0xf3
 8003db2:	4864      	ldr	r0, [pc, #400]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003db4:	f7fd fff4 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003db8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	2305      	movs	r3, #5
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	2315      	movs	r3, #21
 8003dc4:	221e      	movs	r2, #30
 8003dc6:	214b      	movs	r1, #75	; 0x4b
 8003dc8:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003dcc:	f7fd fd7d 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+6");
 8003dd0:	4962      	ldr	r1, [pc, #392]	; (8003f5c <showClockSetPanel+0x2b8>)
 8003dd2:	485c      	ldr	r0, [pc, #368]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003dd4:	f00e f8b8 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003dd8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ddc:	9301      	str	r3, [sp, #4]
 8003dde:	2300      	movs	r3, #0
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	2300      	movs	r3, #0
 8003de4:	224d      	movs	r2, #77	; 0x4d
 8003de6:	f240 111d 	movw	r1, #285	; 0x11d
 8003dea:	4856      	ldr	r0, [pc, #344]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003dec:	f7fd ffd8 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003df0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003df4:	9301      	str	r3, [sp, #4]
 8003df6:	2305      	movs	r3, #5
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	2315      	movs	r3, #21
 8003dfc:	221e      	movs	r2, #30
 8003dfe:	2173      	movs	r1, #115	; 0x73
 8003e00:	20f0      	movs	r0, #240	; 0xf0
 8003e02:	f7fd fd62 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003e06:	4954      	ldr	r1, [pc, #336]	; (8003f58 <showClockSetPanel+0x2b4>)
 8003e08:	484e      	ldr	r0, [pc, #312]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003e0a:	f00e f89d 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003e0e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e12:	9301      	str	r3, [sp, #4]
 8003e14:	2300      	movs	r3, #0
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	2275      	movs	r2, #117	; 0x75
 8003e1c:	21f5      	movs	r1, #245	; 0xf5
 8003e1e:	4849      	ldr	r0, [pc, #292]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003e20:	f7fd ffbe 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003e24:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	2305      	movs	r3, #5
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	2315      	movs	r3, #21
 8003e30:	221e      	movs	r2, #30
 8003e32:	2173      	movs	r1, #115	; 0x73
 8003e34:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003e38:	f7fd fd47 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003e3c:	4948      	ldr	r1, [pc, #288]	; (8003f60 <showClockSetPanel+0x2bc>)
 8003e3e:	4841      	ldr	r0, [pc, #260]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003e40:	f00e f882 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003e44:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	2275      	movs	r2, #117	; 0x75
 8003e52:	f240 111b 	movw	r1, #283	; 0x11b
 8003e56:	483b      	ldr	r0, [pc, #236]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003e58:	f7fd ffa2 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_3_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003e5c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e60:	9301      	str	r3, [sp, #4]
 8003e62:	2305      	movs	r3, #5
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	2315      	movs	r3, #21
 8003e68:	221e      	movs	r2, #30
 8003e6a:	219b      	movs	r1, #155	; 0x9b
 8003e6c:	20f0      	movs	r0, #240	; 0xf0
 8003e6e:	f7fd fd2c 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1D");
 8003e72:	493c      	ldr	r1, [pc, #240]	; (8003f64 <showClockSetPanel+0x2c0>)
 8003e74:	4833      	ldr	r0, [pc, #204]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003e76:	f00e f867 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003e7a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e7e:	9301      	str	r3, [sp, #4]
 8003e80:	2300      	movs	r3, #0
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	2300      	movs	r3, #0
 8003e86:	229d      	movs	r2, #157	; 0x9d
 8003e88:	21f3      	movs	r1, #243	; 0xf3
 8003e8a:	482e      	ldr	r0, [pc, #184]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003e8c:	f7fd ff88 	bl	8001da0 <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003e90:	4830      	ldr	r0, [pc, #192]	; (8003f54 <showClockSetPanel+0x2b0>)
 8003e92:	f7fd fd6b 	bl	800196c <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003e96:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e9a:	9301      	str	r3, [sp, #4]
 8003e9c:	2305      	movs	r3, #5
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	2314      	movs	r3, #20
 8003ea2:	225f      	movs	r2, #95	; 0x5f
 8003ea4:	21d8      	movs	r1, #216	; 0xd8
 8003ea6:	20dc      	movs	r0, #220	; 0xdc
 8003ea8:	f7fd fd0f 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 8003eac:	492e      	ldr	r1, [pc, #184]	; (8003f68 <showClockSetPanel+0x2c4>)
 8003eae:	4825      	ldr	r0, [pc, #148]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003eb0:	f00e f84a 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003eb4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003eb8:	9301      	str	r3, [sp, #4]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	22da      	movs	r2, #218	; 0xda
 8003ec2:	21e6      	movs	r1, #230	; 0xe6
 8003ec4:	481f      	ldr	r0, [pc, #124]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003ec6:	f7fd ff6b 	bl	8001da0 <EF_PutString>

	// Medium button
	GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_CLOCK_X-30, MEDIUM_BUTTON_CLOCK_Y, MEDIUM_BUTTON_CLOCK_W+60, MEDIUM_BUTTON_H_CLOCK, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003eca:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ece:	9301      	str	r3, [sp, #4]
 8003ed0:	2305      	movs	r3, #5
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	2316      	movs	r3, #22
 8003ed6:	22aa      	movs	r2, #170	; 0xaa
 8003ed8:	21be      	movs	r1, #190	; 0xbe
 8003eda:	2050      	movs	r0, #80	; 0x50
 8003edc:	f7fd fcf5 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "HARMONOGRAMY");
 8003ee0:	4922      	ldr	r1, [pc, #136]	; (8003f6c <showClockSetPanel+0x2c8>)
 8003ee2:	4818      	ldr	r0, [pc, #96]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003ee4:	f00e f830 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (MEDIUM_BUTTON_CLOCK_X -10), (MEDIUM_BUTTON_CLOCK_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003ee8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003eec:	9301      	str	r3, [sp, #4]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	22c1      	movs	r2, #193	; 0xc1
 8003ef6:	2164      	movs	r1, #100	; 0x64
 8003ef8:	4812      	ldr	r0, [pc, #72]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003efa:	f7fd ff51 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003efe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f02:	9301      	str	r3, [sp, #4]
 8003f04:	2305      	movs	r3, #5
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	2314      	movs	r3, #20
 8003f0a:	2264      	movs	r2, #100	; 0x64
 8003f0c:	21d8      	movs	r1, #216	; 0xd8
 8003f0e:	200a      	movs	r0, #10
 8003f10:	f7fd fcdb 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003f14:	4916      	ldr	r1, [pc, #88]	; (8003f70 <showClockSetPanel+0x2cc>)
 8003f16:	480b      	ldr	r0, [pc, #44]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003f18:	f00e f816 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003f1c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	2300      	movs	r3, #0
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	2300      	movs	r3, #0
 8003f28:	22da      	movs	r2, #218	; 0xda
 8003f2a:	210d      	movs	r1, #13
 8003f2c:	4805      	ldr	r0, [pc, #20]	; (8003f44 <showClockSetPanel+0x2a0>)
 8003f2e:	f7fd ff37 	bl	8001da0 <EF_PutString>
}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	080296c4 	.word	0x080296c4
 8003f40:	08015df8 	.word	0x08015df8
 8003f44:	200002c0 	.word	0x200002c0
 8003f48:	08015e08 	.word	0x08015e08
 8003f4c:	08015e14 	.word	0x08015e14
 8003f50:	08015e24 	.word	0x08015e24
 8003f54:	0802774c 	.word	0x0802774c
 8003f58:	08015e34 	.word	0x08015e34
 8003f5c:	08015e38 	.word	0x08015e38
 8003f60:	08015e3c 	.word	0x08015e3c
 8003f64:	08015e40 	.word	0x08015e40
 8003f68:	08015e44 	.word	0x08015e44
 8003f6c:	08015e4c 	.word	0x08015e4c
 8003f70:	08015e5c 	.word	0x08015e5c

08003f74 <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003f7a:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003f7e:	f7fe f8f9 	bl	8002174 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003f82:	487a      	ldr	r0, [pc, #488]	; (800416c <showPreparedActivitiesPanel+0x1f8>)
 8003f84:	f7fd fcf2 	bl	800196c <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=ACTIVITIES=-");
 8003f88:	4979      	ldr	r1, [pc, #484]	; (8004170 <showPreparedActivitiesPanel+0x1fc>)
 8003f8a:	487a      	ldr	r0, [pc, #488]	; (8004174 <showPreparedActivitiesPanel+0x200>)
 8003f8c:	f00d ffdc 	bl	8011f48 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003f90:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003f94:	9301      	str	r3, [sp, #4]
 8003f96:	2300      	movs	r3, #0
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	231f      	movs	r3, #31
 8003f9c:	220a      	movs	r2, #10
 8003f9e:	212f      	movs	r1, #47	; 0x2f
 8003fa0:	4874      	ldr	r0, [pc, #464]	; (8004174 <showPreparedActivitiesPanel+0x200>)
 8003fa2:	f7fd fefd 	bl	8001da0 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003fa6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	2329      	movs	r3, #41	; 0x29
 8003fae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003fb2:	2129      	movs	r1, #41	; 0x29
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	f7fd fa29 	bl	800140c <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003fba:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	232b      	movs	r3, #43	; 0x2b
 8003fc2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003fc6:	212b      	movs	r1, #43	; 0x2b
 8003fc8:	2000      	movs	r0, #0
 8003fca:	f7fd fa1f 	bl	800140c <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003fce:	486a      	ldr	r0, [pc, #424]	; (8004178 <showPreparedActivitiesPanel+0x204>)
 8003fd0:	f7fd fccc 	bl	800196c <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003fd4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003fd8:	9301      	str	r3, [sp, #4]
 8003fda:	2305      	movs	r3, #5
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	2314      	movs	r3, #20
 8003fe0:	2264      	movs	r2, #100	; 0x64
 8003fe2:	21d8      	movs	r1, #216	; 0xd8
 8003fe4:	200a      	movs	r0, #10
 8003fe6:	f7fd fc70 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003fea:	4964      	ldr	r1, [pc, #400]	; (800417c <showPreparedActivitiesPanel+0x208>)
 8003fec:	4861      	ldr	r0, [pc, #388]	; (8004174 <showPreparedActivitiesPanel+0x200>)
 8003fee:	f00d ffab 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003ff2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ff6:	9301      	str	r3, [sp, #4]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	22da      	movs	r2, #218	; 0xda
 8004000:	210d      	movs	r1, #13
 8004002:	485c      	ldr	r0, [pc, #368]	; (8004174 <showPreparedActivitiesPanel+0x200>)
 8004004:	f7fd fecc 	bl	8001da0 <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 8004008:	4b5d      	ldr	r3, [pc, #372]	; (8004180 <showPreparedActivitiesPanel+0x20c>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d029      	beq.n	8004064 <showPreparedActivitiesPanel+0xf0>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8004010:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004014:	9301      	str	r3, [sp, #4]
 8004016:	230a      	movs	r3, #10
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	2328      	movs	r3, #40	; 0x28
 800401c:	2278      	movs	r2, #120	; 0x78
 800401e:	213c      	movs	r1, #60	; 0x3c
 8004020:	2064      	movs	r0, #100	; 0x64
 8004022:	f7fd fc52 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8004026:	4957      	ldr	r1, [pc, #348]	; (8004184 <showPreparedActivitiesPanel+0x210>)
 8004028:	4852      	ldr	r0, [pc, #328]	; (8004174 <showPreparedActivitiesPanel+0x200>)
 800402a:	f00d ff8d 	bl	8011f48 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800402e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004032:	9301      	str	r3, [sp, #4]
 8004034:	2300      	movs	r3, #0
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	2300      	movs	r3, #0
 800403a:	223e      	movs	r2, #62	; 0x3e
 800403c:	2177      	movs	r1, #119	; 0x77
 800403e:	484d      	ldr	r0, [pc, #308]	; (8004174 <showPreparedActivitiesPanel+0x200>)
 8004040:	f7fd feae 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8004044:	4950      	ldr	r1, [pc, #320]	; (8004188 <showPreparedActivitiesPanel+0x214>)
 8004046:	484b      	ldr	r0, [pc, #300]	; (8004174 <showPreparedActivitiesPanel+0x200>)
 8004048:	f00d ff7e 	bl	8011f48 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800404c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004050:	9301      	str	r3, [sp, #4]
 8004052:	2300      	movs	r3, #0
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	2300      	movs	r3, #0
 8004058:	2250      	movs	r2, #80	; 0x50
 800405a:	2193      	movs	r1, #147	; 0x93
 800405c:	4845      	ldr	r0, [pc, #276]	; (8004174 <showPreparedActivitiesPanel+0x200>)
 800405e:	f7fd fe9f 	bl	8001da0 <EF_PutString>
 8004062:	e028      	b.n	80040b6 <showPreparedActivitiesPanel+0x142>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004064:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004068:	9301      	str	r3, [sp, #4]
 800406a:	230a      	movs	r3, #10
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	2328      	movs	r3, #40	; 0x28
 8004070:	2278      	movs	r2, #120	; 0x78
 8004072:	213c      	movs	r1, #60	; 0x3c
 8004074:	2064      	movs	r0, #100	; 0x64
 8004076:	f7fd fc28 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 800407a:	4942      	ldr	r1, [pc, #264]	; (8004184 <showPreparedActivitiesPanel+0x210>)
 800407c:	483d      	ldr	r0, [pc, #244]	; (8004174 <showPreparedActivitiesPanel+0x200>)
 800407e:	f00d ff63 	bl	8011f48 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004082:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004086:	9301      	str	r3, [sp, #4]
 8004088:	2300      	movs	r3, #0
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	2300      	movs	r3, #0
 800408e:	223e      	movs	r2, #62	; 0x3e
 8004090:	2177      	movs	r1, #119	; 0x77
 8004092:	4838      	ldr	r0, [pc, #224]	; (8004174 <showPreparedActivitiesPanel+0x200>)
 8004094:	f7fd fe84 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8004098:	493c      	ldr	r1, [pc, #240]	; (800418c <showPreparedActivitiesPanel+0x218>)
 800409a:	4836      	ldr	r0, [pc, #216]	; (8004174 <showPreparedActivitiesPanel+0x200>)
 800409c:	f00d ff54 	bl	8011f48 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80040a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80040a4:	9301      	str	r3, [sp, #4]
 80040a6:	2300      	movs	r3, #0
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	2300      	movs	r3, #0
 80040ac:	2250      	movs	r2, #80	; 0x50
 80040ae:	2193      	movs	r1, #147	; 0x93
 80040b0:	4830      	ldr	r0, [pc, #192]	; (8004174 <showPreparedActivitiesPanel+0x200>)
 80040b2:	f7fd fe75 	bl	8001da0 <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 80040b6:	4b32      	ldr	r3, [pc, #200]	; (8004180 <showPreparedActivitiesPanel+0x20c>)
 80040b8:	785b      	ldrb	r3, [r3, #1]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d029      	beq.n	8004112 <showPreparedActivitiesPanel+0x19e>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80040be:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040c2:	9301      	str	r3, [sp, #4]
 80040c4:	230a      	movs	r3, #10
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	2328      	movs	r3, #40	; 0x28
 80040ca:	2278      	movs	r2, #120	; 0x78
 80040cc:	2178      	movs	r1, #120	; 0x78
 80040ce:	2064      	movs	r0, #100	; 0x64
 80040d0:	f7fd fbfb 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 80040d4:	492e      	ldr	r1, [pc, #184]	; (8004190 <showPreparedActivitiesPanel+0x21c>)
 80040d6:	4827      	ldr	r0, [pc, #156]	; (8004174 <showPreparedActivitiesPanel+0x200>)
 80040d8:	f00d ff36 	bl	8011f48 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80040dc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040e0:	9301      	str	r3, [sp, #4]
 80040e2:	2300      	movs	r3, #0
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	2300      	movs	r3, #0
 80040e8:	227a      	movs	r2, #122	; 0x7a
 80040ea:	2169      	movs	r1, #105	; 0x69
 80040ec:	4821      	ldr	r0, [pc, #132]	; (8004174 <showPreparedActivitiesPanel+0x200>)
 80040ee:	f7fd fe57 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "ON");
 80040f2:	4925      	ldr	r1, [pc, #148]	; (8004188 <showPreparedActivitiesPanel+0x214>)
 80040f4:	481f      	ldr	r0, [pc, #124]	; (8004174 <showPreparedActivitiesPanel+0x200>)
 80040f6:	f00d ff27 	bl	8011f48 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80040fa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040fe:	9301      	str	r3, [sp, #4]
 8004100:	2300      	movs	r3, #0
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	2300      	movs	r3, #0
 8004106:	228c      	movs	r2, #140	; 0x8c
 8004108:	2193      	movs	r1, #147	; 0x93
 800410a:	481a      	ldr	r0, [pc, #104]	; (8004174 <showPreparedActivitiesPanel+0x200>)
 800410c:	f7fd fe48 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "CZYSZCZENIE");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		sprintf((char*)Msg, "OFF");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	}
}
 8004110:	e028      	b.n	8004164 <showPreparedActivitiesPanel+0x1f0>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004112:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004116:	9301      	str	r3, [sp, #4]
 8004118:	230a      	movs	r3, #10
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	2328      	movs	r3, #40	; 0x28
 800411e:	2278      	movs	r2, #120	; 0x78
 8004120:	2178      	movs	r1, #120	; 0x78
 8004122:	2064      	movs	r0, #100	; 0x64
 8004124:	f7fd fbd1 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8004128:	4919      	ldr	r1, [pc, #100]	; (8004190 <showPreparedActivitiesPanel+0x21c>)
 800412a:	4812      	ldr	r0, [pc, #72]	; (8004174 <showPreparedActivitiesPanel+0x200>)
 800412c:	f00d ff0c 	bl	8011f48 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004130:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004134:	9301      	str	r3, [sp, #4]
 8004136:	2300      	movs	r3, #0
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	2300      	movs	r3, #0
 800413c:	227a      	movs	r2, #122	; 0x7a
 800413e:	2169      	movs	r1, #105	; 0x69
 8004140:	480c      	ldr	r0, [pc, #48]	; (8004174 <showPreparedActivitiesPanel+0x200>)
 8004142:	f7fd fe2d 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8004146:	4911      	ldr	r1, [pc, #68]	; (800418c <showPreparedActivitiesPanel+0x218>)
 8004148:	480a      	ldr	r0, [pc, #40]	; (8004174 <showPreparedActivitiesPanel+0x200>)
 800414a:	f00d fefd 	bl	8011f48 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800414e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004152:	9301      	str	r3, [sp, #4]
 8004154:	2300      	movs	r3, #0
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	2300      	movs	r3, #0
 800415a:	228c      	movs	r2, #140	; 0x8c
 800415c:	2193      	movs	r1, #147	; 0x93
 800415e:	4805      	ldr	r0, [pc, #20]	; (8004174 <showPreparedActivitiesPanel+0x200>)
 8004160:	f7fd fe1e 	bl	8001da0 <EF_PutString>
}
 8004164:	bf00      	nop
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	080296c4 	.word	0x080296c4
 8004170:	08015e64 	.word	0x08015e64
 8004174:	200002c0 	.word	0x200002c0
 8004178:	0802774c 	.word	0x0802774c
 800417c:	08015e5c 	.word	0x08015e5c
 8004180:	200002b0 	.word	0x200002b0
 8004184:	08015e74 	.word	0x08015e74
 8004188:	08015e80 	.word	0x08015e80
 800418c:	08015e84 	.word	0x08015e84
 8004190:	08015e88 	.word	0x08015e88

08004194 <showWSLedPanel>:
// Display screen to controlling WS2812b LEDs
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void showWSLedPanel()
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800419a:	f24c 6018 	movw	r0, #50712	; 0xc618
 800419e:	f7fd ffe9 	bl	8002174 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 80041a2:	48c7      	ldr	r0, [pc, #796]	; (80044c0 <showWSLedPanel+0x32c>)
 80041a4:	f7fd fbe2 	bl	800196c <EF_SetFont>


	// Display Header
	sprintf((char*)Msg, "-=WS2812b=-");
 80041a8:	49c6      	ldr	r1, [pc, #792]	; (80044c4 <showWSLedPanel+0x330>)
 80041aa:	48c7      	ldr	r0, [pc, #796]	; (80044c8 <showWSLedPanel+0x334>)
 80041ac:	f00d fecc 	bl	8011f48 <siprintf>
	EF_PutString(Msg, WS_LED_STRING_POZ_X, WS_LED_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80041b0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80041b4:	9301      	str	r3, [sp, #4]
 80041b6:	2300      	movs	r3, #0
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	231f      	movs	r3, #31
 80041bc:	220a      	movs	r2, #10
 80041be:	2146      	movs	r1, #70	; 0x46
 80041c0:	48c1      	ldr	r0, [pc, #772]	; (80044c8 <showWSLedPanel+0x334>)
 80041c2:	f7fd fded 	bl	8001da0 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80041c6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	2329      	movs	r3, #41	; 0x29
 80041ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80041d2:	2129      	movs	r1, #41	; 0x29
 80041d4:	2000      	movs	r0, #0
 80041d6:	f7fd f919 	bl	800140c <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80041da:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	232b      	movs	r3, #43	; 0x2b
 80041e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80041e6:	212b      	movs	r1, #43	; 0x2b
 80041e8:	2000      	movs	r0, #0
 80041ea:	f7fd f90f 	bl	800140c <GFX_DrawLine>

	// Display String
	sprintf((char*)Msg, "ILOŚĆ LED: %d", NrOfLeds);
 80041ee:	4bb7      	ldr	r3, [pc, #732]	; (80044cc <showWSLedPanel+0x338>)
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	49b6      	ldr	r1, [pc, #728]	; (80044d0 <showWSLedPanel+0x33c>)
 80041f6:	48b4      	ldr	r0, [pc, #720]	; (80044c8 <showWSLedPanel+0x334>)
 80041f8:	f00d fea6 	bl	8011f48 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80041fc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	2300      	movs	r3, #0
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	2300      	movs	r3, #0
 8004208:	223c      	movs	r2, #60	; 0x3c
 800420a:	2114      	movs	r1, #20
 800420c:	48ae      	ldr	r0, [pc, #696]	; (80044c8 <showWSLedPanel+0x334>)
 800420e:	f7fd fdc7 	bl	8001da0 <EF_PutString>

	sprintf((char*)Msg, "WHITE:");
 8004212:	49b0      	ldr	r1, [pc, #704]	; (80044d4 <showWSLedPanel+0x340>)
 8004214:	48ac      	ldr	r0, [pc, #688]	; (80044c8 <showWSLedPanel+0x334>)
 8004216:	f00d fe97 	bl	8011f48 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_WHITE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800421a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800421e:	9301      	str	r3, [sp, #4]
 8004220:	2300      	movs	r3, #0
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	2300      	movs	r3, #0
 8004226:	225a      	movs	r2, #90	; 0x5a
 8004228:	2114      	movs	r1, #20
 800422a:	48a7      	ldr	r0, [pc, #668]	; (80044c8 <showWSLedPanel+0x334>)
 800422c:	f7fd fdb8 	bl	8001da0 <EF_PutString>

	sprintf((char*)Msg, "BLUE:");
 8004230:	49a9      	ldr	r1, [pc, #676]	; (80044d8 <showWSLedPanel+0x344>)
 8004232:	48a5      	ldr	r0, [pc, #660]	; (80044c8 <showWSLedPanel+0x334>)
 8004234:	f00d fe88 	bl	8011f48 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_BLUE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004238:	f24c 6318 	movw	r3, #50712	; 0xc618
 800423c:	9301      	str	r3, [sp, #4]
 800423e:	2300      	movs	r3, #0
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	2300      	movs	r3, #0
 8004244:	2278      	movs	r2, #120	; 0x78
 8004246:	2114      	movs	r1, #20
 8004248:	489f      	ldr	r0, [pc, #636]	; (80044c8 <showWSLedPanel+0x334>)
 800424a:	f7fd fda9 	bl	8001da0 <EF_PutString>

	//
	// Display first row of buttons - number of LEDs
	EF_SetFont(&arial_11ptFontInfo);
 800424e:	48a3      	ldr	r0, [pc, #652]	; (80044dc <showWSLedPanel+0x348>)
 8004250:	f7fd fb8c 	bl	800196c <EF_SetFont>
	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_1_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8004254:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	2305      	movs	r3, #5
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	2315      	movs	r3, #21
 8004260:	221e      	movs	r2, #30
 8004262:	2141      	movs	r1, #65	; 0x41
 8004264:	20d9      	movs	r0, #217	; 0xd9
 8004266:	f7fd fb30 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 800426a:	499d      	ldr	r1, [pc, #628]	; (80044e0 <showWSLedPanel+0x34c>)
 800426c:	4896      	ldr	r0, [pc, #600]	; (80044c8 <showWSLedPanel+0x334>)
 800426e:	f00d fe6b 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_1_X+STRING_ERRATA_X + 3), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8004272:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004276:	9301      	str	r3, [sp, #4]
 8004278:	2300      	movs	r3, #0
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	2300      	movs	r3, #0
 800427e:	2243      	movs	r2, #67	; 0x43
 8004280:	21df      	movs	r1, #223	; 0xdf
 8004282:	4891      	ldr	r0, [pc, #580]	; (80044c8 <showWSLedPanel+0x334>)
 8004284:	f7fd fd8c 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_2_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8004288:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800428c:	9301      	str	r3, [sp, #4]
 800428e:	2305      	movs	r3, #5
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	2315      	movs	r3, #21
 8004294:	221e      	movs	r2, #30
 8004296:	2141      	movs	r1, #65	; 0x41
 8004298:	20fc      	movs	r0, #252	; 0xfc
 800429a:	f7fd fb16 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 800429e:	4991      	ldr	r1, [pc, #580]	; (80044e4 <showWSLedPanel+0x350>)
 80042a0:	4889      	ldr	r0, [pc, #548]	; (80044c8 <showWSLedPanel+0x334>)
 80042a2:	f00d fe51 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_2_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80042a6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80042aa:	9301      	str	r3, [sp, #4]
 80042ac:	2300      	movs	r3, #0
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	2300      	movs	r3, #0
 80042b2:	2243      	movs	r2, #67	; 0x43
 80042b4:	f240 1101 	movw	r1, #257	; 0x101
 80042b8:	4883      	ldr	r0, [pc, #524]	; (80044c8 <showWSLedPanel+0x334>)
 80042ba:	f7fd fd71 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80042be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80042c2:	9301      	str	r3, [sp, #4]
 80042c4:	2305      	movs	r3, #5
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	2315      	movs	r3, #21
 80042ca:	221e      	movs	r2, #30
 80042cc:	2141      	movs	r1, #65	; 0x41
 80042ce:	f240 101f 	movw	r0, #287	; 0x11f
 80042d2:	f7fd fafa 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OK");
 80042d6:	4984      	ldr	r1, [pc, #528]	; (80044e8 <showWSLedPanel+0x354>)
 80042d8:	487b      	ldr	r0, [pc, #492]	; (80044c8 <showWSLedPanel+0x334>)
 80042da:	f00d fe35 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80042de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80042e2:	9301      	str	r3, [sp, #4]
 80042e4:	2300      	movs	r3, #0
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	2300      	movs	r3, #0
 80042ea:	2243      	movs	r2, #67	; 0x43
 80042ec:	f44f 7192 	mov.w	r1, #292	; 0x124
 80042f0:	4875      	ldr	r0, [pc, #468]	; (80044c8 <showWSLedPanel+0x334>)
 80042f2:	f7fd fd55 	bl	8001da0 <EF_PutString>

	//
	// Display second row of buttons - WHITE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 80042f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042fa:	9301      	str	r3, [sp, #4]
 80042fc:	2305      	movs	r3, #5
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	2315      	movs	r3, #21
 8004302:	2228      	movs	r2, #40	; 0x28
 8004304:	215f      	movs	r1, #95	; 0x5f
 8004306:	2096      	movs	r0, #150	; 0x96
 8004308:	f7fd fadf 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 800430c:	4977      	ldr	r1, [pc, #476]	; (80044ec <showWSLedPanel+0x358>)
 800430e:	486e      	ldr	r0, [pc, #440]	; (80044c8 <showWSLedPanel+0x334>)
 8004310:	f00d fe1a 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004318:	9301      	str	r3, [sp, #4]
 800431a:	2300      	movs	r3, #0
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	2300      	movs	r3, #0
 8004320:	2261      	movs	r2, #97	; 0x61
 8004322:	219b      	movs	r1, #155	; 0x9b
 8004324:	4868      	ldr	r0, [pc, #416]	; (80044c8 <showWSLedPanel+0x334>)
 8004326:	f7fd fd3b 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 800432a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800432e:	9301      	str	r3, [sp, #4]
 8004330:	2305      	movs	r3, #5
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	2315      	movs	r3, #21
 8004336:	2228      	movs	r2, #40	; 0x28
 8004338:	215f      	movs	r1, #95	; 0x5f
 800433a:	20ca      	movs	r0, #202	; 0xca
 800433c:	f7fd fac5 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8004340:	496b      	ldr	r1, [pc, #428]	; (80044f0 <showWSLedPanel+0x35c>)
 8004342:	4861      	ldr	r0, [pc, #388]	; (80044c8 <showWSLedPanel+0x334>)
 8004344:	f00d fe00 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004348:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800434c:	9301      	str	r3, [sp, #4]
 800434e:	2300      	movs	r3, #0
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	2300      	movs	r3, #0
 8004354:	2261      	movs	r2, #97	; 0x61
 8004356:	21d2      	movs	r1, #210	; 0xd2
 8004358:	485b      	ldr	r0, [pc, #364]	; (80044c8 <showWSLedPanel+0x334>)
 800435a:	f7fd fd21 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 800435e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004362:	9301      	str	r3, [sp, #4]
 8004364:	2305      	movs	r3, #5
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	2315      	movs	r3, #21
 800436a:	2228      	movs	r2, #40	; 0x28
 800436c:	215f      	movs	r1, #95	; 0x5f
 800436e:	20fe      	movs	r0, #254	; 0xfe
 8004370:	f7fd faab 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8004374:	495f      	ldr	r1, [pc, #380]	; (80044f4 <showWSLedPanel+0x360>)
 8004376:	4854      	ldr	r0, [pc, #336]	; (80044c8 <showWSLedPanel+0x334>)
 8004378:	f00d fde6 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 800437c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004380:	9301      	str	r3, [sp, #4]
 8004382:	2300      	movs	r3, #0
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	2300      	movs	r3, #0
 8004388:	2261      	movs	r2, #97	; 0x61
 800438a:	f44f 7183 	mov.w	r1, #262	; 0x106
 800438e:	484e      	ldr	r0, [pc, #312]	; (80044c8 <showWSLedPanel+0x334>)
 8004390:	f7fd fd06 	bl	8001da0 <EF_PutString>

	//
	// Display third row of buttons - BLUE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8004394:	231f      	movs	r3, #31
 8004396:	9301      	str	r3, [sp, #4]
 8004398:	2305      	movs	r3, #5
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	2315      	movs	r3, #21
 800439e:	2228      	movs	r2, #40	; 0x28
 80043a0:	217d      	movs	r1, #125	; 0x7d
 80043a2:	2096      	movs	r0, #150	; 0x96
 80043a4:	f7fd fa91 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 80043a8:	4950      	ldr	r1, [pc, #320]	; (80044ec <showWSLedPanel+0x358>)
 80043aa:	4847      	ldr	r0, [pc, #284]	; (80044c8 <showWSLedPanel+0x334>)
 80043ac:	f00d fdcc 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 80043b0:	231f      	movs	r3, #31
 80043b2:	9301      	str	r3, [sp, #4]
 80043b4:	2300      	movs	r3, #0
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	2300      	movs	r3, #0
 80043ba:	227f      	movs	r2, #127	; 0x7f
 80043bc:	219b      	movs	r1, #155	; 0x9b
 80043be:	4842      	ldr	r0, [pc, #264]	; (80044c8 <showWSLedPanel+0x334>)
 80043c0:	f7fd fcee 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 80043c4:	231f      	movs	r3, #31
 80043c6:	9301      	str	r3, [sp, #4]
 80043c8:	2305      	movs	r3, #5
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	2315      	movs	r3, #21
 80043ce:	2228      	movs	r2, #40	; 0x28
 80043d0:	217d      	movs	r1, #125	; 0x7d
 80043d2:	20ca      	movs	r0, #202	; 0xca
 80043d4:	f7fd fa79 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 80043d8:	4945      	ldr	r1, [pc, #276]	; (80044f0 <showWSLedPanel+0x35c>)
 80043da:	483b      	ldr	r0, [pc, #236]	; (80044c8 <showWSLedPanel+0x334>)
 80043dc:	f00d fdb4 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 80043e0:	231f      	movs	r3, #31
 80043e2:	9301      	str	r3, [sp, #4]
 80043e4:	2300      	movs	r3, #0
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	2300      	movs	r3, #0
 80043ea:	227f      	movs	r2, #127	; 0x7f
 80043ec:	21d2      	movs	r1, #210	; 0xd2
 80043ee:	4836      	ldr	r0, [pc, #216]	; (80044c8 <showWSLedPanel+0x334>)
 80043f0:	f7fd fcd6 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 80043f4:	231f      	movs	r3, #31
 80043f6:	9301      	str	r3, [sp, #4]
 80043f8:	2305      	movs	r3, #5
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	2315      	movs	r3, #21
 80043fe:	2228      	movs	r2, #40	; 0x28
 8004400:	217d      	movs	r1, #125	; 0x7d
 8004402:	20fe      	movs	r0, #254	; 0xfe
 8004404:	f7fd fa61 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8004408:	493a      	ldr	r1, [pc, #232]	; (80044f4 <showWSLedPanel+0x360>)
 800440a:	482f      	ldr	r0, [pc, #188]	; (80044c8 <showWSLedPanel+0x334>)
 800440c:	f00d fd9c 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8004410:	231f      	movs	r3, #31
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	2300      	movs	r3, #0
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	2300      	movs	r3, #0
 800441a:	227f      	movs	r2, #127	; 0x7f
 800441c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004420:	4829      	ldr	r0, [pc, #164]	; (80044c8 <showWSLedPanel+0x334>)
 8004422:	f7fd fcbd 	bl	8001da0 <EF_PutString>

	//
	// Display fourth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_1_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_DAILY_BUTTON_COLOR);
 8004426:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800442a:	9301      	str	r3, [sp, #4]
 800442c:	2305      	movs	r3, #5
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	2315      	movs	r3, #21
 8004432:	2250      	movs	r2, #80	; 0x50
 8004434:	219c      	movs	r1, #156	; 0x9c
 8004436:	2014      	movs	r0, #20
 8004438:	f7fd fa47 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "DAILY");
 800443c:	492e      	ldr	r1, [pc, #184]	; (80044f8 <showWSLedPanel+0x364>)
 800443e:	4822      	ldr	r0, [pc, #136]	; (80044c8 <showWSLedPanel+0x334>)
 8004440:	f00d fd82 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_DAILY_BUTTON_COLOR);
 8004444:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004448:	9301      	str	r3, [sp, #4]
 800444a:	2300      	movs	r3, #0
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	2300      	movs	r3, #0
 8004450:	229e      	movs	r2, #158	; 0x9e
 8004452:	211c      	movs	r1, #28
 8004454:	481c      	ldr	r0, [pc, #112]	; (80044c8 <showWSLedPanel+0x334>)
 8004456:	f7fd fca3 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_2_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800445a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800445e:	9301      	str	r3, [sp, #4]
 8004460:	2305      	movs	r3, #5
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	2315      	movs	r3, #21
 8004466:	2250      	movs	r2, #80	; 0x50
 8004468:	219c      	movs	r1, #156	; 0x9c
 800446a:	2078      	movs	r0, #120	; 0x78
 800446c:	f7fd fa2d 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OFF");
 8004470:	4922      	ldr	r1, [pc, #136]	; (80044fc <showWSLedPanel+0x368>)
 8004472:	4815      	ldr	r0, [pc, #84]	; (80044c8 <showWSLedPanel+0x334>)
 8004474:	f00d fd68 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_2_X+STRING_ERRATA_X+12), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004478:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800447c:	9301      	str	r3, [sp, #4]
 800447e:	2300      	movs	r3, #0
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	2300      	movs	r3, #0
 8004484:	229e      	movs	r2, #158	; 0x9e
 8004486:	2187      	movs	r1, #135	; 0x87
 8004488:	480f      	ldr	r0, [pc, #60]	; (80044c8 <showWSLedPanel+0x334>)
 800448a:	f7fd fc89 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_3_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_NIGHT_BUTTON_COLOR);
 800448e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8004492:	9301      	str	r3, [sp, #4]
 8004494:	2305      	movs	r3, #5
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	2315      	movs	r3, #21
 800449a:	2250      	movs	r2, #80	; 0x50
 800449c:	219c      	movs	r1, #156	; 0x9c
 800449e:	20dc      	movs	r0, #220	; 0xdc
 80044a0:	f7fd fa13 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "NIGHT");
 80044a4:	4916      	ldr	r1, [pc, #88]	; (8004500 <showWSLedPanel+0x36c>)
 80044a6:	4808      	ldr	r0, [pc, #32]	; (80044c8 <showWSLedPanel+0x334>)
 80044a8:	f00d fd4e 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_3_X+STRING_ERRATA_X+10), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_NIGHT_BUTTON_COLOR);
 80044ac:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80044b0:	9301      	str	r3, [sp, #4]
 80044b2:	2300      	movs	r3, #0
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	2300      	movs	r3, #0
 80044b8:	229e      	movs	r2, #158	; 0x9e
 80044ba:	21e9      	movs	r1, #233	; 0xe9
 80044bc:	e022      	b.n	8004504 <showWSLedPanel+0x370>
 80044be:	bf00      	nop
 80044c0:	080296c4 	.word	0x080296c4
 80044c4:	08015e94 	.word	0x08015e94
 80044c8:	200002c0 	.word	0x200002c0
 80044cc:	20000033 	.word	0x20000033
 80044d0:	08015ea0 	.word	0x08015ea0
 80044d4:	08015eb0 	.word	0x08015eb0
 80044d8:	08015eb8 	.word	0x08015eb8
 80044dc:	0802774c 	.word	0x0802774c
 80044e0:	08015e34 	.word	0x08015e34
 80044e4:	08015e3c 	.word	0x08015e3c
 80044e8:	08015ec0 	.word	0x08015ec0
 80044ec:	08015ec4 	.word	0x08015ec4
 80044f0:	08015ec8 	.word	0x08015ec8
 80044f4:	08015ecc 	.word	0x08015ecc
 80044f8:	08015ed0 	.word	0x08015ed0
 80044fc:	08015e84 	.word	0x08015e84
 8004500:	08015ed8 	.word	0x08015ed8
 8004504:	482b      	ldr	r0, [pc, #172]	; (80045b4 <showWSLedPanel+0x420>)
 8004506:	f7fd fc4b 	bl	8001da0 <EF_PutString>

	//
	// Display fifth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_1_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 800450a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800450e:	9301      	str	r3, [sp, #4]
 8004510:	2305      	movs	r3, #5
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	2315      	movs	r3, #21
 8004516:	2250      	movs	r2, #80	; 0x50
 8004518:	21bb      	movs	r1, #187	; 0xbb
 800451a:	2046      	movs	r0, #70	; 0x46
 800451c:	f7fd f9d5 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNRISE");
 8004520:	4925      	ldr	r1, [pc, #148]	; (80045b8 <showWSLedPanel+0x424>)
 8004522:	4824      	ldr	r0, [pc, #144]	; (80045b4 <showWSLedPanel+0x420>)
 8004524:	f00d fd10 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8004528:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	2300      	movs	r3, #0
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	2300      	movs	r3, #0
 8004534:	22bd      	movs	r2, #189	; 0xbd
 8004536:	214e      	movs	r1, #78	; 0x4e
 8004538:	481e      	ldr	r0, [pc, #120]	; (80045b4 <showWSLedPanel+0x420>)
 800453a:	f7fd fc31 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_2_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 800453e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	2305      	movs	r3, #5
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	2315      	movs	r3, #21
 800454a:	2250      	movs	r2, #80	; 0x50
 800454c:	21bb      	movs	r1, #187	; 0xbb
 800454e:	20aa      	movs	r0, #170	; 0xaa
 8004550:	f7fd f9bb 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNSET");
 8004554:	4919      	ldr	r1, [pc, #100]	; (80045bc <showWSLedPanel+0x428>)
 8004556:	4817      	ldr	r0, [pc, #92]	; (80045b4 <showWSLedPanel+0x420>)
 8004558:	f00d fcf6 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_2_X+STRING_ERRATA_X+8), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 800455c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004560:	9301      	str	r3, [sp, #4]
 8004562:	2300      	movs	r3, #0
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	2300      	movs	r3, #0
 8004568:	22bd      	movs	r2, #189	; 0xbd
 800456a:	21b5      	movs	r1, #181	; 0xb5
 800456c:	4811      	ldr	r0, [pc, #68]	; (80045b4 <showWSLedPanel+0x420>)
 800456e:	f7fd fc17 	bl	8001da0 <EF_PutString>


	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8004572:	4813      	ldr	r0, [pc, #76]	; (80045c0 <showWSLedPanel+0x42c>)
 8004574:	f7fd f9fa 	bl	800196c <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004578:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800457c:	9301      	str	r3, [sp, #4]
 800457e:	2305      	movs	r3, #5
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	2314      	movs	r3, #20
 8004584:	2264      	movs	r2, #100	; 0x64
 8004586:	21d8      	movs	r1, #216	; 0xd8
 8004588:	200a      	movs	r0, #10
 800458a:	f7fd f99e 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 800458e:	490d      	ldr	r1, [pc, #52]	; (80045c4 <showWSLedPanel+0x430>)
 8004590:	4808      	ldr	r0, [pc, #32]	; (80045b4 <showWSLedPanel+0x420>)
 8004592:	f00d fcd9 	bl	8011f48 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004596:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800459a:	9301      	str	r3, [sp, #4]
 800459c:	2300      	movs	r3, #0
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	2300      	movs	r3, #0
 80045a2:	22da      	movs	r2, #218	; 0xda
 80045a4:	210d      	movs	r1, #13
 80045a6:	4803      	ldr	r0, [pc, #12]	; (80045b4 <showWSLedPanel+0x420>)
 80045a8:	f7fd fbfa 	bl	8001da0 <EF_PutString>


}
 80045ac:	bf00      	nop
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	200002c0 	.word	0x200002c0
 80045b8:	08015ee0 	.word	0x08015ee0
 80045bc:	08015ee8 	.word	0x08015ee8
 80045c0:	0802774c 	.word	0x0802774c
 80045c4:	08015e5c 	.word	0x08015e5c

080045c8 <drawschedulePanel>:
//
// Display screen to setting Schedule Panel
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawschedulePanel(uint8_t NrOfschedule)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b090      	sub	sp, #64	; 0x40
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	4603      	mov	r3, r0
 80045d0:	71fb      	strb	r3, [r7, #7]
	uint8_t hourOnschedule1 = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t hourOffschedule1 = 0;
 80045d8:	2300      	movs	r3, #0
 80045da:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t minuteOnschedule1 = 0;
 80045de:	2300      	movs	r3, #0
 80045e0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t minuteOffschedule1 = 0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hourOnschedule2 = 0;
 80045ea:	2300      	movs	r3, #0
 80045ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t hourOffschedule2 = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t minuteOnschedule2 = 0;
 80045f6:	2300      	movs	r3, #0
 80045f8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t minuteOffschedule2 = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uint8_t schedule1DayInWeekTab[7] = {0};
 8004602:	2300      	movs	r3, #0
 8004604:	62bb      	str	r3, [r7, #40]	; 0x28
 8004606:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800460a:	2100      	movs	r1, #0
 800460c:	460a      	mov	r2, r1
 800460e:	801a      	strh	r2, [r3, #0]
 8004610:	460a      	mov	r2, r1
 8004612:	709a      	strb	r2, [r3, #2]
	uint8_t schedule1RelayAndSwitchTab[9] = {0};
 8004614:	2300      	movs	r3, #0
 8004616:	61fb      	str	r3, [r7, #28]
 8004618:	f107 0320 	add.w	r3, r7, #32
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	711a      	strb	r2, [r3, #4]
	uint8_t schedule2DayInWeekTab[7] = {0};
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	f107 0318 	add.w	r3, r7, #24
 800462a:	2100      	movs	r1, #0
 800462c:	460a      	mov	r2, r1
 800462e:	801a      	strh	r2, [r3, #0]
 8004630:	460a      	mov	r2, r1
 8004632:	709a      	strb	r2, [r3, #2]
	uint8_t schedule2RelayAndSwitchTab[9] = {0};
 8004634:	2300      	movs	r3, #0
 8004636:	60bb      	str	r3, [r7, #8]
 8004638:	f107 030c 	add.w	r3, r7, #12
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	711a      	strb	r2, [r3, #4]
	  //
	  // Draw empty Rectangle to indicate day of week
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_1_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004642:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	2305      	movs	r3, #5
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	2314      	movs	r3, #20
 800464e:	2214      	movs	r2, #20
 8004650:	2132      	movs	r1, #50	; 0x32
 8004652:	203c      	movs	r0, #60	; 0x3c
 8004654:	f7fd f8bc 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_2_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004658:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800465c:	9301      	str	r3, [sp, #4]
 800465e:	2305      	movs	r3, #5
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	2314      	movs	r3, #20
 8004664:	2214      	movs	r2, #20
 8004666:	2132      	movs	r1, #50	; 0x32
 8004668:	205a      	movs	r0, #90	; 0x5a
 800466a:	f7fd f8b1 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_3_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800466e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004672:	9301      	str	r3, [sp, #4]
 8004674:	2305      	movs	r3, #5
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	2314      	movs	r3, #20
 800467a:	2214      	movs	r2, #20
 800467c:	2132      	movs	r1, #50	; 0x32
 800467e:	2078      	movs	r0, #120	; 0x78
 8004680:	f7fd f8a6 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_4_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004684:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004688:	9301      	str	r3, [sp, #4]
 800468a:	2305      	movs	r3, #5
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	2314      	movs	r3, #20
 8004690:	2214      	movs	r2, #20
 8004692:	2132      	movs	r1, #50	; 0x32
 8004694:	2096      	movs	r0, #150	; 0x96
 8004696:	f7fd f89b 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_5_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800469a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	2305      	movs	r3, #5
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	2314      	movs	r3, #20
 80046a6:	2214      	movs	r2, #20
 80046a8:	2132      	movs	r1, #50	; 0x32
 80046aa:	20b4      	movs	r0, #180	; 0xb4
 80046ac:	f7fd f890 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_6_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80046b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80046b4:	9301      	str	r3, [sp, #4]
 80046b6:	2305      	movs	r3, #5
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	2314      	movs	r3, #20
 80046bc:	2214      	movs	r2, #20
 80046be:	2132      	movs	r1, #50	; 0x32
 80046c0:	20d2      	movs	r0, #210	; 0xd2
 80046c2:	f7fd f885 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_7_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80046c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80046ca:	9301      	str	r3, [sp, #4]
 80046cc:	2305      	movs	r3, #5
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	2314      	movs	r3, #20
 80046d2:	2214      	movs	r2, #20
 80046d4:	2132      	movs	r1, #50	; 0x32
 80046d6:	20f0      	movs	r0, #240	; 0xf0
 80046d8:	f7fd f87a 	bl	80017d0 <GFX_DrawRoundRectangle>

	  // Restore from EEPROM chosen day for this schedule
	  restoreTFTScheduleDayOfWeek(NrOfschedule);
 80046dc:	79fb      	ldrb	r3, [r7, #7]
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 fede 	bl	80054a0 <restoreTFTScheduleDayOfWeek>
	  restoreTFTScheduleRelayLights(NrOfschedule);
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 ff47 	bl	800557a <restoreTFTScheduleRelayLights>

	  EF_SetFont(&arial_11ptFontInfo);
 80046ec:	48cc      	ldr	r0, [pc, #816]	; (8004a20 <drawschedulePanel+0x458>)
 80046ee:	f7fd f93d 	bl	800196c <EF_SetFont>
	  sprintf((char*)Msg, "PN WT ŚR CZ PT SB ND");
 80046f2:	49cc      	ldr	r1, [pc, #816]	; (8004a24 <drawschedulePanel+0x45c>)
 80046f4:	48cc      	ldr	r0, [pc, #816]	; (8004a28 <drawschedulePanel+0x460>)
 80046f6:	f00d fc27 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, DAY_CHECK_BUTTON_1_X, (DAY_CHECK_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80046fa:	f24c 6318 	movw	r3, #50712	; 0xc618
 80046fe:	9301      	str	r3, [sp, #4]
 8004700:	2301      	movs	r3, #1
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	2300      	movs	r3, #0
 8004706:	224b      	movs	r2, #75	; 0x4b
 8004708:	213c      	movs	r1, #60	; 0x3c
 800470a:	48c7      	ldr	r0, [pc, #796]	; (8004a28 <drawschedulePanel+0x460>)
 800470c:	f7fd fb48 	bl	8001da0 <EF_PutString>

	  //
	  // Draw empty Rectangle to indicate relay and lights
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004710:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004714:	9301      	str	r3, [sp, #4]
 8004716:	2305      	movs	r3, #5
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	2314      	movs	r3, #20
 800471c:	2214      	movs	r2, #20
 800471e:	21aa      	movs	r1, #170	; 0xaa
 8004720:	2015      	movs	r0, #21
 8004722:	f7fd f855 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004726:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800472a:	9301      	str	r3, [sp, #4]
 800472c:	2305      	movs	r3, #5
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	2314      	movs	r3, #20
 8004732:	2214      	movs	r2, #20
 8004734:	21aa      	movs	r1, #170	; 0xaa
 8004736:	2035      	movs	r0, #53	; 0x35
 8004738:	f7fd f84a 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800473c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004740:	9301      	str	r3, [sp, #4]
 8004742:	2305      	movs	r3, #5
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	2314      	movs	r3, #20
 8004748:	2214      	movs	r2, #20
 800474a:	21aa      	movs	r1, #170	; 0xaa
 800474c:	2055      	movs	r0, #85	; 0x55
 800474e:	f7fd f83f 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004752:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004756:	9301      	str	r3, [sp, #4]
 8004758:	2305      	movs	r3, #5
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	2314      	movs	r3, #20
 800475e:	2214      	movs	r2, #20
 8004760:	21aa      	movs	r1, #170	; 0xaa
 8004762:	2075      	movs	r0, #117	; 0x75
 8004764:	f7fd f834 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004768:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800476c:	9301      	str	r3, [sp, #4]
 800476e:	2305      	movs	r3, #5
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	2314      	movs	r3, #20
 8004774:	2214      	movs	r2, #20
 8004776:	21aa      	movs	r1, #170	; 0xaa
 8004778:	2095      	movs	r0, #149	; 0x95
 800477a:	f7fd f829 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800477e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004782:	9301      	str	r3, [sp, #4]
 8004784:	2305      	movs	r3, #5
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	2314      	movs	r3, #20
 800478a:	2214      	movs	r2, #20
 800478c:	21aa      	movs	r1, #170	; 0xaa
 800478e:	20b5      	movs	r0, #181	; 0xb5
 8004790:	f7fd f81e 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004794:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	2305      	movs	r3, #5
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	2314      	movs	r3, #20
 80047a0:	2214      	movs	r2, #20
 80047a2:	21aa      	movs	r1, #170	; 0xaa
 80047a4:	20d5      	movs	r0, #213	; 0xd5
 80047a6:	f7fd f813 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047ae:	9301      	str	r3, [sp, #4]
 80047b0:	2305      	movs	r3, #5
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	2314      	movs	r3, #20
 80047b6:	2214      	movs	r2, #20
 80047b8:	21aa      	movs	r1, #170	; 0xaa
 80047ba:	20f5      	movs	r0, #245	; 0xf5
 80047bc:	f7fd f808 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047c4:	9301      	str	r3, [sp, #4]
 80047c6:	2305      	movs	r3, #5
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	2314      	movs	r3, #20
 80047cc:	2214      	movs	r2, #20
 80047ce:	21aa      	movs	r1, #170	; 0xaa
 80047d0:	f240 1015 	movw	r0, #277	; 0x115
 80047d4:	f7fc fffc 	bl	80017d0 <GFX_DrawRoundRectangle>

	  sprintf((char*)Msg, "R1  R2  R3  R4 WS L1  L2  L3  L4");
 80047d8:	4994      	ldr	r1, [pc, #592]	; (8004a2c <drawschedulePanel+0x464>)
 80047da:	4893      	ldr	r0, [pc, #588]	; (8004a28 <drawschedulePanel+0x460>)
 80047dc:	f00d fbb4 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, (DAY_CHECK_RELAY_BUTTON_1_X), (DAY_CHECK_RELAY_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80047e0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80047e4:	9301      	str	r3, [sp, #4]
 80047e6:	2301      	movs	r3, #1
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	2300      	movs	r3, #0
 80047ec:	22c3      	movs	r2, #195	; 0xc3
 80047ee:	2115      	movs	r1, #21
 80047f0:	488d      	ldr	r0, [pc, #564]	; (8004a28 <drawschedulePanel+0x460>)
 80047f2:	f7fd fad5 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80047f6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80047fa:	9301      	str	r3, [sp, #4]
 80047fc:	2305      	movs	r3, #5
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	2314      	movs	r3, #20
 8004802:	2222      	movs	r2, #34	; 0x22
 8004804:	2165      	movs	r1, #101	; 0x65
 8004806:	20bb      	movs	r0, #187	; 0xbb
 8004808:	f7fd f85f 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 800480c:	4988      	ldr	r1, [pc, #544]	; (8004a30 <drawschedulePanel+0x468>)
 800480e:	4886      	ldr	r0, [pc, #536]	; (8004a28 <drawschedulePanel+0x460>)
 8004810:	f00d fb9a 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004814:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004818:	9301      	str	r3, [sp, #4]
 800481a:	2300      	movs	r3, #0
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	2300      	movs	r3, #0
 8004820:	2268      	movs	r2, #104	; 0x68
 8004822:	21c1      	movs	r1, #193	; 0xc1
 8004824:	4880      	ldr	r0, [pc, #512]	; (8004a28 <drawschedulePanel+0x460>)
 8004826:	f7fd fabb 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800482a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	2305      	movs	r3, #5
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	2314      	movs	r3, #20
 8004836:	2222      	movs	r2, #34	; 0x22
 8004838:	2165      	movs	r1, #101	; 0x65
 800483a:	20e9      	movs	r0, #233	; 0xe9
 800483c:	f7fd f845 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 8004840:	497c      	ldr	r1, [pc, #496]	; (8004a34 <drawschedulePanel+0x46c>)
 8004842:	4879      	ldr	r0, [pc, #484]	; (8004a28 <drawschedulePanel+0x460>)
 8004844:	f00d fb80 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004848:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800484c:	9301      	str	r3, [sp, #4]
 800484e:	2300      	movs	r3, #0
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	2300      	movs	r3, #0
 8004854:	2268      	movs	r2, #104	; 0x68
 8004856:	21ec      	movs	r1, #236	; 0xec
 8004858:	4873      	ldr	r0, [pc, #460]	; (8004a28 <drawschedulePanel+0x460>)
 800485a:	f7fd faa1 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800485e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004862:	9301      	str	r3, [sp, #4]
 8004864:	2305      	movs	r3, #5
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	2314      	movs	r3, #20
 800486a:	2222      	movs	r2, #34	; 0x22
 800486c:	2165      	movs	r1, #101	; 0x65
 800486e:	f240 1017 	movw	r0, #279	; 0x117
 8004872:	f7fd f82a 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 8004876:	4970      	ldr	r1, [pc, #448]	; (8004a38 <drawschedulePanel+0x470>)
 8004878:	486b      	ldr	r0, [pc, #428]	; (8004a28 <drawschedulePanel+0x460>)
 800487a:	f00d fb65 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800487e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004882:	9301      	str	r3, [sp, #4]
 8004884:	2300      	movs	r3, #0
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	2300      	movs	r3, #0
 800488a:	2268      	movs	r2, #104	; 0x68
 800488c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004890:	4865      	ldr	r0, [pc, #404]	; (8004a28 <drawschedulePanel+0x460>)
 8004892:	f7fd fa85 	bl	8001da0 <EF_PutString>


	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004896:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800489a:	9301      	str	r3, [sp, #4]
 800489c:	2305      	movs	r3, #5
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	2314      	movs	r3, #20
 80048a2:	2222      	movs	r2, #34	; 0x22
 80048a4:	2188      	movs	r1, #136	; 0x88
 80048a6:	20bb      	movs	r0, #187	; 0xbb
 80048a8:	f7fd f80f 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 80048ac:	4960      	ldr	r1, [pc, #384]	; (8004a30 <drawschedulePanel+0x468>)
 80048ae:	485e      	ldr	r0, [pc, #376]	; (8004a28 <drawschedulePanel+0x460>)
 80048b0:	f00d fb4a 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80048b4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80048b8:	9301      	str	r3, [sp, #4]
 80048ba:	2300      	movs	r3, #0
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	2300      	movs	r3, #0
 80048c0:	228b      	movs	r2, #139	; 0x8b
 80048c2:	21c1      	movs	r1, #193	; 0xc1
 80048c4:	4858      	ldr	r0, [pc, #352]	; (8004a28 <drawschedulePanel+0x460>)
 80048c6:	f7fd fa6b 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80048ca:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80048ce:	9301      	str	r3, [sp, #4]
 80048d0:	2305      	movs	r3, #5
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	2314      	movs	r3, #20
 80048d6:	2222      	movs	r2, #34	; 0x22
 80048d8:	2188      	movs	r1, #136	; 0x88
 80048da:	20e9      	movs	r0, #233	; 0xe9
 80048dc:	f7fc fff5 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 80048e0:	4954      	ldr	r1, [pc, #336]	; (8004a34 <drawschedulePanel+0x46c>)
 80048e2:	4851      	ldr	r0, [pc, #324]	; (8004a28 <drawschedulePanel+0x460>)
 80048e4:	f00d fb30 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80048e8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80048ec:	9301      	str	r3, [sp, #4]
 80048ee:	2300      	movs	r3, #0
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	2300      	movs	r3, #0
 80048f4:	228b      	movs	r2, #139	; 0x8b
 80048f6:	21ec      	movs	r1, #236	; 0xec
 80048f8:	484b      	ldr	r0, [pc, #300]	; (8004a28 <drawschedulePanel+0x460>)
 80048fa:	f7fd fa51 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80048fe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004902:	9301      	str	r3, [sp, #4]
 8004904:	2305      	movs	r3, #5
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	2314      	movs	r3, #20
 800490a:	2222      	movs	r2, #34	; 0x22
 800490c:	2188      	movs	r1, #136	; 0x88
 800490e:	f240 1017 	movw	r0, #279	; 0x117
 8004912:	f7fc ffda 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 8004916:	4948      	ldr	r1, [pc, #288]	; (8004a38 <drawschedulePanel+0x470>)
 8004918:	4843      	ldr	r0, [pc, #268]	; (8004a28 <drawschedulePanel+0x460>)
 800491a:	f00d fb15 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800491e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004922:	9301      	str	r3, [sp, #4]
 8004924:	2300      	movs	r3, #0
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	2300      	movs	r3, #0
 800492a:	228b      	movs	r2, #139	; 0x8b
 800492c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004930:	483d      	ldr	r0, [pc, #244]	; (8004a28 <drawschedulePanel+0x460>)
 8004932:	f7fd fa35 	bl	8001da0 <EF_PutString>
	  //
	  // Display hour and minute ON and OFF



	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004936:	4841      	ldr	r0, [pc, #260]	; (8004a3c <drawschedulePanel+0x474>)
 8004938:	f7fd f818 	bl	800196c <EF_SetFont>
	  if(NrOfschedule == 1)
 800493c:	79fb      	ldrb	r3, [r7, #7]
 800493e:	2b01      	cmp	r3, #1
 8004940:	f040 80db 	bne.w	8004afa <drawschedulePanel+0x532>
	  {
		  // Read hour and minute of ON and OFF
		  EEPROM_ScheduleHourOnRead(1, &hourOnschedule1);
 8004944:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004948:	4619      	mov	r1, r3
 800494a:	2001      	movs	r0, #1
 800494c:	f7fe fc13 	bl	8003176 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(1, &minuteOnschedule1);
 8004950:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8004954:	4619      	mov	r1, r3
 8004956:	2001      	movs	r0, #1
 8004958:	f7fe fc31 	bl	80031be <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(1, &hourOffschedule1);
 800495c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8004960:	4619      	mov	r1, r3
 8004962:	2001      	movs	r0, #1
 8004964:	f7fe fc4f 	bl	8003206 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(1, &minuteOffschedule1);
 8004968:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800496c:	4619      	mov	r1, r3
 800496e:	2001      	movs	r0, #1
 8004970:	f7fe fc6d 	bl	800324e <EEPROM_ScheduleMinuteOffRead>
		  // Read day of week and relay / lights in current schedule
		  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 8004974:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004978:	4619      	mov	r1, r3
 800497a:	2001      	movs	r0, #1
 800497c:	f7fe faaa 	bl	8002ed4 <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 8004980:	f107 031c 	add.w	r3, r7, #28
 8004984:	4619      	mov	r1, r3
 8004986:	2001      	movs	r0, #1
 8004988:	f7fe fb20 	bl	8002fcc <EEPROM_ScheduleRelayAndSwitchTabRead>

		  if(hourOnschedule1 > 23) hourOnschedule1 = 23;
 800498c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004990:	2b17      	cmp	r3, #23
 8004992:	d902      	bls.n	800499a <drawschedulePanel+0x3d2>
 8004994:	2317      	movs	r3, #23
 8004996:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  if(minuteOnschedule1 > 59) minuteOnschedule1 = 59;
 800499a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800499e:	2b3b      	cmp	r3, #59	; 0x3b
 80049a0:	d902      	bls.n	80049a8 <drawschedulePanel+0x3e0>
 80049a2:	233b      	movs	r3, #59	; 0x3b
 80049a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  if(hourOffschedule1 > 23) hourOffschedule1 = 23;
 80049a8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80049ac:	2b17      	cmp	r3, #23
 80049ae:	d902      	bls.n	80049b6 <drawschedulePanel+0x3ee>
 80049b0:	2317      	movs	r3, #23
 80049b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		  if(minuteOffschedule1 > 59) minuteOffschedule1 = 59;
 80049b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049ba:	2b3b      	cmp	r3, #59	; 0x3b
 80049bc:	d902      	bls.n	80049c4 <drawschedulePanel+0x3fc>
 80049be:	233b      	movs	r3, #59	; 0x3b
 80049c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

		  if((hourOnschedule1 < 10)&&(minuteOnschedule1 < 10))sprintf((char*)Msg, "ON:   0%d  :0%d", hourOnschedule1, minuteOnschedule1);
 80049c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049c8:	2b09      	cmp	r3, #9
 80049ca:	d80d      	bhi.n	80049e8 <drawschedulePanel+0x420>
 80049cc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80049d0:	2b09      	cmp	r3, #9
 80049d2:	d809      	bhi.n	80049e8 <drawschedulePanel+0x420>
 80049d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049d8:	461a      	mov	r2, r3
 80049da:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80049de:	4918      	ldr	r1, [pc, #96]	; (8004a40 <drawschedulePanel+0x478>)
 80049e0:	4811      	ldr	r0, [pc, #68]	; (8004a28 <drawschedulePanel+0x460>)
 80049e2:	f00d fab1 	bl	8011f48 <siprintf>
 80049e6:	e03a      	b.n	8004a5e <drawschedulePanel+0x496>
		  else if(hourOnschedule1 < 10) sprintf((char*)Msg, "ON:   0%d  : %d", hourOnschedule1, minuteOnschedule1);
 80049e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049ec:	2b09      	cmp	r3, #9
 80049ee:	d809      	bhi.n	8004a04 <drawschedulePanel+0x43c>
 80049f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049f4:	461a      	mov	r2, r3
 80049f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80049fa:	4912      	ldr	r1, [pc, #72]	; (8004a44 <drawschedulePanel+0x47c>)
 80049fc:	480a      	ldr	r0, [pc, #40]	; (8004a28 <drawschedulePanel+0x460>)
 80049fe:	f00d faa3 	bl	8011f48 <siprintf>
 8004a02:	e02c      	b.n	8004a5e <drawschedulePanel+0x496>
		  else if (minuteOnschedule1 < 10) sprintf((char*)Msg, "ON:    %d  :0%d", hourOnschedule1, minuteOnschedule1);
 8004a04:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004a08:	2b09      	cmp	r3, #9
 8004a0a:	d81f      	bhi.n	8004a4c <drawschedulePanel+0x484>
 8004a0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a10:	461a      	mov	r2, r3
 8004a12:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004a16:	490c      	ldr	r1, [pc, #48]	; (8004a48 <drawschedulePanel+0x480>)
 8004a18:	4803      	ldr	r0, [pc, #12]	; (8004a28 <drawschedulePanel+0x460>)
 8004a1a:	f00d fa95 	bl	8011f48 <siprintf>
 8004a1e:	e01e      	b.n	8004a5e <drawschedulePanel+0x496>
 8004a20:	0802774c 	.word	0x0802774c
 8004a24:	08015ef0 	.word	0x08015ef0
 8004a28:	200002c0 	.word	0x200002c0
 8004a2c:	08015f08 	.word	0x08015f08
 8004a30:	08015f2c 	.word	0x08015f2c
 8004a34:	08015f30 	.word	0x08015f30
 8004a38:	08015f34 	.word	0x08015f34
 8004a3c:	080296c4 	.word	0x080296c4
 8004a40:	08015f3c 	.word	0x08015f3c
 8004a44:	08015f4c 	.word	0x08015f4c
 8004a48:	08015f5c 	.word	0x08015f5c
		  else sprintf((char*)Msg, "ON:    %d  : %d", hourOnschedule1, minuteOnschedule1);
 8004a4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a50:	461a      	mov	r2, r3
 8004a52:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004a56:	498f      	ldr	r1, [pc, #572]	; (8004c94 <drawschedulePanel+0x6cc>)
 8004a58:	488f      	ldr	r0, [pc, #572]	; (8004c98 <drawschedulePanel+0x6d0>)
 8004a5a:	f00d fa75 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004a5e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004a62:	9301      	str	r3, [sp, #4]
 8004a64:	2301      	movs	r3, #1
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	2264      	movs	r2, #100	; 0x64
 8004a6c:	210a      	movs	r1, #10
 8004a6e:	488a      	ldr	r0, [pc, #552]	; (8004c98 <drawschedulePanel+0x6d0>)
 8004a70:	f7fd f996 	bl	8001da0 <EF_PutString>

		  if((hourOffschedule1 < 10)&&(minuteOffschedule1 < 10))sprintf((char*)Msg, "OFF: 0%d  :0%d", hourOffschedule1, minuteOffschedule1);
 8004a74:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004a78:	2b09      	cmp	r3, #9
 8004a7a:	d80d      	bhi.n	8004a98 <drawschedulePanel+0x4d0>
 8004a7c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004a80:	2b09      	cmp	r3, #9
 8004a82:	d809      	bhi.n	8004a98 <drawschedulePanel+0x4d0>
 8004a84:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004a88:	461a      	mov	r2, r3
 8004a8a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004a8e:	4983      	ldr	r1, [pc, #524]	; (8004c9c <drawschedulePanel+0x6d4>)
 8004a90:	4881      	ldr	r0, [pc, #516]	; (8004c98 <drawschedulePanel+0x6d0>)
 8004a92:	f00d fa59 	bl	8011f48 <siprintf>
 8004a96:	e024      	b.n	8004ae2 <drawschedulePanel+0x51a>
		  else if(hourOffschedule1 < 10) sprintf((char*)Msg, "OFF: 0%d  : %d", hourOffschedule1, minuteOffschedule1);
 8004a98:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004a9c:	2b09      	cmp	r3, #9
 8004a9e:	d809      	bhi.n	8004ab4 <drawschedulePanel+0x4ec>
 8004aa0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004aaa:	497d      	ldr	r1, [pc, #500]	; (8004ca0 <drawschedulePanel+0x6d8>)
 8004aac:	487a      	ldr	r0, [pc, #488]	; (8004c98 <drawschedulePanel+0x6d0>)
 8004aae:	f00d fa4b 	bl	8011f48 <siprintf>
 8004ab2:	e016      	b.n	8004ae2 <drawschedulePanel+0x51a>
		  else if (minuteOffschedule1 < 10) sprintf((char*)Msg, "OFF:  %d  :0%d", hourOffschedule1, minuteOffschedule1);
 8004ab4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004ab8:	2b09      	cmp	r3, #9
 8004aba:	d809      	bhi.n	8004ad0 <drawschedulePanel+0x508>
 8004abc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004ac6:	4977      	ldr	r1, [pc, #476]	; (8004ca4 <drawschedulePanel+0x6dc>)
 8004ac8:	4873      	ldr	r0, [pc, #460]	; (8004c98 <drawschedulePanel+0x6d0>)
 8004aca:	f00d fa3d 	bl	8011f48 <siprintf>
 8004ace:	e008      	b.n	8004ae2 <drawschedulePanel+0x51a>
		  else sprintf((char*)Msg, "OFF:  %d  : %d", hourOffschedule1, minuteOffschedule1);
 8004ad0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004ada:	4973      	ldr	r1, [pc, #460]	; (8004ca8 <drawschedulePanel+0x6e0>)
 8004adc:	486e      	ldr	r0, [pc, #440]	; (8004c98 <drawschedulePanel+0x6d0>)
 8004ade:	f00d fa33 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004ae2:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004ae6:	9301      	str	r3, [sp, #4]
 8004ae8:	2301      	movs	r3, #1
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	2300      	movs	r3, #0
 8004aee:	2287      	movs	r2, #135	; 0x87
 8004af0:	210a      	movs	r1, #10
 8004af2:	4869      	ldr	r0, [pc, #420]	; (8004c98 <drawschedulePanel+0x6d0>)
 8004af4:	f7fd f954 	bl	8001da0 <EF_PutString>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
	  }
}
 8004af8:	e0c7      	b.n	8004c8a <drawschedulePanel+0x6c2>
	  else if(NrOfschedule == 2)
 8004afa:	79fb      	ldrb	r3, [r7, #7]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	f040 80c4 	bne.w	8004c8a <drawschedulePanel+0x6c2>
		  EEPROM_ScheduleHourOnRead(2, &hourOnschedule2);
 8004b02:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8004b06:	4619      	mov	r1, r3
 8004b08:	2002      	movs	r0, #2
 8004b0a:	f7fe fb34 	bl	8003176 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(2, &minuteOnschedule2);
 8004b0e:	f107 0331 	add.w	r3, r7, #49	; 0x31
 8004b12:	4619      	mov	r1, r3
 8004b14:	2002      	movs	r0, #2
 8004b16:	f7fe fb52 	bl	80031be <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(2, &hourOffschedule2);
 8004b1a:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8004b1e:	4619      	mov	r1, r3
 8004b20:	2002      	movs	r0, #2
 8004b22:	f7fe fb70 	bl	8003206 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(2, &minuteOffschedule2);
 8004b26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	2002      	movs	r0, #2
 8004b2e:	f7fe fb8e 	bl	800324e <EEPROM_ScheduleMinuteOffRead>
		  EEPROM_ScheduleDayInWeekRead(2, schedule2DayInWeekTab);
 8004b32:	f107 0314 	add.w	r3, r7, #20
 8004b36:	4619      	mov	r1, r3
 8004b38:	2002      	movs	r0, #2
 8004b3a:	f7fe f9cb 	bl	8002ed4 <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule2RelayAndSwitchTab);
 8004b3e:	f107 0308 	add.w	r3, r7, #8
 8004b42:	4619      	mov	r1, r3
 8004b44:	2002      	movs	r0, #2
 8004b46:	f7fe fa41 	bl	8002fcc <EEPROM_ScheduleRelayAndSwitchTabRead>
		  if(hourOnschedule2 > 23) hourOnschedule2 = 23;
 8004b4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b4e:	2b17      	cmp	r3, #23
 8004b50:	d902      	bls.n	8004b58 <drawschedulePanel+0x590>
 8004b52:	2317      	movs	r3, #23
 8004b54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  if(minuteOnschedule2 > 59) minuteOnschedule2 = 59;
 8004b58:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004b5c:	2b3b      	cmp	r3, #59	; 0x3b
 8004b5e:	d902      	bls.n	8004b66 <drawschedulePanel+0x59e>
 8004b60:	233b      	movs	r3, #59	; 0x3b
 8004b62:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		  if(hourOffschedule2 > 23) hourOffschedule2 = 23;
 8004b66:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004b6a:	2b17      	cmp	r3, #23
 8004b6c:	d902      	bls.n	8004b74 <drawschedulePanel+0x5ac>
 8004b6e:	2317      	movs	r3, #23
 8004b70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		  if(minuteOffschedule2 > 59) minuteOffschedule2 = 59;
 8004b74:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004b78:	2b3b      	cmp	r3, #59	; 0x3b
 8004b7a:	d902      	bls.n	8004b82 <drawschedulePanel+0x5ba>
 8004b7c:	233b      	movs	r3, #59	; 0x3b
 8004b7e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		  if((hourOnschedule2 < 10)&&(minuteOnschedule2 < 10))sprintf((char*)Msg, "ON:    0%d :0%d", hourOnschedule2, minuteOnschedule2);
 8004b82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b86:	2b09      	cmp	r3, #9
 8004b88:	d80d      	bhi.n	8004ba6 <drawschedulePanel+0x5de>
 8004b8a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004b8e:	2b09      	cmp	r3, #9
 8004b90:	d809      	bhi.n	8004ba6 <drawschedulePanel+0x5de>
 8004b92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b96:	461a      	mov	r2, r3
 8004b98:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004b9c:	4943      	ldr	r1, [pc, #268]	; (8004cac <drawschedulePanel+0x6e4>)
 8004b9e:	483e      	ldr	r0, [pc, #248]	; (8004c98 <drawschedulePanel+0x6d0>)
 8004ba0:	f00d f9d2 	bl	8011f48 <siprintf>
 8004ba4:	e024      	b.n	8004bf0 <drawschedulePanel+0x628>
		  else if(hourOnschedule2 < 10) sprintf((char*)Msg, "ON:    0%d : %d", hourOnschedule2, minuteOnschedule2);
 8004ba6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004baa:	2b09      	cmp	r3, #9
 8004bac:	d809      	bhi.n	8004bc2 <drawschedulePanel+0x5fa>
 8004bae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004bb8:	493d      	ldr	r1, [pc, #244]	; (8004cb0 <drawschedulePanel+0x6e8>)
 8004bba:	4837      	ldr	r0, [pc, #220]	; (8004c98 <drawschedulePanel+0x6d0>)
 8004bbc:	f00d f9c4 	bl	8011f48 <siprintf>
 8004bc0:	e016      	b.n	8004bf0 <drawschedulePanel+0x628>
		  else if (minuteOnschedule2 < 10) sprintf((char*)Msg, "ON:     %d :0%d", hourOnschedule2, minuteOnschedule2);
 8004bc2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004bc6:	2b09      	cmp	r3, #9
 8004bc8:	d809      	bhi.n	8004bde <drawschedulePanel+0x616>
 8004bca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004bd4:	4937      	ldr	r1, [pc, #220]	; (8004cb4 <drawschedulePanel+0x6ec>)
 8004bd6:	4830      	ldr	r0, [pc, #192]	; (8004c98 <drawschedulePanel+0x6d0>)
 8004bd8:	f00d f9b6 	bl	8011f48 <siprintf>
 8004bdc:	e008      	b.n	8004bf0 <drawschedulePanel+0x628>
		  else sprintf((char*)Msg, "ON:     %d : %d", hourOnschedule2, minuteOnschedule2);
 8004bde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004be2:	461a      	mov	r2, r3
 8004be4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004be8:	4933      	ldr	r1, [pc, #204]	; (8004cb8 <drawschedulePanel+0x6f0>)
 8004bea:	482b      	ldr	r0, [pc, #172]	; (8004c98 <drawschedulePanel+0x6d0>)
 8004bec:	f00d f9ac 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004bf0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004bf4:	9301      	str	r3, [sp, #4]
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	2264      	movs	r2, #100	; 0x64
 8004bfe:	210a      	movs	r1, #10
 8004c00:	4825      	ldr	r0, [pc, #148]	; (8004c98 <drawschedulePanel+0x6d0>)
 8004c02:	f7fd f8cd 	bl	8001da0 <EF_PutString>
		  if((hourOffschedule2 < 10)&&(minuteOffschedule2 < 10))sprintf((char*)Msg, "OFF:  0%d :0%d", hourOffschedule2, minuteOffschedule2);
 8004c06:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004c0a:	2b09      	cmp	r3, #9
 8004c0c:	d80d      	bhi.n	8004c2a <drawschedulePanel+0x662>
 8004c0e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c12:	2b09      	cmp	r3, #9
 8004c14:	d809      	bhi.n	8004c2a <drawschedulePanel+0x662>
 8004c16:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c20:	4926      	ldr	r1, [pc, #152]	; (8004cbc <drawschedulePanel+0x6f4>)
 8004c22:	481d      	ldr	r0, [pc, #116]	; (8004c98 <drawschedulePanel+0x6d0>)
 8004c24:	f00d f990 	bl	8011f48 <siprintf>
 8004c28:	e024      	b.n	8004c74 <drawschedulePanel+0x6ac>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
 8004c2a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004c2e:	2b09      	cmp	r3, #9
 8004c30:	d809      	bhi.n	8004c46 <drawschedulePanel+0x67e>
 8004c32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004c36:	461a      	mov	r2, r3
 8004c38:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c3c:	4920      	ldr	r1, [pc, #128]	; (8004cc0 <drawschedulePanel+0x6f8>)
 8004c3e:	4816      	ldr	r0, [pc, #88]	; (8004c98 <drawschedulePanel+0x6d0>)
 8004c40:	f00d f982 	bl	8011f48 <siprintf>
 8004c44:	e016      	b.n	8004c74 <drawschedulePanel+0x6ac>
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
 8004c46:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c4a:	2b09      	cmp	r3, #9
 8004c4c:	d809      	bhi.n	8004c62 <drawschedulePanel+0x69a>
 8004c4e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004c52:	461a      	mov	r2, r3
 8004c54:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c58:	491a      	ldr	r1, [pc, #104]	; (8004cc4 <drawschedulePanel+0x6fc>)
 8004c5a:	480f      	ldr	r0, [pc, #60]	; (8004c98 <drawschedulePanel+0x6d0>)
 8004c5c:	f00d f974 	bl	8011f48 <siprintf>
 8004c60:	e008      	b.n	8004c74 <drawschedulePanel+0x6ac>
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
 8004c62:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004c66:	461a      	mov	r2, r3
 8004c68:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c6c:	4916      	ldr	r1, [pc, #88]	; (8004cc8 <drawschedulePanel+0x700>)
 8004c6e:	480a      	ldr	r0, [pc, #40]	; (8004c98 <drawschedulePanel+0x6d0>)
 8004c70:	f00d f96a 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004c74:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004c78:	9301      	str	r3, [sp, #4]
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	2287      	movs	r2, #135	; 0x87
 8004c82:	210c      	movs	r1, #12
 8004c84:	4804      	ldr	r0, [pc, #16]	; (8004c98 <drawschedulePanel+0x6d0>)
 8004c86:	f7fd f88b 	bl	8001da0 <EF_PutString>
}
 8004c8a:	bf00      	nop
 8004c8c:	3738      	adds	r7, #56	; 0x38
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	08015f6c 	.word	0x08015f6c
 8004c98:	200002c0 	.word	0x200002c0
 8004c9c:	08015f7c 	.word	0x08015f7c
 8004ca0:	08015f8c 	.word	0x08015f8c
 8004ca4:	08015f9c 	.word	0x08015f9c
 8004ca8:	08015fac 	.word	0x08015fac
 8004cac:	08015fbc 	.word	0x08015fbc
 8004cb0:	08015fcc 	.word	0x08015fcc
 8004cb4:	08015fdc 	.word	0x08015fdc
 8004cb8:	08015fec 	.word	0x08015fec
 8004cbc:	08015ffc 	.word	0x08015ffc
 8004cc0:	0801600c 	.word	0x0801600c
 8004cc4:	0801601c 	.word	0x0801601c
 8004cc8:	0801602c 	.word	0x0801602c

08004ccc <showSchedule1Panel>:

void showSchedule1Panel()
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004cd2:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004cd6:	f7fd fa4d 	bl	8002174 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004cda:	483f      	ldr	r0, [pc, #252]	; (8004dd8 <showSchedule1Panel+0x10c>)
 8004cdc:	f7fc fe46 	bl	800196c <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 1");
 8004ce0:	493e      	ldr	r1, [pc, #248]	; (8004ddc <showSchedule1Panel+0x110>)
 8004ce2:	483f      	ldr	r0, [pc, #252]	; (8004de0 <showSchedule1Panel+0x114>)
 8004ce4:	f00d f930 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004ce8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004cec:	9301      	str	r3, [sp, #4]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004cf6:	220a      	movs	r2, #10
 8004cf8:	212a      	movs	r1, #42	; 0x2a
 8004cfa:	4839      	ldr	r0, [pc, #228]	; (8004de0 <showSchedule1Panel+0x114>)
 8004cfc:	f7fd f850 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004d00:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	2329      	movs	r3, #41	; 0x29
 8004d08:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d0c:	2129      	movs	r1, #41	; 0x29
 8004d0e:	2000      	movs	r0, #0
 8004d10:	f7fc fb7c 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004d14:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	232b      	movs	r3, #43	; 0x2b
 8004d1c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d20:	212b      	movs	r1, #43	; 0x2b
 8004d22:	2000      	movs	r0, #0
 8004d24:	f7fc fb72 	bl	800140c <GFX_DrawLine>

	  drawschedulePanel(1);
 8004d28:	2001      	movs	r0, #1
 8004d2a:	f7ff fc4d 	bl	80045c8 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004d2e:	482d      	ldr	r0, [pc, #180]	; (8004de4 <showSchedule1Panel+0x118>)
 8004d30:	f7fc fe1c 	bl	800196c <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004d34:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004d38:	9301      	str	r3, [sp, #4]
 8004d3a:	2305      	movs	r3, #5
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	2314      	movs	r3, #20
 8004d40:	225f      	movs	r2, #95	; 0x5f
 8004d42:	21d8      	movs	r1, #216	; 0xd8
 8004d44:	20dc      	movs	r0, #220	; 0xdc
 8004d46:	f7fc fdc0 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "HARM. 2=>");
 8004d4a:	4927      	ldr	r1, [pc, #156]	; (8004de8 <showSchedule1Panel+0x11c>)
 8004d4c:	4824      	ldr	r0, [pc, #144]	; (8004de0 <showSchedule1Panel+0x114>)
 8004d4e:	f00d f8fb 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004d52:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004d56:	9301      	str	r3, [sp, #4]
 8004d58:	2300      	movs	r3, #0
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	22da      	movs	r2, #218	; 0xda
 8004d60:	21e6      	movs	r1, #230	; 0xe6
 8004d62:	481f      	ldr	r0, [pc, #124]	; (8004de0 <showSchedule1Panel+0x114>)
 8004d64:	f7fd f81c 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004d68:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004d6c:	9301      	str	r3, [sp, #4]
 8004d6e:	2305      	movs	r3, #5
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	2314      	movs	r3, #20
 8004d74:	225a      	movs	r2, #90	; 0x5a
 8004d76:	21d8      	movs	r1, #216	; 0xd8
 8004d78:	2078      	movs	r0, #120	; 0x78
 8004d7a:	f7fc fda6 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004d7e:	491b      	ldr	r1, [pc, #108]	; (8004dec <showSchedule1Panel+0x120>)
 8004d80:	4817      	ldr	r0, [pc, #92]	; (8004de0 <showSchedule1Panel+0x114>)
 8004d82:	f00d f8e1 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004d86:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004d8a:	9301      	str	r3, [sp, #4]
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	2300      	movs	r3, #0
 8004d92:	22da      	movs	r2, #218	; 0xda
 8004d94:	217e      	movs	r1, #126	; 0x7e
 8004d96:	4812      	ldr	r0, [pc, #72]	; (8004de0 <showSchedule1Panel+0x114>)
 8004d98:	f7fd f802 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004d9c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004da0:	9301      	str	r3, [sp, #4]
 8004da2:	2305      	movs	r3, #5
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	2314      	movs	r3, #20
 8004da8:	2264      	movs	r2, #100	; 0x64
 8004daa:	21d8      	movs	r1, #216	; 0xd8
 8004dac:	200a      	movs	r0, #10
 8004dae:	f7fc fd8c 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004db2:	490f      	ldr	r1, [pc, #60]	; (8004df0 <showSchedule1Panel+0x124>)
 8004db4:	480a      	ldr	r0, [pc, #40]	; (8004de0 <showSchedule1Panel+0x114>)
 8004db6:	f00d f8c7 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004dba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004dbe:	9301      	str	r3, [sp, #4]
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	22da      	movs	r2, #218	; 0xda
 8004dc8:	210d      	movs	r1, #13
 8004dca:	4805      	ldr	r0, [pc, #20]	; (8004de0 <showSchedule1Panel+0x114>)
 8004dcc:	f7fc ffe8 	bl	8001da0 <EF_PutString>
}
 8004dd0:	bf00      	nop
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	080296c4 	.word	0x080296c4
 8004ddc:	0801603c 	.word	0x0801603c
 8004de0:	200002c0 	.word	0x200002c0
 8004de4:	0802774c 	.word	0x0802774c
 8004de8:	0801604c 	.word	0x0801604c
 8004dec:	08016058 	.word	0x08016058
 8004df0:	08016060 	.word	0x08016060

08004df4 <showSchedule2Panel>:

void showSchedule2Panel()
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004dfa:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004dfe:	f7fd f9b9 	bl	8002174 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004e02:	4832      	ldr	r0, [pc, #200]	; (8004ecc <showSchedule2Panel+0xd8>)
 8004e04:	f7fc fdb2 	bl	800196c <EF_SetFont>
	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 2");
 8004e08:	4931      	ldr	r1, [pc, #196]	; (8004ed0 <showSchedule2Panel+0xdc>)
 8004e0a:	4832      	ldr	r0, [pc, #200]	; (8004ed4 <showSchedule2Panel+0xe0>)
 8004e0c:	f00d f89c 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004e10:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004e14:	9301      	str	r3, [sp, #4]
 8004e16:	2300      	movs	r3, #0
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e1e:	220a      	movs	r2, #10
 8004e20:	212a      	movs	r1, #42	; 0x2a
 8004e22:	482c      	ldr	r0, [pc, #176]	; (8004ed4 <showSchedule2Panel+0xe0>)
 8004e24:	f7fc ffbc 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004e28:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	2329      	movs	r3, #41	; 0x29
 8004e30:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e34:	2129      	movs	r1, #41	; 0x29
 8004e36:	2000      	movs	r0, #0
 8004e38:	f7fc fae8 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004e3c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	232b      	movs	r3, #43	; 0x2b
 8004e44:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e48:	212b      	movs	r1, #43	; 0x2b
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	f7fc fade 	bl	800140c <GFX_DrawLine>

	  drawschedulePanel(2);
 8004e50:	2002      	movs	r0, #2
 8004e52:	f7ff fbb9 	bl	80045c8 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004e56:	4820      	ldr	r0, [pc, #128]	; (8004ed8 <showSchedule2Panel+0xe4>)
 8004e58:	f7fc fd88 	bl	800196c <EF_SetFont>
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004e5c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e60:	9301      	str	r3, [sp, #4]
 8004e62:	2305      	movs	r3, #5
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	2314      	movs	r3, #20
 8004e68:	225a      	movs	r2, #90	; 0x5a
 8004e6a:	21d8      	movs	r1, #216	; 0xd8
 8004e6c:	2078      	movs	r0, #120	; 0x78
 8004e6e:	f7fc fd2c 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004e72:	491a      	ldr	r1, [pc, #104]	; (8004edc <showSchedule2Panel+0xe8>)
 8004e74:	4817      	ldr	r0, [pc, #92]	; (8004ed4 <showSchedule2Panel+0xe0>)
 8004e76:	f00d f867 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004e7a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004e7e:	9301      	str	r3, [sp, #4]
 8004e80:	2300      	movs	r3, #0
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	2300      	movs	r3, #0
 8004e86:	22da      	movs	r2, #218	; 0xda
 8004e88:	217e      	movs	r1, #126	; 0x7e
 8004e8a:	4812      	ldr	r0, [pc, #72]	; (8004ed4 <showSchedule2Panel+0xe0>)
 8004e8c:	f7fc ff88 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004e90:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	2305      	movs	r3, #5
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	2314      	movs	r3, #20
 8004e9c:	2264      	movs	r2, #100	; 0x64
 8004e9e:	21d8      	movs	r1, #216	; 0xd8
 8004ea0:	200a      	movs	r0, #10
 8004ea2:	f7fc fd12 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004ea6:	490e      	ldr	r1, [pc, #56]	; (8004ee0 <showSchedule2Panel+0xec>)
 8004ea8:	480a      	ldr	r0, [pc, #40]	; (8004ed4 <showSchedule2Panel+0xe0>)
 8004eaa:	f00d f84d 	bl	8011f48 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004eae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004eb2:	9301      	str	r3, [sp, #4]
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	22da      	movs	r2, #218	; 0xda
 8004ebc:	210d      	movs	r1, #13
 8004ebe:	4805      	ldr	r0, [pc, #20]	; (8004ed4 <showSchedule2Panel+0xe0>)
 8004ec0:	f7fc ff6e 	bl	8001da0 <EF_PutString>
}
 8004ec4:	bf00      	nop
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	080296c4 	.word	0x080296c4
 8004ed0:	0801606c 	.word	0x0801606c
 8004ed4:	200002c0 	.word	0x200002c0
 8004ed8:	0802774c 	.word	0x0802774c
 8004edc:	08016058 	.word	0x08016058
 8004ee0:	08016060 	.word	0x08016060

08004ee4 <ChangeHourOnScreen>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Change displayed time, if is other than current time
//
void ChangeHourOnScreen()
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 8004eea:	f7fd fdaf 	bl	8002a4c <DS3231_GetHour>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 8004ef2:	f7fd fdb7 	bl	8002a64 <DS3231_GetMinute>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	71bb      	strb	r3, [r7, #6]

	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004efa:	482c      	ldr	r0, [pc, #176]	; (8004fac <ChangeHourOnScreen+0xc8>)
 8004efc:	f7fc fd36 	bl	800196c <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 8004f00:	4b2b      	ldr	r3, [pc, #172]	; (8004fb0 <ChangeHourOnScreen+0xcc>)
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	79fa      	ldrb	r2, [r7, #7]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d021      	beq.n	8004f4e <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8004f0a:	4b2a      	ldr	r3, [pc, #168]	; (8004fb4 <ChangeHourOnScreen+0xd0>)
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d11a      	bne.n	8004f48 <ChangeHourOnScreen+0x64>
		  {
			  if(CHour < 10)
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	2b09      	cmp	r3, #9
 8004f16:	d806      	bhi.n	8004f26 <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	4926      	ldr	r1, [pc, #152]	; (8004fb8 <ChangeHourOnScreen+0xd4>)
 8004f1e:	4827      	ldr	r0, [pc, #156]	; (8004fbc <ChangeHourOnScreen+0xd8>)
 8004f20:	f00d f812 	bl	8011f48 <siprintf>
 8004f24:	e005      	b.n	8004f32 <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	4925      	ldr	r1, [pc, #148]	; (8004fc0 <ChangeHourOnScreen+0xdc>)
 8004f2c:	4823      	ldr	r0, [pc, #140]	; (8004fbc <ChangeHourOnScreen+0xd8>)
 8004f2e:	f00d f80b 	bl	8011f48 <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004f32:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004f36:	9301      	str	r3, [sp, #4]
 8004f38:	2301      	movs	r3, #1
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	2232      	movs	r2, #50	; 0x32
 8004f40:	2161      	movs	r1, #97	; 0x61
 8004f42:	481e      	ldr	r0, [pc, #120]	; (8004fbc <ChangeHourOnScreen+0xd8>)
 8004f44:	f7fc ff2c 	bl	8001da0 <EF_PutString>
		  }
		  OldHours = CHour;
 8004f48:	4a19      	ldr	r2, [pc, #100]	; (8004fb0 <ChangeHourOnScreen+0xcc>)
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	7013      	strb	r3, [r2, #0]
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 8004f4e:	4b1d      	ldr	r3, [pc, #116]	; (8004fc4 <ChangeHourOnScreen+0xe0>)
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	79ba      	ldrb	r2, [r7, #6]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d025      	beq.n	8004fa4 <ChangeHourOnScreen+0xc0>
	  {
		  uint8_t  CDayOfWeek = DS3231_GetDayOfWeek();
 8004f58:	f7fd fd6c 	bl	8002a34 <DS3231_GetDayOfWeek>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	717b      	strb	r3, [r7, #5]
		//  makeScheduleActivity(CHour, CMinute, CDayOfWeek); // Check if changed hour and minute are set in schedules

		  if(State == MENUTFT_PARAMETERS)
 8004f60:	4b14      	ldr	r3, [pc, #80]	; (8004fb4 <ChangeHourOnScreen+0xd0>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d11a      	bne.n	8004f9e <ChangeHourOnScreen+0xba>
		  {
			  if(CMinute < 10)
 8004f68:	79bb      	ldrb	r3, [r7, #6]
 8004f6a:	2b09      	cmp	r3, #9
 8004f6c:	d806      	bhi.n	8004f7c <ChangeHourOnScreen+0x98>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 8004f6e:	79bb      	ldrb	r3, [r7, #6]
 8004f70:	461a      	mov	r2, r3
 8004f72:	4915      	ldr	r1, [pc, #84]	; (8004fc8 <ChangeHourOnScreen+0xe4>)
 8004f74:	4811      	ldr	r0, [pc, #68]	; (8004fbc <ChangeHourOnScreen+0xd8>)
 8004f76:	f00c ffe7 	bl	8011f48 <siprintf>
 8004f7a:	e005      	b.n	8004f88 <ChangeHourOnScreen+0xa4>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 8004f7c:	79bb      	ldrb	r3, [r7, #6]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	4912      	ldr	r1, [pc, #72]	; (8004fcc <ChangeHourOnScreen+0xe8>)
 8004f82:	480e      	ldr	r0, [pc, #56]	; (8004fbc <ChangeHourOnScreen+0xd8>)
 8004f84:	f00c ffe0 	bl	8011f48 <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004f88:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004f8c:	9301      	str	r3, [sp, #4]
 8004f8e:	2301      	movs	r3, #1
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	2300      	movs	r3, #0
 8004f94:	2232      	movs	r2, #50	; 0x32
 8004f96:	2196      	movs	r1, #150	; 0x96
 8004f98:	4808      	ldr	r0, [pc, #32]	; (8004fbc <ChangeHourOnScreen+0xd8>)
 8004f9a:	f7fc ff01 	bl	8001da0 <EF_PutString>
		  }
		  OldMinutes = CMinute;
 8004f9e:	4a09      	ldr	r2, [pc, #36]	; (8004fc4 <ChangeHourOnScreen+0xe0>)
 8004fa0:	79bb      	ldrb	r3, [r7, #6]
 8004fa2:	7013      	strb	r3, [r2, #0]
	  }

}
 8004fa4:	bf00      	nop
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	080296c4 	.word	0x080296c4
 8004fb0:	2000024c 	.word	0x2000024c
 8004fb4:	20000290 	.word	0x20000290
 8004fb8:	0801607c 	.word	0x0801607c
 8004fbc:	200002c0 	.word	0x200002c0
 8004fc0:	08016084 	.word	0x08016084
 8004fc4:	2000024d 	.word	0x2000024d
 8004fc8:	08016088 	.word	0x08016088
 8004fcc:	08016090 	.word	0x08016090

08004fd0 <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8004fda:	79fb      	ldrb	r3, [r7, #7]
 8004fdc:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8004fde:	7bfb      	ldrb	r3, [r7, #15]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d104      	bne.n	8004fee <predefinedActivityCzyszczenie+0x1e>
	{
		// Read which Relay was ON before turn on activity and restore state before activity
		EEPROM_RelayStateRestore();
 8004fe4:	f7fd ff06 	bl	8002df4 <EEPROM_RelayStateRestore>
		EEPROM_LightStateRestore();
 8004fe8:	f7fd ff3c 	bl	8002e64 <EEPROM_LightStateRestore>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 8004fec:	e005      	b.n	8004ffa <predefinedActivityCzyszczenie+0x2a>
		SendComand(UCMD_RELAY_ALL_OFF);
 8004fee:	2018      	movs	r0, #24
 8004ff0:	f004 f88e 	bl	8009110 <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 8004ff4:	2019      	movs	r0, #25
 8004ff6:	f004 f88b 	bl	8009110 <SendComand>
}
 8004ffa:	bf00      	nop
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
	...

08005004 <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af02      	add	r7, sp, #8
 800500a:	4603      	mov	r3, r0
 800500c:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 800500e:	79fb      	ldrb	r3, [r7, #7]
 8005010:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8005012:	7bfb      	ldrb	r3, [r7, #15]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d12e      	bne.n	8005076 <predefinedActivityKarmienie+0x72>
	{
		EEPROM_RelayStateRestore();
 8005018:	f7fd feec 	bl	8002df4 <EEPROM_RelayStateRestore>

		EF_SetFont(&arial_11ptFontInfo);
 800501c:	481b      	ldr	r0, [pc, #108]	; (800508c <predefinedActivityKarmienie+0x88>)
 800501e:	f7fc fca5 	bl	800196c <EF_SetFont>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005022:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	230a      	movs	r3, #10
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	2328      	movs	r3, #40	; 0x28
 800502e:	2278      	movs	r2, #120	; 0x78
 8005030:	213c      	movs	r1, #60	; 0x3c
 8005032:	2064      	movs	r0, #100	; 0x64
 8005034:	f7fc fc49 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8005038:	4915      	ldr	r1, [pc, #84]	; (8005090 <predefinedActivityKarmienie+0x8c>)
 800503a:	4816      	ldr	r0, [pc, #88]	; (8005094 <predefinedActivityKarmienie+0x90>)
 800503c:	f00c ff84 	bl	8011f48 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005040:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005044:	9301      	str	r3, [sp, #4]
 8005046:	2300      	movs	r3, #0
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	2300      	movs	r3, #0
 800504c:	223e      	movs	r2, #62	; 0x3e
 800504e:	2177      	movs	r1, #119	; 0x77
 8005050:	4810      	ldr	r0, [pc, #64]	; (8005094 <predefinedActivityKarmienie+0x90>)
 8005052:	f7fc fea5 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8005056:	4910      	ldr	r1, [pc, #64]	; (8005098 <predefinedActivityKarmienie+0x94>)
 8005058:	480e      	ldr	r0, [pc, #56]	; (8005094 <predefinedActivityKarmienie+0x90>)
 800505a:	f00c ff75 	bl	8011f48 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800505e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005062:	9301      	str	r3, [sp, #4]
 8005064:	2300      	movs	r3, #0
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	2300      	movs	r3, #0
 800506a:	2250      	movs	r2, #80	; 0x50
 800506c:	2193      	movs	r1, #147	; 0x93
 800506e:	4809      	ldr	r0, [pc, #36]	; (8005094 <predefinedActivityKarmienie+0x90>)
 8005070:	f7fc fe96 	bl	8001da0 <EF_PutString>
	{
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
	}

}
 8005074:	e005      	b.n	8005082 <predefinedActivityKarmienie+0x7e>
		SendComand(UCMD_RELAY_ALL_OFF);
 8005076:	2018      	movs	r0, #24
 8005078:	f004 f84a 	bl	8009110 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 800507c:	4807      	ldr	r0, [pc, #28]	; (800509c <predefinedActivityKarmienie+0x98>)
 800507e:	f00a fbff 	bl	800f880 <HAL_TIM_Base_Start_IT>
}
 8005082:	bf00      	nop
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	0802774c 	.word	0x0802774c
 8005090:	08015e74 	.word	0x08015e74
 8005094:	200002c0 	.word	0x200002c0
 8005098:	08015e84 	.word	0x08015e84
 800509c:	20000990 	.word	0x20000990

080050a0 <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button
//
void drawCurrentStateOfSwitches()
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 80050a6:	487d      	ldr	r0, [pc, #500]	; (800529c <drawCurrentStateOfSwitches+0x1fc>)
 80050a8:	f7fc fc60 	bl	800196c <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 80050ac:	4b7c      	ldr	r3, [pc, #496]	; (80052a0 <drawCurrentStateOfSwitches+0x200>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01c      	beq.n	80050ee <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80050b4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80050b8:	9301      	str	r3, [sp, #4]
 80050ba:	2305      	movs	r3, #5
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	2315      	movs	r3, #21
 80050c0:	2221      	movs	r2, #33	; 0x21
 80050c2:	2141      	movs	r1, #65	; 0x41
 80050c4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80050c8:	f7fc fbff 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80050cc:	4975      	ldr	r1, [pc, #468]	; (80052a4 <drawCurrentStateOfSwitches+0x204>)
 80050ce:	4876      	ldr	r0, [pc, #472]	; (80052a8 <drawCurrentStateOfSwitches+0x208>)
 80050d0:	f00c ff3a 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80050d4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80050d8:	9301      	str	r3, [sp, #4]
 80050da:	2300      	movs	r3, #0
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	2300      	movs	r3, #0
 80050e0:	2243      	movs	r2, #67	; 0x43
 80050e2:	f240 1111 	movw	r1, #273	; 0x111
 80050e6:	4870      	ldr	r0, [pc, #448]	; (80052a8 <drawCurrentStateOfSwitches+0x208>)
 80050e8:	f7fc fe5a 	bl	8001da0 <EF_PutString>
 80050ec:	e01b      	b.n	8005126 <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80050ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80050f2:	9301      	str	r3, [sp, #4]
 80050f4:	2305      	movs	r3, #5
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	2315      	movs	r3, #21
 80050fa:	2221      	movs	r2, #33	; 0x21
 80050fc:	2141      	movs	r1, #65	; 0x41
 80050fe:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005102:	f7fc fbe2 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005106:	4969      	ldr	r1, [pc, #420]	; (80052ac <drawCurrentStateOfSwitches+0x20c>)
 8005108:	4867      	ldr	r0, [pc, #412]	; (80052a8 <drawCurrentStateOfSwitches+0x208>)
 800510a:	f00c ff1d 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800510e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005112:	9301      	str	r3, [sp, #4]
 8005114:	2300      	movs	r3, #0
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	2300      	movs	r3, #0
 800511a:	2243      	movs	r2, #67	; 0x43
 800511c:	f240 1111 	movw	r1, #273	; 0x111
 8005120:	4861      	ldr	r0, [pc, #388]	; (80052a8 <drawCurrentStateOfSwitches+0x208>)
 8005122:	f7fc fe3d 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 8005126:	4b5e      	ldr	r3, [pc, #376]	; (80052a0 <drawCurrentStateOfSwitches+0x200>)
 8005128:	785b      	ldrb	r3, [r3, #1]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d01c      	beq.n	8005168 <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800512e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005132:	9301      	str	r3, [sp, #4]
 8005134:	2305      	movs	r3, #5
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	2315      	movs	r3, #21
 800513a:	2221      	movs	r2, #33	; 0x21
 800513c:	215f      	movs	r1, #95	; 0x5f
 800513e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005142:	f7fc fbc2 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005146:	4957      	ldr	r1, [pc, #348]	; (80052a4 <drawCurrentStateOfSwitches+0x204>)
 8005148:	4857      	ldr	r0, [pc, #348]	; (80052a8 <drawCurrentStateOfSwitches+0x208>)
 800514a:	f00c fefd 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 800514e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005152:	9301      	str	r3, [sp, #4]
 8005154:	2300      	movs	r3, #0
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	2300      	movs	r3, #0
 800515a:	2261      	movs	r2, #97	; 0x61
 800515c:	f240 1111 	movw	r1, #273	; 0x111
 8005160:	4851      	ldr	r0, [pc, #324]	; (80052a8 <drawCurrentStateOfSwitches+0x208>)
 8005162:	f7fc fe1d 	bl	8001da0 <EF_PutString>
 8005166:	e01b      	b.n	80051a0 <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005168:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800516c:	9301      	str	r3, [sp, #4]
 800516e:	2305      	movs	r3, #5
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	2315      	movs	r3, #21
 8005174:	2221      	movs	r2, #33	; 0x21
 8005176:	215f      	movs	r1, #95	; 0x5f
 8005178:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800517c:	f7fc fba5 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005180:	494a      	ldr	r1, [pc, #296]	; (80052ac <drawCurrentStateOfSwitches+0x20c>)
 8005182:	4849      	ldr	r0, [pc, #292]	; (80052a8 <drawCurrentStateOfSwitches+0x208>)
 8005184:	f00c fee0 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005188:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800518c:	9301      	str	r3, [sp, #4]
 800518e:	2300      	movs	r3, #0
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	2300      	movs	r3, #0
 8005194:	2261      	movs	r2, #97	; 0x61
 8005196:	f240 1111 	movw	r1, #273	; 0x111
 800519a:	4843      	ldr	r0, [pc, #268]	; (80052a8 <drawCurrentStateOfSwitches+0x208>)
 800519c:	f7fc fe00 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 80051a0:	4b3f      	ldr	r3, [pc, #252]	; (80052a0 <drawCurrentStateOfSwitches+0x200>)
 80051a2:	789b      	ldrb	r3, [r3, #2]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01c      	beq.n	80051e2 <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80051a8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	2305      	movs	r3, #5
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	2315      	movs	r3, #21
 80051b4:	2221      	movs	r2, #33	; 0x21
 80051b6:	217d      	movs	r1, #125	; 0x7d
 80051b8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80051bc:	f7fc fb85 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80051c0:	4938      	ldr	r1, [pc, #224]	; (80052a4 <drawCurrentStateOfSwitches+0x204>)
 80051c2:	4839      	ldr	r0, [pc, #228]	; (80052a8 <drawCurrentStateOfSwitches+0x208>)
 80051c4:	f00c fec0 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80051c8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80051cc:	9301      	str	r3, [sp, #4]
 80051ce:	2300      	movs	r3, #0
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	2300      	movs	r3, #0
 80051d4:	227f      	movs	r2, #127	; 0x7f
 80051d6:	f240 1111 	movw	r1, #273	; 0x111
 80051da:	4833      	ldr	r0, [pc, #204]	; (80052a8 <drawCurrentStateOfSwitches+0x208>)
 80051dc:	f7fc fde0 	bl	8001da0 <EF_PutString>
 80051e0:	e01b      	b.n	800521a <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80051e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051e6:	9301      	str	r3, [sp, #4]
 80051e8:	2305      	movs	r3, #5
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	2315      	movs	r3, #21
 80051ee:	2221      	movs	r2, #33	; 0x21
 80051f0:	217d      	movs	r1, #125	; 0x7d
 80051f2:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80051f6:	f7fc fb68 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80051fa:	492c      	ldr	r1, [pc, #176]	; (80052ac <drawCurrentStateOfSwitches+0x20c>)
 80051fc:	482a      	ldr	r0, [pc, #168]	; (80052a8 <drawCurrentStateOfSwitches+0x208>)
 80051fe:	f00c fea3 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005202:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005206:	9301      	str	r3, [sp, #4]
 8005208:	2300      	movs	r3, #0
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	2300      	movs	r3, #0
 800520e:	227f      	movs	r2, #127	; 0x7f
 8005210:	f240 1111 	movw	r1, #273	; 0x111
 8005214:	4824      	ldr	r0, [pc, #144]	; (80052a8 <drawCurrentStateOfSwitches+0x208>)
 8005216:	f7fc fdc3 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 800521a:	4b21      	ldr	r3, [pc, #132]	; (80052a0 <drawCurrentStateOfSwitches+0x200>)
 800521c:	78db      	ldrb	r3, [r3, #3]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d01c      	beq.n	800525c <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005222:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	2305      	movs	r3, #5
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	2315      	movs	r3, #21
 800522e:	2221      	movs	r2, #33	; 0x21
 8005230:	219b      	movs	r1, #155	; 0x9b
 8005232:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005236:	f7fc fb48 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800523a:	491a      	ldr	r1, [pc, #104]	; (80052a4 <drawCurrentStateOfSwitches+0x204>)
 800523c:	481a      	ldr	r0, [pc, #104]	; (80052a8 <drawCurrentStateOfSwitches+0x208>)
 800523e:	f00c fe83 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005242:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005246:	9301      	str	r3, [sp, #4]
 8005248:	2300      	movs	r3, #0
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	2300      	movs	r3, #0
 800524e:	229d      	movs	r2, #157	; 0x9d
 8005250:	f240 1111 	movw	r1, #273	; 0x111
 8005254:	4814      	ldr	r0, [pc, #80]	; (80052a8 <drawCurrentStateOfSwitches+0x208>)
 8005256:	f7fc fda3 	bl	8001da0 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 800525a:	e01b      	b.n	8005294 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800525c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005260:	9301      	str	r3, [sp, #4]
 8005262:	2305      	movs	r3, #5
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	2315      	movs	r3, #21
 8005268:	2221      	movs	r2, #33	; 0x21
 800526a:	219b      	movs	r1, #155	; 0x9b
 800526c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005270:	f7fc fb2b 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005274:	490d      	ldr	r1, [pc, #52]	; (80052ac <drawCurrentStateOfSwitches+0x20c>)
 8005276:	480c      	ldr	r0, [pc, #48]	; (80052a8 <drawCurrentStateOfSwitches+0x208>)
 8005278:	f00c fe66 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800527c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005280:	9301      	str	r3, [sp, #4]
 8005282:	2300      	movs	r3, #0
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	2300      	movs	r3, #0
 8005288:	229d      	movs	r2, #157	; 0x9d
 800528a:	f240 1111 	movw	r1, #273	; 0x111
 800528e:	4806      	ldr	r0, [pc, #24]	; (80052a8 <drawCurrentStateOfSwitches+0x208>)
 8005290:	f7fc fd86 	bl	8001da0 <EF_PutString>
}
 8005294:	bf00      	nop
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	0802774c 	.word	0x0802774c
 80052a0:	200002a8 	.word	0x200002a8
 80052a4:	08015e80 	.word	0x08015e80
 80052a8:	200002c0 	.word	0x200002c0
 80052ac:	08015e84 	.word	0x08015e84

080052b0 <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 80052b6:	4875      	ldr	r0, [pc, #468]	; (800548c <drawCurrentStateOfLights+0x1dc>)
 80052b8:	f7fc fb58 	bl	800196c <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 80052bc:	4b74      	ldr	r3, [pc, #464]	; (8005490 <drawCurrentStateOfLights+0x1e0>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01a      	beq.n	80052fa <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80052c4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	2305      	movs	r3, #5
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	2315      	movs	r3, #21
 80052d0:	2221      	movs	r2, #33	; 0x21
 80052d2:	2141      	movs	r1, #65	; 0x41
 80052d4:	20c8      	movs	r0, #200	; 0xc8
 80052d6:	f7fc faf8 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80052da:	496e      	ldr	r1, [pc, #440]	; (8005494 <drawCurrentStateOfLights+0x1e4>)
 80052dc:	486e      	ldr	r0, [pc, #440]	; (8005498 <drawCurrentStateOfLights+0x1e8>)
 80052de:	f00c fe33 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80052e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052e6:	9301      	str	r3, [sp, #4]
 80052e8:	2300      	movs	r3, #0
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	2300      	movs	r3, #0
 80052ee:	2243      	movs	r2, #67	; 0x43
 80052f0:	21cb      	movs	r1, #203	; 0xcb
 80052f2:	4869      	ldr	r0, [pc, #420]	; (8005498 <drawCurrentStateOfLights+0x1e8>)
 80052f4:	f7fc fd54 	bl	8001da0 <EF_PutString>
 80052f8:	e019      	b.n	800532e <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80052fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052fe:	9301      	str	r3, [sp, #4]
 8005300:	2305      	movs	r3, #5
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	2315      	movs	r3, #21
 8005306:	2221      	movs	r2, #33	; 0x21
 8005308:	2141      	movs	r1, #65	; 0x41
 800530a:	20c8      	movs	r0, #200	; 0xc8
 800530c:	f7fc fadd 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005310:	4962      	ldr	r1, [pc, #392]	; (800549c <drawCurrentStateOfLights+0x1ec>)
 8005312:	4861      	ldr	r0, [pc, #388]	; (8005498 <drawCurrentStateOfLights+0x1e8>)
 8005314:	f00c fe18 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005318:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800531c:	9301      	str	r3, [sp, #4]
 800531e:	2300      	movs	r3, #0
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	2300      	movs	r3, #0
 8005324:	2243      	movs	r2, #67	; 0x43
 8005326:	21cb      	movs	r1, #203	; 0xcb
 8005328:	485b      	ldr	r0, [pc, #364]	; (8005498 <drawCurrentStateOfLights+0x1e8>)
 800532a:	f7fc fd39 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 800532e:	4b58      	ldr	r3, [pc, #352]	; (8005490 <drawCurrentStateOfLights+0x1e0>)
 8005330:	785b      	ldrb	r3, [r3, #1]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d01a      	beq.n	800536c <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005336:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800533a:	9301      	str	r3, [sp, #4]
 800533c:	2305      	movs	r3, #5
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	2315      	movs	r3, #21
 8005342:	2221      	movs	r2, #33	; 0x21
 8005344:	215f      	movs	r1, #95	; 0x5f
 8005346:	20c8      	movs	r0, #200	; 0xc8
 8005348:	f7fc fabf 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800534c:	4951      	ldr	r1, [pc, #324]	; (8005494 <drawCurrentStateOfLights+0x1e4>)
 800534e:	4852      	ldr	r0, [pc, #328]	; (8005498 <drawCurrentStateOfLights+0x1e8>)
 8005350:	f00c fdfa 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005354:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	2300      	movs	r3, #0
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	2300      	movs	r3, #0
 8005360:	2261      	movs	r2, #97	; 0x61
 8005362:	21cb      	movs	r1, #203	; 0xcb
 8005364:	484c      	ldr	r0, [pc, #304]	; (8005498 <drawCurrentStateOfLights+0x1e8>)
 8005366:	f7fc fd1b 	bl	8001da0 <EF_PutString>
 800536a:	e019      	b.n	80053a0 <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800536c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005370:	9301      	str	r3, [sp, #4]
 8005372:	2305      	movs	r3, #5
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	2315      	movs	r3, #21
 8005378:	2221      	movs	r2, #33	; 0x21
 800537a:	215f      	movs	r1, #95	; 0x5f
 800537c:	20c8      	movs	r0, #200	; 0xc8
 800537e:	f7fc faa4 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005382:	4946      	ldr	r1, [pc, #280]	; (800549c <drawCurrentStateOfLights+0x1ec>)
 8005384:	4844      	ldr	r0, [pc, #272]	; (8005498 <drawCurrentStateOfLights+0x1e8>)
 8005386:	f00c fddf 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800538a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800538e:	9301      	str	r3, [sp, #4]
 8005390:	2300      	movs	r3, #0
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	2300      	movs	r3, #0
 8005396:	2261      	movs	r2, #97	; 0x61
 8005398:	21cb      	movs	r1, #203	; 0xcb
 800539a:	483f      	ldr	r0, [pc, #252]	; (8005498 <drawCurrentStateOfLights+0x1e8>)
 800539c:	f7fc fd00 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 80053a0:	4b3b      	ldr	r3, [pc, #236]	; (8005490 <drawCurrentStateOfLights+0x1e0>)
 80053a2:	789b      	ldrb	r3, [r3, #2]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01a      	beq.n	80053de <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80053a8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80053ac:	9301      	str	r3, [sp, #4]
 80053ae:	2305      	movs	r3, #5
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	2315      	movs	r3, #21
 80053b4:	2221      	movs	r2, #33	; 0x21
 80053b6:	217d      	movs	r1, #125	; 0x7d
 80053b8:	20c8      	movs	r0, #200	; 0xc8
 80053ba:	f7fc fa86 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80053be:	4935      	ldr	r1, [pc, #212]	; (8005494 <drawCurrentStateOfLights+0x1e4>)
 80053c0:	4835      	ldr	r0, [pc, #212]	; (8005498 <drawCurrentStateOfLights+0x1e8>)
 80053c2:	f00c fdc1 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80053c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80053ca:	9301      	str	r3, [sp, #4]
 80053cc:	2300      	movs	r3, #0
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	2300      	movs	r3, #0
 80053d2:	227f      	movs	r2, #127	; 0x7f
 80053d4:	21cb      	movs	r1, #203	; 0xcb
 80053d6:	4830      	ldr	r0, [pc, #192]	; (8005498 <drawCurrentStateOfLights+0x1e8>)
 80053d8:	f7fc fce2 	bl	8001da0 <EF_PutString>
 80053dc:	e019      	b.n	8005412 <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80053de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80053e2:	9301      	str	r3, [sp, #4]
 80053e4:	2305      	movs	r3, #5
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	2315      	movs	r3, #21
 80053ea:	2221      	movs	r2, #33	; 0x21
 80053ec:	217d      	movs	r1, #125	; 0x7d
 80053ee:	20c8      	movs	r0, #200	; 0xc8
 80053f0:	f7fc fa6b 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80053f4:	4929      	ldr	r1, [pc, #164]	; (800549c <drawCurrentStateOfLights+0x1ec>)
 80053f6:	4828      	ldr	r0, [pc, #160]	; (8005498 <drawCurrentStateOfLights+0x1e8>)
 80053f8:	f00c fda6 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80053fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005400:	9301      	str	r3, [sp, #4]
 8005402:	2300      	movs	r3, #0
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	2300      	movs	r3, #0
 8005408:	227f      	movs	r2, #127	; 0x7f
 800540a:	21cb      	movs	r1, #203	; 0xcb
 800540c:	4822      	ldr	r0, [pc, #136]	; (8005498 <drawCurrentStateOfLights+0x1e8>)
 800540e:	f7fc fcc7 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 8005412:	4b1f      	ldr	r3, [pc, #124]	; (8005490 <drawCurrentStateOfLights+0x1e0>)
 8005414:	78db      	ldrb	r3, [r3, #3]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d01a      	beq.n	8005450 <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800541a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	2305      	movs	r3, #5
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	2315      	movs	r3, #21
 8005426:	2221      	movs	r2, #33	; 0x21
 8005428:	219b      	movs	r1, #155	; 0x9b
 800542a:	20c8      	movs	r0, #200	; 0xc8
 800542c:	f7fc fa4d 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005430:	4918      	ldr	r1, [pc, #96]	; (8005494 <drawCurrentStateOfLights+0x1e4>)
 8005432:	4819      	ldr	r0, [pc, #100]	; (8005498 <drawCurrentStateOfLights+0x1e8>)
 8005434:	f00c fd88 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005438:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800543c:	9301      	str	r3, [sp, #4]
 800543e:	2300      	movs	r3, #0
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	2300      	movs	r3, #0
 8005444:	229d      	movs	r2, #157	; 0x9d
 8005446:	21cb      	movs	r1, #203	; 0xcb
 8005448:	4813      	ldr	r0, [pc, #76]	; (8005498 <drawCurrentStateOfLights+0x1e8>)
 800544a:	f7fc fca9 	bl	8001da0 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 800544e:	e019      	b.n	8005484 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005450:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005454:	9301      	str	r3, [sp, #4]
 8005456:	2305      	movs	r3, #5
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	2315      	movs	r3, #21
 800545c:	2221      	movs	r2, #33	; 0x21
 800545e:	219b      	movs	r1, #155	; 0x9b
 8005460:	20c8      	movs	r0, #200	; 0xc8
 8005462:	f7fc fa32 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005466:	490d      	ldr	r1, [pc, #52]	; (800549c <drawCurrentStateOfLights+0x1ec>)
 8005468:	480b      	ldr	r0, [pc, #44]	; (8005498 <drawCurrentStateOfLights+0x1e8>)
 800546a:	f00c fd6d 	bl	8011f48 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800546e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005472:	9301      	str	r3, [sp, #4]
 8005474:	2300      	movs	r3, #0
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	2300      	movs	r3, #0
 800547a:	229d      	movs	r2, #157	; 0x9d
 800547c:	21cb      	movs	r1, #203	; 0xcb
 800547e:	4806      	ldr	r0, [pc, #24]	; (8005498 <drawCurrentStateOfLights+0x1e8>)
 8005480:	f7fc fc8e 	bl	8001da0 <EF_PutString>
}
 8005484:	bf00      	nop
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	0802774c 	.word	0x0802774c
 8005490:	200002ac 	.word	0x200002ac
 8005494:	08015e80 	.word	0x08015e80
 8005498:	200002c0 	.word	0x200002c0
 800549c:	08015e84 	.word	0x08015e84

080054a0 <restoreTFTScheduleDayOfWeek>:


//
// Restore on TFT screen rectangle indicate each day of week, from EEPROM
void restoreTFTScheduleDayOfWeek(uint8_t NrOfSchedule)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	4603      	mov	r3, r0
 80054a8:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayTab[7] = {0};
 80054aa:	2300      	movs	r3, #0
 80054ac:	60bb      	str	r3, [r7, #8]
 80054ae:	f107 030c 	add.w	r3, r7, #12
 80054b2:	2100      	movs	r1, #0
 80054b4:	460a      	mov	r2, r1
 80054b6:	801a      	strh	r2, [r3, #0]
 80054b8:	460a      	mov	r2, r1
 80054ba:	709a      	strb	r2, [r3, #2]
	EEPROM_ScheduleDayInWeekRead(NrOfSchedule, TempDayTab);
 80054bc:	f107 0208 	add.w	r2, r7, #8
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	4611      	mov	r1, r2
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fd fd05 	bl	8002ed4 <EEPROM_ScheduleDayInWeekRead>

	if(TempDayTab[0]) changeTFTScheduleDayOfWeek(1, 1);
 80054ca:	7a3b      	ldrb	r3, [r7, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d004      	beq.n	80054da <restoreTFTScheduleDayOfWeek+0x3a>
 80054d0:	2101      	movs	r1, #1
 80054d2:	2001      	movs	r0, #1
 80054d4:	f001 fae8 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
 80054d8:	e003      	b.n	80054e2 <restoreTFTScheduleDayOfWeek+0x42>
	else changeTFTScheduleDayOfWeek(1, 0);
 80054da:	2100      	movs	r1, #0
 80054dc:	2001      	movs	r0, #1
 80054de:	f001 fae3 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[1]) changeTFTScheduleDayOfWeek(2, 1);
 80054e2:	7a7b      	ldrb	r3, [r7, #9]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d004      	beq.n	80054f2 <restoreTFTScheduleDayOfWeek+0x52>
 80054e8:	2101      	movs	r1, #1
 80054ea:	2002      	movs	r0, #2
 80054ec:	f001 fadc 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
 80054f0:	e003      	b.n	80054fa <restoreTFTScheduleDayOfWeek+0x5a>
	else changeTFTScheduleDayOfWeek(2, 0);
 80054f2:	2100      	movs	r1, #0
 80054f4:	2002      	movs	r0, #2
 80054f6:	f001 fad7 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[2]) changeTFTScheduleDayOfWeek(3, 1);
 80054fa:	7abb      	ldrb	r3, [r7, #10]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d004      	beq.n	800550a <restoreTFTScheduleDayOfWeek+0x6a>
 8005500:	2101      	movs	r1, #1
 8005502:	2003      	movs	r0, #3
 8005504:	f001 fad0 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
 8005508:	e003      	b.n	8005512 <restoreTFTScheduleDayOfWeek+0x72>
	else changeTFTScheduleDayOfWeek(3, 0);
 800550a:	2100      	movs	r1, #0
 800550c:	2003      	movs	r0, #3
 800550e:	f001 facb 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[3]) changeTFTScheduleDayOfWeek(4, 1);
 8005512:	7afb      	ldrb	r3, [r7, #11]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d004      	beq.n	8005522 <restoreTFTScheduleDayOfWeek+0x82>
 8005518:	2101      	movs	r1, #1
 800551a:	2004      	movs	r0, #4
 800551c:	f001 fac4 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
 8005520:	e003      	b.n	800552a <restoreTFTScheduleDayOfWeek+0x8a>
	else changeTFTScheduleDayOfWeek(4, 0);
 8005522:	2100      	movs	r1, #0
 8005524:	2004      	movs	r0, #4
 8005526:	f001 fabf 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[4]) changeTFTScheduleDayOfWeek(5, 1);
 800552a:	7b3b      	ldrb	r3, [r7, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d004      	beq.n	800553a <restoreTFTScheduleDayOfWeek+0x9a>
 8005530:	2101      	movs	r1, #1
 8005532:	2005      	movs	r0, #5
 8005534:	f001 fab8 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
 8005538:	e003      	b.n	8005542 <restoreTFTScheduleDayOfWeek+0xa2>
	else changeTFTScheduleDayOfWeek(5, 0);
 800553a:	2100      	movs	r1, #0
 800553c:	2005      	movs	r0, #5
 800553e:	f001 fab3 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[5]) changeTFTScheduleDayOfWeek(6, 1);
 8005542:	7b7b      	ldrb	r3, [r7, #13]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d004      	beq.n	8005552 <restoreTFTScheduleDayOfWeek+0xb2>
 8005548:	2101      	movs	r1, #1
 800554a:	2006      	movs	r0, #6
 800554c:	f001 faac 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
 8005550:	e003      	b.n	800555a <restoreTFTScheduleDayOfWeek+0xba>
	else changeTFTScheduleDayOfWeek(6, 0);
 8005552:	2100      	movs	r1, #0
 8005554:	2006      	movs	r0, #6
 8005556:	f001 faa7 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[6]) changeTFTScheduleDayOfWeek(7, 1);
 800555a:	7bbb      	ldrb	r3, [r7, #14]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d004      	beq.n	800556a <restoreTFTScheduleDayOfWeek+0xca>
 8005560:	2101      	movs	r1, #1
 8005562:	2007      	movs	r0, #7
 8005564:	f001 faa0 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
	else changeTFTScheduleDayOfWeek(7, 0);

}
 8005568:	e003      	b.n	8005572 <restoreTFTScheduleDayOfWeek+0xd2>
	else changeTFTScheduleDayOfWeek(7, 0);
 800556a:	2100      	movs	r1, #0
 800556c:	2007      	movs	r0, #7
 800556e:	f001 fa9b 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
}
 8005572:	bf00      	nop
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <restoreTFTScheduleRelayLights>:

//
// Restore on TFT screen rectangle indicate each Relay and Light, from EEPROM
void restoreTFTScheduleRelayLights(uint8_t NrOfSchedule)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b086      	sub	sp, #24
 800557e:	af00      	add	r7, sp, #0
 8005580:	4603      	mov	r3, r0
 8005582:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelayLIghtsTab[9] = {0};
 8005584:	2300      	movs	r3, #0
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	f107 0310 	add.w	r3, r7, #16
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	711a      	strb	r2, [r3, #4]
	EEPROM_ScheduleRelayAndSwitchTabRead(NrOfSchedule, TempRelayLIghtsTab);
 8005592:	f107 020c 	add.w	r2, r7, #12
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	4611      	mov	r1, r2
 800559a:	4618      	mov	r0, r3
 800559c:	f7fd fd16 	bl	8002fcc <EEPROM_ScheduleRelayAndSwitchTabRead>

	if(TempRelayLIghtsTab[0]) changeTFTScheduleRelayLights (1, 1);
 80055a0:	7b3b      	ldrb	r3, [r7, #12]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d004      	beq.n	80055b0 <restoreTFTScheduleRelayLights+0x36>
 80055a6:	2101      	movs	r1, #1
 80055a8:	2001      	movs	r0, #1
 80055aa:	f001 fb5a 	bl	8006c62 <changeTFTScheduleRelayLights>
 80055ae:	e003      	b.n	80055b8 <restoreTFTScheduleRelayLights+0x3e>
	else changeTFTScheduleRelayLights(1, 0);
 80055b0:	2100      	movs	r1, #0
 80055b2:	2001      	movs	r0, #1
 80055b4:	f001 fb55 	bl	8006c62 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[1]) changeTFTScheduleRelayLights(2, 1);
 80055b8:	7b7b      	ldrb	r3, [r7, #13]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d004      	beq.n	80055c8 <restoreTFTScheduleRelayLights+0x4e>
 80055be:	2101      	movs	r1, #1
 80055c0:	2002      	movs	r0, #2
 80055c2:	f001 fb4e 	bl	8006c62 <changeTFTScheduleRelayLights>
 80055c6:	e003      	b.n	80055d0 <restoreTFTScheduleRelayLights+0x56>
	else changeTFTScheduleRelayLights(2, 0);
 80055c8:	2100      	movs	r1, #0
 80055ca:	2002      	movs	r0, #2
 80055cc:	f001 fb49 	bl	8006c62 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[2]) changeTFTScheduleRelayLights(3, 1);
 80055d0:	7bbb      	ldrb	r3, [r7, #14]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d004      	beq.n	80055e0 <restoreTFTScheduleRelayLights+0x66>
 80055d6:	2101      	movs	r1, #1
 80055d8:	2003      	movs	r0, #3
 80055da:	f001 fb42 	bl	8006c62 <changeTFTScheduleRelayLights>
 80055de:	e003      	b.n	80055e8 <restoreTFTScheduleRelayLights+0x6e>
	else changeTFTScheduleRelayLights(3, 0);
 80055e0:	2100      	movs	r1, #0
 80055e2:	2003      	movs	r0, #3
 80055e4:	f001 fb3d 	bl	8006c62 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[3]) changeTFTScheduleRelayLights(4, 1);
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d004      	beq.n	80055f8 <restoreTFTScheduleRelayLights+0x7e>
 80055ee:	2101      	movs	r1, #1
 80055f0:	2004      	movs	r0, #4
 80055f2:	f001 fb36 	bl	8006c62 <changeTFTScheduleRelayLights>
 80055f6:	e003      	b.n	8005600 <restoreTFTScheduleRelayLights+0x86>
	else changeTFTScheduleRelayLights(4, 0);
 80055f8:	2100      	movs	r1, #0
 80055fa:	2004      	movs	r0, #4
 80055fc:	f001 fb31 	bl	8006c62 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[4]) changeTFTScheduleRelayLights(5, 1);
 8005600:	7c3b      	ldrb	r3, [r7, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d004      	beq.n	8005610 <restoreTFTScheduleRelayLights+0x96>
 8005606:	2101      	movs	r1, #1
 8005608:	2005      	movs	r0, #5
 800560a:	f001 fb2a 	bl	8006c62 <changeTFTScheduleRelayLights>
 800560e:	e003      	b.n	8005618 <restoreTFTScheduleRelayLights+0x9e>
	else changeTFTScheduleRelayLights(5, 0);
 8005610:	2100      	movs	r1, #0
 8005612:	2005      	movs	r0, #5
 8005614:	f001 fb25 	bl	8006c62 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[5]) changeTFTScheduleRelayLights(6, 1);
 8005618:	7c7b      	ldrb	r3, [r7, #17]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d004      	beq.n	8005628 <restoreTFTScheduleRelayLights+0xae>
 800561e:	2101      	movs	r1, #1
 8005620:	2006      	movs	r0, #6
 8005622:	f001 fb1e 	bl	8006c62 <changeTFTScheduleRelayLights>
 8005626:	e003      	b.n	8005630 <restoreTFTScheduleRelayLights+0xb6>
	else changeTFTScheduleRelayLights(6, 0);
 8005628:	2100      	movs	r1, #0
 800562a:	2006      	movs	r0, #6
 800562c:	f001 fb19 	bl	8006c62 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[6]) changeTFTScheduleRelayLights(7, 1);
 8005630:	7cbb      	ldrb	r3, [r7, #18]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d004      	beq.n	8005640 <restoreTFTScheduleRelayLights+0xc6>
 8005636:	2101      	movs	r1, #1
 8005638:	2007      	movs	r0, #7
 800563a:	f001 fb12 	bl	8006c62 <changeTFTScheduleRelayLights>
 800563e:	e003      	b.n	8005648 <restoreTFTScheduleRelayLights+0xce>
	else changeTFTScheduleRelayLights(7, 0);
 8005640:	2100      	movs	r1, #0
 8005642:	2007      	movs	r0, #7
 8005644:	f001 fb0d 	bl	8006c62 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[7]) changeTFTScheduleRelayLights(8, 1);
 8005648:	7cfb      	ldrb	r3, [r7, #19]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d004      	beq.n	8005658 <restoreTFTScheduleRelayLights+0xde>
 800564e:	2101      	movs	r1, #1
 8005650:	2008      	movs	r0, #8
 8005652:	f001 fb06 	bl	8006c62 <changeTFTScheduleRelayLights>
 8005656:	e003      	b.n	8005660 <restoreTFTScheduleRelayLights+0xe6>
	else changeTFTScheduleRelayLights(8, 0);
 8005658:	2100      	movs	r1, #0
 800565a:	2008      	movs	r0, #8
 800565c:	f001 fb01 	bl	8006c62 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[8]) changeTFTScheduleRelayLights(9, 1);
 8005660:	7d3b      	ldrb	r3, [r7, #20]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d004      	beq.n	8005670 <restoreTFTScheduleRelayLights+0xf6>
 8005666:	2101      	movs	r1, #1
 8005668:	2009      	movs	r0, #9
 800566a:	f001 fafa 	bl	8006c62 <changeTFTScheduleRelayLights>
	else changeTFTScheduleRelayLights(9, 0);

}
 800566e:	e003      	b.n	8005678 <restoreTFTScheduleRelayLights+0xfe>
	else changeTFTScheduleRelayLights(9, 0);
 8005670:	2100      	movs	r1, #0
 8005672:	2009      	movs	r0, #9
 8005674:	f001 faf5 	bl	8006c62 <changeTFTScheduleRelayLights>
}
 8005678:	bf00      	nop
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <initWait>:
}

//
// Function to wait but only if it is necessary
void initWait(uint32_t TimeInMs)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - LastTime <= TimeInMs)
 8005688:	bf00      	nop
 800568a:	f004 ff81 	bl	800a590 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <initWait+0x28>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	429a      	cmp	r2, r3
 800569a:	d2f6      	bcs.n	800568a <initWait+0xa>
    {
    }
}
 800569c:	bf00      	nop
 800569e:	bf00      	nop
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	20000250 	.word	0x20000250

080056ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08a      	sub	sp, #40	; 0x28
 80056b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056b2:	f107 0314 	add.w	r3, r7, #20
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	605a      	str	r2, [r3, #4]
 80056bc:	609a      	str	r2, [r3, #8]
 80056be:	60da      	str	r2, [r3, #12]
 80056c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80056c2:	2300      	movs	r3, #0
 80056c4:	613b      	str	r3, [r7, #16]
 80056c6:	4b5f      	ldr	r3, [pc, #380]	; (8005844 <MX_GPIO_Init+0x198>)
 80056c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ca:	4a5e      	ldr	r2, [pc, #376]	; (8005844 <MX_GPIO_Init+0x198>)
 80056cc:	f043 0304 	orr.w	r3, r3, #4
 80056d0:	6313      	str	r3, [r2, #48]	; 0x30
 80056d2:	4b5c      	ldr	r3, [pc, #368]	; (8005844 <MX_GPIO_Init+0x198>)
 80056d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	613b      	str	r3, [r7, #16]
 80056dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80056de:	2300      	movs	r3, #0
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	4b58      	ldr	r3, [pc, #352]	; (8005844 <MX_GPIO_Init+0x198>)
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	4a57      	ldr	r2, [pc, #348]	; (8005844 <MX_GPIO_Init+0x198>)
 80056e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ec:	6313      	str	r3, [r2, #48]	; 0x30
 80056ee:	4b55      	ldr	r3, [pc, #340]	; (8005844 <MX_GPIO_Init+0x198>)
 80056f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80056fa:	2300      	movs	r3, #0
 80056fc:	60bb      	str	r3, [r7, #8]
 80056fe:	4b51      	ldr	r3, [pc, #324]	; (8005844 <MX_GPIO_Init+0x198>)
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	4a50      	ldr	r2, [pc, #320]	; (8005844 <MX_GPIO_Init+0x198>)
 8005704:	f043 0301 	orr.w	r3, r3, #1
 8005708:	6313      	str	r3, [r2, #48]	; 0x30
 800570a:	4b4e      	ldr	r3, [pc, #312]	; (8005844 <MX_GPIO_Init+0x198>)
 800570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	60bb      	str	r3, [r7, #8]
 8005714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005716:	2300      	movs	r3, #0
 8005718:	607b      	str	r3, [r7, #4]
 800571a:	4b4a      	ldr	r3, [pc, #296]	; (8005844 <MX_GPIO_Init+0x198>)
 800571c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571e:	4a49      	ldr	r2, [pc, #292]	; (8005844 <MX_GPIO_Init+0x198>)
 8005720:	f043 0302 	orr.w	r3, r3, #2
 8005724:	6313      	str	r3, [r2, #48]	; 0x30
 8005726:	4b47      	ldr	r3, [pc, #284]	; (8005844 <MX_GPIO_Init+0x198>)
 8005728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	607b      	str	r3, [r7, #4]
 8005730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8005732:	2200      	movs	r2, #0
 8005734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005738:	4843      	ldr	r0, [pc, #268]	; (8005848 <MX_GPIO_Init+0x19c>)
 800573a:	f005 fea5 	bl	800b488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 800573e:	2200      	movs	r2, #0
 8005740:	f247 4102 	movw	r1, #29698	; 0x7402
 8005744:	4841      	ldr	r0, [pc, #260]	; (800584c <MX_GPIO_Init+0x1a0>)
 8005746:	f005 fe9f 	bl	800b488 <HAL_GPIO_WritePin>
                          |TFT_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_nRF_GPIO_Port, CSN_nRF_Pin, GPIO_PIN_RESET);
 800574a:	2200      	movs	r2, #0
 800574c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005750:	483f      	ldr	r0, [pc, #252]	; (8005850 <MX_GPIO_Init+0x1a4>)
 8005752:	f005 fe99 	bl	800b488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8005756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800575a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800575c:	2301      	movs	r3, #1
 800575e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005760:	2300      	movs	r3, #0
 8005762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005764:	2300      	movs	r3, #0
 8005766:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8005768:	f107 0314 	add.w	r3, r7, #20
 800576c:	4619      	mov	r1, r3
 800576e:	4836      	ldr	r0, [pc, #216]	; (8005848 <MX_GPIO_Init+0x19c>)
 8005770:	f005 fcee 	bl	800b150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_DS3231_RTC_Pin;
 8005774:	2310      	movs	r3, #16
 8005776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005778:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800577c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800577e:	2301      	movs	r3, #1
 8005780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 8005782:	f107 0314 	add.w	r3, r7, #20
 8005786:	4619      	mov	r1, r3
 8005788:	4831      	ldr	r0, [pc, #196]	; (8005850 <MX_GPIO_Init+0x1a4>)
 800578a:	f005 fce1 	bl	800b150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 800578e:	f247 4302 	movw	r3, #29698	; 0x7402
 8005792:	617b      	str	r3, [r7, #20]
                          |TFT_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005794:	2301      	movs	r3, #1
 8005796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005798:	2300      	movs	r3, #0
 800579a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800579c:	2300      	movs	r3, #0
 800579e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057a0:	f107 0314 	add.w	r3, r7, #20
 80057a4:	4619      	mov	r1, r3
 80057a6:	4829      	ldr	r0, [pc, #164]	; (800584c <MX_GPIO_Init+0x1a0>)
 80057a8:	f005 fcd2 	bl	800b150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRF_IRQ_Pin;
 80057ac:	2304      	movs	r3, #4
 80057ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80057b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80057b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b6:	2300      	movs	r3, #0
 80057b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80057ba:	f107 0314 	add.w	r3, r7, #20
 80057be:	4619      	mov	r1, r3
 80057c0:	4822      	ldr	r0, [pc, #136]	; (800584c <MX_GPIO_Init+0x1a0>)
 80057c2:	f005 fcc5 	bl	800b150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_DS3231_RTC_Pin;
 80057c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057cc:	2300      	movs	r3, #0
 80057ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d0:	2300      	movs	r3, #0
 80057d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 80057d4:	f107 0314 	add.w	r3, r7, #20
 80057d8:	4619      	mov	r1, r3
 80057da:	481c      	ldr	r0, [pc, #112]	; (800584c <MX_GPIO_Init+0x1a0>)
 80057dc:	f005 fcb8 	bl	800b150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 80057e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80057e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80057ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ec:	2300      	movs	r3, #0
 80057ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 80057f0:	f107 0314 	add.w	r3, r7, #20
 80057f4:	4619      	mov	r1, r3
 80057f6:	4816      	ldr	r0, [pc, #88]	; (8005850 <MX_GPIO_Init+0x1a4>)
 80057f8:	f005 fcaa 	bl	800b150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_nRF_Pin;
 80057fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005802:	2301      	movs	r3, #1
 8005804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005806:	2300      	movs	r3, #0
 8005808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800580a:	2300      	movs	r3, #0
 800580c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CSN_nRF_GPIO_Port, &GPIO_InitStruct);
 800580e:	f107 0314 	add.w	r3, r7, #20
 8005812:	4619      	mov	r1, r3
 8005814:	480e      	ldr	r0, [pc, #56]	; (8005850 <MX_GPIO_Init+0x1a4>)
 8005816:	f005 fc9b 	bl	800b150 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800581a:	2200      	movs	r2, #0
 800581c:	2100      	movs	r1, #0
 800581e:	2008      	movs	r0, #8
 8005820:	f005 f825 	bl	800a86e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005824:	2008      	movs	r0, #8
 8005826:	f005 f83e 	bl	800a8a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800582a:	2200      	movs	r2, #0
 800582c:	2100      	movs	r1, #0
 800582e:	2017      	movs	r0, #23
 8005830:	f005 f81d 	bl	800a86e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005834:	2017      	movs	r0, #23
 8005836:	f005 f836 	bl	800a8a6 <HAL_NVIC_EnableIRQ>

}
 800583a:	bf00      	nop
 800583c:	3728      	adds	r7, #40	; 0x28
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	40023800 	.word	0x40023800
 8005848:	40020800 	.word	0x40020800
 800584c:	40020400 	.word	0x40020400
 8005850:	40020000 	.word	0x40020000

08005854 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005858:	4b12      	ldr	r3, [pc, #72]	; (80058a4 <MX_I2C1_Init+0x50>)
 800585a:	4a13      	ldr	r2, [pc, #76]	; (80058a8 <MX_I2C1_Init+0x54>)
 800585c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800585e:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <MX_I2C1_Init+0x50>)
 8005860:	4a12      	ldr	r2, [pc, #72]	; (80058ac <MX_I2C1_Init+0x58>)
 8005862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005864:	4b0f      	ldr	r3, [pc, #60]	; (80058a4 <MX_I2C1_Init+0x50>)
 8005866:	2200      	movs	r2, #0
 8005868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800586a:	4b0e      	ldr	r3, [pc, #56]	; (80058a4 <MX_I2C1_Init+0x50>)
 800586c:	2200      	movs	r2, #0
 800586e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005870:	4b0c      	ldr	r3, [pc, #48]	; (80058a4 <MX_I2C1_Init+0x50>)
 8005872:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005876:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005878:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <MX_I2C1_Init+0x50>)
 800587a:	2200      	movs	r2, #0
 800587c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800587e:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <MX_I2C1_Init+0x50>)
 8005880:	2200      	movs	r2, #0
 8005882:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005884:	4b07      	ldr	r3, [pc, #28]	; (80058a4 <MX_I2C1_Init+0x50>)
 8005886:	2200      	movs	r2, #0
 8005888:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800588a:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <MX_I2C1_Init+0x50>)
 800588c:	2200      	movs	r2, #0
 800588e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005890:	4804      	ldr	r0, [pc, #16]	; (80058a4 <MX_I2C1_Init+0x50>)
 8005892:	f005 fe45 	bl	800b520 <HAL_I2C_Init>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800589c:	f000 fa88 	bl	8005db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80058a0:	bf00      	nop
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	2000043c 	.word	0x2000043c
 80058a8:	40005400 	.word	0x40005400
 80058ac:	00061a80 	.word	0x00061a80

080058b0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80058b4:	4b12      	ldr	r3, [pc, #72]	; (8005900 <MX_I2C3_Init+0x50>)
 80058b6:	4a13      	ldr	r2, [pc, #76]	; (8005904 <MX_I2C3_Init+0x54>)
 80058b8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80058ba:	4b11      	ldr	r3, [pc, #68]	; (8005900 <MX_I2C3_Init+0x50>)
 80058bc:	4a12      	ldr	r2, [pc, #72]	; (8005908 <MX_I2C3_Init+0x58>)
 80058be:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80058c0:	4b0f      	ldr	r3, [pc, #60]	; (8005900 <MX_I2C3_Init+0x50>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80058c6:	4b0e      	ldr	r3, [pc, #56]	; (8005900 <MX_I2C3_Init+0x50>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80058cc:	4b0c      	ldr	r3, [pc, #48]	; (8005900 <MX_I2C3_Init+0x50>)
 80058ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80058d2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80058d4:	4b0a      	ldr	r3, [pc, #40]	; (8005900 <MX_I2C3_Init+0x50>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80058da:	4b09      	ldr	r3, [pc, #36]	; (8005900 <MX_I2C3_Init+0x50>)
 80058dc:	2200      	movs	r2, #0
 80058de:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80058e0:	4b07      	ldr	r3, [pc, #28]	; (8005900 <MX_I2C3_Init+0x50>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80058e6:	4b06      	ldr	r3, [pc, #24]	; (8005900 <MX_I2C3_Init+0x50>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80058ec:	4804      	ldr	r0, [pc, #16]	; (8005900 <MX_I2C3_Init+0x50>)
 80058ee:	f005 fe17 	bl	800b520 <HAL_I2C_Init>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80058f8:	f000 fa5a 	bl	8005db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80058fc:	bf00      	nop
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	20000388 	.word	0x20000388
 8005904:	40005c00 	.word	0x40005c00
 8005908:	000186a0 	.word	0x000186a0

0800590c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08c      	sub	sp, #48	; 0x30
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005914:	f107 031c 	add.w	r3, r7, #28
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	605a      	str	r2, [r3, #4]
 800591e:	609a      	str	r2, [r3, #8]
 8005920:	60da      	str	r2, [r3, #12]
 8005922:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a74      	ldr	r2, [pc, #464]	; (8005afc <HAL_I2C_MspInit+0x1f0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	f040 8091 	bne.w	8005a52 <HAL_I2C_MspInit+0x146>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005930:	2300      	movs	r3, #0
 8005932:	61bb      	str	r3, [r7, #24]
 8005934:	4b72      	ldr	r3, [pc, #456]	; (8005b00 <HAL_I2C_MspInit+0x1f4>)
 8005936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005938:	4a71      	ldr	r2, [pc, #452]	; (8005b00 <HAL_I2C_MspInit+0x1f4>)
 800593a:	f043 0302 	orr.w	r3, r3, #2
 800593e:	6313      	str	r3, [r2, #48]	; 0x30
 8005940:	4b6f      	ldr	r3, [pc, #444]	; (8005b00 <HAL_I2C_MspInit+0x1f4>)
 8005942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_DS3231_RTC_Pin|I2C1_SDA_DS3231_RTC_Pin;
 800594c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005952:	2312      	movs	r3, #18
 8005954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005956:	2300      	movs	r3, #0
 8005958:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800595a:	2303      	movs	r3, #3
 800595c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800595e:	2304      	movs	r3, #4
 8005960:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005962:	f107 031c 	add.w	r3, r7, #28
 8005966:	4619      	mov	r1, r3
 8005968:	4866      	ldr	r0, [pc, #408]	; (8005b04 <HAL_I2C_MspInit+0x1f8>)
 800596a:	f005 fbf1 	bl	800b150 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800596e:	2300      	movs	r3, #0
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	4b63      	ldr	r3, [pc, #396]	; (8005b00 <HAL_I2C_MspInit+0x1f4>)
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	4a62      	ldr	r2, [pc, #392]	; (8005b00 <HAL_I2C_MspInit+0x1f4>)
 8005978:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800597c:	6413      	str	r3, [r2, #64]	; 0x40
 800597e:	4b60      	ldr	r3, [pc, #384]	; (8005b00 <HAL_I2C_MspInit+0x1f4>)
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800598a:	4b5f      	ldr	r3, [pc, #380]	; (8005b08 <HAL_I2C_MspInit+0x1fc>)
 800598c:	4a5f      	ldr	r2, [pc, #380]	; (8005b0c <HAL_I2C_MspInit+0x200>)
 800598e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8005990:	4b5d      	ldr	r3, [pc, #372]	; (8005b08 <HAL_I2C_MspInit+0x1fc>)
 8005992:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005996:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005998:	4b5b      	ldr	r3, [pc, #364]	; (8005b08 <HAL_I2C_MspInit+0x1fc>)
 800599a:	2200      	movs	r2, #0
 800599c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800599e:	4b5a      	ldr	r3, [pc, #360]	; (8005b08 <HAL_I2C_MspInit+0x1fc>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80059a4:	4b58      	ldr	r3, [pc, #352]	; (8005b08 <HAL_I2C_MspInit+0x1fc>)
 80059a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059aa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80059ac:	4b56      	ldr	r3, [pc, #344]	; (8005b08 <HAL_I2C_MspInit+0x1fc>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80059b2:	4b55      	ldr	r3, [pc, #340]	; (8005b08 <HAL_I2C_MspInit+0x1fc>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80059b8:	4b53      	ldr	r3, [pc, #332]	; (8005b08 <HAL_I2C_MspInit+0x1fc>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80059be:	4b52      	ldr	r3, [pc, #328]	; (8005b08 <HAL_I2C_MspInit+0x1fc>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80059c4:	4b50      	ldr	r3, [pc, #320]	; (8005b08 <HAL_I2C_MspInit+0x1fc>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80059ca:	484f      	ldr	r0, [pc, #316]	; (8005b08 <HAL_I2C_MspInit+0x1fc>)
 80059cc:	f004 ffb0 	bl	800a930 <HAL_DMA_Init>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80059d6:	f000 f9eb 	bl	8005db0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a4a      	ldr	r2, [pc, #296]	; (8005b08 <HAL_I2C_MspInit+0x1fc>)
 80059de:	639a      	str	r2, [r3, #56]	; 0x38
 80059e0:	4a49      	ldr	r2, [pc, #292]	; (8005b08 <HAL_I2C_MspInit+0x1fc>)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80059e6:	4b4a      	ldr	r3, [pc, #296]	; (8005b10 <HAL_I2C_MspInit+0x204>)
 80059e8:	4a4a      	ldr	r2, [pc, #296]	; (8005b14 <HAL_I2C_MspInit+0x208>)
 80059ea:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 80059ec:	4b48      	ldr	r3, [pc, #288]	; (8005b10 <HAL_I2C_MspInit+0x204>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80059f2:	4b47      	ldr	r3, [pc, #284]	; (8005b10 <HAL_I2C_MspInit+0x204>)
 80059f4:	2240      	movs	r2, #64	; 0x40
 80059f6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059f8:	4b45      	ldr	r3, [pc, #276]	; (8005b10 <HAL_I2C_MspInit+0x204>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80059fe:	4b44      	ldr	r3, [pc, #272]	; (8005b10 <HAL_I2C_MspInit+0x204>)
 8005a00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a04:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a06:	4b42      	ldr	r3, [pc, #264]	; (8005b10 <HAL_I2C_MspInit+0x204>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a0c:	4b40      	ldr	r3, [pc, #256]	; (8005b10 <HAL_I2C_MspInit+0x204>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005a12:	4b3f      	ldr	r3, [pc, #252]	; (8005b10 <HAL_I2C_MspInit+0x204>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005a18:	4b3d      	ldr	r3, [pc, #244]	; (8005b10 <HAL_I2C_MspInit+0x204>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a1e:	4b3c      	ldr	r3, [pc, #240]	; (8005b10 <HAL_I2C_MspInit+0x204>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005a24:	483a      	ldr	r0, [pc, #232]	; (8005b10 <HAL_I2C_MspInit+0x204>)
 8005a26:	f004 ff83 	bl	800a930 <HAL_DMA_Init>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d001      	beq.n	8005a34 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8005a30:	f000 f9be 	bl	8005db0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a36      	ldr	r2, [pc, #216]	; (8005b10 <HAL_I2C_MspInit+0x204>)
 8005a38:	635a      	str	r2, [r3, #52]	; 0x34
 8005a3a:	4a35      	ldr	r2, [pc, #212]	; (8005b10 <HAL_I2C_MspInit+0x204>)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005a40:	2200      	movs	r2, #0
 8005a42:	2100      	movs	r1, #0
 8005a44:	2020      	movs	r0, #32
 8005a46:	f004 ff12 	bl	800a86e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005a4a:	2020      	movs	r0, #32
 8005a4c:	f004 ff2b 	bl	800a8a6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8005a50:	e050      	b.n	8005af4 <HAL_I2C_MspInit+0x1e8>
  else if(i2cHandle->Instance==I2C3)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a30      	ldr	r2, [pc, #192]	; (8005b18 <HAL_I2C_MspInit+0x20c>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d14b      	bne.n	8005af4 <HAL_I2C_MspInit+0x1e8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	4b27      	ldr	r3, [pc, #156]	; (8005b00 <HAL_I2C_MspInit+0x1f4>)
 8005a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a64:	4a26      	ldr	r2, [pc, #152]	; (8005b00 <HAL_I2C_MspInit+0x1f4>)
 8005a66:	f043 0301 	orr.w	r3, r3, #1
 8005a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8005a6c:	4b24      	ldr	r3, [pc, #144]	; (8005b00 <HAL_I2C_MspInit+0x1f4>)
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	613b      	str	r3, [r7, #16]
 8005a76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	4b20      	ldr	r3, [pc, #128]	; (8005b00 <HAL_I2C_MspInit+0x1f4>)
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a80:	4a1f      	ldr	r2, [pc, #124]	; (8005b00 <HAL_I2C_MspInit+0x1f4>)
 8005a82:	f043 0302 	orr.w	r3, r3, #2
 8005a86:	6313      	str	r3, [r2, #48]	; 0x30
 8005a88:	4b1d      	ldr	r3, [pc, #116]	; (8005b00 <HAL_I2C_MspInit+0x1f4>)
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	60fb      	str	r3, [r7, #12]
 8005a92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SCL_EEPROM_Pin;
 8005a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a9a:	2312      	movs	r3, #18
 8005a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005aa6:	2304      	movs	r3, #4
 8005aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8005aaa:	f107 031c 	add.w	r3, r7, #28
 8005aae:	4619      	mov	r1, r3
 8005ab0:	481a      	ldr	r0, [pc, #104]	; (8005b1c <HAL_I2C_MspInit+0x210>)
 8005ab2:	f005 fb4d 	bl	800b150 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SDA_EEPROM_Pin;
 8005ab6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005abc:	2312      	movs	r3, #18
 8005abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8005ac8:	2309      	movs	r3, #9
 8005aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8005acc:	f107 031c 	add.w	r3, r7, #28
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	480c      	ldr	r0, [pc, #48]	; (8005b04 <HAL_I2C_MspInit+0x1f8>)
 8005ad4:	f005 fb3c 	bl	800b150 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005ad8:	2300      	movs	r3, #0
 8005ada:	60bb      	str	r3, [r7, #8]
 8005adc:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <HAL_I2C_MspInit+0x1f4>)
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	4a07      	ldr	r2, [pc, #28]	; (8005b00 <HAL_I2C_MspInit+0x1f4>)
 8005ae2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8005ae8:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <HAL_I2C_MspInit+0x1f4>)
 8005aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005af0:	60bb      	str	r3, [r7, #8]
 8005af2:	68bb      	ldr	r3, [r7, #8]
}
 8005af4:	bf00      	nop
 8005af6:	3730      	adds	r7, #48	; 0x30
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	40005400 	.word	0x40005400
 8005b00:	40023800 	.word	0x40023800
 8005b04:	40020400 	.word	0x40020400
 8005b08:	20000490 	.word	0x20000490
 8005b0c:	40026010 	.word	0x40026010
 8005b10:	200003dc 	.word	0x200003dc
 8005b14:	40026028 	.word	0x40026028
 8005b18:	40005c00 	.word	0x40005c00
 8005b1c:	40020000 	.word	0x40020000

08005b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005b26:	f004 fccd 	bl	800a4c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005b2a:	f000 f86b 	bl	8005c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005b2e:	f7ff fdbd 	bl	80056ac <MX_GPIO_Init>
  MX_SPI1_Init();
 8005b32:	f003 fccf 	bl	80094d4 <MX_SPI1_Init>
  MX_DMA_Init();
 8005b36:	f7fc fe1b 	bl	8002770 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8005b3a:	f004 fafd 	bl	800a138 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8005b3e:	f003 fcff 	bl	8009540 <MX_SPI3_Init>
  MX_I2C1_Init();
 8005b42:	f7ff fe87 	bl	8005854 <MX_I2C1_Init>
  MX_TIM11_Init();
 8005b46:	f004 f879 	bl	8009c3c <MX_TIM11_Init>
  MX_TIM10_Init();
 8005b4a:	f004 f853 	bl	8009bf4 <MX_TIM10_Init>
  MX_I2C3_Init();
 8005b4e:	f7ff feaf 	bl	80058b0 <MX_I2C3_Init>
  MX_SPI5_Init();
 8005b52:	f003 fd2b 	bl	80095ac <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8005b56:	f004 fac5 	bl	800a0e4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8005b5a:	f003 fff7 	bl	8009b4c <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8005b5e:	f000 f8b9 	bl	8005cd4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 8005b62:	4820      	ldr	r0, [pc, #128]	; (8005be4 <main+0xc4>)
 8005b64:	f7fc fb64 	bl	8002230 <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 8005b68:	491f      	ldr	r1, [pc, #124]	; (8005be8 <main+0xc8>)
 8005b6a:	4820      	ldr	r0, [pc, #128]	; (8005bec <main+0xcc>)
 8005b6c:	f004 fa6b 	bl	800a046 <UARTDMA_Init>
  UARTDMA_Init(&huartdma1, &huart1);
 8005b70:	491f      	ldr	r1, [pc, #124]	; (8005bf0 <main+0xd0>)
 8005b72:	4820      	ldr	r0, [pc, #128]	; (8005bf4 <main+0xd4>)
 8005b74:	f004 fa67 	bl	800a046 <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 8005b78:	2117      	movs	r1, #23
 8005b7a:	481f      	ldr	r0, [pc, #124]	; (8005bf8 <main+0xd8>)
 8005b7c:	f7fc fda8 	bl	80026d0 <XPT2046_Init>
  // RTC Initialization - I2C1
  DS3231_Init(&hi2c1);
 8005b80:	481e      	ldr	r0, [pc, #120]	; (8005bfc <main+0xdc>)
 8005b82:	f7fc fe4b 	bl	800281c <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8005b86:	2001      	movs	r0, #1
 8005b88:	f7fc fea2 	bl	80028d0 <DS3231_SetInterruptMode>
  DS3231_EnableOscillator(DS3231_ENABLED);
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	f7fc febf 	bl	8002910 <DS3231_EnableOscillator>
  // EEPROM CHECK TODO! Add check of eeprom and informing on screen about results
  uint8_t result = 0;
 8005b92:	2300      	movs	r3, #0
 8005b94:	71fb      	strb	r3, [r7, #7]
  eeprom_read(0x01, &result, sizeof(result));
 8005b96:	1dfb      	adds	r3, r7, #7
 8005b98:	2201      	movs	r2, #1
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	2001      	movs	r0, #1
 8005b9e:	f7fd f803 	bl	8002ba8 <eeprom_read>

  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 8005ba2:	4817      	ldr	r0, [pc, #92]	; (8005c00 <main+0xe0>)
 8005ba4:	f009 fe6c 	bl	800f880 <HAL_TIM_Base_Start_IT>
  {

	  //////////////////////////////////////////////////////
	  // RECEIVE DATA FROM SECUND uC
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8005ba8:	4810      	ldr	r0, [pc, #64]	; (8005bec <main+0xcc>)
 8005baa:	f004 f9ff 	bl	8009fac <UARTDMA_IsDataReceivedReady>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d002      	beq.n	8005bba <main+0x9a>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 8005bb4:	480d      	ldr	r0, [pc, #52]	; (8005bec <main+0xcc>)
 8005bb6:	f002 ffb5 	bl	8008b24 <UART_ParseLine>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO SECOND uC
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 8005bba:	480c      	ldr	r0, [pc, #48]	; (8005bec <main+0xcc>)
 8005bbc:	f004 fa08 	bl	8009fd0 <UARTDMA_TransmitEvent>

	  //////////////////////////////////////////////////////
	  // RECEIVE DATA FROM ESP
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma1))
 8005bc0:	480c      	ldr	r0, [pc, #48]	; (8005bf4 <main+0xd4>)
 8005bc2:	f004 f9f3 	bl	8009fac <UARTDMA_IsDataReceivedReady>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <main+0xb2>
	  {
		  UART_ESP_ParseLine(&huartdma1); // Parsing function
 8005bcc:	4809      	ldr	r0, [pc, #36]	; (8005bf4 <main+0xd4>)
 8005bce:	f7fb fa25 	bl	800101c <UART_ESP_ParseLine>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO ESP
	  //
	  UARTDMA_TransmitEvent(&huartdma1);
 8005bd2:	4808      	ldr	r0, [pc, #32]	; (8005bf4 <main+0xd4>)
 8005bd4:	f004 f9fc 	bl	8009fd0 <UARTDMA_TransmitEvent>

	  ////////////////////////////////////////////////////////
	  // TOUCH SCREEN
	  //
	  XPT2046_Task();
 8005bd8:	f7fc fca8 	bl	800252c <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  //
	  MenuTFT();
 8005bdc:	f000 f924 	bl	8005e28 <MenuTFT>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8005be0:	e7e2      	b.n	8005ba8 <main+0x88>
 8005be2:	bf00      	nop
 8005be4:	20000938 	.word	0x20000938
 8005be8:	20000c2c 	.word	0x20000c2c
 8005bec:	200004f0 	.word	0x200004f0
 8005bf0:	20000be8 	.word	0x20000be8
 8005bf4:	200006bc 	.word	0x200006bc
 8005bf8:	200008e0 	.word	0x200008e0
 8005bfc:	2000043c 	.word	0x2000043c
 8005c00:	200009d8 	.word	0x200009d8

08005c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b094      	sub	sp, #80	; 0x50
 8005c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005c0a:	f107 0320 	add.w	r3, r7, #32
 8005c0e:	2230      	movs	r2, #48	; 0x30
 8005c10:	2100      	movs	r1, #0
 8005c12:	4618      	mov	r0, r3
 8005c14:	f00b fb10 	bl	8011238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005c18:	f107 030c 	add.w	r3, r7, #12
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	605a      	str	r2, [r3, #4]
 8005c22:	609a      	str	r2, [r3, #8]
 8005c24:	60da      	str	r2, [r3, #12]
 8005c26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60bb      	str	r3, [r7, #8]
 8005c2c:	4b27      	ldr	r3, [pc, #156]	; (8005ccc <SystemClock_Config+0xc8>)
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c30:	4a26      	ldr	r2, [pc, #152]	; (8005ccc <SystemClock_Config+0xc8>)
 8005c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c36:	6413      	str	r3, [r2, #64]	; 0x40
 8005c38:	4b24      	ldr	r3, [pc, #144]	; (8005ccc <SystemClock_Config+0xc8>)
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c40:	60bb      	str	r3, [r7, #8]
 8005c42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c44:	2300      	movs	r3, #0
 8005c46:	607b      	str	r3, [r7, #4]
 8005c48:	4b21      	ldr	r3, [pc, #132]	; (8005cd0 <SystemClock_Config+0xcc>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a20      	ldr	r2, [pc, #128]	; (8005cd0 <SystemClock_Config+0xcc>)
 8005c4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	4b1e      	ldr	r3, [pc, #120]	; (8005cd0 <SystemClock_Config+0xcc>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c5c:	607b      	str	r3, [r7, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005c60:	2301      	movs	r3, #1
 8005c62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005c64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005c6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8005c74:	230c      	movs	r3, #12
 8005c76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8005c78:	2360      	movs	r3, #96	; 0x60
 8005c7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005c80:	2304      	movs	r3, #4
 8005c82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c84:	f107 0320 	add.w	r3, r7, #32
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f008 fd4d 	bl	800e728 <HAL_RCC_OscConfig>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005c94:	f000 f88c 	bl	8005db0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c98:	230f      	movs	r3, #15
 8005c9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ca8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005caa:	2300      	movs	r3, #0
 8005cac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005cae:	f107 030c 	add.w	r3, r7, #12
 8005cb2:	2103      	movs	r1, #3
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f008 ffaf 	bl	800ec18 <HAL_RCC_ClockConfig>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005cc0:	f000 f876 	bl	8005db0 <Error_Handler>
  }
}
 8005cc4:	bf00      	nop
 8005cc6:	3750      	adds	r7, #80	; 0x50
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	40007000 	.word	0x40007000

08005cd4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2100      	movs	r1, #0
 8005cdc:	200a      	movs	r0, #10
 8005cde:	f004 fdc6 	bl	800a86e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005ce2:	200a      	movs	r0, #10
 8005ce4:	f004 fddf 	bl	800a8a6 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2100      	movs	r1, #0
 8005cec:	201f      	movs	r0, #31
 8005cee:	f004 fdbe 	bl	800a86e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005cf2:	201f      	movs	r0, #31
 8005cf4:	f004 fdd7 	bl	800a8a6 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	2026      	movs	r0, #38	; 0x26
 8005cfe:	f004 fdb6 	bl	800a86e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005d02:	2026      	movs	r0, #38	; 0x26
 8005d04:	f004 fdcf 	bl	800a8a6 <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	2033      	movs	r0, #51	; 0x33
 8005d0e:	f004 fdae 	bl	800a86e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8005d12:	2033      	movs	r0, #51	; 0x33
 8005d14:	f004 fdc7 	bl	800a8a6 <HAL_NVIC_EnableIRQ>
}
 8005d18:	bf00      	nop
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a12      	ldr	r2, [pc, #72]	; (8005d74 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d101      	bne.n	8005d32 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen(); // Check if current showing hour are different from this from RTC and change it
 8005d2e:	f7ff f8d9 	bl	8004ee4 <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a10      	ldr	r2, [pc, #64]	; (8005d78 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d117      	bne.n	8005d6c <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		//TODO! Make possibility to change FEEDING_TIME_IN_S
		if(FeedingCounter >= FEEDING_TIME_IN_S) // timer to count seconds from start feeding to turn off this activity
 8005d3c:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	d90d      	bls.n	8005d60 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8005d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d48:	480d      	ldr	r0, [pc, #52]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8005d4a:	f005 fbb6 	bl	800b4ba <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 8005d4e:	2000      	movs	r0, #0
 8005d50:	f7ff f958 	bl	8005004 <predefinedActivityKarmienie>
			FeedingCounter = 0;
 8005d54:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 8005d5a:	480a      	ldr	r0, [pc, #40]	; (8005d84 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8005d5c:	f009 fdf2 	bl	800f944 <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 8005d60:	4b06      	ldr	r3, [pc, #24]	; (8005d7c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	3301      	adds	r3, #1
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	4b04      	ldr	r3, [pc, #16]	; (8005d7c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005d6a:	701a      	strb	r2, [r3, #0]
	}
}
 8005d6c:	bf00      	nop
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	40014800 	.word	0x40014800
 8005d78:	40014400 	.word	0x40014400
 8005d7c:	20000254 	.word	0x20000254
 8005d80:	40020800 	.word	0x40020800
 8005d84:	20000990 	.word	0x20000990

08005d88 <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin) // Interrupt from XPT2046 - touch screen controler
 8005d92:	88fb      	ldrh	r3, [r7, #6]
 8005d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d98:	d101      	bne.n	8005d9e <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 8005d9a:	f7fc fc8d 	bl	80026b8 <XPT2046_IRQ>
	}

	if(GPIO_Pin == IRQ_DS3231_RTC_Pin) // Interrupt from RTC - alarm one per minute
 8005d9e:	88fb      	ldrh	r3, [r7, #6]
 8005da0:	2b10      	cmp	r3, #16
 8005da2:	d101      	bne.n	8005da8 <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 8005da4:	f7fc fdf8 	bl	8002998 <DS3231_ClearAlarm2Flag>
	}
}
 8005da8:	bf00      	nop
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	ILI9341_ClearDisplay(ILI9341_RED);
 8005db6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8005dba:	f7fc f9db 	bl	8002174 <ILI9341_ClearDisplay>
	EF_SetFont(&arial_11ptFontInfo);
 8005dbe:	4814      	ldr	r0, [pc, #80]	; (8005e10 <Error_Handler+0x60>)
 8005dc0:	f7fb fdd4 	bl	800196c <EF_SetFont>
	sprintf((char*)Msg, "Error in Function: %s\n", __FILE__);
 8005dc4:	4a13      	ldr	r2, [pc, #76]	; (8005e14 <Error_Handler+0x64>)
 8005dc6:	4914      	ldr	r1, [pc, #80]	; (8005e18 <Error_Handler+0x68>)
 8005dc8:	4814      	ldr	r0, [pc, #80]	; (8005e1c <Error_Handler+0x6c>)
 8005dca:	f00c f8bd 	bl	8011f48 <siprintf>
	EF_PutString(Msg, ERROR_FILE_POZ_X, ERROR_FILE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 8005dce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005dd2:	9301      	str	r3, [sp, #4]
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	2300      	movs	r3, #0
 8005dda:	2214      	movs	r2, #20
 8005ddc:	210a      	movs	r1, #10
 8005dde:	480f      	ldr	r0, [pc, #60]	; (8005e1c <Error_Handler+0x6c>)
 8005de0:	f7fb ffde 	bl	8001da0 <EF_PutString>
	sprintf((char*)Msg, "Function: %s, Line: %d\n",__func__, (int)__LINE__);
 8005de4:	f240 1345 	movw	r3, #325	; 0x145
 8005de8:	4a0d      	ldr	r2, [pc, #52]	; (8005e20 <Error_Handler+0x70>)
 8005dea:	490e      	ldr	r1, [pc, #56]	; (8005e24 <Error_Handler+0x74>)
 8005dec:	480b      	ldr	r0, [pc, #44]	; (8005e1c <Error_Handler+0x6c>)
 8005dee:	f00c f8ab 	bl	8011f48 <siprintf>
	EF_PutString(Msg, ERROR_FUNC_AND_LINE_POZ_X, ERROR_FUNC_AND_LINE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 8005df2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005df6:	9301      	str	r3, [sp, #4]
 8005df8:	2301      	movs	r3, #1
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	2232      	movs	r2, #50	; 0x32
 8005e00:	210a      	movs	r1, #10
 8005e02:	4806      	ldr	r0, [pc, #24]	; (8005e1c <Error_Handler+0x6c>)
 8005e04:	f7fb ffcc 	bl	8001da0 <EF_PutString>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005e08:	b672      	cpsid	i
}
 8005e0a:	bf00      	nop

  __disable_irq();

  while (1)
 8005e0c:	e7fe      	b.n	8005e0c <Error_Handler+0x5c>
 8005e0e:	bf00      	nop
 8005e10:	0802774c 	.word	0x0802774c
 8005e14:	08016098 	.word	0x08016098
 8005e18:	080160ac 	.word	0x080160ac
 8005e1c:	200002c0 	.word	0x200002c0
 8005e20:	08026c7c 	.word	0x08026c7c
 8005e24:	080160c4 	.word	0x080160c4

08005e28 <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
	switch(State)
 8005e2c:	4b4f      	ldr	r3, [pc, #316]	; (8005f6c <MenuTFT+0x144>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	f200 8098 	bhi.w	8005f66 <MenuTFT+0x13e>
 8005e36:	a201      	add	r2, pc, #4	; (adr r2, 8005e3c <MenuTFT+0x14>)
 8005e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3c:	08005e61 	.word	0x08005e61
 8005e40:	08005e73 	.word	0x08005e73
 8005e44:	08005ea7 	.word	0x08005ea7
 8005e48:	08005ed7 	.word	0x08005ed7
 8005e4c:	08005ef5 	.word	0x08005ef5
 8005e50:	08005ebf 	.word	0x08005ebf
 8005e54:	08005f0d 	.word	0x08005f0d
 8005e58:	08005f2b 	.word	0x08005f2b
 8005e5c:	08005f49 	.word	0x08005f49
	{
	case MENUTFT_INIT:
		system_init();
 8005e60:	f7fd faa6 	bl	80033b0 <system_init>
		State = MENUTFT_PARAMETERS;
 8005e64:	4b41      	ldr	r3, [pc, #260]	; (8005f6c <MenuTFT+0x144>)
 8005e66:	2201      	movs	r2, #1
 8005e68:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 8005e6a:	4b41      	ldr	r3, [pc, #260]	; (8005f70 <MenuTFT+0x148>)
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	701a      	strb	r2, [r3, #0]
		break;
 8005e70:	e079      	b.n	8005f66 <MenuTFT+0x13e>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 8005e72:	4b3f      	ldr	r3, [pc, #252]	; (8005f70 <MenuTFT+0x148>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d112      	bne.n	8005ea0 <MenuTFT+0x78>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 8005e7a:	4b3e      	ldr	r3, [pc, #248]	; (8005f74 <MenuTFT+0x14c>)
 8005e7c:	edd3 7a00 	vldr	s15, [r3]
 8005e80:	4b3d      	ldr	r3, [pc, #244]	; (8005f78 <MenuTFT+0x150>)
 8005e82:	ed93 7a00 	vldr	s14, [r3]
 8005e86:	eeb0 1a47 	vmov.f32	s2, s14
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8005f7c <MenuTFT+0x154>
 8005e92:	eeb0 0a67 	vmov.f32	s0, s15
 8005e96:	f7fd fc09 	bl	80036ac <showCurrentParameters>
			StateChangeFlag = 0;
 8005e9a:	4b35      	ldr	r3, [pc, #212]	; (8005f70 <MenuTFT+0x148>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 8005ea0:	f000 f874 	bl	8005f8c <TouchParametersActivity>
		break;
 8005ea4:	e05f      	b.n	8005f66 <MenuTFT+0x13e>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 8005ea6:	4b32      	ldr	r3, [pc, #200]	; (8005f70 <MenuTFT+0x148>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d104      	bne.n	8005eb8 <MenuTFT+0x90>
		{
			showControlPanel();
 8005eae:	f7fd fd47 	bl	8003940 <showControlPanel>
			StateChangeFlag = 0;
 8005eb2:	4b2f      	ldr	r3, [pc, #188]	; (8005f70 <MenuTFT+0x148>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 8005eb8:	f000 f8c8 	bl	800604c <TouchSwitchActivity>
		break;
 8005ebc:	e053      	b.n	8005f66 <MenuTFT+0x13e>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 8005ebe:	4b2c      	ldr	r3, [pc, #176]	; (8005f70 <MenuTFT+0x148>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d104      	bne.n	8005ed0 <MenuTFT+0xa8>
		{
			showLightsControlPanel();
 8005ec6:	f7fd fe15 	bl	8003af4 <showLightsControlPanel>
			StateChangeFlag = 0;
 8005eca:	4b29      	ldr	r3, [pc, #164]	; (8005f70 <MenuTFT+0x148>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 8005ed0:	f000 f92e 	bl	8006130 <TouchLightsActivity>
		break;
 8005ed4:	e047      	b.n	8005f66 <MenuTFT+0x13e>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 8005ed6:	4b26      	ldr	r3, [pc, #152]	; (8005f70 <MenuTFT+0x148>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d107      	bne.n	8005eee <MenuTFT+0xc6>
		{
			showClockSetPanel();
 8005ede:	f7fd fee1 	bl	8003ca4 <showClockSetPanel>
			ClockChangeFlag = 1;
 8005ee2:	4b27      	ldr	r3, [pc, #156]	; (8005f80 <MenuTFT+0x158>)
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005ee8:	4b21      	ldr	r3, [pc, #132]	; (8005f70 <MenuTFT+0x148>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 8005eee:	f000 f98f 	bl	8006210 <TouchClockActivity>
		break;
 8005ef2:	e038      	b.n	8005f66 <MenuTFT+0x13e>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 8005ef4:	4b1e      	ldr	r3, [pc, #120]	; (8005f70 <MenuTFT+0x148>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d104      	bne.n	8005f06 <MenuTFT+0xde>
		{
			showPreparedActivitiesPanel();
 8005efc:	f7fe f83a 	bl	8003f74 <showPreparedActivitiesPanel>
			StateChangeFlag = 0;
 8005f00:	4b1b      	ldr	r3, [pc, #108]	; (8005f70 <MenuTFT+0x148>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 8005f06:	f000 fa47 	bl	8006398 <TouchPredefinedActivityActivity>
		break;
 8005f0a:	e02c      	b.n	8005f66 <MenuTFT+0x13e>
	case MENUTFT_WS_LED:
		if(StateChangeFlag == 1) // make only one time
 8005f0c:	4b18      	ldr	r3, [pc, #96]	; (8005f70 <MenuTFT+0x148>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d107      	bne.n	8005f24 <MenuTFT+0xfc>
		{
			showWSLedPanel();
 8005f14:	f7fe f93e 	bl	8004194 <showWSLedPanel>
			WSLedChangeFlag = 1;
 8005f18:	4b1a      	ldr	r3, [pc, #104]	; (8005f84 <MenuTFT+0x15c>)
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005f1e:	4b14      	ldr	r3, [pc, #80]	; (8005f70 <MenuTFT+0x148>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	701a      	strb	r2, [r3, #0]
		}
		TouchWSLedActivity();
 8005f24:	f000 fa82 	bl	800642c <TouchWSLedActivity>
		break;
 8005f28:	e01d      	b.n	8005f66 <MenuTFT+0x13e>
	case MENUTFT_SCHEDULE_1:
		if(StateChangeFlag == 1) // make only one time
 8005f2a:	4b11      	ldr	r3, [pc, #68]	; (8005f70 <MenuTFT+0x148>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d107      	bne.n	8005f42 <MenuTFT+0x11a>
		{
			showSchedule1Panel();
 8005f32:	f7fe fecb 	bl	8004ccc <showSchedule1Panel>
			ScheduleChangeFlag = 1;
 8005f36:	4b14      	ldr	r3, [pc, #80]	; (8005f88 <MenuTFT+0x160>)
 8005f38:	2201      	movs	r2, #1
 8005f3a:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005f3c:	4b0c      	ldr	r3, [pc, #48]	; (8005f70 <MenuTFT+0x148>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	701a      	strb	r2, [r3, #0]
		}
		Schedule1Activity();
 8005f42:	f000 fadf 	bl	8006504 <Schedule1Activity>
		break;
 8005f46:	e00e      	b.n	8005f66 <MenuTFT+0x13e>
	case MENUTFT_SCHEDULE_2:
		if(StateChangeFlag == 1) // make only one time
 8005f48:	4b09      	ldr	r3, [pc, #36]	; (8005f70 <MenuTFT+0x148>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d107      	bne.n	8005f60 <MenuTFT+0x138>
		{
			showSchedule2Panel();
 8005f50:	f7fe ff50 	bl	8004df4 <showSchedule2Panel>
			ScheduleChangeFlag = 1;
 8005f54:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <MenuTFT+0x160>)
 8005f56:	2201      	movs	r2, #1
 8005f58:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005f5a:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <MenuTFT+0x148>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	701a      	strb	r2, [r3, #0]
		}
		Schedule2Activity();
 8005f60:	f000 fbd2 	bl	8006708 <Schedule2Activity>
		break;
 8005f64:	bf00      	nop
	}
}
 8005f66:	bf00      	nop
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20000290 	.word	0x20000290
 8005f70:	20000255 	.word	0x20000255
 8005f74:	20000294 	.word	0x20000294
 8005f78:	2000029c 	.word	0x2000029c
 8005f7c:	00000000 	.word	0x00000000
 8005f80:	20000256 	.word	0x20000256
 8005f84:	20000257 	.word	0x20000257
 8005f88:	20000258 	.word	0x20000258

08005f8c <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005f92:	f7fc fab9 	bl	8002508 <XPT2046_IsTouched>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d04c      	beq.n	8006036 <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005f9c:	f004 faf8 	bl	800a590 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	4b27      	ldr	r3, [pc, #156]	; (8006040 <TouchParametersActivity+0xb4>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fac:	d343      	bcc.n	8006036 <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005fae:	1d3a      	adds	r2, r7, #4
 8005fb0:	1dbb      	adds	r3, r7, #6
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7fc fa69 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005fba:	88fb      	ldrh	r3, [r7, #6]
 8005fbc:	2b09      	cmp	r3, #9
 8005fbe:	d90f      	bls.n	8005fe0 <TouchParametersActivity+0x54>
 8005fc0:	88fb      	ldrh	r3, [r7, #6]
 8005fc2:	2b6e      	cmp	r3, #110	; 0x6e
 8005fc4:	d80c      	bhi.n	8005fe0 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005fc6:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005fc8:	2bd7      	cmp	r3, #215	; 0xd7
 8005fca:	d909      	bls.n	8005fe0 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005fcc:	88bb      	ldrh	r3, [r7, #4]
 8005fce:	2bec      	cmp	r3, #236	; 0xec
 8005fd0:	d806      	bhi.n	8005fe0 <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 8005fd2:	4b1c      	ldr	r3, [pc, #112]	; (8006044 <TouchParametersActivity+0xb8>)
 8005fd4:	2205      	movs	r2, #5
 8005fd6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005fd8:	4b1b      	ldr	r3, [pc, #108]	; (8006048 <TouchParametersActivity+0xbc>)
 8005fda:	2201      	movs	r2, #1
 8005fdc:	701a      	strb	r2, [r3, #0]
 8005fde:	e025      	b.n	800602c <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005fe0:	88fb      	ldrh	r3, [r7, #6]
 8005fe2:	2bdb      	cmp	r3, #219	; 0xdb
 8005fe4:	d910      	bls.n	8006008 <TouchParametersActivity+0x7c>
 8005fe6:	88fb      	ldrh	r3, [r7, #6]
 8005fe8:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005fec:	d20c      	bcs.n	8006008 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005fee:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005ff0:	2bd7      	cmp	r3, #215	; 0xd7
 8005ff2:	d909      	bls.n	8006008 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005ff4:	88bb      	ldrh	r3, [r7, #4]
 8005ff6:	2bec      	cmp	r3, #236	; 0xec
 8005ff8:	d806      	bhi.n	8006008 <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 8005ffa:	4b12      	ldr	r3, [pc, #72]	; (8006044 <TouchParametersActivity+0xb8>)
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006000:	4b11      	ldr	r3, [pc, #68]	; (8006048 <TouchParametersActivity+0xbc>)
 8006002:	2201      	movs	r2, #1
 8006004:	701a      	strb	r2, [r3, #0]
 8006006:	e011      	b.n	800602c <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006008:	88fb      	ldrh	r3, [r7, #6]
 800600a:	2b77      	cmp	r3, #119	; 0x77
 800600c:	d90e      	bls.n	800602c <TouchParametersActivity+0xa0>
 800600e:	88fb      	ldrh	r3, [r7, #6]
 8006010:	2bd2      	cmp	r3, #210	; 0xd2
 8006012:	d80b      	bhi.n	800602c <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006014:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006016:	2bd7      	cmp	r3, #215	; 0xd7
 8006018:	d908      	bls.n	800602c <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 800601a:	88bb      	ldrh	r3, [r7, #4]
 800601c:	2bec      	cmp	r3, #236	; 0xec
 800601e:	d805      	bhi.n	800602c <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 8006020:	4b08      	ldr	r3, [pc, #32]	; (8006044 <TouchParametersActivity+0xb8>)
 8006022:	2203      	movs	r2, #3
 8006024:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006026:	4b08      	ldr	r3, [pc, #32]	; (8006048 <TouchParametersActivity+0xbc>)
 8006028:	2201      	movs	r2, #1
 800602a:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 800602c:	f004 fab0 	bl	800a590 <HAL_GetTick>
 8006030:	4603      	mov	r3, r0
 8006032:	4a03      	ldr	r2, [pc, #12]	; (8006040 <TouchParametersActivity+0xb4>)
 8006034:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006036:	bf00      	nop
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	2000028c 	.word	0x2000028c
 8006044:	20000290 	.word	0x20000290
 8006048:	20000255 	.word	0x20000255

0800604c <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006052:	f7fc fa59 	bl	8002508 <XPT2046_IsTouched>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d05d      	beq.n	8006118 <TouchSwitchActivity+0xcc>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800605c:	f004 fa98 	bl	800a590 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	4b2f      	ldr	r3, [pc, #188]	; (8006120 <TouchSwitchActivity+0xd4>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800606c:	d354      	bcc.n	8006118 <TouchSwitchActivity+0xcc>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800606e:	1d3a      	adds	r2, r7, #4
 8006070:	1dbb      	adds	r3, r7, #6
 8006072:	4611      	mov	r1, r2
 8006074:	4618      	mov	r0, r3
 8006076:	f7fc fa09 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800607a:	88fb      	ldrh	r3, [r7, #6]
 800607c:	2b09      	cmp	r3, #9
 800607e:	d90f      	bls.n	80060a0 <TouchSwitchActivity+0x54>
 8006080:	88fb      	ldrh	r3, [r7, #6]
 8006082:	2b6e      	cmp	r3, #110	; 0x6e
 8006084:	d80c      	bhi.n	80060a0 <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006086:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006088:	2bd7      	cmp	r3, #215	; 0xd7
 800608a:	d909      	bls.n	80060a0 <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800608c:	88bb      	ldrh	r3, [r7, #4]
 800608e:	2bec      	cmp	r3, #236	; 0xec
 8006090:	d806      	bhi.n	80060a0 <TouchSwitchActivity+0x54>
			{
				State = MENUTFT_PARAMETERS;
 8006092:	4b24      	ldr	r3, [pc, #144]	; (8006124 <TouchSwitchActivity+0xd8>)
 8006094:	2201      	movs	r2, #1
 8006096:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006098:	4b23      	ldr	r3, [pc, #140]	; (8006128 <TouchSwitchActivity+0xdc>)
 800609a:	2201      	movs	r2, #1
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	e036      	b.n	800610e <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80060a0:	88fb      	ldrh	r3, [r7, #6]
 80060a2:	2bdb      	cmp	r3, #219	; 0xdb
 80060a4:	d910      	bls.n	80060c8 <TouchSwitchActivity+0x7c>
 80060a6:	88fb      	ldrh	r3, [r7, #6]
 80060a8:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80060ac:	d20c      	bcs.n	80060c8 <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80060ae:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80060b0:	2bd7      	cmp	r3, #215	; 0xd7
 80060b2:	d909      	bls.n	80060c8 <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80060b4:	88bb      	ldrh	r3, [r7, #4]
 80060b6:	2bec      	cmp	r3, #236	; 0xec
 80060b8:	d806      	bhi.n	80060c8 <TouchSwitchActivity+0x7c>
			{
				State = MENUTFT_LIGHTS;
 80060ba:	4b1a      	ldr	r3, [pc, #104]	; (8006124 <TouchSwitchActivity+0xd8>)
 80060bc:	2205      	movs	r2, #5
 80060be:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80060c0:	4b19      	ldr	r3, [pc, #100]	; (8006128 <TouchSwitchActivity+0xdc>)
 80060c2:	2201      	movs	r2, #1
 80060c4:	701a      	strb	r2, [r3, #0]
 80060c6:	e022      	b.n	800610e <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80060c8:	88fb      	ldrh	r3, [r7, #6]
 80060ca:	2b77      	cmp	r3, #119	; 0x77
 80060cc:	d90f      	bls.n	80060ee <TouchSwitchActivity+0xa2>
 80060ce:	88fb      	ldrh	r3, [r7, #6]
 80060d0:	2bd2      	cmp	r3, #210	; 0xd2
 80060d2:	d80c      	bhi.n	80060ee <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80060d4:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80060d6:	2bd7      	cmp	r3, #215	; 0xd7
 80060d8:	d909      	bls.n	80060ee <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80060da:	88bb      	ldrh	r3, [r7, #4]
 80060dc:	2bec      	cmp	r3, #236	; 0xec
 80060de:	d806      	bhi.n	80060ee <TouchSwitchActivity+0xa2>
			{
				State = MENUTFT_ACTIVITIES;
 80060e0:	4b10      	ldr	r3, [pc, #64]	; (8006124 <TouchSwitchActivity+0xd8>)
 80060e2:	2204      	movs	r2, #4
 80060e4:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80060e6:	4b10      	ldr	r3, [pc, #64]	; (8006128 <TouchSwitchActivity+0xdc>)
 80060e8:	2201      	movs	r2, #1
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	e00f      	b.n	800610e <TouchSwitchActivity+0xc2>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 80060ee:	88fb      	ldrh	r3, [r7, #6]
 80060f0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80060f4:	d30b      	bcc.n	800610e <TouchSwitchActivity+0xc2>
 80060f6:	88fb      	ldrh	r3, [r7, #6]
 80060f8:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80060fc:	d207      	bcs.n	800610e <TouchSwitchActivity+0xc2>
			{
				EF_SetFont(&arial_11ptFontInfo);
 80060fe:	480b      	ldr	r0, [pc, #44]	; (800612c <TouchSwitchActivity+0xe0>)
 8006100:	f7fb fc34 	bl	800196c <EF_SetFont>
				changeSwitchStatusTouch(y);
 8006104:	88bb      	ldrh	r3, [r7, #4]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	4618      	mov	r0, r3
 800610a:	f001 fe55 	bl	8007db8 <changeSwitchStatusTouch>
			}
			TimerTouch = HAL_GetTick();
 800610e:	f004 fa3f 	bl	800a590 <HAL_GetTick>
 8006112:	4603      	mov	r3, r0
 8006114:	4a02      	ldr	r2, [pc, #8]	; (8006120 <TouchSwitchActivity+0xd4>)
 8006116:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006118:	bf00      	nop
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	2000028c 	.word	0x2000028c
 8006124:	20000290 	.word	0x20000290
 8006128:	20000255 	.word	0x20000255
 800612c:	0802774c 	.word	0x0802774c

08006130 <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006136:	f7fc f9e7 	bl	8002508 <XPT2046_IsTouched>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d05b      	beq.n	80061f8 <TouchLightsActivity+0xc8>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006140:	f004 fa26 	bl	800a590 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	4b2e      	ldr	r3, [pc, #184]	; (8006200 <TouchLightsActivity+0xd0>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006150:	d352      	bcc.n	80061f8 <TouchLightsActivity+0xc8>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006152:	1d3a      	adds	r2, r7, #4
 8006154:	1dbb      	adds	r3, r7, #6
 8006156:	4611      	mov	r1, r2
 8006158:	4618      	mov	r0, r3
 800615a:	f7fc f997 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800615e:	88fb      	ldrh	r3, [r7, #6]
 8006160:	2b09      	cmp	r3, #9
 8006162:	d90f      	bls.n	8006184 <TouchLightsActivity+0x54>
 8006164:	88fb      	ldrh	r3, [r7, #6]
 8006166:	2b6e      	cmp	r3, #110	; 0x6e
 8006168:	d80c      	bhi.n	8006184 <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800616a:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800616c:	2bd7      	cmp	r3, #215	; 0xd7
 800616e:	d909      	bls.n	8006184 <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006170:	88bb      	ldrh	r3, [r7, #4]
 8006172:	2bec      	cmp	r3, #236	; 0xec
 8006174:	d806      	bhi.n	8006184 <TouchLightsActivity+0x54>
			{
				State = MENUTFT_SWITCH;
 8006176:	4b23      	ldr	r3, [pc, #140]	; (8006204 <TouchLightsActivity+0xd4>)
 8006178:	2202      	movs	r2, #2
 800617a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800617c:	4b22      	ldr	r3, [pc, #136]	; (8006208 <TouchLightsActivity+0xd8>)
 800617e:	2201      	movs	r2, #1
 8006180:	701a      	strb	r2, [r3, #0]
 8006182:	e034      	b.n	80061ee <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006184:	88fb      	ldrh	r3, [r7, #6]
 8006186:	2bdb      	cmp	r3, #219	; 0xdb
 8006188:	d910      	bls.n	80061ac <TouchLightsActivity+0x7c>
 800618a:	88fb      	ldrh	r3, [r7, #6]
 800618c:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006190:	d20c      	bcs.n	80061ac <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006192:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006194:	2bd7      	cmp	r3, #215	; 0xd7
 8006196:	d909      	bls.n	80061ac <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006198:	88bb      	ldrh	r3, [r7, #4]
 800619a:	2bec      	cmp	r3, #236	; 0xec
 800619c:	d806      	bhi.n	80061ac <TouchLightsActivity+0x7c>
			{
				State = MENUTFT_PARAMETERS;
 800619e:	4b19      	ldr	r3, [pc, #100]	; (8006204 <TouchLightsActivity+0xd4>)
 80061a0:	2201      	movs	r2, #1
 80061a2:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80061a4:	4b18      	ldr	r3, [pc, #96]	; (8006208 <TouchLightsActivity+0xd8>)
 80061a6:	2201      	movs	r2, #1
 80061a8:	701a      	strb	r2, [r3, #0]
 80061aa:	e020      	b.n	80061ee <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80061ac:	88fb      	ldrh	r3, [r7, #6]
 80061ae:	2b77      	cmp	r3, #119	; 0x77
 80061b0:	d90f      	bls.n	80061d2 <TouchLightsActivity+0xa2>
 80061b2:	88fb      	ldrh	r3, [r7, #6]
 80061b4:	2bd2      	cmp	r3, #210	; 0xd2
 80061b6:	d80c      	bhi.n	80061d2 <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80061b8:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80061ba:	2bd7      	cmp	r3, #215	; 0xd7
 80061bc:	d909      	bls.n	80061d2 <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80061be:	88bb      	ldrh	r3, [r7, #4]
 80061c0:	2bec      	cmp	r3, #236	; 0xec
 80061c2:	d806      	bhi.n	80061d2 <TouchLightsActivity+0xa2>
			{
				State = MENUTFT_WS_LED;
 80061c4:	4b0f      	ldr	r3, [pc, #60]	; (8006204 <TouchLightsActivity+0xd4>)
 80061c6:	2206      	movs	r2, #6
 80061c8:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80061ca:	4b0f      	ldr	r3, [pc, #60]	; (8006208 <TouchLightsActivity+0xd8>)
 80061cc:	2201      	movs	r2, #1
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	e00d      	b.n	80061ee <TouchLightsActivity+0xbe>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 80061d2:	88fb      	ldrh	r3, [r7, #6]
 80061d4:	2bc7      	cmp	r3, #199	; 0xc7
 80061d6:	d90a      	bls.n	80061ee <TouchLightsActivity+0xbe>
 80061d8:	88fb      	ldrh	r3, [r7, #6]
 80061da:	2be9      	cmp	r3, #233	; 0xe9
 80061dc:	d807      	bhi.n	80061ee <TouchLightsActivity+0xbe>
			{
				EF_SetFont(&arial_11ptFontInfo);
 80061de:	480b      	ldr	r0, [pc, #44]	; (800620c <TouchLightsActivity+0xdc>)
 80061e0:	f7fb fbc4 	bl	800196c <EF_SetFont>
				changeLightsStatusTouch(y);
 80061e4:	88bb      	ldrh	r3, [r7, #4]
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	4618      	mov	r0, r3
 80061ea:	f001 fe3d 	bl	8007e68 <changeLightsStatusTouch>
			}

			TimerTouch = HAL_GetTick();
 80061ee:	f004 f9cf 	bl	800a590 <HAL_GetTick>
 80061f2:	4603      	mov	r3, r0
 80061f4:	4a02      	ldr	r2, [pc, #8]	; (8006200 <TouchLightsActivity+0xd0>)
 80061f6:	6013      	str	r3, [r2, #0]
		}
	}
}
 80061f8:	bf00      	nop
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	2000028c 	.word	0x2000028c
 8006204:	20000290 	.word	0x20000290
 8006208:	20000255 	.word	0x20000255
 800620c:	0802774c 	.word	0x0802774c

08006210 <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 8006216:	f7fc f977 	bl	8002508 <XPT2046_IsTouched>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 80a3 	beq.w	8006368 <TouchClockActivity+0x158>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8006222:	4853      	ldr	r0, [pc, #332]	; (8006370 <TouchClockActivity+0x160>)
 8006224:	f7fb fba2 	bl	800196c <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006228:	f004 f9b2 	bl	800a590 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	4b51      	ldr	r3, [pc, #324]	; (8006374 <TouchClockActivity+0x164>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006238:	f0c0 8096 	bcc.w	8006368 <TouchClockActivity+0x158>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800623c:	1d3a      	adds	r2, r7, #4
 800623e:	1dbb      	adds	r3, r7, #6
 8006240:	4611      	mov	r1, r2
 8006242:	4618      	mov	r0, r3
 8006244:	f7fc f922 	bl	800248c <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 8006248:	4b4b      	ldr	r3, [pc, #300]	; (8006378 <TouchClockActivity+0x168>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d114      	bne.n	800627a <TouchClockActivity+0x6a>
				{
					Hours = DS3231_GetHour();
 8006250:	f7fc fbfc 	bl	8002a4c <DS3231_GetHour>
 8006254:	4603      	mov	r3, r0
 8006256:	461a      	mov	r2, r3
 8006258:	4b48      	ldr	r3, [pc, #288]	; (800637c <TouchClockActivity+0x16c>)
 800625a:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 800625c:	f7fc fc02 	bl	8002a64 <DS3231_GetMinute>
 8006260:	4603      	mov	r3, r0
 8006262:	461a      	mov	r2, r3
 8006264:	4b46      	ldr	r3, [pc, #280]	; (8006380 <TouchClockActivity+0x170>)
 8006266:	701a      	strb	r2, [r3, #0]
					DayOfWeek = DS3231_GetDayOfWeek();
 8006268:	f7fc fbe4 	bl	8002a34 <DS3231_GetDayOfWeek>
 800626c:	4603      	mov	r3, r0
 800626e:	461a      	mov	r2, r3
 8006270:	4b44      	ldr	r3, [pc, #272]	; (8006384 <TouchClockActivity+0x174>)
 8006272:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 8006274:	4b40      	ldr	r3, [pc, #256]	; (8006378 <TouchClockActivity+0x168>)
 8006276:	2200      	movs	r2, #0
 8006278:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800627a:	88fb      	ldrh	r3, [r7, #6]
 800627c:	2b09      	cmp	r3, #9
 800627e:	d90f      	bls.n	80062a0 <TouchClockActivity+0x90>
 8006280:	88fb      	ldrh	r3, [r7, #6]
 8006282:	2b6e      	cmp	r3, #110	; 0x6e
 8006284:	d80c      	bhi.n	80062a0 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006286:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006288:	2bd7      	cmp	r3, #215	; 0xd7
 800628a:	d909      	bls.n	80062a0 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800628c:	88bb      	ldrh	r3, [r7, #4]
 800628e:	2bec      	cmp	r3, #236	; 0xec
 8006290:	d806      	bhi.n	80062a0 <TouchClockActivity+0x90>
				{
					State = MENUTFT_PARAMETERS;
 8006292:	4b3d      	ldr	r3, [pc, #244]	; (8006388 <TouchClockActivity+0x178>)
 8006294:	2201      	movs	r2, #1
 8006296:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8006298:	4b3c      	ldr	r3, [pc, #240]	; (800638c <TouchClockActivity+0x17c>)
 800629a:	2201      	movs	r2, #1
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	e05e      	b.n	800635e <TouchClockActivity+0x14e>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80062a0:	88fb      	ldrh	r3, [r7, #6]
 80062a2:	2bdb      	cmp	r3, #219	; 0xdb
 80062a4:	d92c      	bls.n	8006300 <TouchClockActivity+0xf0>
 80062a6:	88fb      	ldrh	r3, [r7, #6]
 80062a8:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80062ac:	d228      	bcs.n	8006300 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80062ae:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80062b0:	2bd7      	cmp	r3, #215	; 0xd7
 80062b2:	d925      	bls.n	8006300 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80062b4:	88bb      	ldrh	r3, [r7, #4]
 80062b6:	2bec      	cmp	r3, #236	; 0xec
 80062b8:	d822      	bhi.n	8006300 <TouchClockActivity+0xf0>
				{
					DS3231_SetDayOfWeek(DayOfWeek);
 80062ba:	4b32      	ldr	r3, [pc, #200]	; (8006384 <TouchClockActivity+0x174>)
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fc fbdc 	bl	8002a7c <DS3231_SetDayOfWeek>
					DS3231_SetHour(Hours);
 80062c4:	4b2d      	ldr	r3, [pc, #180]	; (800637c <TouchClockActivity+0x16c>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7fc fbe9 	bl	8002aa0 <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 80062ce:	4b2c      	ldr	r3, [pc, #176]	; (8006380 <TouchClockActivity+0x170>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fc fbf9 	bl	8002aca <DS3231_SetMinute>
					DS3231_SetSecond(50);
 80062d8:	2032      	movs	r0, #50	; 0x32
 80062da:	f7fc fc08 	bl	8002aee <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 80062de:	492c      	ldr	r1, [pc, #176]	; (8006390 <TouchClockActivity+0x180>)
 80062e0:	482c      	ldr	r0, [pc, #176]	; (8006394 <TouchClockActivity+0x184>)
 80062e2:	f00b fe31 	bl	8011f48 <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 80062e6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80062ea:	9301      	str	r3, [sp, #4]
 80062ec:	2301      	movs	r3, #1
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80062f4:	220a      	movs	r2, #10
 80062f6:	212f      	movs	r1, #47	; 0x2f
 80062f8:	4826      	ldr	r0, [pc, #152]	; (8006394 <TouchClockActivity+0x184>)
 80062fa:	f7fb fd51 	bl	8001da0 <EF_PutString>
 80062fe:	e02e      	b.n	800635e <TouchClockActivity+0x14e>
				}

				// Check if that point is inside the Medium Button - change screen to Schedule  screen
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8006300:	88fb      	ldrh	r3, [r7, #6]
 8006302:	2b6d      	cmp	r3, #109	; 0x6d
 8006304:	d90f      	bls.n	8006326 <TouchClockActivity+0x116>
 8006306:	88fb      	ldrh	r3, [r7, #6]
 8006308:	2bdc      	cmp	r3, #220	; 0xdc
 800630a:	d80c      	bhi.n	8006326 <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 800630c:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 800630e:	2bbd      	cmp	r3, #189	; 0xbd
 8006310:	d909      	bls.n	8006326 <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8006312:	88bb      	ldrh	r3, [r7, #4]
 8006314:	2bd4      	cmp	r3, #212	; 0xd4
 8006316:	d806      	bhi.n	8006326 <TouchClockActivity+0x116>
				{
					State = MENUTFT_SCHEDULE_1;
 8006318:	4b1b      	ldr	r3, [pc, #108]	; (8006388 <TouchClockActivity+0x178>)
 800631a:	2207      	movs	r2, #7
 800631c:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 800631e:	4b1b      	ldr	r3, [pc, #108]	; (800638c <TouchClockActivity+0x17c>)
 8006320:	2201      	movs	r2, #1
 8006322:	701a      	strb	r2, [r3, #0]
 8006324:	e01b      	b.n	800635e <TouchClockActivity+0x14e>


				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 8006326:	88fb      	ldrh	r3, [r7, #6]
 8006328:	2bef      	cmp	r3, #239	; 0xef
 800632a:	d90a      	bls.n	8006342 <TouchClockActivity+0x132>
 800632c:	88fb      	ldrh	r3, [r7, #6]
 800632e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8006332:	d806      	bhi.n	8006342 <TouchClockActivity+0x132>
				{
					clockIncreaseOneHourAndMinute(x, y);
 8006334:	88fb      	ldrh	r3, [r7, #6]
 8006336:	88ba      	ldrh	r2, [r7, #4]
 8006338:	4611      	mov	r1, r2
 800633a:	4618      	mov	r0, r3
 800633c:	f001 fc36 	bl	8007bac <clockIncreaseOneHourAndMinute>
 8006340:	e00d      	b.n	800635e <TouchClockActivity+0x14e>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 8006342:	88fb      	ldrh	r3, [r7, #6]
 8006344:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8006348:	d309      	bcc.n	800635e <TouchClockActivity+0x14e>
 800634a:	88fb      	ldrh	r3, [r7, #6]
 800634c:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8006350:	d805      	bhi.n	800635e <TouchClockActivity+0x14e>
				{
					clockIncreaseSixHoursTenMinutes(x,y);
 8006352:	88fb      	ldrh	r3, [r7, #6]
 8006354:	88ba      	ldrh	r2, [r7, #4]
 8006356:	4611      	mov	r1, r2
 8006358:	4618      	mov	r0, r3
 800635a:	f001 fcb5 	bl	8007cc8 <clockIncreaseSixHoursTenMinutes>
				}
				TimerTouch = HAL_GetTick();
 800635e:	f004 f917 	bl	800a590 <HAL_GetTick>
 8006362:	4603      	mov	r3, r0
 8006364:	4a03      	ldr	r2, [pc, #12]	; (8006374 <TouchClockActivity+0x164>)
 8006366:	6013      	str	r3, [r2, #0]
			}
		}
}
 8006368:	bf00      	nop
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	080296c4 	.word	0x080296c4
 8006374:	2000028c 	.word	0x2000028c
 8006378:	20000256 	.word	0x20000256
 800637c:	20000031 	.word	0x20000031
 8006380:	20000032 	.word	0x20000032
 8006384:	20000030 	.word	0x20000030
 8006388:	20000290 	.word	0x20000290
 800638c:	20000255 	.word	0x20000255
 8006390:	080160dc 	.word	0x080160dc
 8006394:	200002c0 	.word	0x200002c0

08006398 <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
	if(XPT2046_IsTouched())
 800639e:	f7fc f8b3 	bl	8002508 <XPT2046_IsTouched>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d034      	beq.n	8006412 <TouchPredefinedActivityActivity+0x7a>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80063a8:	f004 f8f2 	bl	800a590 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	4b1b      	ldr	r3, [pc, #108]	; (800641c <TouchPredefinedActivityActivity+0x84>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063b8:	d32b      	bcc.n	8006412 <TouchPredefinedActivityActivity+0x7a>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80063ba:	1d3a      	adds	r2, r7, #4
 80063bc:	1dbb      	adds	r3, r7, #6
 80063be:	4611      	mov	r1, r2
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fc f863 	bl	800248c <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 80063c6:	4816      	ldr	r0, [pc, #88]	; (8006420 <TouchPredefinedActivityActivity+0x88>)
 80063c8:	f7fb fad0 	bl	800196c <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80063cc:	88fb      	ldrh	r3, [r7, #6]
 80063ce:	2b09      	cmp	r3, #9
 80063d0:	d90f      	bls.n	80063f2 <TouchPredefinedActivityActivity+0x5a>
 80063d2:	88fb      	ldrh	r3, [r7, #6]
 80063d4:	2b6e      	cmp	r3, #110	; 0x6e
 80063d6:	d80c      	bhi.n	80063f2 <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80063d8:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80063da:	2bd7      	cmp	r3, #215	; 0xd7
 80063dc:	d909      	bls.n	80063f2 <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80063de:	88bb      	ldrh	r3, [r7, #4]
 80063e0:	2bec      	cmp	r3, #236	; 0xec
 80063e2:	d806      	bhi.n	80063f2 <TouchPredefinedActivityActivity+0x5a>
			{
				State = MENUTFT_SWITCH;
 80063e4:	4b0f      	ldr	r3, [pc, #60]	; (8006424 <TouchPredefinedActivityActivity+0x8c>)
 80063e6:	2202      	movs	r2, #2
 80063e8:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80063ea:	4b0f      	ldr	r3, [pc, #60]	; (8006428 <TouchPredefinedActivityActivity+0x90>)
 80063ec:	2201      	movs	r2, #1
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	e00a      	b.n	8006408 <TouchPredefinedActivityActivity+0x70>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 80063f2:	88fb      	ldrh	r3, [r7, #6]
 80063f4:	2b63      	cmp	r3, #99	; 0x63
 80063f6:	d907      	bls.n	8006408 <TouchPredefinedActivityActivity+0x70>
 80063f8:	88fb      	ldrh	r3, [r7, #6]
 80063fa:	2bdc      	cmp	r3, #220	; 0xdc
 80063fc:	d804      	bhi.n	8006408 <TouchPredefinedActivityActivity+0x70>
			{
				predefinedActivityTouchAction(y);
 80063fe:	88bb      	ldrh	r3, [r7, #4]
 8006400:	b2db      	uxtb	r3, r3
 8006402:	4618      	mov	r0, r3
 8006404:	f001 fd88 	bl	8007f18 <predefinedActivityTouchAction>
			}
			TimerTouch = HAL_GetTick();
 8006408:	f004 f8c2 	bl	800a590 <HAL_GetTick>
 800640c:	4603      	mov	r3, r0
 800640e:	4a03      	ldr	r2, [pc, #12]	; (800641c <TouchPredefinedActivityActivity+0x84>)
 8006410:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006412:	bf00      	nop
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	2000028c 	.word	0x2000028c
 8006420:	0802774c 	.word	0x0802774c
 8006424:	20000290 	.word	0x20000290
 8006428:	20000255 	.word	0x20000255

0800642c <TouchWSLedActivity>:
//
// Function to handling touch on LEDs WS2812b controlling screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchWSLedActivity(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
	// Check if screen was touched
		if(XPT2046_IsTouched())
 8006432:	f7fc f869 	bl	8002508 <XPT2046_IsTouched>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d050      	beq.n	80064de <TouchWSLedActivity+0xb2>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 800643c:	482a      	ldr	r0, [pc, #168]	; (80064e8 <TouchWSLedActivity+0xbc>)
 800643e:	f7fb fa95 	bl	800196c <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006442:	f004 f8a5 	bl	800a590 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	4b28      	ldr	r3, [pc, #160]	; (80064ec <TouchWSLedActivity+0xc0>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006452:	d344      	bcc.n	80064de <TouchWSLedActivity+0xb2>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006454:	1d3a      	adds	r2, r7, #4
 8006456:	1dbb      	adds	r3, r7, #6
 8006458:	4611      	mov	r1, r2
 800645a:	4618      	mov	r0, r3
 800645c:	f7fc f816 	bl	800248c <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get number of LEDs, but we do it only once
 8006460:	4b23      	ldr	r3, [pc, #140]	; (80064f0 <TouchWSLedActivity+0xc4>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d10b      	bne.n	8006480 <TouchWSLedActivity+0x54>
				{
					while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 8006468:	bf00      	nop
 800646a:	2201      	movs	r2, #1
 800646c:	4921      	ldr	r1, [pc, #132]	; (80064f4 <TouchWSLedActivity+0xc8>)
 800646e:	2001      	movs	r0, #1
 8006470:	f7fc fb9a 	bl	8002ba8 <eeprom_read>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1f7      	bne.n	800646a <TouchWSLedActivity+0x3e>
					WSLedChangeFlag = 0;
 800647a:	4b1f      	ldr	r3, [pc, #124]	; (80064f8 <TouchWSLedActivity+0xcc>)
 800647c:	2200      	movs	r2, #0
 800647e:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006480:	88fb      	ldrh	r3, [r7, #6]
 8006482:	2b09      	cmp	r3, #9
 8006484:	d90f      	bls.n	80064a6 <TouchWSLedActivity+0x7a>
 8006486:	88fb      	ldrh	r3, [r7, #6]
 8006488:	2b6e      	cmp	r3, #110	; 0x6e
 800648a:	d80c      	bhi.n	80064a6 <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800648c:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800648e:	2bd7      	cmp	r3, #215	; 0xd7
 8006490:	d909      	bls.n	80064a6 <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006492:	88bb      	ldrh	r3, [r7, #4]
 8006494:	2bec      	cmp	r3, #236	; 0xec
 8006496:	d806      	bhi.n	80064a6 <TouchWSLedActivity+0x7a>
				{
					State = MENUTFT_LIGHTS;
 8006498:	4b18      	ldr	r3, [pc, #96]	; (80064fc <TouchWSLedActivity+0xd0>)
 800649a:	2205      	movs	r2, #5
 800649c:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 800649e:	4b18      	ldr	r3, [pc, #96]	; (8006500 <TouchWSLedActivity+0xd4>)
 80064a0:	2201      	movs	r2, #1
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	e016      	b.n	80064d4 <TouchWSLedActivity+0xa8>


				//
				// Check if it is button to increase number of LEDs - first line
				//
				else if((y >= WS_B_1_POZ_Y)&&(y <= (WS_B_1_POZ_Y + WS_LED_BUTTON_H)))
 80064a6:	88bb      	ldrh	r3, [r7, #4]
 80064a8:	2b40      	cmp	r3, #64	; 0x40
 80064aa:	d90b      	bls.n	80064c4 <TouchWSLedActivity+0x98>
 80064ac:	88bb      	ldrh	r3, [r7, #4]
 80064ae:	2b56      	cmp	r3, #86	; 0x56
 80064b0:	d808      	bhi.n	80064c4 <TouchWSLedActivity+0x98>
				{
					increaseNumberOfWSLedOnTFT(x,y);
 80064b2:	88fb      	ldrh	r3, [r7, #6]
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	88ba      	ldrh	r2, [r7, #4]
 80064b8:	b2d2      	uxtb	r2, r2
 80064ba:	4611      	mov	r1, r2
 80064bc:	4618      	mov	r0, r3
 80064be:	f001 fe15 	bl	80080ec <increaseNumberOfWSLedOnTFT>
 80064c2:	e007      	b.n	80064d4 <TouchWSLedActivity+0xa8>
				//
				// Check if it is second line button to change LEDs to WHITE // BLUE // ETC
				//
				else
				{
					changeTypeOfWSLights(x, y);
 80064c4:	88fb      	ldrh	r3, [r7, #6]
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	88ba      	ldrh	r2, [r7, #4]
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	4611      	mov	r1, r2
 80064ce:	4618      	mov	r0, r3
 80064d0:	f001 fe96 	bl	8008200 <changeTypeOfWSLights>
				}

				TimerTouch = HAL_GetTick();
 80064d4:	f004 f85c 	bl	800a590 <HAL_GetTick>
 80064d8:	4603      	mov	r3, r0
 80064da:	4a04      	ldr	r2, [pc, #16]	; (80064ec <TouchWSLedActivity+0xc0>)
 80064dc:	6013      	str	r3, [r2, #0]
			}
		}
}
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	080296c4 	.word	0x080296c4
 80064ec:	2000028c 	.word	0x2000028c
 80064f0:	20000256 	.word	0x20000256
 80064f4:	20000033 	.word	0x20000033
 80064f8:	20000257 	.word	0x20000257
 80064fc:	20000290 	.word	0x20000290
 8006500:	20000255 	.word	0x20000255

08006504 <Schedule1Activity>:
//
// Function to handling touch on Schedule 1 (ONE) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule1Activity()
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af02      	add	r7, sp, #8
	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 800650a:	4b70      	ldr	r3, [pc, #448]	; (80066cc <Schedule1Activity+0x1c8>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d105      	bne.n	800651e <Schedule1Activity+0x1a>
	{
		updateAllSchedulesInfo(1);
 8006512:	2001      	movs	r0, #1
 8006514:	f001 faf6 	bl	8007b04 <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 8006518:	4b6c      	ldr	r3, [pc, #432]	; (80066cc <Schedule1Activity+0x1c8>)
 800651a:	2200      	movs	r2, #0
 800651c:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 800651e:	f7fb fff3 	bl	8002508 <XPT2046_IsTouched>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 80cc 	beq.w	80066c2 <Schedule1Activity+0x1be>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800652a:	f004 f831 	bl	800a590 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	4b67      	ldr	r3, [pc, #412]	; (80066d0 <Schedule1Activity+0x1cc>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800653a:	f0c0 80c2 	bcc.w	80066c2 <Schedule1Activity+0x1be>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800653e:	1d3a      	adds	r2, r7, #4
 8006540:	1dbb      	adds	r3, r7, #6
 8006542:	4611      	mov	r1, r2
 8006544:	4618      	mov	r0, r3
 8006546:	f7fb ffa1 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800654a:	88fb      	ldrh	r3, [r7, #6]
 800654c:	2b09      	cmp	r3, #9
 800654e:	d90f      	bls.n	8006570 <Schedule1Activity+0x6c>
 8006550:	88fb      	ldrh	r3, [r7, #6]
 8006552:	2b6e      	cmp	r3, #110	; 0x6e
 8006554:	d80c      	bhi.n	8006570 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006556:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006558:	2bd7      	cmp	r3, #215	; 0xd7
 800655a:	d909      	bls.n	8006570 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800655c:	88bb      	ldrh	r3, [r7, #4]
 800655e:	2bec      	cmp	r3, #236	; 0xec
 8006560:	d806      	bhi.n	8006570 <Schedule1Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 8006562:	4b5c      	ldr	r3, [pc, #368]	; (80066d4 <Schedule1Activity+0x1d0>)
 8006564:	2203      	movs	r2, #3
 8006566:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006568:	4b5b      	ldr	r3, [pc, #364]	; (80066d8 <Schedule1Activity+0x1d4>)
 800656a:	2201      	movs	r2, #1
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	e0a3      	b.n	80066b8 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006570:	88fb      	ldrh	r3, [r7, #6]
 8006572:	2bdb      	cmp	r3, #219	; 0xdb
 8006574:	d910      	bls.n	8006598 <Schedule1Activity+0x94>
 8006576:	88fb      	ldrh	r3, [r7, #6]
 8006578:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 800657c:	d20c      	bcs.n	8006598 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800657e:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006580:	2bd7      	cmp	r3, #215	; 0xd7
 8006582:	d909      	bls.n	8006598 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006584:	88bb      	ldrh	r3, [r7, #4]
 8006586:	2bec      	cmp	r3, #236	; 0xec
 8006588:	d806      	bhi.n	8006598 <Schedule1Activity+0x94>
			{
				State = MENUTFT_SCHEDULE_2;
 800658a:	4b52      	ldr	r3, [pc, #328]	; (80066d4 <Schedule1Activity+0x1d0>)
 800658c:	2208      	movs	r2, #8
 800658e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006590:	4b51      	ldr	r3, [pc, #324]	; (80066d8 <Schedule1Activity+0x1d4>)
 8006592:	2201      	movs	r2, #1
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	e08f      	b.n	80066b8 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006598:	88bb      	ldrh	r3, [r7, #4]
 800659a:	2b31      	cmp	r3, #49	; 0x31
 800659c:	d909      	bls.n	80065b2 <Schedule1Activity+0xae>
 800659e:	88bb      	ldrh	r3, [r7, #4]
 80065a0:	2b46      	cmp	r3, #70	; 0x46
 80065a2:	d806      	bhi.n	80065b2 <Schedule1Activity+0xae>
			{
				MenuTFTSchedule1ActivityDayOfWeekRow(x,y);
 80065a4:	88fb      	ldrh	r3, [r7, #6]
 80065a6:	88ba      	ldrh	r2, [r7, #4]
 80065a8:	4611      	mov	r1, r2
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 f99a 	bl	80068e4 <MenuTFTSchedule1ActivityDayOfWeekRow>
 80065b0:	e082      	b.n	80066b8 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80065b2:	88bb      	ldrh	r3, [r7, #4]
 80065b4:	2b64      	cmp	r3, #100	; 0x64
 80065b6:	d909      	bls.n	80065cc <Schedule1Activity+0xc8>
 80065b8:	88bb      	ldrh	r3, [r7, #4]
 80065ba:	2b79      	cmp	r3, #121	; 0x79
 80065bc:	d806      	bhi.n	80065cc <Schedule1Activity+0xc8>
			{
				MenuTFTSchedule1ActivityHourMinuteONAdd(x,y);
 80065be:	88fb      	ldrh	r3, [r7, #6]
 80065c0:	88ba      	ldrh	r2, [r7, #4]
 80065c2:	4611      	mov	r1, r2
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 fc67 	bl	8006e98 <MenuTFTSchedule1ActivityHourMinuteONAdd>
 80065ca:	e075      	b.n	80066b8 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80065cc:	88bb      	ldrh	r3, [r7, #4]
 80065ce:	2b87      	cmp	r3, #135	; 0x87
 80065d0:	d909      	bls.n	80065e6 <Schedule1Activity+0xe2>
 80065d2:	88bb      	ldrh	r3, [r7, #4]
 80065d4:	2b9c      	cmp	r3, #156	; 0x9c
 80065d6:	d806      	bhi.n	80065e6 <Schedule1Activity+0xe2>
			{
				MenuTFTSchedule1ActivityHourMinuteOFFAdd(x,y);
 80065d8:	88fb      	ldrh	r3, [r7, #6]
 80065da:	88ba      	ldrh	r2, [r7, #4]
 80065dc:	4611      	mov	r1, r2
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fd24 	bl	800702c <MenuTFTSchedule1ActivityHourMinuteOFFAdd>
 80065e4:	e068      	b.n	80066b8 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 80065e6:	88bb      	ldrh	r3, [r7, #4]
 80065e8:	2ba9      	cmp	r3, #169	; 0xa9
 80065ea:	d909      	bls.n	8006600 <Schedule1Activity+0xfc>
 80065ec:	88bb      	ldrh	r3, [r7, #4]
 80065ee:	2bbe      	cmp	r3, #190	; 0xbe
 80065f0:	d806      	bhi.n	8006600 <Schedule1Activity+0xfc>
			{
				MenuTFTSchedule1ActivityRelaysAndLightsRow(x,y);
 80065f2:	88fb      	ldrh	r3, [r7, #6]
 80065f4:	88ba      	ldrh	r2, [r7, #4]
 80065f6:	4611      	mov	r1, r2
 80065f8:	4618      	mov	r0, r3
 80065fa:	f001 f857 	bl	80076ac <MenuTFTSchedule1ActivityRelaysAndLightsRow>
 80065fe:	e05b      	b.n	80066b8 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006600:	88fb      	ldrh	r3, [r7, #6]
 8006602:	2b77      	cmp	r3, #119	; 0x77
 8006604:	d958      	bls.n	80066b8 <Schedule1Activity+0x1b4>
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	2bd2      	cmp	r3, #210	; 0xd2
 800660a:	d855      	bhi.n	80066b8 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 800660c:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 800660e:	2bd7      	cmp	r3, #215	; 0xd7
 8006610:	d952      	bls.n	80066b8 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006612:	88bb      	ldrh	r3, [r7, #4]
 8006614:	2bec      	cmp	r3, #236	; 0xec
 8006616:	d84f      	bhi.n	80066b8 <Schedule1Activity+0x1b4>
			{
				EEPROM_ScheduleHourOnUpdate(1, hourOnSchedule1);
 8006618:	4b30      	ldr	r3, [pc, #192]	; (80066dc <Schedule1Activity+0x1d8>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	4619      	mov	r1, r3
 800661e:	2001      	movs	r0, #1
 8006620:	f7fc fe39 	bl	8003296 <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(1, minuteOnSchedule1);
 8006624:	4b2e      	ldr	r3, [pc, #184]	; (80066e0 <Schedule1Activity+0x1dc>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	4619      	mov	r1, r3
 800662a:	2001      	movs	r0, #1
 800662c:	f7fc fe56 	bl	80032dc <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(1, hourOffSchedule1);
 8006630:	4b2c      	ldr	r3, [pc, #176]	; (80066e4 <Schedule1Activity+0x1e0>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	4619      	mov	r1, r3
 8006636:	2001      	movs	r0, #1
 8006638:	f7fc fe73 	bl	8003322 <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(1, minuteOffSchedule1);
 800663c:	4b2a      	ldr	r3, [pc, #168]	; (80066e8 <Schedule1Activity+0x1e4>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	4619      	mov	r1, r3
 8006642:	2001      	movs	r0, #1
 8006644:	f7fc fe90 	bl	8003368 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(1,  schedule1DayInWeekTab);
 8006648:	4928      	ldr	r1, [pc, #160]	; (80066ec <Schedule1Activity+0x1e8>)
 800664a:	2001      	movs	r0, #1
 800664c:	f7fc fc83 	bl	8002f56 <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(1, schedule1RelayAndSwitchTab);
 8006650:	4927      	ldr	r1, [pc, #156]	; (80066f0 <Schedule1Activity+0x1ec>)
 8006652:	2001      	movs	r0, #1
 8006654:	f7fc fd2a 	bl	80030ac <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 8006658:	4826      	ldr	r0, [pc, #152]	; (80066f4 <Schedule1Activity+0x1f0>)
 800665a:	f7fb f987 	bl	800196c <EF_SetFont>
				sprintf((char*)Msg, " H1 ZMIENIONY      ");
 800665e:	4926      	ldr	r1, [pc, #152]	; (80066f8 <Schedule1Activity+0x1f4>)
 8006660:	4826      	ldr	r0, [pc, #152]	; (80066fc <Schedule1Activity+0x1f8>)
 8006662:	f00b fc71 	bl	8011f48 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 8006666:	f24c 6318 	movw	r3, #50712	; 0xc618
 800666a:	9301      	str	r3, [sp, #4]
 800666c:	2301      	movs	r3, #1
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006674:	220a      	movs	r2, #10
 8006676:	2128      	movs	r1, #40	; 0x28
 8006678:	4820      	ldr	r0, [pc, #128]	; (80066fc <Schedule1Activity+0x1f8>)
 800667a:	f7fb fb91 	bl	8001da0 <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 800667e:	4820      	ldr	r0, [pc, #128]	; (8006700 <Schedule1Activity+0x1fc>)
 8006680:	f7fb f974 	bl	800196c <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8006684:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006688:	9301      	str	r3, [sp, #4]
 800668a:	2305      	movs	r3, #5
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	2314      	movs	r3, #20
 8006690:	225a      	movs	r2, #90	; 0x5a
 8006692:	21d8      	movs	r1, #216	; 0xd8
 8006694:	2078      	movs	r0, #120	; 0x78
 8006696:	f7fb f918 	bl	80018ca <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 800669a:	491a      	ldr	r1, [pc, #104]	; (8006704 <Schedule1Activity+0x200>)
 800669c:	4817      	ldr	r0, [pc, #92]	; (80066fc <Schedule1Activity+0x1f8>)
 800669e:	f00b fc53 	bl	8011f48 <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80066a2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80066a6:	9301      	str	r3, [sp, #4]
 80066a8:	2300      	movs	r3, #0
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	2300      	movs	r3, #0
 80066ae:	22da      	movs	r2, #218	; 0xda
 80066b0:	217e      	movs	r1, #126	; 0x7e
 80066b2:	4812      	ldr	r0, [pc, #72]	; (80066fc <Schedule1Activity+0x1f8>)
 80066b4:	f7fb fb74 	bl	8001da0 <EF_PutString>
				//TODO! Day of week
			}
			TimerTouch = HAL_GetTick();
 80066b8:	f003 ff6a 	bl	800a590 <HAL_GetTick>
 80066bc:	4603      	mov	r3, r0
 80066be:	4a04      	ldr	r2, [pc, #16]	; (80066d0 <Schedule1Activity+0x1cc>)
 80066c0:	6013      	str	r3, [r2, #0]
		}
	}
}
 80066c2:	bf00      	nop
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	20000258 	.word	0x20000258
 80066d0:	2000028c 	.word	0x2000028c
 80066d4:	20000290 	.word	0x20000290
 80066d8:	20000255 	.word	0x20000255
 80066dc:	20000281 	.word	0x20000281
 80066e0:	20000283 	.word	0x20000283
 80066e4:	20000282 	.word	0x20000282
 80066e8:	20000284 	.word	0x20000284
 80066ec:	2000025c 	.word	0x2000025c
 80066f0:	20000264 	.word	0x20000264
 80066f4:	080296c4 	.word	0x080296c4
 80066f8:	080160ec 	.word	0x080160ec
 80066fc:	200002c0 	.word	0x200002c0
 8006700:	0802774c 	.word	0x0802774c
 8006704:	08016100 	.word	0x08016100

08006708 <Schedule2Activity>:
//
// Function to handling touch on Schedule 2 (TWO) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule2Activity()
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af02      	add	r7, sp, #8

	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 800670e:	4b66      	ldr	r3, [pc, #408]	; (80068a8 <Schedule2Activity+0x1a0>)
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d105      	bne.n	8006722 <Schedule2Activity+0x1a>
	{
		updateAllSchedulesInfo(2);
 8006716:	2002      	movs	r0, #2
 8006718:	f001 f9f4 	bl	8007b04 <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 800671c:	4b62      	ldr	r3, [pc, #392]	; (80068a8 <Schedule2Activity+0x1a0>)
 800671e:	2200      	movs	r2, #0
 8006720:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006722:	f7fb fef1 	bl	8002508 <XPT2046_IsTouched>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 80b8 	beq.w	800689e <Schedule2Activity+0x196>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800672e:	f003 ff2f 	bl	800a590 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	4b5d      	ldr	r3, [pc, #372]	; (80068ac <Schedule2Activity+0x1a4>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800673e:	f0c0 80ae 	bcc.w	800689e <Schedule2Activity+0x196>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006742:	1d3a      	adds	r2, r7, #4
 8006744:	1dbb      	adds	r3, r7, #6
 8006746:	4611      	mov	r1, r2
 8006748:	4618      	mov	r0, r3
 800674a:	f7fb fe9f 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	2b09      	cmp	r3, #9
 8006752:	d90f      	bls.n	8006774 <Schedule2Activity+0x6c>
 8006754:	88fb      	ldrh	r3, [r7, #6]
 8006756:	2b6e      	cmp	r3, #110	; 0x6e
 8006758:	d80c      	bhi.n	8006774 <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800675a:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800675c:	2bd7      	cmp	r3, #215	; 0xd7
 800675e:	d909      	bls.n	8006774 <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006760:	88bb      	ldrh	r3, [r7, #4]
 8006762:	2bec      	cmp	r3, #236	; 0xec
 8006764:	d806      	bhi.n	8006774 <Schedule2Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 8006766:	4b52      	ldr	r3, [pc, #328]	; (80068b0 <Schedule2Activity+0x1a8>)
 8006768:	2203      	movs	r2, #3
 800676a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800676c:	4b51      	ldr	r3, [pc, #324]	; (80068b4 <Schedule2Activity+0x1ac>)
 800676e:	2201      	movs	r2, #1
 8006770:	701a      	strb	r2, [r3, #0]
 8006772:	e08f      	b.n	8006894 <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006774:	88bb      	ldrh	r3, [r7, #4]
 8006776:	2b31      	cmp	r3, #49	; 0x31
 8006778:	d909      	bls.n	800678e <Schedule2Activity+0x86>
 800677a:	88bb      	ldrh	r3, [r7, #4]
 800677c:	2b46      	cmp	r3, #70	; 0x46
 800677e:	d806      	bhi.n	800678e <Schedule2Activity+0x86>
			{
				MenuTFTSchedule2ActivityDayOfWeekRow(x,y);
 8006780:	88fb      	ldrh	r3, [r7, #6]
 8006782:	88ba      	ldrh	r2, [r7, #4]
 8006784:	4611      	mov	r1, r2
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fd1a 	bl	80071c0 <MenuTFTSchedule2ActivityDayOfWeekRow>
 800678c:	e082      	b.n	8006894 <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 800678e:	88bb      	ldrh	r3, [r7, #4]
 8006790:	2b64      	cmp	r3, #100	; 0x64
 8006792:	d909      	bls.n	80067a8 <Schedule2Activity+0xa0>
 8006794:	88bb      	ldrh	r3, [r7, #4]
 8006796:	2b79      	cmp	r3, #121	; 0x79
 8006798:	d806      	bhi.n	80067a8 <Schedule2Activity+0xa0>
			{
				MenuTFTSchedule2ActivityHourMinuteONAdd(x,y);
 800679a:	88fb      	ldrh	r3, [r7, #6]
 800679c:	88ba      	ldrh	r2, [r7, #4]
 800679e:	4611      	mov	r1, r2
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 fdef 	bl	8007384 <MenuTFTSchedule2ActivityHourMinuteONAdd>
 80067a6:	e075      	b.n	8006894 <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80067a8:	88bb      	ldrh	r3, [r7, #4]
 80067aa:	2b87      	cmp	r3, #135	; 0x87
 80067ac:	d909      	bls.n	80067c2 <Schedule2Activity+0xba>
 80067ae:	88bb      	ldrh	r3, [r7, #4]
 80067b0:	2b9c      	cmp	r3, #156	; 0x9c
 80067b2:	d806      	bhi.n	80067c2 <Schedule2Activity+0xba>
			{
				MenuTFTSchedule2ActivityHourMinuteOFFAdd(x,y);
 80067b4:	88fb      	ldrh	r3, [r7, #6]
 80067b6:	88ba      	ldrh	r2, [r7, #4]
 80067b8:	4611      	mov	r1, r2
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 feac 	bl	8007518 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>
 80067c0:	e068      	b.n	8006894 <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 80067c2:	88bb      	ldrh	r3, [r7, #4]
 80067c4:	2ba9      	cmp	r3, #169	; 0xa9
 80067c6:	d909      	bls.n	80067dc <Schedule2Activity+0xd4>
 80067c8:	88bb      	ldrh	r3, [r7, #4]
 80067ca:	2bbe      	cmp	r3, #190	; 0xbe
 80067cc:	d806      	bhi.n	80067dc <Schedule2Activity+0xd4>
			{
				MenuTFTSchedule2ActivityRelaysAndLightsRow(x,y);
 80067ce:	88fb      	ldrh	r3, [r7, #6]
 80067d0:	88ba      	ldrh	r2, [r7, #4]
 80067d2:	4611      	mov	r1, r2
 80067d4:	4618      	mov	r0, r3
 80067d6:	f001 f87f 	bl	80078d8 <MenuTFTSchedule2ActivityRelaysAndLightsRow>
 80067da:	e05b      	b.n	8006894 <Schedule2Activity+0x18c>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80067dc:	88fb      	ldrh	r3, [r7, #6]
 80067de:	2b77      	cmp	r3, #119	; 0x77
 80067e0:	d958      	bls.n	8006894 <Schedule2Activity+0x18c>
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	2bd2      	cmp	r3, #210	; 0xd2
 80067e6:	d855      	bhi.n	8006894 <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80067e8:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80067ea:	2bd7      	cmp	r3, #215	; 0xd7
 80067ec:	d952      	bls.n	8006894 <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80067ee:	88bb      	ldrh	r3, [r7, #4]
 80067f0:	2bec      	cmp	r3, #236	; 0xec
 80067f2:	d84f      	bhi.n	8006894 <Schedule2Activity+0x18c>
			{
				EEPROM_ScheduleHourOnUpdate(2, hourOnSchedule2);
 80067f4:	4b30      	ldr	r3, [pc, #192]	; (80068b8 <Schedule2Activity+0x1b0>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	4619      	mov	r1, r3
 80067fa:	2002      	movs	r0, #2
 80067fc:	f7fc fd4b 	bl	8003296 <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(2, minuteOnSchedule2);
 8006800:	4b2e      	ldr	r3, [pc, #184]	; (80068bc <Schedule2Activity+0x1b4>)
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	4619      	mov	r1, r3
 8006806:	2002      	movs	r0, #2
 8006808:	f7fc fd68 	bl	80032dc <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(2, hourOffSchedule2);
 800680c:	4b2c      	ldr	r3, [pc, #176]	; (80068c0 <Schedule2Activity+0x1b8>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	4619      	mov	r1, r3
 8006812:	2002      	movs	r0, #2
 8006814:	f7fc fd85 	bl	8003322 <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(2, minuteOffSchedule2);
 8006818:	4b2a      	ldr	r3, [pc, #168]	; (80068c4 <Schedule2Activity+0x1bc>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	4619      	mov	r1, r3
 800681e:	2002      	movs	r0, #2
 8006820:	f7fc fda2 	bl	8003368 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(2,  schedule2DayInWeekTab);
 8006824:	4928      	ldr	r1, [pc, #160]	; (80068c8 <Schedule2Activity+0x1c0>)
 8006826:	2002      	movs	r0, #2
 8006828:	f7fc fb95 	bl	8002f56 <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(2, schedule2RelayAndSwitchTab);
 800682c:	4927      	ldr	r1, [pc, #156]	; (80068cc <Schedule2Activity+0x1c4>)
 800682e:	2002      	movs	r0, #2
 8006830:	f7fc fc3c 	bl	80030ac <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 8006834:	4826      	ldr	r0, [pc, #152]	; (80068d0 <Schedule2Activity+0x1c8>)
 8006836:	f7fb f899 	bl	800196c <EF_SetFont>
				sprintf((char*)Msg, " H2 ZMIENIONY       ");
 800683a:	4926      	ldr	r1, [pc, #152]	; (80068d4 <Schedule2Activity+0x1cc>)
 800683c:	4826      	ldr	r0, [pc, #152]	; (80068d8 <Schedule2Activity+0x1d0>)
 800683e:	f00b fb83 	bl	8011f48 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 8006842:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006846:	9301      	str	r3, [sp, #4]
 8006848:	2301      	movs	r3, #1
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006850:	220a      	movs	r2, #10
 8006852:	2128      	movs	r1, #40	; 0x28
 8006854:	4820      	ldr	r0, [pc, #128]	; (80068d8 <Schedule2Activity+0x1d0>)
 8006856:	f7fb faa3 	bl	8001da0 <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 800685a:	4820      	ldr	r0, [pc, #128]	; (80068dc <Schedule2Activity+0x1d4>)
 800685c:	f7fb f886 	bl	800196c <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8006860:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006864:	9301      	str	r3, [sp, #4]
 8006866:	2305      	movs	r3, #5
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	2314      	movs	r3, #20
 800686c:	225a      	movs	r2, #90	; 0x5a
 800686e:	21d8      	movs	r1, #216	; 0xd8
 8006870:	2078      	movs	r0, #120	; 0x78
 8006872:	f7fb f82a 	bl	80018ca <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 8006876:	491a      	ldr	r1, [pc, #104]	; (80068e0 <Schedule2Activity+0x1d8>)
 8006878:	4817      	ldr	r0, [pc, #92]	; (80068d8 <Schedule2Activity+0x1d0>)
 800687a:	f00b fb65 	bl	8011f48 <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800687e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006882:	9301      	str	r3, [sp, #4]
 8006884:	2300      	movs	r3, #0
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	2300      	movs	r3, #0
 800688a:	22da      	movs	r2, #218	; 0xda
 800688c:	217e      	movs	r1, #126	; 0x7e
 800688e:	4812      	ldr	r0, [pc, #72]	; (80068d8 <Schedule2Activity+0x1d0>)
 8006890:	f7fb fa86 	bl	8001da0 <EF_PutString>
				// TODO! Add day of week
			}
			TimerTouch = HAL_GetTick();
 8006894:	f003 fe7c 	bl	800a590 <HAL_GetTick>
 8006898:	4603      	mov	r3, r0
 800689a:	4a04      	ldr	r2, [pc, #16]	; (80068ac <Schedule2Activity+0x1a4>)
 800689c:	6013      	str	r3, [r2, #0]
		}
	}
}
 800689e:	bf00      	nop
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	20000258 	.word	0x20000258
 80068ac:	2000028c 	.word	0x2000028c
 80068b0:	20000290 	.word	0x20000290
 80068b4:	20000255 	.word	0x20000255
 80068b8:	20000285 	.word	0x20000285
 80068bc:	20000287 	.word	0x20000287
 80068c0:	20000286 	.word	0x20000286
 80068c4:	20000288 	.word	0x20000288
 80068c8:	20000270 	.word	0x20000270
 80068cc:	20000278 	.word	0x20000278
 80068d0:	080296c4 	.word	0x080296c4
 80068d4:	08016108 	.word	0x08016108
 80068d8:	200002c0 	.word	0x200002c0
 80068dc:	0802774c 	.word	0x0802774c
 80068e0:	08016100 	.word	0x08016100

080068e4 <MenuTFTSchedule1ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule1Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule1ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	4603      	mov	r3, r0
 80068ec:	460a      	mov	r2, r1
 80068ee:	80fb      	strh	r3, [r7, #6]
 80068f0:	4613      	mov	r3, r2
 80068f2:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 80068f4:	88fb      	ldrh	r3, [r7, #6]
 80068f6:	2b3b      	cmp	r3, #59	; 0x3b
 80068f8:	d91a      	bls.n	8006930 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
 80068fa:	88fb      	ldrh	r3, [r7, #6]
 80068fc:	2b50      	cmp	r3, #80	; 0x50
 80068fe:	d817      	bhi.n	8006930 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
	{
		if(schedule1DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8006900:	4b68      	ldr	r3, [pc, #416]	; (8006aa4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d004      	beq.n	8006912 <MenuTFTSchedule1ActivityDayOfWeekRow+0x2e>
 8006908:	2100      	movs	r1, #0
 800690a:	2001      	movs	r0, #1
 800690c:	f000 f8cc 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
 8006910:	e003      	b.n	800691a <MenuTFTSchedule1ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 8006912:	2101      	movs	r1, #1
 8006914:	2001      	movs	r0, #1
 8006916:	f000 f8c7 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[0] = !schedule1DayInWeekTab[0]; // update current state in tab holding state of day in week
 800691a:	4b62      	ldr	r3, [pc, #392]	; (8006aa4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	bf0c      	ite	eq
 8006922:	2301      	moveq	r3, #1
 8006924:	2300      	movne	r3, #0
 8006926:	b2db      	uxtb	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	4b5e      	ldr	r3, [pc, #376]	; (8006aa4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800692c:	701a      	strb	r2, [r3, #0]
 800692e:	e0b4      	b.n	8006a9a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8006930:	88fb      	ldrh	r3, [r7, #6]
 8006932:	2b59      	cmp	r3, #89	; 0x59
 8006934:	d91a      	bls.n	800696c <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
 8006936:	88fb      	ldrh	r3, [r7, #6]
 8006938:	2b6e      	cmp	r3, #110	; 0x6e
 800693a:	d817      	bhi.n	800696c <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
	{
		if(schedule1DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 800693c:	4b59      	ldr	r3, [pc, #356]	; (8006aa4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800693e:	785b      	ldrb	r3, [r3, #1]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d004      	beq.n	800694e <MenuTFTSchedule1ActivityDayOfWeekRow+0x6a>
 8006944:	2100      	movs	r1, #0
 8006946:	2002      	movs	r0, #2
 8006948:	f000 f8ae 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
 800694c:	e003      	b.n	8006956 <MenuTFTSchedule1ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 800694e:	2101      	movs	r1, #1
 8006950:	2002      	movs	r0, #2
 8006952:	f000 f8a9 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[1] = !schedule1DayInWeekTab[1];
 8006956:	4b53      	ldr	r3, [pc, #332]	; (8006aa4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006958:	785b      	ldrb	r3, [r3, #1]
 800695a:	2b00      	cmp	r3, #0
 800695c:	bf0c      	ite	eq
 800695e:	2301      	moveq	r3, #1
 8006960:	2300      	movne	r3, #0
 8006962:	b2db      	uxtb	r3, r3
 8006964:	461a      	mov	r2, r3
 8006966:	4b4f      	ldr	r3, [pc, #316]	; (8006aa4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006968:	705a      	strb	r2, [r3, #1]
 800696a:	e096      	b.n	8006a9a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 800696c:	88fb      	ldrh	r3, [r7, #6]
 800696e:	2b77      	cmp	r3, #119	; 0x77
 8006970:	d91a      	bls.n	80069a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
 8006972:	88fb      	ldrh	r3, [r7, #6]
 8006974:	2b8c      	cmp	r3, #140	; 0x8c
 8006976:	d817      	bhi.n	80069a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
	{
		if(schedule1DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8006978:	4b4a      	ldr	r3, [pc, #296]	; (8006aa4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800697a:	789b      	ldrb	r3, [r3, #2]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d004      	beq.n	800698a <MenuTFTSchedule1ActivityDayOfWeekRow+0xa6>
 8006980:	2100      	movs	r1, #0
 8006982:	2003      	movs	r0, #3
 8006984:	f000 f890 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
 8006988:	e003      	b.n	8006992 <MenuTFTSchedule1ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 800698a:	2101      	movs	r1, #1
 800698c:	2003      	movs	r0, #3
 800698e:	f000 f88b 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[2] = !schedule1DayInWeekTab[2];
 8006992:	4b44      	ldr	r3, [pc, #272]	; (8006aa4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006994:	789b      	ldrb	r3, [r3, #2]
 8006996:	2b00      	cmp	r3, #0
 8006998:	bf0c      	ite	eq
 800699a:	2301      	moveq	r3, #1
 800699c:	2300      	movne	r3, #0
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	461a      	mov	r2, r3
 80069a2:	4b40      	ldr	r3, [pc, #256]	; (8006aa4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80069a4:	709a      	strb	r2, [r3, #2]
 80069a6:	e078      	b.n	8006a9a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 80069a8:	88fb      	ldrh	r3, [r7, #6]
 80069aa:	2b95      	cmp	r3, #149	; 0x95
 80069ac:	d91a      	bls.n	80069e4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
 80069ae:	88fb      	ldrh	r3, [r7, #6]
 80069b0:	2baa      	cmp	r3, #170	; 0xaa
 80069b2:	d817      	bhi.n	80069e4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
	{
		if(schedule1DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 80069b4:	4b3b      	ldr	r3, [pc, #236]	; (8006aa4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80069b6:	78db      	ldrb	r3, [r3, #3]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d004      	beq.n	80069c6 <MenuTFTSchedule1ActivityDayOfWeekRow+0xe2>
 80069bc:	2100      	movs	r1, #0
 80069be:	2004      	movs	r0, #4
 80069c0:	f000 f872 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
 80069c4:	e003      	b.n	80069ce <MenuTFTSchedule1ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 80069c6:	2101      	movs	r1, #1
 80069c8:	2004      	movs	r0, #4
 80069ca:	f000 f86d 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[3] = !schedule1DayInWeekTab[3];
 80069ce:	4b35      	ldr	r3, [pc, #212]	; (8006aa4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80069d0:	78db      	ldrb	r3, [r3, #3]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	bf0c      	ite	eq
 80069d6:	2301      	moveq	r3, #1
 80069d8:	2300      	movne	r3, #0
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	461a      	mov	r2, r3
 80069de:	4b31      	ldr	r3, [pc, #196]	; (8006aa4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80069e0:	70da      	strb	r2, [r3, #3]
 80069e2:	e05a      	b.n	8006a9a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 80069e4:	88fb      	ldrh	r3, [r7, #6]
 80069e6:	2bb3      	cmp	r3, #179	; 0xb3
 80069e8:	d91a      	bls.n	8006a20 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
 80069ea:	88fb      	ldrh	r3, [r7, #6]
 80069ec:	2bc8      	cmp	r3, #200	; 0xc8
 80069ee:	d817      	bhi.n	8006a20 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
	{
		if(schedule1DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 80069f0:	4b2c      	ldr	r3, [pc, #176]	; (8006aa4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80069f2:	791b      	ldrb	r3, [r3, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d004      	beq.n	8006a02 <MenuTFTSchedule1ActivityDayOfWeekRow+0x11e>
 80069f8:	2100      	movs	r1, #0
 80069fa:	2005      	movs	r0, #5
 80069fc:	f000 f854 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
 8006a00:	e003      	b.n	8006a0a <MenuTFTSchedule1ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 8006a02:	2101      	movs	r1, #1
 8006a04:	2005      	movs	r0, #5
 8006a06:	f000 f84f 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[4] = !schedule1DayInWeekTab[4];
 8006a0a:	4b26      	ldr	r3, [pc, #152]	; (8006aa4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006a0c:	791b      	ldrb	r3, [r3, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	bf0c      	ite	eq
 8006a12:	2301      	moveq	r3, #1
 8006a14:	2300      	movne	r3, #0
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	461a      	mov	r2, r3
 8006a1a:	4b22      	ldr	r3, [pc, #136]	; (8006aa4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006a1c:	711a      	strb	r2, [r3, #4]
 8006a1e:	e03c      	b.n	8006a9a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8006a20:	88fb      	ldrh	r3, [r7, #6]
 8006a22:	2bd1      	cmp	r3, #209	; 0xd1
 8006a24:	d91a      	bls.n	8006a5c <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
 8006a26:	88fb      	ldrh	r3, [r7, #6]
 8006a28:	2be6      	cmp	r3, #230	; 0xe6
 8006a2a:	d817      	bhi.n	8006a5c <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
	{
		if(schedule1DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8006a2c:	4b1d      	ldr	r3, [pc, #116]	; (8006aa4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006a2e:	795b      	ldrb	r3, [r3, #5]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d004      	beq.n	8006a3e <MenuTFTSchedule1ActivityDayOfWeekRow+0x15a>
 8006a34:	2100      	movs	r1, #0
 8006a36:	2006      	movs	r0, #6
 8006a38:	f000 f836 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
 8006a3c:	e003      	b.n	8006a46 <MenuTFTSchedule1ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 8006a3e:	2101      	movs	r1, #1
 8006a40:	2006      	movs	r0, #6
 8006a42:	f000 f831 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[5] = !schedule1DayInWeekTab[5];
 8006a46:	4b17      	ldr	r3, [pc, #92]	; (8006aa4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006a48:	795b      	ldrb	r3, [r3, #5]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	bf0c      	ite	eq
 8006a4e:	2301      	moveq	r3, #1
 8006a50:	2300      	movne	r3, #0
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	461a      	mov	r2, r3
 8006a56:	4b13      	ldr	r3, [pc, #76]	; (8006aa4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006a58:	715a      	strb	r2, [r3, #5]
 8006a5a:	e01e      	b.n	8006a9a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8006a5c:	88fb      	ldrh	r3, [r7, #6]
 8006a5e:	2bef      	cmp	r3, #239	; 0xef
 8006a60:	d91b      	bls.n	8006a9a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 8006a62:	88fb      	ldrh	r3, [r7, #6]
 8006a64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a68:	d817      	bhi.n	8006a9a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule1DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 8006a6a:	4b0e      	ldr	r3, [pc, #56]	; (8006aa4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006a6c:	799b      	ldrb	r3, [r3, #6]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d004      	beq.n	8006a7c <MenuTFTSchedule1ActivityDayOfWeekRow+0x198>
 8006a72:	2100      	movs	r1, #0
 8006a74:	2007      	movs	r0, #7
 8006a76:	f000 f817 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
 8006a7a:	e003      	b.n	8006a84 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	2007      	movs	r0, #7
 8006a80:	f000 f812 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[6] = !schedule1DayInWeekTab[6];
 8006a84:	4b07      	ldr	r3, [pc, #28]	; (8006aa4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006a86:	799b      	ldrb	r3, [r3, #6]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bf0c      	ite	eq
 8006a8c:	2301      	moveq	r3, #1
 8006a8e:	2300      	movne	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	461a      	mov	r2, r3
 8006a94:	4b03      	ldr	r3, [pc, #12]	; (8006aa4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006a96:	719a      	strb	r2, [r3, #6]
	}
}
 8006a98:	e7ff      	b.n	8006a9a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 8006a9a:	bf00      	nop
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	2000025c 	.word	0x2000025c

08006aa8 <changeTFTScheduleDayOfWeek>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleDayOfWeek(uint8_t NrOfDay, uint8_t NewState)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af02      	add	r7, sp, #8
 8006aae:	4603      	mov	r3, r0
 8006ab0:	460a      	mov	r2, r1
 8006ab2:	71fb      	strb	r3, [r7, #7]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	71bb      	strb	r3, [r7, #6]
	if (1 == NrOfDay)	// if Monday
 8006ab8:	79fb      	ldrb	r3, [r7, #7]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d11a      	bne.n	8006af4 <changeTFTScheduleDayOfWeek+0x4c>
	{
		if(0 == NewState)	// if turn off
 8006abe:	79bb      	ldrb	r3, [r7, #6]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10b      	bne.n	8006adc <changeTFTScheduleDayOfWeek+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006ac4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006ac8:	9301      	str	r3, [sp, #4]
 8006aca:	2305      	movs	r3, #5
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	2312      	movs	r3, #18
 8006ad0:	2212      	movs	r2, #18
 8006ad2:	2133      	movs	r1, #51	; 0x33
 8006ad4:	203d      	movs	r0, #61	; 0x3d
 8006ad6:	f7fa fef8 	bl	80018ca <GFX_DrawFillRoundRectangle>
		else	// if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 8006ada:	e0be      	b.n	8006c5a <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006adc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006ae0:	9301      	str	r3, [sp, #4]
 8006ae2:	2305      	movs	r3, #5
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	2312      	movs	r3, #18
 8006ae8:	2212      	movs	r2, #18
 8006aea:	2133      	movs	r1, #51	; 0x33
 8006aec:	203d      	movs	r0, #61	; 0x3d
 8006aee:	f7fa feec 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006af2:	e0b2      	b.n	8006c5a <changeTFTScheduleDayOfWeek+0x1b2>
	else if (2== NrOfDay)	// if Tuesday
 8006af4:	79fb      	ldrb	r3, [r7, #7]
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d11a      	bne.n	8006b30 <changeTFTScheduleDayOfWeek+0x88>
		if(0 == NewState)	// if turn off
 8006afa:	79bb      	ldrb	r3, [r7, #6]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10b      	bne.n	8006b18 <changeTFTScheduleDayOfWeek+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006b00:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b04:	9301      	str	r3, [sp, #4]
 8006b06:	2305      	movs	r3, #5
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	2312      	movs	r3, #18
 8006b0c:	2212      	movs	r2, #18
 8006b0e:	2133      	movs	r1, #51	; 0x33
 8006b10:	205b      	movs	r0, #91	; 0x5b
 8006b12:	f7fa feda 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006b16:	e0a0      	b.n	8006c5a <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006b18:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	2305      	movs	r3, #5
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	2312      	movs	r3, #18
 8006b24:	2212      	movs	r2, #18
 8006b26:	2133      	movs	r1, #51	; 0x33
 8006b28:	205b      	movs	r0, #91	; 0x5b
 8006b2a:	f7fa fece 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006b2e:	e094      	b.n	8006c5a <changeTFTScheduleDayOfWeek+0x1b2>
	else if (3== NrOfDay)	// if Wednesday
 8006b30:	79fb      	ldrb	r3, [r7, #7]
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d11a      	bne.n	8006b6c <changeTFTScheduleDayOfWeek+0xc4>
		if(0 == NewState)	// if turn off
 8006b36:	79bb      	ldrb	r3, [r7, #6]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10b      	bne.n	8006b54 <changeTFTScheduleDayOfWeek+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006b3c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b40:	9301      	str	r3, [sp, #4]
 8006b42:	2305      	movs	r3, #5
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	2312      	movs	r3, #18
 8006b48:	2212      	movs	r2, #18
 8006b4a:	2133      	movs	r1, #51	; 0x33
 8006b4c:	2079      	movs	r0, #121	; 0x79
 8006b4e:	f7fa febc 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006b52:	e082      	b.n	8006c5a <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006b54:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006b58:	9301      	str	r3, [sp, #4]
 8006b5a:	2305      	movs	r3, #5
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	2312      	movs	r3, #18
 8006b60:	2212      	movs	r2, #18
 8006b62:	2133      	movs	r1, #51	; 0x33
 8006b64:	2079      	movs	r0, #121	; 0x79
 8006b66:	f7fa feb0 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006b6a:	e076      	b.n	8006c5a <changeTFTScheduleDayOfWeek+0x1b2>
	else if (4== NrOfDay)	// if Thursday
 8006b6c:	79fb      	ldrb	r3, [r7, #7]
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d11a      	bne.n	8006ba8 <changeTFTScheduleDayOfWeek+0x100>
		if(0 == NewState)	// if turn off
 8006b72:	79bb      	ldrb	r3, [r7, #6]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10b      	bne.n	8006b90 <changeTFTScheduleDayOfWeek+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006b78:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b7c:	9301      	str	r3, [sp, #4]
 8006b7e:	2305      	movs	r3, #5
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	2312      	movs	r3, #18
 8006b84:	2212      	movs	r2, #18
 8006b86:	2133      	movs	r1, #51	; 0x33
 8006b88:	2097      	movs	r0, #151	; 0x97
 8006b8a:	f7fa fe9e 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006b8e:	e064      	b.n	8006c5a <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006b90:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	2305      	movs	r3, #5
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	2312      	movs	r3, #18
 8006b9c:	2212      	movs	r2, #18
 8006b9e:	2133      	movs	r1, #51	; 0x33
 8006ba0:	2097      	movs	r0, #151	; 0x97
 8006ba2:	f7fa fe92 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006ba6:	e058      	b.n	8006c5a <changeTFTScheduleDayOfWeek+0x1b2>
	else if (5== NrOfDay)	// if Friday
 8006ba8:	79fb      	ldrb	r3, [r7, #7]
 8006baa:	2b05      	cmp	r3, #5
 8006bac:	d11a      	bne.n	8006be4 <changeTFTScheduleDayOfWeek+0x13c>
		if(0 == NewState)	// if turn off
 8006bae:	79bb      	ldrb	r3, [r7, #6]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10b      	bne.n	8006bcc <changeTFTScheduleDayOfWeek+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006bb4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006bb8:	9301      	str	r3, [sp, #4]
 8006bba:	2305      	movs	r3, #5
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	2312      	movs	r3, #18
 8006bc0:	2212      	movs	r2, #18
 8006bc2:	2133      	movs	r1, #51	; 0x33
 8006bc4:	20b5      	movs	r0, #181	; 0xb5
 8006bc6:	f7fa fe80 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006bca:	e046      	b.n	8006c5a <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006bcc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006bd0:	9301      	str	r3, [sp, #4]
 8006bd2:	2305      	movs	r3, #5
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	2312      	movs	r3, #18
 8006bd8:	2212      	movs	r2, #18
 8006bda:	2133      	movs	r1, #51	; 0x33
 8006bdc:	20b5      	movs	r0, #181	; 0xb5
 8006bde:	f7fa fe74 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006be2:	e03a      	b.n	8006c5a <changeTFTScheduleDayOfWeek+0x1b2>
	else if (6== NrOfDay)	// if Saturday
 8006be4:	79fb      	ldrb	r3, [r7, #7]
 8006be6:	2b06      	cmp	r3, #6
 8006be8:	d11a      	bne.n	8006c20 <changeTFTScheduleDayOfWeek+0x178>
		if(0 == NewState)	// if turn off
 8006bea:	79bb      	ldrb	r3, [r7, #6]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10b      	bne.n	8006c08 <changeTFTScheduleDayOfWeek+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006bf0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006bf4:	9301      	str	r3, [sp, #4]
 8006bf6:	2305      	movs	r3, #5
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	2312      	movs	r3, #18
 8006bfc:	2212      	movs	r2, #18
 8006bfe:	2133      	movs	r1, #51	; 0x33
 8006c00:	20d3      	movs	r0, #211	; 0xd3
 8006c02:	f7fa fe62 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006c06:	e028      	b.n	8006c5a <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006c08:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c0c:	9301      	str	r3, [sp, #4]
 8006c0e:	2305      	movs	r3, #5
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	2312      	movs	r3, #18
 8006c14:	2212      	movs	r2, #18
 8006c16:	2133      	movs	r1, #51	; 0x33
 8006c18:	20d3      	movs	r0, #211	; 0xd3
 8006c1a:	f7fa fe56 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006c1e:	e01c      	b.n	8006c5a <changeTFTScheduleDayOfWeek+0x1b2>
	else if (7== NrOfDay)	// If Sunday
 8006c20:	79fb      	ldrb	r3, [r7, #7]
 8006c22:	2b07      	cmp	r3, #7
 8006c24:	d119      	bne.n	8006c5a <changeTFTScheduleDayOfWeek+0x1b2>
		if(0 == NewState)	// if turn off
 8006c26:	79bb      	ldrb	r3, [r7, #6]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10b      	bne.n	8006c44 <changeTFTScheduleDayOfWeek+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006c2c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006c30:	9301      	str	r3, [sp, #4]
 8006c32:	2305      	movs	r3, #5
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	2312      	movs	r3, #18
 8006c38:	2212      	movs	r2, #18
 8006c3a:	2133      	movs	r1, #51	; 0x33
 8006c3c:	20f1      	movs	r0, #241	; 0xf1
 8006c3e:	f7fa fe44 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006c42:	e00a      	b.n	8006c5a <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006c44:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c48:	9301      	str	r3, [sp, #4]
 8006c4a:	2305      	movs	r3, #5
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	2312      	movs	r3, #18
 8006c50:	2212      	movs	r2, #18
 8006c52:	2133      	movs	r1, #51	; 0x33
 8006c54:	20f1      	movs	r0, #241	; 0xf1
 8006c56:	f7fa fe38 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006c5a:	bf00      	nop
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <changeTFTScheduleRelayLights>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleRelayLights(uint8_t NrOfRS, uint8_t NewState)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af02      	add	r7, sp, #8
 8006c68:	4603      	mov	r3, r0
 8006c6a:	460a      	mov	r2, r1
 8006c6c:	71fb      	strb	r3, [r7, #7]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	71bb      	strb	r3, [r7, #6]
	if(1 == NrOfRS) // R1
 8006c72:	79fb      	ldrb	r3, [r7, #7]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d11a      	bne.n	8006cae <changeTFTScheduleRelayLights+0x4c>
	{
		if (0 == NewState) // if turn off
 8006c78:	79bb      	ldrb	r3, [r7, #6]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10b      	bne.n	8006c96 <changeTFTScheduleRelayLights+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006c7e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006c82:	9301      	str	r3, [sp, #4]
 8006c84:	2305      	movs	r3, #5
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	2312      	movs	r3, #18
 8006c8a:	2212      	movs	r2, #18
 8006c8c:	21ab      	movs	r1, #171	; 0xab
 8006c8e:	2016      	movs	r0, #22
 8006c90:	f7fa fe1b 	bl	80018ca <GFX_DrawFillRoundRectangle>
		else // if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 8006c94:	e0fc      	b.n	8006e90 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006c96:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c9a:	9301      	str	r3, [sp, #4]
 8006c9c:	2305      	movs	r3, #5
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	2312      	movs	r3, #18
 8006ca2:	2212      	movs	r2, #18
 8006ca4:	21ab      	movs	r1, #171	; 0xab
 8006ca6:	2016      	movs	r0, #22
 8006ca8:	f7fa fe0f 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006cac:	e0f0      	b.n	8006e90 <changeTFTScheduleRelayLights+0x22e>
	else if(2 == NrOfRS) // R2
 8006cae:	79fb      	ldrb	r3, [r7, #7]
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d11a      	bne.n	8006cea <changeTFTScheduleRelayLights+0x88>
		if (0 == NewState) // if turn off
 8006cb4:	79bb      	ldrb	r3, [r7, #6]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10b      	bne.n	8006cd2 <changeTFTScheduleRelayLights+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006cba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006cbe:	9301      	str	r3, [sp, #4]
 8006cc0:	2305      	movs	r3, #5
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	2312      	movs	r3, #18
 8006cc6:	2212      	movs	r2, #18
 8006cc8:	21ab      	movs	r1, #171	; 0xab
 8006cca:	2036      	movs	r0, #54	; 0x36
 8006ccc:	f7fa fdfd 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006cd0:	e0de      	b.n	8006e90 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006cd2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006cd6:	9301      	str	r3, [sp, #4]
 8006cd8:	2305      	movs	r3, #5
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	2312      	movs	r3, #18
 8006cde:	2212      	movs	r2, #18
 8006ce0:	21ab      	movs	r1, #171	; 0xab
 8006ce2:	2036      	movs	r0, #54	; 0x36
 8006ce4:	f7fa fdf1 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006ce8:	e0d2      	b.n	8006e90 <changeTFTScheduleRelayLights+0x22e>
	else if(3 == NrOfRS) // R3
 8006cea:	79fb      	ldrb	r3, [r7, #7]
 8006cec:	2b03      	cmp	r3, #3
 8006cee:	d11a      	bne.n	8006d26 <changeTFTScheduleRelayLights+0xc4>
		if (0 == NewState) // if turn off
 8006cf0:	79bb      	ldrb	r3, [r7, #6]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10b      	bne.n	8006d0e <changeTFTScheduleRelayLights+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006cf6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006cfa:	9301      	str	r3, [sp, #4]
 8006cfc:	2305      	movs	r3, #5
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	2312      	movs	r3, #18
 8006d02:	2212      	movs	r2, #18
 8006d04:	21ab      	movs	r1, #171	; 0xab
 8006d06:	2056      	movs	r0, #86	; 0x56
 8006d08:	f7fa fddf 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006d0c:	e0c0      	b.n	8006e90 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006d0e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006d12:	9301      	str	r3, [sp, #4]
 8006d14:	2305      	movs	r3, #5
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	2312      	movs	r3, #18
 8006d1a:	2212      	movs	r2, #18
 8006d1c:	21ab      	movs	r1, #171	; 0xab
 8006d1e:	2056      	movs	r0, #86	; 0x56
 8006d20:	f7fa fdd3 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006d24:	e0b4      	b.n	8006e90 <changeTFTScheduleRelayLights+0x22e>
	else if(4 == NrOfRS) // R4
 8006d26:	79fb      	ldrb	r3, [r7, #7]
 8006d28:	2b04      	cmp	r3, #4
 8006d2a:	d11a      	bne.n	8006d62 <changeTFTScheduleRelayLights+0x100>
		if (0 == NewState) // if turn off
 8006d2c:	79bb      	ldrb	r3, [r7, #6]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10b      	bne.n	8006d4a <changeTFTScheduleRelayLights+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006d32:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006d36:	9301      	str	r3, [sp, #4]
 8006d38:	2305      	movs	r3, #5
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	2312      	movs	r3, #18
 8006d3e:	2212      	movs	r2, #18
 8006d40:	21ab      	movs	r1, #171	; 0xab
 8006d42:	2076      	movs	r0, #118	; 0x76
 8006d44:	f7fa fdc1 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006d48:	e0a2      	b.n	8006e90 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006d4a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006d4e:	9301      	str	r3, [sp, #4]
 8006d50:	2305      	movs	r3, #5
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	2312      	movs	r3, #18
 8006d56:	2212      	movs	r2, #18
 8006d58:	21ab      	movs	r1, #171	; 0xab
 8006d5a:	2076      	movs	r0, #118	; 0x76
 8006d5c:	f7fa fdb5 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006d60:	e096      	b.n	8006e90 <changeTFTScheduleRelayLights+0x22e>
	else if(5 == NrOfRS) // WS2812b
 8006d62:	79fb      	ldrb	r3, [r7, #7]
 8006d64:	2b05      	cmp	r3, #5
 8006d66:	d11a      	bne.n	8006d9e <changeTFTScheduleRelayLights+0x13c>
		if (0 == NewState) // if turn off
 8006d68:	79bb      	ldrb	r3, [r7, #6]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10b      	bne.n	8006d86 <changeTFTScheduleRelayLights+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006d6e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006d72:	9301      	str	r3, [sp, #4]
 8006d74:	2305      	movs	r3, #5
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	2312      	movs	r3, #18
 8006d7a:	2212      	movs	r2, #18
 8006d7c:	21ab      	movs	r1, #171	; 0xab
 8006d7e:	2096      	movs	r0, #150	; 0x96
 8006d80:	f7fa fda3 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006d84:	e084      	b.n	8006e90 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006d86:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006d8a:	9301      	str	r3, [sp, #4]
 8006d8c:	2305      	movs	r3, #5
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	2312      	movs	r3, #18
 8006d92:	2212      	movs	r2, #18
 8006d94:	21ab      	movs	r1, #171	; 0xab
 8006d96:	2096      	movs	r0, #150	; 0x96
 8006d98:	f7fa fd97 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006d9c:	e078      	b.n	8006e90 <changeTFTScheduleRelayLights+0x22e>
	else if(6 == NrOfRS) // L1
 8006d9e:	79fb      	ldrb	r3, [r7, #7]
 8006da0:	2b06      	cmp	r3, #6
 8006da2:	d11a      	bne.n	8006dda <changeTFTScheduleRelayLights+0x178>
		if (0 == NewState) // if turn off
 8006da4:	79bb      	ldrb	r3, [r7, #6]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10b      	bne.n	8006dc2 <changeTFTScheduleRelayLights+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006daa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006dae:	9301      	str	r3, [sp, #4]
 8006db0:	2305      	movs	r3, #5
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	2312      	movs	r3, #18
 8006db6:	2212      	movs	r2, #18
 8006db8:	21ab      	movs	r1, #171	; 0xab
 8006dba:	20b6      	movs	r0, #182	; 0xb6
 8006dbc:	f7fa fd85 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006dc0:	e066      	b.n	8006e90 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006dc2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006dc6:	9301      	str	r3, [sp, #4]
 8006dc8:	2305      	movs	r3, #5
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	2312      	movs	r3, #18
 8006dce:	2212      	movs	r2, #18
 8006dd0:	21ab      	movs	r1, #171	; 0xab
 8006dd2:	20b6      	movs	r0, #182	; 0xb6
 8006dd4:	f7fa fd79 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006dd8:	e05a      	b.n	8006e90 <changeTFTScheduleRelayLights+0x22e>
	else if(7 == NrOfRS) // L2
 8006dda:	79fb      	ldrb	r3, [r7, #7]
 8006ddc:	2b07      	cmp	r3, #7
 8006dde:	d11a      	bne.n	8006e16 <changeTFTScheduleRelayLights+0x1b4>
		if (0 == NewState) // if turn off
 8006de0:	79bb      	ldrb	r3, [r7, #6]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10b      	bne.n	8006dfe <changeTFTScheduleRelayLights+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006de6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006dea:	9301      	str	r3, [sp, #4]
 8006dec:	2305      	movs	r3, #5
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	2312      	movs	r3, #18
 8006df2:	2212      	movs	r2, #18
 8006df4:	21ab      	movs	r1, #171	; 0xab
 8006df6:	20d6      	movs	r0, #214	; 0xd6
 8006df8:	f7fa fd67 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006dfc:	e048      	b.n	8006e90 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006dfe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006e02:	9301      	str	r3, [sp, #4]
 8006e04:	2305      	movs	r3, #5
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	2312      	movs	r3, #18
 8006e0a:	2212      	movs	r2, #18
 8006e0c:	21ab      	movs	r1, #171	; 0xab
 8006e0e:	20d6      	movs	r0, #214	; 0xd6
 8006e10:	f7fa fd5b 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006e14:	e03c      	b.n	8006e90 <changeTFTScheduleRelayLights+0x22e>
	else if(8 == NrOfRS) // L3
 8006e16:	79fb      	ldrb	r3, [r7, #7]
 8006e18:	2b08      	cmp	r3, #8
 8006e1a:	d11a      	bne.n	8006e52 <changeTFTScheduleRelayLights+0x1f0>
		if (0 == NewState) // if turn off
 8006e1c:	79bb      	ldrb	r3, [r7, #6]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10b      	bne.n	8006e3a <changeTFTScheduleRelayLights+0x1d8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006e22:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006e26:	9301      	str	r3, [sp, #4]
 8006e28:	2305      	movs	r3, #5
 8006e2a:	9300      	str	r3, [sp, #0]
 8006e2c:	2312      	movs	r3, #18
 8006e2e:	2212      	movs	r2, #18
 8006e30:	21ab      	movs	r1, #171	; 0xab
 8006e32:	20f6      	movs	r0, #246	; 0xf6
 8006e34:	f7fa fd49 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006e38:	e02a      	b.n	8006e90 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006e3a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006e3e:	9301      	str	r3, [sp, #4]
 8006e40:	2305      	movs	r3, #5
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	2312      	movs	r3, #18
 8006e46:	2212      	movs	r2, #18
 8006e48:	21ab      	movs	r1, #171	; 0xab
 8006e4a:	20f6      	movs	r0, #246	; 0xf6
 8006e4c:	f7fa fd3d 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006e50:	e01e      	b.n	8006e90 <changeTFTScheduleRelayLights+0x22e>
	else if(9 == NrOfRS) // L4
 8006e52:	79fb      	ldrb	r3, [r7, #7]
 8006e54:	2b09      	cmp	r3, #9
 8006e56:	d11b      	bne.n	8006e90 <changeTFTScheduleRelayLights+0x22e>
		if (0 == NewState) // if turn off
 8006e58:	79bb      	ldrb	r3, [r7, #6]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10c      	bne.n	8006e78 <changeTFTScheduleRelayLights+0x216>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006e5e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006e62:	9301      	str	r3, [sp, #4]
 8006e64:	2305      	movs	r3, #5
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	2312      	movs	r3, #18
 8006e6a:	2212      	movs	r2, #18
 8006e6c:	21ab      	movs	r1, #171	; 0xab
 8006e6e:	f44f 708b 	mov.w	r0, #278	; 0x116
 8006e72:	f7fa fd2a 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006e76:	e00b      	b.n	8006e90 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006e78:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006e7c:	9301      	str	r3, [sp, #4]
 8006e7e:	2305      	movs	r3, #5
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	2312      	movs	r3, #18
 8006e84:	2212      	movs	r2, #18
 8006e86:	21ab      	movs	r1, #171	; 0xab
 8006e88:	f44f 708b 	mov.w	r0, #278	; 0x116
 8006e8c:	f7fa fd1d 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006e90:	bf00      	nop
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <MenuTFTSchedule1ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af02      	add	r7, sp, #8
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	460a      	mov	r2, r1
 8006ea2:	80fb      	strh	r3, [r7, #6]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8006ea8:	4859      	ldr	r0, [pc, #356]	; (8007010 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x178>)
 8006eaa:	f7fa fd5f 	bl	800196c <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	2bba      	cmp	r3, #186	; 0xba
 8006eb2:	d92f      	bls.n	8006f14 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
 8006eb4:	88fb      	ldrh	r3, [r7, #6]
 8006eb6:	2bdd      	cmp	r3, #221	; 0xdd
 8006eb8:	d82c      	bhi.n	8006f14 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule1 < 24)
 8006eba:	4b56      	ldr	r3, [pc, #344]	; (8007014 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b17      	cmp	r3, #23
 8006ec0:	d806      	bhi.n	8006ed0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule1++;
 8006ec2:	4b54      	ldr	r3, [pc, #336]	; (8007014 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	4b52      	ldr	r3, [pc, #328]	; (8007014 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006ecc:	701a      	strb	r2, [r3, #0]
 8006ece:	e002      	b.n	8006ed6 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule1 = 1;
 8006ed0:	4b50      	ldr	r3, [pc, #320]	; (8007014 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule1);
 8006ed6:	4b4f      	ldr	r3, [pc, #316]	; (8007014 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	2b09      	cmp	r3, #9
 8006edc:	d907      	bls.n	8006eee <MenuTFTSchedule1ActivityHourMinuteONAdd+0x56>
 8006ede:	4b4d      	ldr	r3, [pc, #308]	; (8007014 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	494c      	ldr	r1, [pc, #304]	; (8007018 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006ee6:	484d      	ldr	r0, [pc, #308]	; (800701c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006ee8:	f00b f82e 	bl	8011f48 <siprintf>
 8006eec:	e006      	b.n	8006efc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule1);
 8006eee:	4b49      	ldr	r3, [pc, #292]	; (8007014 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	494a      	ldr	r1, [pc, #296]	; (8007020 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006ef6:	4849      	ldr	r0, [pc, #292]	; (800701c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006ef8:	f00b f826 	bl	8011f48 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006efc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006f00:	9301      	str	r3, [sp, #4]
 8006f02:	2301      	movs	r3, #1
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	2300      	movs	r3, #0
 8006f08:	2264      	movs	r2, #100	; 0x64
 8006f0a:	2150      	movs	r1, #80	; 0x50
 8006f0c:	4843      	ldr	r0, [pc, #268]	; (800701c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006f0e:	f7fa ff47 	bl	8001da0 <EF_PutString>
 8006f12:	e078      	b.n	8007006 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006f14:	88fb      	ldrh	r3, [r7, #6]
 8006f16:	2be8      	cmp	r3, #232	; 0xe8
 8006f18:	d930      	bls.n	8006f7c <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
 8006f1a:	88fb      	ldrh	r3, [r7, #6]
 8006f1c:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8006f20:	d22c      	bcs.n	8006f7c <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule1 < 59)
 8006f22:	4b40      	ldr	r3, [pc, #256]	; (8007024 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	2b3a      	cmp	r3, #58	; 0x3a
 8006f28:	d806      	bhi.n	8006f38 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule1++;
 8006f2a:	4b3e      	ldr	r3, [pc, #248]	; (8007024 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	4b3c      	ldr	r3, [pc, #240]	; (8007024 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006f34:	701a      	strb	r2, [r3, #0]
 8006f36:	e002      	b.n	8006f3e <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule1 = 0;
 8006f38:	4b3a      	ldr	r3, [pc, #232]	; (8007024 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 8006f3e:	4b39      	ldr	r3, [pc, #228]	; (8007024 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	2b09      	cmp	r3, #9
 8006f44:	d907      	bls.n	8006f56 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xbe>
 8006f46:	4b37      	ldr	r3, [pc, #220]	; (8007024 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	4932      	ldr	r1, [pc, #200]	; (8007018 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006f4e:	4833      	ldr	r0, [pc, #204]	; (800701c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006f50:	f00a fffa 	bl	8011f48 <siprintf>
 8006f54:	e006      	b.n	8006f64 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 8006f56:	4b33      	ldr	r3, [pc, #204]	; (8007024 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	4930      	ldr	r1, [pc, #192]	; (8007020 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006f5e:	482f      	ldr	r0, [pc, #188]	; (800701c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006f60:	f00a fff2 	bl	8011f48 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006f64:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006f68:	9301      	str	r3, [sp, #4]
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	2300      	movs	r3, #0
 8006f70:	2264      	movs	r2, #100	; 0x64
 8006f72:	218a      	movs	r1, #138	; 0x8a
 8006f74:	4829      	ldr	r0, [pc, #164]	; (800701c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006f76:	f7fa ff13 	bl	8001da0 <EF_PutString>
 8006f7a:	e044      	b.n	8007006 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006f7c:	88fb      	ldrh	r3, [r7, #6]
 8006f7e:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8006f82:	d940      	bls.n	8007006 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 8006f84:	88fb      	ldrh	r3, [r7, #6]
 8006f86:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006f8a:	d23c      	bcs.n	8007006 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule1 < 49)
 8006f8c:	4b25      	ldr	r3, [pc, #148]	; (8007024 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	2b30      	cmp	r3, #48	; 0x30
 8006f92:	d806      	bhi.n	8006fa2 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule1 = minuteOnSchedule1 + 10;
 8006f94:	4b23      	ldr	r3, [pc, #140]	; (8007024 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	330a      	adds	r3, #10
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	4b21      	ldr	r3, [pc, #132]	; (8007024 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006f9e:	701a      	strb	r2, [r3, #0]
 8006fa0:	e012      	b.n	8006fc8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule1 = (minuteOnSchedule1 + 10) % 60;
 8006fa2:	4b20      	ldr	r3, [pc, #128]	; (8007024 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	f103 020a 	add.w	r2, r3, #10
 8006faa:	4b1f      	ldr	r3, [pc, #124]	; (8007028 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x190>)
 8006fac:	fb83 1302 	smull	r1, r3, r3, r2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	1159      	asrs	r1, r3, #5
 8006fb4:	17d3      	asrs	r3, r2, #31
 8006fb6:	1ac9      	subs	r1, r1, r3
 8006fb8:	460b      	mov	r3, r1
 8006fba:	011b      	lsls	r3, r3, #4
 8006fbc:	1a5b      	subs	r3, r3, r1
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	1ad1      	subs	r1, r2, r3
 8006fc2:	b2ca      	uxtb	r2, r1
 8006fc4:	4b17      	ldr	r3, [pc, #92]	; (8007024 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006fc6:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 8006fc8:	4b16      	ldr	r3, [pc, #88]	; (8007024 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b09      	cmp	r3, #9
 8006fce:	d907      	bls.n	8006fe0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x148>
 8006fd0:	4b14      	ldr	r3, [pc, #80]	; (8007024 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	4910      	ldr	r1, [pc, #64]	; (8007018 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006fd8:	4810      	ldr	r0, [pc, #64]	; (800701c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006fda:	f00a ffb5 	bl	8011f48 <siprintf>
 8006fde:	e006      	b.n	8006fee <MenuTFTSchedule1ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 8006fe0:	4b10      	ldr	r3, [pc, #64]	; (8007024 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	490e      	ldr	r1, [pc, #56]	; (8007020 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006fe8:	480c      	ldr	r0, [pc, #48]	; (800701c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006fea:	f00a ffad 	bl	8011f48 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006fee:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006ff2:	9301      	str	r3, [sp, #4]
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	2264      	movs	r2, #100	; 0x64
 8006ffc:	218a      	movs	r1, #138	; 0x8a
 8006ffe:	4807      	ldr	r0, [pc, #28]	; (800701c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8007000:	f7fa fece 	bl	8001da0 <EF_PutString>
	}
}
 8007004:	e7ff      	b.n	8007006 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 8007006:	bf00      	nop
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	080296c4 	.word	0x080296c4
 8007014:	20000281 	.word	0x20000281
 8007018:	08016120 	.word	0x08016120
 800701c:	200002c0 	.word	0x200002c0
 8007020:	08016128 	.word	0x08016128
 8007024:	20000283 	.word	0x20000283
 8007028:	88888889 	.word	0x88888889

0800702c <MenuTFTSchedule1ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af02      	add	r7, sp, #8
 8007032:	4603      	mov	r3, r0
 8007034:	460a      	mov	r2, r1
 8007036:	80fb      	strh	r3, [r7, #6]
 8007038:	4613      	mov	r3, r2
 800703a:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 800703c:	4859      	ldr	r0, [pc, #356]	; (80071a4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x178>)
 800703e:	f7fa fc95 	bl	800196c <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007042:	88fb      	ldrh	r3, [r7, #6]
 8007044:	2bba      	cmp	r3, #186	; 0xba
 8007046:	d92f      	bls.n	80070a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
 8007048:	88fb      	ldrh	r3, [r7, #6]
 800704a:	2bdd      	cmp	r3, #221	; 0xdd
 800704c:	d82c      	bhi.n	80070a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule1 < 24)
 800704e:	4b56      	ldr	r3, [pc, #344]	; (80071a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	2b17      	cmp	r3, #23
 8007054:	d806      	bhi.n	8007064 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule1++;
 8007056:	4b54      	ldr	r3, [pc, #336]	; (80071a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	3301      	adds	r3, #1
 800705c:	b2da      	uxtb	r2, r3
 800705e:	4b52      	ldr	r3, [pc, #328]	; (80071a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	e002      	b.n	800706a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule1 = 1;
 8007064:	4b50      	ldr	r3, [pc, #320]	; (80071a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007066:	2201      	movs	r2, #1
 8007068:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule1);
 800706a:	4b4f      	ldr	r3, [pc, #316]	; (80071a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	2b09      	cmp	r3, #9
 8007070:	d907      	bls.n	8007082 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x56>
 8007072:	4b4d      	ldr	r3, [pc, #308]	; (80071a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	494c      	ldr	r1, [pc, #304]	; (80071ac <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 800707a:	484d      	ldr	r0, [pc, #308]	; (80071b0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 800707c:	f00a ff64 	bl	8011f48 <siprintf>
 8007080:	e006      	b.n	8007090 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule1);
 8007082:	4b49      	ldr	r3, [pc, #292]	; (80071a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	494a      	ldr	r1, [pc, #296]	; (80071b4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 800708a:	4849      	ldr	r0, [pc, #292]	; (80071b0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 800708c:	f00a ff5c 	bl	8011f48 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007090:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007094:	9301      	str	r3, [sp, #4]
 8007096:	2301      	movs	r3, #1
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	2300      	movs	r3, #0
 800709c:	2287      	movs	r2, #135	; 0x87
 800709e:	214e      	movs	r1, #78	; 0x4e
 80070a0:	4843      	ldr	r0, [pc, #268]	; (80071b0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 80070a2:	f7fa fe7d 	bl	8001da0 <EF_PutString>
 80070a6:	e078      	b.n	800719a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80070a8:	88fb      	ldrh	r3, [r7, #6]
 80070aa:	2be8      	cmp	r3, #232	; 0xe8
 80070ac:	d930      	bls.n	8007110 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
 80070ae:	88fb      	ldrh	r3, [r7, #6]
 80070b0:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 80070b4:	d22c      	bcs.n	8007110 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule1 < 59)
 80070b6:	4b40      	ldr	r3, [pc, #256]	; (80071b8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	2b3a      	cmp	r3, #58	; 0x3a
 80070bc:	d806      	bhi.n	80070cc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule1++;
 80070be:	4b3e      	ldr	r3, [pc, #248]	; (80071b8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	3301      	adds	r3, #1
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	4b3c      	ldr	r3, [pc, #240]	; (80071b8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	e002      	b.n	80070d2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule1 = 0;
 80070cc:	4b3a      	ldr	r3, [pc, #232]	; (80071b8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 80070d2:	4b39      	ldr	r3, [pc, #228]	; (80071b8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	2b09      	cmp	r3, #9
 80070d8:	d907      	bls.n	80070ea <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xbe>
 80070da:	4b37      	ldr	r3, [pc, #220]	; (80071b8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	461a      	mov	r2, r3
 80070e0:	4932      	ldr	r1, [pc, #200]	; (80071ac <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 80070e2:	4833      	ldr	r0, [pc, #204]	; (80071b0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 80070e4:	f00a ff30 	bl	8011f48 <siprintf>
 80070e8:	e006      	b.n	80070f8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 80070ea:	4b33      	ldr	r3, [pc, #204]	; (80071b8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	4930      	ldr	r1, [pc, #192]	; (80071b4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 80070f2:	482f      	ldr	r0, [pc, #188]	; (80071b0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 80070f4:	f00a ff28 	bl	8011f48 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80070f8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80070fc:	9301      	str	r3, [sp, #4]
 80070fe:	2301      	movs	r3, #1
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	2300      	movs	r3, #0
 8007104:	2287      	movs	r2, #135	; 0x87
 8007106:	218a      	movs	r1, #138	; 0x8a
 8007108:	4829      	ldr	r0, [pc, #164]	; (80071b0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 800710a:	f7fa fe49 	bl	8001da0 <EF_PutString>
 800710e:	e044      	b.n	800719a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007110:	88fb      	ldrh	r3, [r7, #6]
 8007112:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8007116:	d940      	bls.n	800719a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 8007118:	88fb      	ldrh	r3, [r7, #6]
 800711a:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800711e:	d23c      	bcs.n	800719a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule1 < 49)
 8007120:	4b25      	ldr	r3, [pc, #148]	; (80071b8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	2b30      	cmp	r3, #48	; 0x30
 8007126:	d806      	bhi.n	8007136 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule1 = minuteOffSchedule1 + 10;
 8007128:	4b23      	ldr	r3, [pc, #140]	; (80071b8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	330a      	adds	r3, #10
 800712e:	b2da      	uxtb	r2, r3
 8007130:	4b21      	ldr	r3, [pc, #132]	; (80071b8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007132:	701a      	strb	r2, [r3, #0]
 8007134:	e012      	b.n	800715c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule1 = (minuteOffSchedule1 + 10) % 60;
 8007136:	4b20      	ldr	r3, [pc, #128]	; (80071b8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	f103 020a 	add.w	r2, r3, #10
 800713e:	4b1f      	ldr	r3, [pc, #124]	; (80071bc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x190>)
 8007140:	fb83 1302 	smull	r1, r3, r3, r2
 8007144:	4413      	add	r3, r2
 8007146:	1159      	asrs	r1, r3, #5
 8007148:	17d3      	asrs	r3, r2, #31
 800714a:	1ac9      	subs	r1, r1, r3
 800714c:	460b      	mov	r3, r1
 800714e:	011b      	lsls	r3, r3, #4
 8007150:	1a5b      	subs	r3, r3, r1
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	1ad1      	subs	r1, r2, r3
 8007156:	b2ca      	uxtb	r2, r1
 8007158:	4b17      	ldr	r3, [pc, #92]	; (80071b8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 800715a:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 800715c:	4b16      	ldr	r3, [pc, #88]	; (80071b8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	2b09      	cmp	r3, #9
 8007162:	d907      	bls.n	8007174 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x148>
 8007164:	4b14      	ldr	r3, [pc, #80]	; (80071b8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	461a      	mov	r2, r3
 800716a:	4910      	ldr	r1, [pc, #64]	; (80071ac <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 800716c:	4810      	ldr	r0, [pc, #64]	; (80071b0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 800716e:	f00a feeb 	bl	8011f48 <siprintf>
 8007172:	e006      	b.n	8007182 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 8007174:	4b10      	ldr	r3, [pc, #64]	; (80071b8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	461a      	mov	r2, r3
 800717a:	490e      	ldr	r1, [pc, #56]	; (80071b4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 800717c:	480c      	ldr	r0, [pc, #48]	; (80071b0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 800717e:	f00a fee3 	bl	8011f48 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007182:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007186:	9301      	str	r3, [sp, #4]
 8007188:	2301      	movs	r3, #1
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	2300      	movs	r3, #0
 800718e:	2287      	movs	r2, #135	; 0x87
 8007190:	218a      	movs	r1, #138	; 0x8a
 8007192:	4807      	ldr	r0, [pc, #28]	; (80071b0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8007194:	f7fa fe04 	bl	8001da0 <EF_PutString>
	}
}
 8007198:	e7ff      	b.n	800719a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 800719a:	bf00      	nop
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	080296c4 	.word	0x080296c4
 80071a8:	20000282 	.word	0x20000282
 80071ac:	08016120 	.word	0x08016120
 80071b0:	200002c0 	.word	0x200002c0
 80071b4:	08016128 	.word	0x08016128
 80071b8:	20000284 	.word	0x20000284
 80071bc:	88888889 	.word	0x88888889

080071c0 <MenuTFTSchedule2ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule2Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule2ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	4603      	mov	r3, r0
 80071c8:	460a      	mov	r2, r1
 80071ca:	80fb      	strh	r3, [r7, #6]
 80071cc:	4613      	mov	r3, r2
 80071ce:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 80071d0:	88fb      	ldrh	r3, [r7, #6]
 80071d2:	2b3b      	cmp	r3, #59	; 0x3b
 80071d4:	d91a      	bls.n	800720c <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
 80071d6:	88fb      	ldrh	r3, [r7, #6]
 80071d8:	2b50      	cmp	r3, #80	; 0x50
 80071da:	d817      	bhi.n	800720c <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
	{
		if(schedule2DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 80071dc:	4b68      	ldr	r3, [pc, #416]	; (8007380 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d004      	beq.n	80071ee <MenuTFTSchedule2ActivityDayOfWeekRow+0x2e>
 80071e4:	2100      	movs	r1, #0
 80071e6:	2001      	movs	r0, #1
 80071e8:	f7ff fc5e 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
 80071ec:	e003      	b.n	80071f6 <MenuTFTSchedule2ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 80071ee:	2101      	movs	r1, #1
 80071f0:	2001      	movs	r0, #1
 80071f2:	f7ff fc59 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[0] = !schedule2DayInWeekTab[0]; // update current state in tab holding state of day in week
 80071f6:	4b62      	ldr	r3, [pc, #392]	; (8007380 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	bf0c      	ite	eq
 80071fe:	2301      	moveq	r3, #1
 8007200:	2300      	movne	r3, #0
 8007202:	b2db      	uxtb	r3, r3
 8007204:	461a      	mov	r2, r3
 8007206:	4b5e      	ldr	r3, [pc, #376]	; (8007380 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007208:	701a      	strb	r2, [r3, #0]
 800720a:	e0b4      	b.n	8007376 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 800720c:	88fb      	ldrh	r3, [r7, #6]
 800720e:	2b59      	cmp	r3, #89	; 0x59
 8007210:	d91a      	bls.n	8007248 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
 8007212:	88fb      	ldrh	r3, [r7, #6]
 8007214:	2b6e      	cmp	r3, #110	; 0x6e
 8007216:	d817      	bhi.n	8007248 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
	{
		if(schedule2DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8007218:	4b59      	ldr	r3, [pc, #356]	; (8007380 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800721a:	785b      	ldrb	r3, [r3, #1]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d004      	beq.n	800722a <MenuTFTSchedule2ActivityDayOfWeekRow+0x6a>
 8007220:	2100      	movs	r1, #0
 8007222:	2002      	movs	r0, #2
 8007224:	f7ff fc40 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
 8007228:	e003      	b.n	8007232 <MenuTFTSchedule2ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 800722a:	2101      	movs	r1, #1
 800722c:	2002      	movs	r0, #2
 800722e:	f7ff fc3b 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[1] = !schedule2DayInWeekTab[1]; // update current state in tab holding state of day in week
 8007232:	4b53      	ldr	r3, [pc, #332]	; (8007380 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007234:	785b      	ldrb	r3, [r3, #1]
 8007236:	2b00      	cmp	r3, #0
 8007238:	bf0c      	ite	eq
 800723a:	2301      	moveq	r3, #1
 800723c:	2300      	movne	r3, #0
 800723e:	b2db      	uxtb	r3, r3
 8007240:	461a      	mov	r2, r3
 8007242:	4b4f      	ldr	r3, [pc, #316]	; (8007380 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007244:	705a      	strb	r2, [r3, #1]
 8007246:	e096      	b.n	8007376 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007248:	88fb      	ldrh	r3, [r7, #6]
 800724a:	2b77      	cmp	r3, #119	; 0x77
 800724c:	d91a      	bls.n	8007284 <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
 800724e:	88fb      	ldrh	r3, [r7, #6]
 8007250:	2b8c      	cmp	r3, #140	; 0x8c
 8007252:	d817      	bhi.n	8007284 <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
	{
		if(schedule2DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8007254:	4b4a      	ldr	r3, [pc, #296]	; (8007380 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007256:	789b      	ldrb	r3, [r3, #2]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d004      	beq.n	8007266 <MenuTFTSchedule2ActivityDayOfWeekRow+0xa6>
 800725c:	2100      	movs	r1, #0
 800725e:	2003      	movs	r0, #3
 8007260:	f7ff fc22 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
 8007264:	e003      	b.n	800726e <MenuTFTSchedule2ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 8007266:	2101      	movs	r1, #1
 8007268:	2003      	movs	r0, #3
 800726a:	f7ff fc1d 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[2] = !schedule2DayInWeekTab[2]; // update current state in tab holding state of day in week
 800726e:	4b44      	ldr	r3, [pc, #272]	; (8007380 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007270:	789b      	ldrb	r3, [r3, #2]
 8007272:	2b00      	cmp	r3, #0
 8007274:	bf0c      	ite	eq
 8007276:	2301      	moveq	r3, #1
 8007278:	2300      	movne	r3, #0
 800727a:	b2db      	uxtb	r3, r3
 800727c:	461a      	mov	r2, r3
 800727e:	4b40      	ldr	r3, [pc, #256]	; (8007380 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007280:	709a      	strb	r2, [r3, #2]
 8007282:	e078      	b.n	8007376 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8007284:	88fb      	ldrh	r3, [r7, #6]
 8007286:	2b95      	cmp	r3, #149	; 0x95
 8007288:	d91a      	bls.n	80072c0 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
 800728a:	88fb      	ldrh	r3, [r7, #6]
 800728c:	2baa      	cmp	r3, #170	; 0xaa
 800728e:	d817      	bhi.n	80072c0 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
	{
		if(schedule2DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 8007290:	4b3b      	ldr	r3, [pc, #236]	; (8007380 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007292:	78db      	ldrb	r3, [r3, #3]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d004      	beq.n	80072a2 <MenuTFTSchedule2ActivityDayOfWeekRow+0xe2>
 8007298:	2100      	movs	r1, #0
 800729a:	2004      	movs	r0, #4
 800729c:	f7ff fc04 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
 80072a0:	e003      	b.n	80072aa <MenuTFTSchedule2ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 80072a2:	2101      	movs	r1, #1
 80072a4:	2004      	movs	r0, #4
 80072a6:	f7ff fbff 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[3] = !schedule2DayInWeekTab[3]; // update current state in tab holding state of day in week
 80072aa:	4b35      	ldr	r3, [pc, #212]	; (8007380 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80072ac:	78db      	ldrb	r3, [r3, #3]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	bf0c      	ite	eq
 80072b2:	2301      	moveq	r3, #1
 80072b4:	2300      	movne	r3, #0
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	461a      	mov	r2, r3
 80072ba:	4b31      	ldr	r3, [pc, #196]	; (8007380 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80072bc:	70da      	strb	r2, [r3, #3]
 80072be:	e05a      	b.n	8007376 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 80072c0:	88fb      	ldrh	r3, [r7, #6]
 80072c2:	2bb3      	cmp	r3, #179	; 0xb3
 80072c4:	d91a      	bls.n	80072fc <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
 80072c6:	88fb      	ldrh	r3, [r7, #6]
 80072c8:	2bc8      	cmp	r3, #200	; 0xc8
 80072ca:	d817      	bhi.n	80072fc <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
	{
		if(schedule2DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 80072cc:	4b2c      	ldr	r3, [pc, #176]	; (8007380 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80072ce:	791b      	ldrb	r3, [r3, #4]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d004      	beq.n	80072de <MenuTFTSchedule2ActivityDayOfWeekRow+0x11e>
 80072d4:	2100      	movs	r1, #0
 80072d6:	2005      	movs	r0, #5
 80072d8:	f7ff fbe6 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
 80072dc:	e003      	b.n	80072e6 <MenuTFTSchedule2ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 80072de:	2101      	movs	r1, #1
 80072e0:	2005      	movs	r0, #5
 80072e2:	f7ff fbe1 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[4] = !schedule2DayInWeekTab[4]; // update current state in tab holding state of day in week
 80072e6:	4b26      	ldr	r3, [pc, #152]	; (8007380 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80072e8:	791b      	ldrb	r3, [r3, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	bf0c      	ite	eq
 80072ee:	2301      	moveq	r3, #1
 80072f0:	2300      	movne	r3, #0
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	461a      	mov	r2, r3
 80072f6:	4b22      	ldr	r3, [pc, #136]	; (8007380 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80072f8:	711a      	strb	r2, [r3, #4]
 80072fa:	e03c      	b.n	8007376 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 80072fc:	88fb      	ldrh	r3, [r7, #6]
 80072fe:	2bd1      	cmp	r3, #209	; 0xd1
 8007300:	d91a      	bls.n	8007338 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
 8007302:	88fb      	ldrh	r3, [r7, #6]
 8007304:	2be6      	cmp	r3, #230	; 0xe6
 8007306:	d817      	bhi.n	8007338 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
	{
		if(schedule2DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8007308:	4b1d      	ldr	r3, [pc, #116]	; (8007380 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800730a:	795b      	ldrb	r3, [r3, #5]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d004      	beq.n	800731a <MenuTFTSchedule2ActivityDayOfWeekRow+0x15a>
 8007310:	2100      	movs	r1, #0
 8007312:	2006      	movs	r0, #6
 8007314:	f7ff fbc8 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
 8007318:	e003      	b.n	8007322 <MenuTFTSchedule2ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 800731a:	2101      	movs	r1, #1
 800731c:	2006      	movs	r0, #6
 800731e:	f7ff fbc3 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[5] = !schedule2DayInWeekTab[5]; // update current state in tab holding state of day in week
 8007322:	4b17      	ldr	r3, [pc, #92]	; (8007380 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007324:	795b      	ldrb	r3, [r3, #5]
 8007326:	2b00      	cmp	r3, #0
 8007328:	bf0c      	ite	eq
 800732a:	2301      	moveq	r3, #1
 800732c:	2300      	movne	r3, #0
 800732e:	b2db      	uxtb	r3, r3
 8007330:	461a      	mov	r2, r3
 8007332:	4b13      	ldr	r3, [pc, #76]	; (8007380 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007334:	715a      	strb	r2, [r3, #5]
 8007336:	e01e      	b.n	8007376 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007338:	88fb      	ldrh	r3, [r7, #6]
 800733a:	2bef      	cmp	r3, #239	; 0xef
 800733c:	d91b      	bls.n	8007376 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 800733e:	88fb      	ldrh	r3, [r7, #6]
 8007340:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007344:	d817      	bhi.n	8007376 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule2DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 8007346:	4b0e      	ldr	r3, [pc, #56]	; (8007380 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007348:	799b      	ldrb	r3, [r3, #6]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d004      	beq.n	8007358 <MenuTFTSchedule2ActivityDayOfWeekRow+0x198>
 800734e:	2100      	movs	r1, #0
 8007350:	2007      	movs	r0, #7
 8007352:	f7ff fba9 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
 8007356:	e003      	b.n	8007360 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8007358:	2101      	movs	r1, #1
 800735a:	2007      	movs	r0, #7
 800735c:	f7ff fba4 	bl	8006aa8 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[6] = !schedule2DayInWeekTab[6]; // update current state in tab holding state of day in week
 8007360:	4b07      	ldr	r3, [pc, #28]	; (8007380 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007362:	799b      	ldrb	r3, [r3, #6]
 8007364:	2b00      	cmp	r3, #0
 8007366:	bf0c      	ite	eq
 8007368:	2301      	moveq	r3, #1
 800736a:	2300      	movne	r3, #0
 800736c:	b2db      	uxtb	r3, r3
 800736e:	461a      	mov	r2, r3
 8007370:	4b03      	ldr	r3, [pc, #12]	; (8007380 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007372:	719a      	strb	r2, [r3, #6]
	}
}
 8007374:	e7ff      	b.n	8007376 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 8007376:	bf00      	nop
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20000270 	.word	0x20000270

08007384 <MenuTFTSchedule2ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule2ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af02      	add	r7, sp, #8
 800738a:	4603      	mov	r3, r0
 800738c:	460a      	mov	r2, r1
 800738e:	80fb      	strh	r3, [r7, #6]
 8007390:	4613      	mov	r3, r2
 8007392:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007394:	4859      	ldr	r0, [pc, #356]	; (80074fc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x178>)
 8007396:	f7fa fae9 	bl	800196c <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 800739a:	88fb      	ldrh	r3, [r7, #6]
 800739c:	2bba      	cmp	r3, #186	; 0xba
 800739e:	d92f      	bls.n	8007400 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
 80073a0:	88fb      	ldrh	r3, [r7, #6]
 80073a2:	2bdd      	cmp	r3, #221	; 0xdd
 80073a4:	d82c      	bhi.n	8007400 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule2 < 24)
 80073a6:	4b56      	ldr	r3, [pc, #344]	; (8007500 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	2b17      	cmp	r3, #23
 80073ac:	d806      	bhi.n	80073bc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule2++;
 80073ae:	4b54      	ldr	r3, [pc, #336]	; (8007500 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	3301      	adds	r3, #1
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	4b52      	ldr	r3, [pc, #328]	; (8007500 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80073b8:	701a      	strb	r2, [r3, #0]
 80073ba:	e002      	b.n	80073c2 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule2 = 1;
 80073bc:	4b50      	ldr	r3, [pc, #320]	; (8007500 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80073be:	2201      	movs	r2, #1
 80073c0:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule2);
 80073c2:	4b4f      	ldr	r3, [pc, #316]	; (8007500 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	2b09      	cmp	r3, #9
 80073c8:	d907      	bls.n	80073da <MenuTFTSchedule2ActivityHourMinuteONAdd+0x56>
 80073ca:	4b4d      	ldr	r3, [pc, #308]	; (8007500 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	494c      	ldr	r1, [pc, #304]	; (8007504 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 80073d2:	484d      	ldr	r0, [pc, #308]	; (8007508 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80073d4:	f00a fdb8 	bl	8011f48 <siprintf>
 80073d8:	e006      	b.n	80073e8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule2);
 80073da:	4b49      	ldr	r3, [pc, #292]	; (8007500 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	461a      	mov	r2, r3
 80073e0:	494a      	ldr	r1, [pc, #296]	; (800750c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 80073e2:	4849      	ldr	r0, [pc, #292]	; (8007508 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80073e4:	f00a fdb0 	bl	8011f48 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80073e8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80073ec:	9301      	str	r3, [sp, #4]
 80073ee:	2301      	movs	r3, #1
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	2300      	movs	r3, #0
 80073f4:	2264      	movs	r2, #100	; 0x64
 80073f6:	214e      	movs	r1, #78	; 0x4e
 80073f8:	4843      	ldr	r0, [pc, #268]	; (8007508 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80073fa:	f7fa fcd1 	bl	8001da0 <EF_PutString>
 80073fe:	e078      	b.n	80074f2 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007400:	88fb      	ldrh	r3, [r7, #6]
 8007402:	2be8      	cmp	r3, #232	; 0xe8
 8007404:	d930      	bls.n	8007468 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
 8007406:	88fb      	ldrh	r3, [r7, #6]
 8007408:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 800740c:	d22c      	bcs.n	8007468 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule2 < 59)
 800740e:	4b40      	ldr	r3, [pc, #256]	; (8007510 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	2b3a      	cmp	r3, #58	; 0x3a
 8007414:	d806      	bhi.n	8007424 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule2++;
 8007416:	4b3e      	ldr	r3, [pc, #248]	; (8007510 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	3301      	adds	r3, #1
 800741c:	b2da      	uxtb	r2, r3
 800741e:	4b3c      	ldr	r3, [pc, #240]	; (8007510 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007420:	701a      	strb	r2, [r3, #0]
 8007422:	e002      	b.n	800742a <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule2 = 0;
 8007424:	4b3a      	ldr	r3, [pc, #232]	; (8007510 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007426:	2200      	movs	r2, #0
 8007428:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 800742a:	4b39      	ldr	r3, [pc, #228]	; (8007510 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	2b09      	cmp	r3, #9
 8007430:	d907      	bls.n	8007442 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xbe>
 8007432:	4b37      	ldr	r3, [pc, #220]	; (8007510 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	4932      	ldr	r1, [pc, #200]	; (8007504 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 800743a:	4833      	ldr	r0, [pc, #204]	; (8007508 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800743c:	f00a fd84 	bl	8011f48 <siprintf>
 8007440:	e006      	b.n	8007450 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 8007442:	4b33      	ldr	r3, [pc, #204]	; (8007510 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	4930      	ldr	r1, [pc, #192]	; (800750c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 800744a:	482f      	ldr	r0, [pc, #188]	; (8007508 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800744c:	f00a fd7c 	bl	8011f48 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007450:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007454:	9301      	str	r3, [sp, #4]
 8007456:	2301      	movs	r3, #1
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	2300      	movs	r3, #0
 800745c:	2264      	movs	r2, #100	; 0x64
 800745e:	218a      	movs	r1, #138	; 0x8a
 8007460:	4829      	ldr	r0, [pc, #164]	; (8007508 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007462:	f7fa fc9d 	bl	8001da0 <EF_PutString>
 8007466:	e044      	b.n	80074f2 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007468:	88fb      	ldrh	r3, [r7, #6]
 800746a:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 800746e:	d940      	bls.n	80074f2 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 8007470:	88fb      	ldrh	r3, [r7, #6]
 8007472:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007476:	d23c      	bcs.n	80074f2 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule2 < 49)
 8007478:	4b25      	ldr	r3, [pc, #148]	; (8007510 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b30      	cmp	r3, #48	; 0x30
 800747e:	d806      	bhi.n	800748e <MenuTFTSchedule2ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule2 = minuteOnSchedule2 + 10;
 8007480:	4b23      	ldr	r3, [pc, #140]	; (8007510 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	330a      	adds	r3, #10
 8007486:	b2da      	uxtb	r2, r3
 8007488:	4b21      	ldr	r3, [pc, #132]	; (8007510 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800748a:	701a      	strb	r2, [r3, #0]
 800748c:	e012      	b.n	80074b4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule2 = (minuteOnSchedule2 + 10) % 60;
 800748e:	4b20      	ldr	r3, [pc, #128]	; (8007510 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	f103 020a 	add.w	r2, r3, #10
 8007496:	4b1f      	ldr	r3, [pc, #124]	; (8007514 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x190>)
 8007498:	fb83 1302 	smull	r1, r3, r3, r2
 800749c:	4413      	add	r3, r2
 800749e:	1159      	asrs	r1, r3, #5
 80074a0:	17d3      	asrs	r3, r2, #31
 80074a2:	1ac9      	subs	r1, r1, r3
 80074a4:	460b      	mov	r3, r1
 80074a6:	011b      	lsls	r3, r3, #4
 80074a8:	1a5b      	subs	r3, r3, r1
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	1ad1      	subs	r1, r2, r3
 80074ae:	b2ca      	uxtb	r2, r1
 80074b0:	4b17      	ldr	r3, [pc, #92]	; (8007510 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80074b2:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 80074b4:	4b16      	ldr	r3, [pc, #88]	; (8007510 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	2b09      	cmp	r3, #9
 80074ba:	d907      	bls.n	80074cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x148>
 80074bc:	4b14      	ldr	r3, [pc, #80]	; (8007510 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	461a      	mov	r2, r3
 80074c2:	4910      	ldr	r1, [pc, #64]	; (8007504 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 80074c4:	4810      	ldr	r0, [pc, #64]	; (8007508 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80074c6:	f00a fd3f 	bl	8011f48 <siprintf>
 80074ca:	e006      	b.n	80074da <MenuTFTSchedule2ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 80074cc:	4b10      	ldr	r3, [pc, #64]	; (8007510 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	461a      	mov	r2, r3
 80074d2:	490e      	ldr	r1, [pc, #56]	; (800750c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 80074d4:	480c      	ldr	r0, [pc, #48]	; (8007508 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80074d6:	f00a fd37 	bl	8011f48 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80074da:	f24c 6318 	movw	r3, #50712	; 0xc618
 80074de:	9301      	str	r3, [sp, #4]
 80074e0:	2301      	movs	r3, #1
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	2300      	movs	r3, #0
 80074e6:	2264      	movs	r2, #100	; 0x64
 80074e8:	218a      	movs	r1, #138	; 0x8a
 80074ea:	4807      	ldr	r0, [pc, #28]	; (8007508 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80074ec:	f7fa fc58 	bl	8001da0 <EF_PutString>
	}
}
 80074f0:	e7ff      	b.n	80074f2 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 80074f2:	bf00      	nop
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	080296c4 	.word	0x080296c4
 8007500:	20000285 	.word	0x20000285
 8007504:	08016120 	.word	0x08016120
 8007508:	200002c0 	.word	0x200002c0
 800750c:	08016128 	.word	0x08016128
 8007510:	20000287 	.word	0x20000287
 8007514:	88888889 	.word	0x88888889

08007518 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute OFF section
void MenuTFTSchedule2ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af02      	add	r7, sp, #8
 800751e:	4603      	mov	r3, r0
 8007520:	460a      	mov	r2, r1
 8007522:	80fb      	strh	r3, [r7, #6]
 8007524:	4613      	mov	r3, r2
 8007526:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007528:	4859      	ldr	r0, [pc, #356]	; (8007690 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x178>)
 800752a:	f7fa fa1f 	bl	800196c <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 800752e:	88fb      	ldrh	r3, [r7, #6]
 8007530:	2bba      	cmp	r3, #186	; 0xba
 8007532:	d92f      	bls.n	8007594 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
 8007534:	88fb      	ldrh	r3, [r7, #6]
 8007536:	2bdd      	cmp	r3, #221	; 0xdd
 8007538:	d82c      	bhi.n	8007594 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule2 < 24)
 800753a:	4b56      	ldr	r3, [pc, #344]	; (8007694 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	2b17      	cmp	r3, #23
 8007540:	d806      	bhi.n	8007550 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule2++;
 8007542:	4b54      	ldr	r3, [pc, #336]	; (8007694 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	3301      	adds	r3, #1
 8007548:	b2da      	uxtb	r2, r3
 800754a:	4b52      	ldr	r3, [pc, #328]	; (8007694 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 800754c:	701a      	strb	r2, [r3, #0]
 800754e:	e002      	b.n	8007556 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule2 = 1;
 8007550:	4b50      	ldr	r3, [pc, #320]	; (8007694 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007552:	2201      	movs	r2, #1
 8007554:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule2);
 8007556:	4b4f      	ldr	r3, [pc, #316]	; (8007694 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b09      	cmp	r3, #9
 800755c:	d907      	bls.n	800756e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x56>
 800755e:	4b4d      	ldr	r3, [pc, #308]	; (8007694 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	461a      	mov	r2, r3
 8007564:	494c      	ldr	r1, [pc, #304]	; (8007698 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 8007566:	484d      	ldr	r0, [pc, #308]	; (800769c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007568:	f00a fcee 	bl	8011f48 <siprintf>
 800756c:	e006      	b.n	800757c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule2);
 800756e:	4b49      	ldr	r3, [pc, #292]	; (8007694 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	494a      	ldr	r1, [pc, #296]	; (80076a0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 8007576:	4849      	ldr	r0, [pc, #292]	; (800769c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007578:	f00a fce6 	bl	8011f48 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800757c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007580:	9301      	str	r3, [sp, #4]
 8007582:	2301      	movs	r3, #1
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	2300      	movs	r3, #0
 8007588:	2287      	movs	r2, #135	; 0x87
 800758a:	2150      	movs	r1, #80	; 0x50
 800758c:	4843      	ldr	r0, [pc, #268]	; (800769c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 800758e:	f7fa fc07 	bl	8001da0 <EF_PutString>
 8007592:	e078      	b.n	8007686 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007594:	88fb      	ldrh	r3, [r7, #6]
 8007596:	2be8      	cmp	r3, #232	; 0xe8
 8007598:	d930      	bls.n	80075fc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
 800759a:	88fb      	ldrh	r3, [r7, #6]
 800759c:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 80075a0:	d22c      	bcs.n	80075fc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule2 < 59)
 80075a2:	4b40      	ldr	r3, [pc, #256]	; (80076a4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	2b3a      	cmp	r3, #58	; 0x3a
 80075a8:	d806      	bhi.n	80075b8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule2++;
 80075aa:	4b3e      	ldr	r3, [pc, #248]	; (80076a4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	3301      	adds	r3, #1
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	4b3c      	ldr	r3, [pc, #240]	; (80076a4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80075b4:	701a      	strb	r2, [r3, #0]
 80075b6:	e002      	b.n	80075be <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule2 = 0;
 80075b8:	4b3a      	ldr	r3, [pc, #232]	; (80076a4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 80075be:	4b39      	ldr	r3, [pc, #228]	; (80076a4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	2b09      	cmp	r3, #9
 80075c4:	d907      	bls.n	80075d6 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xbe>
 80075c6:	4b37      	ldr	r3, [pc, #220]	; (80076a4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	461a      	mov	r2, r3
 80075cc:	4932      	ldr	r1, [pc, #200]	; (8007698 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 80075ce:	4833      	ldr	r0, [pc, #204]	; (800769c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80075d0:	f00a fcba 	bl	8011f48 <siprintf>
 80075d4:	e006      	b.n	80075e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 80075d6:	4b33      	ldr	r3, [pc, #204]	; (80076a4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	4930      	ldr	r1, [pc, #192]	; (80076a0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 80075de:	482f      	ldr	r0, [pc, #188]	; (800769c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80075e0:	f00a fcb2 	bl	8011f48 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80075e4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80075e8:	9301      	str	r3, [sp, #4]
 80075ea:	2301      	movs	r3, #1
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	2300      	movs	r3, #0
 80075f0:	2287      	movs	r2, #135	; 0x87
 80075f2:	218a      	movs	r1, #138	; 0x8a
 80075f4:	4829      	ldr	r0, [pc, #164]	; (800769c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80075f6:	f7fa fbd3 	bl	8001da0 <EF_PutString>
 80075fa:	e044      	b.n	8007686 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80075fc:	88fb      	ldrh	r3, [r7, #6]
 80075fe:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8007602:	d940      	bls.n	8007686 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 8007604:	88fb      	ldrh	r3, [r7, #6]
 8007606:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800760a:	d23c      	bcs.n	8007686 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule2 < 49)
 800760c:	4b25      	ldr	r3, [pc, #148]	; (80076a4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	2b30      	cmp	r3, #48	; 0x30
 8007612:	d806      	bhi.n	8007622 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule2 = minuteOffSchedule2 + 10;
 8007614:	4b23      	ldr	r3, [pc, #140]	; (80076a4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	330a      	adds	r3, #10
 800761a:	b2da      	uxtb	r2, r3
 800761c:	4b21      	ldr	r3, [pc, #132]	; (80076a4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800761e:	701a      	strb	r2, [r3, #0]
 8007620:	e012      	b.n	8007648 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule2 = (minuteOffSchedule2 + 10) % 60;
 8007622:	4b20      	ldr	r3, [pc, #128]	; (80076a4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	f103 020a 	add.w	r2, r3, #10
 800762a:	4b1f      	ldr	r3, [pc, #124]	; (80076a8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x190>)
 800762c:	fb83 1302 	smull	r1, r3, r3, r2
 8007630:	4413      	add	r3, r2
 8007632:	1159      	asrs	r1, r3, #5
 8007634:	17d3      	asrs	r3, r2, #31
 8007636:	1ac9      	subs	r1, r1, r3
 8007638:	460b      	mov	r3, r1
 800763a:	011b      	lsls	r3, r3, #4
 800763c:	1a5b      	subs	r3, r3, r1
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	1ad1      	subs	r1, r2, r3
 8007642:	b2ca      	uxtb	r2, r1
 8007644:	4b17      	ldr	r3, [pc, #92]	; (80076a4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007646:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 8007648:	4b16      	ldr	r3, [pc, #88]	; (80076a4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	2b09      	cmp	r3, #9
 800764e:	d907      	bls.n	8007660 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x148>
 8007650:	4b14      	ldr	r3, [pc, #80]	; (80076a4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	461a      	mov	r2, r3
 8007656:	4910      	ldr	r1, [pc, #64]	; (8007698 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 8007658:	4810      	ldr	r0, [pc, #64]	; (800769c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 800765a:	f00a fc75 	bl	8011f48 <siprintf>
 800765e:	e006      	b.n	800766e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 8007660:	4b10      	ldr	r3, [pc, #64]	; (80076a4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	461a      	mov	r2, r3
 8007666:	490e      	ldr	r1, [pc, #56]	; (80076a0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 8007668:	480c      	ldr	r0, [pc, #48]	; (800769c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 800766a:	f00a fc6d 	bl	8011f48 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800766e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007672:	9301      	str	r3, [sp, #4]
 8007674:	2301      	movs	r3, #1
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	2300      	movs	r3, #0
 800767a:	2287      	movs	r2, #135	; 0x87
 800767c:	218a      	movs	r1, #138	; 0x8a
 800767e:	4807      	ldr	r0, [pc, #28]	; (800769c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007680:	f7fa fb8e 	bl	8001da0 <EF_PutString>
	}
}
 8007684:	e7ff      	b.n	8007686 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 8007686:	bf00      	nop
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	080296c4 	.word	0x080296c4
 8007694:	20000286 	.word	0x20000286
 8007698:	08016120 	.word	0x08016120
 800769c:	200002c0 	.word	0x200002c0
 80076a0:	08016128 	.word	0x08016128
 80076a4:	20000288 	.word	0x20000288
 80076a8:	88888889 	.word	0x88888889

080076ac <MenuTFTSchedule1ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 1 section
//
void MenuTFTSchedule1ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	4603      	mov	r3, r0
 80076b4:	460a      	mov	r2, r1
 80076b6:	80fb      	strh	r3, [r7, #6]
 80076b8:	4613      	mov	r3, r2
 80076ba:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 80076bc:	88fb      	ldrh	r3, [r7, #6]
 80076be:	2b14      	cmp	r3, #20
 80076c0:	d919      	bls.n	80076f6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
 80076c2:	88fb      	ldrh	r3, [r7, #6]
 80076c4:	2b29      	cmp	r3, #41	; 0x29
 80076c6:	d816      	bhi.n	80076f6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule1RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 80076c8:	4b82      	ldr	r3, [pc, #520]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d004      	beq.n	80076da <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x2e>
 80076d0:	2100      	movs	r1, #0
 80076d2:	2001      	movs	r0, #1
 80076d4:	f7ff fac5 	bl	8006c62 <changeTFTScheduleRelayLights>
 80076d8:	e003      	b.n	80076e2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 80076da:	2101      	movs	r1, #1
 80076dc:	2001      	movs	r0, #1
 80076de:	f7ff fac0 	bl	8006c62 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[0] = !schedule1RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 80076e2:	4b7c      	ldr	r3, [pc, #496]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	bf0c      	ite	eq
 80076ea:	2301      	moveq	r3, #1
 80076ec:	2300      	movne	r3, #0
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	461a      	mov	r2, r3
 80076f2:	4b78      	ldr	r3, [pc, #480]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80076f4:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 80076f6:	88fb      	ldrh	r3, [r7, #6]
 80076f8:	2b34      	cmp	r3, #52	; 0x34
 80076fa:	d919      	bls.n	8007730 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
 80076fc:	88fb      	ldrh	r3, [r7, #6]
 80076fe:	2b49      	cmp	r3, #73	; 0x49
 8007700:	d816      	bhi.n	8007730 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule1RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 8007702:	4b74      	ldr	r3, [pc, #464]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007704:	785b      	ldrb	r3, [r3, #1]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d004      	beq.n	8007714 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x68>
 800770a:	2100      	movs	r1, #0
 800770c:	2002      	movs	r0, #2
 800770e:	f7ff faa8 	bl	8006c62 <changeTFTScheduleRelayLights>
 8007712:	e003      	b.n	800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 8007714:	2101      	movs	r1, #1
 8007716:	2002      	movs	r0, #2
 8007718:	f7ff faa3 	bl	8006c62 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[1] = !schedule1RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 800771c:	4b6d      	ldr	r3, [pc, #436]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800771e:	785b      	ldrb	r3, [r3, #1]
 8007720:	2b00      	cmp	r3, #0
 8007722:	bf0c      	ite	eq
 8007724:	2301      	moveq	r3, #1
 8007726:	2300      	movne	r3, #0
 8007728:	b2db      	uxtb	r3, r3
 800772a:	461a      	mov	r2, r3
 800772c:	4b69      	ldr	r3, [pc, #420]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800772e:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007730:	88fb      	ldrh	r3, [r7, #6]
 8007732:	2b54      	cmp	r3, #84	; 0x54
 8007734:	d919      	bls.n	800776a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
 8007736:	88fb      	ldrh	r3, [r7, #6]
 8007738:	2b69      	cmp	r3, #105	; 0x69
 800773a:	d816      	bhi.n	800776a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule1RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 800773c:	4b65      	ldr	r3, [pc, #404]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800773e:	789b      	ldrb	r3, [r3, #2]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d004      	beq.n	800774e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xa2>
 8007744:	2100      	movs	r1, #0
 8007746:	2003      	movs	r0, #3
 8007748:	f7ff fa8b 	bl	8006c62 <changeTFTScheduleRelayLights>
 800774c:	e003      	b.n	8007756 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 800774e:	2101      	movs	r1, #1
 8007750:	2003      	movs	r0, #3
 8007752:	f7ff fa86 	bl	8006c62 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[2] = !schedule1RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 8007756:	4b5f      	ldr	r3, [pc, #380]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007758:	789b      	ldrb	r3, [r3, #2]
 800775a:	2b00      	cmp	r3, #0
 800775c:	bf0c      	ite	eq
 800775e:	2301      	moveq	r3, #1
 8007760:	2300      	movne	r3, #0
 8007762:	b2db      	uxtb	r3, r3
 8007764:	461a      	mov	r2, r3
 8007766:	4b5b      	ldr	r3, [pc, #364]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007768:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 800776a:	88fb      	ldrh	r3, [r7, #6]
 800776c:	2b74      	cmp	r3, #116	; 0x74
 800776e:	d919      	bls.n	80077a4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
 8007770:	88fb      	ldrh	r3, [r7, #6]
 8007772:	2b89      	cmp	r3, #137	; 0x89
 8007774:	d816      	bhi.n	80077a4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule1RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 8007776:	4b57      	ldr	r3, [pc, #348]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007778:	78db      	ldrb	r3, [r3, #3]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d004      	beq.n	8007788 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xdc>
 800777e:	2100      	movs	r1, #0
 8007780:	2004      	movs	r0, #4
 8007782:	f7ff fa6e 	bl	8006c62 <changeTFTScheduleRelayLights>
 8007786:	e003      	b.n	8007790 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 8007788:	2101      	movs	r1, #1
 800778a:	2004      	movs	r0, #4
 800778c:	f7ff fa69 	bl	8006c62 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[3] = !schedule1RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 8007790:	4b50      	ldr	r3, [pc, #320]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007792:	78db      	ldrb	r3, [r3, #3]
 8007794:	2b00      	cmp	r3, #0
 8007796:	bf0c      	ite	eq
 8007798:	2301      	moveq	r3, #1
 800779a:	2300      	movne	r3, #0
 800779c:	b2db      	uxtb	r3, r3
 800779e:	461a      	mov	r2, r3
 80077a0:	4b4c      	ldr	r3, [pc, #304]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80077a2:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 80077a4:	88fb      	ldrh	r3, [r7, #6]
 80077a6:	2b94      	cmp	r3, #148	; 0x94
 80077a8:	d919      	bls.n	80077de <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
 80077aa:	88fb      	ldrh	r3, [r7, #6]
 80077ac:	2ba9      	cmp	r3, #169	; 0xa9
 80077ae:	d816      	bhi.n	80077de <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule1RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 80077b0:	4b48      	ldr	r3, [pc, #288]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80077b2:	791b      	ldrb	r3, [r3, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d004      	beq.n	80077c2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x116>
 80077b8:	2100      	movs	r1, #0
 80077ba:	2005      	movs	r0, #5
 80077bc:	f7ff fa51 	bl	8006c62 <changeTFTScheduleRelayLights>
 80077c0:	e003      	b.n	80077ca <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 80077c2:	2101      	movs	r1, #1
 80077c4:	2005      	movs	r0, #5
 80077c6:	f7ff fa4c 	bl	8006c62 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[4] = !schedule1RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 80077ca:	4b42      	ldr	r3, [pc, #264]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80077cc:	791b      	ldrb	r3, [r3, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	bf0c      	ite	eq
 80077d2:	2301      	moveq	r3, #1
 80077d4:	2300      	movne	r3, #0
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	461a      	mov	r2, r3
 80077da:	4b3e      	ldr	r3, [pc, #248]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80077dc:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 80077de:	88fb      	ldrh	r3, [r7, #6]
 80077e0:	2bb4      	cmp	r3, #180	; 0xb4
 80077e2:	d919      	bls.n	8007818 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
 80077e4:	88fb      	ldrh	r3, [r7, #6]
 80077e6:	2bc9      	cmp	r3, #201	; 0xc9
 80077e8:	d816      	bhi.n	8007818 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule1RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 80077ea:	4b3a      	ldr	r3, [pc, #232]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80077ec:	795b      	ldrb	r3, [r3, #5]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d004      	beq.n	80077fc <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x150>
 80077f2:	2100      	movs	r1, #0
 80077f4:	2006      	movs	r0, #6
 80077f6:	f7ff fa34 	bl	8006c62 <changeTFTScheduleRelayLights>
 80077fa:	e003      	b.n	8007804 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 80077fc:	2101      	movs	r1, #1
 80077fe:	2006      	movs	r0, #6
 8007800:	f7ff fa2f 	bl	8006c62 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[5] = !schedule1RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 8007804:	4b33      	ldr	r3, [pc, #204]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007806:	795b      	ldrb	r3, [r3, #5]
 8007808:	2b00      	cmp	r3, #0
 800780a:	bf0c      	ite	eq
 800780c:	2301      	moveq	r3, #1
 800780e:	2300      	movne	r3, #0
 8007810:	b2db      	uxtb	r3, r3
 8007812:	461a      	mov	r2, r3
 8007814:	4b2f      	ldr	r3, [pc, #188]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007816:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007818:	88fb      	ldrh	r3, [r7, #6]
 800781a:	2bd4      	cmp	r3, #212	; 0xd4
 800781c:	d919      	bls.n	8007852 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
 800781e:	88fb      	ldrh	r3, [r7, #6]
 8007820:	2be9      	cmp	r3, #233	; 0xe9
 8007822:	d816      	bhi.n	8007852 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule1RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 8007824:	4b2b      	ldr	r3, [pc, #172]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007826:	799b      	ldrb	r3, [r3, #6]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d004      	beq.n	8007836 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x18a>
 800782c:	2100      	movs	r1, #0
 800782e:	2007      	movs	r0, #7
 8007830:	f7ff fa17 	bl	8006c62 <changeTFTScheduleRelayLights>
 8007834:	e003      	b.n	800783e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 8007836:	2101      	movs	r1, #1
 8007838:	2007      	movs	r0, #7
 800783a:	f7ff fa12 	bl	8006c62 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[6] = !schedule1RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 800783e:	4b25      	ldr	r3, [pc, #148]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007840:	799b      	ldrb	r3, [r3, #6]
 8007842:	2b00      	cmp	r3, #0
 8007844:	bf0c      	ite	eq
 8007846:	2301      	moveq	r3, #1
 8007848:	2300      	movne	r3, #0
 800784a:	b2db      	uxtb	r3, r3
 800784c:	461a      	mov	r2, r3
 800784e:	4b21      	ldr	r3, [pc, #132]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007850:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 8007852:	88fb      	ldrh	r3, [r7, #6]
 8007854:	2bf4      	cmp	r3, #244	; 0xf4
 8007856:	d91a      	bls.n	800788e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
 8007858:	88fb      	ldrh	r3, [r7, #6]
 800785a:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 800785e:	d216      	bcs.n	800788e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule1RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 8007860:	4b1c      	ldr	r3, [pc, #112]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007862:	79db      	ldrb	r3, [r3, #7]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d004      	beq.n	8007872 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1c6>
 8007868:	2100      	movs	r1, #0
 800786a:	2008      	movs	r0, #8
 800786c:	f7ff f9f9 	bl	8006c62 <changeTFTScheduleRelayLights>
 8007870:	e003      	b.n	800787a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 8007872:	2101      	movs	r1, #1
 8007874:	2008      	movs	r0, #8
 8007876:	f7ff f9f4 	bl	8006c62 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[7] = !schedule1RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 800787a:	4b16      	ldr	r3, [pc, #88]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800787c:	79db      	ldrb	r3, [r3, #7]
 800787e:	2b00      	cmp	r3, #0
 8007880:	bf0c      	ite	eq
 8007882:	2301      	moveq	r3, #1
 8007884:	2300      	movne	r3, #0
 8007886:	b2db      	uxtb	r3, r3
 8007888:	461a      	mov	r2, r3
 800788a:	4b12      	ldr	r3, [pc, #72]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800788c:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 800788e:	88fb      	ldrh	r3, [r7, #6]
 8007890:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8007894:	d91a      	bls.n	80078cc <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
 8007896:	88fb      	ldrh	r3, [r7, #6]
 8007898:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 800789c:	d216      	bcs.n	80078cc <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule1RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 800789e:	4b0d      	ldr	r3, [pc, #52]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80078a0:	7a1b      	ldrb	r3, [r3, #8]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d004      	beq.n	80078b0 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x204>
 80078a6:	2100      	movs	r1, #0
 80078a8:	2009      	movs	r0, #9
 80078aa:	f7ff f9da 	bl	8006c62 <changeTFTScheduleRelayLights>
 80078ae:	e003      	b.n	80078b8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 80078b0:	2101      	movs	r1, #1
 80078b2:	2009      	movs	r0, #9
 80078b4:	f7ff f9d5 	bl	8006c62 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[8] = !schedule1RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 80078b8:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80078ba:	7a1b      	ldrb	r3, [r3, #8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	bf0c      	ite	eq
 80078c0:	2301      	moveq	r3, #1
 80078c2:	2300      	movne	r3, #0
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	461a      	mov	r2, r3
 80078c8:	4b02      	ldr	r3, [pc, #8]	; (80078d4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80078ca:	721a      	strb	r2, [r3, #8]
	}

}
 80078cc:	bf00      	nop
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	20000264 	.word	0x20000264

080078d8 <MenuTFTSchedule2ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 2 section
//
void MenuTFTSchedule2ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	4603      	mov	r3, r0
 80078e0:	460a      	mov	r2, r1
 80078e2:	80fb      	strh	r3, [r7, #6]
 80078e4:	4613      	mov	r3, r2
 80078e6:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 80078e8:	88fb      	ldrh	r3, [r7, #6]
 80078ea:	2b14      	cmp	r3, #20
 80078ec:	d919      	bls.n	8007922 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
 80078ee:	88fb      	ldrh	r3, [r7, #6]
 80078f0:	2b29      	cmp	r3, #41	; 0x29
 80078f2:	d816      	bhi.n	8007922 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule2RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 80078f4:	4b82      	ldr	r3, [pc, #520]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d004      	beq.n	8007906 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x2e>
 80078fc:	2100      	movs	r1, #0
 80078fe:	2001      	movs	r0, #1
 8007900:	f7ff f9af 	bl	8006c62 <changeTFTScheduleRelayLights>
 8007904:	e003      	b.n	800790e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 8007906:	2101      	movs	r1, #1
 8007908:	2001      	movs	r0, #1
 800790a:	f7ff f9aa 	bl	8006c62 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[0] = !schedule2RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 800790e:	4b7c      	ldr	r3, [pc, #496]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	bf0c      	ite	eq
 8007916:	2301      	moveq	r3, #1
 8007918:	2300      	movne	r3, #0
 800791a:	b2db      	uxtb	r3, r3
 800791c:	461a      	mov	r2, r3
 800791e:	4b78      	ldr	r3, [pc, #480]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007920:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8007922:	88fb      	ldrh	r3, [r7, #6]
 8007924:	2b34      	cmp	r3, #52	; 0x34
 8007926:	d919      	bls.n	800795c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
 8007928:	88fb      	ldrh	r3, [r7, #6]
 800792a:	2b49      	cmp	r3, #73	; 0x49
 800792c:	d816      	bhi.n	800795c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule2RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 800792e:	4b74      	ldr	r3, [pc, #464]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007930:	785b      	ldrb	r3, [r3, #1]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d004      	beq.n	8007940 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x68>
 8007936:	2100      	movs	r1, #0
 8007938:	2002      	movs	r0, #2
 800793a:	f7ff f992 	bl	8006c62 <changeTFTScheduleRelayLights>
 800793e:	e003      	b.n	8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 8007940:	2101      	movs	r1, #1
 8007942:	2002      	movs	r0, #2
 8007944:	f7ff f98d 	bl	8006c62 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[1] = !schedule2RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 8007948:	4b6d      	ldr	r3, [pc, #436]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800794a:	785b      	ldrb	r3, [r3, #1]
 800794c:	2b00      	cmp	r3, #0
 800794e:	bf0c      	ite	eq
 8007950:	2301      	moveq	r3, #1
 8007952:	2300      	movne	r3, #0
 8007954:	b2db      	uxtb	r3, r3
 8007956:	461a      	mov	r2, r3
 8007958:	4b69      	ldr	r3, [pc, #420]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800795a:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 800795c:	88fb      	ldrh	r3, [r7, #6]
 800795e:	2b54      	cmp	r3, #84	; 0x54
 8007960:	d919      	bls.n	8007996 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
 8007962:	88fb      	ldrh	r3, [r7, #6]
 8007964:	2b69      	cmp	r3, #105	; 0x69
 8007966:	d816      	bhi.n	8007996 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule2RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 8007968:	4b65      	ldr	r3, [pc, #404]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800796a:	789b      	ldrb	r3, [r3, #2]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d004      	beq.n	800797a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xa2>
 8007970:	2100      	movs	r1, #0
 8007972:	2003      	movs	r0, #3
 8007974:	f7ff f975 	bl	8006c62 <changeTFTScheduleRelayLights>
 8007978:	e003      	b.n	8007982 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 800797a:	2101      	movs	r1, #1
 800797c:	2003      	movs	r0, #3
 800797e:	f7ff f970 	bl	8006c62 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[2] = !schedule2RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 8007982:	4b5f      	ldr	r3, [pc, #380]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007984:	789b      	ldrb	r3, [r3, #2]
 8007986:	2b00      	cmp	r3, #0
 8007988:	bf0c      	ite	eq
 800798a:	2301      	moveq	r3, #1
 800798c:	2300      	movne	r3, #0
 800798e:	b2db      	uxtb	r3, r3
 8007990:	461a      	mov	r2, r3
 8007992:	4b5b      	ldr	r3, [pc, #364]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007994:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8007996:	88fb      	ldrh	r3, [r7, #6]
 8007998:	2b74      	cmp	r3, #116	; 0x74
 800799a:	d919      	bls.n	80079d0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
 800799c:	88fb      	ldrh	r3, [r7, #6]
 800799e:	2b89      	cmp	r3, #137	; 0x89
 80079a0:	d816      	bhi.n	80079d0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule2RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 80079a2:	4b57      	ldr	r3, [pc, #348]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80079a4:	78db      	ldrb	r3, [r3, #3]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d004      	beq.n	80079b4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xdc>
 80079aa:	2100      	movs	r1, #0
 80079ac:	2004      	movs	r0, #4
 80079ae:	f7ff f958 	bl	8006c62 <changeTFTScheduleRelayLights>
 80079b2:	e003      	b.n	80079bc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 80079b4:	2101      	movs	r1, #1
 80079b6:	2004      	movs	r0, #4
 80079b8:	f7ff f953 	bl	8006c62 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[3] = !schedule2RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 80079bc:	4b50      	ldr	r3, [pc, #320]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80079be:	78db      	ldrb	r3, [r3, #3]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	bf0c      	ite	eq
 80079c4:	2301      	moveq	r3, #1
 80079c6:	2300      	movne	r3, #0
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	461a      	mov	r2, r3
 80079cc:	4b4c      	ldr	r3, [pc, #304]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80079ce:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 80079d0:	88fb      	ldrh	r3, [r7, #6]
 80079d2:	2b94      	cmp	r3, #148	; 0x94
 80079d4:	d919      	bls.n	8007a0a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
 80079d6:	88fb      	ldrh	r3, [r7, #6]
 80079d8:	2ba9      	cmp	r3, #169	; 0xa9
 80079da:	d816      	bhi.n	8007a0a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule2RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 80079dc:	4b48      	ldr	r3, [pc, #288]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80079de:	791b      	ldrb	r3, [r3, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d004      	beq.n	80079ee <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x116>
 80079e4:	2100      	movs	r1, #0
 80079e6:	2005      	movs	r0, #5
 80079e8:	f7ff f93b 	bl	8006c62 <changeTFTScheduleRelayLights>
 80079ec:	e003      	b.n	80079f6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 80079ee:	2101      	movs	r1, #1
 80079f0:	2005      	movs	r0, #5
 80079f2:	f7ff f936 	bl	8006c62 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[4] = !schedule2RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 80079f6:	4b42      	ldr	r3, [pc, #264]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80079f8:	791b      	ldrb	r3, [r3, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	bf0c      	ite	eq
 80079fe:	2301      	moveq	r3, #1
 8007a00:	2300      	movne	r3, #0
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	461a      	mov	r2, r3
 8007a06:	4b3e      	ldr	r3, [pc, #248]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007a08:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007a0a:	88fb      	ldrh	r3, [r7, #6]
 8007a0c:	2bb4      	cmp	r3, #180	; 0xb4
 8007a0e:	d919      	bls.n	8007a44 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
 8007a10:	88fb      	ldrh	r3, [r7, #6]
 8007a12:	2bc9      	cmp	r3, #201	; 0xc9
 8007a14:	d816      	bhi.n	8007a44 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule2RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 8007a16:	4b3a      	ldr	r3, [pc, #232]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007a18:	795b      	ldrb	r3, [r3, #5]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d004      	beq.n	8007a28 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x150>
 8007a1e:	2100      	movs	r1, #0
 8007a20:	2006      	movs	r0, #6
 8007a22:	f7ff f91e 	bl	8006c62 <changeTFTScheduleRelayLights>
 8007a26:	e003      	b.n	8007a30 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 8007a28:	2101      	movs	r1, #1
 8007a2a:	2006      	movs	r0, #6
 8007a2c:	f7ff f919 	bl	8006c62 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[5] = !schedule2RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 8007a30:	4b33      	ldr	r3, [pc, #204]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007a32:	795b      	ldrb	r3, [r3, #5]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	bf0c      	ite	eq
 8007a38:	2301      	moveq	r3, #1
 8007a3a:	2300      	movne	r3, #0
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	461a      	mov	r2, r3
 8007a40:	4b2f      	ldr	r3, [pc, #188]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007a42:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007a44:	88fb      	ldrh	r3, [r7, #6]
 8007a46:	2bd4      	cmp	r3, #212	; 0xd4
 8007a48:	d919      	bls.n	8007a7e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
 8007a4a:	88fb      	ldrh	r3, [r7, #6]
 8007a4c:	2be9      	cmp	r3, #233	; 0xe9
 8007a4e:	d816      	bhi.n	8007a7e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule2RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 8007a50:	4b2b      	ldr	r3, [pc, #172]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007a52:	799b      	ldrb	r3, [r3, #6]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d004      	beq.n	8007a62 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x18a>
 8007a58:	2100      	movs	r1, #0
 8007a5a:	2007      	movs	r0, #7
 8007a5c:	f7ff f901 	bl	8006c62 <changeTFTScheduleRelayLights>
 8007a60:	e003      	b.n	8007a6a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 8007a62:	2101      	movs	r1, #1
 8007a64:	2007      	movs	r0, #7
 8007a66:	f7ff f8fc 	bl	8006c62 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[6] = !schedule2RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 8007a6a:	4b25      	ldr	r3, [pc, #148]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007a6c:	799b      	ldrb	r3, [r3, #6]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	bf0c      	ite	eq
 8007a72:	2301      	moveq	r3, #1
 8007a74:	2300      	movne	r3, #0
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	461a      	mov	r2, r3
 8007a7a:	4b21      	ldr	r3, [pc, #132]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007a7c:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 8007a7e:	88fb      	ldrh	r3, [r7, #6]
 8007a80:	2bf4      	cmp	r3, #244	; 0xf4
 8007a82:	d91a      	bls.n	8007aba <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
 8007a84:	88fb      	ldrh	r3, [r7, #6]
 8007a86:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8007a8a:	d216      	bcs.n	8007aba <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule2RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 8007a8c:	4b1c      	ldr	r3, [pc, #112]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007a8e:	79db      	ldrb	r3, [r3, #7]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d004      	beq.n	8007a9e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1c6>
 8007a94:	2100      	movs	r1, #0
 8007a96:	2008      	movs	r0, #8
 8007a98:	f7ff f8e3 	bl	8006c62 <changeTFTScheduleRelayLights>
 8007a9c:	e003      	b.n	8007aa6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 8007a9e:	2101      	movs	r1, #1
 8007aa0:	2008      	movs	r0, #8
 8007aa2:	f7ff f8de 	bl	8006c62 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[7] = !schedule2RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 8007aa6:	4b16      	ldr	r3, [pc, #88]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007aa8:	79db      	ldrb	r3, [r3, #7]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	bf0c      	ite	eq
 8007aae:	2301      	moveq	r3, #1
 8007ab0:	2300      	movne	r3, #0
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	4b12      	ldr	r3, [pc, #72]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007ab8:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 8007aba:	88fb      	ldrh	r3, [r7, #6]
 8007abc:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8007ac0:	d91a      	bls.n	8007af8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
 8007ac2:	88fb      	ldrh	r3, [r7, #6]
 8007ac4:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8007ac8:	d216      	bcs.n	8007af8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule2RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 8007aca:	4b0d      	ldr	r3, [pc, #52]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007acc:	7a1b      	ldrb	r3, [r3, #8]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d004      	beq.n	8007adc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x204>
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	2009      	movs	r0, #9
 8007ad6:	f7ff f8c4 	bl	8006c62 <changeTFTScheduleRelayLights>
 8007ada:	e003      	b.n	8007ae4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 8007adc:	2101      	movs	r1, #1
 8007ade:	2009      	movs	r0, #9
 8007ae0:	f7ff f8bf 	bl	8006c62 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[8] = !schedule2RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 8007ae4:	4b06      	ldr	r3, [pc, #24]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007ae6:	7a1b      	ldrb	r3, [r3, #8]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	bf0c      	ite	eq
 8007aec:	2301      	moveq	r3, #1
 8007aee:	2300      	movne	r3, #0
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	461a      	mov	r2, r3
 8007af4:	4b02      	ldr	r3, [pc, #8]	; (8007b00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007af6:	721a      	strb	r2, [r3, #8]
	}
}
 8007af8:	bf00      	nop
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	20000278 	.word	0x20000278

08007b04 <updateAllSchedulesInfo>:

//
//Read All info about schedules
void updateAllSchedulesInfo(uint8_t NrOfSchedule)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	71fb      	strb	r3, [r7, #7]
	if( 1 == NrOfSchedule)
 8007b0e:	79fb      	ldrb	r3, [r7, #7]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d118      	bne.n	8007b46 <updateAllSchedulesInfo+0x42>
	{
	  EEPROM_ScheduleHourOnRead(1, &hourOnSchedule1);
 8007b14:	491b      	ldr	r1, [pc, #108]	; (8007b84 <updateAllSchedulesInfo+0x80>)
 8007b16:	2001      	movs	r0, #1
 8007b18:	f7fb fb2d 	bl	8003176 <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(1, &minuteOnSchedule1);
 8007b1c:	491a      	ldr	r1, [pc, #104]	; (8007b88 <updateAllSchedulesInfo+0x84>)
 8007b1e:	2001      	movs	r0, #1
 8007b20:	f7fb fb4d 	bl	80031be <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(1, &hourOffSchedule1);
 8007b24:	4919      	ldr	r1, [pc, #100]	; (8007b8c <updateAllSchedulesInfo+0x88>)
 8007b26:	2001      	movs	r0, #1
 8007b28:	f7fb fb6d 	bl	8003206 <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(1, &minuteOffSchedule1);
 8007b2c:	4918      	ldr	r1, [pc, #96]	; (8007b90 <updateAllSchedulesInfo+0x8c>)
 8007b2e:	2001      	movs	r0, #1
 8007b30:	f7fb fb8d 	bl	800324e <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 8007b34:	4917      	ldr	r1, [pc, #92]	; (8007b94 <updateAllSchedulesInfo+0x90>)
 8007b36:	2001      	movs	r0, #1
 8007b38:	f7fb f9cc 	bl	8002ed4 <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 8007b3c:	4916      	ldr	r1, [pc, #88]	; (8007b98 <updateAllSchedulesInfo+0x94>)
 8007b3e:	2001      	movs	r0, #1
 8007b40:	f7fb fa44 	bl	8002fcc <EEPROM_ScheduleRelayAndSwitchTabRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
	}

}
 8007b44:	e01a      	b.n	8007b7c <updateAllSchedulesInfo+0x78>
	else if ( 2 == NrOfSchedule)
 8007b46:	79fb      	ldrb	r3, [r7, #7]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d117      	bne.n	8007b7c <updateAllSchedulesInfo+0x78>
	  EEPROM_ScheduleHourOnRead(2, &hourOnSchedule2);
 8007b4c:	4913      	ldr	r1, [pc, #76]	; (8007b9c <updateAllSchedulesInfo+0x98>)
 8007b4e:	2002      	movs	r0, #2
 8007b50:	f7fb fb11 	bl	8003176 <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(2, &minuteOnSchedule2);
 8007b54:	4912      	ldr	r1, [pc, #72]	; (8007ba0 <updateAllSchedulesInfo+0x9c>)
 8007b56:	2002      	movs	r0, #2
 8007b58:	f7fb fb31 	bl	80031be <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(2, &hourOffSchedule2);
 8007b5c:	4911      	ldr	r1, [pc, #68]	; (8007ba4 <updateAllSchedulesInfo+0xa0>)
 8007b5e:	2002      	movs	r0, #2
 8007b60:	f7fb fb51 	bl	8003206 <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
 8007b64:	4910      	ldr	r1, [pc, #64]	; (8007ba8 <updateAllSchedulesInfo+0xa4>)
 8007b66:	2002      	movs	r0, #2
 8007b68:	f7fb fb71 	bl	800324e <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
 8007b6c:	4909      	ldr	r1, [pc, #36]	; (8007b94 <updateAllSchedulesInfo+0x90>)
 8007b6e:	2002      	movs	r0, #2
 8007b70:	f7fb f9b0 	bl	8002ed4 <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
 8007b74:	4908      	ldr	r1, [pc, #32]	; (8007b98 <updateAllSchedulesInfo+0x94>)
 8007b76:	2002      	movs	r0, #2
 8007b78:	f7fb fa28 	bl	8002fcc <EEPROM_ScheduleRelayAndSwitchTabRead>
}
 8007b7c:	bf00      	nop
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	20000281 	.word	0x20000281
 8007b88:	20000283 	.word	0x20000283
 8007b8c:	20000282 	.word	0x20000282
 8007b90:	20000284 	.word	0x20000284
 8007b94:	2000025c 	.word	0x2000025c
 8007b98:	20000264 	.word	0x20000264
 8007b9c:	20000285 	.word	0x20000285
 8007ba0:	20000287 	.word	0x20000287
 8007ba4:	20000286 	.word	0x20000286
 8007ba8:	20000288 	.word	0x20000288

08007bac <clockIncreaseOneHourAndMinute>:

//
// Functions to update Hour and Minute after touch
//
void clockIncreaseOneHourAndMinute(uint16_t x, uint16_t y)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af02      	add	r7, sp, #8
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	460a      	mov	r2, r1
 8007bb6:	80fb      	strh	r3, [r7, #6]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8007bbc:	88bb      	ldrh	r3, [r7, #4]
 8007bbe:	2b4a      	cmp	r3, #74	; 0x4a
 8007bc0:	d923      	bls.n	8007c0a <clockIncreaseOneHourAndMinute+0x5e>
 8007bc2:	88bb      	ldrh	r3, [r7, #4]
 8007bc4:	2b60      	cmp	r3, #96	; 0x60
 8007bc6:	d820      	bhi.n	8007c0a <clockIncreaseOneHourAndMinute+0x5e>
	{
		if(Hours < 24)
 8007bc8:	4b39      	ldr	r3, [pc, #228]	; (8007cb0 <clockIncreaseOneHourAndMinute+0x104>)
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	2b17      	cmp	r3, #23
 8007bce:	d806      	bhi.n	8007bde <clockIncreaseOneHourAndMinute+0x32>
		{
			Hours++;
 8007bd0:	4b37      	ldr	r3, [pc, #220]	; (8007cb0 <clockIncreaseOneHourAndMinute+0x104>)
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	b2da      	uxtb	r2, r3
 8007bd8:	4b35      	ldr	r3, [pc, #212]	; (8007cb0 <clockIncreaseOneHourAndMinute+0x104>)
 8007bda:	701a      	strb	r2, [r3, #0]
 8007bdc:	e002      	b.n	8007be4 <clockIncreaseOneHourAndMinute+0x38>
		}
		else
		{
			Hours = 1;
 8007bde:	4b34      	ldr	r3, [pc, #208]	; (8007cb0 <clockIncreaseOneHourAndMinute+0x104>)
 8007be0:	2201      	movs	r2, #1
 8007be2:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Hours);
 8007be4:	4b32      	ldr	r3, [pc, #200]	; (8007cb0 <clockIncreaseOneHourAndMinute+0x104>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	461a      	mov	r2, r3
 8007bea:	4932      	ldr	r1, [pc, #200]	; (8007cb4 <clockIncreaseOneHourAndMinute+0x108>)
 8007bec:	4832      	ldr	r0, [pc, #200]	; (8007cb8 <clockIncreaseOneHourAndMinute+0x10c>)
 8007bee:	f00a f9ab 	bl	8011f48 <siprintf>
		EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007bf2:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007bf6:	9301      	str	r3, [sp, #4]
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	2246      	movs	r2, #70	; 0x46
 8007c00:	21a0      	movs	r1, #160	; 0xa0
 8007c02:	482d      	ldr	r0, [pc, #180]	; (8007cb8 <clockIncreaseOneHourAndMinute+0x10c>)
 8007c04:	f7fa f8cc 	bl	8001da0 <EF_PutString>
 8007c08:	e04d      	b.n	8007ca6 <clockIncreaseOneHourAndMinute+0xfa>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 8007c0a:	88bb      	ldrh	r3, [r7, #4]
 8007c0c:	2b72      	cmp	r3, #114	; 0x72
 8007c0e:	d923      	bls.n	8007c58 <clockIncreaseOneHourAndMinute+0xac>
 8007c10:	88bb      	ldrh	r3, [r7, #4]
 8007c12:	2b88      	cmp	r3, #136	; 0x88
 8007c14:	d820      	bhi.n	8007c58 <clockIncreaseOneHourAndMinute+0xac>
	{
		if(Minutes < 59)
 8007c16:	4b29      	ldr	r3, [pc, #164]	; (8007cbc <clockIncreaseOneHourAndMinute+0x110>)
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	2b3a      	cmp	r3, #58	; 0x3a
 8007c1c:	d806      	bhi.n	8007c2c <clockIncreaseOneHourAndMinute+0x80>
		{
			Minutes++;
 8007c1e:	4b27      	ldr	r3, [pc, #156]	; (8007cbc <clockIncreaseOneHourAndMinute+0x110>)
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	3301      	adds	r3, #1
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	4b25      	ldr	r3, [pc, #148]	; (8007cbc <clockIncreaseOneHourAndMinute+0x110>)
 8007c28:	701a      	strb	r2, [r3, #0]
 8007c2a:	e002      	b.n	8007c32 <clockIncreaseOneHourAndMinute+0x86>
		}
		else
		{
			Minutes = 0;
 8007c2c:	4b23      	ldr	r3, [pc, #140]	; (8007cbc <clockIncreaseOneHourAndMinute+0x110>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Minutes);
 8007c32:	4b22      	ldr	r3, [pc, #136]	; (8007cbc <clockIncreaseOneHourAndMinute+0x110>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	461a      	mov	r2, r3
 8007c38:	491e      	ldr	r1, [pc, #120]	; (8007cb4 <clockIncreaseOneHourAndMinute+0x108>)
 8007c3a:	481f      	ldr	r0, [pc, #124]	; (8007cb8 <clockIncreaseOneHourAndMinute+0x10c>)
 8007c3c:	f00a f984 	bl	8011f48 <siprintf>
		EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007c40:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007c44:	9301      	str	r3, [sp, #4]
 8007c46:	2301      	movs	r3, #1
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	226e      	movs	r2, #110	; 0x6e
 8007c4e:	21a0      	movs	r1, #160	; 0xa0
 8007c50:	4819      	ldr	r0, [pc, #100]	; (8007cb8 <clockIncreaseOneHourAndMinute+0x10c>)
 8007c52:	f7fa f8a5 	bl	8001da0 <EF_PutString>
 8007c56:	e026      	b.n	8007ca6 <clockIncreaseOneHourAndMinute+0xfa>
	}
	else if((y >= CLOCK_B_3_POZ_Y)&&(y <= (CLOCK_B_3_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Day
 8007c58:	88bb      	ldrh	r3, [r7, #4]
 8007c5a:	2b9a      	cmp	r3, #154	; 0x9a
 8007c5c:	d923      	bls.n	8007ca6 <clockIncreaseOneHourAndMinute+0xfa>
 8007c5e:	88bb      	ldrh	r3, [r7, #4]
 8007c60:	2bb0      	cmp	r3, #176	; 0xb0
 8007c62:	d820      	bhi.n	8007ca6 <clockIncreaseOneHourAndMinute+0xfa>
	{
		if(DayOfWeek < 7)
 8007c64:	4b16      	ldr	r3, [pc, #88]	; (8007cc0 <clockIncreaseOneHourAndMinute+0x114>)
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	2b06      	cmp	r3, #6
 8007c6a:	d806      	bhi.n	8007c7a <clockIncreaseOneHourAndMinute+0xce>
		{
			DayOfWeek++;
 8007c6c:	4b14      	ldr	r3, [pc, #80]	; (8007cc0 <clockIncreaseOneHourAndMinute+0x114>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	3301      	adds	r3, #1
 8007c72:	b2da      	uxtb	r2, r3
 8007c74:	4b12      	ldr	r3, [pc, #72]	; (8007cc0 <clockIncreaseOneHourAndMinute+0x114>)
 8007c76:	701a      	strb	r2, [r3, #0]
 8007c78:	e002      	b.n	8007c80 <clockIncreaseOneHourAndMinute+0xd4>
		}
		else
		{
			DayOfWeek = 1;
 8007c7a:	4b11      	ldr	r3, [pc, #68]	; (8007cc0 <clockIncreaseOneHourAndMinute+0x114>)
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, "DZIEŃ TYG:  %d ", DayOfWeek);
 8007c80:	4b0f      	ldr	r3, [pc, #60]	; (8007cc0 <clockIncreaseOneHourAndMinute+0x114>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	461a      	mov	r2, r3
 8007c86:	490f      	ldr	r1, [pc, #60]	; (8007cc4 <clockIncreaseOneHourAndMinute+0x118>)
 8007c88:	480b      	ldr	r0, [pc, #44]	; (8007cb8 <clockIncreaseOneHourAndMinute+0x10c>)
 8007c8a:	f00a f95d 	bl	8011f48 <siprintf>
		EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007c8e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007c92:	9301      	str	r3, [sp, #4]
 8007c94:	2301      	movs	r3, #1
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	2300      	movs	r3, #0
 8007c9a:	2296      	movs	r2, #150	; 0x96
 8007c9c:	2114      	movs	r1, #20
 8007c9e:	4806      	ldr	r0, [pc, #24]	; (8007cb8 <clockIncreaseOneHourAndMinute+0x10c>)
 8007ca0:	f7fa f87e 	bl	8001da0 <EF_PutString>
	}
}
 8007ca4:	e7ff      	b.n	8007ca6 <clockIncreaseOneHourAndMinute+0xfa>
 8007ca6:	bf00      	nop
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	20000031 	.word	0x20000031
 8007cb4:	08016130 	.word	0x08016130
 8007cb8:	200002c0 	.word	0x200002c0
 8007cbc:	20000032 	.word	0x20000032
 8007cc0:	20000030 	.word	0x20000030
 8007cc4:	08016138 	.word	0x08016138

08007cc8 <clockIncreaseSixHoursTenMinutes>:

void clockIncreaseSixHoursTenMinutes(uint16_t x, uint16_t y)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af02      	add	r7, sp, #8
 8007cce:	4603      	mov	r3, r0
 8007cd0:	460a      	mov	r2, r1
 8007cd2:	80fb      	strh	r3, [r7, #6]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 8007cd8:	88bb      	ldrh	r3, [r7, #4]
 8007cda:	2b4a      	cmp	r3, #74	; 0x4a
 8007cdc:	d923      	bls.n	8007d26 <clockIncreaseSixHoursTenMinutes+0x5e>
 8007cde:	88bb      	ldrh	r3, [r7, #4]
 8007ce0:	2b60      	cmp	r3, #96	; 0x60
 8007ce2:	d820      	bhi.n	8007d26 <clockIncreaseSixHoursTenMinutes+0x5e>
	{

		if(Hours < 19)
 8007ce4:	4b2e      	ldr	r3, [pc, #184]	; (8007da0 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	2b12      	cmp	r3, #18
 8007cea:	d806      	bhi.n	8007cfa <clockIncreaseSixHoursTenMinutes+0x32>
		{
			Hours = Hours + 6;
 8007cec:	4b2c      	ldr	r3, [pc, #176]	; (8007da0 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	3306      	adds	r3, #6
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	4b2a      	ldr	r3, [pc, #168]	; (8007da0 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007cf6:	701a      	strb	r2, [r3, #0]
 8007cf8:	e002      	b.n	8007d00 <clockIncreaseSixHoursTenMinutes+0x38>
		}
		else
		{
			Hours = 1;
 8007cfa:	4b29      	ldr	r3, [pc, #164]	; (8007da0 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Hours);
 8007d00:	4b27      	ldr	r3, [pc, #156]	; (8007da0 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	461a      	mov	r2, r3
 8007d06:	4927      	ldr	r1, [pc, #156]	; (8007da4 <clockIncreaseSixHoursTenMinutes+0xdc>)
 8007d08:	4827      	ldr	r0, [pc, #156]	; (8007da8 <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007d0a:	f00a f91d 	bl	8011f48 <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007d0e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007d12:	9301      	str	r3, [sp, #4]
 8007d14:	2301      	movs	r3, #1
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	2246      	movs	r2, #70	; 0x46
 8007d1c:	219d      	movs	r1, #157	; 0x9d
 8007d1e:	4822      	ldr	r0, [pc, #136]	; (8007da8 <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007d20:	f7fa f83e 	bl	8001da0 <EF_PutString>
 8007d24:	e035      	b.n	8007d92 <clockIncreaseSixHoursTenMinutes+0xca>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 8007d26:	88bb      	ldrh	r3, [r7, #4]
 8007d28:	2b72      	cmp	r3, #114	; 0x72
 8007d2a:	d932      	bls.n	8007d92 <clockIncreaseSixHoursTenMinutes+0xca>
 8007d2c:	88bb      	ldrh	r3, [r7, #4]
 8007d2e:	2b88      	cmp	r3, #136	; 0x88
 8007d30:	d82f      	bhi.n	8007d92 <clockIncreaseSixHoursTenMinutes+0xca>
	{
		if(Minutes < 49)
 8007d32:	4b1e      	ldr	r3, [pc, #120]	; (8007dac <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	2b30      	cmp	r3, #48	; 0x30
 8007d38:	d806      	bhi.n	8007d48 <clockIncreaseSixHoursTenMinutes+0x80>
		{
			Minutes = Minutes +10;
 8007d3a:	4b1c      	ldr	r3, [pc, #112]	; (8007dac <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	330a      	adds	r3, #10
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	4b1a      	ldr	r3, [pc, #104]	; (8007dac <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007d44:	701a      	strb	r2, [r3, #0]
 8007d46:	e012      	b.n	8007d6e <clockIncreaseSixHoursTenMinutes+0xa6>
		}
		else
		{
			Minutes = (Minutes + 10) % 60;
 8007d48:	4b18      	ldr	r3, [pc, #96]	; (8007dac <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	f103 020a 	add.w	r2, r3, #10
 8007d50:	4b17      	ldr	r3, [pc, #92]	; (8007db0 <clockIncreaseSixHoursTenMinutes+0xe8>)
 8007d52:	fb83 1302 	smull	r1, r3, r3, r2
 8007d56:	4413      	add	r3, r2
 8007d58:	1159      	asrs	r1, r3, #5
 8007d5a:	17d3      	asrs	r3, r2, #31
 8007d5c:	1ac9      	subs	r1, r1, r3
 8007d5e:	460b      	mov	r3, r1
 8007d60:	011b      	lsls	r3, r3, #4
 8007d62:	1a5b      	subs	r3, r3, r1
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	1ad1      	subs	r1, r2, r3
 8007d68:	b2ca      	uxtb	r2, r1
 8007d6a:	4b10      	ldr	r3, [pc, #64]	; (8007dac <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007d6c:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Minutes);
 8007d6e:	4b0f      	ldr	r3, [pc, #60]	; (8007dac <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	461a      	mov	r2, r3
 8007d74:	490b      	ldr	r1, [pc, #44]	; (8007da4 <clockIncreaseSixHoursTenMinutes+0xdc>)
 8007d76:	480c      	ldr	r0, [pc, #48]	; (8007da8 <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007d78:	f00a f8e6 	bl	8011f48 <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007d7c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007d80:	9301      	str	r3, [sp, #4]
 8007d82:	2301      	movs	r3, #1
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	2300      	movs	r3, #0
 8007d88:	226e      	movs	r2, #110	; 0x6e
 8007d8a:	219c      	movs	r1, #156	; 0x9c
 8007d8c:	4806      	ldr	r0, [pc, #24]	; (8007da8 <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007d8e:	f7fa f807 	bl	8001da0 <EF_PutString>

	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007d92:	4808      	ldr	r0, [pc, #32]	; (8007db4 <clockIncreaseSixHoursTenMinutes+0xec>)
 8007d94:	f7f9 fdea 	bl	800196c <EF_SetFont>
}
 8007d98:	bf00      	nop
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	20000031 	.word	0x20000031
 8007da4:	08016130 	.word	0x08016130
 8007da8:	200002c0 	.word	0x200002c0
 8007dac:	20000032 	.word	0x20000032
 8007db0:	88888889 	.word	0x88888889
 8007db4:	080296c4 	.word	0x080296c4

08007db8 <changeSwitchStatusTouch>:

//
// Change status of Switch after touch them
//
void changeSwitchStatusTouch(uint8_t y)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST SWITCH
	if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 8007dc2:	79fb      	ldrb	r3, [r7, #7]
 8007dc4:	2b40      	cmp	r3, #64	; 0x40
 8007dc6:	d90e      	bls.n	8007de6 <changeSwitchStatusTouch+0x2e>
 8007dc8:	79fb      	ldrb	r3, [r7, #7]
 8007dca:	2b56      	cmp	r3, #86	; 0x56
 8007dcc:	d80b      	bhi.n	8007de6 <changeSwitchStatusTouch+0x2e>
	{
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007dce:	4b24      	ldr	r3, [pc, #144]	; (8007e60 <changeSwitchStatusTouch+0xa8>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d003      	beq.n	8007dde <changeSwitchStatusTouch+0x26>
		{
			firstSwitchTurn(0);
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	f000 faa4 	bl	8008324 <firstSwitchTurn>
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007ddc:	e038      	b.n	8007e50 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			firstSwitchTurn(1);
 8007dde:	2001      	movs	r0, #1
 8007de0:	f000 faa0 	bl	8008324 <firstSwitchTurn>
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007de4:	e034      	b.n	8007e50 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// SECOND SWITCH
	else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 8007de6:	79fb      	ldrb	r3, [r7, #7]
 8007de8:	2b5e      	cmp	r3, #94	; 0x5e
 8007dea:	d90e      	bls.n	8007e0a <changeSwitchStatusTouch+0x52>
 8007dec:	79fb      	ldrb	r3, [r7, #7]
 8007dee:	2b74      	cmp	r3, #116	; 0x74
 8007df0:	d80b      	bhi.n	8007e0a <changeSwitchStatusTouch+0x52>
	{
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007df2:	4b1b      	ldr	r3, [pc, #108]	; (8007e60 <changeSwitchStatusTouch+0xa8>)
 8007df4:	785b      	ldrb	r3, [r3, #1]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d003      	beq.n	8007e02 <changeSwitchStatusTouch+0x4a>
		{
			secondSwitchTurn(0);
 8007dfa:	2000      	movs	r0, #0
 8007dfc:	f000 fb14 	bl	8008428 <secondSwitchTurn>
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007e00:	e026      	b.n	8007e50 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			secondSwitchTurn(1);
 8007e02:	2001      	movs	r0, #1
 8007e04:	f000 fb10 	bl	8008428 <secondSwitchTurn>
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007e08:	e022      	b.n	8007e50 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// THIRD SWITCH
	else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 8007e0a:	79fb      	ldrb	r3, [r7, #7]
 8007e0c:	2b7c      	cmp	r3, #124	; 0x7c
 8007e0e:	d90e      	bls.n	8007e2e <changeSwitchStatusTouch+0x76>
 8007e10:	79fb      	ldrb	r3, [r7, #7]
 8007e12:	2b92      	cmp	r3, #146	; 0x92
 8007e14:	d80b      	bhi.n	8007e2e <changeSwitchStatusTouch+0x76>
	{
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007e16:	4b12      	ldr	r3, [pc, #72]	; (8007e60 <changeSwitchStatusTouch+0xa8>)
 8007e18:	789b      	ldrb	r3, [r3, #2]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <changeSwitchStatusTouch+0x6e>
		{
			thirdSwitchTurn(0);
 8007e1e:	2000      	movs	r0, #0
 8007e20:	f000 fb84 	bl	800852c <thirdSwitchTurn>
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007e24:	e014      	b.n	8007e50 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			thirdSwitchTurn(1);
 8007e26:	2001      	movs	r0, #1
 8007e28:	f000 fb80 	bl	800852c <thirdSwitchTurn>
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007e2c:	e010      	b.n	8007e50 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// FOURTH SWITCH
	else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	2b9a      	cmp	r3, #154	; 0x9a
 8007e32:	d90d      	bls.n	8007e50 <changeSwitchStatusTouch+0x98>
 8007e34:	79fb      	ldrb	r3, [r7, #7]
 8007e36:	2bb0      	cmp	r3, #176	; 0xb0
 8007e38:	d80a      	bhi.n	8007e50 <changeSwitchStatusTouch+0x98>
	{
		if(SwitchesButtonState[3] >= 1) // if is ON
 8007e3a:	4b09      	ldr	r3, [pc, #36]	; (8007e60 <changeSwitchStatusTouch+0xa8>)
 8007e3c:	78db      	ldrb	r3, [r3, #3]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d003      	beq.n	8007e4a <changeSwitchStatusTouch+0x92>
		{
			fourthSwitchTurn(0);
 8007e42:	2000      	movs	r0, #0
 8007e44:	f000 fbf4 	bl	8008630 <fourthSwitchTurn>
 8007e48:	e002      	b.n	8007e50 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			fourthSwitchTurn(1);
 8007e4a:	2001      	movs	r0, #1
 8007e4c:	f000 fbf0 	bl	8008630 <fourthSwitchTurn>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007e50:	4804      	ldr	r0, [pc, #16]	; (8007e64 <changeSwitchStatusTouch+0xac>)
 8007e52:	f7f9 fd8b 	bl	800196c <EF_SetFont>
}
 8007e56:	bf00      	nop
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	200002a8 	.word	0x200002a8
 8007e64:	080296c4 	.word	0x080296c4

08007e68 <changeLightsStatusTouch>:

//
// Change status of Lights after touch them
//
void changeLightsStatusTouch(uint8_t y)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST LIGHT
	if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 8007e72:	79fb      	ldrb	r3, [r7, #7]
 8007e74:	2b40      	cmp	r3, #64	; 0x40
 8007e76:	d90e      	bls.n	8007e96 <changeLightsStatusTouch+0x2e>
 8007e78:	79fb      	ldrb	r3, [r7, #7]
 8007e7a:	2b56      	cmp	r3, #86	; 0x56
 8007e7c:	d80b      	bhi.n	8007e96 <changeLightsStatusTouch+0x2e>
	{
		if(LightsButtonState[0] >= 1) // if is ON
 8007e7e:	4b24      	ldr	r3, [pc, #144]	; (8007f10 <changeLightsStatusTouch+0xa8>)
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <changeLightsStatusTouch+0x26>
		{
			firstLightTurn(0);
 8007e86:	2000      	movs	r0, #0
 8007e88:	f000 fc54 	bl	8008734 <firstLightTurn>
		if(LightsButtonState[0] >= 1) // if is ON
 8007e8c:	e038      	b.n	8007f00 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			firstLightTurn(1);
 8007e8e:	2001      	movs	r0, #1
 8007e90:	f000 fc50 	bl	8008734 <firstLightTurn>
		if(LightsButtonState[0] >= 1) // if is ON
 8007e94:	e034      	b.n	8007f00 <changeLightsStatusTouch+0x98>
		}
	}
	//
	// SECOND LIGHT
	else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 8007e96:	79fb      	ldrb	r3, [r7, #7]
 8007e98:	2b5e      	cmp	r3, #94	; 0x5e
 8007e9a:	d90e      	bls.n	8007eba <changeLightsStatusTouch+0x52>
 8007e9c:	79fb      	ldrb	r3, [r7, #7]
 8007e9e:	2b74      	cmp	r3, #116	; 0x74
 8007ea0:	d80b      	bhi.n	8007eba <changeLightsStatusTouch+0x52>
	{
		if(LightsButtonState[1] >= 1) // if is ON
 8007ea2:	4b1b      	ldr	r3, [pc, #108]	; (8007f10 <changeLightsStatusTouch+0xa8>)
 8007ea4:	785b      	ldrb	r3, [r3, #1]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <changeLightsStatusTouch+0x4a>
		{
			secondLightTurn(0);
 8007eaa:	2000      	movs	r0, #0
 8007eac:	f000 fcc0 	bl	8008830 <secondLightTurn>
		if(LightsButtonState[1] >= 1) // if is ON
 8007eb0:	e026      	b.n	8007f00 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			secondLightTurn(1);
 8007eb2:	2001      	movs	r0, #1
 8007eb4:	f000 fcbc 	bl	8008830 <secondLightTurn>
		if(LightsButtonState[1] >= 1) // if is ON
 8007eb8:	e022      	b.n	8007f00 <changeLightsStatusTouch+0x98>
		}
	}

	//
	// THIRD LIGHT
	else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 8007eba:	79fb      	ldrb	r3, [r7, #7]
 8007ebc:	2b7c      	cmp	r3, #124	; 0x7c
 8007ebe:	d90e      	bls.n	8007ede <changeLightsStatusTouch+0x76>
 8007ec0:	79fb      	ldrb	r3, [r7, #7]
 8007ec2:	2b92      	cmp	r3, #146	; 0x92
 8007ec4:	d80b      	bhi.n	8007ede <changeLightsStatusTouch+0x76>
	{
		if(LightsButtonState[2] >= 1) // if is ON
 8007ec6:	4b12      	ldr	r3, [pc, #72]	; (8007f10 <changeLightsStatusTouch+0xa8>)
 8007ec8:	789b      	ldrb	r3, [r3, #2]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d003      	beq.n	8007ed6 <changeLightsStatusTouch+0x6e>
		{
			thirdLightTurn(0);
 8007ece:	2000      	movs	r0, #0
 8007ed0:	f000 fd2c 	bl	800892c <thirdLightTurn>
		if(LightsButtonState[2] >= 1) // if is ON
 8007ed4:	e014      	b.n	8007f00 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			thirdLightTurn(1);
 8007ed6:	2001      	movs	r0, #1
 8007ed8:	f000 fd28 	bl	800892c <thirdLightTurn>
		if(LightsButtonState[2] >= 1) // if is ON
 8007edc:	e010      	b.n	8007f00 <changeLightsStatusTouch+0x98>
		}
	}

	//
	// FOURTH LIGHT
	else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 8007ede:	79fb      	ldrb	r3, [r7, #7]
 8007ee0:	2b9a      	cmp	r3, #154	; 0x9a
 8007ee2:	d90d      	bls.n	8007f00 <changeLightsStatusTouch+0x98>
 8007ee4:	79fb      	ldrb	r3, [r7, #7]
 8007ee6:	2bb0      	cmp	r3, #176	; 0xb0
 8007ee8:	d80a      	bhi.n	8007f00 <changeLightsStatusTouch+0x98>
	{
		if(LightsButtonState[3] >= 1) // if is ON
 8007eea:	4b09      	ldr	r3, [pc, #36]	; (8007f10 <changeLightsStatusTouch+0xa8>)
 8007eec:	78db      	ldrb	r3, [r3, #3]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d003      	beq.n	8007efa <changeLightsStatusTouch+0x92>
		{
			fourthLightTurn(0);
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	f000 fd98 	bl	8008a28 <fourthLightTurn>
 8007ef8:	e002      	b.n	8007f00 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			fourthLightTurn(1);
 8007efa:	2001      	movs	r0, #1
 8007efc:	f000 fd94 	bl	8008a28 <fourthLightTurn>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007f00:	4804      	ldr	r0, [pc, #16]	; (8007f14 <changeLightsStatusTouch+0xac>)
 8007f02:	f7f9 fd33 	bl	800196c <EF_SetFont>
}
 8007f06:	bf00      	nop
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	200002ac 	.word	0x200002ac
 8007f14:	080296c4 	.word	0x080296c4

08007f18 <predefinedActivityTouchAction>:

//
// Handling touch button to ON/OFF predefined activity
//
void predefinedActivityTouchAction(uint8_t y)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af02      	add	r7, sp, #8
 8007f1e:	4603      	mov	r3, r0
 8007f20:	71fb      	strb	r3, [r7, #7]
	if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 8007f22:	79fb      	ldrb	r3, [r7, #7]
 8007f24:	2b3b      	cmp	r3, #59	; 0x3b
 8007f26:	d966      	bls.n	8007ff6 <predefinedActivityTouchAction+0xde>
 8007f28:	79fb      	ldrb	r3, [r7, #7]
 8007f2a:	2b64      	cmp	r3, #100	; 0x64
 8007f2c:	d863      	bhi.n	8007ff6 <predefinedActivityTouchAction+0xde>
	{
		if(ActivityButtonState[0] >= 1) // if is ON
 8007f2e:	4b69      	ldr	r3, [pc, #420]	; (80080d4 <predefinedActivityTouchAction+0x1bc>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d02f      	beq.n	8007f96 <predefinedActivityTouchAction+0x7e>
		{
			ActivityButtonState[0] = 0;
 8007f36:	4b67      	ldr	r3, [pc, #412]	; (80080d4 <predefinedActivityTouchAction+0x1bc>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007f3c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f40:	9301      	str	r3, [sp, #4]
 8007f42:	230a      	movs	r3, #10
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	2328      	movs	r3, #40	; 0x28
 8007f48:	2278      	movs	r2, #120	; 0x78
 8007f4a:	213c      	movs	r1, #60	; 0x3c
 8007f4c:	2064      	movs	r0, #100	; 0x64
 8007f4e:	f7f9 fcbc 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 8007f52:	4961      	ldr	r1, [pc, #388]	; (80080d8 <predefinedActivityTouchAction+0x1c0>)
 8007f54:	4861      	ldr	r0, [pc, #388]	; (80080dc <predefinedActivityTouchAction+0x1c4>)
 8007f56:	f009 fff7 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007f5a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	2300      	movs	r3, #0
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	2300      	movs	r3, #0
 8007f66:	223e      	movs	r2, #62	; 0x3e
 8007f68:	2177      	movs	r1, #119	; 0x77
 8007f6a:	485c      	ldr	r0, [pc, #368]	; (80080dc <predefinedActivityTouchAction+0x1c4>)
 8007f6c:	f7f9 ff18 	bl	8001da0 <EF_PutString>
			sprintf((char*)Msg, "OFF");
 8007f70:	495b      	ldr	r1, [pc, #364]	; (80080e0 <predefinedActivityTouchAction+0x1c8>)
 8007f72:	485a      	ldr	r0, [pc, #360]	; (80080dc <predefinedActivityTouchAction+0x1c4>)
 8007f74:	f009 ffe8 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007f78:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f7c:	9301      	str	r3, [sp, #4]
 8007f7e:	2300      	movs	r3, #0
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	2300      	movs	r3, #0
 8007f84:	2250      	movs	r2, #80	; 0x50
 8007f86:	2193      	movs	r1, #147	; 0x93
 8007f88:	4854      	ldr	r0, [pc, #336]	; (80080dc <predefinedActivityTouchAction+0x1c4>)
 8007f8a:	f7f9 ff09 	bl	8001da0 <EF_PutString>
			predefinedActivityKarmienie(0); // Turn Activity OFF
 8007f8e:	2000      	movs	r0, #0
 8007f90:	f7fd f838 	bl	8005004 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 8007f94:	e099      	b.n	80080ca <predefinedActivityTouchAction+0x1b2>
		}
		else // if is OFF
		{
			ActivityButtonState[0] = 1;
 8007f96:	4b4f      	ldr	r3, [pc, #316]	; (80080d4 <predefinedActivityTouchAction+0x1bc>)
 8007f98:	2201      	movs	r2, #1
 8007f9a:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8007f9c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007fa0:	9301      	str	r3, [sp, #4]
 8007fa2:	230a      	movs	r3, #10
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	2328      	movs	r3, #40	; 0x28
 8007fa8:	2278      	movs	r2, #120	; 0x78
 8007faa:	213c      	movs	r1, #60	; 0x3c
 8007fac:	2064      	movs	r0, #100	; 0x64
 8007fae:	f7f9 fc8c 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 8007fb2:	4949      	ldr	r1, [pc, #292]	; (80080d8 <predefinedActivityTouchAction+0x1c0>)
 8007fb4:	4849      	ldr	r0, [pc, #292]	; (80080dc <predefinedActivityTouchAction+0x1c4>)
 8007fb6:	f009 ffc7 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8007fba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007fbe:	9301      	str	r3, [sp, #4]
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	223e      	movs	r2, #62	; 0x3e
 8007fc8:	2177      	movs	r1, #119	; 0x77
 8007fca:	4844      	ldr	r0, [pc, #272]	; (80080dc <predefinedActivityTouchAction+0x1c4>)
 8007fcc:	f7f9 fee8 	bl	8001da0 <EF_PutString>
			sprintf((char*)Msg, "ON");
 8007fd0:	4944      	ldr	r1, [pc, #272]	; (80080e4 <predefinedActivityTouchAction+0x1cc>)
 8007fd2:	4842      	ldr	r0, [pc, #264]	; (80080dc <predefinedActivityTouchAction+0x1c4>)
 8007fd4:	f009 ffb8 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8007fd8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007fdc:	9301      	str	r3, [sp, #4]
 8007fde:	2300      	movs	r3, #0
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	2250      	movs	r2, #80	; 0x50
 8007fe6:	2193      	movs	r1, #147	; 0x93
 8007fe8:	483c      	ldr	r0, [pc, #240]	; (80080dc <predefinedActivityTouchAction+0x1c4>)
 8007fea:	f7f9 fed9 	bl	8001da0 <EF_PutString>
			predefinedActivityKarmienie(1);
 8007fee:	2001      	movs	r0, #1
 8007ff0:	f7fd f808 	bl	8005004 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 8007ff4:	e069      	b.n	80080ca <predefinedActivityTouchAction+0x1b2>
		}

	}

	else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 8007ff6:	79fb      	ldrb	r3, [r7, #7]
 8007ff8:	2b77      	cmp	r3, #119	; 0x77
 8007ffa:	d966      	bls.n	80080ca <predefinedActivityTouchAction+0x1b2>
 8007ffc:	79fb      	ldrb	r3, [r7, #7]
 8007ffe:	2ba0      	cmp	r3, #160	; 0xa0
 8008000:	d863      	bhi.n	80080ca <predefinedActivityTouchAction+0x1b2>
	{
		if(ActivityButtonState[1] >= 1) // if is ON
 8008002:	4b34      	ldr	r3, [pc, #208]	; (80080d4 <predefinedActivityTouchAction+0x1bc>)
 8008004:	785b      	ldrb	r3, [r3, #1]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d02f      	beq.n	800806a <predefinedActivityTouchAction+0x152>
		{
			ActivityButtonState[1] = 0;
 800800a:	4b32      	ldr	r3, [pc, #200]	; (80080d4 <predefinedActivityTouchAction+0x1bc>)
 800800c:	2200      	movs	r2, #0
 800800e:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008010:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008014:	9301      	str	r3, [sp, #4]
 8008016:	230a      	movs	r3, #10
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	2328      	movs	r3, #40	; 0x28
 800801c:	2278      	movs	r2, #120	; 0x78
 800801e:	2178      	movs	r1, #120	; 0x78
 8008020:	2064      	movs	r0, #100	; 0x64
 8008022:	f7f9 fc52 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 8008026:	4930      	ldr	r1, [pc, #192]	; (80080e8 <predefinedActivityTouchAction+0x1d0>)
 8008028:	482c      	ldr	r0, [pc, #176]	; (80080dc <predefinedActivityTouchAction+0x1c4>)
 800802a:	f009 ff8d 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800802e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008032:	9301      	str	r3, [sp, #4]
 8008034:	2300      	movs	r3, #0
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	2300      	movs	r3, #0
 800803a:	227a      	movs	r2, #122	; 0x7a
 800803c:	2169      	movs	r1, #105	; 0x69
 800803e:	4827      	ldr	r0, [pc, #156]	; (80080dc <predefinedActivityTouchAction+0x1c4>)
 8008040:	f7f9 feae 	bl	8001da0 <EF_PutString>
			sprintf((char*)Msg, "OFF");
 8008044:	4926      	ldr	r1, [pc, #152]	; (80080e0 <predefinedActivityTouchAction+0x1c8>)
 8008046:	4825      	ldr	r0, [pc, #148]	; (80080dc <predefinedActivityTouchAction+0x1c4>)
 8008048:	f009 ff7e 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800804c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008050:	9301      	str	r3, [sp, #4]
 8008052:	2300      	movs	r3, #0
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	2300      	movs	r3, #0
 8008058:	228c      	movs	r2, #140	; 0x8c
 800805a:	2193      	movs	r1, #147	; 0x93
 800805c:	481f      	ldr	r0, [pc, #124]	; (80080dc <predefinedActivityTouchAction+0x1c4>)
 800805e:	f7f9 fe9f 	bl	8001da0 <EF_PutString>
			predefinedActivityCzyszczenie(0);
 8008062:	2000      	movs	r0, #0
 8008064:	f7fc ffb4 	bl	8004fd0 <predefinedActivityCzyszczenie>
			sprintf((char*)Msg, "ON");
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
			predefinedActivityCzyszczenie(1);
		}
	}
}
 8008068:	e02f      	b.n	80080ca <predefinedActivityTouchAction+0x1b2>
			ActivityButtonState[1] = 1;
 800806a:	4b1a      	ldr	r3, [pc, #104]	; (80080d4 <predefinedActivityTouchAction+0x1bc>)
 800806c:	2201      	movs	r2, #1
 800806e:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008070:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008074:	9301      	str	r3, [sp, #4]
 8008076:	230a      	movs	r3, #10
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	2328      	movs	r3, #40	; 0x28
 800807c:	2278      	movs	r2, #120	; 0x78
 800807e:	2178      	movs	r1, #120	; 0x78
 8008080:	2064      	movs	r0, #100	; 0x64
 8008082:	f7f9 fc22 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 8008086:	4918      	ldr	r1, [pc, #96]	; (80080e8 <predefinedActivityTouchAction+0x1d0>)
 8008088:	4814      	ldr	r0, [pc, #80]	; (80080dc <predefinedActivityTouchAction+0x1c4>)
 800808a:	f009 ff5d 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800808e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008092:	9301      	str	r3, [sp, #4]
 8008094:	2300      	movs	r3, #0
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	2300      	movs	r3, #0
 800809a:	227a      	movs	r2, #122	; 0x7a
 800809c:	2169      	movs	r1, #105	; 0x69
 800809e:	480f      	ldr	r0, [pc, #60]	; (80080dc <predefinedActivityTouchAction+0x1c4>)
 80080a0:	f7f9 fe7e 	bl	8001da0 <EF_PutString>
			sprintf((char*)Msg, "ON");
 80080a4:	490f      	ldr	r1, [pc, #60]	; (80080e4 <predefinedActivityTouchAction+0x1cc>)
 80080a6:	480d      	ldr	r0, [pc, #52]	; (80080dc <predefinedActivityTouchAction+0x1c4>)
 80080a8:	f009 ff4e 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80080ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80080b0:	9301      	str	r3, [sp, #4]
 80080b2:	2300      	movs	r3, #0
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	2300      	movs	r3, #0
 80080b8:	228c      	movs	r2, #140	; 0x8c
 80080ba:	2193      	movs	r1, #147	; 0x93
 80080bc:	4807      	ldr	r0, [pc, #28]	; (80080dc <predefinedActivityTouchAction+0x1c4>)
 80080be:	f7f9 fe6f 	bl	8001da0 <EF_PutString>
			predefinedActivityCzyszczenie(1);
 80080c2:	2001      	movs	r0, #1
 80080c4:	f7fc ff84 	bl	8004fd0 <predefinedActivityCzyszczenie>
}
 80080c8:	e7ff      	b.n	80080ca <predefinedActivityTouchAction+0x1b2>
 80080ca:	bf00      	nop
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	200002b0 	.word	0x200002b0
 80080d8:	0801614c 	.word	0x0801614c
 80080dc:	200002c0 	.word	0x200002c0
 80080e0:	08016158 	.word	0x08016158
 80080e4:	0801615c 	.word	0x0801615c
 80080e8:	08016160 	.word	0x08016160

080080ec <increaseNumberOfWSLedOnTFT>:

//
// Handling Touch to increase number of WS LED
//
void increaseNumberOfWSLedOnTFT(uint8_t x, uint8_t y)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af02      	add	r7, sp, #8
 80080f2:	4603      	mov	r3, r0
 80080f4:	460a      	mov	r2, r1
 80080f6:	71fb      	strb	r3, [r7, #7]
 80080f8:	4613      	mov	r3, r2
 80080fa:	71bb      	strb	r3, [r7, #6]
	if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 80080fc:	79fb      	ldrb	r3, [r7, #7]
 80080fe:	2bd8      	cmp	r3, #216	; 0xd8
 8008100:	d92f      	bls.n	8008162 <increaseNumberOfWSLedOnTFT+0x76>
 8008102:	79fb      	ldrb	r3, [r7, #7]
 8008104:	2bf7      	cmp	r3, #247	; 0xf7
 8008106:	d82c      	bhi.n	8008162 <increaseNumberOfWSLedOnTFT+0x76>
	{
		if(NrOfLeds < 98)
 8008108:	4b38      	ldr	r3, [pc, #224]	; (80081ec <increaseNumberOfWSLedOnTFT+0x100>)
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	2b61      	cmp	r3, #97	; 0x61
 800810e:	d806      	bhi.n	800811e <increaseNumberOfWSLedOnTFT+0x32>
		{
			NrOfLeds++;
 8008110:	4b36      	ldr	r3, [pc, #216]	; (80081ec <increaseNumberOfWSLedOnTFT+0x100>)
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	3301      	adds	r3, #1
 8008116:	b2da      	uxtb	r2, r3
 8008118:	4b34      	ldr	r3, [pc, #208]	; (80081ec <increaseNumberOfWSLedOnTFT+0x100>)
 800811a:	701a      	strb	r2, [r3, #0]
 800811c:	e002      	b.n	8008124 <increaseNumberOfWSLedOnTFT+0x38>
		}
		else
		{
			NrOfLeds = 1;
 800811e:	4b33      	ldr	r3, [pc, #204]	; (80081ec <increaseNumberOfWSLedOnTFT+0x100>)
 8008120:	2201      	movs	r2, #1
 8008122:	701a      	strb	r2, [r3, #0]
		}
		if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8008124:	4b31      	ldr	r3, [pc, #196]	; (80081ec <increaseNumberOfWSLedOnTFT+0x100>)
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	2b09      	cmp	r3, #9
 800812a:	d807      	bhi.n	800813c <increaseNumberOfWSLedOnTFT+0x50>
 800812c:	4b2f      	ldr	r3, [pc, #188]	; (80081ec <increaseNumberOfWSLedOnTFT+0x100>)
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	461a      	mov	r2, r3
 8008132:	492f      	ldr	r1, [pc, #188]	; (80081f0 <increaseNumberOfWSLedOnTFT+0x104>)
 8008134:	482f      	ldr	r0, [pc, #188]	; (80081f4 <increaseNumberOfWSLedOnTFT+0x108>)
 8008136:	f009 ff07 	bl	8011f48 <siprintf>
 800813a:	e006      	b.n	800814a <increaseNumberOfWSLedOnTFT+0x5e>
		else sprintf((char*)Msg, " %d", NrOfLeds);
 800813c:	4b2b      	ldr	r3, [pc, #172]	; (80081ec <increaseNumberOfWSLedOnTFT+0x100>)
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	461a      	mov	r2, r3
 8008142:	492d      	ldr	r1, [pc, #180]	; (80081f8 <increaseNumberOfWSLedOnTFT+0x10c>)
 8008144:	482b      	ldr	r0, [pc, #172]	; (80081f4 <increaseNumberOfWSLedOnTFT+0x108>)
 8008146:	f009 feff 	bl	8011f48 <siprintf>
		EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800814a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800814e:	9301      	str	r3, [sp, #4]
 8008150:	2301      	movs	r3, #1
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	2300      	movs	r3, #0
 8008156:	223c      	movs	r2, #60	; 0x3c
 8008158:	21ac      	movs	r1, #172	; 0xac
 800815a:	4826      	ldr	r0, [pc, #152]	; (80081f4 <increaseNumberOfWSLedOnTFT+0x108>)
 800815c:	f7f9 fe20 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "OK");
		EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+1), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		// Write chosen number of LEDs to EEPROM memory
		eeprom_write(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds));
	}
}
 8008160:	e03f      	b.n	80081e2 <increaseNumberOfWSLedOnTFT+0xf6>
	else if((x >= WS_LED_BUTTON_2_X)&&(x <= (WS_LED_BUTTON_2_X + WS_LED_BUTTON_W))) // Add +10 LED
 8008162:	79fb      	ldrb	r3, [r7, #7]
 8008164:	2bfb      	cmp	r3, #251	; 0xfb
 8008166:	d93c      	bls.n	80081e2 <increaseNumberOfWSLedOnTFT+0xf6>
		if(NrOfLeds < 90)
 8008168:	4b20      	ldr	r3, [pc, #128]	; (80081ec <increaseNumberOfWSLedOnTFT+0x100>)
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	2b59      	cmp	r3, #89	; 0x59
 800816e:	d806      	bhi.n	800817e <increaseNumberOfWSLedOnTFT+0x92>
			NrOfLeds = NrOfLeds + 10;
 8008170:	4b1e      	ldr	r3, [pc, #120]	; (80081ec <increaseNumberOfWSLedOnTFT+0x100>)
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	330a      	adds	r3, #10
 8008176:	b2da      	uxtb	r2, r3
 8008178:	4b1c      	ldr	r3, [pc, #112]	; (80081ec <increaseNumberOfWSLedOnTFT+0x100>)
 800817a:	701a      	strb	r2, [r3, #0]
 800817c:	e013      	b.n	80081a6 <increaseNumberOfWSLedOnTFT+0xba>
			NrOfLeds = (NrOfLeds + 10) % 99;
 800817e:	4b1b      	ldr	r3, [pc, #108]	; (80081ec <increaseNumberOfWSLedOnTFT+0x100>)
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	f103 020a 	add.w	r2, r3, #10
 8008186:	4b1d      	ldr	r3, [pc, #116]	; (80081fc <increaseNumberOfWSLedOnTFT+0x110>)
 8008188:	fb83 1302 	smull	r1, r3, r3, r2
 800818c:	4413      	add	r3, r2
 800818e:	1199      	asrs	r1, r3, #6
 8008190:	17d3      	asrs	r3, r2, #31
 8008192:	1ac9      	subs	r1, r1, r3
 8008194:	460b      	mov	r3, r1
 8008196:	005b      	lsls	r3, r3, #1
 8008198:	440b      	add	r3, r1
 800819a:	0159      	lsls	r1, r3, #5
 800819c:	440b      	add	r3, r1
 800819e:	1ad1      	subs	r1, r2, r3
 80081a0:	b2ca      	uxtb	r2, r1
 80081a2:	4b12      	ldr	r3, [pc, #72]	; (80081ec <increaseNumberOfWSLedOnTFT+0x100>)
 80081a4:	701a      	strb	r2, [r3, #0]
	if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 80081a6:	4b11      	ldr	r3, [pc, #68]	; (80081ec <increaseNumberOfWSLedOnTFT+0x100>)
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	2b09      	cmp	r3, #9
 80081ac:	d807      	bhi.n	80081be <increaseNumberOfWSLedOnTFT+0xd2>
 80081ae:	4b0f      	ldr	r3, [pc, #60]	; (80081ec <increaseNumberOfWSLedOnTFT+0x100>)
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	490e      	ldr	r1, [pc, #56]	; (80081f0 <increaseNumberOfWSLedOnTFT+0x104>)
 80081b6:	480f      	ldr	r0, [pc, #60]	; (80081f4 <increaseNumberOfWSLedOnTFT+0x108>)
 80081b8:	f009 fec6 	bl	8011f48 <siprintf>
 80081bc:	e006      	b.n	80081cc <increaseNumberOfWSLedOnTFT+0xe0>
	else sprintf((char*)Msg, " %d", NrOfLeds);
 80081be:	4b0b      	ldr	r3, [pc, #44]	; (80081ec <increaseNumberOfWSLedOnTFT+0x100>)
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	461a      	mov	r2, r3
 80081c4:	490c      	ldr	r1, [pc, #48]	; (80081f8 <increaseNumberOfWSLedOnTFT+0x10c>)
 80081c6:	480b      	ldr	r0, [pc, #44]	; (80081f4 <increaseNumberOfWSLedOnTFT+0x108>)
 80081c8:	f009 febe 	bl	8011f48 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80081cc:	f24c 6318 	movw	r3, #50712	; 0xc618
 80081d0:	9301      	str	r3, [sp, #4]
 80081d2:	2301      	movs	r3, #1
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	2300      	movs	r3, #0
 80081d8:	223c      	movs	r2, #60	; 0x3c
 80081da:	21ac      	movs	r1, #172	; 0xac
 80081dc:	4805      	ldr	r0, [pc, #20]	; (80081f4 <increaseNumberOfWSLedOnTFT+0x108>)
 80081de:	f7f9 fddf 	bl	8001da0 <EF_PutString>
}
 80081e2:	bf00      	nop
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20000033 	.word	0x20000033
 80081f0:	0801616c 	.word	0x0801616c
 80081f4:	200002c0 	.word	0x200002c0
 80081f8:	08016174 	.word	0x08016174
 80081fc:	a57eb503 	.word	0xa57eb503

08008200 <changeTypeOfWSLights>:

void changeTypeOfWSLights(uint8_t x, uint8_t y)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	4603      	mov	r3, r0
 8008208:	460a      	mov	r2, r1
 800820a:	71fb      	strb	r3, [r7, #7]
 800820c:	4613      	mov	r3, r2
 800820e:	71bb      	strb	r3, [r7, #6]
	if((y >= WS_B_2_POZ_Y)&&(y <= (WS_B_2_POZ_Y + WS_LED_BUTTON_H)))
 8008210:	79bb      	ldrb	r3, [r7, #6]
 8008212:	2b5e      	cmp	r3, #94	; 0x5e
 8008214:	d91e      	bls.n	8008254 <changeTypeOfWSLights+0x54>
 8008216:	79bb      	ldrb	r3, [r7, #6]
 8008218:	2b74      	cmp	r3, #116	; 0x74
 800821a:	d81b      	bhi.n	8008254 <changeTypeOfWSLights+0x54>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 800821c:	79fb      	ldrb	r3, [r7, #7]
 800821e:	2b95      	cmp	r3, #149	; 0x95
 8008220:	d906      	bls.n	8008230 <changeTypeOfWSLights+0x30>
 8008222:	79fb      	ldrb	r3, [r7, #7]
 8008224:	2bbe      	cmp	r3, #190	; 0xbe
 8008226:	d803      	bhi.n	8008230 <changeTypeOfWSLights+0x30>
		{
			SendComand(UCMD_WS_LED_WHITE_MAX);
 8008228:	201d      	movs	r0, #29
 800822a:	f000 ff71 	bl	8009110 <SendComand>
 800822e:	e010      	b.n	8008252 <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8008230:	79fb      	ldrb	r3, [r7, #7]
 8008232:	2bc9      	cmp	r3, #201	; 0xc9
 8008234:	d906      	bls.n	8008244 <changeTypeOfWSLights+0x44>
 8008236:	79fb      	ldrb	r3, [r7, #7]
 8008238:	2bf2      	cmp	r3, #242	; 0xf2
 800823a:	d803      	bhi.n	8008244 <changeTypeOfWSLights+0x44>
		{
			SendComand(UCMD_WS_LED_WHITE_MID);
 800823c:	201e      	movs	r0, #30
 800823e:	f000 ff67 	bl	8009110 <SendComand>
 8008242:	e006      	b.n	8008252 <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 8008244:	79fb      	ldrb	r3, [r7, #7]
 8008246:	2bfd      	cmp	r3, #253	; 0xfd
 8008248:	d962      	bls.n	8008310 <changeTypeOfWSLights+0x110>
		{
			SendComand(UCMD_WS_LED_WHITE_MIN);
 800824a:	201f      	movs	r0, #31
 800824c:	f000 ff60 	bl	8009110 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008250:	e05e      	b.n	8008310 <changeTypeOfWSLights+0x110>
 8008252:	e05d      	b.n	8008310 <changeTypeOfWSLights+0x110>
	}

	//
	// Check if it is third line button to change LEDs to BLUE
	//
	else if((y >= WS_B_3_POZ_Y)&&(y <= (WS_B_3_POZ_Y + WS_LED_BUTTON_H)))
 8008254:	79bb      	ldrb	r3, [r7, #6]
 8008256:	2b7c      	cmp	r3, #124	; 0x7c
 8008258:	d91e      	bls.n	8008298 <changeTypeOfWSLights+0x98>
 800825a:	79bb      	ldrb	r3, [r7, #6]
 800825c:	2b92      	cmp	r3, #146	; 0x92
 800825e:	d81b      	bhi.n	8008298 <changeTypeOfWSLights+0x98>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008260:	79fb      	ldrb	r3, [r7, #7]
 8008262:	2b95      	cmp	r3, #149	; 0x95
 8008264:	d906      	bls.n	8008274 <changeTypeOfWSLights+0x74>
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	2bbe      	cmp	r3, #190	; 0xbe
 800826a:	d803      	bhi.n	8008274 <changeTypeOfWSLights+0x74>
		{
			SendComand(UCMD_WS_LED_BLUE_MAX);
 800826c:	2020      	movs	r0, #32
 800826e:	f000 ff4f 	bl	8009110 <SendComand>
 8008272:	e010      	b.n	8008296 <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8008274:	79fb      	ldrb	r3, [r7, #7]
 8008276:	2bc9      	cmp	r3, #201	; 0xc9
 8008278:	d906      	bls.n	8008288 <changeTypeOfWSLights+0x88>
 800827a:	79fb      	ldrb	r3, [r7, #7]
 800827c:	2bf2      	cmp	r3, #242	; 0xf2
 800827e:	d803      	bhi.n	8008288 <changeTypeOfWSLights+0x88>
		{
			SendComand(UCMD_WS_LED_BLUE_MID);
 8008280:	2021      	movs	r0, #33	; 0x21
 8008282:	f000 ff45 	bl	8009110 <SendComand>
 8008286:	e006      	b.n	8008296 <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 8008288:	79fb      	ldrb	r3, [r7, #7]
 800828a:	2bfd      	cmp	r3, #253	; 0xfd
 800828c:	d942      	bls.n	8008314 <changeTypeOfWSLights+0x114>
		{
			SendComand(UCMD_WS_LED_BLUE_MIN);
 800828e:	2022      	movs	r0, #34	; 0x22
 8008290:	f000 ff3e 	bl	8009110 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008294:	e03e      	b.n	8008314 <changeTypeOfWSLights+0x114>
 8008296:	e03d      	b.n	8008314 <changeTypeOfWSLights+0x114>
	}

	//
	// Check if it is fourth line button to change LEDs to Predefined
	//
	else if((y >= WS_B_4_POZ_Y)&&(y <= (WS_B_4_POZ_Y + WS_LED_BUTTON_H)))
 8008298:	79bb      	ldrb	r3, [r7, #6]
 800829a:	2b9b      	cmp	r3, #155	; 0x9b
 800829c:	d91e      	bls.n	80082dc <changeTypeOfWSLights+0xdc>
 800829e:	79bb      	ldrb	r3, [r7, #6]
 80082a0:	2bb1      	cmp	r3, #177	; 0xb1
 80082a2:	d81b      	bhi.n	80082dc <changeTypeOfWSLights+0xdc>
	{
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 80082a4:	79fb      	ldrb	r3, [r7, #7]
 80082a6:	2b13      	cmp	r3, #19
 80082a8:	d906      	bls.n	80082b8 <changeTypeOfWSLights+0xb8>
 80082aa:	79fb      	ldrb	r3, [r7, #7]
 80082ac:	2b64      	cmp	r3, #100	; 0x64
 80082ae:	d803      	bhi.n	80082b8 <changeTypeOfWSLights+0xb8>
		{
			SendComand(UCMD_WS_LED_DAILY);
 80082b0:	2023      	movs	r0, #35	; 0x23
 80082b2:	f000 ff2d 	bl	8009110 <SendComand>
 80082b6:	e010      	b.n	80082da <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_2_X)&&(x <= (WS_PREDEFINED_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 80082b8:	79fb      	ldrb	r3, [r7, #7]
 80082ba:	2b77      	cmp	r3, #119	; 0x77
 80082bc:	d906      	bls.n	80082cc <changeTypeOfWSLights+0xcc>
 80082be:	79fb      	ldrb	r3, [r7, #7]
 80082c0:	2bc8      	cmp	r3, #200	; 0xc8
 80082c2:	d803      	bhi.n	80082cc <changeTypeOfWSLights+0xcc>
		{
			SendComand(UCMD_WS_LED_WHITE_OFF);
 80082c4:	201c      	movs	r0, #28
 80082c6:	f000 ff23 	bl	8009110 <SendComand>
 80082ca:	e006      	b.n	80082da <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_3_X)&&(x <= (WS_PREDEFINED_BUTTON_3_X + WS_PREDEFINED_BUTTON_W))) // MIN
 80082cc:	79fb      	ldrb	r3, [r7, #7]
 80082ce:	2bdb      	cmp	r3, #219	; 0xdb
 80082d0:	d922      	bls.n	8008318 <changeTypeOfWSLights+0x118>
		{
			SendComand(UCMD_WS_LED_NIGHT);
 80082d2:	2024      	movs	r0, #36	; 0x24
 80082d4:	f000 ff1c 	bl	8009110 <SendComand>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 80082d8:	e01e      	b.n	8008318 <changeTypeOfWSLights+0x118>
 80082da:	e01d      	b.n	8008318 <changeTypeOfWSLights+0x118>
	}

	//
	// Check if it is fifth line button to change LEDs to Predefined animations
	//
	else if((y >= WS_B_5_POZ_Y)&&(y <= (WS_B_5_POZ_Y + WS_LED_BUTTON_H)))
 80082dc:	79bb      	ldrb	r3, [r7, #6]
 80082de:	2bba      	cmp	r3, #186	; 0xba
 80082e0:	d91b      	bls.n	800831a <changeTypeOfWSLights+0x11a>
 80082e2:	79bb      	ldrb	r3, [r7, #6]
 80082e4:	2bd0      	cmp	r3, #208	; 0xd0
 80082e6:	d818      	bhi.n	800831a <changeTypeOfWSLights+0x11a>
	{
		if((x >= WS_PREDEFINED_ACT_BUTTON_1_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 80082e8:	79fb      	ldrb	r3, [r7, #7]
 80082ea:	2b45      	cmp	r3, #69	; 0x45
 80082ec:	d906      	bls.n	80082fc <changeTypeOfWSLights+0xfc>
 80082ee:	79fb      	ldrb	r3, [r7, #7]
 80082f0:	2b96      	cmp	r3, #150	; 0x96
 80082f2:	d803      	bhi.n	80082fc <changeTypeOfWSLights+0xfc>
		{
			SendComand(UCMD_WS_ANIMATION_SUNRISE);
 80082f4:	2026      	movs	r0, #38	; 0x26
 80082f6:	f000 ff0b 	bl	8009110 <SendComand>
 80082fa:	e00e      	b.n	800831a <changeTypeOfWSLights+0x11a>
		}
		else if((x >= WS_PREDEFINED_ACT_BUTTON_2_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 80082fc:	79fb      	ldrb	r3, [r7, #7]
 80082fe:	2ba9      	cmp	r3, #169	; 0xa9
 8008300:	d90b      	bls.n	800831a <changeTypeOfWSLights+0x11a>
 8008302:	79fb      	ldrb	r3, [r7, #7]
 8008304:	2bfa      	cmp	r3, #250	; 0xfa
 8008306:	d808      	bhi.n	800831a <changeTypeOfWSLights+0x11a>
		{
			SendComand(UCMD_WS_ANIMATION_SUNSET);
 8008308:	2027      	movs	r0, #39	; 0x27
 800830a:	f000 ff01 	bl	8009110 <SendComand>
		}
	}
}
 800830e:	e004      	b.n	800831a <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008310:	bf00      	nop
 8008312:	e002      	b.n	800831a <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008314:	bf00      	nop
 8008316:	e000      	b.n	800831a <changeTypeOfWSLights+0x11a>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008318:	bf00      	nop
}
 800831a:	bf00      	nop
 800831c:	3708      	adds	r7, #8
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
	...

08008324 <firstSwitchTurn>:
////////////////////////////////////////////////////////////////////
//
// Functions to change state of relays to manage switches and lights
//
void firstSwitchTurn(uint8_t NewState)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af02      	add	r7, sp, #8
 800832a:	4603      	mov	r3, r0
 800832c:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 800832e:	79fb      	ldrb	r3, [r7, #7]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d131      	bne.n	8008398 <firstSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8008334:	2006      	movs	r0, #6
 8008336:	f000 feeb 	bl	8009110 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=1\n"); // Print message to ESP
 800833a:	4932      	ldr	r1, [pc, #200]	; (8008404 <firstSwitchTurn+0xe0>)
 800833c:	4832      	ldr	r0, [pc, #200]	; (8008408 <firstSwitchTurn+0xe4>)
 800833e:	f001 fe0f 	bl	8009f60 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008342:	4b32      	ldr	r3, [pc, #200]	; (800840c <firstSwitchTurn+0xe8>)
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	2b02      	cmp	r3, #2
 8008348:	d11e      	bne.n	8008388 <firstSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 800834a:	4831      	ldr	r0, [pc, #196]	; (8008410 <firstSwitchTurn+0xec>)
 800834c:	f7f9 fb0e 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008350:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008354:	9301      	str	r3, [sp, #4]
 8008356:	2305      	movs	r3, #5
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	2315      	movs	r3, #21
 800835c:	2221      	movs	r2, #33	; 0x21
 800835e:	2141      	movs	r1, #65	; 0x41
 8008360:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008364:	f7f9 fab1 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008368:	492a      	ldr	r1, [pc, #168]	; (8008414 <firstSwitchTurn+0xf0>)
 800836a:	482b      	ldr	r0, [pc, #172]	; (8008418 <firstSwitchTurn+0xf4>)
 800836c:	f009 fdec 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008370:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008374:	9301      	str	r3, [sp, #4]
 8008376:	2300      	movs	r3, #0
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	2300      	movs	r3, #0
 800837c:	2243      	movs	r2, #67	; 0x43
 800837e:	f240 1111 	movw	r1, #273	; 0x111
 8008382:	4825      	ldr	r0, [pc, #148]	; (8008418 <firstSwitchTurn+0xf4>)
 8008384:	f7f9 fd0c 	bl	8001da0 <EF_PutString>
		}
		SwitchesButtonState[0] = 0;
 8008388:	4b24      	ldr	r3, [pc, #144]	; (800841c <firstSwitchTurn+0xf8>)
 800838a:	2200      	movs	r2, #0
 800838c:	701a      	strb	r2, [r3, #0]
		EEPROM_RelayStateUpdate(1, 0);
 800838e:	2100      	movs	r1, #0
 8008390:	2001      	movs	r0, #1
 8008392:	f7fa fc4f 	bl	8002c34 <EEPROM_RelayStateUpdate>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[0] = 1;
		EEPROM_RelayStateUpdate(1, 1);
	}
}
 8008396:	e030      	b.n	80083fa <firstSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 8008398:	2005      	movs	r0, #5
 800839a:	f000 feb9 	bl	8009110 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=1\n"); // Print message to ESP
 800839e:	4920      	ldr	r1, [pc, #128]	; (8008420 <firstSwitchTurn+0xfc>)
 80083a0:	4819      	ldr	r0, [pc, #100]	; (8008408 <firstSwitchTurn+0xe4>)
 80083a2:	f001 fddd 	bl	8009f60 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 80083a6:	4b19      	ldr	r3, [pc, #100]	; (800840c <firstSwitchTurn+0xe8>)
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d11e      	bne.n	80083ec <firstSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 80083ae:	4818      	ldr	r0, [pc, #96]	; (8008410 <firstSwitchTurn+0xec>)
 80083b0:	f7f9 fadc 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80083b4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80083b8:	9301      	str	r3, [sp, #4]
 80083ba:	2305      	movs	r3, #5
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	2315      	movs	r3, #21
 80083c0:	2221      	movs	r2, #33	; 0x21
 80083c2:	2141      	movs	r1, #65	; 0x41
 80083c4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80083c8:	f7f9 fa7f 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 80083cc:	4915      	ldr	r1, [pc, #84]	; (8008424 <firstSwitchTurn+0x100>)
 80083ce:	4812      	ldr	r0, [pc, #72]	; (8008418 <firstSwitchTurn+0xf4>)
 80083d0:	f009 fdba 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80083d4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	2300      	movs	r3, #0
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	2300      	movs	r3, #0
 80083e0:	2243      	movs	r2, #67	; 0x43
 80083e2:	f240 1111 	movw	r1, #273	; 0x111
 80083e6:	480c      	ldr	r0, [pc, #48]	; (8008418 <firstSwitchTurn+0xf4>)
 80083e8:	f7f9 fcda 	bl	8001da0 <EF_PutString>
		SwitchesButtonState[0] = 1;
 80083ec:	4b0b      	ldr	r3, [pc, #44]	; (800841c <firstSwitchTurn+0xf8>)
 80083ee:	2201      	movs	r2, #1
 80083f0:	701a      	strb	r2, [r3, #0]
		EEPROM_RelayStateUpdate(1, 1);
 80083f2:	2101      	movs	r1, #1
 80083f4:	2001      	movs	r0, #1
 80083f6:	f7fa fc1d 	bl	8002c34 <EEPROM_RelayStateUpdate>
}
 80083fa:	bf00      	nop
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	08016178 	.word	0x08016178
 8008408:	200006bc 	.word	0x200006bc
 800840c:	20000290 	.word	0x20000290
 8008410:	0802774c 	.word	0x0802774c
 8008414:	08016158 	.word	0x08016158
 8008418:	200002c0 	.word	0x200002c0
 800841c:	200002a8 	.word	0x200002a8
 8008420:	08016184 	.word	0x08016184
 8008424:	0801615c 	.word	0x0801615c

08008428 <secondSwitchTurn>:
void secondSwitchTurn(uint8_t NewState)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af02      	add	r7, sp, #8
 800842e:	4603      	mov	r3, r0
 8008430:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008432:	79fb      	ldrb	r3, [r7, #7]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d131      	bne.n	800849c <secondSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8008438:	2008      	movs	r0, #8
 800843a:	f000 fe69 	bl	8009110 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=2\n"); // Print message to ESP
 800843e:	4932      	ldr	r1, [pc, #200]	; (8008508 <secondSwitchTurn+0xe0>)
 8008440:	4832      	ldr	r0, [pc, #200]	; (800850c <secondSwitchTurn+0xe4>)
 8008442:	f001 fd8d 	bl	8009f60 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008446:	4b32      	ldr	r3, [pc, #200]	; (8008510 <secondSwitchTurn+0xe8>)
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	2b02      	cmp	r3, #2
 800844c:	d11e      	bne.n	800848c <secondSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 800844e:	4831      	ldr	r0, [pc, #196]	; (8008514 <secondSwitchTurn+0xec>)
 8008450:	f7f9 fa8c 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008454:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008458:	9301      	str	r3, [sp, #4]
 800845a:	2305      	movs	r3, #5
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	2315      	movs	r3, #21
 8008460:	2221      	movs	r2, #33	; 0x21
 8008462:	215f      	movs	r1, #95	; 0x5f
 8008464:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008468:	f7f9 fa2f 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 800846c:	492a      	ldr	r1, [pc, #168]	; (8008518 <secondSwitchTurn+0xf0>)
 800846e:	482b      	ldr	r0, [pc, #172]	; (800851c <secondSwitchTurn+0xf4>)
 8008470:	f009 fd6a 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008474:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008478:	9301      	str	r3, [sp, #4]
 800847a:	2300      	movs	r3, #0
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	2300      	movs	r3, #0
 8008480:	2261      	movs	r2, #97	; 0x61
 8008482:	f240 1111 	movw	r1, #273	; 0x111
 8008486:	4825      	ldr	r0, [pc, #148]	; (800851c <secondSwitchTurn+0xf4>)
 8008488:	f7f9 fc8a 	bl	8001da0 <EF_PutString>
		}
		SwitchesButtonState[1] = 0;
 800848c:	4b24      	ldr	r3, [pc, #144]	; (8008520 <secondSwitchTurn+0xf8>)
 800848e:	2200      	movs	r2, #0
 8008490:	705a      	strb	r2, [r3, #1]
		EEPROM_RelayStateUpdate(2, 0);
 8008492:	2100      	movs	r1, #0
 8008494:	2002      	movs	r0, #2
 8008496:	f7fa fbcd 	bl	8002c34 <EEPROM_RelayStateUpdate>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[1] = 1;
		EEPROM_RelayStateUpdate(2, 1);
	}
}
 800849a:	e030      	b.n	80084fe <secondSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 800849c:	2007      	movs	r0, #7
 800849e:	f000 fe37 	bl	8009110 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=2\n"); // Print message to ESP
 80084a2:	4920      	ldr	r1, [pc, #128]	; (8008524 <secondSwitchTurn+0xfc>)
 80084a4:	4819      	ldr	r0, [pc, #100]	; (800850c <secondSwitchTurn+0xe4>)
 80084a6:	f001 fd5b 	bl	8009f60 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 80084aa:	4b19      	ldr	r3, [pc, #100]	; (8008510 <secondSwitchTurn+0xe8>)
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d11e      	bne.n	80084f0 <secondSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 80084b2:	4818      	ldr	r0, [pc, #96]	; (8008514 <secondSwitchTurn+0xec>)
 80084b4:	f7f9 fa5a 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80084b8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80084bc:	9301      	str	r3, [sp, #4]
 80084be:	2305      	movs	r3, #5
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	2315      	movs	r3, #21
 80084c4:	2221      	movs	r2, #33	; 0x21
 80084c6:	215f      	movs	r1, #95	; 0x5f
 80084c8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80084cc:	f7f9 f9fd 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 80084d0:	4915      	ldr	r1, [pc, #84]	; (8008528 <secondSwitchTurn+0x100>)
 80084d2:	4812      	ldr	r0, [pc, #72]	; (800851c <secondSwitchTurn+0xf4>)
 80084d4:	f009 fd38 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80084d8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80084dc:	9301      	str	r3, [sp, #4]
 80084de:	2300      	movs	r3, #0
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	2300      	movs	r3, #0
 80084e4:	2261      	movs	r2, #97	; 0x61
 80084e6:	f240 1111 	movw	r1, #273	; 0x111
 80084ea:	480c      	ldr	r0, [pc, #48]	; (800851c <secondSwitchTurn+0xf4>)
 80084ec:	f7f9 fc58 	bl	8001da0 <EF_PutString>
		SwitchesButtonState[1] = 1;
 80084f0:	4b0b      	ldr	r3, [pc, #44]	; (8008520 <secondSwitchTurn+0xf8>)
 80084f2:	2201      	movs	r2, #1
 80084f4:	705a      	strb	r2, [r3, #1]
		EEPROM_RelayStateUpdate(2, 1);
 80084f6:	2101      	movs	r1, #1
 80084f8:	2002      	movs	r0, #2
 80084fa:	f7fa fb9b 	bl	8002c34 <EEPROM_RelayStateUpdate>
}
 80084fe:	bf00      	nop
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	08016190 	.word	0x08016190
 800850c:	200006bc 	.word	0x200006bc
 8008510:	20000290 	.word	0x20000290
 8008514:	0802774c 	.word	0x0802774c
 8008518:	08016158 	.word	0x08016158
 800851c:	200002c0 	.word	0x200002c0
 8008520:	200002a8 	.word	0x200002a8
 8008524:	0801619c 	.word	0x0801619c
 8008528:	0801615c 	.word	0x0801615c

0800852c <thirdSwitchTurn>:
void thirdSwitchTurn(uint8_t NewState)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af02      	add	r7, sp, #8
 8008532:	4603      	mov	r3, r0
 8008534:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008536:	79fb      	ldrb	r3, [r7, #7]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d131      	bne.n	80085a0 <thirdSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 800853c:	200a      	movs	r0, #10
 800853e:	f000 fde7 	bl	8009110 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=3\n"); // Print message to ESP
 8008542:	4932      	ldr	r1, [pc, #200]	; (800860c <thirdSwitchTurn+0xe0>)
 8008544:	4832      	ldr	r0, [pc, #200]	; (8008610 <thirdSwitchTurn+0xe4>)
 8008546:	f001 fd0b 	bl	8009f60 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 800854a:	4b32      	ldr	r3, [pc, #200]	; (8008614 <thirdSwitchTurn+0xe8>)
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	2b02      	cmp	r3, #2
 8008550:	d11e      	bne.n	8008590 <thirdSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008552:	4831      	ldr	r0, [pc, #196]	; (8008618 <thirdSwitchTurn+0xec>)
 8008554:	f7f9 fa0a 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008558:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800855c:	9301      	str	r3, [sp, #4]
 800855e:	2305      	movs	r3, #5
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	2315      	movs	r3, #21
 8008564:	2221      	movs	r2, #33	; 0x21
 8008566:	217d      	movs	r1, #125	; 0x7d
 8008568:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800856c:	f7f9 f9ad 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008570:	492a      	ldr	r1, [pc, #168]	; (800861c <thirdSwitchTurn+0xf0>)
 8008572:	482b      	ldr	r0, [pc, #172]	; (8008620 <thirdSwitchTurn+0xf4>)
 8008574:	f009 fce8 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008578:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800857c:	9301      	str	r3, [sp, #4]
 800857e:	2300      	movs	r3, #0
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	2300      	movs	r3, #0
 8008584:	227f      	movs	r2, #127	; 0x7f
 8008586:	f240 1111 	movw	r1, #273	; 0x111
 800858a:	4825      	ldr	r0, [pc, #148]	; (8008620 <thirdSwitchTurn+0xf4>)
 800858c:	f7f9 fc08 	bl	8001da0 <EF_PutString>
		}
		SwitchesButtonState[2] = 0;
 8008590:	4b24      	ldr	r3, [pc, #144]	; (8008624 <thirdSwitchTurn+0xf8>)
 8008592:	2200      	movs	r2, #0
 8008594:	709a      	strb	r2, [r3, #2]
		EEPROM_RelayStateUpdate(3, 0);
 8008596:	2100      	movs	r1, #0
 8008598:	2003      	movs	r0, #3
 800859a:	f7fa fb4b 	bl	8002c34 <EEPROM_RelayStateUpdate>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[2] = 1;
		EEPROM_RelayStateUpdate(3, 1);
	}
}
 800859e:	e030      	b.n	8008602 <thirdSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 80085a0:	2009      	movs	r0, #9
 80085a2:	f000 fdb5 	bl	8009110 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=3\n"); // Print message to ESP
 80085a6:	4920      	ldr	r1, [pc, #128]	; (8008628 <thirdSwitchTurn+0xfc>)
 80085a8:	4819      	ldr	r0, [pc, #100]	; (8008610 <thirdSwitchTurn+0xe4>)
 80085aa:	f001 fcd9 	bl	8009f60 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 80085ae:	4b19      	ldr	r3, [pc, #100]	; (8008614 <thirdSwitchTurn+0xe8>)
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d11e      	bne.n	80085f4 <thirdSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 80085b6:	4818      	ldr	r0, [pc, #96]	; (8008618 <thirdSwitchTurn+0xec>)
 80085b8:	f7f9 f9d8 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80085bc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80085c0:	9301      	str	r3, [sp, #4]
 80085c2:	2305      	movs	r3, #5
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	2315      	movs	r3, #21
 80085c8:	2221      	movs	r2, #33	; 0x21
 80085ca:	217d      	movs	r1, #125	; 0x7d
 80085cc:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80085d0:	f7f9 f97b 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 80085d4:	4915      	ldr	r1, [pc, #84]	; (800862c <thirdSwitchTurn+0x100>)
 80085d6:	4812      	ldr	r0, [pc, #72]	; (8008620 <thirdSwitchTurn+0xf4>)
 80085d8:	f009 fcb6 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80085dc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80085e0:	9301      	str	r3, [sp, #4]
 80085e2:	2300      	movs	r3, #0
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	2300      	movs	r3, #0
 80085e8:	227f      	movs	r2, #127	; 0x7f
 80085ea:	f240 1111 	movw	r1, #273	; 0x111
 80085ee:	480c      	ldr	r0, [pc, #48]	; (8008620 <thirdSwitchTurn+0xf4>)
 80085f0:	f7f9 fbd6 	bl	8001da0 <EF_PutString>
		SwitchesButtonState[2] = 1;
 80085f4:	4b0b      	ldr	r3, [pc, #44]	; (8008624 <thirdSwitchTurn+0xf8>)
 80085f6:	2201      	movs	r2, #1
 80085f8:	709a      	strb	r2, [r3, #2]
		EEPROM_RelayStateUpdate(3, 1);
 80085fa:	2101      	movs	r1, #1
 80085fc:	2003      	movs	r0, #3
 80085fe:	f7fa fb19 	bl	8002c34 <EEPROM_RelayStateUpdate>
}
 8008602:	bf00      	nop
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	080161a8 	.word	0x080161a8
 8008610:	200006bc 	.word	0x200006bc
 8008614:	20000290 	.word	0x20000290
 8008618:	0802774c 	.word	0x0802774c
 800861c:	08016158 	.word	0x08016158
 8008620:	200002c0 	.word	0x200002c0
 8008624:	200002a8 	.word	0x200002a8
 8008628:	080161b4 	.word	0x080161b4
 800862c:	0801615c 	.word	0x0801615c

08008630 <fourthSwitchTurn>:
void fourthSwitchTurn(uint8_t NewState)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af02      	add	r7, sp, #8
 8008636:	4603      	mov	r3, r0
 8008638:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 800863a:	79fb      	ldrb	r3, [r7, #7]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d131      	bne.n	80086a4 <fourthSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8008640:	200c      	movs	r0, #12
 8008642:	f000 fd65 	bl	8009110 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=4\n"); // Print message to ESP
 8008646:	4932      	ldr	r1, [pc, #200]	; (8008710 <fourthSwitchTurn+0xe0>)
 8008648:	4832      	ldr	r0, [pc, #200]	; (8008714 <fourthSwitchTurn+0xe4>)
 800864a:	f001 fc89 	bl	8009f60 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 800864e:	4b32      	ldr	r3, [pc, #200]	; (8008718 <fourthSwitchTurn+0xe8>)
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	2b02      	cmp	r3, #2
 8008654:	d11e      	bne.n	8008694 <fourthSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008656:	4831      	ldr	r0, [pc, #196]	; (800871c <fourthSwitchTurn+0xec>)
 8008658:	f7f9 f988 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800865c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	2305      	movs	r3, #5
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	2315      	movs	r3, #21
 8008668:	2221      	movs	r2, #33	; 0x21
 800866a:	219b      	movs	r1, #155	; 0x9b
 800866c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008670:	f7f9 f92b 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008674:	492a      	ldr	r1, [pc, #168]	; (8008720 <fourthSwitchTurn+0xf0>)
 8008676:	482b      	ldr	r0, [pc, #172]	; (8008724 <fourthSwitchTurn+0xf4>)
 8008678:	f009 fc66 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800867c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008680:	9301      	str	r3, [sp, #4]
 8008682:	2300      	movs	r3, #0
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	2300      	movs	r3, #0
 8008688:	229d      	movs	r2, #157	; 0x9d
 800868a:	f240 1111 	movw	r1, #273	; 0x111
 800868e:	4825      	ldr	r0, [pc, #148]	; (8008724 <fourthSwitchTurn+0xf4>)
 8008690:	f7f9 fb86 	bl	8001da0 <EF_PutString>
		}
		SwitchesButtonState[3] = 0;
 8008694:	4b24      	ldr	r3, [pc, #144]	; (8008728 <fourthSwitchTurn+0xf8>)
 8008696:	2200      	movs	r2, #0
 8008698:	70da      	strb	r2, [r3, #3]
		EEPROM_RelayStateUpdate(4, 0);
 800869a:	2100      	movs	r1, #0
 800869c:	2004      	movs	r0, #4
 800869e:	f7fa fac9 	bl	8002c34 <EEPROM_RelayStateUpdate>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[3] = 1;
		EEPROM_RelayStateUpdate(4, 1);
	}
}
 80086a2:	e030      	b.n	8008706 <fourthSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 80086a4:	200b      	movs	r0, #11
 80086a6:	f000 fd33 	bl	8009110 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=4\n"); // Print message to ESP
 80086aa:	4920      	ldr	r1, [pc, #128]	; (800872c <fourthSwitchTurn+0xfc>)
 80086ac:	4819      	ldr	r0, [pc, #100]	; (8008714 <fourthSwitchTurn+0xe4>)
 80086ae:	f001 fc57 	bl	8009f60 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 80086b2:	4b19      	ldr	r3, [pc, #100]	; (8008718 <fourthSwitchTurn+0xe8>)
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d11e      	bne.n	80086f8 <fourthSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 80086ba:	4818      	ldr	r0, [pc, #96]	; (800871c <fourthSwitchTurn+0xec>)
 80086bc:	f7f9 f956 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80086c0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80086c4:	9301      	str	r3, [sp, #4]
 80086c6:	2305      	movs	r3, #5
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	2315      	movs	r3, #21
 80086cc:	2221      	movs	r2, #33	; 0x21
 80086ce:	219b      	movs	r1, #155	; 0x9b
 80086d0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80086d4:	f7f9 f8f9 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 80086d8:	4915      	ldr	r1, [pc, #84]	; (8008730 <fourthSwitchTurn+0x100>)
 80086da:	4812      	ldr	r0, [pc, #72]	; (8008724 <fourthSwitchTurn+0xf4>)
 80086dc:	f009 fc34 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80086e0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	2300      	movs	r3, #0
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	2300      	movs	r3, #0
 80086ec:	229d      	movs	r2, #157	; 0x9d
 80086ee:	f240 1111 	movw	r1, #273	; 0x111
 80086f2:	480c      	ldr	r0, [pc, #48]	; (8008724 <fourthSwitchTurn+0xf4>)
 80086f4:	f7f9 fb54 	bl	8001da0 <EF_PutString>
		SwitchesButtonState[3] = 1;
 80086f8:	4b0b      	ldr	r3, [pc, #44]	; (8008728 <fourthSwitchTurn+0xf8>)
 80086fa:	2201      	movs	r2, #1
 80086fc:	70da      	strb	r2, [r3, #3]
		EEPROM_RelayStateUpdate(4, 1);
 80086fe:	2101      	movs	r1, #1
 8008700:	2004      	movs	r0, #4
 8008702:	f7fa fa97 	bl	8002c34 <EEPROM_RelayStateUpdate>
}
 8008706:	bf00      	nop
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	080161c0 	.word	0x080161c0
 8008714:	200006bc 	.word	0x200006bc
 8008718:	20000290 	.word	0x20000290
 800871c:	0802774c 	.word	0x0802774c
 8008720:	08016158 	.word	0x08016158
 8008724:	200002c0 	.word	0x200002c0
 8008728:	200002a8 	.word	0x200002a8
 800872c:	080161cc 	.word	0x080161cc
 8008730:	0801615c 	.word	0x0801615c

08008734 <firstLightTurn>:


void firstLightTurn(uint8_t NewState)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af02      	add	r7, sp, #8
 800873a:	4603      	mov	r3, r0
 800873c:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 800873e:	79fb      	ldrb	r3, [r7, #7]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d12f      	bne.n	80087a4 <firstLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8008744:	200e      	movs	r0, #14
 8008746:	f000 fce3 	bl	8009110 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=5\n"); // Print message to ESP
 800874a:	4930      	ldr	r1, [pc, #192]	; (800880c <firstLightTurn+0xd8>)
 800874c:	4830      	ldr	r0, [pc, #192]	; (8008810 <firstLightTurn+0xdc>)
 800874e:	f001 fc07 	bl	8009f60 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008752:	4b30      	ldr	r3, [pc, #192]	; (8008814 <firstLightTurn+0xe0>)
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	2b05      	cmp	r3, #5
 8008758:	d11c      	bne.n	8008794 <firstLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 800875a:	482f      	ldr	r0, [pc, #188]	; (8008818 <firstLightTurn+0xe4>)
 800875c:	f7f9 f906 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008760:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	2305      	movs	r3, #5
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	2315      	movs	r3, #21
 800876c:	2221      	movs	r2, #33	; 0x21
 800876e:	2141      	movs	r1, #65	; 0x41
 8008770:	20c8      	movs	r0, #200	; 0xc8
 8008772:	f7f9 f8aa 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008776:	4929      	ldr	r1, [pc, #164]	; (800881c <firstLightTurn+0xe8>)
 8008778:	4829      	ldr	r0, [pc, #164]	; (8008820 <firstLightTurn+0xec>)
 800877a:	f009 fbe5 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800877e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008782:	9301      	str	r3, [sp, #4]
 8008784:	2300      	movs	r3, #0
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	2300      	movs	r3, #0
 800878a:	2243      	movs	r2, #67	; 0x43
 800878c:	21cb      	movs	r1, #203	; 0xcb
 800878e:	4824      	ldr	r0, [pc, #144]	; (8008820 <firstLightTurn+0xec>)
 8008790:	f7f9 fb06 	bl	8001da0 <EF_PutString>
		}
		LightsButtonState[0] = 0;
 8008794:	4b23      	ldr	r3, [pc, #140]	; (8008824 <firstLightTurn+0xf0>)
 8008796:	2200      	movs	r2, #0
 8008798:	701a      	strb	r2, [r3, #0]
		EEPROM_LightStateUpdate(1, 0);
 800879a:	2100      	movs	r1, #0
 800879c:	2001      	movs	r0, #1
 800879e:	f7fa fa82 	bl	8002ca6 <EEPROM_LightStateUpdate>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[0] = 1;
		EEPROM_LightStateUpdate(1, 1);
	}
}
 80087a2:	e02e      	b.n	8008802 <firstLightTurn+0xce>
		SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 80087a4:	200d      	movs	r0, #13
 80087a6:	f000 fcb3 	bl	8009110 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=5\n"); // Print message to ESP
 80087aa:	491f      	ldr	r1, [pc, #124]	; (8008828 <firstLightTurn+0xf4>)
 80087ac:	4818      	ldr	r0, [pc, #96]	; (8008810 <firstLightTurn+0xdc>)
 80087ae:	f001 fbd7 	bl	8009f60 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 80087b2:	4b18      	ldr	r3, [pc, #96]	; (8008814 <firstLightTurn+0xe0>)
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	2b05      	cmp	r3, #5
 80087b8:	d11c      	bne.n	80087f4 <firstLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 80087ba:	4817      	ldr	r0, [pc, #92]	; (8008818 <firstLightTurn+0xe4>)
 80087bc:	f7f9 f8d6 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80087c0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80087c4:	9301      	str	r3, [sp, #4]
 80087c6:	2305      	movs	r3, #5
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	2315      	movs	r3, #21
 80087cc:	2221      	movs	r2, #33	; 0x21
 80087ce:	2141      	movs	r1, #65	; 0x41
 80087d0:	20c8      	movs	r0, #200	; 0xc8
 80087d2:	f7f9 f87a 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 80087d6:	4915      	ldr	r1, [pc, #84]	; (800882c <firstLightTurn+0xf8>)
 80087d8:	4811      	ldr	r0, [pc, #68]	; (8008820 <firstLightTurn+0xec>)
 80087da:	f009 fbb5 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80087de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80087e2:	9301      	str	r3, [sp, #4]
 80087e4:	2300      	movs	r3, #0
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	2300      	movs	r3, #0
 80087ea:	2243      	movs	r2, #67	; 0x43
 80087ec:	21cb      	movs	r1, #203	; 0xcb
 80087ee:	480c      	ldr	r0, [pc, #48]	; (8008820 <firstLightTurn+0xec>)
 80087f0:	f7f9 fad6 	bl	8001da0 <EF_PutString>
		LightsButtonState[0] = 1;
 80087f4:	4b0b      	ldr	r3, [pc, #44]	; (8008824 <firstLightTurn+0xf0>)
 80087f6:	2201      	movs	r2, #1
 80087f8:	701a      	strb	r2, [r3, #0]
		EEPROM_LightStateUpdate(1, 1);
 80087fa:	2101      	movs	r1, #1
 80087fc:	2001      	movs	r0, #1
 80087fe:	f7fa fa52 	bl	8002ca6 <EEPROM_LightStateUpdate>
}
 8008802:	bf00      	nop
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	080161d8 	.word	0x080161d8
 8008810:	200006bc 	.word	0x200006bc
 8008814:	20000290 	.word	0x20000290
 8008818:	0802774c 	.word	0x0802774c
 800881c:	08016158 	.word	0x08016158
 8008820:	200002c0 	.word	0x200002c0
 8008824:	200002ac 	.word	0x200002ac
 8008828:	080161e4 	.word	0x080161e4
 800882c:	0801615c 	.word	0x0801615c

08008830 <secondLightTurn>:
void secondLightTurn(uint8_t NewState)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af02      	add	r7, sp, #8
 8008836:	4603      	mov	r3, r0
 8008838:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 800883a:	79fb      	ldrb	r3, [r7, #7]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d12f      	bne.n	80088a0 <secondLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8008840:	2010      	movs	r0, #16
 8008842:	f000 fc65 	bl	8009110 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=6\n"); // Print message to ESP
 8008846:	4930      	ldr	r1, [pc, #192]	; (8008908 <secondLightTurn+0xd8>)
 8008848:	4830      	ldr	r0, [pc, #192]	; (800890c <secondLightTurn+0xdc>)
 800884a:	f001 fb89 	bl	8009f60 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 800884e:	4b30      	ldr	r3, [pc, #192]	; (8008910 <secondLightTurn+0xe0>)
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	2b05      	cmp	r3, #5
 8008854:	d11c      	bne.n	8008890 <secondLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008856:	482f      	ldr	r0, [pc, #188]	; (8008914 <secondLightTurn+0xe4>)
 8008858:	f7f9 f888 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800885c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008860:	9301      	str	r3, [sp, #4]
 8008862:	2305      	movs	r3, #5
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	2315      	movs	r3, #21
 8008868:	2221      	movs	r2, #33	; 0x21
 800886a:	215f      	movs	r1, #95	; 0x5f
 800886c:	20c8      	movs	r0, #200	; 0xc8
 800886e:	f7f9 f82c 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008872:	4929      	ldr	r1, [pc, #164]	; (8008918 <secondLightTurn+0xe8>)
 8008874:	4829      	ldr	r0, [pc, #164]	; (800891c <secondLightTurn+0xec>)
 8008876:	f009 fb67 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800887a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800887e:	9301      	str	r3, [sp, #4]
 8008880:	2300      	movs	r3, #0
 8008882:	9300      	str	r3, [sp, #0]
 8008884:	2300      	movs	r3, #0
 8008886:	2261      	movs	r2, #97	; 0x61
 8008888:	21cb      	movs	r1, #203	; 0xcb
 800888a:	4824      	ldr	r0, [pc, #144]	; (800891c <secondLightTurn+0xec>)
 800888c:	f7f9 fa88 	bl	8001da0 <EF_PutString>
		}
		LightsButtonState[1] = 0;
 8008890:	4b23      	ldr	r3, [pc, #140]	; (8008920 <secondLightTurn+0xf0>)
 8008892:	2200      	movs	r2, #0
 8008894:	705a      	strb	r2, [r3, #1]
		EEPROM_LightStateUpdate(2, 0);
 8008896:	2100      	movs	r1, #0
 8008898:	2002      	movs	r0, #2
 800889a:	f7fa fa04 	bl	8002ca6 <EEPROM_LightStateUpdate>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[1] = 1;
		EEPROM_LightStateUpdate(2, 1);
	}
}
 800889e:	e02e      	b.n	80088fe <secondLightTurn+0xce>
		SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 80088a0:	200f      	movs	r0, #15
 80088a2:	f000 fc35 	bl	8009110 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=6\n"); // Print message to ESP
 80088a6:	491f      	ldr	r1, [pc, #124]	; (8008924 <secondLightTurn+0xf4>)
 80088a8:	4818      	ldr	r0, [pc, #96]	; (800890c <secondLightTurn+0xdc>)
 80088aa:	f001 fb59 	bl	8009f60 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 80088ae:	4b18      	ldr	r3, [pc, #96]	; (8008910 <secondLightTurn+0xe0>)
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	2b05      	cmp	r3, #5
 80088b4:	d11c      	bne.n	80088f0 <secondLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 80088b6:	4817      	ldr	r0, [pc, #92]	; (8008914 <secondLightTurn+0xe4>)
 80088b8:	f7f9 f858 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80088bc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80088c0:	9301      	str	r3, [sp, #4]
 80088c2:	2305      	movs	r3, #5
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	2315      	movs	r3, #21
 80088c8:	2221      	movs	r2, #33	; 0x21
 80088ca:	215f      	movs	r1, #95	; 0x5f
 80088cc:	20c8      	movs	r0, #200	; 0xc8
 80088ce:	f7f8 fffc 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 80088d2:	4915      	ldr	r1, [pc, #84]	; (8008928 <secondLightTurn+0xf8>)
 80088d4:	4811      	ldr	r0, [pc, #68]	; (800891c <secondLightTurn+0xec>)
 80088d6:	f009 fb37 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80088da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80088de:	9301      	str	r3, [sp, #4]
 80088e0:	2300      	movs	r3, #0
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	2300      	movs	r3, #0
 80088e6:	2261      	movs	r2, #97	; 0x61
 80088e8:	21cb      	movs	r1, #203	; 0xcb
 80088ea:	480c      	ldr	r0, [pc, #48]	; (800891c <secondLightTurn+0xec>)
 80088ec:	f7f9 fa58 	bl	8001da0 <EF_PutString>
		LightsButtonState[1] = 1;
 80088f0:	4b0b      	ldr	r3, [pc, #44]	; (8008920 <secondLightTurn+0xf0>)
 80088f2:	2201      	movs	r2, #1
 80088f4:	705a      	strb	r2, [r3, #1]
		EEPROM_LightStateUpdate(2, 1);
 80088f6:	2101      	movs	r1, #1
 80088f8:	2002      	movs	r0, #2
 80088fa:	f7fa f9d4 	bl	8002ca6 <EEPROM_LightStateUpdate>
}
 80088fe:	bf00      	nop
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	080161f0 	.word	0x080161f0
 800890c:	200006bc 	.word	0x200006bc
 8008910:	20000290 	.word	0x20000290
 8008914:	0802774c 	.word	0x0802774c
 8008918:	08016158 	.word	0x08016158
 800891c:	200002c0 	.word	0x200002c0
 8008920:	200002ac 	.word	0x200002ac
 8008924:	080161fc 	.word	0x080161fc
 8008928:	0801615c 	.word	0x0801615c

0800892c <thirdLightTurn>:
void thirdLightTurn(uint8_t NewState)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af02      	add	r7, sp, #8
 8008932:	4603      	mov	r3, r0
 8008934:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008936:	79fb      	ldrb	r3, [r7, #7]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d12f      	bne.n	800899c <thirdLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 800893c:	2012      	movs	r0, #18
 800893e:	f000 fbe7 	bl	8009110 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=7\n"); // Print message to ESP
 8008942:	4930      	ldr	r1, [pc, #192]	; (8008a04 <thirdLightTurn+0xd8>)
 8008944:	4830      	ldr	r0, [pc, #192]	; (8008a08 <thirdLightTurn+0xdc>)
 8008946:	f001 fb0b 	bl	8009f60 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 800894a:	4b30      	ldr	r3, [pc, #192]	; (8008a0c <thirdLightTurn+0xe0>)
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	2b05      	cmp	r3, #5
 8008950:	d11c      	bne.n	800898c <thirdLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008952:	482f      	ldr	r0, [pc, #188]	; (8008a10 <thirdLightTurn+0xe4>)
 8008954:	f7f9 f80a 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008958:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800895c:	9301      	str	r3, [sp, #4]
 800895e:	2305      	movs	r3, #5
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	2315      	movs	r3, #21
 8008964:	2221      	movs	r2, #33	; 0x21
 8008966:	217d      	movs	r1, #125	; 0x7d
 8008968:	20c8      	movs	r0, #200	; 0xc8
 800896a:	f7f8 ffae 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 800896e:	4929      	ldr	r1, [pc, #164]	; (8008a14 <thirdLightTurn+0xe8>)
 8008970:	4829      	ldr	r0, [pc, #164]	; (8008a18 <thirdLightTurn+0xec>)
 8008972:	f009 fae9 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008976:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800897a:	9301      	str	r3, [sp, #4]
 800897c:	2300      	movs	r3, #0
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	2300      	movs	r3, #0
 8008982:	227f      	movs	r2, #127	; 0x7f
 8008984:	21cb      	movs	r1, #203	; 0xcb
 8008986:	4824      	ldr	r0, [pc, #144]	; (8008a18 <thirdLightTurn+0xec>)
 8008988:	f7f9 fa0a 	bl	8001da0 <EF_PutString>
		}
		LightsButtonState[2] = 0;
 800898c:	4b23      	ldr	r3, [pc, #140]	; (8008a1c <thirdLightTurn+0xf0>)
 800898e:	2200      	movs	r2, #0
 8008990:	709a      	strb	r2, [r3, #2]
		EEPROM_LightStateUpdate(3, 0);
 8008992:	2100      	movs	r1, #0
 8008994:	2003      	movs	r0, #3
 8008996:	f7fa f986 	bl	8002ca6 <EEPROM_LightStateUpdate>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[2] = 1;
		EEPROM_LightStateUpdate(3, 1);
	}
}
 800899a:	e02e      	b.n	80089fa <thirdLightTurn+0xce>
		SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 800899c:	2011      	movs	r0, #17
 800899e:	f000 fbb7 	bl	8009110 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=7\n"); // Print message to ESP
 80089a2:	491f      	ldr	r1, [pc, #124]	; (8008a20 <thirdLightTurn+0xf4>)
 80089a4:	4818      	ldr	r0, [pc, #96]	; (8008a08 <thirdLightTurn+0xdc>)
 80089a6:	f001 fadb 	bl	8009f60 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 80089aa:	4b18      	ldr	r3, [pc, #96]	; (8008a0c <thirdLightTurn+0xe0>)
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	2b05      	cmp	r3, #5
 80089b0:	d11c      	bne.n	80089ec <thirdLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 80089b2:	4817      	ldr	r0, [pc, #92]	; (8008a10 <thirdLightTurn+0xe4>)
 80089b4:	f7f8 ffda 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80089b8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80089bc:	9301      	str	r3, [sp, #4]
 80089be:	2305      	movs	r3, #5
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	2315      	movs	r3, #21
 80089c4:	2221      	movs	r2, #33	; 0x21
 80089c6:	217d      	movs	r1, #125	; 0x7d
 80089c8:	20c8      	movs	r0, #200	; 0xc8
 80089ca:	f7f8 ff7e 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 80089ce:	4915      	ldr	r1, [pc, #84]	; (8008a24 <thirdLightTurn+0xf8>)
 80089d0:	4811      	ldr	r0, [pc, #68]	; (8008a18 <thirdLightTurn+0xec>)
 80089d2:	f009 fab9 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80089d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80089da:	9301      	str	r3, [sp, #4]
 80089dc:	2300      	movs	r3, #0
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	2300      	movs	r3, #0
 80089e2:	227f      	movs	r2, #127	; 0x7f
 80089e4:	21cb      	movs	r1, #203	; 0xcb
 80089e6:	480c      	ldr	r0, [pc, #48]	; (8008a18 <thirdLightTurn+0xec>)
 80089e8:	f7f9 f9da 	bl	8001da0 <EF_PutString>
		LightsButtonState[2] = 1;
 80089ec:	4b0b      	ldr	r3, [pc, #44]	; (8008a1c <thirdLightTurn+0xf0>)
 80089ee:	2201      	movs	r2, #1
 80089f0:	709a      	strb	r2, [r3, #2]
		EEPROM_LightStateUpdate(3, 1);
 80089f2:	2101      	movs	r1, #1
 80089f4:	2003      	movs	r0, #3
 80089f6:	f7fa f956 	bl	8002ca6 <EEPROM_LightStateUpdate>
}
 80089fa:	bf00      	nop
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	08016208 	.word	0x08016208
 8008a08:	200006bc 	.word	0x200006bc
 8008a0c:	20000290 	.word	0x20000290
 8008a10:	0802774c 	.word	0x0802774c
 8008a14:	08016158 	.word	0x08016158
 8008a18:	200002c0 	.word	0x200002c0
 8008a1c:	200002ac 	.word	0x200002ac
 8008a20:	08016214 	.word	0x08016214
 8008a24:	0801615c 	.word	0x0801615c

08008a28 <fourthLightTurn>:
void fourthLightTurn(uint8_t NewState)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af02      	add	r7, sp, #8
 8008a2e:	4603      	mov	r3, r0
 8008a30:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008a32:	79fb      	ldrb	r3, [r7, #7]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d12f      	bne.n	8008a98 <fourthLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 8008a38:	2014      	movs	r0, #20
 8008a3a:	f000 fb69 	bl	8009110 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=8\n"); // Print message to ESP
 8008a3e:	4930      	ldr	r1, [pc, #192]	; (8008b00 <fourthLightTurn+0xd8>)
 8008a40:	4830      	ldr	r0, [pc, #192]	; (8008b04 <fourthLightTurn+0xdc>)
 8008a42:	f001 fa8d 	bl	8009f60 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008a46:	4b30      	ldr	r3, [pc, #192]	; (8008b08 <fourthLightTurn+0xe0>)
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	2b05      	cmp	r3, #5
 8008a4c:	d11c      	bne.n	8008a88 <fourthLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008a4e:	482f      	ldr	r0, [pc, #188]	; (8008b0c <fourthLightTurn+0xe4>)
 8008a50:	f7f8 ff8c 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008a54:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008a58:	9301      	str	r3, [sp, #4]
 8008a5a:	2305      	movs	r3, #5
 8008a5c:	9300      	str	r3, [sp, #0]
 8008a5e:	2315      	movs	r3, #21
 8008a60:	2221      	movs	r2, #33	; 0x21
 8008a62:	219b      	movs	r1, #155	; 0x9b
 8008a64:	20c8      	movs	r0, #200	; 0xc8
 8008a66:	f7f8 ff30 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008a6a:	4929      	ldr	r1, [pc, #164]	; (8008b10 <fourthLightTurn+0xe8>)
 8008a6c:	4829      	ldr	r0, [pc, #164]	; (8008b14 <fourthLightTurn+0xec>)
 8008a6e:	f009 fa6b 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008a72:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008a76:	9301      	str	r3, [sp, #4]
 8008a78:	2300      	movs	r3, #0
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	229d      	movs	r2, #157	; 0x9d
 8008a80:	21cb      	movs	r1, #203	; 0xcb
 8008a82:	4824      	ldr	r0, [pc, #144]	; (8008b14 <fourthLightTurn+0xec>)
 8008a84:	f7f9 f98c 	bl	8001da0 <EF_PutString>
		}
		LightsButtonState[3] = 0;
 8008a88:	4b23      	ldr	r3, [pc, #140]	; (8008b18 <fourthLightTurn+0xf0>)
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	70da      	strb	r2, [r3, #3]
		EEPROM_LightStateUpdate(4, 0);
 8008a8e:	2100      	movs	r1, #0
 8008a90:	2004      	movs	r0, #4
 8008a92:	f7fa f908 	bl	8002ca6 <EEPROM_LightStateUpdate>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[3] = 1;
		EEPROM_LightStateUpdate(4, 1);
	}
}
 8008a96:	e02e      	b.n	8008af6 <fourthLightTurn+0xce>
		SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 8008a98:	2013      	movs	r0, #19
 8008a9a:	f000 fb39 	bl	8009110 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=8\n"); // Print message to ESP
 8008a9e:	491f      	ldr	r1, [pc, #124]	; (8008b1c <fourthLightTurn+0xf4>)
 8008aa0:	4818      	ldr	r0, [pc, #96]	; (8008b04 <fourthLightTurn+0xdc>)
 8008aa2:	f001 fa5d 	bl	8009f60 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008aa6:	4b18      	ldr	r3, [pc, #96]	; (8008b08 <fourthLightTurn+0xe0>)
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	2b05      	cmp	r3, #5
 8008aac:	d11c      	bne.n	8008ae8 <fourthLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 8008aae:	4817      	ldr	r0, [pc, #92]	; (8008b0c <fourthLightTurn+0xe4>)
 8008ab0:	f7f8 ff5c 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008ab4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008ab8:	9301      	str	r3, [sp, #4]
 8008aba:	2305      	movs	r3, #5
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	2315      	movs	r3, #21
 8008ac0:	2221      	movs	r2, #33	; 0x21
 8008ac2:	219b      	movs	r1, #155	; 0x9b
 8008ac4:	20c8      	movs	r0, #200	; 0xc8
 8008ac6:	f7f8 ff00 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008aca:	4915      	ldr	r1, [pc, #84]	; (8008b20 <fourthLightTurn+0xf8>)
 8008acc:	4811      	ldr	r0, [pc, #68]	; (8008b14 <fourthLightTurn+0xec>)
 8008ace:	f009 fa3b 	bl	8011f48 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008ad2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008ad6:	9301      	str	r3, [sp, #4]
 8008ad8:	2300      	movs	r3, #0
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	2300      	movs	r3, #0
 8008ade:	229d      	movs	r2, #157	; 0x9d
 8008ae0:	21cb      	movs	r1, #203	; 0xcb
 8008ae2:	480c      	ldr	r0, [pc, #48]	; (8008b14 <fourthLightTurn+0xec>)
 8008ae4:	f7f9 f95c 	bl	8001da0 <EF_PutString>
		LightsButtonState[3] = 1;
 8008ae8:	4b0b      	ldr	r3, [pc, #44]	; (8008b18 <fourthLightTurn+0xf0>)
 8008aea:	2201      	movs	r2, #1
 8008aec:	70da      	strb	r2, [r3, #3]
		EEPROM_LightStateUpdate(4, 1);
 8008aee:	2101      	movs	r1, #1
 8008af0:	2004      	movs	r0, #4
 8008af2:	f7fa f8d8 	bl	8002ca6 <EEPROM_LightStateUpdate>
}
 8008af6:	bf00      	nop
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	08016220 	.word	0x08016220
 8008b04:	200006bc 	.word	0x200006bc
 8008b08:	20000290 	.word	0x20000290
 8008b0c:	0802774c 	.word	0x0802774c
 8008b10:	08016158 	.word	0x08016158
 8008b14:	200002c0 	.word	0x200002c0
 8008b18:	200002ac 	.word	0x200002ac
 8008b1c:	0801622c 	.word	0x0801622c
 8008b20:	0801615c 	.word	0x0801615c

08008b24 <UART_ParseLine>:
 * 		DIST=%lu\n				// Current distance to water
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b094      	sub	sp, #80	; 0x50
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8008b2c:	f107 0308 	add.w	r3, r7, #8
 8008b30:	4619      	mov	r1, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f001 f9e3 	bl	8009efe <UARTDMA_GetLineFromReceiveBuffer>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d15f      	bne.n	8008bfe <UART_ParseLine+0xda>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 8008b3e:	f107 0308 	add.w	r3, r7, #8
 8008b42:	4931      	ldr	r1, [pc, #196]	; (8008c08 <UART_ParseLine+0xe4>)
 8008b44:	4618      	mov	r0, r3
 8008b46:	f00a f857 	bl	8012bf8 <strtok>
 8008b4a:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 8008b4c:	492f      	ldr	r1, [pc, #188]	; (8008c0c <UART_ParseLine+0xe8>)
 8008b4e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008b50:	f7f7 fb46 	bl	80001e0 <strcmp>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d102      	bne.n	8008b60 <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 8008b5a:	f000 f869 	bl	8008c30 <UART_ParseLED>
	  {
		  UART_ParseAnswDist();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 8008b5e:	e04e      	b.n	8008bfe <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 8008b60:	492b      	ldr	r1, [pc, #172]	; (8008c10 <UART_ParseLine+0xec>)
 8008b62:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008b64:	f7f7 fb3c 	bl	80001e0 <strcmp>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d102      	bne.n	8008b74 <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 8008b6e:	f000 f8ad 	bl	8008ccc <UART_ParseAnswStatus>
}
 8008b72:	e044      	b.n	8008bfe <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 8008b74:	4927      	ldr	r1, [pc, #156]	; (8008c14 <UART_ParseLine+0xf0>)
 8008b76:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008b78:	f7f7 fb32 	bl	80001e0 <strcmp>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d102      	bne.n	8008b88 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 8008b82:	f000 f8ab 	bl	8008cdc <UART_ParseAnswTemp>
}
 8008b86:	e03a      	b.n	8008bfe <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 8008b88:	4923      	ldr	r1, [pc, #140]	; (8008c18 <UART_ParseLine+0xf4>)
 8008b8a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008b8c:	f7f7 fb28 	bl	80001e0 <strcmp>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d102      	bne.n	8008b9c <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 8008b96:	f000 f953 	bl	8008e40 <UART_ParseAnswPres>
}
 8008b9a:	e030      	b.n	8008bfe <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 8008b9c:	491f      	ldr	r1, [pc, #124]	; (8008c1c <UART_ParseLine+0xf8>)
 8008b9e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008ba0:	f7f7 fb1e 	bl	80001e0 <strcmp>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d102      	bne.n	8008bb0 <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 8008baa:	f000 f9d7 	bl	8008f5c <UART_ParseAnswChangeRelayState>
}
 8008bae:	e026      	b.n	8008bfe <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 8008bb0:	491b      	ldr	r1, [pc, #108]	; (8008c20 <UART_ParseLine+0xfc>)
 8008bb2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008bb4:	f7f7 fb14 	bl	80001e0 <strcmp>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d102      	bne.n	8008bc4 <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 8008bbe:	f000 f9d4 	bl	8008f6a <UART_ParseAnswChangeLightState>
}
 8008bc2:	e01c      	b.n	8008bfe <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 8008bc4:	4917      	ldr	r1, [pc, #92]	; (8008c24 <UART_ParseLine+0x100>)
 8008bc6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008bc8:	f7f7 fb0a 	bl	80001e0 <strcmp>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d102      	bne.n	8008bd8 <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 8008bd2:	f000 f9d1 	bl	8008f78 <UART_ParseAnswRelayStateStatus>
}
 8008bd6:	e012      	b.n	8008bfe <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 8008bd8:	4913      	ldr	r1, [pc, #76]	; (8008c28 <UART_ParseLine+0x104>)
 8008bda:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008bdc:	f7f7 fb00 	bl	80001e0 <strcmp>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d102      	bne.n	8008bec <UART_ParseLine+0xc8>
		  UART_ParseAnswLightsStateStatus();
 8008be6:	f000 fa2d 	bl	8009044 <UART_ParseAnswLightsStateStatus>
}
 8008bea:	e008      	b.n	8008bfe <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "DIST") == 0) // Answear about current Switch Status
 8008bec:	490f      	ldr	r1, [pc, #60]	; (8008c2c <UART_ParseLine+0x108>)
 8008bee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008bf0:	f7f7 faf6 	bl	80001e0 <strcmp>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d101      	bne.n	8008bfe <UART_ParseLine+0xda>
		  UART_ParseAnswDist();
 8008bfa:	f000 f96d 	bl	8008ed8 <UART_ParseAnswDist>
}
 8008bfe:	bf00      	nop
 8008c00:	3750      	adds	r7, #80	; 0x50
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	08016238 	.word	0x08016238
 8008c0c:	0801623c 	.word	0x0801623c
 8008c10:	08016240 	.word	0x08016240
 8008c14:	08016248 	.word	0x08016248
 8008c18:	08016250 	.word	0x08016250
 8008c1c:	08016258 	.word	0x08016258
 8008c20:	08016264 	.word	0x08016264
 8008c24:	08016270 	.word	0x08016270
 8008c28:	0801627c 	.word	0x0801627c
 8008c2c:	08016288 	.word	0x08016288

08008c30 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8008c36:	491f      	ldr	r1, [pc, #124]	; (8008cb4 <UART_ParseLED+0x84>)
 8008c38:	2000      	movs	r0, #0
 8008c3a:	f009 ffdd 	bl	8012bf8 <strtok>
 8008c3e:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d031      	beq.n	8008cac <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	2b2f      	cmp	r3, #47	; 0x2f
 8008c4e:	d903      	bls.n	8008c58 <UART_ParseLED+0x28>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	2b39      	cmp	r3, #57	; 0x39
 8008c56:	d904      	bls.n	8008c62 <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 8008c58:	4917      	ldr	r1, [pc, #92]	; (8008cb8 <UART_ParseLED+0x88>)
 8008c5a:	4818      	ldr	r0, [pc, #96]	; (8008cbc <UART_ParseLED+0x8c>)
 8008c5c:	f001 f980 	bl	8009f60 <UARTDMA_Print>
			return;	// And exit parsing
 8008c60:	e024      	b.n	8008cac <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f008 fab9 	bl	80111da <atoi>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d10a      	bne.n	8008c88 <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8008c72:	2200      	movs	r2, #0
 8008c74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008c78:	4811      	ldr	r0, [pc, #68]	; (8008cc0 <UART_ParseLED+0x90>)
 8008c7a:	f002 fc05 	bl	800b488 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 8008c7e:	4911      	ldr	r1, [pc, #68]	; (8008cc4 <UART_ParseLED+0x94>)
 8008c80:	480e      	ldr	r0, [pc, #56]	; (8008cbc <UART_ParseLED+0x8c>)
 8008c82:	f001 f96d 	bl	8009f60 <UARTDMA_Print>
 8008c86:	e011      	b.n	8008cac <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 8008c88:	78fb      	ldrb	r3, [r7, #3]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d10a      	bne.n	8008ca4 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008c94:	480a      	ldr	r0, [pc, #40]	; (8008cc0 <UART_ParseLED+0x90>)
 8008c96:	f002 fbf7 	bl	800b488 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 8008c9a:	490b      	ldr	r1, [pc, #44]	; (8008cc8 <UART_ParseLED+0x98>)
 8008c9c:	4807      	ldr	r0, [pc, #28]	; (8008cbc <UART_ParseLED+0x8c>)
 8008c9e:	f001 f95f 	bl	8009f60 <UARTDMA_Print>
 8008ca2:	e003      	b.n	8008cac <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 8008ca4:	4904      	ldr	r1, [pc, #16]	; (8008cb8 <UART_ParseLED+0x88>)
 8008ca6:	4805      	ldr	r0, [pc, #20]	; (8008cbc <UART_ParseLED+0x8c>)
 8008ca8:	f001 f95a 	bl	8009f60 <UARTDMA_Print>
		}
	}
}
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	08016290 	.word	0x08016290
 8008cb8:	08016294 	.word	0x08016294
 8008cbc:	200004f0 	.word	0x200004f0
 8008cc0:	40020800 	.word	0x40020800
 8008cc4:	080162a4 	.word	0x080162a4
 8008cc8:	080162b0 	.word	0x080162b0

08008ccc <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 8008ccc:	b480      	push	{r7}
 8008cce:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 8008cd0:	bf00      	nop
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
	...

08008cdc <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 8008ce6:	494e      	ldr	r1, [pc, #312]	; (8008e20 <UART_ParseAnswTemp+0x144>)
 8008ce8:	2000      	movs	r0, #0
 8008cea:	f009 ff85 	bl	8012bf8 <strtok>
 8008cee:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f000 808f 	beq.w	8008e18 <UART_ParseAnswTemp+0x13c>
	{
			NrCzujnika = atoi(ParsePointer);
 8008cfa:	68b8      	ldr	r0, [r7, #8]
 8008cfc:	f008 fa6d 	bl	80111da <atoi>
 8008d00:	4603      	mov	r3, r0
 8008d02:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d010      	beq.n	8008d2e <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8008d0c:	4944      	ldr	r1, [pc, #272]	; (8008e20 <UART_ParseAnswTemp+0x144>)
 8008d0e:	2000      	movs	r0, #0
 8008d10:	f009 ff72 	bl	8012bf8 <strtok>
 8008d14:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f008 fa5c 	bl	80111d4 <atof>
 8008d1c:	ec53 2b10 	vmov	r2, r3, d0
 8008d20:	4610      	mov	r0, r2
 8008d22:	4619      	mov	r1, r3
 8008d24:	f7f7 ff78 	bl	8000c18 <__aeabi_d2f>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	4a3e      	ldr	r2, [pc, #248]	; (8008e24 <UART_ParseAnswTemp+0x148>)
 8008d2c:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 8008d2e:	4b3e      	ldr	r3, [pc, #248]	; (8008e28 <UART_ParseAnswTemp+0x14c>)
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d170      	bne.n	8008e18 <UART_ParseAnswTemp+0x13c>
			{
				if(NrCzujnika == 1)
 8008d36:	7bfb      	ldrb	r3, [r7, #15]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d120      	bne.n	8008d7e <UART_ParseAnswTemp+0xa2>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 8008d3c:	483b      	ldr	r0, [pc, #236]	; (8008e2c <UART_ParseAnswTemp+0x150>)
 8008d3e:	f7f8 fe15 	bl	800196c <EF_SetFont>
						sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 8008d42:	4b38      	ldr	r3, [pc, #224]	; (8008e24 <UART_ParseAnswTemp+0x148>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7f7 fc16 	bl	8000578 <__aeabi_f2d>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4937      	ldr	r1, [pc, #220]	; (8008e30 <UART_ParseAnswTemp+0x154>)
 8008d52:	4838      	ldr	r0, [pc, #224]	; (8008e34 <UART_ParseAnswTemp+0x158>)
 8008d54:	f009 f8f8 	bl	8011f48 <siprintf>
						EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008d58:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008d5c:	9301      	str	r3, [sp, #4]
 8008d5e:	2301      	movs	r3, #1
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	2300      	movs	r3, #0
 8008d64:	2250      	movs	r2, #80	; 0x50
 8008d66:	2114      	movs	r1, #20
 8008d68:	4832      	ldr	r0, [pc, #200]	; (8008e34 <UART_ParseAnswTemp+0x158>)
 8008d6a:	f7f9 f819 	bl	8001da0 <EF_PutString>
						ESP_SendCurrentTempOutside(CTemp);
 8008d6e:	4b2d      	ldr	r3, [pc, #180]	; (8008e24 <UART_ParseAnswTemp+0x148>)
 8008d70:	edd3 7a00 	vldr	s15, [r3]
 8008d74:	eeb0 0a67 	vmov.f32	s0, s15
 8008d78:	f7f8 fa3e 	bl	80011f8 <ESP_SendCurrentTempOutside>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 8008d7c:	e04c      	b.n	8008e18 <UART_ParseAnswTemp+0x13c>
				else if(NrCzujnika == 2)
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d149      	bne.n	8008e18 <UART_ParseAnswTemp+0x13c>
						if (CTemp == 0.0) // Error in connection to ds18b20 - TODO! Send information about error in connection
 8008d84:	4b27      	ldr	r3, [pc, #156]	; (8008e24 <UART_ParseAnswTemp+0x148>)
 8008d86:	edd3 7a00 	vldr	s15, [r3]
 8008d8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d92:	d11d      	bne.n	8008dd0 <UART_ParseAnswTemp+0xf4>
							CTemp = LCTemp;
 8008d94:	4b28      	ldr	r3, [pc, #160]	; (8008e38 <UART_ParseAnswTemp+0x15c>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a22      	ldr	r2, [pc, #136]	; (8008e24 <UART_ParseAnswTemp+0x148>)
 8008d9a:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 8008d9c:	4823      	ldr	r0, [pc, #140]	; (8008e2c <UART_ParseAnswTemp+0x150>)
 8008d9e:	f7f8 fde5 	bl	800196c <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8008da2:	4b20      	ldr	r3, [pc, #128]	; (8008e24 <UART_ParseAnswTemp+0x148>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7f7 fbe6 	bl	8000578 <__aeabi_f2d>
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	4922      	ldr	r1, [pc, #136]	; (8008e3c <UART_ParseAnswTemp+0x160>)
 8008db2:	4820      	ldr	r0, [pc, #128]	; (8008e34 <UART_ParseAnswTemp+0x158>)
 8008db4:	f009 f8c8 	bl	8011f48 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008db8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008dbc:	9301      	str	r3, [sp, #4]
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	226e      	movs	r2, #110	; 0x6e
 8008dc6:	2114      	movs	r1, #20
 8008dc8:	481a      	ldr	r0, [pc, #104]	; (8008e34 <UART_ParseAnswTemp+0x158>)
 8008dca:	f7f8 ffe9 	bl	8001da0 <EF_PutString>
	}
 8008dce:	e023      	b.n	8008e18 <UART_ParseAnswTemp+0x13c>
							EF_SetFont(&arialBlack_20ptFontInfo);
 8008dd0:	4816      	ldr	r0, [pc, #88]	; (8008e2c <UART_ParseAnswTemp+0x150>)
 8008dd2:	f7f8 fdcb 	bl	800196c <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8008dd6:	4b13      	ldr	r3, [pc, #76]	; (8008e24 <UART_ParseAnswTemp+0x148>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7f7 fbcc 	bl	8000578 <__aeabi_f2d>
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	4915      	ldr	r1, [pc, #84]	; (8008e3c <UART_ParseAnswTemp+0x160>)
 8008de6:	4813      	ldr	r0, [pc, #76]	; (8008e34 <UART_ParseAnswTemp+0x158>)
 8008de8:	f009 f8ae 	bl	8011f48 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008dec:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008df0:	9301      	str	r3, [sp, #4]
 8008df2:	2301      	movs	r3, #1
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	2300      	movs	r3, #0
 8008df8:	226e      	movs	r2, #110	; 0x6e
 8008dfa:	2114      	movs	r1, #20
 8008dfc:	480d      	ldr	r0, [pc, #52]	; (8008e34 <UART_ParseAnswTemp+0x158>)
 8008dfe:	f7f8 ffcf 	bl	8001da0 <EF_PutString>
							LCTemp = CTemp;
 8008e02:	4b08      	ldr	r3, [pc, #32]	; (8008e24 <UART_ParseAnswTemp+0x148>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a0c      	ldr	r2, [pc, #48]	; (8008e38 <UART_ParseAnswTemp+0x15c>)
 8008e08:	6013      	str	r3, [r2, #0]
							ESP_SendCurrentTempInside(CTemp);
 8008e0a:	4b06      	ldr	r3, [pc, #24]	; (8008e24 <UART_ParseAnswTemp+0x148>)
 8008e0c:	edd3 7a00 	vldr	s15, [r3]
 8008e10:	eeb0 0a67 	vmov.f32	s0, s15
 8008e14:	f7f8 f9d4 	bl	80011c0 <ESP_SendCurrentTempInside>
	}
 8008e18:	bf00      	nop
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	08016290 	.word	0x08016290
 8008e24:	20000294 	.word	0x20000294
 8008e28:	20000290 	.word	0x20000290
 8008e2c:	080296c4 	.word	0x080296c4
 8008e30:	080162bc 	.word	0x080162bc
 8008e34:	200002c0 	.word	0x200002c0
 8008e38:	20000298 	.word	0x20000298
 8008e3c:	080162d0 	.word	0x080162d0

08008e40 <UART_ParseAnswPres>:

//
// Parsing information about current pressure
// "APRES=1014.200\n"
void UART_ParseAnswPres()
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8008e46:	491e      	ldr	r1, [pc, #120]	; (8008ec0 <UART_ParseAnswPres+0x80>)
 8008e48:	2000      	movs	r0, #0
 8008e4a:	f009 fed5 	bl	8012bf8 <strtok>
 8008e4e:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d02f      	beq.n	8008eb8 <UART_ParseAnswPres+0x78>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f008 f9bb 	bl	80111d4 <atof>
 8008e5e:	ec53 2b10 	vmov	r2, r3, d0
 8008e62:	4610      	mov	r0, r2
 8008e64:	4619      	mov	r1, r3
 8008e66:	f7f7 fed7 	bl	8000c18 <__aeabi_d2f>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	4a15      	ldr	r2, [pc, #84]	; (8008ec4 <UART_ParseAnswPres+0x84>)
 8008e6e:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8008e70:	4b15      	ldr	r3, [pc, #84]	; (8008ec8 <UART_ParseAnswPres+0x88>)
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d11f      	bne.n	8008eb8 <UART_ParseAnswPres+0x78>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8008e78:	4814      	ldr	r0, [pc, #80]	; (8008ecc <UART_ParseAnswPres+0x8c>)
 8008e7a:	f7f8 fd77 	bl	800196c <EF_SetFont>
			sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8008e7e:	4b11      	ldr	r3, [pc, #68]	; (8008ec4 <UART_ParseAnswPres+0x84>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7f7 fb78 	bl	8000578 <__aeabi_f2d>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	4910      	ldr	r1, [pc, #64]	; (8008ed0 <UART_ParseAnswPres+0x90>)
 8008e8e:	4811      	ldr	r0, [pc, #68]	; (8008ed4 <UART_ParseAnswPres+0x94>)
 8008e90:	f009 f85a 	bl	8011f48 <siprintf>
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008e94:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008e98:	9301      	str	r3, [sp, #4]
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	22aa      	movs	r2, #170	; 0xaa
 8008ea2:	2114      	movs	r1, #20
 8008ea4:	480b      	ldr	r0, [pc, #44]	; (8008ed4 <UART_ParseAnswPres+0x94>)
 8008ea6:	f7f8 ff7b 	bl	8001da0 <EF_PutString>
			ESP_SendCurrentPressure(CPres);
 8008eaa:	4b06      	ldr	r3, [pc, #24]	; (8008ec4 <UART_ParseAnswPres+0x84>)
 8008eac:	edd3 7a00 	vldr	s15, [r3]
 8008eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8008eb4:	f7f8 f9bc 	bl	8001230 <ESP_SendCurrentPressure>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8008eb8:	bf00      	nop
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	08016290 	.word	0x08016290
 8008ec4:	2000029c 	.word	0x2000029c
 8008ec8:	20000290 	.word	0x20000290
 8008ecc:	080296c4 	.word	0x080296c4
 8008ed0:	080162e4 	.word	0x080162e4
 8008ed4:	200002c0 	.word	0x200002c0

08008ed8 <UART_ParseAnswDist>:

//
// Parsing information about current distance between sensor and water - water lvl
// "DIST=320\n"
void UART_ParseAnswDist()
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8008ede:	4919      	ldr	r1, [pc, #100]	; (8008f44 <UART_ParseAnswDist+0x6c>)
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	f009 fe89 	bl	8012bf8 <strtok>
 8008ee6:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d024      	beq.n	8008f3a <UART_ParseAnswDist+0x62>
	{
		CDist2water = atoi(ParsePointer); // If there are no chars, change string to integer
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f008 f972 	bl	80111da <atoi>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	461a      	mov	r2, r3
 8008efa:	4b13      	ldr	r3, [pc, #76]	; (8008f48 <UART_ParseAnswDist+0x70>)
 8008efc:	601a      	str	r2, [r3, #0]
		// TODO: CHECK IF WATER LVL IS CORRECT

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8008efe:	4b13      	ldr	r3, [pc, #76]	; (8008f4c <UART_ParseAnswDist+0x74>)
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d119      	bne.n	8008f3a <UART_ParseAnswDist+0x62>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8008f06:	4812      	ldr	r0, [pc, #72]	; (8008f50 <UART_ParseAnswDist+0x78>)
 8008f08:	f7f8 fd30 	bl	800196c <EF_SetFont>
			sprintf((char*)Msg, "-%ldmm  ", CDist2water);
 8008f0c:	4b0e      	ldr	r3, [pc, #56]	; (8008f48 <UART_ParseAnswDist+0x70>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	461a      	mov	r2, r3
 8008f12:	4910      	ldr	r1, [pc, #64]	; (8008f54 <UART_ParseAnswDist+0x7c>)
 8008f14:	4810      	ldr	r0, [pc, #64]	; (8008f58 <UART_ParseAnswDist+0x80>)
 8008f16:	f009 f817 	bl	8011f48 <siprintf>
			EF_PutString(Msg, POZ_WODY_POZ_X+153, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008f1a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008f1e:	9301      	str	r3, [sp, #4]
 8008f20:	2301      	movs	r3, #1
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	2300      	movs	r3, #0
 8008f26:	228c      	movs	r2, #140	; 0x8c
 8008f28:	21ad      	movs	r1, #173	; 0xad
 8008f2a:	480b      	ldr	r0, [pc, #44]	; (8008f58 <UART_ParseAnswDist+0x80>)
 8008f2c:	f7f8 ff38 	bl	8001da0 <EF_PutString>
			ESP_SendCurrentWaterLvl(CDist2water);
 8008f30:	4b05      	ldr	r3, [pc, #20]	; (8008f48 <UART_ParseAnswDist+0x70>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7f8 f997 	bl	8001268 <ESP_SendCurrentWaterLvl>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8008f3a:	bf00      	nop
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	08016290 	.word	0x08016290
 8008f48:	200002a4 	.word	0x200002a4
 8008f4c:	20000290 	.word	0x20000290
 8008f50:	080296c4 	.word	0x080296c4
 8008f54:	080162fc 	.word	0x080162fc
 8008f58:	200002c0 	.word	0x200002c0

08008f5c <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	af00      	add	r7, sp, #0
	//TODO!
}
 8008f60:	bf00      	nop
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	af00      	add	r7, sp, #0
	//TODO!
}
 8008f6e:	bf00      	nop
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8008f7e:	2300      	movs	r3, #0
 8008f80:	71fb      	strb	r3, [r7, #7]
 8008f82:	e04a      	b.n	800901a <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8008f84:	4928      	ldr	r1, [pc, #160]	; (8009028 <UART_ParseAnswRelayStateStatus+0xb0>)
 8008f86:	2000      	movs	r0, #0
 8008f88:	f009 fe36 	bl	8012bf8 <strtok>
 8008f8c:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d02f      	beq.n	8008ff6 <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8008f96:	2300      	movs	r3, #0
 8008f98:	71bb      	strb	r3, [r7, #6]
 8008f9a:	e025      	b.n	8008fe8 <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8008f9c:	79bb      	ldrb	r3, [r7, #6]
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	2b2f      	cmp	r3, #47	; 0x2f
 8008fa6:	d905      	bls.n	8008fb4 <UART_ParseAnswRelayStateStatus+0x3c>
 8008fa8:	79bb      	ldrb	r3, [r7, #6]
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	4413      	add	r3, r2
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	2b39      	cmp	r3, #57	; 0x39
 8008fb2:	d90e      	bls.n	8008fd2 <UART_ParseAnswRelayStateStatus+0x5a>
 8008fb4:	79bb      	ldrb	r3, [r7, #6]
 8008fb6:	683a      	ldr	r2, [r7, #0]
 8008fb8:	4413      	add	r3, r2
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	2b2e      	cmp	r3, #46	; 0x2e
 8008fbe:	d008      	beq.n	8008fd2 <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8008fc0:	491a      	ldr	r1, [pc, #104]	; (800902c <UART_ParseAnswRelayStateStatus+0xb4>)
 8008fc2:	481b      	ldr	r0, [pc, #108]	; (8009030 <UART_ParseAnswRelayStateStatus+0xb8>)
 8008fc4:	f008 ffc0 	bl	8011f48 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8008fc8:	4919      	ldr	r1, [pc, #100]	; (8009030 <UART_ParseAnswRelayStateStatus+0xb8>)
 8008fca:	481a      	ldr	r0, [pc, #104]	; (8009034 <UART_ParseAnswRelayStateStatus+0xbc>)
 8008fcc:	f000 ffc8 	bl	8009f60 <UARTDMA_Print>
					return;	// And exit parsing
 8008fd0:	e026      	b.n	8009020 <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8008fd2:	6838      	ldr	r0, [r7, #0]
 8008fd4:	f008 f901 	bl	80111da <atoi>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	79fb      	ldrb	r3, [r7, #7]
 8008fdc:	b2d1      	uxtb	r1, r2
 8008fde:	4a16      	ldr	r2, [pc, #88]	; (8009038 <UART_ParseAnswRelayStateStatus+0xc0>)
 8008fe0:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8008fe2:	79bb      	ldrb	r3, [r7, #6]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	71bb      	strb	r3, [r7, #6]
 8008fe8:	79bb      	ldrb	r3, [r7, #6]
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	4413      	add	r3, r2
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1d3      	bne.n	8008f9c <UART_ParseAnswRelayStateStatus+0x24>
 8008ff4:	e008      	b.n	8009008 <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8008ff6:	4911      	ldr	r1, [pc, #68]	; (800903c <UART_ParseAnswRelayStateStatus+0xc4>)
 8008ff8:	480d      	ldr	r0, [pc, #52]	; (8009030 <UART_ParseAnswRelayStateStatus+0xb8>)
 8008ffa:	f008 ffa5 	bl	8011f48 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8008ffe:	490c      	ldr	r1, [pc, #48]	; (8009030 <UART_ParseAnswRelayStateStatus+0xb8>)
 8009000:	480c      	ldr	r0, [pc, #48]	; (8009034 <UART_ParseAnswRelayStateStatus+0xbc>)
 8009002:	f000 ffad 	bl	8009f60 <UARTDMA_Print>
			return;	// And exit parsing
 8009006:	e00b      	b.n	8009020 <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 8009008:	4b0d      	ldr	r3, [pc, #52]	; (8009040 <UART_ParseAnswRelayStateStatus+0xc8>)
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	2b02      	cmp	r3, #2
 800900e:	d101      	bne.n	8009014 <UART_ParseAnswRelayStateStatus+0x9c>
 8009010:	f7fc f846 	bl	80050a0 <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8009014:	79fb      	ldrb	r3, [r7, #7]
 8009016:	3301      	adds	r3, #1
 8009018:	71fb      	strb	r3, [r7, #7]
 800901a:	79fb      	ldrb	r3, [r7, #7]
 800901c:	2b03      	cmp	r3, #3
 800901e:	d9b1      	bls.n	8008f84 <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	08016290 	.word	0x08016290
 800902c:	08016308 	.word	0x08016308
 8009030:	20000300 	.word	0x20000300
 8009034:	200004f0 	.word	0x200004f0
 8009038:	200002a8 	.word	0x200002a8
 800903c:	0801631c 	.word	0x0801631c
 8009040:	20000290 	.word	0x20000290

08009044 <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 800904a:	2300      	movs	r3, #0
 800904c:	71fb      	strb	r3, [r7, #7]
 800904e:	e04a      	b.n	80090e6 <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8009050:	4928      	ldr	r1, [pc, #160]	; (80090f4 <UART_ParseAnswLightsStateStatus+0xb0>)
 8009052:	2000      	movs	r0, #0
 8009054:	f009 fdd0 	bl	8012bf8 <strtok>
 8009058:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d02f      	beq.n	80090c2 <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8009062:	2300      	movs	r3, #0
 8009064:	71bb      	strb	r3, [r7, #6]
 8009066:	e025      	b.n	80090b4 <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8009068:	79bb      	ldrb	r3, [r7, #6]
 800906a:	683a      	ldr	r2, [r7, #0]
 800906c:	4413      	add	r3, r2
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	2b2f      	cmp	r3, #47	; 0x2f
 8009072:	d905      	bls.n	8009080 <UART_ParseAnswLightsStateStatus+0x3c>
 8009074:	79bb      	ldrb	r3, [r7, #6]
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	4413      	add	r3, r2
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	2b39      	cmp	r3, #57	; 0x39
 800907e:	d90e      	bls.n	800909e <UART_ParseAnswLightsStateStatus+0x5a>
 8009080:	79bb      	ldrb	r3, [r7, #6]
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	4413      	add	r3, r2
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	2b2e      	cmp	r3, #46	; 0x2e
 800908a:	d008      	beq.n	800909e <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 800908c:	491a      	ldr	r1, [pc, #104]	; (80090f8 <UART_ParseAnswLightsStateStatus+0xb4>)
 800908e:	481b      	ldr	r0, [pc, #108]	; (80090fc <UART_ParseAnswLightsStateStatus+0xb8>)
 8009090:	f008 ff5a 	bl	8011f48 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8009094:	4919      	ldr	r1, [pc, #100]	; (80090fc <UART_ParseAnswLightsStateStatus+0xb8>)
 8009096:	481a      	ldr	r0, [pc, #104]	; (8009100 <UART_ParseAnswLightsStateStatus+0xbc>)
 8009098:	f000 ff62 	bl	8009f60 <UARTDMA_Print>
					return;	// And exit parsing
 800909c:	e026      	b.n	80090ec <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 800909e:	6838      	ldr	r0, [r7, #0]
 80090a0:	f008 f89b 	bl	80111da <atoi>
 80090a4:	4602      	mov	r2, r0
 80090a6:	79fb      	ldrb	r3, [r7, #7]
 80090a8:	b2d1      	uxtb	r1, r2
 80090aa:	4a16      	ldr	r2, [pc, #88]	; (8009104 <UART_ParseAnswLightsStateStatus+0xc0>)
 80090ac:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 80090ae:	79bb      	ldrb	r3, [r7, #6]
 80090b0:	3301      	adds	r3, #1
 80090b2:	71bb      	strb	r3, [r7, #6]
 80090b4:	79bb      	ldrb	r3, [r7, #6]
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	4413      	add	r3, r2
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1d3      	bne.n	8009068 <UART_ParseAnswLightsStateStatus+0x24>
 80090c0:	e008      	b.n	80090d4 <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 80090c2:	4911      	ldr	r1, [pc, #68]	; (8009108 <UART_ParseAnswLightsStateStatus+0xc4>)
 80090c4:	480d      	ldr	r0, [pc, #52]	; (80090fc <UART_ParseAnswLightsStateStatus+0xb8>)
 80090c6:	f008 ff3f 	bl	8011f48 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 80090ca:	490c      	ldr	r1, [pc, #48]	; (80090fc <UART_ParseAnswLightsStateStatus+0xb8>)
 80090cc:	480c      	ldr	r0, [pc, #48]	; (8009100 <UART_ParseAnswLightsStateStatus+0xbc>)
 80090ce:	f000 ff47 	bl	8009f60 <UARTDMA_Print>
			return;	// And exit parsing
 80090d2:	e00b      	b.n	80090ec <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 80090d4:	4b0d      	ldr	r3, [pc, #52]	; (800910c <UART_ParseAnswLightsStateStatus+0xc8>)
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	2b05      	cmp	r3, #5
 80090da:	d101      	bne.n	80090e0 <UART_ParseAnswLightsStateStatus+0x9c>
 80090dc:	f7fc f8e8 	bl	80052b0 <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 80090e0:	79fb      	ldrb	r3, [r7, #7]
 80090e2:	3301      	adds	r3, #1
 80090e4:	71fb      	strb	r3, [r7, #7]
 80090e6:	79fb      	ldrb	r3, [r7, #7]
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d9b1      	bls.n	8009050 <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 80090ec:	3708      	adds	r7, #8
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	08016290 	.word	0x08016290
 80090f8:	08016308 	.word	0x08016308
 80090fc:	20000300 	.word	0x20000300
 8009100:	200004f0 	.word	0x200004f0
 8009104:	200002ac 	.word	0x200002ac
 8009108:	0801631c 	.word	0x0801631c
 800910c:	20000290 	.word	0x20000290

08009110 <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	4603      	mov	r3, r0
 8009118:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 800911a:	79fb      	ldrb	r3, [r7, #7]
 800911c:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 800911e:	7bfb      	ldrb	r3, [r7, #15]
 8009120:	2b27      	cmp	r3, #39	; 0x27
 8009122:	f200 8129 	bhi.w	8009378 <SendComand+0x268>
 8009126:	a201      	add	r2, pc, #4	; (adr r2, 800912c <SendComand+0x1c>)
 8009128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912c:	080091cd 	.word	0x080091cd
 8009130:	080091d7 	.word	0x080091d7
 8009134:	080091e1 	.word	0x080091e1
 8009138:	080091eb 	.word	0x080091eb
 800913c:	080091ff 	.word	0x080091ff
 8009140:	08009209 	.word	0x08009209
 8009144:	08009213 	.word	0x08009213
 8009148:	0800921d 	.word	0x0800921d
 800914c:	08009227 	.word	0x08009227
 8009150:	08009231 	.word	0x08009231
 8009154:	0800923b 	.word	0x0800923b
 8009158:	08009245 	.word	0x08009245
 800915c:	0800924f 	.word	0x0800924f
 8009160:	08009277 	.word	0x08009277
 8009164:	08009281 	.word	0x08009281
 8009168:	0800928b 	.word	0x0800928b
 800916c:	08009295 	.word	0x08009295
 8009170:	0800929f 	.word	0x0800929f
 8009174:	080092a9 	.word	0x080092a9
 8009178:	080092b3 	.word	0x080092b3
 800917c:	080092bd 	.word	0x080092bd
 8009180:	0800926d 	.word	0x0800926d
 8009184:	080092db 	.word	0x080092db
 8009188:	08009259 	.word	0x08009259
 800918c:	08009263 	.word	0x08009263
 8009190:	080092c7 	.word	0x080092c7
 8009194:	080092d1 	.word	0x080092d1
 8009198:	080091f5 	.word	0x080091f5
 800919c:	080092e5 	.word	0x080092e5
 80091a0:	080092ef 	.word	0x080092ef
 80091a4:	080092f9 	.word	0x080092f9
 80091a8:	08009303 	.word	0x08009303
 80091ac:	0800930d 	.word	0x0800930d
 80091b0:	08009317 	.word	0x08009317
 80091b4:	08009321 	.word	0x08009321
 80091b8:	0800932b 	.word	0x0800932b
 80091bc:	08009335 	.word	0x08009335
 80091c0:	0800933f 	.word	0x0800933f
 80091c4:	08009365 	.word	0x08009365
 80091c8:	0800936f 	.word	0x0800936f
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 80091cc:	496d      	ldr	r1, [pc, #436]	; (8009384 <SendComand+0x274>)
 80091ce:	486e      	ldr	r0, [pc, #440]	; (8009388 <SendComand+0x278>)
 80091d0:	f000 fec6 	bl	8009f60 <UARTDMA_Print>
			break;
 80091d4:	e0d0      	b.n	8009378 <SendComand+0x268>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 80091d6:	496d      	ldr	r1, [pc, #436]	; (800938c <SendComand+0x27c>)
 80091d8:	486b      	ldr	r0, [pc, #428]	; (8009388 <SendComand+0x278>)
 80091da:	f000 fec1 	bl	8009f60 <UARTDMA_Print>
			break;
 80091de:	e0cb      	b.n	8009378 <SendComand+0x268>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 80091e0:	496b      	ldr	r1, [pc, #428]	; (8009390 <SendComand+0x280>)
 80091e2:	4869      	ldr	r0, [pc, #420]	; (8009388 <SendComand+0x278>)
 80091e4:	f000 febc 	bl	8009f60 <UARTDMA_Print>
			break;
 80091e8:	e0c6      	b.n	8009378 <SendComand+0x268>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 80091ea:	496a      	ldr	r1, [pc, #424]	; (8009394 <SendComand+0x284>)
 80091ec:	4866      	ldr	r0, [pc, #408]	; (8009388 <SendComand+0x278>)
 80091ee:	f000 feb7 	bl	8009f60 <UARTDMA_Print>
			break;
 80091f2:	e0c1      	b.n	8009378 <SendComand+0x268>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 80091f4:	4968      	ldr	r1, [pc, #416]	; (8009398 <SendComand+0x288>)
 80091f6:	4864      	ldr	r0, [pc, #400]	; (8009388 <SendComand+0x278>)
 80091f8:	f000 feb2 	bl	8009f60 <UARTDMA_Print>
			break;
 80091fc:	e0bc      	b.n	8009378 <SendComand+0x268>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 80091fe:	4967      	ldr	r1, [pc, #412]	; (800939c <SendComand+0x28c>)
 8009200:	4861      	ldr	r0, [pc, #388]	; (8009388 <SendComand+0x278>)
 8009202:	f000 fead 	bl	8009f60 <UARTDMA_Print>
			break;
 8009206:	e0b7      	b.n	8009378 <SendComand+0x268>

		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 8009208:	4965      	ldr	r1, [pc, #404]	; (80093a0 <SendComand+0x290>)
 800920a:	485f      	ldr	r0, [pc, #380]	; (8009388 <SendComand+0x278>)
 800920c:	f000 fea8 	bl	8009f60 <UARTDMA_Print>
			break;
 8009210:	e0b2      	b.n	8009378 <SendComand+0x268>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 8009212:	4964      	ldr	r1, [pc, #400]	; (80093a4 <SendComand+0x294>)
 8009214:	485c      	ldr	r0, [pc, #368]	; (8009388 <SendComand+0x278>)
 8009216:	f000 fea3 	bl	8009f60 <UARTDMA_Print>
			break;
 800921a:	e0ad      	b.n	8009378 <SendComand+0x268>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 800921c:	4962      	ldr	r1, [pc, #392]	; (80093a8 <SendComand+0x298>)
 800921e:	485a      	ldr	r0, [pc, #360]	; (8009388 <SendComand+0x278>)
 8009220:	f000 fe9e 	bl	8009f60 <UARTDMA_Print>
			break;
 8009224:	e0a8      	b.n	8009378 <SendComand+0x268>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 8009226:	4961      	ldr	r1, [pc, #388]	; (80093ac <SendComand+0x29c>)
 8009228:	4857      	ldr	r0, [pc, #348]	; (8009388 <SendComand+0x278>)
 800922a:	f000 fe99 	bl	8009f60 <UARTDMA_Print>
			break;
 800922e:	e0a3      	b.n	8009378 <SendComand+0x268>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 8009230:	495f      	ldr	r1, [pc, #380]	; (80093b0 <SendComand+0x2a0>)
 8009232:	4855      	ldr	r0, [pc, #340]	; (8009388 <SendComand+0x278>)
 8009234:	f000 fe94 	bl	8009f60 <UARTDMA_Print>
			break;
 8009238:	e09e      	b.n	8009378 <SendComand+0x268>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 800923a:	495e      	ldr	r1, [pc, #376]	; (80093b4 <SendComand+0x2a4>)
 800923c:	4852      	ldr	r0, [pc, #328]	; (8009388 <SendComand+0x278>)
 800923e:	f000 fe8f 	bl	8009f60 <UARTDMA_Print>
			break;
 8009242:	e099      	b.n	8009378 <SendComand+0x268>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 8009244:	495c      	ldr	r1, [pc, #368]	; (80093b8 <SendComand+0x2a8>)
 8009246:	4850      	ldr	r0, [pc, #320]	; (8009388 <SendComand+0x278>)
 8009248:	f000 fe8a 	bl	8009f60 <UARTDMA_Print>
			break;
 800924c:	e094      	b.n	8009378 <SendComand+0x268>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 800924e:	495b      	ldr	r1, [pc, #364]	; (80093bc <SendComand+0x2ac>)
 8009250:	484d      	ldr	r0, [pc, #308]	; (8009388 <SendComand+0x278>)
 8009252:	f000 fe85 	bl	8009f60 <UARTDMA_Print>
			break;
 8009256:	e08f      	b.n	8009378 <SendComand+0x268>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 8009258:	4959      	ldr	r1, [pc, #356]	; (80093c0 <SendComand+0x2b0>)
 800925a:	484b      	ldr	r0, [pc, #300]	; (8009388 <SendComand+0x278>)
 800925c:	f000 fe80 	bl	8009f60 <UARTDMA_Print>
			break;
 8009260:	e08a      	b.n	8009378 <SendComand+0x268>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 8009262:	4958      	ldr	r1, [pc, #352]	; (80093c4 <SendComand+0x2b4>)
 8009264:	4848      	ldr	r0, [pc, #288]	; (8009388 <SendComand+0x278>)
 8009266:	f000 fe7b 	bl	8009f60 <UARTDMA_Print>
			break;
 800926a:	e085      	b.n	8009378 <SendComand+0x268>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 800926c:	4956      	ldr	r1, [pc, #344]	; (80093c8 <SendComand+0x2b8>)
 800926e:	4846      	ldr	r0, [pc, #280]	; (8009388 <SendComand+0x278>)
 8009270:	f000 fe76 	bl	8009f60 <UARTDMA_Print>
			break;
 8009274:	e080      	b.n	8009378 <SendComand+0x268>

		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 8009276:	4955      	ldr	r1, [pc, #340]	; (80093cc <SendComand+0x2bc>)
 8009278:	4843      	ldr	r0, [pc, #268]	; (8009388 <SendComand+0x278>)
 800927a:	f000 fe71 	bl	8009f60 <UARTDMA_Print>
			break;
 800927e:	e07b      	b.n	8009378 <SendComand+0x268>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 8009280:	4953      	ldr	r1, [pc, #332]	; (80093d0 <SendComand+0x2c0>)
 8009282:	4841      	ldr	r0, [pc, #260]	; (8009388 <SendComand+0x278>)
 8009284:	f000 fe6c 	bl	8009f60 <UARTDMA_Print>
			break;
 8009288:	e076      	b.n	8009378 <SendComand+0x268>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 800928a:	4952      	ldr	r1, [pc, #328]	; (80093d4 <SendComand+0x2c4>)
 800928c:	483e      	ldr	r0, [pc, #248]	; (8009388 <SendComand+0x278>)
 800928e:	f000 fe67 	bl	8009f60 <UARTDMA_Print>
			break;
 8009292:	e071      	b.n	8009378 <SendComand+0x268>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 8009294:	4950      	ldr	r1, [pc, #320]	; (80093d8 <SendComand+0x2c8>)
 8009296:	483c      	ldr	r0, [pc, #240]	; (8009388 <SendComand+0x278>)
 8009298:	f000 fe62 	bl	8009f60 <UARTDMA_Print>
			break;
 800929c:	e06c      	b.n	8009378 <SendComand+0x268>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 800929e:	494f      	ldr	r1, [pc, #316]	; (80093dc <SendComand+0x2cc>)
 80092a0:	4839      	ldr	r0, [pc, #228]	; (8009388 <SendComand+0x278>)
 80092a2:	f000 fe5d 	bl	8009f60 <UARTDMA_Print>
			break;
 80092a6:	e067      	b.n	8009378 <SendComand+0x268>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 80092a8:	494d      	ldr	r1, [pc, #308]	; (80093e0 <SendComand+0x2d0>)
 80092aa:	4837      	ldr	r0, [pc, #220]	; (8009388 <SendComand+0x278>)
 80092ac:	f000 fe58 	bl	8009f60 <UARTDMA_Print>
			break;
 80092b0:	e062      	b.n	8009378 <SendComand+0x268>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 80092b2:	494c      	ldr	r1, [pc, #304]	; (80093e4 <SendComand+0x2d4>)
 80092b4:	4834      	ldr	r0, [pc, #208]	; (8009388 <SendComand+0x278>)
 80092b6:	f000 fe53 	bl	8009f60 <UARTDMA_Print>
			break;
 80092ba:	e05d      	b.n	8009378 <SendComand+0x268>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 80092bc:	494a      	ldr	r1, [pc, #296]	; (80093e8 <SendComand+0x2d8>)
 80092be:	4832      	ldr	r0, [pc, #200]	; (8009388 <SendComand+0x278>)
 80092c0:	f000 fe4e 	bl	8009f60 <UARTDMA_Print>
			break;
 80092c4:	e058      	b.n	8009378 <SendComand+0x268>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 80092c6:	4949      	ldr	r1, [pc, #292]	; (80093ec <SendComand+0x2dc>)
 80092c8:	482f      	ldr	r0, [pc, #188]	; (8009388 <SendComand+0x278>)
 80092ca:	f000 fe49 	bl	8009f60 <UARTDMA_Print>
			break;
 80092ce:	e053      	b.n	8009378 <SendComand+0x268>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 80092d0:	4947      	ldr	r1, [pc, #284]	; (80093f0 <SendComand+0x2e0>)
 80092d2:	482d      	ldr	r0, [pc, #180]	; (8009388 <SendComand+0x278>)
 80092d4:	f000 fe44 	bl	8009f60 <UARTDMA_Print>
			break;
 80092d8:	e04e      	b.n	8009378 <SendComand+0x268>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 80092da:	4946      	ldr	r1, [pc, #280]	; (80093f4 <SendComand+0x2e4>)
 80092dc:	482a      	ldr	r0, [pc, #168]	; (8009388 <SendComand+0x278>)
 80092de:	f000 fe3f 	bl	8009f60 <UARTDMA_Print>
			break;
 80092e2:	e049      	b.n	8009378 <SendComand+0x268>

		case UCMD_WS_LED_WHITE_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,0\n");
 80092e4:	4944      	ldr	r1, [pc, #272]	; (80093f8 <SendComand+0x2e8>)
 80092e6:	4828      	ldr	r0, [pc, #160]	; (8009388 <SendComand+0x278>)
 80092e8:	f000 fe3a 	bl	8009f60 <UARTDMA_Print>
			break;
 80092ec:	e044      	b.n	8009378 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,1\n");
 80092ee:	4943      	ldr	r1, [pc, #268]	; (80093fc <SendComand+0x2ec>)
 80092f0:	4825      	ldr	r0, [pc, #148]	; (8009388 <SendComand+0x278>)
 80092f2:	f000 fe35 	bl	8009f60 <UARTDMA_Print>
			break;
 80092f6:	e03f      	b.n	8009378 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,2\n");
 80092f8:	4941      	ldr	r1, [pc, #260]	; (8009400 <SendComand+0x2f0>)
 80092fa:	4823      	ldr	r0, [pc, #140]	; (8009388 <SendComand+0x278>)
 80092fc:	f000 fe30 	bl	8009f60 <UARTDMA_Print>
			break;
 8009300:	e03a      	b.n	8009378 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,3\n");
 8009302:	4940      	ldr	r1, [pc, #256]	; (8009404 <SendComand+0x2f4>)
 8009304:	4820      	ldr	r0, [pc, #128]	; (8009388 <SendComand+0x278>)
 8009306:	f000 fe2b 	bl	8009f60 <UARTDMA_Print>
			break;
 800930a:	e035      	b.n	8009378 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,4\n");
 800930c:	493e      	ldr	r1, [pc, #248]	; (8009408 <SendComand+0x2f8>)
 800930e:	481e      	ldr	r0, [pc, #120]	; (8009388 <SendComand+0x278>)
 8009310:	f000 fe26 	bl	8009f60 <UARTDMA_Print>
			break;
 8009314:	e030      	b.n	8009378 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,5\n");
 8009316:	493d      	ldr	r1, [pc, #244]	; (800940c <SendComand+0x2fc>)
 8009318:	481b      	ldr	r0, [pc, #108]	; (8009388 <SendComand+0x278>)
 800931a:	f000 fe21 	bl	8009f60 <UARTDMA_Print>
			break;
 800931e:	e02b      	b.n	8009378 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,6\n");
 8009320:	493b      	ldr	r1, [pc, #236]	; (8009410 <SendComand+0x300>)
 8009322:	4819      	ldr	r0, [pc, #100]	; (8009388 <SendComand+0x278>)
 8009324:	f000 fe1c 	bl	8009f60 <UARTDMA_Print>
			break;
 8009328:	e026      	b.n	8009378 <SendComand+0x268>
		case UCMD_WS_LED_DAILY:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,7\n");
 800932a:	493a      	ldr	r1, [pc, #232]	; (8009414 <SendComand+0x304>)
 800932c:	4816      	ldr	r0, [pc, #88]	; (8009388 <SendComand+0x278>)
 800932e:	f000 fe17 	bl	8009f60 <UARTDMA_Print>
			break;
 8009332:	e021      	b.n	8009378 <SendComand+0x268>
		case UCMD_WS_LED_NIGHT:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,8\n");
 8009334:	4938      	ldr	r1, [pc, #224]	; (8009418 <SendComand+0x308>)
 8009336:	4814      	ldr	r0, [pc, #80]	; (8009388 <SendComand+0x278>)
 8009338:	f000 fe12 	bl	8009f60 <UARTDMA_Print>
			break;
 800933c:	e01c      	b.n	8009378 <SendComand+0x268>
		case UCMD_WS_NUMBER_LED:
			if(NrOfLeds < 9) NrOfLeds = 9; // Minimum number of Leds is 9
 800933e:	4b37      	ldr	r3, [pc, #220]	; (800941c <SendComand+0x30c>)
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	2b08      	cmp	r3, #8
 8009344:	d802      	bhi.n	800934c <SendComand+0x23c>
 8009346:	4b35      	ldr	r3, [pc, #212]	; (800941c <SendComand+0x30c>)
 8009348:	2209      	movs	r2, #9
 800934a:	701a      	strb	r2, [r3, #0]
			sprintf(Message, "CHLIGHT=9,%d\n", NrOfLeds);
 800934c:	4b33      	ldr	r3, [pc, #204]	; (800941c <SendComand+0x30c>)
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	461a      	mov	r2, r3
 8009352:	4933      	ldr	r1, [pc, #204]	; (8009420 <SendComand+0x310>)
 8009354:	4833      	ldr	r0, [pc, #204]	; (8009424 <SendComand+0x314>)
 8009356:	f008 fdf7 	bl	8011f48 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 800935a:	4932      	ldr	r1, [pc, #200]	; (8009424 <SendComand+0x314>)
 800935c:	480a      	ldr	r0, [pc, #40]	; (8009388 <SendComand+0x278>)
 800935e:	f000 fdff 	bl	8009f60 <UARTDMA_Print>
			break;
 8009362:	e009      	b.n	8009378 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNRISE:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,1\n");
 8009364:	4930      	ldr	r1, [pc, #192]	; (8009428 <SendComand+0x318>)
 8009366:	4808      	ldr	r0, [pc, #32]	; (8009388 <SendComand+0x278>)
 8009368:	f000 fdfa 	bl	8009f60 <UARTDMA_Print>
			break;
 800936c:	e004      	b.n	8009378 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNSET:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,4\n");
 800936e:	492f      	ldr	r1, [pc, #188]	; (800942c <SendComand+0x31c>)
 8009370:	4805      	ldr	r0, [pc, #20]	; (8009388 <SendComand+0x278>)
 8009372:	f000 fdf5 	bl	8009f60 <UARTDMA_Print>
			break;
 8009376:	bf00      	nop
		}
	return 1;
 8009378:	2301      	movs	r3, #1
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	08016338 	.word	0x08016338
 8009388:	200004f0 	.word	0x200004f0
 800938c:	08016340 	.word	0x08016340
 8009390:	08016348 	.word	0x08016348
 8009394:	08016354 	.word	0x08016354
 8009398:	0801635c 	.word	0x0801635c
 800939c:	08016364 	.word	0x08016364
 80093a0:	0801636c 	.word	0x0801636c
 80093a4:	0801637c 	.word	0x0801637c
 80093a8:	0801638c 	.word	0x0801638c
 80093ac:	0801639c 	.word	0x0801639c
 80093b0:	080163ac 	.word	0x080163ac
 80093b4:	080163bc 	.word	0x080163bc
 80093b8:	080163cc 	.word	0x080163cc
 80093bc:	080163dc 	.word	0x080163dc
 80093c0:	080163ec 	.word	0x080163ec
 80093c4:	080163fc 	.word	0x080163fc
 80093c8:	0801640c 	.word	0x0801640c
 80093cc:	0801641c 	.word	0x0801641c
 80093d0:	0801642c 	.word	0x0801642c
 80093d4:	0801643c 	.word	0x0801643c
 80093d8:	0801644c 	.word	0x0801644c
 80093dc:	0801645c 	.word	0x0801645c
 80093e0:	0801646c 	.word	0x0801646c
 80093e4:	0801647c 	.word	0x0801647c
 80093e8:	0801648c 	.word	0x0801648c
 80093ec:	0801649c 	.word	0x0801649c
 80093f0:	080164ac 	.word	0x080164ac
 80093f4:	080164bc 	.word	0x080164bc
 80093f8:	080164cc 	.word	0x080164cc
 80093fc:	080164dc 	.word	0x080164dc
 8009400:	080164ec 	.word	0x080164ec
 8009404:	080164fc 	.word	0x080164fc
 8009408:	0801650c 	.word	0x0801650c
 800940c:	0801651c 	.word	0x0801651c
 8009410:	0801652c 	.word	0x0801652c
 8009414:	0801653c 	.word	0x0801653c
 8009418:	0801654c 	.word	0x0801654c
 800941c:	20000033 	.word	0x20000033
 8009420:	0801655c 	.word	0x0801655c
 8009424:	20000300 	.word	0x20000300
 8009428:	0801656c 	.word	0x0801656c
 800942c:	0801657c 	.word	0x0801657c

08009430 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	781a      	ldrb	r2, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	785b      	ldrb	r3, [r3, #1]
 8009442:	429a      	cmp	r2, r3
 8009444:	d101      	bne.n	800944a <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 8009446:	2301      	movs	r3, #1
 8009448:	e015      	b.n	8009476 <RB_Read+0x46>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	785b      	ldrb	r3, [r3, #1]
 800944e:	461a      	mov	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4413      	add	r3, r2
 8009454:	789a      	ldrb	r2, [r3, #2]
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	785b      	ldrb	r3, [r3, #1]
 800945e:	3301      	adds	r3, #1
 8009460:	425a      	negs	r2, r3
 8009462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009466:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800946a:	bf58      	it	pl
 800946c:	4253      	negpl	r3, r2
 800946e:	b2da      	uxtb	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8009482:	b480      	push	{r7}
 8009484:	b085      	sub	sp, #20
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
 800948a:	460b      	mov	r3, r1
 800948c:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	3301      	adds	r3, #1
 8009494:	425a      	negs	r2, r3
 8009496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800949a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800949e:	bf58      	it	pl
 80094a0:	4253      	negpl	r3, r2
 80094a2:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	785b      	ldrb	r3, [r3, #1]
 80094a8:	7bfa      	ldrb	r2, [r7, #15]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d101      	bne.n	80094b2 <RB_Write+0x30>
	{
		return RB_ERROR; // No free space error
 80094ae:	2301      	movs	r3, #1
 80094b0:	e00a      	b.n	80094c8 <RB_Write+0x46>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	461a      	mov	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4413      	add	r3, r2
 80094bc:	78fa      	ldrb	r2, [r7, #3]
 80094be:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	7bfa      	ldrb	r2, [r7, #15]
 80094c4:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3714      	adds	r7, #20
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi5;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80094d8:	4b17      	ldr	r3, [pc, #92]	; (8009538 <MX_SPI1_Init+0x64>)
 80094da:	4a18      	ldr	r2, [pc, #96]	; (800953c <MX_SPI1_Init+0x68>)
 80094dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80094de:	4b16      	ldr	r3, [pc, #88]	; (8009538 <MX_SPI1_Init+0x64>)
 80094e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80094e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80094e6:	4b14      	ldr	r3, [pc, #80]	; (8009538 <MX_SPI1_Init+0x64>)
 80094e8:	2200      	movs	r2, #0
 80094ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80094ec:	4b12      	ldr	r3, [pc, #72]	; (8009538 <MX_SPI1_Init+0x64>)
 80094ee:	2200      	movs	r2, #0
 80094f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80094f2:	4b11      	ldr	r3, [pc, #68]	; (8009538 <MX_SPI1_Init+0x64>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80094f8:	4b0f      	ldr	r3, [pc, #60]	; (8009538 <MX_SPI1_Init+0x64>)
 80094fa:	2200      	movs	r2, #0
 80094fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80094fe:	4b0e      	ldr	r3, [pc, #56]	; (8009538 <MX_SPI1_Init+0x64>)
 8009500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009504:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8009506:	4b0c      	ldr	r3, [pc, #48]	; (8009538 <MX_SPI1_Init+0x64>)
 8009508:	2210      	movs	r2, #16
 800950a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800950c:	4b0a      	ldr	r3, [pc, #40]	; (8009538 <MX_SPI1_Init+0x64>)
 800950e:	2200      	movs	r2, #0
 8009510:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009512:	4b09      	ldr	r3, [pc, #36]	; (8009538 <MX_SPI1_Init+0x64>)
 8009514:	2200      	movs	r2, #0
 8009516:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009518:	4b07      	ldr	r3, [pc, #28]	; (8009538 <MX_SPI1_Init+0x64>)
 800951a:	2200      	movs	r2, #0
 800951c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800951e:	4b06      	ldr	r3, [pc, #24]	; (8009538 <MX_SPI1_Init+0x64>)
 8009520:	220a      	movs	r2, #10
 8009522:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009524:	4804      	ldr	r0, [pc, #16]	; (8009538 <MX_SPI1_Init+0x64>)
 8009526:	f005 fd47 	bl	800efb8 <HAL_SPI_Init>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d001      	beq.n	8009534 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8009530:	f7fc fc3e 	bl	8005db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009534:	bf00      	nop
 8009536:	bd80      	pop	{r7, pc}
 8009538:	20000938 	.word	0x20000938
 800953c:	40013000 	.word	0x40013000

08009540 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8009544:	4b17      	ldr	r3, [pc, #92]	; (80095a4 <MX_SPI3_Init+0x64>)
 8009546:	4a18      	ldr	r2, [pc, #96]	; (80095a8 <MX_SPI3_Init+0x68>)
 8009548:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800954a:	4b16      	ldr	r3, [pc, #88]	; (80095a4 <MX_SPI3_Init+0x64>)
 800954c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009550:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8009552:	4b14      	ldr	r3, [pc, #80]	; (80095a4 <MX_SPI3_Init+0x64>)
 8009554:	2200      	movs	r2, #0
 8009556:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8009558:	4b12      	ldr	r3, [pc, #72]	; (80095a4 <MX_SPI3_Init+0x64>)
 800955a:	2200      	movs	r2, #0
 800955c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800955e:	4b11      	ldr	r3, [pc, #68]	; (80095a4 <MX_SPI3_Init+0x64>)
 8009560:	2200      	movs	r2, #0
 8009562:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009564:	4b0f      	ldr	r3, [pc, #60]	; (80095a4 <MX_SPI3_Init+0x64>)
 8009566:	2200      	movs	r2, #0
 8009568:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800956a:	4b0e      	ldr	r3, [pc, #56]	; (80095a4 <MX_SPI3_Init+0x64>)
 800956c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009570:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8009572:	4b0c      	ldr	r3, [pc, #48]	; (80095a4 <MX_SPI3_Init+0x64>)
 8009574:	2220      	movs	r2, #32
 8009576:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009578:	4b0a      	ldr	r3, [pc, #40]	; (80095a4 <MX_SPI3_Init+0x64>)
 800957a:	2200      	movs	r2, #0
 800957c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800957e:	4b09      	ldr	r3, [pc, #36]	; (80095a4 <MX_SPI3_Init+0x64>)
 8009580:	2200      	movs	r2, #0
 8009582:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009584:	4b07      	ldr	r3, [pc, #28]	; (80095a4 <MX_SPI3_Init+0x64>)
 8009586:	2200      	movs	r2, #0
 8009588:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800958a:	4b06      	ldr	r3, [pc, #24]	; (80095a4 <MX_SPI3_Init+0x64>)
 800958c:	220a      	movs	r2, #10
 800958e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8009590:	4804      	ldr	r0, [pc, #16]	; (80095a4 <MX_SPI3_Init+0x64>)
 8009592:	f005 fd11 	bl	800efb8 <HAL_SPI_Init>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800959c:	f7fc fc08 	bl	8005db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80095a0:	bf00      	nop
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	200008e0 	.word	0x200008e0
 80095a8:	40003c00 	.word	0x40003c00

080095ac <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80095b0:	4b17      	ldr	r3, [pc, #92]	; (8009610 <MX_SPI5_Init+0x64>)
 80095b2:	4a18      	ldr	r2, [pc, #96]	; (8009614 <MX_SPI5_Init+0x68>)
 80095b4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80095b6:	4b16      	ldr	r3, [pc, #88]	; (8009610 <MX_SPI5_Init+0x64>)
 80095b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80095bc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80095be:	4b14      	ldr	r3, [pc, #80]	; (8009610 <MX_SPI5_Init+0x64>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80095c4:	4b12      	ldr	r3, [pc, #72]	; (8009610 <MX_SPI5_Init+0x64>)
 80095c6:	2200      	movs	r2, #0
 80095c8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80095ca:	4b11      	ldr	r3, [pc, #68]	; (8009610 <MX_SPI5_Init+0x64>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80095d0:	4b0f      	ldr	r3, [pc, #60]	; (8009610 <MX_SPI5_Init+0x64>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80095d6:	4b0e      	ldr	r3, [pc, #56]	; (8009610 <MX_SPI5_Init+0x64>)
 80095d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095dc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80095de:	4b0c      	ldr	r3, [pc, #48]	; (8009610 <MX_SPI5_Init+0x64>)
 80095e0:	2200      	movs	r2, #0
 80095e2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80095e4:	4b0a      	ldr	r3, [pc, #40]	; (8009610 <MX_SPI5_Init+0x64>)
 80095e6:	2200      	movs	r2, #0
 80095e8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80095ea:	4b09      	ldr	r3, [pc, #36]	; (8009610 <MX_SPI5_Init+0x64>)
 80095ec:	2200      	movs	r2, #0
 80095ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095f0:	4b07      	ldr	r3, [pc, #28]	; (8009610 <MX_SPI5_Init+0x64>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80095f6:	4b06      	ldr	r3, [pc, #24]	; (8009610 <MX_SPI5_Init+0x64>)
 80095f8:	220a      	movs	r2, #10
 80095fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80095fc:	4804      	ldr	r0, [pc, #16]	; (8009610 <MX_SPI5_Init+0x64>)
 80095fe:	f005 fcdb 	bl	800efb8 <HAL_SPI_Init>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8009608:	f7fc fbd2 	bl	8005db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800960c:	bf00      	nop
 800960e:	bd80      	pop	{r7, pc}
 8009610:	20000888 	.word	0x20000888
 8009614:	40015000 	.word	0x40015000

08009618 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b08e      	sub	sp, #56	; 0x38
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009624:	2200      	movs	r2, #0
 8009626:	601a      	str	r2, [r3, #0]
 8009628:	605a      	str	r2, [r3, #4]
 800962a:	609a      	str	r2, [r3, #8]
 800962c:	60da      	str	r2, [r3, #12]
 800962e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a5a      	ldr	r2, [pc, #360]	; (80097a0 <HAL_SPI_MspInit+0x188>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d12c      	bne.n	8009694 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800963a:	2300      	movs	r3, #0
 800963c:	623b      	str	r3, [r7, #32]
 800963e:	4b59      	ldr	r3, [pc, #356]	; (80097a4 <HAL_SPI_MspInit+0x18c>)
 8009640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009642:	4a58      	ldr	r2, [pc, #352]	; (80097a4 <HAL_SPI_MspInit+0x18c>)
 8009644:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009648:	6453      	str	r3, [r2, #68]	; 0x44
 800964a:	4b56      	ldr	r3, [pc, #344]	; (80097a4 <HAL_SPI_MspInit+0x18c>)
 800964c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800964e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009652:	623b      	str	r3, [r7, #32]
 8009654:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009656:	2300      	movs	r3, #0
 8009658:	61fb      	str	r3, [r7, #28]
 800965a:	4b52      	ldr	r3, [pc, #328]	; (80097a4 <HAL_SPI_MspInit+0x18c>)
 800965c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800965e:	4a51      	ldr	r2, [pc, #324]	; (80097a4 <HAL_SPI_MspInit+0x18c>)
 8009660:	f043 0301 	orr.w	r3, r3, #1
 8009664:	6313      	str	r3, [r2, #48]	; 0x30
 8009666:	4b4f      	ldr	r3, [pc, #316]	; (80097a4 <HAL_SPI_MspInit+0x18c>)
 8009668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800966a:	f003 0301 	and.w	r3, r3, #1
 800966e:	61fb      	str	r3, [r7, #28]
 8009670:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_ILI9341_Pin|SPI1_MISO_ILI9341_Pin|SPI1_MOSI_ILI9341_Pin;
 8009672:	23e0      	movs	r3, #224	; 0xe0
 8009674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009676:	2302      	movs	r3, #2
 8009678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800967a:	2300      	movs	r3, #0
 800967c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800967e:	2303      	movs	r3, #3
 8009680:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009682:	2305      	movs	r3, #5
 8009684:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800968a:	4619      	mov	r1, r3
 800968c:	4846      	ldr	r0, [pc, #280]	; (80097a8 <HAL_SPI_MspInit+0x190>)
 800968e:	f001 fd5f 	bl	800b150 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8009692:	e081      	b.n	8009798 <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI3)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a44      	ldr	r2, [pc, #272]	; (80097ac <HAL_SPI_MspInit+0x194>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d12c      	bne.n	80096f8 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800969e:	2300      	movs	r3, #0
 80096a0:	61bb      	str	r3, [r7, #24]
 80096a2:	4b40      	ldr	r3, [pc, #256]	; (80097a4 <HAL_SPI_MspInit+0x18c>)
 80096a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a6:	4a3f      	ldr	r2, [pc, #252]	; (80097a4 <HAL_SPI_MspInit+0x18c>)
 80096a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096ac:	6413      	str	r3, [r2, #64]	; 0x40
 80096ae:	4b3d      	ldr	r3, [pc, #244]	; (80097a4 <HAL_SPI_MspInit+0x18c>)
 80096b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096b6:	61bb      	str	r3, [r7, #24]
 80096b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80096ba:	2300      	movs	r3, #0
 80096bc:	617b      	str	r3, [r7, #20]
 80096be:	4b39      	ldr	r3, [pc, #228]	; (80097a4 <HAL_SPI_MspInit+0x18c>)
 80096c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c2:	4a38      	ldr	r2, [pc, #224]	; (80097a4 <HAL_SPI_MspInit+0x18c>)
 80096c4:	f043 0302 	orr.w	r3, r3, #2
 80096c8:	6313      	str	r3, [r2, #48]	; 0x30
 80096ca:	4b36      	ldr	r3, [pc, #216]	; (80097a4 <HAL_SPI_MspInit+0x18c>)
 80096cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ce:	f003 0302 	and.w	r3, r3, #2
 80096d2:	617b      	str	r3, [r7, #20]
 80096d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SPI3_SCK_XPT2046_Pin|SPI3_MISO_XPT_2046_Pin|SPI3_MOSI_XPT2046_Pin;
 80096d6:	2338      	movs	r3, #56	; 0x38
 80096d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096da:	2302      	movs	r3, #2
 80096dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096de:	2300      	movs	r3, #0
 80096e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096e2:	2303      	movs	r3, #3
 80096e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80096e6:	2306      	movs	r3, #6
 80096e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80096ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096ee:	4619      	mov	r1, r3
 80096f0:	482f      	ldr	r0, [pc, #188]	; (80097b0 <HAL_SPI_MspInit+0x198>)
 80096f2:	f001 fd2d 	bl	800b150 <HAL_GPIO_Init>
}
 80096f6:	e04f      	b.n	8009798 <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI5)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a2d      	ldr	r2, [pc, #180]	; (80097b4 <HAL_SPI_MspInit+0x19c>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d14a      	bne.n	8009798 <HAL_SPI_MspInit+0x180>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8009702:	2300      	movs	r3, #0
 8009704:	613b      	str	r3, [r7, #16]
 8009706:	4b27      	ldr	r3, [pc, #156]	; (80097a4 <HAL_SPI_MspInit+0x18c>)
 8009708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800970a:	4a26      	ldr	r2, [pc, #152]	; (80097a4 <HAL_SPI_MspInit+0x18c>)
 800970c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009710:	6453      	str	r3, [r2, #68]	; 0x44
 8009712:	4b24      	ldr	r3, [pc, #144]	; (80097a4 <HAL_SPI_MspInit+0x18c>)
 8009714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800971a:	613b      	str	r3, [r7, #16]
 800971c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800971e:	2300      	movs	r3, #0
 8009720:	60fb      	str	r3, [r7, #12]
 8009722:	4b20      	ldr	r3, [pc, #128]	; (80097a4 <HAL_SPI_MspInit+0x18c>)
 8009724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009726:	4a1f      	ldr	r2, [pc, #124]	; (80097a4 <HAL_SPI_MspInit+0x18c>)
 8009728:	f043 0302 	orr.w	r3, r3, #2
 800972c:	6313      	str	r3, [r2, #48]	; 0x30
 800972e:	4b1d      	ldr	r3, [pc, #116]	; (80097a4 <HAL_SPI_MspInit+0x18c>)
 8009730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009732:	f003 0302 	and.w	r3, r3, #2
 8009736:	60fb      	str	r3, [r7, #12]
 8009738:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800973a:	2300      	movs	r3, #0
 800973c:	60bb      	str	r3, [r7, #8]
 800973e:	4b19      	ldr	r3, [pc, #100]	; (80097a4 <HAL_SPI_MspInit+0x18c>)
 8009740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009742:	4a18      	ldr	r2, [pc, #96]	; (80097a4 <HAL_SPI_MspInit+0x18c>)
 8009744:	f043 0301 	orr.w	r3, r3, #1
 8009748:	6313      	str	r3, [r2, #48]	; 0x30
 800974a:	4b16      	ldr	r3, [pc, #88]	; (80097a4 <HAL_SPI_MspInit+0x18c>)
 800974c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974e:	f003 0301 	and.w	r3, r3, #1
 8009752:	60bb      	str	r3, [r7, #8]
 8009754:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_nRF_Pin;
 8009756:	2301      	movs	r3, #1
 8009758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800975a:	2302      	movs	r3, #2
 800975c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800975e:	2300      	movs	r3, #0
 8009760:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009762:	2303      	movs	r3, #3
 8009764:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8009766:	2306      	movs	r3, #6
 8009768:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI5_SCK_nRF_GPIO_Port, &GPIO_InitStruct);
 800976a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800976e:	4619      	mov	r1, r3
 8009770:	480f      	ldr	r0, [pc, #60]	; (80097b0 <HAL_SPI_MspInit+0x198>)
 8009772:	f001 fced 	bl	800b150 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI5_MOSI_nRF_Pin|SPI5_MISO_nRF_Pin;
 8009776:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800977a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800977c:	2302      	movs	r3, #2
 800977e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009780:	2300      	movs	r3, #0
 8009782:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009784:	2303      	movs	r3, #3
 8009786:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8009788:	2306      	movs	r3, #6
 800978a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800978c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009790:	4619      	mov	r1, r3
 8009792:	4805      	ldr	r0, [pc, #20]	; (80097a8 <HAL_SPI_MspInit+0x190>)
 8009794:	f001 fcdc 	bl	800b150 <HAL_GPIO_Init>
}
 8009798:	bf00      	nop
 800979a:	3738      	adds	r7, #56	; 0x38
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	40013000 	.word	0x40013000
 80097a4:	40023800 	.word	0x40023800
 80097a8:	40020000 	.word	0x40020000
 80097ac:	40003c00 	.word	0x40003c00
 80097b0:	40020400 	.word	0x40020400
 80097b4:	40015000 	.word	0x40015000

080097b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097be:	2300      	movs	r3, #0
 80097c0:	607b      	str	r3, [r7, #4]
 80097c2:	4b10      	ldr	r3, [pc, #64]	; (8009804 <HAL_MspInit+0x4c>)
 80097c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097c6:	4a0f      	ldr	r2, [pc, #60]	; (8009804 <HAL_MspInit+0x4c>)
 80097c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80097cc:	6453      	str	r3, [r2, #68]	; 0x44
 80097ce:	4b0d      	ldr	r3, [pc, #52]	; (8009804 <HAL_MspInit+0x4c>)
 80097d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097d6:	607b      	str	r3, [r7, #4]
 80097d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80097da:	2300      	movs	r3, #0
 80097dc:	603b      	str	r3, [r7, #0]
 80097de:	4b09      	ldr	r3, [pc, #36]	; (8009804 <HAL_MspInit+0x4c>)
 80097e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e2:	4a08      	ldr	r2, [pc, #32]	; (8009804 <HAL_MspInit+0x4c>)
 80097e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097e8:	6413      	str	r3, [r2, #64]	; 0x40
 80097ea:	4b06      	ldr	r3, [pc, #24]	; (8009804 <HAL_MspInit+0x4c>)
 80097ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097f2:	603b      	str	r3, [r7, #0]
 80097f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80097f6:	bf00      	nop
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	40023800 	.word	0x40023800

08009808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009808:	b480      	push	{r7}
 800980a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800980c:	e7fe      	b.n	800980c <NMI_Handler+0x4>

0800980e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800980e:	b480      	push	{r7}
 8009810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009812:	e7fe      	b.n	8009812 <HardFault_Handler+0x4>

08009814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009814:	b480      	push	{r7}
 8009816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009818:	e7fe      	b.n	8009818 <MemManage_Handler+0x4>

0800981a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800981a:	b480      	push	{r7}
 800981c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800981e:	e7fe      	b.n	800981e <BusFault_Handler+0x4>

08009820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009820:	b480      	push	{r7}
 8009822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009824:	e7fe      	b.n	8009824 <UsageFault_Handler+0x4>

08009826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009826:	b480      	push	{r7}
 8009828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800982a:	bf00      	nop
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009834:	b480      	push	{r7}
 8009836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009838:	bf00      	nop
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr

08009842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009842:	b480      	push	{r7}
 8009844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009846:	bf00      	nop
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009854:	f000 fe88 	bl	800a568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009858:	bf00      	nop
 800985a:	bd80      	pop	{r7, pc}

0800985c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USART2_TX_2uC_Pin);
 8009860:	2004      	movs	r0, #4
 8009862:	f001 fe45 	bl	800b4f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8009866:	bf00      	nop
 8009868:	bd80      	pop	{r7, pc}

0800986a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_DS3231_RTC_Pin);
 800986e:	2010      	movs	r0, #16
 8009870:	f001 fe3e 	bl	800b4f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8009874:	bf00      	nop
 8009876:	bd80      	pop	{r7, pc}

08009878 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800987c:	4802      	ldr	r0, [pc, #8]	; (8009888 <DMA1_Stream0_IRQHandler+0x10>)
 800987e:	f001 f9ef 	bl	800ac60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8009882:	bf00      	nop
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	20000490 	.word	0x20000490

0800988c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8009890:	4802      	ldr	r0, [pc, #8]	; (800989c <DMA1_Stream1_IRQHandler+0x10>)
 8009892:	f001 f9e5 	bl	800ac60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8009896:	bf00      	nop
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	200003dc 	.word	0x200003dc

080098a0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 80098a4:	4802      	ldr	r0, [pc, #8]	; (80098b0 <DMA1_Stream5_IRQHandler+0x10>)
 80098a6:	f000 faa5 	bl	8009df4 <UARTDMA_DmaReceiveIrqHandler>
	return;
 80098aa:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	200004f0 	.word	0x200004f0

080098b4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80098b8:	4802      	ldr	r0, [pc, #8]	; (80098c4 <DMA1_Stream6_IRQHandler+0x10>)
 80098ba:	f001 f9d1 	bl	800ac60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80098be:	bf00      	nop
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	20000b88 	.word	0x20000b88

080098c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 80098cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80098d0:	f001 fe0e 	bl	800b4f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80098d4:	bf00      	nop
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80098dc:	4802      	ldr	r0, [pc, #8]	; (80098e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80098de:	f006 f906 	bl	800faee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80098e2:	bf00      	nop
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	20000990 	.word	0x20000990

080098ec <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80098f0:	4802      	ldr	r0, [pc, #8]	; (80098fc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80098f2:	f006 f8fc 	bl	800faee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80098f6:	bf00      	nop
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	200009d8 	.word	0x200009d8

08009900 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8009904:	4802      	ldr	r0, [pc, #8]	; (8009910 <I2C1_EV_IRQHandler+0x10>)
 8009906:	f002 fd93 	bl	800c430 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800990a:	bf00      	nop
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	2000043c 	.word	0x2000043c

08009914 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8009918:	4802      	ldr	r0, [pc, #8]	; (8009924 <I2C1_ER_IRQHandler+0x10>)
 800991a:	f002 fefa 	bl	800c712 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800991e:	bf00      	nop
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	2000043c 	.word	0x2000043c

08009928 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma1);
 800992c:	4803      	ldr	r0, [pc, #12]	; (800993c <USART1_IRQHandler+0x14>)
 800992e:	f000 fa37 	bl	8009da0 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009932:	4803      	ldr	r0, [pc, #12]	; (8009940 <USART1_IRQHandler+0x18>)
 8009934:	f006 fc0a 	bl	801014c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009938:	bf00      	nop
 800993a:	bd80      	pop	{r7, pc}
 800993c:	200006bc 	.word	0x200006bc
 8009940:	20000be8 	.word	0x20000be8

08009944 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 8009948:	4803      	ldr	r0, [pc, #12]	; (8009958 <USART2_IRQHandler+0x14>)
 800994a:	f000 fa29 	bl	8009da0 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800994e:	4803      	ldr	r0, [pc, #12]	; (800995c <USART2_IRQHandler+0x18>)
 8009950:	f006 fbfc 	bl	801014c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009954:	bf00      	nop
 8009956:	bd80      	pop	{r7, pc}
 8009958:	200004f0 	.word	0x200004f0
 800995c:	20000c2c 	.word	0x20000c2c

08009960 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8009964:	4802      	ldr	r0, [pc, #8]	; (8009970 <SPI3_IRQHandler+0x10>)
 8009966:	f005 fd53 	bl	800f410 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800996a:	bf00      	nop
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	200008e0 	.word	0x200008e0

08009974 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma1);
 8009978:	4802      	ldr	r0, [pc, #8]	; (8009984 <DMA2_Stream2_IRQHandler+0x10>)
 800997a:	f000 fa3b 	bl	8009df4 <UARTDMA_DmaReceiveIrqHandler>
	return;
 800997e:	bf00      	nop
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	200006bc 	.word	0x200006bc

08009988 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800998c:	4802      	ldr	r0, [pc, #8]	; (8009998 <DMA2_Stream7_IRQHandler+0x10>)
 800998e:	f001 f967 	bl	800ac60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8009992:	bf00      	nop
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	20000ac8 	.word	0x20000ac8

0800999c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800999c:	b480      	push	{r7}
 800999e:	af00      	add	r7, sp, #0
	return 1;
 80099a0:	2301      	movs	r3, #1
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <_kill>:

int _kill(int pid, int sig)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80099b6:	f007 fc15 	bl	80111e4 <__errno>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2216      	movs	r2, #22
 80099be:	601a      	str	r2, [r3, #0]
	return -1;
 80099c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <_exit>:

void _exit (int status)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80099d4:	f04f 31ff 	mov.w	r1, #4294967295
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f7ff ffe7 	bl	80099ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80099de:	e7fe      	b.n	80099de <_exit+0x12>

080099e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80099ec:	2300      	movs	r3, #0
 80099ee:	617b      	str	r3, [r7, #20]
 80099f0:	e00a      	b.n	8009a08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80099f2:	f3af 8000 	nop.w
 80099f6:	4601      	mov	r1, r0
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	1c5a      	adds	r2, r3, #1
 80099fc:	60ba      	str	r2, [r7, #8]
 80099fe:	b2ca      	uxtb	r2, r1
 8009a00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	3301      	adds	r3, #1
 8009a06:	617b      	str	r3, [r7, #20]
 8009a08:	697a      	ldr	r2, [r7, #20]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	dbf0      	blt.n	80099f2 <_read+0x12>
	}

return len;
 8009a10:	687b      	ldr	r3, [r7, #4]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3718      	adds	r7, #24
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b086      	sub	sp, #24
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	60f8      	str	r0, [r7, #12]
 8009a22:	60b9      	str	r1, [r7, #8]
 8009a24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a26:	2300      	movs	r3, #0
 8009a28:	617b      	str	r3, [r7, #20]
 8009a2a:	e009      	b.n	8009a40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	1c5a      	adds	r2, r3, #1
 8009a30:	60ba      	str	r2, [r7, #8]
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	4618      	mov	r0, r3
 8009a36:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	617b      	str	r3, [r7, #20]
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	dbf1      	blt.n	8009a2c <_write+0x12>
	}
	return len;
 8009a48:	687b      	ldr	r3, [r7, #4]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3718      	adds	r7, #24
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <_close>:

int _close(int file)
{
 8009a52:	b480      	push	{r7}
 8009a54:	b083      	sub	sp, #12
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
	return -1;
 8009a5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	370c      	adds	r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009a6a:	b480      	push	{r7}
 8009a6c:	b083      	sub	sp, #12
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009a7a:	605a      	str	r2, [r3, #4]
	return 0;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	370c      	adds	r7, #12
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr

08009a8a <_isatty>:

int _isatty(int file)
{
 8009a8a:	b480      	push	{r7}
 8009a8c:	b083      	sub	sp, #12
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
	return 1;
 8009a92:	2301      	movs	r3, #1
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b085      	sub	sp, #20
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]
	return 0;
 8009aac:	2300      	movs	r3, #0
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3714      	adds	r7, #20
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr
	...

08009abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009ac4:	4a14      	ldr	r2, [pc, #80]	; (8009b18 <_sbrk+0x5c>)
 8009ac6:	4b15      	ldr	r3, [pc, #84]	; (8009b1c <_sbrk+0x60>)
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009ad0:	4b13      	ldr	r3, [pc, #76]	; (8009b20 <_sbrk+0x64>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d102      	bne.n	8009ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009ad8:	4b11      	ldr	r3, [pc, #68]	; (8009b20 <_sbrk+0x64>)
 8009ada:	4a12      	ldr	r2, [pc, #72]	; (8009b24 <_sbrk+0x68>)
 8009adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009ade:	4b10      	ldr	r3, [pc, #64]	; (8009b20 <_sbrk+0x64>)
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	693a      	ldr	r2, [r7, #16]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d207      	bcs.n	8009afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009aec:	f007 fb7a 	bl	80111e4 <__errno>
 8009af0:	4603      	mov	r3, r0
 8009af2:	220c      	movs	r2, #12
 8009af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009af6:	f04f 33ff 	mov.w	r3, #4294967295
 8009afa:	e009      	b.n	8009b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009afc:	4b08      	ldr	r3, [pc, #32]	; (8009b20 <_sbrk+0x64>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009b02:	4b07      	ldr	r3, [pc, #28]	; (8009b20 <_sbrk+0x64>)
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4413      	add	r3, r2
 8009b0a:	4a05      	ldr	r2, [pc, #20]	; (8009b20 <_sbrk+0x64>)
 8009b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3718      	adds	r7, #24
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	20020000 	.word	0x20020000
 8009b1c:	00000400 	.word	0x00000400
 8009b20:	200002b4 	.word	0x200002b4
 8009b24:	20000c88 	.word	0x20000c88

08009b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009b2c:	4b06      	ldr	r3, [pc, #24]	; (8009b48 <SystemInit+0x20>)
 8009b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b32:	4a05      	ldr	r2, [pc, #20]	; (8009b48 <SystemInit+0x20>)
 8009b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009b3c:	bf00      	nop
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	e000ed00 	.word	0xe000ed00

08009b4c <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b08c      	sub	sp, #48	; 0x30
 8009b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009b52:	f107 030c 	add.w	r3, r7, #12
 8009b56:	2224      	movs	r2, #36	; 0x24
 8009b58:	2100      	movs	r1, #0
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f007 fb6c 	bl	8011238 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009b60:	1d3b      	adds	r3, r7, #4
 8009b62:	2200      	movs	r2, #0
 8009b64:	601a      	str	r2, [r3, #0]
 8009b66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009b68:	4b21      	ldr	r3, [pc, #132]	; (8009bf0 <MX_TIM2_Init+0xa4>)
 8009b6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009b6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009b70:	4b1f      	ldr	r3, [pc, #124]	; (8009bf0 <MX_TIM2_Init+0xa4>)
 8009b72:	2200      	movs	r2, #0
 8009b74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b76:	4b1e      	ldr	r3, [pc, #120]	; (8009bf0 <MX_TIM2_Init+0xa4>)
 8009b78:	2200      	movs	r2, #0
 8009b7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8009b7c:	4b1c      	ldr	r3, [pc, #112]	; (8009bf0 <MX_TIM2_Init+0xa4>)
 8009b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009b84:	4b1a      	ldr	r3, [pc, #104]	; (8009bf0 <MX_TIM2_Init+0xa4>)
 8009b86:	2200      	movs	r2, #0
 8009b88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b8a:	4b19      	ldr	r3, [pc, #100]	; (8009bf0 <MX_TIM2_Init+0xa4>)
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8009b90:	2301      	movs	r3, #1
 8009b92:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009b94:	2300      	movs	r3, #0
 8009b96:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009bac:	2300      	movs	r3, #0
 8009bae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8009bb4:	f107 030c 	add.w	r3, r7, #12
 8009bb8:	4619      	mov	r1, r3
 8009bba:	480d      	ldr	r0, [pc, #52]	; (8009bf0 <MX_TIM2_Init+0xa4>)
 8009bbc:	f005 fef1 	bl	800f9a2 <HAL_TIM_Encoder_Init>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d001      	beq.n	8009bca <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8009bc6:	f7fc f8f3 	bl	8005db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009bd2:	1d3b      	adds	r3, r7, #4
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	4806      	ldr	r0, [pc, #24]	; (8009bf0 <MX_TIM2_Init+0xa4>)
 8009bd8:	f006 f93a 	bl	800fe50 <HAL_TIMEx_MasterConfigSynchronization>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8009be2:	f7fc f8e5 	bl	8005db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8009be6:	bf00      	nop
 8009be8:	3730      	adds	r7, #48	; 0x30
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	20000a20 	.word	0x20000a20

08009bf4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8009bf8:	4b0e      	ldr	r3, [pc, #56]	; (8009c34 <MX_TIM10_Init+0x40>)
 8009bfa:	4a0f      	ldr	r2, [pc, #60]	; (8009c38 <MX_TIM10_Init+0x44>)
 8009bfc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8009bfe:	4b0d      	ldr	r3, [pc, #52]	; (8009c34 <MX_TIM10_Init+0x40>)
 8009c00:	f242 720f 	movw	r2, #9999	; 0x270f
 8009c04:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c06:	4b0b      	ldr	r3, [pc, #44]	; (8009c34 <MX_TIM10_Init+0x40>)
 8009c08:	2200      	movs	r2, #0
 8009c0a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8009c0c:	4b09      	ldr	r3, [pc, #36]	; (8009c34 <MX_TIM10_Init+0x40>)
 8009c0e:	f242 720f 	movw	r2, #9999	; 0x270f
 8009c12:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c14:	4b07      	ldr	r3, [pc, #28]	; (8009c34 <MX_TIM10_Init+0x40>)
 8009c16:	2200      	movs	r2, #0
 8009c18:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c1a:	4b06      	ldr	r3, [pc, #24]	; (8009c34 <MX_TIM10_Init+0x40>)
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8009c20:	4804      	ldr	r0, [pc, #16]	; (8009c34 <MX_TIM10_Init+0x40>)
 8009c22:	f005 fddd 	bl	800f7e0 <HAL_TIM_Base_Init>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d001      	beq.n	8009c30 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8009c2c:	f7fc f8c0 	bl	8005db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8009c30:	bf00      	nop
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	20000990 	.word	0x20000990
 8009c38:	40014400 	.word	0x40014400

08009c3c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8009c40:	4b0f      	ldr	r3, [pc, #60]	; (8009c80 <MX_TIM11_Init+0x44>)
 8009c42:	4a10      	ldr	r2, [pc, #64]	; (8009c84 <MX_TIM11_Init+0x48>)
 8009c44:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8009c46:	4b0e      	ldr	r3, [pc, #56]	; (8009c80 <MX_TIM11_Init+0x44>)
 8009c48:	f643 2297 	movw	r2, #14999	; 0x3a97
 8009c4c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c4e:	4b0c      	ldr	r3, [pc, #48]	; (8009c80 <MX_TIM11_Init+0x44>)
 8009c50:	2200      	movs	r2, #0
 8009c52:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 8009c54:	4b0a      	ldr	r3, [pc, #40]	; (8009c80 <MX_TIM11_Init+0x44>)
 8009c56:	f247 522f 	movw	r2, #29999	; 0x752f
 8009c5a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8009c5c:	4b08      	ldr	r3, [pc, #32]	; (8009c80 <MX_TIM11_Init+0x44>)
 8009c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c62:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c64:	4b06      	ldr	r3, [pc, #24]	; (8009c80 <MX_TIM11_Init+0x44>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8009c6a:	4805      	ldr	r0, [pc, #20]	; (8009c80 <MX_TIM11_Init+0x44>)
 8009c6c:	f005 fdb8 	bl	800f7e0 <HAL_TIM_Base_Init>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d001      	beq.n	8009c7a <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 8009c76:	f7fc f89b 	bl	8005db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8009c7a:	bf00      	nop
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	200009d8 	.word	0x200009d8
 8009c84:	40014800 	.word	0x40014800

08009c88 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b08a      	sub	sp, #40	; 0x28
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c90:	f107 0314 	add.w	r3, r7, #20
 8009c94:	2200      	movs	r2, #0
 8009c96:	601a      	str	r2, [r3, #0]
 8009c98:	605a      	str	r2, [r3, #4]
 8009c9a:	609a      	str	r2, [r3, #8]
 8009c9c:	60da      	str	r2, [r3, #12]
 8009c9e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ca8:	d12b      	bne.n	8009d02 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009caa:	2300      	movs	r3, #0
 8009cac:	613b      	str	r3, [r7, #16]
 8009cae:	4b17      	ldr	r3, [pc, #92]	; (8009d0c <HAL_TIM_Encoder_MspInit+0x84>)
 8009cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb2:	4a16      	ldr	r2, [pc, #88]	; (8009d0c <HAL_TIM_Encoder_MspInit+0x84>)
 8009cb4:	f043 0301 	orr.w	r3, r3, #1
 8009cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8009cba:	4b14      	ldr	r3, [pc, #80]	; (8009d0c <HAL_TIM_Encoder_MspInit+0x84>)
 8009cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cbe:	f003 0301 	and.w	r3, r3, #1
 8009cc2:	613b      	str	r3, [r7, #16]
 8009cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	60fb      	str	r3, [r7, #12]
 8009cca:	4b10      	ldr	r3, [pc, #64]	; (8009d0c <HAL_TIM_Encoder_MspInit+0x84>)
 8009ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cce:	4a0f      	ldr	r2, [pc, #60]	; (8009d0c <HAL_TIM_Encoder_MspInit+0x84>)
 8009cd0:	f043 0301 	orr.w	r3, r3, #1
 8009cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8009cd6:	4b0d      	ldr	r3, [pc, #52]	; (8009d0c <HAL_TIM_Encoder_MspInit+0x84>)
 8009cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cda:	f003 0301 	and.w	r3, r3, #1
 8009cde:	60fb      	str	r3, [r7, #12]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_ENC_DT_Pin|TIM2_ENC_CLK_Pin;
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ce6:	2302      	movs	r3, #2
 8009ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cea:	2300      	movs	r3, #0
 8009cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009cf6:	f107 0314 	add.w	r3, r7, #20
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	4804      	ldr	r0, [pc, #16]	; (8009d10 <HAL_TIM_Encoder_MspInit+0x88>)
 8009cfe:	f001 fa27 	bl	800b150 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8009d02:	bf00      	nop
 8009d04:	3728      	adds	r7, #40	; 0x28
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	40023800 	.word	0x40023800
 8009d10:	40020000 	.word	0x40020000

08009d14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a1c      	ldr	r2, [pc, #112]	; (8009d94 <HAL_TIM_Base_MspInit+0x80>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d116      	bne.n	8009d54 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8009d26:	2300      	movs	r3, #0
 8009d28:	60fb      	str	r3, [r7, #12]
 8009d2a:	4b1b      	ldr	r3, [pc, #108]	; (8009d98 <HAL_TIM_Base_MspInit+0x84>)
 8009d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d2e:	4a1a      	ldr	r2, [pc, #104]	; (8009d98 <HAL_TIM_Base_MspInit+0x84>)
 8009d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d34:	6453      	str	r3, [r2, #68]	; 0x44
 8009d36:	4b18      	ldr	r3, [pc, #96]	; (8009d98 <HAL_TIM_Base_MspInit+0x84>)
 8009d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d3e:	60fb      	str	r3, [r7, #12]
 8009d40:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8009d42:	2200      	movs	r2, #0
 8009d44:	2100      	movs	r1, #0
 8009d46:	2019      	movs	r0, #25
 8009d48:	f000 fd91 	bl	800a86e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009d4c:	2019      	movs	r0, #25
 8009d4e:	f000 fdaa 	bl	800a8a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8009d52:	e01a      	b.n	8009d8a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a10      	ldr	r2, [pc, #64]	; (8009d9c <HAL_TIM_Base_MspInit+0x88>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d115      	bne.n	8009d8a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8009d5e:	2300      	movs	r3, #0
 8009d60:	60bb      	str	r3, [r7, #8]
 8009d62:	4b0d      	ldr	r3, [pc, #52]	; (8009d98 <HAL_TIM_Base_MspInit+0x84>)
 8009d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d66:	4a0c      	ldr	r2, [pc, #48]	; (8009d98 <HAL_TIM_Base_MspInit+0x84>)
 8009d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8009d6e:	4b0a      	ldr	r3, [pc, #40]	; (8009d98 <HAL_TIM_Base_MspInit+0x84>)
 8009d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d76:	60bb      	str	r3, [r7, #8]
 8009d78:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	201a      	movs	r0, #26
 8009d80:	f000 fd75 	bl	800a86e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8009d84:	201a      	movs	r0, #26
 8009d86:	f000 fd8e 	bl	800a8a6 <HAL_NVIC_EnableIRQ>
}
 8009d8a:	bf00      	nop
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	40014400 	.word	0x40014400
 8009d98:	40023800 	.word	0x40023800
 8009d9c:	40014800 	.word	0x40014800

08009da0 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b085      	sub	sp, #20
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0310 	and.w	r3, r3, #16
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d017      	beq.n	8009de8 <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f022 0201 	bic.w	r2, r2, #1
 8009de2:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	60fb      	str	r3, [r7, #12]
	}
}
 8009de8:	bf00      	nop
 8009dea:	3714      	adds	r7, #20
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b086      	sub	sp, #24
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e04:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 0310 	and.w	r3, r3, #16
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d056      	beq.n	8009ec6 <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e20:	2220      	movs	r2, #32
 8009e22:	409a      	lsls	r2, r3
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8009e38:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	3304      	adds	r3, #4
 8009e3e:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8009e40:	2300      	movs	r3, #0
 8009e42:	82fb      	strh	r3, [r7, #22]
 8009e44:	e01a      	b.n	8009e7c <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8009e4c:	8afb      	ldrh	r3, [r7, #22]
 8009e4e:	68ba      	ldr	r2, [r7, #8]
 8009e50:	4413      	add	r3, r2
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	4619      	mov	r1, r3
 8009e56:	f7ff fb14 	bl	8009482 <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 8009e5a:	8afb      	ldrh	r3, [r7, #22]
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	4413      	add	r3, r2
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	2b0a      	cmp	r3, #10
 8009e64:	d107      	bne.n	8009e76 <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	b2da      	uxtb	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8009e76:	8afb      	ldrh	r3, [r7, #22]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	82fb      	strh	r3, [r7, #22]
 8009e7c:	8afa      	ldrh	r2, [r7, #22]
 8009e7e:	89fb      	ldrh	r3, [r7, #14]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d3e0      	bcc.n	8009e46 <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e8c:	223f      	movs	r2, #63	; 0x3f
 8009e8e:	409a      	lsls	r2, r3
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	1d1a      	adds	r2, r3, #4
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2240      	movs	r2, #64	; 0x40
 8009eac:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f042 0201 	orr.w	r2, r2, #1
 8009ec4:	601a      	str	r2, [r3, #0]
	}
}
 8009ec6:	bf00      	nop
 8009ec8:	3718      	adds	r7, #24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b082      	sub	sp, #8
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f203 1347 	addw	r3, r3, #327	; 0x147
 8009ee0:	78fa      	ldrb	r2, [r7, #3]
 8009ee2:	4611      	mov	r1, r2
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7ff facc 	bl	8009482 <RB_Write>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d001      	beq.n	8009ef4 <UARTDMA_PutCharToTxBuffer+0x26>
	{
		return 1; // Error code
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e000      	b.n	8009ef6 <UARTDMA_PutCharToTxBuffer+0x28>
	}
	return 0; // Success code
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b084      	sub	sp, #16
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d01f      	beq.n	8009f56 <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8009f16:	e013      	b.n	8009f40 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	2b0a      	cmp	r3, #10
 8009f1e:	d10c      	bne.n	8009f3a <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2200      	movs	r2, #0
 8009f24:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	b2da      	uxtb	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				return 0; // Exit if end line
 8009f36:	2300      	movs	r3, #0
 8009f38:	e00e      	b.n	8009f58 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	3344      	adds	r3, #68	; 0x44
 8009f44:	68f9      	ldr	r1, [r7, #12]
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7ff fa72 	bl	8009430 <RB_Read>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d0e2      	beq.n	8009f18 <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 8009f52:	2300      	movs	r3, #0
 8009f54:	e000      	b.n	8009f58 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 8009f56:	2301      	movs	r3, #1
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8009f6e:	e012      	b.n	8009f96 <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 8009f70:	7afb      	ldrb	r3, [r7, #11]
 8009f72:	4619      	mov	r1, r3
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f7ff ffaa 	bl	8009ece <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 8009f80:	7afb      	ldrb	r3, [r7, #11]
 8009f82:	2b0a      	cmp	r3, #10
 8009f84:	d107      	bne.n	8009f96 <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	72fb      	strb	r3, [r7, #11]
 8009f9c:	7afb      	ldrb	r3, [r7, #11]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d1e6      	bne.n	8009f70 <UARTDMA_Print+0x10>
		}
	}
}
 8009fa2:	bf00      	nop
 8009fa4:	bf00      	nop
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d001      	beq.n	8009fc2 <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e000      	b.n	8009fc4 <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 8009fc2:	2300      	movs	r3, #0
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 8009fd8:	2300      	movs	r3, #0
 8009fda:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	d028      	beq.n	800a03e <UARTDMA_TransmitEvent+0x6e>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8009fec:	e013      	b.n	800a016 <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 8009fee:	7b7b      	ldrb	r3, [r7, #13]
 8009ff0:	2b0a      	cmp	r3, #10
 8009ff2:	d107      	bne.n	800a004 <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8009ffa:	3b01      	subs	r3, #1
 8009ffc:	b2da      	uxtb	r2, r3
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 800a004:	89fb      	ldrh	r3, [r7, #14]
 800a006:	1c5a      	adds	r2, r3, #1
 800a008:	81fa      	strh	r2, [r7, #14]
 800a00a:	4619      	mov	r1, r3
 800a00c:	7b7a      	ldrb	r2, [r7, #13]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	440b      	add	r3, r1
 800a012:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f203 1347 	addw	r3, r3, #327	; 0x147
 800a01c:	f107 020d 	add.w	r2, r7, #13
 800a020:	4611      	mov	r1, r2
 800a022:	4618      	mov	r0, r3
 800a024:	f7ff fa04 	bl	8009430 <RB_Read>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d0df      	beq.n	8009fee <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6818      	ldr	r0, [r3, #0]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	33c7      	adds	r3, #199	; 0xc7
 800a036:	89fa      	ldrh	r2, [r7, #14]
 800a038:	4619      	mov	r1, r3
 800a03a:	f005 ffd9 	bl	800fff0 <HAL_UART_Transmit_DMA>
	}
}
 800a03e:	bf00      	nop
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b082      	sub	sp, #8
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
 800a04e:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68da      	ldr	r2, [r3, #12]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f042 0210 	orr.w	r2, r2, #16
 800a068:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f042 0210 	orr.w	r2, r2, #16
 800a080:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f042 0210 	orr.w	r2, r2, #16
 800a098:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6818      	ldr	r0, [r3, #0]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	3304      	adds	r3, #4
 800a0a2:	2240      	movs	r2, #64	; 0x40
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	f006 f821 	bl	80100ec <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f022 0208 	bic.w	r2, r2, #8
 800a0c0:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f022 0208 	bic.w	r2, r2, #8
 800a0d8:	601a      	str	r2, [r3, #0]
}
 800a0da:	bf00      	nop
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
	...

0800a0e4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a0e8:	4b11      	ldr	r3, [pc, #68]	; (800a130 <MX_USART1_UART_Init+0x4c>)
 800a0ea:	4a12      	ldr	r2, [pc, #72]	; (800a134 <MX_USART1_UART_Init+0x50>)
 800a0ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a0ee:	4b10      	ldr	r3, [pc, #64]	; (800a130 <MX_USART1_UART_Init+0x4c>)
 800a0f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a0f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a0f6:	4b0e      	ldr	r3, [pc, #56]	; (800a130 <MX_USART1_UART_Init+0x4c>)
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a0fc:	4b0c      	ldr	r3, [pc, #48]	; (800a130 <MX_USART1_UART_Init+0x4c>)
 800a0fe:	2200      	movs	r2, #0
 800a100:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a102:	4b0b      	ldr	r3, [pc, #44]	; (800a130 <MX_USART1_UART_Init+0x4c>)
 800a104:	2200      	movs	r2, #0
 800a106:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a108:	4b09      	ldr	r3, [pc, #36]	; (800a130 <MX_USART1_UART_Init+0x4c>)
 800a10a:	220c      	movs	r2, #12
 800a10c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a10e:	4b08      	ldr	r3, [pc, #32]	; (800a130 <MX_USART1_UART_Init+0x4c>)
 800a110:	2200      	movs	r2, #0
 800a112:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a114:	4b06      	ldr	r3, [pc, #24]	; (800a130 <MX_USART1_UART_Init+0x4c>)
 800a116:	2200      	movs	r2, #0
 800a118:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a11a:	4805      	ldr	r0, [pc, #20]	; (800a130 <MX_USART1_UART_Init+0x4c>)
 800a11c:	f005 ff1a 	bl	800ff54 <HAL_UART_Init>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d001      	beq.n	800a12a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a126:	f7fb fe43 	bl	8005db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a12a:	bf00      	nop
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	20000be8 	.word	0x20000be8
 800a134:	40011000 	.word	0x40011000

0800a138 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a13c:	4b11      	ldr	r3, [pc, #68]	; (800a184 <MX_USART2_UART_Init+0x4c>)
 800a13e:	4a12      	ldr	r2, [pc, #72]	; (800a188 <MX_USART2_UART_Init+0x50>)
 800a140:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a142:	4b10      	ldr	r3, [pc, #64]	; (800a184 <MX_USART2_UART_Init+0x4c>)
 800a144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a148:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a14a:	4b0e      	ldr	r3, [pc, #56]	; (800a184 <MX_USART2_UART_Init+0x4c>)
 800a14c:	2200      	movs	r2, #0
 800a14e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a150:	4b0c      	ldr	r3, [pc, #48]	; (800a184 <MX_USART2_UART_Init+0x4c>)
 800a152:	2200      	movs	r2, #0
 800a154:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a156:	4b0b      	ldr	r3, [pc, #44]	; (800a184 <MX_USART2_UART_Init+0x4c>)
 800a158:	2200      	movs	r2, #0
 800a15a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a15c:	4b09      	ldr	r3, [pc, #36]	; (800a184 <MX_USART2_UART_Init+0x4c>)
 800a15e:	220c      	movs	r2, #12
 800a160:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a162:	4b08      	ldr	r3, [pc, #32]	; (800a184 <MX_USART2_UART_Init+0x4c>)
 800a164:	2200      	movs	r2, #0
 800a166:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a168:	4b06      	ldr	r3, [pc, #24]	; (800a184 <MX_USART2_UART_Init+0x4c>)
 800a16a:	2200      	movs	r2, #0
 800a16c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a16e:	4805      	ldr	r0, [pc, #20]	; (800a184 <MX_USART2_UART_Init+0x4c>)
 800a170:	f005 fef0 	bl	800ff54 <HAL_UART_Init>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d001      	beq.n	800a17e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800a17a:	f7fb fe19 	bl	8005db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a17e:	bf00      	nop
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	20000c2c 	.word	0x20000c2c
 800a188:	40004400 	.word	0x40004400

0800a18c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b08c      	sub	sp, #48	; 0x30
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a194:	f107 031c 	add.w	r3, r7, #28
 800a198:	2200      	movs	r2, #0
 800a19a:	601a      	str	r2, [r3, #0]
 800a19c:	605a      	str	r2, [r3, #4]
 800a19e:	609a      	str	r2, [r3, #8]
 800a1a0:	60da      	str	r2, [r3, #12]
 800a1a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a59      	ldr	r2, [pc, #356]	; (800a310 <HAL_UART_MspInit+0x184>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	f040 80c0 	bne.w	800a330 <HAL_UART_MspInit+0x1a4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	61bb      	str	r3, [r7, #24]
 800a1b4:	4b57      	ldr	r3, [pc, #348]	; (800a314 <HAL_UART_MspInit+0x188>)
 800a1b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1b8:	4a56      	ldr	r2, [pc, #344]	; (800a314 <HAL_UART_MspInit+0x188>)
 800a1ba:	f043 0310 	orr.w	r3, r3, #16
 800a1be:	6453      	str	r3, [r2, #68]	; 0x44
 800a1c0:	4b54      	ldr	r3, [pc, #336]	; (800a314 <HAL_UART_MspInit+0x188>)
 800a1c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1c4:	f003 0310 	and.w	r3, r3, #16
 800a1c8:	61bb      	str	r3, [r7, #24]
 800a1ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	617b      	str	r3, [r7, #20]
 800a1d0:	4b50      	ldr	r3, [pc, #320]	; (800a314 <HAL_UART_MspInit+0x188>)
 800a1d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1d4:	4a4f      	ldr	r2, [pc, #316]	; (800a314 <HAL_UART_MspInit+0x188>)
 800a1d6:	f043 0301 	orr.w	r3, r3, #1
 800a1da:	6313      	str	r3, [r2, #48]	; 0x30
 800a1dc:	4b4d      	ldr	r3, [pc, #308]	; (800a314 <HAL_UART_MspInit+0x188>)
 800a1de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e0:	f003 0301 	and.w	r3, r3, #1
 800a1e4:	617b      	str	r3, [r7, #20]
 800a1e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	613b      	str	r3, [r7, #16]
 800a1ec:	4b49      	ldr	r3, [pc, #292]	; (800a314 <HAL_UART_MspInit+0x188>)
 800a1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f0:	4a48      	ldr	r2, [pc, #288]	; (800a314 <HAL_UART_MspInit+0x188>)
 800a1f2:	f043 0302 	orr.w	r3, r3, #2
 800a1f6:	6313      	str	r3, [r2, #48]	; 0x30
 800a1f8:	4b46      	ldr	r3, [pc, #280]	; (800a314 <HAL_UART_MspInit+0x188>)
 800a1fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1fc:	f003 0302 	and.w	r3, r3, #2
 800a200:	613b      	str	r3, [r7, #16]
 800a202:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_ESP_Pin;
 800a204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a20a:	2302      	movs	r3, #2
 800a20c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a20e:	2300      	movs	r3, #0
 800a210:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a212:	2303      	movs	r3, #3
 800a214:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a216:	2307      	movs	r3, #7
 800a218:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_ESP_GPIO_Port, &GPIO_InitStruct);
 800a21a:	f107 031c 	add.w	r3, r7, #28
 800a21e:	4619      	mov	r1, r3
 800a220:	483d      	ldr	r0, [pc, #244]	; (800a318 <HAL_UART_MspInit+0x18c>)
 800a222:	f000 ff95 	bl	800b150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_ESP_Pin;
 800a226:	2380      	movs	r3, #128	; 0x80
 800a228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a22a:	2302      	movs	r3, #2
 800a22c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a22e:	2300      	movs	r3, #0
 800a230:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a232:	2303      	movs	r3, #3
 800a234:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a236:	2307      	movs	r3, #7
 800a238:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_ESP_GPIO_Port, &GPIO_InitStruct);
 800a23a:	f107 031c 	add.w	r3, r7, #28
 800a23e:	4619      	mov	r1, r3
 800a240:	4836      	ldr	r0, [pc, #216]	; (800a31c <HAL_UART_MspInit+0x190>)
 800a242:	f000 ff85 	bl	800b150 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800a246:	4b36      	ldr	r3, [pc, #216]	; (800a320 <HAL_UART_MspInit+0x194>)
 800a248:	4a36      	ldr	r2, [pc, #216]	; (800a324 <HAL_UART_MspInit+0x198>)
 800a24a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800a24c:	4b34      	ldr	r3, [pc, #208]	; (800a320 <HAL_UART_MspInit+0x194>)
 800a24e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a252:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a254:	4b32      	ldr	r3, [pc, #200]	; (800a320 <HAL_UART_MspInit+0x194>)
 800a256:	2200      	movs	r2, #0
 800a258:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a25a:	4b31      	ldr	r3, [pc, #196]	; (800a320 <HAL_UART_MspInit+0x194>)
 800a25c:	2200      	movs	r2, #0
 800a25e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a260:	4b2f      	ldr	r3, [pc, #188]	; (800a320 <HAL_UART_MspInit+0x194>)
 800a262:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a266:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a268:	4b2d      	ldr	r3, [pc, #180]	; (800a320 <HAL_UART_MspInit+0x194>)
 800a26a:	2200      	movs	r2, #0
 800a26c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a26e:	4b2c      	ldr	r3, [pc, #176]	; (800a320 <HAL_UART_MspInit+0x194>)
 800a270:	2200      	movs	r2, #0
 800a272:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800a274:	4b2a      	ldr	r3, [pc, #168]	; (800a320 <HAL_UART_MspInit+0x194>)
 800a276:	2200      	movs	r2, #0
 800a278:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a27a:	4b29      	ldr	r3, [pc, #164]	; (800a320 <HAL_UART_MspInit+0x194>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a280:	4b27      	ldr	r3, [pc, #156]	; (800a320 <HAL_UART_MspInit+0x194>)
 800a282:	2200      	movs	r2, #0
 800a284:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800a286:	4826      	ldr	r0, [pc, #152]	; (800a320 <HAL_UART_MspInit+0x194>)
 800a288:	f000 fb52 	bl	800a930 <HAL_DMA_Init>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800a292:	f7fb fd8d 	bl	8005db0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4a21      	ldr	r2, [pc, #132]	; (800a320 <HAL_UART_MspInit+0x194>)
 800a29a:	639a      	str	r2, [r3, #56]	; 0x38
 800a29c:	4a20      	ldr	r2, [pc, #128]	; (800a320 <HAL_UART_MspInit+0x194>)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800a2a2:	4b21      	ldr	r3, [pc, #132]	; (800a328 <HAL_UART_MspInit+0x19c>)
 800a2a4:	4a21      	ldr	r2, [pc, #132]	; (800a32c <HAL_UART_MspInit+0x1a0>)
 800a2a6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800a2a8:	4b1f      	ldr	r3, [pc, #124]	; (800a328 <HAL_UART_MspInit+0x19c>)
 800a2aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a2ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a2b0:	4b1d      	ldr	r3, [pc, #116]	; (800a328 <HAL_UART_MspInit+0x19c>)
 800a2b2:	2240      	movs	r2, #64	; 0x40
 800a2b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a2b6:	4b1c      	ldr	r3, [pc, #112]	; (800a328 <HAL_UART_MspInit+0x19c>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a2bc:	4b1a      	ldr	r3, [pc, #104]	; (800a328 <HAL_UART_MspInit+0x19c>)
 800a2be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a2c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a2c4:	4b18      	ldr	r3, [pc, #96]	; (800a328 <HAL_UART_MspInit+0x19c>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a2ca:	4b17      	ldr	r3, [pc, #92]	; (800a328 <HAL_UART_MspInit+0x19c>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800a2d0:	4b15      	ldr	r3, [pc, #84]	; (800a328 <HAL_UART_MspInit+0x19c>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a2d6:	4b14      	ldr	r3, [pc, #80]	; (800a328 <HAL_UART_MspInit+0x19c>)
 800a2d8:	2200      	movs	r2, #0
 800a2da:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a2dc:	4b12      	ldr	r3, [pc, #72]	; (800a328 <HAL_UART_MspInit+0x19c>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800a2e2:	4811      	ldr	r0, [pc, #68]	; (800a328 <HAL_UART_MspInit+0x19c>)
 800a2e4:	f000 fb24 	bl	800a930 <HAL_DMA_Init>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d001      	beq.n	800a2f2 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 800a2ee:	f7fb fd5f 	bl	8005db0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a0c      	ldr	r2, [pc, #48]	; (800a328 <HAL_UART_MspInit+0x19c>)
 800a2f6:	635a      	str	r2, [r3, #52]	; 0x34
 800a2f8:	4a0b      	ldr	r2, [pc, #44]	; (800a328 <HAL_UART_MspInit+0x19c>)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800a2fe:	2200      	movs	r2, #0
 800a300:	2100      	movs	r1, #0
 800a302:	2025      	movs	r0, #37	; 0x25
 800a304:	f000 fab3 	bl	800a86e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a308:	2025      	movs	r0, #37	; 0x25
 800a30a:	f000 facc 	bl	800a8a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800a30e:	e09d      	b.n	800a44c <HAL_UART_MspInit+0x2c0>
 800a310:	40011000 	.word	0x40011000
 800a314:	40023800 	.word	0x40023800
 800a318:	40020000 	.word	0x40020000
 800a31c:	40020400 	.word	0x40020400
 800a320:	20000b28 	.word	0x20000b28
 800a324:	40026440 	.word	0x40026440
 800a328:	20000ac8 	.word	0x20000ac8
 800a32c:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART2)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a47      	ldr	r2, [pc, #284]	; (800a454 <HAL_UART_MspInit+0x2c8>)
 800a336:	4293      	cmp	r3, r2
 800a338:	f040 8088 	bne.w	800a44c <HAL_UART_MspInit+0x2c0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a33c:	2300      	movs	r3, #0
 800a33e:	60fb      	str	r3, [r7, #12]
 800a340:	4b45      	ldr	r3, [pc, #276]	; (800a458 <HAL_UART_MspInit+0x2cc>)
 800a342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a344:	4a44      	ldr	r2, [pc, #272]	; (800a458 <HAL_UART_MspInit+0x2cc>)
 800a346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a34a:	6413      	str	r3, [r2, #64]	; 0x40
 800a34c:	4b42      	ldr	r3, [pc, #264]	; (800a458 <HAL_UART_MspInit+0x2cc>)
 800a34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a354:	60fb      	str	r3, [r7, #12]
 800a356:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a358:	2300      	movs	r3, #0
 800a35a:	60bb      	str	r3, [r7, #8]
 800a35c:	4b3e      	ldr	r3, [pc, #248]	; (800a458 <HAL_UART_MspInit+0x2cc>)
 800a35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a360:	4a3d      	ldr	r2, [pc, #244]	; (800a458 <HAL_UART_MspInit+0x2cc>)
 800a362:	f043 0301 	orr.w	r3, r3, #1
 800a366:	6313      	str	r3, [r2, #48]	; 0x30
 800a368:	4b3b      	ldr	r3, [pc, #236]	; (800a458 <HAL_UART_MspInit+0x2cc>)
 800a36a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a36c:	f003 0301 	and.w	r3, r3, #1
 800a370:	60bb      	str	r3, [r7, #8]
 800a372:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_2uC_Pin|USART2_RX_2uC_Pin;
 800a374:	230c      	movs	r3, #12
 800a376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a378:	2302      	movs	r3, #2
 800a37a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a37c:	2300      	movs	r3, #0
 800a37e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a380:	2303      	movs	r3, #3
 800a382:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a384:	2307      	movs	r3, #7
 800a386:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a388:	f107 031c 	add.w	r3, r7, #28
 800a38c:	4619      	mov	r1, r3
 800a38e:	4833      	ldr	r0, [pc, #204]	; (800a45c <HAL_UART_MspInit+0x2d0>)
 800a390:	f000 fede 	bl	800b150 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800a394:	4b32      	ldr	r3, [pc, #200]	; (800a460 <HAL_UART_MspInit+0x2d4>)
 800a396:	4a33      	ldr	r2, [pc, #204]	; (800a464 <HAL_UART_MspInit+0x2d8>)
 800a398:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800a39a:	4b31      	ldr	r3, [pc, #196]	; (800a460 <HAL_UART_MspInit+0x2d4>)
 800a39c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a3a0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a3a2:	4b2f      	ldr	r3, [pc, #188]	; (800a460 <HAL_UART_MspInit+0x2d4>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a3a8:	4b2d      	ldr	r3, [pc, #180]	; (800a460 <HAL_UART_MspInit+0x2d4>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a3ae:	4b2c      	ldr	r3, [pc, #176]	; (800a460 <HAL_UART_MspInit+0x2d4>)
 800a3b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a3b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a3b6:	4b2a      	ldr	r3, [pc, #168]	; (800a460 <HAL_UART_MspInit+0x2d4>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a3bc:	4b28      	ldr	r3, [pc, #160]	; (800a460 <HAL_UART_MspInit+0x2d4>)
 800a3be:	2200      	movs	r2, #0
 800a3c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800a3c2:	4b27      	ldr	r3, [pc, #156]	; (800a460 <HAL_UART_MspInit+0x2d4>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a3c8:	4b25      	ldr	r3, [pc, #148]	; (800a460 <HAL_UART_MspInit+0x2d4>)
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a3ce:	4b24      	ldr	r3, [pc, #144]	; (800a460 <HAL_UART_MspInit+0x2d4>)
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800a3d4:	4822      	ldr	r0, [pc, #136]	; (800a460 <HAL_UART_MspInit+0x2d4>)
 800a3d6:	f000 faab 	bl	800a930 <HAL_DMA_Init>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d001      	beq.n	800a3e4 <HAL_UART_MspInit+0x258>
      Error_Handler();
 800a3e0:	f7fb fce6 	bl	8005db0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4a1e      	ldr	r2, [pc, #120]	; (800a460 <HAL_UART_MspInit+0x2d4>)
 800a3e8:	639a      	str	r2, [r3, #56]	; 0x38
 800a3ea:	4a1d      	ldr	r2, [pc, #116]	; (800a460 <HAL_UART_MspInit+0x2d4>)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800a3f0:	4b1d      	ldr	r3, [pc, #116]	; (800a468 <HAL_UART_MspInit+0x2dc>)
 800a3f2:	4a1e      	ldr	r2, [pc, #120]	; (800a46c <HAL_UART_MspInit+0x2e0>)
 800a3f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800a3f6:	4b1c      	ldr	r3, [pc, #112]	; (800a468 <HAL_UART_MspInit+0x2dc>)
 800a3f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a3fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a3fe:	4b1a      	ldr	r3, [pc, #104]	; (800a468 <HAL_UART_MspInit+0x2dc>)
 800a400:	2240      	movs	r2, #64	; 0x40
 800a402:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a404:	4b18      	ldr	r3, [pc, #96]	; (800a468 <HAL_UART_MspInit+0x2dc>)
 800a406:	2200      	movs	r2, #0
 800a408:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a40a:	4b17      	ldr	r3, [pc, #92]	; (800a468 <HAL_UART_MspInit+0x2dc>)
 800a40c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a410:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a412:	4b15      	ldr	r3, [pc, #84]	; (800a468 <HAL_UART_MspInit+0x2dc>)
 800a414:	2200      	movs	r2, #0
 800a416:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a418:	4b13      	ldr	r3, [pc, #76]	; (800a468 <HAL_UART_MspInit+0x2dc>)
 800a41a:	2200      	movs	r2, #0
 800a41c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800a41e:	4b12      	ldr	r3, [pc, #72]	; (800a468 <HAL_UART_MspInit+0x2dc>)
 800a420:	2200      	movs	r2, #0
 800a422:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a424:	4b10      	ldr	r3, [pc, #64]	; (800a468 <HAL_UART_MspInit+0x2dc>)
 800a426:	2200      	movs	r2, #0
 800a428:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a42a:	4b0f      	ldr	r3, [pc, #60]	; (800a468 <HAL_UART_MspInit+0x2dc>)
 800a42c:	2200      	movs	r2, #0
 800a42e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800a430:	480d      	ldr	r0, [pc, #52]	; (800a468 <HAL_UART_MspInit+0x2dc>)
 800a432:	f000 fa7d 	bl	800a930 <HAL_DMA_Init>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d001      	beq.n	800a440 <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 800a43c:	f7fb fcb8 	bl	8005db0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	4a09      	ldr	r2, [pc, #36]	; (800a468 <HAL_UART_MspInit+0x2dc>)
 800a444:	635a      	str	r2, [r3, #52]	; 0x34
 800a446:	4a08      	ldr	r2, [pc, #32]	; (800a468 <HAL_UART_MspInit+0x2dc>)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800a44c:	bf00      	nop
 800a44e:	3730      	adds	r7, #48	; 0x30
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	40004400 	.word	0x40004400
 800a458:	40023800 	.word	0x40023800
 800a45c:	40020000 	.word	0x40020000
 800a460:	20000a68 	.word	0x20000a68
 800a464:	40026088 	.word	0x40026088
 800a468:	20000b88 	.word	0x20000b88
 800a46c:	400260a0 	.word	0x400260a0

0800a470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800a470:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a4a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a474:	480d      	ldr	r0, [pc, #52]	; (800a4ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a476:	490e      	ldr	r1, [pc, #56]	; (800a4b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a478:	4a0e      	ldr	r2, [pc, #56]	; (800a4b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a47a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a47c:	e002      	b.n	800a484 <LoopCopyDataInit>

0800a47e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a47e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a482:	3304      	adds	r3, #4

0800a484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a488:	d3f9      	bcc.n	800a47e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a48a:	4a0b      	ldr	r2, [pc, #44]	; (800a4b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a48c:	4c0b      	ldr	r4, [pc, #44]	; (800a4bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800a48e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a490:	e001      	b.n	800a496 <LoopFillZerobss>

0800a492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a494:	3204      	adds	r2, #4

0800a496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a498:	d3fb      	bcc.n	800a492 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a49a:	f7ff fb45 	bl	8009b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a49e:	f006 fea7 	bl	80111f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a4a2:	f7fb fb3d 	bl	8005b20 <main>
  bx  lr    
 800a4a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800a4a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a4ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a4b0:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 800a4b4:	08029bf8 	.word	0x08029bf8
  ldr r2, =_sbss
 800a4b8:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 800a4bc:	20000c84 	.word	0x20000c84

0800a4c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a4c0:	e7fe      	b.n	800a4c0 <ADC_IRQHandler>
	...

0800a4c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a4c8:	4b0e      	ldr	r3, [pc, #56]	; (800a504 <HAL_Init+0x40>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a0d      	ldr	r2, [pc, #52]	; (800a504 <HAL_Init+0x40>)
 800a4ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a4d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a4d4:	4b0b      	ldr	r3, [pc, #44]	; (800a504 <HAL_Init+0x40>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a0a      	ldr	r2, [pc, #40]	; (800a504 <HAL_Init+0x40>)
 800a4da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a4de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a4e0:	4b08      	ldr	r3, [pc, #32]	; (800a504 <HAL_Init+0x40>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a07      	ldr	r2, [pc, #28]	; (800a504 <HAL_Init+0x40>)
 800a4e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a4ec:	2003      	movs	r0, #3
 800a4ee:	f000 f9b3 	bl	800a858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	f000 f808 	bl	800a508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a4f8:	f7ff f95e 	bl	80097b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	40023c00 	.word	0x40023c00

0800a508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a510:	4b12      	ldr	r3, [pc, #72]	; (800a55c <HAL_InitTick+0x54>)
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	4b12      	ldr	r3, [pc, #72]	; (800a560 <HAL_InitTick+0x58>)
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	4619      	mov	r1, r3
 800a51a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a51e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a522:	fbb2 f3f3 	udiv	r3, r2, r3
 800a526:	4618      	mov	r0, r3
 800a528:	f000 f9d9 	bl	800a8de <HAL_SYSTICK_Config>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d001      	beq.n	800a536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	e00e      	b.n	800a554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2b0f      	cmp	r3, #15
 800a53a:	d80a      	bhi.n	800a552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a53c:	2200      	movs	r2, #0
 800a53e:	6879      	ldr	r1, [r7, #4]
 800a540:	f04f 30ff 	mov.w	r0, #4294967295
 800a544:	f000 f993 	bl	800a86e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a548:	4a06      	ldr	r2, [pc, #24]	; (800a564 <HAL_InitTick+0x5c>)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a54e:	2300      	movs	r3, #0
 800a550:	e000      	b.n	800a554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a552:	2301      	movs	r3, #1
}
 800a554:	4618      	mov	r0, r3
 800a556:	3708      	adds	r7, #8
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	20000034 	.word	0x20000034
 800a560:	2000003c 	.word	0x2000003c
 800a564:	20000038 	.word	0x20000038

0800a568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a568:	b480      	push	{r7}
 800a56a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a56c:	4b06      	ldr	r3, [pc, #24]	; (800a588 <HAL_IncTick+0x20>)
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	461a      	mov	r2, r3
 800a572:	4b06      	ldr	r3, [pc, #24]	; (800a58c <HAL_IncTick+0x24>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4413      	add	r3, r2
 800a578:	4a04      	ldr	r2, [pc, #16]	; (800a58c <HAL_IncTick+0x24>)
 800a57a:	6013      	str	r3, [r2, #0]
}
 800a57c:	bf00      	nop
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	2000003c 	.word	0x2000003c
 800a58c:	20000c70 	.word	0x20000c70

0800a590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a590:	b480      	push	{r7}
 800a592:	af00      	add	r7, sp, #0
  return uwTick;
 800a594:	4b03      	ldr	r3, [pc, #12]	; (800a5a4 <HAL_GetTick+0x14>)
 800a596:	681b      	ldr	r3, [r3, #0]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	20000c70 	.word	0x20000c70

0800a5a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a5b0:	f7ff ffee 	bl	800a590 <HAL_GetTick>
 800a5b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c0:	d005      	beq.n	800a5ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a5c2:	4b0a      	ldr	r3, [pc, #40]	; (800a5ec <HAL_Delay+0x44>)
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a5ce:	bf00      	nop
 800a5d0:	f7ff ffde 	bl	800a590 <HAL_GetTick>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d8f7      	bhi.n	800a5d0 <HAL_Delay+0x28>
  {
  }
}
 800a5e0:	bf00      	nop
 800a5e2:	bf00      	nop
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	2000003c 	.word	0x2000003c

0800a5f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b085      	sub	sp, #20
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f003 0307 	and.w	r3, r3, #7
 800a5fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a600:	4b0c      	ldr	r3, [pc, #48]	; (800a634 <__NVIC_SetPriorityGrouping+0x44>)
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a60c:	4013      	ands	r3, r2
 800a60e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a61c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a622:	4a04      	ldr	r2, [pc, #16]	; (800a634 <__NVIC_SetPriorityGrouping+0x44>)
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	60d3      	str	r3, [r2, #12]
}
 800a628:	bf00      	nop
 800a62a:	3714      	adds	r7, #20
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr
 800a634:	e000ed00 	.word	0xe000ed00

0800a638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a638:	b480      	push	{r7}
 800a63a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a63c:	4b04      	ldr	r3, [pc, #16]	; (800a650 <__NVIC_GetPriorityGrouping+0x18>)
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	0a1b      	lsrs	r3, r3, #8
 800a642:	f003 0307 	and.w	r3, r3, #7
}
 800a646:	4618      	mov	r0, r3
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	e000ed00 	.word	0xe000ed00

0800a654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	4603      	mov	r3, r0
 800a65c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a65e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a662:	2b00      	cmp	r3, #0
 800a664:	db0b      	blt.n	800a67e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a666:	79fb      	ldrb	r3, [r7, #7]
 800a668:	f003 021f 	and.w	r2, r3, #31
 800a66c:	4907      	ldr	r1, [pc, #28]	; (800a68c <__NVIC_EnableIRQ+0x38>)
 800a66e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a672:	095b      	lsrs	r3, r3, #5
 800a674:	2001      	movs	r0, #1
 800a676:	fa00 f202 	lsl.w	r2, r0, r2
 800a67a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a67e:	bf00      	nop
 800a680:	370c      	adds	r7, #12
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	e000e100 	.word	0xe000e100

0800a690 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a690:	b480      	push	{r7}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
 800a696:	4603      	mov	r3, r0
 800a698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a69a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	db12      	blt.n	800a6c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a6a2:	79fb      	ldrb	r3, [r7, #7]
 800a6a4:	f003 021f 	and.w	r2, r3, #31
 800a6a8:	490a      	ldr	r1, [pc, #40]	; (800a6d4 <__NVIC_DisableIRQ+0x44>)
 800a6aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6ae:	095b      	lsrs	r3, r3, #5
 800a6b0:	2001      	movs	r0, #1
 800a6b2:	fa00 f202 	lsl.w	r2, r0, r2
 800a6b6:	3320      	adds	r3, #32
 800a6b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a6bc:	f3bf 8f4f 	dsb	sy
}
 800a6c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a6c2:	f3bf 8f6f 	isb	sy
}
 800a6c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800a6c8:	bf00      	nop
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr
 800a6d4:	e000e100 	.word	0xe000e100

0800a6d8 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	4603      	mov	r3, r0
 800a6e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a6e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	db0e      	blt.n	800a708 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800a6ea:	4a0b      	ldr	r2, [pc, #44]	; (800a718 <__NVIC_GetPendingIRQ+0x40>)
 800a6ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6f0:	095b      	lsrs	r3, r3, #5
 800a6f2:	3340      	adds	r3, #64	; 0x40
 800a6f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a6f8:	79fb      	ldrb	r3, [r7, #7]
 800a6fa:	f003 031f 	and.w	r3, r3, #31
 800a6fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a702:	f003 0301 	and.w	r3, r3, #1
 800a706:	e000      	b.n	800a70a <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 800a708:	2300      	movs	r3, #0
  }
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	370c      	adds	r7, #12
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	e000e100 	.word	0xe000e100

0800a71c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	4603      	mov	r3, r0
 800a724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	db0c      	blt.n	800a748 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a72e:	79fb      	ldrb	r3, [r7, #7]
 800a730:	f003 021f 	and.w	r2, r3, #31
 800a734:	4907      	ldr	r1, [pc, #28]	; (800a754 <__NVIC_ClearPendingIRQ+0x38>)
 800a736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a73a:	095b      	lsrs	r3, r3, #5
 800a73c:	2001      	movs	r0, #1
 800a73e:	fa00 f202 	lsl.w	r2, r0, r2
 800a742:	3360      	adds	r3, #96	; 0x60
 800a744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a748:	bf00      	nop
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr
 800a754:	e000e100 	.word	0xe000e100

0800a758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	4603      	mov	r3, r0
 800a760:	6039      	str	r1, [r7, #0]
 800a762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	db0a      	blt.n	800a782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	b2da      	uxtb	r2, r3
 800a770:	490c      	ldr	r1, [pc, #48]	; (800a7a4 <__NVIC_SetPriority+0x4c>)
 800a772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a776:	0112      	lsls	r2, r2, #4
 800a778:	b2d2      	uxtb	r2, r2
 800a77a:	440b      	add	r3, r1
 800a77c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a780:	e00a      	b.n	800a798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	b2da      	uxtb	r2, r3
 800a786:	4908      	ldr	r1, [pc, #32]	; (800a7a8 <__NVIC_SetPriority+0x50>)
 800a788:	79fb      	ldrb	r3, [r7, #7]
 800a78a:	f003 030f 	and.w	r3, r3, #15
 800a78e:	3b04      	subs	r3, #4
 800a790:	0112      	lsls	r2, r2, #4
 800a792:	b2d2      	uxtb	r2, r2
 800a794:	440b      	add	r3, r1
 800a796:	761a      	strb	r2, [r3, #24]
}
 800a798:	bf00      	nop
 800a79a:	370c      	adds	r7, #12
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr
 800a7a4:	e000e100 	.word	0xe000e100
 800a7a8:	e000ed00 	.word	0xe000ed00

0800a7ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b089      	sub	sp, #36	; 0x24
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f003 0307 	and.w	r3, r3, #7
 800a7be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	f1c3 0307 	rsb	r3, r3, #7
 800a7c6:	2b04      	cmp	r3, #4
 800a7c8:	bf28      	it	cs
 800a7ca:	2304      	movcs	r3, #4
 800a7cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a7ce:	69fb      	ldr	r3, [r7, #28]
 800a7d0:	3304      	adds	r3, #4
 800a7d2:	2b06      	cmp	r3, #6
 800a7d4:	d902      	bls.n	800a7dc <NVIC_EncodePriority+0x30>
 800a7d6:	69fb      	ldr	r3, [r7, #28]
 800a7d8:	3b03      	subs	r3, #3
 800a7da:	e000      	b.n	800a7de <NVIC_EncodePriority+0x32>
 800a7dc:	2300      	movs	r3, #0
 800a7de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a7e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e4:	69bb      	ldr	r3, [r7, #24]
 800a7e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ea:	43da      	mvns	r2, r3
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	401a      	ands	r2, r3
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a7f4:	f04f 31ff 	mov.w	r1, #4294967295
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a7fe:	43d9      	mvns	r1, r3
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a804:	4313      	orrs	r3, r2
         );
}
 800a806:	4618      	mov	r0, r3
 800a808:	3724      	adds	r7, #36	; 0x24
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
	...

0800a814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	3b01      	subs	r3, #1
 800a820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a824:	d301      	bcc.n	800a82a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a826:	2301      	movs	r3, #1
 800a828:	e00f      	b.n	800a84a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a82a:	4a0a      	ldr	r2, [pc, #40]	; (800a854 <SysTick_Config+0x40>)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	3b01      	subs	r3, #1
 800a830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a832:	210f      	movs	r1, #15
 800a834:	f04f 30ff 	mov.w	r0, #4294967295
 800a838:	f7ff ff8e 	bl	800a758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a83c:	4b05      	ldr	r3, [pc, #20]	; (800a854 <SysTick_Config+0x40>)
 800a83e:	2200      	movs	r2, #0
 800a840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a842:	4b04      	ldr	r3, [pc, #16]	; (800a854 <SysTick_Config+0x40>)
 800a844:	2207      	movs	r2, #7
 800a846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3708      	adds	r7, #8
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	e000e010 	.word	0xe000e010

0800a858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f7ff fec5 	bl	800a5f0 <__NVIC_SetPriorityGrouping>
}
 800a866:	bf00      	nop
 800a868:	3708      	adds	r7, #8
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a86e:	b580      	push	{r7, lr}
 800a870:	b086      	sub	sp, #24
 800a872:	af00      	add	r7, sp, #0
 800a874:	4603      	mov	r3, r0
 800a876:	60b9      	str	r1, [r7, #8]
 800a878:	607a      	str	r2, [r7, #4]
 800a87a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a87c:	2300      	movs	r3, #0
 800a87e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a880:	f7ff feda 	bl	800a638 <__NVIC_GetPriorityGrouping>
 800a884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	68b9      	ldr	r1, [r7, #8]
 800a88a:	6978      	ldr	r0, [r7, #20]
 800a88c:	f7ff ff8e 	bl	800a7ac <NVIC_EncodePriority>
 800a890:	4602      	mov	r2, r0
 800a892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a896:	4611      	mov	r1, r2
 800a898:	4618      	mov	r0, r3
 800a89a:	f7ff ff5d 	bl	800a758 <__NVIC_SetPriority>
}
 800a89e:	bf00      	nop
 800a8a0:	3718      	adds	r7, #24
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b082      	sub	sp, #8
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a8b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7ff fecd 	bl	800a654 <__NVIC_EnableIRQ>
}
 800a8ba:	bf00      	nop
 800a8bc:	3708      	adds	r7, #8
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b082      	sub	sp, #8
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800a8cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7ff fedd 	bl	800a690 <__NVIC_DisableIRQ>
}
 800a8d6:	bf00      	nop
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b082      	sub	sp, #8
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f7ff ff94 	bl	800a814 <SysTick_Config>
 800a8ec:	4603      	mov	r3, r0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3708      	adds	r7, #8
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	b082      	sub	sp, #8
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 800a900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a904:	4618      	mov	r0, r3
 800a906:	f7ff fee7 	bl	800a6d8 <__NVIC_GetPendingIRQ>
 800a90a:	4603      	mov	r3, r0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3708      	adds	r7, #8
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	4603      	mov	r3, r0
 800a91c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800a91e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a922:	4618      	mov	r0, r3
 800a924:	f7ff fefa 	bl	800a71c <__NVIC_ClearPendingIRQ>
}
 800a928:	bf00      	nop
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b086      	sub	sp, #24
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a938:	2300      	movs	r3, #0
 800a93a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a93c:	f7ff fe28 	bl	800a590 <HAL_GetTick>
 800a940:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d101      	bne.n	800a94c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	e099      	b.n	800aa80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2202      	movs	r2, #2
 800a950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f022 0201 	bic.w	r2, r2, #1
 800a96a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a96c:	e00f      	b.n	800a98e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a96e:	f7ff fe0f 	bl	800a590 <HAL_GetTick>
 800a972:	4602      	mov	r2, r0
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	1ad3      	subs	r3, r2, r3
 800a978:	2b05      	cmp	r3, #5
 800a97a:	d908      	bls.n	800a98e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2220      	movs	r2, #32
 800a980:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2203      	movs	r2, #3
 800a986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a98a:	2303      	movs	r3, #3
 800a98c:	e078      	b.n	800aa80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 0301 	and.w	r3, r3, #1
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d1e8      	bne.n	800a96e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a9a4:	697a      	ldr	r2, [r7, #20]
 800a9a6:	4b38      	ldr	r3, [pc, #224]	; (800aa88 <HAL_DMA_Init+0x158>)
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685a      	ldr	r2, [r3, #4]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	689b      	ldr	r3, [r3, #8]
 800a9b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a9ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	691b      	ldr	r3, [r3, #16]
 800a9c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a9c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	699b      	ldr	r3, [r3, #24]
 800a9cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a9d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a1b      	ldr	r3, [r3, #32]
 800a9d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a9da:	697a      	ldr	r2, [r7, #20]
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e4:	2b04      	cmp	r3, #4
 800a9e6:	d107      	bne.n	800a9f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	697a      	ldr	r2, [r7, #20]
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	697a      	ldr	r2, [r7, #20]
 800a9fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	695b      	ldr	r3, [r3, #20]
 800aa06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	f023 0307 	bic.w	r3, r3, #7
 800aa0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa14:	697a      	ldr	r2, [r7, #20]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1e:	2b04      	cmp	r3, #4
 800aa20:	d117      	bne.n	800aa52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa26:	697a      	ldr	r2, [r7, #20]
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d00e      	beq.n	800aa52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 fb0f 	bl	800b058 <DMA_CheckFifoParam>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d008      	beq.n	800aa52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2240      	movs	r2, #64	; 0x40
 800aa44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2201      	movs	r2, #1
 800aa4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e016      	b.n	800aa80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	697a      	ldr	r2, [r7, #20]
 800aa58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 fac6 	bl	800afec <DMA_CalcBaseAndBitshift>
 800aa60:	4603      	mov	r3, r0
 800aa62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa68:	223f      	movs	r2, #63	; 0x3f
 800aa6a:	409a      	lsls	r2, r3
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800aa7e:	2300      	movs	r3, #0
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3718      	adds	r7, #24
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	f010803f 	.word	0xf010803f

0800aa8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b086      	sub	sp, #24
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	607a      	str	r2, [r7, #4]
 800aa98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaa2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d101      	bne.n	800aab2 <HAL_DMA_Start_IT+0x26>
 800aaae:	2302      	movs	r3, #2
 800aab0:	e040      	b.n	800ab34 <HAL_DMA_Start_IT+0xa8>
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2201      	movs	r2, #1
 800aab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d12f      	bne.n	800ab26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2202      	movs	r2, #2
 800aaca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2200      	movs	r2, #0
 800aad2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	68b9      	ldr	r1, [r7, #8]
 800aada:	68f8      	ldr	r0, [r7, #12]
 800aadc:	f000 fa58 	bl	800af90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aae4:	223f      	movs	r2, #63	; 0x3f
 800aae6:	409a      	lsls	r2, r3
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f042 0216 	orr.w	r2, r2, #22
 800aafa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d007      	beq.n	800ab14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f042 0208 	orr.w	r2, r2, #8
 800ab12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f042 0201 	orr.w	r2, r2, #1
 800ab22:	601a      	str	r2, [r3, #0]
 800ab24:	e005      	b.n	800ab32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ab2e:	2302      	movs	r3, #2
 800ab30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ab32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3718      	adds	r7, #24
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab48:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800ab4a:	f7ff fd21 	bl	800a590 <HAL_GetTick>
 800ab4e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	d008      	beq.n	800ab6e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2280      	movs	r2, #128	; 0x80
 800ab60:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e052      	b.n	800ac14 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f022 0216 	bic.w	r2, r2, #22
 800ab7c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	695a      	ldr	r2, [r3, #20]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab8c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d103      	bne.n	800ab9e <HAL_DMA_Abort+0x62>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d007      	beq.n	800abae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f022 0208 	bic.w	r2, r2, #8
 800abac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f022 0201 	bic.w	r2, r2, #1
 800abbc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800abbe:	e013      	b.n	800abe8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800abc0:	f7ff fce6 	bl	800a590 <HAL_GetTick>
 800abc4:	4602      	mov	r2, r0
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	1ad3      	subs	r3, r2, r3
 800abca:	2b05      	cmp	r3, #5
 800abcc:	d90c      	bls.n	800abe8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2220      	movs	r2, #32
 800abd2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2203      	movs	r2, #3
 800abd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800abe4:	2303      	movs	r3, #3
 800abe6:	e015      	b.n	800ac14 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f003 0301 	and.w	r3, r3, #1
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d1e4      	bne.n	800abc0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abfa:	223f      	movs	r2, #63	; 0x3f
 800abfc:	409a      	lsls	r2, r3
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2201      	movs	r2, #1
 800ac06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	d004      	beq.n	800ac3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2280      	movs	r2, #128	; 0x80
 800ac34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ac36:	2301      	movs	r3, #1
 800ac38:	e00c      	b.n	800ac54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2205      	movs	r2, #5
 800ac3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f022 0201 	bic.w	r2, r2, #1
 800ac50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ac52:	2300      	movs	r3, #0
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b086      	sub	sp, #24
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ac6c:	4b92      	ldr	r3, [pc, #584]	; (800aeb8 <HAL_DMA_IRQHandler+0x258>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a92      	ldr	r2, [pc, #584]	; (800aebc <HAL_DMA_IRQHandler+0x25c>)
 800ac72:	fba2 2303 	umull	r2, r3, r2, r3
 800ac76:	0a9b      	lsrs	r3, r3, #10
 800ac78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac8a:	2208      	movs	r2, #8
 800ac8c:	409a      	lsls	r2, r3
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	4013      	ands	r3, r2
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d01a      	beq.n	800accc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f003 0304 	and.w	r3, r3, #4
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d013      	beq.n	800accc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f022 0204 	bic.w	r2, r2, #4
 800acb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acb8:	2208      	movs	r2, #8
 800acba:	409a      	lsls	r2, r3
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acc4:	f043 0201 	orr.w	r2, r3, #1
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acd0:	2201      	movs	r2, #1
 800acd2:	409a      	lsls	r2, r3
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	4013      	ands	r3, r2
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d012      	beq.n	800ad02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	695b      	ldr	r3, [r3, #20]
 800ace2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00b      	beq.n	800ad02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acee:	2201      	movs	r2, #1
 800acf0:	409a      	lsls	r2, r3
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acfa:	f043 0202 	orr.w	r2, r3, #2
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad06:	2204      	movs	r2, #4
 800ad08:	409a      	lsls	r2, r3
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	4013      	ands	r3, r2
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d012      	beq.n	800ad38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 0302 	and.w	r3, r3, #2
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d00b      	beq.n	800ad38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad24:	2204      	movs	r2, #4
 800ad26:	409a      	lsls	r2, r3
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad30:	f043 0204 	orr.w	r2, r3, #4
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad3c:	2210      	movs	r2, #16
 800ad3e:	409a      	lsls	r2, r3
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	4013      	ands	r3, r2
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d043      	beq.n	800add0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f003 0308 	and.w	r3, r3, #8
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d03c      	beq.n	800add0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad5a:	2210      	movs	r2, #16
 800ad5c:	409a      	lsls	r2, r3
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d018      	beq.n	800ada2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d108      	bne.n	800ad90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d024      	beq.n	800add0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	4798      	blx	r3
 800ad8e:	e01f      	b.n	800add0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d01b      	beq.n	800add0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	4798      	blx	r3
 800ada0:	e016      	b.n	800add0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adac:	2b00      	cmp	r3, #0
 800adae:	d107      	bne.n	800adc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f022 0208 	bic.w	r2, r2, #8
 800adbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d003      	beq.n	800add0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800add4:	2220      	movs	r2, #32
 800add6:	409a      	lsls	r2, r3
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	4013      	ands	r3, r2
 800addc:	2b00      	cmp	r3, #0
 800adde:	f000 808e 	beq.w	800aefe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f003 0310 	and.w	r3, r3, #16
 800adec:	2b00      	cmp	r3, #0
 800adee:	f000 8086 	beq.w	800aefe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adf6:	2220      	movs	r2, #32
 800adf8:	409a      	lsls	r2, r3
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	2b05      	cmp	r3, #5
 800ae08:	d136      	bne.n	800ae78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f022 0216 	bic.w	r2, r2, #22
 800ae18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	695a      	ldr	r2, [r3, #20]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d103      	bne.n	800ae3a <HAL_DMA_IRQHandler+0x1da>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d007      	beq.n	800ae4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f022 0208 	bic.w	r2, r2, #8
 800ae48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae4e:	223f      	movs	r2, #63	; 0x3f
 800ae50:	409a      	lsls	r2, r3
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2201      	movs	r2, #1
 800ae5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d07d      	beq.n	800af6a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	4798      	blx	r3
        }
        return;
 800ae76:	e078      	b.n	800af6a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d01c      	beq.n	800aec0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d108      	bne.n	800aea6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d030      	beq.n	800aefe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	4798      	blx	r3
 800aea4:	e02b      	b.n	800aefe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d027      	beq.n	800aefe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	4798      	blx	r3
 800aeb6:	e022      	b.n	800aefe <HAL_DMA_IRQHandler+0x29e>
 800aeb8:	20000034 	.word	0x20000034
 800aebc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d10f      	bne.n	800aeee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f022 0210 	bic.w	r2, r2, #16
 800aedc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2201      	movs	r2, #1
 800aee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d003      	beq.n	800aefe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af02:	2b00      	cmp	r3, #0
 800af04:	d032      	beq.n	800af6c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af0a:	f003 0301 	and.w	r3, r3, #1
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d022      	beq.n	800af58 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2205      	movs	r2, #5
 800af16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f022 0201 	bic.w	r2, r2, #1
 800af28:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	3301      	adds	r3, #1
 800af2e:	60bb      	str	r3, [r7, #8]
 800af30:	697a      	ldr	r2, [r7, #20]
 800af32:	429a      	cmp	r2, r3
 800af34:	d307      	bcc.n	800af46 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f003 0301 	and.w	r3, r3, #1
 800af40:	2b00      	cmp	r3, #0
 800af42:	d1f2      	bne.n	800af2a <HAL_DMA_IRQHandler+0x2ca>
 800af44:	e000      	b.n	800af48 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800af46:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d005      	beq.n	800af6c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	4798      	blx	r3
 800af68:	e000      	b.n	800af6c <HAL_DMA_IRQHandler+0x30c>
        return;
 800af6a:	bf00      	nop
    }
  }
}
 800af6c:	3718      	adds	r7, #24
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop

0800af74 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800af82:	b2db      	uxtb	r3, r3
}
 800af84:	4618      	mov	r0, r3
 800af86:	370c      	adds	r7, #12
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]
 800af9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800afac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	683a      	ldr	r2, [r7, #0]
 800afb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	2b40      	cmp	r3, #64	; 0x40
 800afbc:	d108      	bne.n	800afd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	68ba      	ldr	r2, [r7, #8]
 800afcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800afce:	e007      	b.n	800afe0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	68ba      	ldr	r2, [r7, #8]
 800afd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	60da      	str	r2, [r3, #12]
}
 800afe0:	bf00      	nop
 800afe2:	3714      	adds	r7, #20
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800afec:	b480      	push	{r7}
 800afee:	b085      	sub	sp, #20
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	3b10      	subs	r3, #16
 800affc:	4a14      	ldr	r2, [pc, #80]	; (800b050 <DMA_CalcBaseAndBitshift+0x64>)
 800affe:	fba2 2303 	umull	r2, r3, r2, r3
 800b002:	091b      	lsrs	r3, r3, #4
 800b004:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b006:	4a13      	ldr	r2, [pc, #76]	; (800b054 <DMA_CalcBaseAndBitshift+0x68>)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	4413      	add	r3, r2
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	461a      	mov	r2, r3
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2b03      	cmp	r3, #3
 800b018:	d909      	bls.n	800b02e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b022:	f023 0303 	bic.w	r3, r3, #3
 800b026:	1d1a      	adds	r2, r3, #4
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	659a      	str	r2, [r3, #88]	; 0x58
 800b02c:	e007      	b.n	800b03e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b036:	f023 0303 	bic.w	r3, r3, #3
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b042:	4618      	mov	r0, r3
 800b044:	3714      	adds	r7, #20
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr
 800b04e:	bf00      	nop
 800b050:	aaaaaaab 	.word	0xaaaaaaab
 800b054:	080296d0 	.word	0x080296d0

0800b058 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b058:	b480      	push	{r7}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b060:	2300      	movs	r3, #0
 800b062:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b068:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	699b      	ldr	r3, [r3, #24]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d11f      	bne.n	800b0b2 <DMA_CheckFifoParam+0x5a>
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	2b03      	cmp	r3, #3
 800b076:	d856      	bhi.n	800b126 <DMA_CheckFifoParam+0xce>
 800b078:	a201      	add	r2, pc, #4	; (adr r2, 800b080 <DMA_CheckFifoParam+0x28>)
 800b07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b07e:	bf00      	nop
 800b080:	0800b091 	.word	0x0800b091
 800b084:	0800b0a3 	.word	0x0800b0a3
 800b088:	0800b091 	.word	0x0800b091
 800b08c:	0800b127 	.word	0x0800b127
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d046      	beq.n	800b12a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b09c:	2301      	movs	r3, #1
 800b09e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b0a0:	e043      	b.n	800b12a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b0aa:	d140      	bne.n	800b12e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b0b0:	e03d      	b.n	800b12e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	699b      	ldr	r3, [r3, #24]
 800b0b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0ba:	d121      	bne.n	800b100 <DMA_CheckFifoParam+0xa8>
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	2b03      	cmp	r3, #3
 800b0c0:	d837      	bhi.n	800b132 <DMA_CheckFifoParam+0xda>
 800b0c2:	a201      	add	r2, pc, #4	; (adr r2, 800b0c8 <DMA_CheckFifoParam+0x70>)
 800b0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c8:	0800b0d9 	.word	0x0800b0d9
 800b0cc:	0800b0df 	.word	0x0800b0df
 800b0d0:	0800b0d9 	.word	0x0800b0d9
 800b0d4:	0800b0f1 	.word	0x0800b0f1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	73fb      	strb	r3, [r7, #15]
      break;
 800b0dc:	e030      	b.n	800b140 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d025      	beq.n	800b136 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b0ee:	e022      	b.n	800b136 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b0f8:	d11f      	bne.n	800b13a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b0fe:	e01c      	b.n	800b13a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	2b02      	cmp	r3, #2
 800b104:	d903      	bls.n	800b10e <DMA_CheckFifoParam+0xb6>
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	2b03      	cmp	r3, #3
 800b10a:	d003      	beq.n	800b114 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b10c:	e018      	b.n	800b140 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b10e:	2301      	movs	r3, #1
 800b110:	73fb      	strb	r3, [r7, #15]
      break;
 800b112:	e015      	b.n	800b140 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00e      	beq.n	800b13e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b120:	2301      	movs	r3, #1
 800b122:	73fb      	strb	r3, [r7, #15]
      break;
 800b124:	e00b      	b.n	800b13e <DMA_CheckFifoParam+0xe6>
      break;
 800b126:	bf00      	nop
 800b128:	e00a      	b.n	800b140 <DMA_CheckFifoParam+0xe8>
      break;
 800b12a:	bf00      	nop
 800b12c:	e008      	b.n	800b140 <DMA_CheckFifoParam+0xe8>
      break;
 800b12e:	bf00      	nop
 800b130:	e006      	b.n	800b140 <DMA_CheckFifoParam+0xe8>
      break;
 800b132:	bf00      	nop
 800b134:	e004      	b.n	800b140 <DMA_CheckFifoParam+0xe8>
      break;
 800b136:	bf00      	nop
 800b138:	e002      	b.n	800b140 <DMA_CheckFifoParam+0xe8>
      break;   
 800b13a:	bf00      	nop
 800b13c:	e000      	b.n	800b140 <DMA_CheckFifoParam+0xe8>
      break;
 800b13e:	bf00      	nop
    }
  } 
  
  return status; 
 800b140:	7bfb      	ldrb	r3, [r7, #15]
}
 800b142:	4618      	mov	r0, r3
 800b144:	3714      	adds	r7, #20
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr
 800b14e:	bf00      	nop

0800b150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b150:	b480      	push	{r7}
 800b152:	b089      	sub	sp, #36	; 0x24
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b15a:	2300      	movs	r3, #0
 800b15c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b15e:	2300      	movs	r3, #0
 800b160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b162:	2300      	movs	r3, #0
 800b164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b166:	2300      	movs	r3, #0
 800b168:	61fb      	str	r3, [r7, #28]
 800b16a:	e159      	b.n	800b420 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b16c:	2201      	movs	r2, #1
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	fa02 f303 	lsl.w	r3, r2, r3
 800b174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	697a      	ldr	r2, [r7, #20]
 800b17c:	4013      	ands	r3, r2
 800b17e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b180:	693a      	ldr	r2, [r7, #16]
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	429a      	cmp	r2, r3
 800b186:	f040 8148 	bne.w	800b41a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	f003 0303 	and.w	r3, r3, #3
 800b192:	2b01      	cmp	r3, #1
 800b194:	d005      	beq.n	800b1a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b19e:	2b02      	cmp	r3, #2
 800b1a0:	d130      	bne.n	800b204 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	689b      	ldr	r3, [r3, #8]
 800b1a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	005b      	lsls	r3, r3, #1
 800b1ac:	2203      	movs	r2, #3
 800b1ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b1b2:	43db      	mvns	r3, r3
 800b1b4:	69ba      	ldr	r2, [r7, #24]
 800b1b6:	4013      	ands	r3, r2
 800b1b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	68da      	ldr	r2, [r3, #12]
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	005b      	lsls	r3, r3, #1
 800b1c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b1c6:	69ba      	ldr	r2, [r7, #24]
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	69ba      	ldr	r2, [r7, #24]
 800b1d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b1d8:	2201      	movs	r2, #1
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b1e0:	43db      	mvns	r3, r3
 800b1e2:	69ba      	ldr	r2, [r7, #24]
 800b1e4:	4013      	ands	r3, r2
 800b1e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	091b      	lsrs	r3, r3, #4
 800b1ee:	f003 0201 	and.w	r2, r3, #1
 800b1f2:	69fb      	ldr	r3, [r7, #28]
 800b1f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f8:	69ba      	ldr	r2, [r7, #24]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	69ba      	ldr	r2, [r7, #24]
 800b202:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	f003 0303 	and.w	r3, r3, #3
 800b20c:	2b03      	cmp	r3, #3
 800b20e:	d017      	beq.n	800b240 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	005b      	lsls	r3, r3, #1
 800b21a:	2203      	movs	r2, #3
 800b21c:	fa02 f303 	lsl.w	r3, r2, r3
 800b220:	43db      	mvns	r3, r3
 800b222:	69ba      	ldr	r2, [r7, #24]
 800b224:	4013      	ands	r3, r2
 800b226:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	689a      	ldr	r2, [r3, #8]
 800b22c:	69fb      	ldr	r3, [r7, #28]
 800b22e:	005b      	lsls	r3, r3, #1
 800b230:	fa02 f303 	lsl.w	r3, r2, r3
 800b234:	69ba      	ldr	r2, [r7, #24]
 800b236:	4313      	orrs	r3, r2
 800b238:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	69ba      	ldr	r2, [r7, #24]
 800b23e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	f003 0303 	and.w	r3, r3, #3
 800b248:	2b02      	cmp	r3, #2
 800b24a:	d123      	bne.n	800b294 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	08da      	lsrs	r2, r3, #3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	3208      	adds	r2, #8
 800b254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b258:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	f003 0307 	and.w	r3, r3, #7
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	220f      	movs	r2, #15
 800b264:	fa02 f303 	lsl.w	r3, r2, r3
 800b268:	43db      	mvns	r3, r3
 800b26a:	69ba      	ldr	r2, [r7, #24]
 800b26c:	4013      	ands	r3, r2
 800b26e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	691a      	ldr	r2, [r3, #16]
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	f003 0307 	and.w	r3, r3, #7
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	fa02 f303 	lsl.w	r3, r2, r3
 800b280:	69ba      	ldr	r2, [r7, #24]
 800b282:	4313      	orrs	r3, r2
 800b284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	08da      	lsrs	r2, r3, #3
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	3208      	adds	r2, #8
 800b28e:	69b9      	ldr	r1, [r7, #24]
 800b290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	005b      	lsls	r3, r3, #1
 800b29e:	2203      	movs	r2, #3
 800b2a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2a4:	43db      	mvns	r3, r3
 800b2a6:	69ba      	ldr	r2, [r7, #24]
 800b2a8:	4013      	ands	r3, r2
 800b2aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	f003 0203 	and.w	r2, r3, #3
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	005b      	lsls	r3, r3, #1
 800b2b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2bc:	69ba      	ldr	r2, [r7, #24]
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	69ba      	ldr	r2, [r7, #24]
 800b2c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	f000 80a2 	beq.w	800b41a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	60fb      	str	r3, [r7, #12]
 800b2da:	4b57      	ldr	r3, [pc, #348]	; (800b438 <HAL_GPIO_Init+0x2e8>)
 800b2dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2de:	4a56      	ldr	r2, [pc, #344]	; (800b438 <HAL_GPIO_Init+0x2e8>)
 800b2e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b2e4:	6453      	str	r3, [r2, #68]	; 0x44
 800b2e6:	4b54      	ldr	r3, [pc, #336]	; (800b438 <HAL_GPIO_Init+0x2e8>)
 800b2e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2ee:	60fb      	str	r3, [r7, #12]
 800b2f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b2f2:	4a52      	ldr	r2, [pc, #328]	; (800b43c <HAL_GPIO_Init+0x2ec>)
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	089b      	lsrs	r3, r3, #2
 800b2f8:	3302      	adds	r3, #2
 800b2fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	f003 0303 	and.w	r3, r3, #3
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	220f      	movs	r2, #15
 800b30a:	fa02 f303 	lsl.w	r3, r2, r3
 800b30e:	43db      	mvns	r3, r3
 800b310:	69ba      	ldr	r2, [r7, #24]
 800b312:	4013      	ands	r3, r2
 800b314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4a49      	ldr	r2, [pc, #292]	; (800b440 <HAL_GPIO_Init+0x2f0>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d019      	beq.n	800b352 <HAL_GPIO_Init+0x202>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a48      	ldr	r2, [pc, #288]	; (800b444 <HAL_GPIO_Init+0x2f4>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d013      	beq.n	800b34e <HAL_GPIO_Init+0x1fe>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a47      	ldr	r2, [pc, #284]	; (800b448 <HAL_GPIO_Init+0x2f8>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d00d      	beq.n	800b34a <HAL_GPIO_Init+0x1fa>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4a46      	ldr	r2, [pc, #280]	; (800b44c <HAL_GPIO_Init+0x2fc>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d007      	beq.n	800b346 <HAL_GPIO_Init+0x1f6>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	4a45      	ldr	r2, [pc, #276]	; (800b450 <HAL_GPIO_Init+0x300>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d101      	bne.n	800b342 <HAL_GPIO_Init+0x1f2>
 800b33e:	2304      	movs	r3, #4
 800b340:	e008      	b.n	800b354 <HAL_GPIO_Init+0x204>
 800b342:	2307      	movs	r3, #7
 800b344:	e006      	b.n	800b354 <HAL_GPIO_Init+0x204>
 800b346:	2303      	movs	r3, #3
 800b348:	e004      	b.n	800b354 <HAL_GPIO_Init+0x204>
 800b34a:	2302      	movs	r3, #2
 800b34c:	e002      	b.n	800b354 <HAL_GPIO_Init+0x204>
 800b34e:	2301      	movs	r3, #1
 800b350:	e000      	b.n	800b354 <HAL_GPIO_Init+0x204>
 800b352:	2300      	movs	r3, #0
 800b354:	69fa      	ldr	r2, [r7, #28]
 800b356:	f002 0203 	and.w	r2, r2, #3
 800b35a:	0092      	lsls	r2, r2, #2
 800b35c:	4093      	lsls	r3, r2
 800b35e:	69ba      	ldr	r2, [r7, #24]
 800b360:	4313      	orrs	r3, r2
 800b362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b364:	4935      	ldr	r1, [pc, #212]	; (800b43c <HAL_GPIO_Init+0x2ec>)
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	089b      	lsrs	r3, r3, #2
 800b36a:	3302      	adds	r3, #2
 800b36c:	69ba      	ldr	r2, [r7, #24]
 800b36e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b372:	4b38      	ldr	r3, [pc, #224]	; (800b454 <HAL_GPIO_Init+0x304>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	43db      	mvns	r3, r3
 800b37c:	69ba      	ldr	r2, [r7, #24]
 800b37e:	4013      	ands	r3, r2
 800b380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d003      	beq.n	800b396 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800b38e:	69ba      	ldr	r2, [r7, #24]
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	4313      	orrs	r3, r2
 800b394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b396:	4a2f      	ldr	r2, [pc, #188]	; (800b454 <HAL_GPIO_Init+0x304>)
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b39c:	4b2d      	ldr	r3, [pc, #180]	; (800b454 <HAL_GPIO_Init+0x304>)
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	43db      	mvns	r3, r3
 800b3a6:	69ba      	ldr	r2, [r7, #24]
 800b3a8:	4013      	ands	r3, r2
 800b3aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d003      	beq.n	800b3c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800b3b8:	69ba      	ldr	r2, [r7, #24]
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b3c0:	4a24      	ldr	r2, [pc, #144]	; (800b454 <HAL_GPIO_Init+0x304>)
 800b3c2:	69bb      	ldr	r3, [r7, #24]
 800b3c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b3c6:	4b23      	ldr	r3, [pc, #140]	; (800b454 <HAL_GPIO_Init+0x304>)
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	43db      	mvns	r3, r3
 800b3d0:	69ba      	ldr	r2, [r7, #24]
 800b3d2:	4013      	ands	r3, r2
 800b3d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d003      	beq.n	800b3ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800b3e2:	69ba      	ldr	r2, [r7, #24]
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b3ea:	4a1a      	ldr	r2, [pc, #104]	; (800b454 <HAL_GPIO_Init+0x304>)
 800b3ec:	69bb      	ldr	r3, [r7, #24]
 800b3ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b3f0:	4b18      	ldr	r3, [pc, #96]	; (800b454 <HAL_GPIO_Init+0x304>)
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	43db      	mvns	r3, r3
 800b3fa:	69ba      	ldr	r2, [r7, #24]
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d003      	beq.n	800b414 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800b40c:	69ba      	ldr	r2, [r7, #24]
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	4313      	orrs	r3, r2
 800b412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b414:	4a0f      	ldr	r2, [pc, #60]	; (800b454 <HAL_GPIO_Init+0x304>)
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	3301      	adds	r3, #1
 800b41e:	61fb      	str	r3, [r7, #28]
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	2b0f      	cmp	r3, #15
 800b424:	f67f aea2 	bls.w	800b16c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b428:	bf00      	nop
 800b42a:	bf00      	nop
 800b42c:	3724      	adds	r7, #36	; 0x24
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop
 800b438:	40023800 	.word	0x40023800
 800b43c:	40013800 	.word	0x40013800
 800b440:	40020000 	.word	0x40020000
 800b444:	40020400 	.word	0x40020400
 800b448:	40020800 	.word	0x40020800
 800b44c:	40020c00 	.word	0x40020c00
 800b450:	40021000 	.word	0x40021000
 800b454:	40013c00 	.word	0x40013c00

0800b458 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	460b      	mov	r3, r1
 800b462:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	691a      	ldr	r2, [r3, #16]
 800b468:	887b      	ldrh	r3, [r7, #2]
 800b46a:	4013      	ands	r3, r2
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d002      	beq.n	800b476 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b470:	2301      	movs	r3, #1
 800b472:	73fb      	strb	r3, [r7, #15]
 800b474:	e001      	b.n	800b47a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b476:	2300      	movs	r3, #0
 800b478:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b47a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3714      	adds	r7, #20
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr

0800b488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	460b      	mov	r3, r1
 800b492:	807b      	strh	r3, [r7, #2]
 800b494:	4613      	mov	r3, r2
 800b496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b498:	787b      	ldrb	r3, [r7, #1]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d003      	beq.n	800b4a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b49e:	887a      	ldrh	r2, [r7, #2]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b4a4:	e003      	b.n	800b4ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b4a6:	887b      	ldrh	r3, [r7, #2]
 800b4a8:	041a      	lsls	r2, r3, #16
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	619a      	str	r2, [r3, #24]
}
 800b4ae:	bf00      	nop
 800b4b0:	370c      	adds	r7, #12
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b8:	4770      	bx	lr

0800b4ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b4ba:	b480      	push	{r7}
 800b4bc:	b085      	sub	sp, #20
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	695b      	ldr	r3, [r3, #20]
 800b4ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b4cc:	887a      	ldrh	r2, [r7, #2]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	4013      	ands	r3, r2
 800b4d2:	041a      	lsls	r2, r3, #16
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	43d9      	mvns	r1, r3
 800b4d8:	887b      	ldrh	r3, [r7, #2]
 800b4da:	400b      	ands	r3, r1
 800b4dc:	431a      	orrs	r2, r3
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	619a      	str	r2, [r3, #24]
}
 800b4e2:	bf00      	nop
 800b4e4:	3714      	adds	r7, #20
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr
	...

0800b4f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b4fa:	4b08      	ldr	r3, [pc, #32]	; (800b51c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b4fc:	695a      	ldr	r2, [r3, #20]
 800b4fe:	88fb      	ldrh	r3, [r7, #6]
 800b500:	4013      	ands	r3, r2
 800b502:	2b00      	cmp	r3, #0
 800b504:	d006      	beq.n	800b514 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b506:	4a05      	ldr	r2, [pc, #20]	; (800b51c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b508:	88fb      	ldrh	r3, [r7, #6]
 800b50a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b50c:	88fb      	ldrh	r3, [r7, #6]
 800b50e:	4618      	mov	r0, r3
 800b510:	f7fa fc3a 	bl	8005d88 <HAL_GPIO_EXTI_Callback>
  }
}
 800b514:	bf00      	nop
 800b516:	3708      	adds	r7, #8
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	40013c00 	.word	0x40013c00

0800b520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d101      	bne.n	800b532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b52e:	2301      	movs	r3, #1
 800b530:	e12b      	b.n	800b78a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d106      	bne.n	800b54c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f7fa f9e0 	bl	800590c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2224      	movs	r2, #36	; 0x24
 800b550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	681a      	ldr	r2, [r3, #0]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f022 0201 	bic.w	r2, r2, #1
 800b562:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b572:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b582:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b584:	f003 fcf0 	bl	800ef68 <HAL_RCC_GetPCLK1Freq>
 800b588:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	4a81      	ldr	r2, [pc, #516]	; (800b794 <HAL_I2C_Init+0x274>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d807      	bhi.n	800b5a4 <HAL_I2C_Init+0x84>
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	4a80      	ldr	r2, [pc, #512]	; (800b798 <HAL_I2C_Init+0x278>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	bf94      	ite	ls
 800b59c:	2301      	movls	r3, #1
 800b59e:	2300      	movhi	r3, #0
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	e006      	b.n	800b5b2 <HAL_I2C_Init+0x92>
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	4a7d      	ldr	r2, [pc, #500]	; (800b79c <HAL_I2C_Init+0x27c>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	bf94      	ite	ls
 800b5ac:	2301      	movls	r3, #1
 800b5ae:	2300      	movhi	r3, #0
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d001      	beq.n	800b5ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e0e7      	b.n	800b78a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	4a78      	ldr	r2, [pc, #480]	; (800b7a0 <HAL_I2C_Init+0x280>)
 800b5be:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c2:	0c9b      	lsrs	r3, r3, #18
 800b5c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	68ba      	ldr	r2, [r7, #8]
 800b5d6:	430a      	orrs	r2, r1
 800b5d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	6a1b      	ldr	r3, [r3, #32]
 800b5e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	4a6a      	ldr	r2, [pc, #424]	; (800b794 <HAL_I2C_Init+0x274>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d802      	bhi.n	800b5f4 <HAL_I2C_Init+0xd4>
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	e009      	b.n	800b608 <HAL_I2C_Init+0xe8>
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b5fa:	fb02 f303 	mul.w	r3, r2, r3
 800b5fe:	4a69      	ldr	r2, [pc, #420]	; (800b7a4 <HAL_I2C_Init+0x284>)
 800b600:	fba2 2303 	umull	r2, r3, r2, r3
 800b604:	099b      	lsrs	r3, r3, #6
 800b606:	3301      	adds	r3, #1
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	6812      	ldr	r2, [r2, #0]
 800b60c:	430b      	orrs	r3, r1
 800b60e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	69db      	ldr	r3, [r3, #28]
 800b616:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b61a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	495c      	ldr	r1, [pc, #368]	; (800b794 <HAL_I2C_Init+0x274>)
 800b624:	428b      	cmp	r3, r1
 800b626:	d819      	bhi.n	800b65c <HAL_I2C_Init+0x13c>
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	1e59      	subs	r1, r3, #1
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	005b      	lsls	r3, r3, #1
 800b632:	fbb1 f3f3 	udiv	r3, r1, r3
 800b636:	1c59      	adds	r1, r3, #1
 800b638:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b63c:	400b      	ands	r3, r1
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00a      	beq.n	800b658 <HAL_I2C_Init+0x138>
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	1e59      	subs	r1, r3, #1
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	005b      	lsls	r3, r3, #1
 800b64c:	fbb1 f3f3 	udiv	r3, r1, r3
 800b650:	3301      	adds	r3, #1
 800b652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b656:	e051      	b.n	800b6fc <HAL_I2C_Init+0x1dc>
 800b658:	2304      	movs	r3, #4
 800b65a:	e04f      	b.n	800b6fc <HAL_I2C_Init+0x1dc>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	689b      	ldr	r3, [r3, #8]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d111      	bne.n	800b688 <HAL_I2C_Init+0x168>
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	1e58      	subs	r0, r3, #1
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6859      	ldr	r1, [r3, #4]
 800b66c:	460b      	mov	r3, r1
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	440b      	add	r3, r1
 800b672:	fbb0 f3f3 	udiv	r3, r0, r3
 800b676:	3301      	adds	r3, #1
 800b678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	bf0c      	ite	eq
 800b680:	2301      	moveq	r3, #1
 800b682:	2300      	movne	r3, #0
 800b684:	b2db      	uxtb	r3, r3
 800b686:	e012      	b.n	800b6ae <HAL_I2C_Init+0x18e>
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	1e58      	subs	r0, r3, #1
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6859      	ldr	r1, [r3, #4]
 800b690:	460b      	mov	r3, r1
 800b692:	009b      	lsls	r3, r3, #2
 800b694:	440b      	add	r3, r1
 800b696:	0099      	lsls	r1, r3, #2
 800b698:	440b      	add	r3, r1
 800b69a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b69e:	3301      	adds	r3, #1
 800b6a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	bf0c      	ite	eq
 800b6a8:	2301      	moveq	r3, #1
 800b6aa:	2300      	movne	r3, #0
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d001      	beq.n	800b6b6 <HAL_I2C_Init+0x196>
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e022      	b.n	800b6fc <HAL_I2C_Init+0x1dc>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d10e      	bne.n	800b6dc <HAL_I2C_Init+0x1bc>
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	1e58      	subs	r0, r3, #1
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6859      	ldr	r1, [r3, #4]
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	005b      	lsls	r3, r3, #1
 800b6ca:	440b      	add	r3, r1
 800b6cc:	fbb0 f3f3 	udiv	r3, r0, r3
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6da:	e00f      	b.n	800b6fc <HAL_I2C_Init+0x1dc>
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	1e58      	subs	r0, r3, #1
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6859      	ldr	r1, [r3, #4]
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	440b      	add	r3, r1
 800b6ea:	0099      	lsls	r1, r3, #2
 800b6ec:	440b      	add	r3, r1
 800b6ee:	fbb0 f3f3 	udiv	r3, r0, r3
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b6fc:	6879      	ldr	r1, [r7, #4]
 800b6fe:	6809      	ldr	r1, [r1, #0]
 800b700:	4313      	orrs	r3, r2
 800b702:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	69da      	ldr	r2, [r3, #28]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6a1b      	ldr	r3, [r3, #32]
 800b716:	431a      	orrs	r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	430a      	orrs	r2, r1
 800b71e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b72a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	6911      	ldr	r1, [r2, #16]
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	68d2      	ldr	r2, [r2, #12]
 800b736:	4311      	orrs	r1, r2
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	6812      	ldr	r2, [r2, #0]
 800b73c:	430b      	orrs	r3, r1
 800b73e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	695a      	ldr	r2, [r3, #20]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	699b      	ldr	r3, [r3, #24]
 800b752:	431a      	orrs	r2, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	430a      	orrs	r2, r1
 800b75a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f042 0201 	orr.w	r2, r2, #1
 800b76a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2220      	movs	r2, #32
 800b776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3710      	adds	r7, #16
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	000186a0 	.word	0x000186a0
 800b798:	001e847f 	.word	0x001e847f
 800b79c:	003d08ff 	.word	0x003d08ff
 800b7a0:	431bde83 	.word	0x431bde83
 800b7a4:	10624dd3 	.word	0x10624dd3

0800b7a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b088      	sub	sp, #32
 800b7ac:	af02      	add	r7, sp, #8
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	607a      	str	r2, [r7, #4]
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	817b      	strh	r3, [r7, #10]
 800b7b8:	4613      	mov	r3, r2
 800b7ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b7bc:	f7fe fee8 	bl	800a590 <HAL_GetTick>
 800b7c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	2b20      	cmp	r3, #32
 800b7cc:	f040 80e0 	bne.w	800b990 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	9300      	str	r3, [sp, #0]
 800b7d4:	2319      	movs	r3, #25
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	4970      	ldr	r1, [pc, #448]	; (800b99c <HAL_I2C_Master_Transmit+0x1f4>)
 800b7da:	68f8      	ldr	r0, [r7, #12]
 800b7dc:	f002 fd7a 	bl	800e2d4 <I2C_WaitOnFlagUntilTimeout>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d001      	beq.n	800b7ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b7e6:	2302      	movs	r3, #2
 800b7e8:	e0d3      	b.n	800b992 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d101      	bne.n	800b7f8 <HAL_I2C_Master_Transmit+0x50>
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	e0cc      	b.n	800b992 <HAL_I2C_Master_Transmit+0x1ea>
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f003 0301 	and.w	r3, r3, #1
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d007      	beq.n	800b81e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f042 0201 	orr.w	r2, r2, #1
 800b81c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b82c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2221      	movs	r2, #33	; 0x21
 800b832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2210      	movs	r2, #16
 800b83a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2200      	movs	r2, #0
 800b842:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	893a      	ldrh	r2, [r7, #8]
 800b84e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b854:	b29a      	uxth	r2, r3
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	4a50      	ldr	r2, [pc, #320]	; (800b9a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800b85e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b860:	8979      	ldrh	r1, [r7, #10]
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	6a3a      	ldr	r2, [r7, #32]
 800b866:	68f8      	ldr	r0, [r7, #12]
 800b868:	f002 f9be 	bl	800dbe8 <I2C_MasterRequestWrite>
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d001      	beq.n	800b876 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b872:	2301      	movs	r3, #1
 800b874:	e08d      	b.n	800b992 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b876:	2300      	movs	r3, #0
 800b878:	613b      	str	r3, [r7, #16]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	695b      	ldr	r3, [r3, #20]
 800b880:	613b      	str	r3, [r7, #16]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	699b      	ldr	r3, [r3, #24]
 800b888:	613b      	str	r3, [r7, #16]
 800b88a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b88c:	e066      	b.n	800b95c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b88e:	697a      	ldr	r2, [r7, #20]
 800b890:	6a39      	ldr	r1, [r7, #32]
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	f002 fdf4 	bl	800e480 <I2C_WaitOnTXEFlagUntilTimeout>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00d      	beq.n	800b8ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a2:	2b04      	cmp	r3, #4
 800b8a4:	d107      	bne.n	800b8b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	e06b      	b.n	800b992 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8be:	781a      	ldrb	r2, [r3, #0]
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ca:	1c5a      	adds	r2, r3, #1
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	3b01      	subs	r3, #1
 800b8d8:	b29a      	uxth	r2, r3
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8e2:	3b01      	subs	r3, #1
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	695b      	ldr	r3, [r3, #20]
 800b8f0:	f003 0304 	and.w	r3, r3, #4
 800b8f4:	2b04      	cmp	r3, #4
 800b8f6:	d11b      	bne.n	800b930 <HAL_I2C_Master_Transmit+0x188>
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d017      	beq.n	800b930 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b904:	781a      	ldrb	r2, [r3, #0]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b910:	1c5a      	adds	r2, r3, #1
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	3b01      	subs	r3, #1
 800b91e:	b29a      	uxth	r2, r3
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b928:	3b01      	subs	r3, #1
 800b92a:	b29a      	uxth	r2, r3
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b930:	697a      	ldr	r2, [r7, #20]
 800b932:	6a39      	ldr	r1, [r7, #32]
 800b934:	68f8      	ldr	r0, [r7, #12]
 800b936:	f002 fde4 	bl	800e502 <I2C_WaitOnBTFFlagUntilTimeout>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00d      	beq.n	800b95c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b944:	2b04      	cmp	r3, #4
 800b946:	d107      	bne.n	800b958 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b956:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b958:	2301      	movs	r3, #1
 800b95a:	e01a      	b.n	800b992 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b960:	2b00      	cmp	r3, #0
 800b962:	d194      	bne.n	800b88e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2220      	movs	r2, #32
 800b978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2200      	movs	r2, #0
 800b980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2200      	movs	r2, #0
 800b988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b98c:	2300      	movs	r3, #0
 800b98e:	e000      	b.n	800b992 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b990:	2302      	movs	r3, #2
  }
}
 800b992:	4618      	mov	r0, r3
 800b994:	3718      	adds	r7, #24
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	00100002 	.word	0x00100002
 800b9a0:	ffff0000 	.word	0xffff0000

0800b9a4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b08c      	sub	sp, #48	; 0x30
 800b9a8:	af02      	add	r7, sp, #8
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	607a      	str	r2, [r7, #4]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	817b      	strh	r3, [r7, #10]
 800b9b4:	4613      	mov	r3, r2
 800b9b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b9b8:	f7fe fdea 	bl	800a590 <HAL_GetTick>
 800b9bc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	2b20      	cmp	r3, #32
 800b9c8:	f040 820b 	bne.w	800bde2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ce:	9300      	str	r3, [sp, #0]
 800b9d0:	2319      	movs	r3, #25
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	497c      	ldr	r1, [pc, #496]	; (800bbc8 <HAL_I2C_Master_Receive+0x224>)
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	f002 fc7c 	bl	800e2d4 <I2C_WaitOnFlagUntilTimeout>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d001      	beq.n	800b9e6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b9e2:	2302      	movs	r3, #2
 800b9e4:	e1fe      	b.n	800bde4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d101      	bne.n	800b9f4 <HAL_I2C_Master_Receive+0x50>
 800b9f0:	2302      	movs	r3, #2
 800b9f2:	e1f7      	b.n	800bde4 <HAL_I2C_Master_Receive+0x440>
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f003 0301 	and.w	r3, r3, #1
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d007      	beq.n	800ba1a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f042 0201 	orr.w	r2, r2, #1
 800ba18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ba28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2222      	movs	r2, #34	; 0x22
 800ba2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2210      	movs	r2, #16
 800ba36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	893a      	ldrh	r2, [r7, #8]
 800ba4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba50:	b29a      	uxth	r2, r3
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	4a5c      	ldr	r2, [pc, #368]	; (800bbcc <HAL_I2C_Master_Receive+0x228>)
 800ba5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800ba5c:	8979      	ldrh	r1, [r7, #10]
 800ba5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba62:	68f8      	ldr	r0, [r7, #12]
 800ba64:	f002 f942 	bl	800dcec <I2C_MasterRequestRead>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d001      	beq.n	800ba72 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	e1b8      	b.n	800bde4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d113      	bne.n	800baa2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	623b      	str	r3, [r7, #32]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	695b      	ldr	r3, [r3, #20]
 800ba84:	623b      	str	r3, [r7, #32]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	699b      	ldr	r3, [r3, #24]
 800ba8c:	623b      	str	r3, [r7, #32]
 800ba8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba9e:	601a      	str	r2, [r3, #0]
 800baa0:	e18c      	b.n	800bdbc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d11b      	bne.n	800bae2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bab8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800baba:	2300      	movs	r3, #0
 800babc:	61fb      	str	r3, [r7, #28]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	695b      	ldr	r3, [r3, #20]
 800bac4:	61fb      	str	r3, [r7, #28]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	699b      	ldr	r3, [r3, #24]
 800bacc:	61fb      	str	r3, [r7, #28]
 800bace:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bade:	601a      	str	r2, [r3, #0]
 800bae0:	e16c      	b.n	800bdbc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bae6:	2b02      	cmp	r3, #2
 800bae8:	d11b      	bne.n	800bb22 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800baf8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	61bb      	str	r3, [r7, #24]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	695b      	ldr	r3, [r3, #20]
 800bb14:	61bb      	str	r3, [r7, #24]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	699b      	ldr	r3, [r3, #24]
 800bb1c:	61bb      	str	r3, [r7, #24]
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	e14c      	b.n	800bdbc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	681a      	ldr	r2, [r3, #0]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bb30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb32:	2300      	movs	r3, #0
 800bb34:	617b      	str	r3, [r7, #20]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	695b      	ldr	r3, [r3, #20]
 800bb3c:	617b      	str	r3, [r7, #20]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	699b      	ldr	r3, [r3, #24]
 800bb44:	617b      	str	r3, [r7, #20]
 800bb46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800bb48:	e138      	b.n	800bdbc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb4e:	2b03      	cmp	r3, #3
 800bb50:	f200 80f1 	bhi.w	800bd36 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d123      	bne.n	800bba4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb60:	68f8      	ldr	r0, [r7, #12]
 800bb62:	f002 fd41 	bl	800e5e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d001      	beq.n	800bb70 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	e139      	b.n	800bde4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	691a      	ldr	r2, [r3, #16]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb7a:	b2d2      	uxtb	r2, r2
 800bb7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb82:	1c5a      	adds	r2, r3, #1
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb8c:	3b01      	subs	r3, #1
 800bb8e:	b29a      	uxth	r2, r3
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	b29a      	uxth	r2, r3
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bba2:	e10b      	b.n	800bdbc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bba8:	2b02      	cmp	r3, #2
 800bbaa:	d14e      	bne.n	800bc4a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbae:	9300      	str	r3, [sp, #0]
 800bbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	4906      	ldr	r1, [pc, #24]	; (800bbd0 <HAL_I2C_Master_Receive+0x22c>)
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f002 fb8c 	bl	800e2d4 <I2C_WaitOnFlagUntilTimeout>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d008      	beq.n	800bbd4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	e10e      	b.n	800bde4 <HAL_I2C_Master_Receive+0x440>
 800bbc6:	bf00      	nop
 800bbc8:	00100002 	.word	0x00100002
 800bbcc:	ffff0000 	.word	0xffff0000
 800bbd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	681a      	ldr	r2, [r3, #0]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbe2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	691a      	ldr	r2, [r3, #16]
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbee:	b2d2      	uxtb	r2, r2
 800bbf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf6:	1c5a      	adds	r2, r3, #1
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc00:	3b01      	subs	r3, #1
 800bc02:	b29a      	uxth	r2, r3
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	3b01      	subs	r3, #1
 800bc10:	b29a      	uxth	r2, r3
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	691a      	ldr	r2, [r3, #16]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc20:	b2d2      	uxtb	r2, r2
 800bc22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc28:	1c5a      	adds	r2, r3, #1
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc32:	3b01      	subs	r3, #1
 800bc34:	b29a      	uxth	r2, r3
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	3b01      	subs	r3, #1
 800bc42:	b29a      	uxth	r2, r3
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bc48:	e0b8      	b.n	800bdbc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4c:	9300      	str	r3, [sp, #0]
 800bc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc50:	2200      	movs	r2, #0
 800bc52:	4966      	ldr	r1, [pc, #408]	; (800bdec <HAL_I2C_Master_Receive+0x448>)
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	f002 fb3d 	bl	800e2d4 <I2C_WaitOnFlagUntilTimeout>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d001      	beq.n	800bc64 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	e0bf      	b.n	800bde4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	681a      	ldr	r2, [r3, #0]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	691a      	ldr	r2, [r3, #16]
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7e:	b2d2      	uxtb	r2, r2
 800bc80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc86:	1c5a      	adds	r2, r3, #1
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc90:	3b01      	subs	r3, #1
 800bc92:	b29a      	uxth	r2, r3
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	3b01      	subs	r3, #1
 800bca0:	b29a      	uxth	r2, r3
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca8:	9300      	str	r3, [sp, #0]
 800bcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcac:	2200      	movs	r2, #0
 800bcae:	494f      	ldr	r1, [pc, #316]	; (800bdec <HAL_I2C_Master_Receive+0x448>)
 800bcb0:	68f8      	ldr	r0, [r7, #12]
 800bcb2:	f002 fb0f 	bl	800e2d4 <I2C_WaitOnFlagUntilTimeout>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d001      	beq.n	800bcc0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	e091      	b.n	800bde4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	691a      	ldr	r2, [r3, #16]
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcda:	b2d2      	uxtb	r2, r2
 800bcdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce2:	1c5a      	adds	r2, r3, #1
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcec:	3b01      	subs	r3, #1
 800bcee:	b29a      	uxth	r2, r3
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	3b01      	subs	r3, #1
 800bcfc:	b29a      	uxth	r2, r3
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	691a      	ldr	r2, [r3, #16]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd0c:	b2d2      	uxtb	r2, r2
 800bd0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd14:	1c5a      	adds	r2, r3, #1
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd1e:	3b01      	subs	r3, #1
 800bd20:	b29a      	uxth	r2, r3
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	3b01      	subs	r3, #1
 800bd2e:	b29a      	uxth	r2, r3
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bd34:	e042      	b.n	800bdbc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd3a:	68f8      	ldr	r0, [r7, #12]
 800bd3c:	f002 fc54 	bl	800e5e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bd40:	4603      	mov	r3, r0
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d001      	beq.n	800bd4a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800bd46:	2301      	movs	r3, #1
 800bd48:	e04c      	b.n	800bde4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	691a      	ldr	r2, [r3, #16]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd54:	b2d2      	uxtb	r2, r2
 800bd56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5c:	1c5a      	adds	r2, r3, #1
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd66:	3b01      	subs	r3, #1
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	3b01      	subs	r3, #1
 800bd76:	b29a      	uxth	r2, r3
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	695b      	ldr	r3, [r3, #20]
 800bd82:	f003 0304 	and.w	r3, r3, #4
 800bd86:	2b04      	cmp	r3, #4
 800bd88:	d118      	bne.n	800bdbc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	691a      	ldr	r2, [r3, #16]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd94:	b2d2      	uxtb	r2, r2
 800bd96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9c:	1c5a      	adds	r2, r3, #1
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bda6:	3b01      	subs	r3, #1
 800bda8:	b29a      	uxth	r2, r3
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	b29a      	uxth	r2, r3
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	f47f aec2 	bne.w	800bb4a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2220      	movs	r2, #32
 800bdca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bdde:	2300      	movs	r3, #0
 800bde0:	e000      	b.n	800bde4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bde2:	2302      	movs	r3, #2
  }
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3728      	adds	r7, #40	; 0x28
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	00010004 	.word	0x00010004

0800bdf0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b088      	sub	sp, #32
 800bdf4:	af02      	add	r7, sp, #8
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	4608      	mov	r0, r1
 800bdfa:	4611      	mov	r1, r2
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	4603      	mov	r3, r0
 800be00:	817b      	strh	r3, [r7, #10]
 800be02:	460b      	mov	r3, r1
 800be04:	813b      	strh	r3, [r7, #8]
 800be06:	4613      	mov	r3, r2
 800be08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800be0a:	f7fe fbc1 	bl	800a590 <HAL_GetTick>
 800be0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be16:	b2db      	uxtb	r3, r3
 800be18:	2b20      	cmp	r3, #32
 800be1a:	f040 80d9 	bne.w	800bfd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	9300      	str	r3, [sp, #0]
 800be22:	2319      	movs	r3, #25
 800be24:	2201      	movs	r2, #1
 800be26:	496d      	ldr	r1, [pc, #436]	; (800bfdc <HAL_I2C_Mem_Write+0x1ec>)
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f002 fa53 	bl	800e2d4 <I2C_WaitOnFlagUntilTimeout>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d001      	beq.n	800be38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800be34:	2302      	movs	r3, #2
 800be36:	e0cc      	b.n	800bfd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d101      	bne.n	800be46 <HAL_I2C_Mem_Write+0x56>
 800be42:	2302      	movs	r3, #2
 800be44:	e0c5      	b.n	800bfd2 <HAL_I2C_Mem_Write+0x1e2>
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2201      	movs	r2, #1
 800be4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f003 0301 	and.w	r3, r3, #1
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d007      	beq.n	800be6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f042 0201 	orr.w	r2, r2, #1
 800be6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	681a      	ldr	r2, [r3, #0]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800be7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2221      	movs	r2, #33	; 0x21
 800be80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2240      	movs	r2, #64	; 0x40
 800be88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2200      	movs	r2, #0
 800be90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	6a3a      	ldr	r2, [r7, #32]
 800be96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800be9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bea2:	b29a      	uxth	r2, r3
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	4a4d      	ldr	r2, [pc, #308]	; (800bfe0 <HAL_I2C_Mem_Write+0x1f0>)
 800beac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800beae:	88f8      	ldrh	r0, [r7, #6]
 800beb0:	893a      	ldrh	r2, [r7, #8]
 800beb2:	8979      	ldrh	r1, [r7, #10]
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	9301      	str	r3, [sp, #4]
 800beb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beba:	9300      	str	r3, [sp, #0]
 800bebc:	4603      	mov	r3, r0
 800bebe:	68f8      	ldr	r0, [r7, #12]
 800bec0:	f001 ffe2 	bl	800de88 <I2C_RequestMemoryWrite>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d052      	beq.n	800bf70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800beca:	2301      	movs	r3, #1
 800becc:	e081      	b.n	800bfd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bece:	697a      	ldr	r2, [r7, #20]
 800bed0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bed2:	68f8      	ldr	r0, [r7, #12]
 800bed4:	f002 fad4 	bl	800e480 <I2C_WaitOnTXEFlagUntilTimeout>
 800bed8:	4603      	mov	r3, r0
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d00d      	beq.n	800befa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee2:	2b04      	cmp	r3, #4
 800bee4:	d107      	bne.n	800bef6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bef4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	e06b      	b.n	800bfd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befe:	781a      	ldrb	r2, [r3, #0]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0a:	1c5a      	adds	r2, r3, #1
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf14:	3b01      	subs	r3, #1
 800bf16:	b29a      	uxth	r2, r3
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	3b01      	subs	r3, #1
 800bf24:	b29a      	uxth	r2, r3
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	695b      	ldr	r3, [r3, #20]
 800bf30:	f003 0304 	and.w	r3, r3, #4
 800bf34:	2b04      	cmp	r3, #4
 800bf36:	d11b      	bne.n	800bf70 <HAL_I2C_Mem_Write+0x180>
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d017      	beq.n	800bf70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf44:	781a      	ldrb	r2, [r3, #0]
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf50:	1c5a      	adds	r2, r3, #1
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf5a:	3b01      	subs	r3, #1
 800bf5c:	b29a      	uxth	r2, r3
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d1aa      	bne.n	800bece <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bf78:	697a      	ldr	r2, [r7, #20]
 800bf7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	f002 fac0 	bl	800e502 <I2C_WaitOnBTFFlagUntilTimeout>
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d00d      	beq.n	800bfa4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf8c:	2b04      	cmp	r3, #4
 800bf8e:	d107      	bne.n	800bfa0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e016      	b.n	800bfd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bfb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2220      	movs	r2, #32
 800bfb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	e000      	b.n	800bfd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800bfd0:	2302      	movs	r3, #2
  }
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3718      	adds	r7, #24
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	00100002 	.word	0x00100002
 800bfe0:	ffff0000 	.word	0xffff0000

0800bfe4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b08c      	sub	sp, #48	; 0x30
 800bfe8:	af02      	add	r7, sp, #8
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	4608      	mov	r0, r1
 800bfee:	4611      	mov	r1, r2
 800bff0:	461a      	mov	r2, r3
 800bff2:	4603      	mov	r3, r0
 800bff4:	817b      	strh	r3, [r7, #10]
 800bff6:	460b      	mov	r3, r1
 800bff8:	813b      	strh	r3, [r7, #8]
 800bffa:	4613      	mov	r3, r2
 800bffc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bffe:	f7fe fac7 	bl	800a590 <HAL_GetTick>
 800c002:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c00a:	b2db      	uxtb	r3, r3
 800c00c:	2b20      	cmp	r3, #32
 800c00e:	f040 8208 	bne.w	800c422 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c014:	9300      	str	r3, [sp, #0]
 800c016:	2319      	movs	r3, #25
 800c018:	2201      	movs	r2, #1
 800c01a:	497b      	ldr	r1, [pc, #492]	; (800c208 <HAL_I2C_Mem_Read+0x224>)
 800c01c:	68f8      	ldr	r0, [r7, #12]
 800c01e:	f002 f959 	bl	800e2d4 <I2C_WaitOnFlagUntilTimeout>
 800c022:	4603      	mov	r3, r0
 800c024:	2b00      	cmp	r3, #0
 800c026:	d001      	beq.n	800c02c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800c028:	2302      	movs	r3, #2
 800c02a:	e1fb      	b.n	800c424 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c032:	2b01      	cmp	r3, #1
 800c034:	d101      	bne.n	800c03a <HAL_I2C_Mem_Read+0x56>
 800c036:	2302      	movs	r3, #2
 800c038:	e1f4      	b.n	800c424 <HAL_I2C_Mem_Read+0x440>
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2201      	movs	r2, #1
 800c03e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f003 0301 	and.w	r3, r3, #1
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	d007      	beq.n	800c060 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f042 0201 	orr.w	r2, r2, #1
 800c05e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	681a      	ldr	r2, [r3, #0]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c06e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2222      	movs	r2, #34	; 0x22
 800c074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2240      	movs	r2, #64	; 0x40
 800c07c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2200      	movs	r2, #0
 800c084:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c08a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800c090:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c096:	b29a      	uxth	r2, r3
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	4a5b      	ldr	r2, [pc, #364]	; (800c20c <HAL_I2C_Mem_Read+0x228>)
 800c0a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c0a2:	88f8      	ldrh	r0, [r7, #6]
 800c0a4:	893a      	ldrh	r2, [r7, #8]
 800c0a6:	8979      	ldrh	r1, [r7, #10]
 800c0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0aa:	9301      	str	r3, [sp, #4]
 800c0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ae:	9300      	str	r3, [sp, #0]
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	f001 ff7e 	bl	800dfb4 <I2C_RequestMemoryRead>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d001      	beq.n	800c0c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e1b0      	b.n	800c424 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d113      	bne.n	800c0f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	623b      	str	r3, [r7, #32]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	695b      	ldr	r3, [r3, #20]
 800c0d4:	623b      	str	r3, [r7, #32]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	699b      	ldr	r3, [r3, #24]
 800c0dc:	623b      	str	r3, [r7, #32]
 800c0de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c0ee:	601a      	str	r2, [r3, #0]
 800c0f0:	e184      	b.n	800c3fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d11b      	bne.n	800c132 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c108:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c10a:	2300      	movs	r3, #0
 800c10c:	61fb      	str	r3, [r7, #28]
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	695b      	ldr	r3, [r3, #20]
 800c114:	61fb      	str	r3, [r7, #28]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	699b      	ldr	r3, [r3, #24]
 800c11c:	61fb      	str	r3, [r7, #28]
 800c11e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c12e:	601a      	str	r2, [r3, #0]
 800c130:	e164      	b.n	800c3fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c136:	2b02      	cmp	r3, #2
 800c138:	d11b      	bne.n	800c172 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c148:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c158:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c15a:	2300      	movs	r3, #0
 800c15c:	61bb      	str	r3, [r7, #24]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	695b      	ldr	r3, [r3, #20]
 800c164:	61bb      	str	r3, [r7, #24]
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	699b      	ldr	r3, [r3, #24]
 800c16c:	61bb      	str	r3, [r7, #24]
 800c16e:	69bb      	ldr	r3, [r7, #24]
 800c170:	e144      	b.n	800c3fc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c172:	2300      	movs	r3, #0
 800c174:	617b      	str	r3, [r7, #20]
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	695b      	ldr	r3, [r3, #20]
 800c17c:	617b      	str	r3, [r7, #20]
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	699b      	ldr	r3, [r3, #24]
 800c184:	617b      	str	r3, [r7, #20]
 800c186:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800c188:	e138      	b.n	800c3fc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c18e:	2b03      	cmp	r3, #3
 800c190:	f200 80f1 	bhi.w	800c376 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d123      	bne.n	800c1e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c19c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c19e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	f002 fa21 	bl	800e5e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d001      	beq.n	800c1b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	e139      	b.n	800c424 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	691a      	ldr	r2, [r3, #16]
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ba:	b2d2      	uxtb	r2, r2
 800c1bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c2:	1c5a      	adds	r2, r3, #1
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1cc:	3b01      	subs	r3, #1
 800c1ce:	b29a      	uxth	r2, r3
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	3b01      	subs	r3, #1
 800c1dc:	b29a      	uxth	r2, r3
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c1e2:	e10b      	b.n	800c3fc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1e8:	2b02      	cmp	r3, #2
 800c1ea:	d14e      	bne.n	800c28a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ee:	9300      	str	r3, [sp, #0]
 800c1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	4906      	ldr	r1, [pc, #24]	; (800c210 <HAL_I2C_Mem_Read+0x22c>)
 800c1f6:	68f8      	ldr	r0, [r7, #12]
 800c1f8:	f002 f86c 	bl	800e2d4 <I2C_WaitOnFlagUntilTimeout>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d008      	beq.n	800c214 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800c202:	2301      	movs	r3, #1
 800c204:	e10e      	b.n	800c424 <HAL_I2C_Mem_Read+0x440>
 800c206:	bf00      	nop
 800c208:	00100002 	.word	0x00100002
 800c20c:	ffff0000 	.word	0xffff0000
 800c210:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c222:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	691a      	ldr	r2, [r3, #16]
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c22e:	b2d2      	uxtb	r2, r2
 800c230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c236:	1c5a      	adds	r2, r3, #1
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c240:	3b01      	subs	r3, #1
 800c242:	b29a      	uxth	r2, r3
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c24c:	b29b      	uxth	r3, r3
 800c24e:	3b01      	subs	r3, #1
 800c250:	b29a      	uxth	r2, r3
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	691a      	ldr	r2, [r3, #16]
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c260:	b2d2      	uxtb	r2, r2
 800c262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c268:	1c5a      	adds	r2, r3, #1
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c272:	3b01      	subs	r3, #1
 800c274:	b29a      	uxth	r2, r3
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c27e:	b29b      	uxth	r3, r3
 800c280:	3b01      	subs	r3, #1
 800c282:	b29a      	uxth	r2, r3
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c288:	e0b8      	b.n	800c3fc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28c:	9300      	str	r3, [sp, #0]
 800c28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c290:	2200      	movs	r2, #0
 800c292:	4966      	ldr	r1, [pc, #408]	; (800c42c <HAL_I2C_Mem_Read+0x448>)
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f002 f81d 	bl	800e2d4 <I2C_WaitOnFlagUntilTimeout>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d001      	beq.n	800c2a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e0bf      	b.n	800c424 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c2b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	691a      	ldr	r2, [r3, #16]
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2be:	b2d2      	uxtb	r2, r2
 800c2c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c6:	1c5a      	adds	r2, r3, #1
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	b29a      	uxth	r2, r3
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	b29a      	uxth	r2, r3
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e8:	9300      	str	r3, [sp, #0]
 800c2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	494f      	ldr	r1, [pc, #316]	; (800c42c <HAL_I2C_Mem_Read+0x448>)
 800c2f0:	68f8      	ldr	r0, [r7, #12]
 800c2f2:	f001 ffef 	bl	800e2d4 <I2C_WaitOnFlagUntilTimeout>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d001      	beq.n	800c300 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	e091      	b.n	800c424 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c30e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	691a      	ldr	r2, [r3, #16]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c31a:	b2d2      	uxtb	r2, r2
 800c31c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c322:	1c5a      	adds	r2, r3, #1
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c32c:	3b01      	subs	r3, #1
 800c32e:	b29a      	uxth	r2, r3
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c338:	b29b      	uxth	r3, r3
 800c33a:	3b01      	subs	r3, #1
 800c33c:	b29a      	uxth	r2, r3
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	691a      	ldr	r2, [r3, #16]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c34c:	b2d2      	uxtb	r2, r2
 800c34e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c354:	1c5a      	adds	r2, r3, #1
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c35e:	3b01      	subs	r3, #1
 800c360:	b29a      	uxth	r2, r3
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	3b01      	subs	r3, #1
 800c36e:	b29a      	uxth	r2, r3
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c374:	e042      	b.n	800c3fc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f002 f934 	bl	800e5e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d001      	beq.n	800c38a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	e04c      	b.n	800c424 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	691a      	ldr	r2, [r3, #16]
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c394:	b2d2      	uxtb	r2, r2
 800c396:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c39c:	1c5a      	adds	r2, r3, #1
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	b29a      	uxth	r2, r3
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	3b01      	subs	r3, #1
 800c3b6:	b29a      	uxth	r2, r3
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	695b      	ldr	r3, [r3, #20]
 800c3c2:	f003 0304 	and.w	r3, r3, #4
 800c3c6:	2b04      	cmp	r3, #4
 800c3c8:	d118      	bne.n	800c3fc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	691a      	ldr	r2, [r3, #16]
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d4:	b2d2      	uxtb	r2, r2
 800c3d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3dc:	1c5a      	adds	r2, r3, #1
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3e6:	3b01      	subs	r3, #1
 800c3e8:	b29a      	uxth	r2, r3
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	b29a      	uxth	r2, r3
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c400:	2b00      	cmp	r3, #0
 800c402:	f47f aec2 	bne.w	800c18a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2220      	movs	r2, #32
 800c40a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2200      	movs	r2, #0
 800c412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2200      	movs	r2, #0
 800c41a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c41e:	2300      	movs	r3, #0
 800c420:	e000      	b.n	800c424 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800c422:	2302      	movs	r3, #2
  }
}
 800c424:	4618      	mov	r0, r3
 800c426:	3728      	adds	r7, #40	; 0x28
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	00010004 	.word	0x00010004

0800c430 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b088      	sub	sp, #32
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800c438:	2300      	movs	r3, #0
 800c43a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c448:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c450:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c458:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800c45a:	7bfb      	ldrb	r3, [r7, #15]
 800c45c:	2b10      	cmp	r3, #16
 800c45e:	d003      	beq.n	800c468 <HAL_I2C_EV_IRQHandler+0x38>
 800c460:	7bfb      	ldrb	r3, [r7, #15]
 800c462:	2b40      	cmp	r3, #64	; 0x40
 800c464:	f040 80c1 	bne.w	800c5ea <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	699b      	ldr	r3, [r3, #24]
 800c46e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	695b      	ldr	r3, [r3, #20]
 800c476:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800c478:	69fb      	ldr	r3, [r7, #28]
 800c47a:	f003 0301 	and.w	r3, r3, #1
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d10d      	bne.n	800c49e <HAL_I2C_EV_IRQHandler+0x6e>
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800c488:	d003      	beq.n	800c492 <HAL_I2C_EV_IRQHandler+0x62>
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800c490:	d101      	bne.n	800c496 <HAL_I2C_EV_IRQHandler+0x66>
 800c492:	2301      	movs	r3, #1
 800c494:	e000      	b.n	800c498 <HAL_I2C_EV_IRQHandler+0x68>
 800c496:	2300      	movs	r3, #0
 800c498:	2b01      	cmp	r3, #1
 800c49a:	f000 8132 	beq.w	800c702 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	f003 0301 	and.w	r3, r3, #1
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00c      	beq.n	800c4c2 <HAL_I2C_EV_IRQHandler+0x92>
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	0a5b      	lsrs	r3, r3, #9
 800c4ac:	f003 0301 	and.w	r3, r3, #1
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d006      	beq.n	800c4c2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f002 f91c 	bl	800e6f2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 fd79 	bl	800cfb2 <I2C_Master_SB>
 800c4c0:	e092      	b.n	800c5e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c4c2:	69fb      	ldr	r3, [r7, #28]
 800c4c4:	08db      	lsrs	r3, r3, #3
 800c4c6:	f003 0301 	and.w	r3, r3, #1
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d009      	beq.n	800c4e2 <HAL_I2C_EV_IRQHandler+0xb2>
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	0a5b      	lsrs	r3, r3, #9
 800c4d2:	f003 0301 	and.w	r3, r3, #1
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d003      	beq.n	800c4e2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 fdef 	bl	800d0be <I2C_Master_ADD10>
 800c4e0:	e082      	b.n	800c5e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	085b      	lsrs	r3, r3, #1
 800c4e6:	f003 0301 	and.w	r3, r3, #1
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d009      	beq.n	800c502 <HAL_I2C_EV_IRQHandler+0xd2>
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	0a5b      	lsrs	r3, r3, #9
 800c4f2:	f003 0301 	and.w	r3, r3, #1
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d003      	beq.n	800c502 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 fe09 	bl	800d112 <I2C_Master_ADDR>
 800c500:	e072      	b.n	800c5e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800c502:	69bb      	ldr	r3, [r7, #24]
 800c504:	089b      	lsrs	r3, r3, #2
 800c506:	f003 0301 	and.w	r3, r3, #1
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d03b      	beq.n	800c586 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c51c:	f000 80f3 	beq.w	800c706 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c520:	69fb      	ldr	r3, [r7, #28]
 800c522:	09db      	lsrs	r3, r3, #7
 800c524:	f003 0301 	and.w	r3, r3, #1
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d00f      	beq.n	800c54c <HAL_I2C_EV_IRQHandler+0x11c>
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	0a9b      	lsrs	r3, r3, #10
 800c530:	f003 0301 	and.w	r3, r3, #1
 800c534:	2b00      	cmp	r3, #0
 800c536:	d009      	beq.n	800c54c <HAL_I2C_EV_IRQHandler+0x11c>
 800c538:	69fb      	ldr	r3, [r7, #28]
 800c53a:	089b      	lsrs	r3, r3, #2
 800c53c:	f003 0301 	and.w	r3, r3, #1
 800c540:	2b00      	cmp	r3, #0
 800c542:	d103      	bne.n	800c54c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 f9f3 	bl	800c930 <I2C_MasterTransmit_TXE>
 800c54a:	e04d      	b.n	800c5e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c54c:	69fb      	ldr	r3, [r7, #28]
 800c54e:	089b      	lsrs	r3, r3, #2
 800c550:	f003 0301 	and.w	r3, r3, #1
 800c554:	2b00      	cmp	r3, #0
 800c556:	f000 80d6 	beq.w	800c706 <HAL_I2C_EV_IRQHandler+0x2d6>
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	0a5b      	lsrs	r3, r3, #9
 800c55e:	f003 0301 	and.w	r3, r3, #1
 800c562:	2b00      	cmp	r3, #0
 800c564:	f000 80cf 	beq.w	800c706 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800c568:	7bbb      	ldrb	r3, [r7, #14]
 800c56a:	2b21      	cmp	r3, #33	; 0x21
 800c56c:	d103      	bne.n	800c576 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 fa7a 	bl	800ca68 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c574:	e0c7      	b.n	800c706 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800c576:	7bfb      	ldrb	r3, [r7, #15]
 800c578:	2b40      	cmp	r3, #64	; 0x40
 800c57a:	f040 80c4 	bne.w	800c706 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fae8 	bl	800cb54 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c584:	e0bf      	b.n	800c706 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c594:	f000 80b7 	beq.w	800c706 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c598:	69fb      	ldr	r3, [r7, #28]
 800c59a:	099b      	lsrs	r3, r3, #6
 800c59c:	f003 0301 	and.w	r3, r3, #1
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d00f      	beq.n	800c5c4 <HAL_I2C_EV_IRQHandler+0x194>
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	0a9b      	lsrs	r3, r3, #10
 800c5a8:	f003 0301 	and.w	r3, r3, #1
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d009      	beq.n	800c5c4 <HAL_I2C_EV_IRQHandler+0x194>
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	089b      	lsrs	r3, r3, #2
 800c5b4:	f003 0301 	and.w	r3, r3, #1
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d103      	bne.n	800c5c4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 fb5d 	bl	800cc7c <I2C_MasterReceive_RXNE>
 800c5c2:	e011      	b.n	800c5e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	089b      	lsrs	r3, r3, #2
 800c5c8:	f003 0301 	and.w	r3, r3, #1
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	f000 809a 	beq.w	800c706 <HAL_I2C_EV_IRQHandler+0x2d6>
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	0a5b      	lsrs	r3, r3, #9
 800c5d6:	f003 0301 	and.w	r3, r3, #1
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	f000 8093 	beq.w	800c706 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 fbfc 	bl	800cdde <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c5e6:	e08e      	b.n	800c706 <HAL_I2C_EV_IRQHandler+0x2d6>
 800c5e8:	e08d      	b.n	800c706 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d004      	beq.n	800c5fc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	695b      	ldr	r3, [r3, #20]
 800c5f8:	61fb      	str	r3, [r7, #28]
 800c5fa:	e007      	b.n	800c60c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	699b      	ldr	r3, [r3, #24]
 800c602:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	695b      	ldr	r3, [r3, #20]
 800c60a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c60c:	69fb      	ldr	r3, [r7, #28]
 800c60e:	085b      	lsrs	r3, r3, #1
 800c610:	f003 0301 	and.w	r3, r3, #1
 800c614:	2b00      	cmp	r3, #0
 800c616:	d012      	beq.n	800c63e <HAL_I2C_EV_IRQHandler+0x20e>
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	0a5b      	lsrs	r3, r3, #9
 800c61c:	f003 0301 	and.w	r3, r3, #1
 800c620:	2b00      	cmp	r3, #0
 800c622:	d00c      	beq.n	800c63e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d003      	beq.n	800c634 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	699b      	ldr	r3, [r3, #24]
 800c632:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800c634:	69b9      	ldr	r1, [r7, #24]
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 ffba 	bl	800d5b0 <I2C_Slave_ADDR>
 800c63c:	e066      	b.n	800c70c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	091b      	lsrs	r3, r3, #4
 800c642:	f003 0301 	and.w	r3, r3, #1
 800c646:	2b00      	cmp	r3, #0
 800c648:	d009      	beq.n	800c65e <HAL_I2C_EV_IRQHandler+0x22e>
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	0a5b      	lsrs	r3, r3, #9
 800c64e:	f003 0301 	and.w	r3, r3, #1
 800c652:	2b00      	cmp	r3, #0
 800c654:	d003      	beq.n	800c65e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 fff4 	bl	800d644 <I2C_Slave_STOPF>
 800c65c:	e056      	b.n	800c70c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c65e:	7bbb      	ldrb	r3, [r7, #14]
 800c660:	2b21      	cmp	r3, #33	; 0x21
 800c662:	d002      	beq.n	800c66a <HAL_I2C_EV_IRQHandler+0x23a>
 800c664:	7bbb      	ldrb	r3, [r7, #14]
 800c666:	2b29      	cmp	r3, #41	; 0x29
 800c668:	d125      	bne.n	800c6b6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	09db      	lsrs	r3, r3, #7
 800c66e:	f003 0301 	and.w	r3, r3, #1
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00f      	beq.n	800c696 <HAL_I2C_EV_IRQHandler+0x266>
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	0a9b      	lsrs	r3, r3, #10
 800c67a:	f003 0301 	and.w	r3, r3, #1
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d009      	beq.n	800c696 <HAL_I2C_EV_IRQHandler+0x266>
 800c682:	69fb      	ldr	r3, [r7, #28]
 800c684:	089b      	lsrs	r3, r3, #2
 800c686:	f003 0301 	and.w	r3, r3, #1
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d103      	bne.n	800c696 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 fed0 	bl	800d434 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c694:	e039      	b.n	800c70a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	089b      	lsrs	r3, r3, #2
 800c69a:	f003 0301 	and.w	r3, r3, #1
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d033      	beq.n	800c70a <HAL_I2C_EV_IRQHandler+0x2da>
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	0a5b      	lsrs	r3, r3, #9
 800c6a6:	f003 0301 	and.w	r3, r3, #1
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d02d      	beq.n	800c70a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 fefd 	bl	800d4ae <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c6b4:	e029      	b.n	800c70a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c6b6:	69fb      	ldr	r3, [r7, #28]
 800c6b8:	099b      	lsrs	r3, r3, #6
 800c6ba:	f003 0301 	and.w	r3, r3, #1
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d00f      	beq.n	800c6e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	0a9b      	lsrs	r3, r3, #10
 800c6c6:	f003 0301 	and.w	r3, r3, #1
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d009      	beq.n	800c6e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	089b      	lsrs	r3, r3, #2
 800c6d2:	f003 0301 	and.w	r3, r3, #1
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d103      	bne.n	800c6e2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 ff08 	bl	800d4f0 <I2C_SlaveReceive_RXNE>
 800c6e0:	e014      	b.n	800c70c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	089b      	lsrs	r3, r3, #2
 800c6e6:	f003 0301 	and.w	r3, r3, #1
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d00e      	beq.n	800c70c <HAL_I2C_EV_IRQHandler+0x2dc>
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	0a5b      	lsrs	r3, r3, #9
 800c6f2:	f003 0301 	and.w	r3, r3, #1
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d008      	beq.n	800c70c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 ff36 	bl	800d56c <I2C_SlaveReceive_BTF>
 800c700:	e004      	b.n	800c70c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800c702:	bf00      	nop
 800c704:	e002      	b.n	800c70c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c706:	bf00      	nop
 800c708:	e000      	b.n	800c70c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c70a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800c70c:	3720      	adds	r7, #32
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b08a      	sub	sp, #40	; 0x28
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	695b      	ldr	r3, [r3, #20]
 800c720:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800c72a:	2300      	movs	r3, #0
 800c72c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c734:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c736:	6a3b      	ldr	r3, [r7, #32]
 800c738:	0a1b      	lsrs	r3, r3, #8
 800c73a:	f003 0301 	and.w	r3, r3, #1
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d00e      	beq.n	800c760 <HAL_I2C_ER_IRQHandler+0x4e>
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	0a1b      	lsrs	r3, r3, #8
 800c746:	f003 0301 	and.w	r3, r3, #1
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d008      	beq.n	800c760 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800c74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c750:	f043 0301 	orr.w	r3, r3, #1
 800c754:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c75e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c760:	6a3b      	ldr	r3, [r7, #32]
 800c762:	0a5b      	lsrs	r3, r3, #9
 800c764:	f003 0301 	and.w	r3, r3, #1
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d00e      	beq.n	800c78a <HAL_I2C_ER_IRQHandler+0x78>
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	0a1b      	lsrs	r3, r3, #8
 800c770:	f003 0301 	and.w	r3, r3, #1
 800c774:	2b00      	cmp	r3, #0
 800c776:	d008      	beq.n	800c78a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800c778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77a:	f043 0302 	orr.w	r3, r3, #2
 800c77e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800c788:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c78a:	6a3b      	ldr	r3, [r7, #32]
 800c78c:	0a9b      	lsrs	r3, r3, #10
 800c78e:	f003 0301 	and.w	r3, r3, #1
 800c792:	2b00      	cmp	r3, #0
 800c794:	d03f      	beq.n	800c816 <HAL_I2C_ER_IRQHandler+0x104>
 800c796:	69fb      	ldr	r3, [r7, #28]
 800c798:	0a1b      	lsrs	r3, r3, #8
 800c79a:	f003 0301 	and.w	r3, r3, #1
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d039      	beq.n	800c816 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800c7a2:	7efb      	ldrb	r3, [r7, #27]
 800c7a4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7b4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7ba:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800c7bc:	7ebb      	ldrb	r3, [r7, #26]
 800c7be:	2b20      	cmp	r3, #32
 800c7c0:	d112      	bne.n	800c7e8 <HAL_I2C_ER_IRQHandler+0xd6>
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d10f      	bne.n	800c7e8 <HAL_I2C_ER_IRQHandler+0xd6>
 800c7c8:	7cfb      	ldrb	r3, [r7, #19]
 800c7ca:	2b21      	cmp	r3, #33	; 0x21
 800c7cc:	d008      	beq.n	800c7e0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800c7ce:	7cfb      	ldrb	r3, [r7, #19]
 800c7d0:	2b29      	cmp	r3, #41	; 0x29
 800c7d2:	d005      	beq.n	800c7e0 <HAL_I2C_ER_IRQHandler+0xce>
 800c7d4:	7cfb      	ldrb	r3, [r7, #19]
 800c7d6:	2b28      	cmp	r3, #40	; 0x28
 800c7d8:	d106      	bne.n	800c7e8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2b21      	cmp	r3, #33	; 0x21
 800c7de:	d103      	bne.n	800c7e8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f001 f85f 	bl	800d8a4 <I2C_Slave_AF>
 800c7e6:	e016      	b.n	800c816 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c7f0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800c7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f4:	f043 0304 	orr.w	r3, r3, #4
 800c7f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800c7fa:	7efb      	ldrb	r3, [r7, #27]
 800c7fc:	2b10      	cmp	r3, #16
 800c7fe:	d002      	beq.n	800c806 <HAL_I2C_ER_IRQHandler+0xf4>
 800c800:	7efb      	ldrb	r3, [r7, #27]
 800c802:	2b40      	cmp	r3, #64	; 0x40
 800c804:	d107      	bne.n	800c816 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c814:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c816:	6a3b      	ldr	r3, [r7, #32]
 800c818:	0adb      	lsrs	r3, r3, #11
 800c81a:	f003 0301 	and.w	r3, r3, #1
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d00e      	beq.n	800c840 <HAL_I2C_ER_IRQHandler+0x12e>
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	0a1b      	lsrs	r3, r3, #8
 800c826:	f003 0301 	and.w	r3, r3, #1
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d008      	beq.n	800c840 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800c82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c830:	f043 0308 	orr.w	r3, r3, #8
 800c834:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800c83e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800c840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c842:	2b00      	cmp	r3, #0
 800c844:	d008      	beq.n	800c858 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84c:	431a      	orrs	r2, r3
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f001 f896 	bl	800d984 <I2C_ITError>
  }
}
 800c858:	bf00      	nop
 800c85a:	3728      	adds	r7, #40	; 0x28
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c860:	b480      	push	{r7}
 800c862:	b083      	sub	sp, #12
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800c868:	bf00      	nop
 800c86a:	370c      	adds	r7, #12
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr

0800c874 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800c87c:	bf00      	nop
 800c87e:	370c      	adds	r7, #12
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c888:	b480      	push	{r7}
 800c88a:	b083      	sub	sp, #12
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c890:	bf00      	nop
 800c892:	370c      	adds	r7, #12
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c8a4:	bf00      	nop
 800c8a6:	370c      	adds	r7, #12
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr

0800c8b0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b083      	sub	sp, #12
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	70fb      	strb	r3, [r7, #3]
 800c8bc:	4613      	mov	r3, r2
 800c8be:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c8c0:	bf00      	nop
 800c8c2:	370c      	adds	r7, #12
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800c8d4:	bf00      	nop
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800c8e8:	bf00      	nop
 800c8ea:	370c      	adds	r7, #12
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800c8fc:	bf00      	nop
 800c8fe:	370c      	adds	r7, #12
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c908:	b480      	push	{r7}
 800c90a:	b083      	sub	sp, #12
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c910:	bf00      	nop
 800c912:	370c      	adds	r7, #12
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr

0800c91c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b083      	sub	sp, #12
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c924:	bf00      	nop
 800c926:	370c      	adds	r7, #12
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b084      	sub	sp, #16
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c93e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c946:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c94c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c952:	2b00      	cmp	r3, #0
 800c954:	d150      	bne.n	800c9f8 <I2C_MasterTransmit_TXE+0xc8>
 800c956:	7bfb      	ldrb	r3, [r7, #15]
 800c958:	2b21      	cmp	r3, #33	; 0x21
 800c95a:	d14d      	bne.n	800c9f8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	2b08      	cmp	r3, #8
 800c960:	d01d      	beq.n	800c99e <I2C_MasterTransmit_TXE+0x6e>
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	2b20      	cmp	r3, #32
 800c966:	d01a      	beq.n	800c99e <I2C_MasterTransmit_TXE+0x6e>
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c96e:	d016      	beq.n	800c99e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	685a      	ldr	r2, [r3, #4]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c97e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2211      	movs	r2, #17
 800c984:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2200      	movs	r2, #0
 800c98a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2220      	movs	r2, #32
 800c992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f7ff ff62 	bl	800c860 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c99c:	e060      	b.n	800ca60 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	685a      	ldr	r2, [r3, #4]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c9ac:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9bc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2220      	movs	r2, #32
 800c9c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c9d2:	b2db      	uxtb	r3, r3
 800c9d4:	2b40      	cmp	r3, #64	; 0x40
 800c9d6:	d107      	bne.n	800c9e8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f7ff ff7d 	bl	800c8e0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c9e6:	e03b      	b.n	800ca60 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f7ff ff35 	bl	800c860 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c9f6:	e033      	b.n	800ca60 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800c9f8:	7bfb      	ldrb	r3, [r7, #15]
 800c9fa:	2b21      	cmp	r3, #33	; 0x21
 800c9fc:	d005      	beq.n	800ca0a <I2C_MasterTransmit_TXE+0xda>
 800c9fe:	7bbb      	ldrb	r3, [r7, #14]
 800ca00:	2b40      	cmp	r3, #64	; 0x40
 800ca02:	d12d      	bne.n	800ca60 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800ca04:	7bfb      	ldrb	r3, [r7, #15]
 800ca06:	2b22      	cmp	r3, #34	; 0x22
 800ca08:	d12a      	bne.n	800ca60 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d108      	bne.n	800ca26 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	685a      	ldr	r2, [r3, #4]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca22:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800ca24:	e01c      	b.n	800ca60 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	2b40      	cmp	r3, #64	; 0x40
 800ca30:	d103      	bne.n	800ca3a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 f88e 	bl	800cb54 <I2C_MemoryTransmit_TXE_BTF>
}
 800ca38:	e012      	b.n	800ca60 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca3e:	781a      	ldrb	r2, [r3, #0]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca4a:	1c5a      	adds	r2, r3, #1
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca54:	b29b      	uxth	r3, r3
 800ca56:	3b01      	subs	r3, #1
 800ca58:	b29a      	uxth	r2, r3
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800ca5e:	e7ff      	b.n	800ca60 <I2C_MasterTransmit_TXE+0x130>
 800ca60:	bf00      	nop
 800ca62:	3710      	adds	r7, #16
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca74:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca7c:	b2db      	uxtb	r3, r3
 800ca7e:	2b21      	cmp	r3, #33	; 0x21
 800ca80:	d164      	bne.n	800cb4c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d012      	beq.n	800cab2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca90:	781a      	ldrb	r2, [r3, #0]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca9c:	1c5a      	adds	r2, r3, #1
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800caa6:	b29b      	uxth	r3, r3
 800caa8:	3b01      	subs	r3, #1
 800caaa:	b29a      	uxth	r2, r3
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800cab0:	e04c      	b.n	800cb4c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2b08      	cmp	r3, #8
 800cab6:	d01d      	beq.n	800caf4 <I2C_MasterTransmit_BTF+0x8c>
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2b20      	cmp	r3, #32
 800cabc:	d01a      	beq.n	800caf4 <I2C_MasterTransmit_BTF+0x8c>
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cac4:	d016      	beq.n	800caf4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	685a      	ldr	r2, [r3, #4]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cad4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2211      	movs	r2, #17
 800cada:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2200      	movs	r2, #0
 800cae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2220      	movs	r2, #32
 800cae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f7ff feb7 	bl	800c860 <HAL_I2C_MasterTxCpltCallback>
}
 800caf2:	e02b      	b.n	800cb4c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	685a      	ldr	r2, [r3, #4]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cb02:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb12:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2200      	movs	r2, #0
 800cb18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2220      	movs	r2, #32
 800cb1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cb28:	b2db      	uxtb	r3, r3
 800cb2a:	2b40      	cmp	r3, #64	; 0x40
 800cb2c:	d107      	bne.n	800cb3e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2200      	movs	r2, #0
 800cb32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7ff fed2 	bl	800c8e0 <HAL_I2C_MemTxCpltCallback>
}
 800cb3c:	e006      	b.n	800cb4c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f7ff fe8a 	bl	800c860 <HAL_I2C_MasterTxCpltCallback>
}
 800cb4c:	bf00      	nop
 800cb4e:	3710      	adds	r7, #16
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b084      	sub	sp, #16
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d11d      	bne.n	800cba8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d10b      	bne.n	800cb8c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb78:	b2da      	uxtb	r2, r3
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb84:	1c9a      	adds	r2, r3, #2
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800cb8a:	e073      	b.n	800cc74 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	121b      	asrs	r3, r3, #8
 800cb94:	b2da      	uxtb	r2, r3
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cba0:	1c5a      	adds	r2, r3, #1
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	651a      	str	r2, [r3, #80]	; 0x50
}
 800cba6:	e065      	b.n	800cc74 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d10b      	bne.n	800cbc8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbb4:	b2da      	uxtb	r2, r3
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbc0:	1c5a      	adds	r2, r3, #1
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	651a      	str	r2, [r3, #80]	; 0x50
}
 800cbc6:	e055      	b.n	800cc74 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbcc:	2b02      	cmp	r3, #2
 800cbce:	d151      	bne.n	800cc74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800cbd0:	7bfb      	ldrb	r3, [r7, #15]
 800cbd2:	2b22      	cmp	r3, #34	; 0x22
 800cbd4:	d10d      	bne.n	800cbf2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cbe4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbea:	1c5a      	adds	r2, r3, #1
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	651a      	str	r2, [r3, #80]	; 0x50
}
 800cbf0:	e040      	b.n	800cc74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbf6:	b29b      	uxth	r3, r3
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d015      	beq.n	800cc28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800cbfc:	7bfb      	ldrb	r3, [r7, #15]
 800cbfe:	2b21      	cmp	r3, #33	; 0x21
 800cc00:	d112      	bne.n	800cc28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc06:	781a      	ldrb	r2, [r3, #0]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc12:	1c5a      	adds	r2, r3, #1
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc1c:	b29b      	uxth	r3, r3
 800cc1e:	3b01      	subs	r3, #1
 800cc20:	b29a      	uxth	r2, r3
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800cc26:	e025      	b.n	800cc74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d120      	bne.n	800cc74 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800cc32:	7bfb      	ldrb	r3, [r7, #15]
 800cc34:	2b21      	cmp	r3, #33	; 0x21
 800cc36:	d11d      	bne.n	800cc74 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	685a      	ldr	r2, [r3, #4]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cc46:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc56:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2220      	movs	r2, #32
 800cc62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f7ff fe36 	bl	800c8e0 <HAL_I2C_MemTxCpltCallback>
}
 800cc74:	bf00      	nop
 800cc76:	3710      	adds	r7, #16
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	2b22      	cmp	r3, #34	; 0x22
 800cc8e:	f040 80a2 	bne.w	800cdd6 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2b03      	cmp	r3, #3
 800cc9e:	d921      	bls.n	800cce4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	691a      	ldr	r2, [r3, #16]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccaa:	b2d2      	uxtb	r2, r2
 800ccac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb2:	1c5a      	adds	r2, r3, #1
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	3b01      	subs	r3, #1
 800ccc0:	b29a      	uxth	r2, r3
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccca:	b29b      	uxth	r3, r3
 800cccc:	2b03      	cmp	r3, #3
 800ccce:	f040 8082 	bne.w	800cdd6 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	685a      	ldr	r2, [r3, #4]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cce0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800cce2:	e078      	b.n	800cdd6 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce8:	2b02      	cmp	r3, #2
 800ccea:	d074      	beq.n	800cdd6 <I2C_MasterReceive_RXNE+0x15a>
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d002      	beq.n	800ccf8 <I2C_MasterReceive_RXNE+0x7c>
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d16e      	bne.n	800cdd6 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f001 fc43 	bl	800e584 <I2C_WaitOnSTOPRequestThroughIT>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d142      	bne.n	800cd8a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd12:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	685a      	ldr	r2, [r3, #4]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cd22:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	691a      	ldr	r2, [r3, #16]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd2e:	b2d2      	uxtb	r2, r2
 800cd30:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd36:	1c5a      	adds	r2, r3, #1
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	3b01      	subs	r3, #1
 800cd44:	b29a      	uxth	r2, r3
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2220      	movs	r2, #32
 800cd4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cd58:	b2db      	uxtb	r3, r3
 800cd5a:	2b40      	cmp	r3, #64	; 0x40
 800cd5c:	d10a      	bne.n	800cd74 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2200      	movs	r2, #0
 800cd62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f7ff fdc1 	bl	800c8f4 <HAL_I2C_MemRxCpltCallback>
}
 800cd72:	e030      	b.n	800cdd6 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2200      	movs	r2, #0
 800cd78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2212      	movs	r2, #18
 800cd80:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f7ff fd76 	bl	800c874 <HAL_I2C_MasterRxCpltCallback>
}
 800cd88:	e025      	b.n	800cdd6 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	685a      	ldr	r2, [r3, #4]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cd98:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	691a      	ldr	r2, [r3, #16]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda4:	b2d2      	uxtb	r2, r2
 800cda6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdac:	1c5a      	adds	r2, r3, #1
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdb6:	b29b      	uxth	r3, r3
 800cdb8:	3b01      	subs	r3, #1
 800cdba:	b29a      	uxth	r2, r3
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2220      	movs	r2, #32
 800cdc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f7ff fd99 	bl	800c908 <HAL_I2C_ErrorCallback>
}
 800cdd6:	bf00      	nop
 800cdd8:	3710      	adds	r7, #16
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}

0800cdde <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800cdde:	b580      	push	{r7, lr}
 800cde0:	b084      	sub	sp, #16
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdea:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdf0:	b29b      	uxth	r3, r3
 800cdf2:	2b04      	cmp	r3, #4
 800cdf4:	d11b      	bne.n	800ce2e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	685a      	ldr	r2, [r3, #4]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce04:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	691a      	ldr	r2, [r3, #16]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce10:	b2d2      	uxtb	r2, r2
 800ce12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce18:	1c5a      	adds	r2, r3, #1
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	3b01      	subs	r3, #1
 800ce26:	b29a      	uxth	r2, r3
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800ce2c:	e0bd      	b.n	800cfaa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	2b03      	cmp	r3, #3
 800ce36:	d129      	bne.n	800ce8c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	685a      	ldr	r2, [r3, #4]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce46:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2b04      	cmp	r3, #4
 800ce4c:	d00a      	beq.n	800ce64 <I2C_MasterReceive_BTF+0x86>
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	2b02      	cmp	r3, #2
 800ce52:	d007      	beq.n	800ce64 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce62:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	691a      	ldr	r2, [r3, #16]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce6e:	b2d2      	uxtb	r2, r2
 800ce70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce76:	1c5a      	adds	r2, r3, #1
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce80:	b29b      	uxth	r3, r3
 800ce82:	3b01      	subs	r3, #1
 800ce84:	b29a      	uxth	r2, r3
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800ce8a:	e08e      	b.n	800cfaa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce90:	b29b      	uxth	r3, r3
 800ce92:	2b02      	cmp	r3, #2
 800ce94:	d176      	bne.n	800cf84 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d002      	beq.n	800cea2 <I2C_MasterReceive_BTF+0xc4>
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2b10      	cmp	r3, #16
 800cea0:	d108      	bne.n	800ceb4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ceb0:	601a      	str	r2, [r3, #0]
 800ceb2:	e019      	b.n	800cee8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2b04      	cmp	r3, #4
 800ceb8:	d002      	beq.n	800cec0 <I2C_MasterReceive_BTF+0xe2>
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	2b02      	cmp	r3, #2
 800cebe:	d108      	bne.n	800ced2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	681a      	ldr	r2, [r3, #0]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cece:	601a      	str	r2, [r3, #0]
 800ced0:	e00a      	b.n	800cee8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2b10      	cmp	r3, #16
 800ced6:	d007      	beq.n	800cee8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cee6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	691a      	ldr	r2, [r3, #16]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef2:	b2d2      	uxtb	r2, r2
 800cef4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cefa:	1c5a      	adds	r2, r3, #1
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	3b01      	subs	r3, #1
 800cf08:	b29a      	uxth	r2, r3
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	691a      	ldr	r2, [r3, #16]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf18:	b2d2      	uxtb	r2, r2
 800cf1a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf20:	1c5a      	adds	r2, r3, #1
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	3b01      	subs	r3, #1
 800cf2e:	b29a      	uxth	r2, r3
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	685a      	ldr	r2, [r3, #4]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800cf42:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2220      	movs	r2, #32
 800cf48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	2b40      	cmp	r3, #64	; 0x40
 800cf56:	d10a      	bne.n	800cf6e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2200      	movs	r2, #0
 800cf64:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f7ff fcc4 	bl	800c8f4 <HAL_I2C_MemRxCpltCallback>
}
 800cf6c:	e01d      	b.n	800cfaa <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2200      	movs	r2, #0
 800cf72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2212      	movs	r2, #18
 800cf7a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f7ff fc79 	bl	800c874 <HAL_I2C_MasterRxCpltCallback>
}
 800cf82:	e012      	b.n	800cfaa <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	691a      	ldr	r2, [r3, #16]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf8e:	b2d2      	uxtb	r2, r2
 800cf90:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf96:	1c5a      	adds	r2, r3, #1
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfa0:	b29b      	uxth	r3, r3
 800cfa2:	3b01      	subs	r3, #1
 800cfa4:	b29a      	uxth	r2, r3
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800cfaa:	bf00      	nop
 800cfac:	3710      	adds	r7, #16
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}

0800cfb2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800cfb2:	b480      	push	{r7}
 800cfb4:	b083      	sub	sp, #12
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	2b40      	cmp	r3, #64	; 0x40
 800cfc4:	d117      	bne.n	800cff6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d109      	bne.n	800cfe2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	461a      	mov	r2, r3
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800cfde:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800cfe0:	e067      	b.n	800d0b2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	f043 0301 	orr.w	r3, r3, #1
 800cfec:	b2da      	uxtb	r2, r3
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	611a      	str	r2, [r3, #16]
}
 800cff4:	e05d      	b.n	800d0b2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	691b      	ldr	r3, [r3, #16]
 800cffa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cffe:	d133      	bne.n	800d068 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d006:	b2db      	uxtb	r3, r3
 800d008:	2b21      	cmp	r3, #33	; 0x21
 800d00a:	d109      	bne.n	800d020 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d010:	b2db      	uxtb	r3, r3
 800d012:	461a      	mov	r2, r3
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d01c:	611a      	str	r2, [r3, #16]
 800d01e:	e008      	b.n	800d032 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d024:	b2db      	uxtb	r3, r3
 800d026:	f043 0301 	orr.w	r3, r3, #1
 800d02a:	b2da      	uxtb	r2, r3
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d036:	2b00      	cmp	r3, #0
 800d038:	d004      	beq.n	800d044 <I2C_Master_SB+0x92>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d03e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d040:	2b00      	cmp	r3, #0
 800d042:	d108      	bne.n	800d056 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d032      	beq.n	800d0b2 <I2C_Master_SB+0x100>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d052:	2b00      	cmp	r3, #0
 800d054:	d02d      	beq.n	800d0b2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	685a      	ldr	r2, [r3, #4]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d064:	605a      	str	r2, [r3, #4]
}
 800d066:	e024      	b.n	800d0b2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d10e      	bne.n	800d08e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d074:	b29b      	uxth	r3, r3
 800d076:	11db      	asrs	r3, r3, #7
 800d078:	b2db      	uxtb	r3, r3
 800d07a:	f003 0306 	and.w	r3, r3, #6
 800d07e:	b2db      	uxtb	r3, r3
 800d080:	f063 030f 	orn	r3, r3, #15
 800d084:	b2da      	uxtb	r2, r3
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	611a      	str	r2, [r3, #16]
}
 800d08c:	e011      	b.n	800d0b2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d092:	2b01      	cmp	r3, #1
 800d094:	d10d      	bne.n	800d0b2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	11db      	asrs	r3, r3, #7
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	f003 0306 	and.w	r3, r3, #6
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	f063 030e 	orn	r3, r3, #14
 800d0aa:	b2da      	uxtb	r2, r3
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	611a      	str	r2, [r3, #16]
}
 800d0b2:	bf00      	nop
 800d0b4:	370c      	adds	r7, #12
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr

0800d0be <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800d0be:	b480      	push	{r7}
 800d0c0:	b083      	sub	sp, #12
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0ca:	b2da      	uxtb	r2, r3
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d004      	beq.n	800d0e4 <I2C_Master_ADD10+0x26>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d108      	bne.n	800d0f6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d00c      	beq.n	800d106 <I2C_Master_ADD10+0x48>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d007      	beq.n	800d106 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	685a      	ldr	r2, [r3, #4]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d104:	605a      	str	r2, [r3, #4]
  }
}
 800d106:	bf00      	nop
 800d108:	370c      	adds	r7, #12
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr

0800d112 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800d112:	b480      	push	{r7}
 800d114:	b091      	sub	sp, #68	; 0x44
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d120:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d128:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d12e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d136:	b2db      	uxtb	r3, r3
 800d138:	2b22      	cmp	r3, #34	; 0x22
 800d13a:	f040 8169 	bne.w	800d410 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d142:	2b00      	cmp	r3, #0
 800d144:	d10f      	bne.n	800d166 <I2C_Master_ADDR+0x54>
 800d146:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d14a:	2b40      	cmp	r3, #64	; 0x40
 800d14c:	d10b      	bne.n	800d166 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d14e:	2300      	movs	r3, #0
 800d150:	633b      	str	r3, [r7, #48]	; 0x30
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	695b      	ldr	r3, [r3, #20]
 800d158:	633b      	str	r3, [r7, #48]	; 0x30
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	699b      	ldr	r3, [r3, #24]
 800d160:	633b      	str	r3, [r7, #48]	; 0x30
 800d162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d164:	e160      	b.n	800d428 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d11d      	bne.n	800d1aa <I2C_Master_ADDR+0x98>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	691b      	ldr	r3, [r3, #16]
 800d172:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d176:	d118      	bne.n	800d1aa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d178:	2300      	movs	r3, #0
 800d17a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	695b      	ldr	r3, [r3, #20]
 800d182:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	699b      	ldr	r3, [r3, #24]
 800d18a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	681a      	ldr	r2, [r3, #0]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d19c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1a2:	1c5a      	adds	r2, r3, #1
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	651a      	str	r2, [r3, #80]	; 0x50
 800d1a8:	e13e      	b.n	800d428 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1ae:	b29b      	uxth	r3, r3
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d113      	bne.n	800d1dc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	695b      	ldr	r3, [r3, #20]
 800d1be:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	699b      	ldr	r3, [r3, #24]
 800d1c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	681a      	ldr	r2, [r3, #0]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d1d8:	601a      	str	r2, [r3, #0]
 800d1da:	e115      	b.n	800d408 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	f040 808a 	bne.w	800d2fc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800d1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d1ee:	d137      	bne.n	800d260 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	681a      	ldr	r2, [r3, #0]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d1fe:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	685b      	ldr	r3, [r3, #4]
 800d206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d20a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d20e:	d113      	bne.n	800d238 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	681a      	ldr	r2, [r3, #0]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d21e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d220:	2300      	movs	r3, #0
 800d222:	627b      	str	r3, [r7, #36]	; 0x24
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	695b      	ldr	r3, [r3, #20]
 800d22a:	627b      	str	r3, [r7, #36]	; 0x24
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	699b      	ldr	r3, [r3, #24]
 800d232:	627b      	str	r3, [r7, #36]	; 0x24
 800d234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d236:	e0e7      	b.n	800d408 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d238:	2300      	movs	r3, #0
 800d23a:	623b      	str	r3, [r7, #32]
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	695b      	ldr	r3, [r3, #20]
 800d242:	623b      	str	r3, [r7, #32]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	699b      	ldr	r3, [r3, #24]
 800d24a:	623b      	str	r3, [r7, #32]
 800d24c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d25c:	601a      	str	r2, [r3, #0]
 800d25e:	e0d3      	b.n	800d408 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800d260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d262:	2b08      	cmp	r3, #8
 800d264:	d02e      	beq.n	800d2c4 <I2C_Master_ADDR+0x1b2>
 800d266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d268:	2b20      	cmp	r3, #32
 800d26a:	d02b      	beq.n	800d2c4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800d26c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d26e:	2b12      	cmp	r3, #18
 800d270:	d102      	bne.n	800d278 <I2C_Master_ADDR+0x166>
 800d272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d274:	2b01      	cmp	r3, #1
 800d276:	d125      	bne.n	800d2c4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800d278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27a:	2b04      	cmp	r3, #4
 800d27c:	d00e      	beq.n	800d29c <I2C_Master_ADDR+0x18a>
 800d27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d280:	2b02      	cmp	r3, #2
 800d282:	d00b      	beq.n	800d29c <I2C_Master_ADDR+0x18a>
 800d284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d286:	2b10      	cmp	r3, #16
 800d288:	d008      	beq.n	800d29c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	681a      	ldr	r2, [r3, #0]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d298:	601a      	str	r2, [r3, #0]
 800d29a:	e007      	b.n	800d2ac <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d2aa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	61fb      	str	r3, [r7, #28]
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	695b      	ldr	r3, [r3, #20]
 800d2b6:	61fb      	str	r3, [r7, #28]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	699b      	ldr	r3, [r3, #24]
 800d2be:	61fb      	str	r3, [r7, #28]
 800d2c0:	69fb      	ldr	r3, [r7, #28]
 800d2c2:	e0a1      	b.n	800d408 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d2d2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	61bb      	str	r3, [r7, #24]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	695b      	ldr	r3, [r3, #20]
 800d2de:	61bb      	str	r3, [r7, #24]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	699b      	ldr	r3, [r3, #24]
 800d2e6:	61bb      	str	r3, [r7, #24]
 800d2e8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	681a      	ldr	r2, [r3, #0]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2f8:	601a      	str	r2, [r3, #0]
 800d2fa:	e085      	b.n	800d408 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d300:	b29b      	uxth	r3, r3
 800d302:	2b02      	cmp	r3, #2
 800d304:	d14d      	bne.n	800d3a2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800d306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d308:	2b04      	cmp	r3, #4
 800d30a:	d016      	beq.n	800d33a <I2C_Master_ADDR+0x228>
 800d30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d30e:	2b02      	cmp	r3, #2
 800d310:	d013      	beq.n	800d33a <I2C_Master_ADDR+0x228>
 800d312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d314:	2b10      	cmp	r3, #16
 800d316:	d010      	beq.n	800d33a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	681a      	ldr	r2, [r3, #0]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d326:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	681a      	ldr	r2, [r3, #0]
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d336:	601a      	str	r2, [r3, #0]
 800d338:	e007      	b.n	800d34a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	681a      	ldr	r2, [r3, #0]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d348:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d358:	d117      	bne.n	800d38a <I2C_Master_ADDR+0x278>
 800d35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d360:	d00b      	beq.n	800d37a <I2C_Master_ADDR+0x268>
 800d362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d364:	2b01      	cmp	r3, #1
 800d366:	d008      	beq.n	800d37a <I2C_Master_ADDR+0x268>
 800d368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d36a:	2b08      	cmp	r3, #8
 800d36c:	d005      	beq.n	800d37a <I2C_Master_ADDR+0x268>
 800d36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d370:	2b10      	cmp	r3, #16
 800d372:	d002      	beq.n	800d37a <I2C_Master_ADDR+0x268>
 800d374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d376:	2b20      	cmp	r3, #32
 800d378:	d107      	bne.n	800d38a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	685a      	ldr	r2, [r3, #4]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d388:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d38a:	2300      	movs	r3, #0
 800d38c:	617b      	str	r3, [r7, #20]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	695b      	ldr	r3, [r3, #20]
 800d394:	617b      	str	r3, [r7, #20]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	699b      	ldr	r3, [r3, #24]
 800d39c:	617b      	str	r3, [r7, #20]
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	e032      	b.n	800d408 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d3b0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	685b      	ldr	r3, [r3, #4]
 800d3b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d3bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d3c0:	d117      	bne.n	800d3f2 <I2C_Master_ADDR+0x2e0>
 800d3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d3c8:	d00b      	beq.n	800d3e2 <I2C_Master_ADDR+0x2d0>
 800d3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d008      	beq.n	800d3e2 <I2C_Master_ADDR+0x2d0>
 800d3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d2:	2b08      	cmp	r3, #8
 800d3d4:	d005      	beq.n	800d3e2 <I2C_Master_ADDR+0x2d0>
 800d3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d8:	2b10      	cmp	r3, #16
 800d3da:	d002      	beq.n	800d3e2 <I2C_Master_ADDR+0x2d0>
 800d3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3de:	2b20      	cmp	r3, #32
 800d3e0:	d107      	bne.n	800d3f2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	685a      	ldr	r2, [r3, #4]
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d3f0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	613b      	str	r3, [r7, #16]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	695b      	ldr	r3, [r3, #20]
 800d3fc:	613b      	str	r3, [r7, #16]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	699b      	ldr	r3, [r3, #24]
 800d404:	613b      	str	r3, [r7, #16]
 800d406:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2200      	movs	r2, #0
 800d40c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800d40e:	e00b      	b.n	800d428 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d410:	2300      	movs	r3, #0
 800d412:	60fb      	str	r3, [r7, #12]
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	695b      	ldr	r3, [r3, #20]
 800d41a:	60fb      	str	r3, [r7, #12]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	699b      	ldr	r3, [r3, #24]
 800d422:	60fb      	str	r3, [r7, #12]
 800d424:	68fb      	ldr	r3, [r7, #12]
}
 800d426:	e7ff      	b.n	800d428 <I2C_Master_ADDR+0x316>
 800d428:	bf00      	nop
 800d42a:	3744      	adds	r7, #68	; 0x44
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr

0800d434 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b084      	sub	sp, #16
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d442:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d448:	b29b      	uxth	r3, r3
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d02b      	beq.n	800d4a6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d452:	781a      	ldrb	r2, [r3, #0]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d45e:	1c5a      	adds	r2, r3, #1
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d468:	b29b      	uxth	r3, r3
 800d46a:	3b01      	subs	r3, #1
 800d46c:	b29a      	uxth	r2, r3
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d476:	b29b      	uxth	r3, r3
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d114      	bne.n	800d4a6 <I2C_SlaveTransmit_TXE+0x72>
 800d47c:	7bfb      	ldrb	r3, [r7, #15]
 800d47e:	2b29      	cmp	r3, #41	; 0x29
 800d480:	d111      	bne.n	800d4a6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	685a      	ldr	r2, [r3, #4]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d490:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2221      	movs	r2, #33	; 0x21
 800d496:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2228      	movs	r2, #40	; 0x28
 800d49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f7ff f9f1 	bl	800c888 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800d4a6:	bf00      	nop
 800d4a8:	3710      	adds	r7, #16
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}

0800d4ae <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800d4ae:	b480      	push	{r7}
 800d4b0:	b083      	sub	sp, #12
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d011      	beq.n	800d4e4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c4:	781a      	ldrb	r2, [r3, #0]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d0:	1c5a      	adds	r2, r3, #1
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4da:	b29b      	uxth	r3, r3
 800d4dc:	3b01      	subs	r3, #1
 800d4de:	b29a      	uxth	r2, r3
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800d4e4:	bf00      	nop
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d504:	b29b      	uxth	r3, r3
 800d506:	2b00      	cmp	r3, #0
 800d508:	d02c      	beq.n	800d564 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	691a      	ldr	r2, [r3, #16]
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d514:	b2d2      	uxtb	r2, r2
 800d516:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d51c:	1c5a      	adds	r2, r3, #1
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d526:	b29b      	uxth	r3, r3
 800d528:	3b01      	subs	r3, #1
 800d52a:	b29a      	uxth	r2, r3
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d534:	b29b      	uxth	r3, r3
 800d536:	2b00      	cmp	r3, #0
 800d538:	d114      	bne.n	800d564 <I2C_SlaveReceive_RXNE+0x74>
 800d53a:	7bfb      	ldrb	r3, [r7, #15]
 800d53c:	2b2a      	cmp	r3, #42	; 0x2a
 800d53e:	d111      	bne.n	800d564 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	685a      	ldr	r2, [r3, #4]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d54e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2222      	movs	r2, #34	; 0x22
 800d554:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2228      	movs	r2, #40	; 0x28
 800d55a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f7ff f99c 	bl	800c89c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800d564:	bf00      	nop
 800d566:	3710      	adds	r7, #16
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b083      	sub	sp, #12
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d578:	b29b      	uxth	r3, r3
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d012      	beq.n	800d5a4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	691a      	ldr	r2, [r3, #16]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d588:	b2d2      	uxtb	r2, r2
 800d58a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d590:	1c5a      	adds	r2, r3, #1
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	3b01      	subs	r3, #1
 800d59e:	b29a      	uxth	r2, r3
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800d5a4:	bf00      	nop
 800d5a6:	370c      	adds	r7, #12
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr

0800d5b0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5c4:	b2db      	uxtb	r3, r3
 800d5c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d5ca:	2b28      	cmp	r3, #40	; 0x28
 800d5cc:	d127      	bne.n	800d61e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	685a      	ldr	r2, [r3, #4]
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5dc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	089b      	lsrs	r3, r3, #2
 800d5e2:	f003 0301 	and.w	r3, r3, #1
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d101      	bne.n	800d5ee <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	09db      	lsrs	r3, r3, #7
 800d5f2:	f003 0301 	and.w	r3, r3, #1
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d103      	bne.n	800d602 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	81bb      	strh	r3, [r7, #12]
 800d600:	e002      	b.n	800d608 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	699b      	ldr	r3, [r3, #24]
 800d606:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2200      	movs	r2, #0
 800d60c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800d610:	89ba      	ldrh	r2, [r7, #12]
 800d612:	7bfb      	ldrb	r3, [r7, #15]
 800d614:	4619      	mov	r1, r3
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f7ff f94a 	bl	800c8b0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800d61c:	e00e      	b.n	800d63c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d61e:	2300      	movs	r3, #0
 800d620:	60bb      	str	r3, [r7, #8]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	695b      	ldr	r3, [r3, #20]
 800d628:	60bb      	str	r3, [r7, #8]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	699b      	ldr	r3, [r3, #24]
 800d630:	60bb      	str	r3, [r7, #8]
 800d632:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2200      	movs	r2, #0
 800d638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d63c:	bf00      	nop
 800d63e:	3710      	adds	r7, #16
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d652:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	685a      	ldr	r2, [r3, #4]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d662:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800d664:	2300      	movs	r3, #0
 800d666:	60bb      	str	r3, [r7, #8]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	695b      	ldr	r3, [r3, #20]
 800d66e:	60bb      	str	r3, [r7, #8]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f042 0201 	orr.w	r2, r2, #1
 800d67e:	601a      	str	r2, [r3, #0]
 800d680:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	681a      	ldr	r2, [r3, #0]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d690:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	685b      	ldr	r3, [r3, #4]
 800d698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d69c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d6a0:	d172      	bne.n	800d788 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d6a2:	7bfb      	ldrb	r3, [r7, #15]
 800d6a4:	2b22      	cmp	r3, #34	; 0x22
 800d6a6:	d002      	beq.n	800d6ae <I2C_Slave_STOPF+0x6a>
 800d6a8:	7bfb      	ldrb	r3, [r7, #15]
 800d6aa:	2b2a      	cmp	r3, #42	; 0x2a
 800d6ac:	d135      	bne.n	800d71a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	b29a      	uxth	r2, r3
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d005      	beq.n	800d6d2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ca:	f043 0204 	orr.w	r2, r3, #4
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	685a      	ldr	r2, [r3, #4]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d6e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7fd fc44 	bl	800af74 <HAL_DMA_GetState>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	d049      	beq.n	800d786 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6f6:	4a69      	ldr	r2, [pc, #420]	; (800d89c <I2C_Slave_STOPF+0x258>)
 800d6f8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7fd fa8c 	bl	800ac1c <HAL_DMA_Abort_IT>
 800d704:	4603      	mov	r3, r0
 800d706:	2b00      	cmp	r3, #0
 800d708:	d03d      	beq.n	800d786 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d70e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d710:	687a      	ldr	r2, [r7, #4]
 800d712:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d714:	4610      	mov	r0, r2
 800d716:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d718:	e035      	b.n	800d786 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	685b      	ldr	r3, [r3, #4]
 800d722:	b29a      	uxth	r2, r3
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d72c:	b29b      	uxth	r3, r3
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d005      	beq.n	800d73e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d736:	f043 0204 	orr.w	r2, r3, #4
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	685a      	ldr	r2, [r3, #4]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d74c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d752:	4618      	mov	r0, r3
 800d754:	f7fd fc0e 	bl	800af74 <HAL_DMA_GetState>
 800d758:	4603      	mov	r3, r0
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d014      	beq.n	800d788 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d762:	4a4e      	ldr	r2, [pc, #312]	; (800d89c <I2C_Slave_STOPF+0x258>)
 800d764:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7fd fa56 	bl	800ac1c <HAL_DMA_Abort_IT>
 800d770:	4603      	mov	r3, r0
 800d772:	2b00      	cmp	r3, #0
 800d774:	d008      	beq.n	800d788 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d77a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d780:	4610      	mov	r0, r2
 800d782:	4798      	blx	r3
 800d784:	e000      	b.n	800d788 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d786:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d03e      	beq.n	800d810 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	695b      	ldr	r3, [r3, #20]
 800d798:	f003 0304 	and.w	r3, r3, #4
 800d79c:	2b04      	cmp	r3, #4
 800d79e:	d112      	bne.n	800d7c6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	691a      	ldr	r2, [r3, #16]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7aa:	b2d2      	uxtb	r2, r2
 800d7ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b2:	1c5a      	adds	r2, r3, #1
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	3b01      	subs	r3, #1
 800d7c0:	b29a      	uxth	r2, r3
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	695b      	ldr	r3, [r3, #20]
 800d7cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7d0:	2b40      	cmp	r3, #64	; 0x40
 800d7d2:	d112      	bne.n	800d7fa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	691a      	ldr	r2, [r3, #16]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7de:	b2d2      	uxtb	r2, r2
 800d7e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e6:	1c5a      	adds	r2, r3, #1
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7f0:	b29b      	uxth	r3, r3
 800d7f2:	3b01      	subs	r3, #1
 800d7f4:	b29a      	uxth	r2, r3
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	2b00      	cmp	r3, #0
 800d802:	d005      	beq.n	800d810 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d808:	f043 0204 	orr.w	r2, r3, #4
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d814:	2b00      	cmp	r3, #0
 800d816:	d003      	beq.n	800d820 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 f8b3 	bl	800d984 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800d81e:	e039      	b.n	800d894 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800d820:	7bfb      	ldrb	r3, [r7, #15]
 800d822:	2b2a      	cmp	r3, #42	; 0x2a
 800d824:	d109      	bne.n	800d83a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2228      	movs	r2, #40	; 0x28
 800d830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f7ff f831 	bl	800c89c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d840:	b2db      	uxtb	r3, r3
 800d842:	2b28      	cmp	r3, #40	; 0x28
 800d844:	d111      	bne.n	800d86a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	4a15      	ldr	r2, [pc, #84]	; (800d8a0 <I2C_Slave_STOPF+0x25c>)
 800d84a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2200      	movs	r2, #0
 800d850:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2220      	movs	r2, #32
 800d856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2200      	movs	r2, #0
 800d85e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f7ff f832 	bl	800c8cc <HAL_I2C_ListenCpltCallback>
}
 800d868:	e014      	b.n	800d894 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d86e:	2b22      	cmp	r3, #34	; 0x22
 800d870:	d002      	beq.n	800d878 <I2C_Slave_STOPF+0x234>
 800d872:	7bfb      	ldrb	r3, [r7, #15]
 800d874:	2b22      	cmp	r3, #34	; 0x22
 800d876:	d10d      	bne.n	800d894 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2200      	movs	r2, #0
 800d87c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2220      	movs	r2, #32
 800d882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2200      	movs	r2, #0
 800d88a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f7ff f804 	bl	800c89c <HAL_I2C_SlaveRxCpltCallback>
}
 800d894:	bf00      	nop
 800d896:	3710      	adds	r7, #16
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	0800e185 	.word	0x0800e185
 800d8a0:	ffff0000 	.word	0xffff0000

0800d8a4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b084      	sub	sp, #16
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8b2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	2b08      	cmp	r3, #8
 800d8be:	d002      	beq.n	800d8c6 <I2C_Slave_AF+0x22>
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	2b20      	cmp	r3, #32
 800d8c4:	d129      	bne.n	800d91a <I2C_Slave_AF+0x76>
 800d8c6:	7bfb      	ldrb	r3, [r7, #15]
 800d8c8:	2b28      	cmp	r3, #40	; 0x28
 800d8ca:	d126      	bne.n	800d91a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	4a2c      	ldr	r2, [pc, #176]	; (800d980 <I2C_Slave_AF+0xdc>)
 800d8d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	685a      	ldr	r2, [r3, #4]
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d8e0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d8ea:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	681a      	ldr	r2, [r3, #0]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d8fa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2200      	movs	r2, #0
 800d900:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2220      	movs	r2, #32
 800d906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2200      	movs	r2, #0
 800d90e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f7fe ffda 	bl	800c8cc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800d918:	e02e      	b.n	800d978 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800d91a:	7bfb      	ldrb	r3, [r7, #15]
 800d91c:	2b21      	cmp	r3, #33	; 0x21
 800d91e:	d126      	bne.n	800d96e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	4a17      	ldr	r2, [pc, #92]	; (800d980 <I2C_Slave_AF+0xdc>)
 800d924:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2221      	movs	r2, #33	; 0x21
 800d92a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2220      	movs	r2, #32
 800d930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2200      	movs	r2, #0
 800d938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	685a      	ldr	r2, [r3, #4]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d94a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d954:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	681a      	ldr	r2, [r3, #0]
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d964:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f7fe ff8e 	bl	800c888 <HAL_I2C_SlaveTxCpltCallback>
}
 800d96c:	e004      	b.n	800d978 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d976:	615a      	str	r2, [r3, #20]
}
 800d978:	bf00      	nop
 800d97a:	3710      	adds	r7, #16
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	ffff0000 	.word	0xffff0000

0800d984 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b084      	sub	sp, #16
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d992:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d99a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800d99c:	7bbb      	ldrb	r3, [r7, #14]
 800d99e:	2b10      	cmp	r3, #16
 800d9a0:	d002      	beq.n	800d9a8 <I2C_ITError+0x24>
 800d9a2:	7bbb      	ldrb	r3, [r7, #14]
 800d9a4:	2b40      	cmp	r3, #64	; 0x40
 800d9a6:	d10a      	bne.n	800d9be <I2C_ITError+0x3a>
 800d9a8:	7bfb      	ldrb	r3, [r7, #15]
 800d9aa:	2b22      	cmp	r3, #34	; 0x22
 800d9ac:	d107      	bne.n	800d9be <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	681a      	ldr	r2, [r3, #0]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d9bc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d9be:	7bfb      	ldrb	r3, [r7, #15]
 800d9c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d9c4:	2b28      	cmp	r3, #40	; 0x28
 800d9c6:	d107      	bne.n	800d9d8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2228      	movs	r2, #40	; 0x28
 800d9d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d9d6:	e015      	b.n	800da04 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	685b      	ldr	r3, [r3, #4]
 800d9de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d9e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d9e6:	d00a      	beq.n	800d9fe <I2C_ITError+0x7a>
 800d9e8:	7bfb      	ldrb	r3, [r7, #15]
 800d9ea:	2b60      	cmp	r3, #96	; 0x60
 800d9ec:	d007      	beq.n	800d9fe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2220      	movs	r2, #32
 800d9f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800da12:	d162      	bne.n	800dada <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	685a      	ldr	r2, [r3, #4]
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800da22:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800da2c:	b2db      	uxtb	r3, r3
 800da2e:	2b01      	cmp	r3, #1
 800da30:	d020      	beq.n	800da74 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da36:	4a6a      	ldr	r2, [pc, #424]	; (800dbe0 <I2C_ITError+0x25c>)
 800da38:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da3e:	4618      	mov	r0, r3
 800da40:	f7fd f8ec 	bl	800ac1c <HAL_DMA_Abort_IT>
 800da44:	4603      	mov	r3, r0
 800da46:	2b00      	cmp	r3, #0
 800da48:	f000 8089 	beq.w	800db5e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	681a      	ldr	r2, [r3, #0]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f022 0201 	bic.w	r2, r2, #1
 800da5a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2220      	movs	r2, #32
 800da60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da6a:	687a      	ldr	r2, [r7, #4]
 800da6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800da6e:	4610      	mov	r0, r2
 800da70:	4798      	blx	r3
 800da72:	e074      	b.n	800db5e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da78:	4a59      	ldr	r2, [pc, #356]	; (800dbe0 <I2C_ITError+0x25c>)
 800da7a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da80:	4618      	mov	r0, r3
 800da82:	f7fd f8cb 	bl	800ac1c <HAL_DMA_Abort_IT>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d068      	beq.n	800db5e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	695b      	ldr	r3, [r3, #20]
 800da92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da96:	2b40      	cmp	r3, #64	; 0x40
 800da98:	d10b      	bne.n	800dab2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	691a      	ldr	r2, [r3, #16]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa4:	b2d2      	uxtb	r2, r2
 800daa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daac:	1c5a      	adds	r2, r3, #1
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	681a      	ldr	r2, [r3, #0]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f022 0201 	bic.w	r2, r2, #1
 800dac0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2220      	movs	r2, #32
 800dac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dad0:	687a      	ldr	r2, [r7, #4]
 800dad2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800dad4:	4610      	mov	r0, r2
 800dad6:	4798      	blx	r3
 800dad8:	e041      	b.n	800db5e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	2b60      	cmp	r3, #96	; 0x60
 800dae4:	d125      	bne.n	800db32 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2220      	movs	r2, #32
 800daea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2200      	movs	r2, #0
 800daf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	695b      	ldr	r3, [r3, #20]
 800dafa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dafe:	2b40      	cmp	r3, #64	; 0x40
 800db00:	d10b      	bne.n	800db1a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	691a      	ldr	r2, [r3, #16]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db0c:	b2d2      	uxtb	r2, r2
 800db0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db14:	1c5a      	adds	r2, r3, #1
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f022 0201 	bic.w	r2, r2, #1
 800db28:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f7fe fef6 	bl	800c91c <HAL_I2C_AbortCpltCallback>
 800db30:	e015      	b.n	800db5e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	695b      	ldr	r3, [r3, #20]
 800db38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db3c:	2b40      	cmp	r3, #64	; 0x40
 800db3e:	d10b      	bne.n	800db58 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	691a      	ldr	r2, [r3, #16]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db4a:	b2d2      	uxtb	r2, r2
 800db4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db52:	1c5a      	adds	r2, r3, #1
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f7fe fed5 	bl	800c908 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db62:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	f003 0301 	and.w	r3, r3, #1
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d10e      	bne.n	800db8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800db74:	2b00      	cmp	r3, #0
 800db76:	d109      	bne.n	800db8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d104      	bne.n	800db8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d007      	beq.n	800db9c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	685a      	ldr	r2, [r3, #4]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800db9a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dba2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dba8:	f003 0304 	and.w	r3, r3, #4
 800dbac:	2b04      	cmp	r3, #4
 800dbae:	d113      	bne.n	800dbd8 <I2C_ITError+0x254>
 800dbb0:	7bfb      	ldrb	r3, [r7, #15]
 800dbb2:	2b28      	cmp	r3, #40	; 0x28
 800dbb4:	d110      	bne.n	800dbd8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	4a0a      	ldr	r2, [pc, #40]	; (800dbe4 <I2C_ITError+0x260>)
 800dbba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2220      	movs	r2, #32
 800dbc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f7fe fe7a 	bl	800c8cc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800dbd8:	bf00      	nop
 800dbda:	3710      	adds	r7, #16
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	0800e185 	.word	0x0800e185
 800dbe4:	ffff0000 	.word	0xffff0000

0800dbe8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b088      	sub	sp, #32
 800dbec:	af02      	add	r7, sp, #8
 800dbee:	60f8      	str	r0, [r7, #12]
 800dbf0:	607a      	str	r2, [r7, #4]
 800dbf2:	603b      	str	r3, [r7, #0]
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbfc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	2b08      	cmp	r3, #8
 800dc02:	d006      	beq.n	800dc12 <I2C_MasterRequestWrite+0x2a>
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	2b01      	cmp	r3, #1
 800dc08:	d003      	beq.n	800dc12 <I2C_MasterRequestWrite+0x2a>
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800dc10:	d108      	bne.n	800dc24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dc20:	601a      	str	r2, [r3, #0]
 800dc22:	e00b      	b.n	800dc3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc28:	2b12      	cmp	r3, #18
 800dc2a:	d107      	bne.n	800dc3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	681a      	ldr	r2, [r3, #0]
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dc3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2200      	movs	r2, #0
 800dc44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800dc48:	68f8      	ldr	r0, [r7, #12]
 800dc4a:	f000 fb43 	bl	800e2d4 <I2C_WaitOnFlagUntilTimeout>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d00d      	beq.n	800dc70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc62:	d103      	bne.n	800dc6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800dc6c:	2303      	movs	r3, #3
 800dc6e:	e035      	b.n	800dcdc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	691b      	ldr	r3, [r3, #16]
 800dc74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dc78:	d108      	bne.n	800dc8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800dc7a:	897b      	ldrh	r3, [r7, #10]
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	461a      	mov	r2, r3
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800dc88:	611a      	str	r2, [r3, #16]
 800dc8a:	e01b      	b.n	800dcc4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800dc8c:	897b      	ldrh	r3, [r7, #10]
 800dc8e:	11db      	asrs	r3, r3, #7
 800dc90:	b2db      	uxtb	r3, r3
 800dc92:	f003 0306 	and.w	r3, r3, #6
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	f063 030f 	orn	r3, r3, #15
 800dc9c:	b2da      	uxtb	r2, r3
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	490e      	ldr	r1, [pc, #56]	; (800dce4 <I2C_MasterRequestWrite+0xfc>)
 800dcaa:	68f8      	ldr	r0, [r7, #12]
 800dcac:	f000 fb69 	bl	800e382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d001      	beq.n	800dcba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	e010      	b.n	800dcdc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800dcba:	897b      	ldrh	r3, [r7, #10]
 800dcbc:	b2da      	uxtb	r2, r3
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	4907      	ldr	r1, [pc, #28]	; (800dce8 <I2C_MasterRequestWrite+0x100>)
 800dcca:	68f8      	ldr	r0, [r7, #12]
 800dccc:	f000 fb59 	bl	800e382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d001      	beq.n	800dcda <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	e000      	b.n	800dcdc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800dcda:	2300      	movs	r3, #0
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3718      	adds	r7, #24
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	00010008 	.word	0x00010008
 800dce8:	00010002 	.word	0x00010002

0800dcec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b088      	sub	sp, #32
 800dcf0:	af02      	add	r7, sp, #8
 800dcf2:	60f8      	str	r0, [r7, #12]
 800dcf4:	607a      	str	r2, [r7, #4]
 800dcf6:	603b      	str	r3, [r7, #0]
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd00:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	681a      	ldr	r2, [r3, #0]
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dd10:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	2b08      	cmp	r3, #8
 800dd16:	d006      	beq.n	800dd26 <I2C_MasterRequestRead+0x3a>
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d003      	beq.n	800dd26 <I2C_MasterRequestRead+0x3a>
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800dd24:	d108      	bne.n	800dd38 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dd34:	601a      	str	r2, [r3, #0]
 800dd36:	e00b      	b.n	800dd50 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd3c:	2b11      	cmp	r3, #17
 800dd3e:	d107      	bne.n	800dd50 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	681a      	ldr	r2, [r3, #0]
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dd4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2200      	movs	r2, #0
 800dd58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800dd5c:	68f8      	ldr	r0, [r7, #12]
 800dd5e:	f000 fab9 	bl	800e2d4 <I2C_WaitOnFlagUntilTimeout>
 800dd62:	4603      	mov	r3, r0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d00d      	beq.n	800dd84 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd76:	d103      	bne.n	800dd80 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800dd80:	2303      	movs	r3, #3
 800dd82:	e079      	b.n	800de78 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	691b      	ldr	r3, [r3, #16]
 800dd88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dd8c:	d108      	bne.n	800dda0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800dd8e:	897b      	ldrh	r3, [r7, #10]
 800dd90:	b2db      	uxtb	r3, r3
 800dd92:	f043 0301 	orr.w	r3, r3, #1
 800dd96:	b2da      	uxtb	r2, r3
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	611a      	str	r2, [r3, #16]
 800dd9e:	e05f      	b.n	800de60 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800dda0:	897b      	ldrh	r3, [r7, #10]
 800dda2:	11db      	asrs	r3, r3, #7
 800dda4:	b2db      	uxtb	r3, r3
 800dda6:	f003 0306 	and.w	r3, r3, #6
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	f063 030f 	orn	r3, r3, #15
 800ddb0:	b2da      	uxtb	r2, r3
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	687a      	ldr	r2, [r7, #4]
 800ddbc:	4930      	ldr	r1, [pc, #192]	; (800de80 <I2C_MasterRequestRead+0x194>)
 800ddbe:	68f8      	ldr	r0, [r7, #12]
 800ddc0:	f000 fadf 	bl	800e382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d001      	beq.n	800ddce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800ddca:	2301      	movs	r3, #1
 800ddcc:	e054      	b.n	800de78 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ddce:	897b      	ldrh	r3, [r7, #10]
 800ddd0:	b2da      	uxtb	r2, r3
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	687a      	ldr	r2, [r7, #4]
 800dddc:	4929      	ldr	r1, [pc, #164]	; (800de84 <I2C_MasterRequestRead+0x198>)
 800ddde:	68f8      	ldr	r0, [r7, #12]
 800dde0:	f000 facf 	bl	800e382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dde4:	4603      	mov	r3, r0
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d001      	beq.n	800ddee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800ddea:	2301      	movs	r3, #1
 800ddec:	e044      	b.n	800de78 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ddee:	2300      	movs	r3, #0
 800ddf0:	613b      	str	r3, [r7, #16]
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	695b      	ldr	r3, [r3, #20]
 800ddf8:	613b      	str	r3, [r7, #16]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	699b      	ldr	r3, [r3, #24]
 800de00:	613b      	str	r3, [r7, #16]
 800de02:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	681a      	ldr	r2, [r3, #0]
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800de12:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	9300      	str	r3, [sp, #0]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2200      	movs	r2, #0
 800de1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800de20:	68f8      	ldr	r0, [r7, #12]
 800de22:	f000 fa57 	bl	800e2d4 <I2C_WaitOnFlagUntilTimeout>
 800de26:	4603      	mov	r3, r0
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d00d      	beq.n	800de48 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de3a:	d103      	bne.n	800de44 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de42:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800de44:	2303      	movs	r3, #3
 800de46:	e017      	b.n	800de78 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800de48:	897b      	ldrh	r3, [r7, #10]
 800de4a:	11db      	asrs	r3, r3, #7
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	f003 0306 	and.w	r3, r3, #6
 800de52:	b2db      	uxtb	r3, r3
 800de54:	f063 030e 	orn	r3, r3, #14
 800de58:	b2da      	uxtb	r2, r3
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	687a      	ldr	r2, [r7, #4]
 800de64:	4907      	ldr	r1, [pc, #28]	; (800de84 <I2C_MasterRequestRead+0x198>)
 800de66:	68f8      	ldr	r0, [r7, #12]
 800de68:	f000 fa8b 	bl	800e382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d001      	beq.n	800de76 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800de72:	2301      	movs	r3, #1
 800de74:	e000      	b.n	800de78 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800de76:	2300      	movs	r3, #0
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3718      	adds	r7, #24
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}
 800de80:	00010008 	.word	0x00010008
 800de84:	00010002 	.word	0x00010002

0800de88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b088      	sub	sp, #32
 800de8c:	af02      	add	r7, sp, #8
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	4608      	mov	r0, r1
 800de92:	4611      	mov	r1, r2
 800de94:	461a      	mov	r2, r3
 800de96:	4603      	mov	r3, r0
 800de98:	817b      	strh	r3, [r7, #10]
 800de9a:	460b      	mov	r3, r1
 800de9c:	813b      	strh	r3, [r7, #8]
 800de9e:	4613      	mov	r3, r2
 800dea0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800deb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800deb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb4:	9300      	str	r3, [sp, #0]
 800deb6:	6a3b      	ldr	r3, [r7, #32]
 800deb8:	2200      	movs	r2, #0
 800deba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800debe:	68f8      	ldr	r0, [r7, #12]
 800dec0:	f000 fa08 	bl	800e2d4 <I2C_WaitOnFlagUntilTimeout>
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d00d      	beq.n	800dee6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ded4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ded8:	d103      	bne.n	800dee2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dee0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800dee2:	2303      	movs	r3, #3
 800dee4:	e05f      	b.n	800dfa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800dee6:	897b      	ldrh	r3, [r7, #10]
 800dee8:	b2db      	uxtb	r3, r3
 800deea:	461a      	mov	r2, r3
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800def4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800def6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def8:	6a3a      	ldr	r2, [r7, #32]
 800defa:	492d      	ldr	r1, [pc, #180]	; (800dfb0 <I2C_RequestMemoryWrite+0x128>)
 800defc:	68f8      	ldr	r0, [r7, #12]
 800defe:	f000 fa40 	bl	800e382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d001      	beq.n	800df0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800df08:	2301      	movs	r3, #1
 800df0a:	e04c      	b.n	800dfa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800df0c:	2300      	movs	r3, #0
 800df0e:	617b      	str	r3, [r7, #20]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	695b      	ldr	r3, [r3, #20]
 800df16:	617b      	str	r3, [r7, #20]
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	699b      	ldr	r3, [r3, #24]
 800df1e:	617b      	str	r3, [r7, #20]
 800df20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800df22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df24:	6a39      	ldr	r1, [r7, #32]
 800df26:	68f8      	ldr	r0, [r7, #12]
 800df28:	f000 faaa 	bl	800e480 <I2C_WaitOnTXEFlagUntilTimeout>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d00d      	beq.n	800df4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df36:	2b04      	cmp	r3, #4
 800df38:	d107      	bne.n	800df4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800df4a:	2301      	movs	r3, #1
 800df4c:	e02b      	b.n	800dfa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800df4e:	88fb      	ldrh	r3, [r7, #6]
 800df50:	2b01      	cmp	r3, #1
 800df52:	d105      	bne.n	800df60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800df54:	893b      	ldrh	r3, [r7, #8]
 800df56:	b2da      	uxtb	r2, r3
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	611a      	str	r2, [r3, #16]
 800df5e:	e021      	b.n	800dfa4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800df60:	893b      	ldrh	r3, [r7, #8]
 800df62:	0a1b      	lsrs	r3, r3, #8
 800df64:	b29b      	uxth	r3, r3
 800df66:	b2da      	uxtb	r2, r3
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800df6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df70:	6a39      	ldr	r1, [r7, #32]
 800df72:	68f8      	ldr	r0, [r7, #12]
 800df74:	f000 fa84 	bl	800e480 <I2C_WaitOnTXEFlagUntilTimeout>
 800df78:	4603      	mov	r3, r0
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d00d      	beq.n	800df9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df82:	2b04      	cmp	r3, #4
 800df84:	d107      	bne.n	800df96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	681a      	ldr	r2, [r3, #0]
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800df96:	2301      	movs	r3, #1
 800df98:	e005      	b.n	800dfa6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800df9a:	893b      	ldrh	r3, [r7, #8]
 800df9c:	b2da      	uxtb	r2, r3
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800dfa4:	2300      	movs	r3, #0
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3718      	adds	r7, #24
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	00010002 	.word	0x00010002

0800dfb4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b088      	sub	sp, #32
 800dfb8:	af02      	add	r7, sp, #8
 800dfba:	60f8      	str	r0, [r7, #12]
 800dfbc:	4608      	mov	r0, r1
 800dfbe:	4611      	mov	r1, r2
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	817b      	strh	r3, [r7, #10]
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	813b      	strh	r3, [r7, #8]
 800dfca:	4613      	mov	r3, r2
 800dfcc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dfdc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	681a      	ldr	r2, [r3, #0]
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dfec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800dfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff0:	9300      	str	r3, [sp, #0]
 800dff2:	6a3b      	ldr	r3, [r7, #32]
 800dff4:	2200      	movs	r2, #0
 800dff6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800dffa:	68f8      	ldr	r0, [r7, #12]
 800dffc:	f000 f96a 	bl	800e2d4 <I2C_WaitOnFlagUntilTimeout>
 800e000:	4603      	mov	r3, r0
 800e002:	2b00      	cmp	r3, #0
 800e004:	d00d      	beq.n	800e022 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e014:	d103      	bne.n	800e01e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e01c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e01e:	2303      	movs	r3, #3
 800e020:	e0aa      	b.n	800e178 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e022:	897b      	ldrh	r3, [r7, #10]
 800e024:	b2db      	uxtb	r3, r3
 800e026:	461a      	mov	r2, r3
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e030:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e034:	6a3a      	ldr	r2, [r7, #32]
 800e036:	4952      	ldr	r1, [pc, #328]	; (800e180 <I2C_RequestMemoryRead+0x1cc>)
 800e038:	68f8      	ldr	r0, [r7, #12]
 800e03a:	f000 f9a2 	bl	800e382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e03e:	4603      	mov	r3, r0
 800e040:	2b00      	cmp	r3, #0
 800e042:	d001      	beq.n	800e048 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800e044:	2301      	movs	r3, #1
 800e046:	e097      	b.n	800e178 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e048:	2300      	movs	r3, #0
 800e04a:	617b      	str	r3, [r7, #20]
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	695b      	ldr	r3, [r3, #20]
 800e052:	617b      	str	r3, [r7, #20]
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	699b      	ldr	r3, [r3, #24]
 800e05a:	617b      	str	r3, [r7, #20]
 800e05c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e05e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e060:	6a39      	ldr	r1, [r7, #32]
 800e062:	68f8      	ldr	r0, [r7, #12]
 800e064:	f000 fa0c 	bl	800e480 <I2C_WaitOnTXEFlagUntilTimeout>
 800e068:	4603      	mov	r3, r0
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d00d      	beq.n	800e08a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e072:	2b04      	cmp	r3, #4
 800e074:	d107      	bne.n	800e086 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e084:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e086:	2301      	movs	r3, #1
 800e088:	e076      	b.n	800e178 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e08a:	88fb      	ldrh	r3, [r7, #6]
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	d105      	bne.n	800e09c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e090:	893b      	ldrh	r3, [r7, #8]
 800e092:	b2da      	uxtb	r2, r3
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	611a      	str	r2, [r3, #16]
 800e09a:	e021      	b.n	800e0e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e09c:	893b      	ldrh	r3, [r7, #8]
 800e09e:	0a1b      	lsrs	r3, r3, #8
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	b2da      	uxtb	r2, r3
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e0aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0ac:	6a39      	ldr	r1, [r7, #32]
 800e0ae:	68f8      	ldr	r0, [r7, #12]
 800e0b0:	f000 f9e6 	bl	800e480 <I2C_WaitOnTXEFlagUntilTimeout>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d00d      	beq.n	800e0d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0be:	2b04      	cmp	r3, #4
 800e0c0:	d107      	bne.n	800e0d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	681a      	ldr	r2, [r3, #0]
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e0d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	e050      	b.n	800e178 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e0d6:	893b      	ldrh	r3, [r7, #8]
 800e0d8:	b2da      	uxtb	r2, r3
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e0e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0e2:	6a39      	ldr	r1, [r7, #32]
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	f000 f9cb 	bl	800e480 <I2C_WaitOnTXEFlagUntilTimeout>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d00d      	beq.n	800e10c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0f4:	2b04      	cmp	r3, #4
 800e0f6:	d107      	bne.n	800e108 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	681a      	ldr	r2, [r3, #0]
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e106:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e108:	2301      	movs	r3, #1
 800e10a:	e035      	b.n	800e178 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	681a      	ldr	r2, [r3, #0]
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e11a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11e:	9300      	str	r3, [sp, #0]
 800e120:	6a3b      	ldr	r3, [r7, #32]
 800e122:	2200      	movs	r2, #0
 800e124:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e128:	68f8      	ldr	r0, [r7, #12]
 800e12a:	f000 f8d3 	bl	800e2d4 <I2C_WaitOnFlagUntilTimeout>
 800e12e:	4603      	mov	r3, r0
 800e130:	2b00      	cmp	r3, #0
 800e132:	d00d      	beq.n	800e150 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e13e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e142:	d103      	bne.n	800e14c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e14a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e14c:	2303      	movs	r3, #3
 800e14e:	e013      	b.n	800e178 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e150:	897b      	ldrh	r3, [r7, #10]
 800e152:	b2db      	uxtb	r3, r3
 800e154:	f043 0301 	orr.w	r3, r3, #1
 800e158:	b2da      	uxtb	r2, r3
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e162:	6a3a      	ldr	r2, [r7, #32]
 800e164:	4906      	ldr	r1, [pc, #24]	; (800e180 <I2C_RequestMemoryRead+0x1cc>)
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f000 f90b 	bl	800e382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e16c:	4603      	mov	r3, r0
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d001      	beq.n	800e176 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800e172:	2301      	movs	r3, #1
 800e174:	e000      	b.n	800e178 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800e176:	2300      	movs	r3, #0
}
 800e178:	4618      	mov	r0, r3
 800e17a:	3718      	adds	r7, #24
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	00010002 	.word	0x00010002

0800e184 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b086      	sub	sp, #24
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e18c:	2300      	movs	r3, #0
 800e18e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e194:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e19c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800e19e:	4b4b      	ldr	r3, [pc, #300]	; (800e2cc <I2C_DMAAbort+0x148>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	08db      	lsrs	r3, r3, #3
 800e1a4:	4a4a      	ldr	r2, [pc, #296]	; (800e2d0 <I2C_DMAAbort+0x14c>)
 800e1a6:	fba2 2303 	umull	r2, r3, r2, r3
 800e1aa:	0a1a      	lsrs	r2, r3, #8
 800e1ac:	4613      	mov	r3, r2
 800e1ae:	009b      	lsls	r3, r3, #2
 800e1b0:	4413      	add	r3, r2
 800e1b2:	00da      	lsls	r2, r3, #3
 800e1b4:	1ad3      	subs	r3, r2, r3
 800e1b6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d106      	bne.n	800e1cc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1c2:	f043 0220 	orr.w	r2, r3, #32
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800e1ca:	e00a      	b.n	800e1e2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	3b01      	subs	r3, #1
 800e1d0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e1dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1e0:	d0ea      	beq.n	800e1b8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d003      	beq.n	800e1f2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d003      	beq.n	800e202 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1fe:	2200      	movs	r2, #0
 800e200:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e210:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	2200      	movs	r2, #0
 800e216:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d003      	beq.n	800e228 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e224:	2200      	movs	r2, #0
 800e226:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d003      	beq.n	800e238 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e234:	2200      	movs	r2, #0
 800e236:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	681a      	ldr	r2, [r3, #0]
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	f022 0201 	bic.w	r2, r2, #1
 800e246:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e24e:	b2db      	uxtb	r3, r3
 800e250:	2b60      	cmp	r3, #96	; 0x60
 800e252:	d10e      	bne.n	800e272 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	2220      	movs	r2, #32
 800e258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	2200      	movs	r2, #0
 800e260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	2200      	movs	r2, #0
 800e268:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e26a:	6978      	ldr	r0, [r7, #20]
 800e26c:	f7fe fb56 	bl	800c91c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e270:	e027      	b.n	800e2c2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e272:	7cfb      	ldrb	r3, [r7, #19]
 800e274:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e278:	2b28      	cmp	r3, #40	; 0x28
 800e27a:	d117      	bne.n	800e2ac <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	681a      	ldr	r2, [r3, #0]
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f042 0201 	orr.w	r2, r2, #1
 800e28a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	681a      	ldr	r2, [r3, #0]
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e29a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	2228      	movs	r2, #40	; 0x28
 800e2a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e2aa:	e007      	b.n	800e2bc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	2220      	movs	r2, #32
 800e2b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800e2bc:	6978      	ldr	r0, [r7, #20]
 800e2be:	f7fe fb23 	bl	800c908 <HAL_I2C_ErrorCallback>
}
 800e2c2:	bf00      	nop
 800e2c4:	3718      	adds	r7, #24
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}
 800e2ca:	bf00      	nop
 800e2cc:	20000034 	.word	0x20000034
 800e2d0:	14f8b589 	.word	0x14f8b589

0800e2d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	60f8      	str	r0, [r7, #12]
 800e2dc:	60b9      	str	r1, [r7, #8]
 800e2de:	603b      	str	r3, [r7, #0]
 800e2e0:	4613      	mov	r3, r2
 800e2e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e2e4:	e025      	b.n	800e332 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ec:	d021      	beq.n	800e332 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e2ee:	f7fc f94f 	bl	800a590 <HAL_GetTick>
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	69bb      	ldr	r3, [r7, #24]
 800e2f6:	1ad3      	subs	r3, r2, r3
 800e2f8:	683a      	ldr	r2, [r7, #0]
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d302      	bcc.n	800e304 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d116      	bne.n	800e332 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	2200      	movs	r2, #0
 800e308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	2220      	movs	r2, #32
 800e30e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2200      	movs	r2, #0
 800e316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e31e:	f043 0220 	orr.w	r2, r3, #32
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2200      	movs	r2, #0
 800e32a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e32e:	2301      	movs	r3, #1
 800e330:	e023      	b.n	800e37a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	0c1b      	lsrs	r3, r3, #16
 800e336:	b2db      	uxtb	r3, r3
 800e338:	2b01      	cmp	r3, #1
 800e33a:	d10d      	bne.n	800e358 <I2C_WaitOnFlagUntilTimeout+0x84>
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	695b      	ldr	r3, [r3, #20]
 800e342:	43da      	mvns	r2, r3
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	4013      	ands	r3, r2
 800e348:	b29b      	uxth	r3, r3
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	bf0c      	ite	eq
 800e34e:	2301      	moveq	r3, #1
 800e350:	2300      	movne	r3, #0
 800e352:	b2db      	uxtb	r3, r3
 800e354:	461a      	mov	r2, r3
 800e356:	e00c      	b.n	800e372 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	699b      	ldr	r3, [r3, #24]
 800e35e:	43da      	mvns	r2, r3
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	4013      	ands	r3, r2
 800e364:	b29b      	uxth	r3, r3
 800e366:	2b00      	cmp	r3, #0
 800e368:	bf0c      	ite	eq
 800e36a:	2301      	moveq	r3, #1
 800e36c:	2300      	movne	r3, #0
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	461a      	mov	r2, r3
 800e372:	79fb      	ldrb	r3, [r7, #7]
 800e374:	429a      	cmp	r2, r3
 800e376:	d0b6      	beq.n	800e2e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e378:	2300      	movs	r3, #0
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3710      	adds	r7, #16
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}

0800e382 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e382:	b580      	push	{r7, lr}
 800e384:	b084      	sub	sp, #16
 800e386:	af00      	add	r7, sp, #0
 800e388:	60f8      	str	r0, [r7, #12]
 800e38a:	60b9      	str	r1, [r7, #8]
 800e38c:	607a      	str	r2, [r7, #4]
 800e38e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e390:	e051      	b.n	800e436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	695b      	ldr	r3, [r3, #20]
 800e398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e39c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e3a0:	d123      	bne.n	800e3ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	681a      	ldr	r2, [r3, #0]
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e3b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e3ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	2200      	movs	r2, #0
 800e3c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2220      	movs	r2, #32
 800e3c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3d6:	f043 0204 	orr.w	r2, r3, #4
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	e046      	b.n	800e478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3f0:	d021      	beq.n	800e436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e3f2:	f7fc f8cd 	bl	800a590 <HAL_GetTick>
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	1ad3      	subs	r3, r2, r3
 800e3fc:	687a      	ldr	r2, [r7, #4]
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d302      	bcc.n	800e408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d116      	bne.n	800e436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	2200      	movs	r2, #0
 800e40c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	2220      	movs	r2, #32
 800e412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	2200      	movs	r2, #0
 800e41a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e422:	f043 0220 	orr.w	r2, r3, #32
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	2200      	movs	r2, #0
 800e42e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e432:	2301      	movs	r3, #1
 800e434:	e020      	b.n	800e478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	0c1b      	lsrs	r3, r3, #16
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	2b01      	cmp	r3, #1
 800e43e:	d10c      	bne.n	800e45a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	695b      	ldr	r3, [r3, #20]
 800e446:	43da      	mvns	r2, r3
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	4013      	ands	r3, r2
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	2b00      	cmp	r3, #0
 800e450:	bf14      	ite	ne
 800e452:	2301      	movne	r3, #1
 800e454:	2300      	moveq	r3, #0
 800e456:	b2db      	uxtb	r3, r3
 800e458:	e00b      	b.n	800e472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	699b      	ldr	r3, [r3, #24]
 800e460:	43da      	mvns	r2, r3
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	4013      	ands	r3, r2
 800e466:	b29b      	uxth	r3, r3
 800e468:	2b00      	cmp	r3, #0
 800e46a:	bf14      	ite	ne
 800e46c:	2301      	movne	r3, #1
 800e46e:	2300      	moveq	r3, #0
 800e470:	b2db      	uxtb	r3, r3
 800e472:	2b00      	cmp	r3, #0
 800e474:	d18d      	bne.n	800e392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800e476:	2300      	movs	r3, #0
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3710      	adds	r7, #16
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b084      	sub	sp, #16
 800e484:	af00      	add	r7, sp, #0
 800e486:	60f8      	str	r0, [r7, #12]
 800e488:	60b9      	str	r1, [r7, #8]
 800e48a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e48c:	e02d      	b.n	800e4ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e48e:	68f8      	ldr	r0, [r7, #12]
 800e490:	f000 f900 	bl	800e694 <I2C_IsAcknowledgeFailed>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d001      	beq.n	800e49e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e49a:	2301      	movs	r3, #1
 800e49c:	e02d      	b.n	800e4fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4a4:	d021      	beq.n	800e4ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e4a6:	f7fc f873 	bl	800a590 <HAL_GetTick>
 800e4aa:	4602      	mov	r2, r0
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	1ad3      	subs	r3, r2, r3
 800e4b0:	68ba      	ldr	r2, [r7, #8]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d302      	bcc.n	800e4bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d116      	bne.n	800e4ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2220      	movs	r2, #32
 800e4c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4d6:	f043 0220 	orr.w	r2, r3, #32
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	e007      	b.n	800e4fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	695b      	ldr	r3, [r3, #20]
 800e4f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4f4:	2b80      	cmp	r3, #128	; 0x80
 800e4f6:	d1ca      	bne.n	800e48e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e4f8:	2300      	movs	r3, #0
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3710      	adds	r7, #16
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}

0800e502 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e502:	b580      	push	{r7, lr}
 800e504:	b084      	sub	sp, #16
 800e506:	af00      	add	r7, sp, #0
 800e508:	60f8      	str	r0, [r7, #12]
 800e50a:	60b9      	str	r1, [r7, #8]
 800e50c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e50e:	e02d      	b.n	800e56c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e510:	68f8      	ldr	r0, [r7, #12]
 800e512:	f000 f8bf 	bl	800e694 <I2C_IsAcknowledgeFailed>
 800e516:	4603      	mov	r3, r0
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d001      	beq.n	800e520 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e51c:	2301      	movs	r3, #1
 800e51e:	e02d      	b.n	800e57c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e526:	d021      	beq.n	800e56c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e528:	f7fc f832 	bl	800a590 <HAL_GetTick>
 800e52c:	4602      	mov	r2, r0
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	1ad3      	subs	r3, r2, r3
 800e532:	68ba      	ldr	r2, [r7, #8]
 800e534:	429a      	cmp	r2, r3
 800e536:	d302      	bcc.n	800e53e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d116      	bne.n	800e56c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2200      	movs	r2, #0
 800e542:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2220      	movs	r2, #32
 800e548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2200      	movs	r2, #0
 800e550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e558:	f043 0220 	orr.w	r2, r3, #32
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2200      	movs	r2, #0
 800e564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e568:	2301      	movs	r3, #1
 800e56a:	e007      	b.n	800e57c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	695b      	ldr	r3, [r3, #20]
 800e572:	f003 0304 	and.w	r3, r3, #4
 800e576:	2b04      	cmp	r3, #4
 800e578:	d1ca      	bne.n	800e510 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e57a:	2300      	movs	r3, #0
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3710      	adds	r7, #16
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800e584:	b480      	push	{r7}
 800e586:	b085      	sub	sp, #20
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e58c:	2300      	movs	r3, #0
 800e58e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800e590:	4b13      	ldr	r3, [pc, #76]	; (800e5e0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	08db      	lsrs	r3, r3, #3
 800e596:	4a13      	ldr	r2, [pc, #76]	; (800e5e4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800e598:	fba2 2303 	umull	r2, r3, r2, r3
 800e59c:	0a1a      	lsrs	r2, r3, #8
 800e59e:	4613      	mov	r3, r2
 800e5a0:	009b      	lsls	r3, r3, #2
 800e5a2:	4413      	add	r3, r2
 800e5a4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	3b01      	subs	r3, #1
 800e5aa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d107      	bne.n	800e5c2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5b6:	f043 0220 	orr.w	r2, r3, #32
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e5be:	2301      	movs	r3, #1
 800e5c0:	e008      	b.n	800e5d4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e5cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5d0:	d0e9      	beq.n	800e5a6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800e5d2:	2300      	movs	r3, #0
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3714      	adds	r7, #20
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5de:	4770      	bx	lr
 800e5e0:	20000034 	.word	0x20000034
 800e5e4:	14f8b589 	.word	0x14f8b589

0800e5e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b084      	sub	sp, #16
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	60f8      	str	r0, [r7, #12]
 800e5f0:	60b9      	str	r1, [r7, #8]
 800e5f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e5f4:	e042      	b.n	800e67c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	695b      	ldr	r3, [r3, #20]
 800e5fc:	f003 0310 	and.w	r3, r3, #16
 800e600:	2b10      	cmp	r3, #16
 800e602:	d119      	bne.n	800e638 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f06f 0210 	mvn.w	r2, #16
 800e60c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	2200      	movs	r2, #0
 800e612:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2220      	movs	r2, #32
 800e618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2200      	movs	r2, #0
 800e620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2200      	movs	r2, #0
 800e630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e634:	2301      	movs	r3, #1
 800e636:	e029      	b.n	800e68c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e638:	f7fb ffaa 	bl	800a590 <HAL_GetTick>
 800e63c:	4602      	mov	r2, r0
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	1ad3      	subs	r3, r2, r3
 800e642:	68ba      	ldr	r2, [r7, #8]
 800e644:	429a      	cmp	r2, r3
 800e646:	d302      	bcc.n	800e64e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d116      	bne.n	800e67c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2200      	movs	r2, #0
 800e652:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2220      	movs	r2, #32
 800e658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2200      	movs	r2, #0
 800e660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e668:	f043 0220 	orr.w	r2, r3, #32
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	2200      	movs	r2, #0
 800e674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e678:	2301      	movs	r3, #1
 800e67a:	e007      	b.n	800e68c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	695b      	ldr	r3, [r3, #20]
 800e682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e686:	2b40      	cmp	r3, #64	; 0x40
 800e688:	d1b5      	bne.n	800e5f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e68a:	2300      	movs	r3, #0
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3710      	adds	r7, #16
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e694:	b480      	push	{r7}
 800e696:	b083      	sub	sp, #12
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	695b      	ldr	r3, [r3, #20]
 800e6a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e6a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e6aa:	d11b      	bne.n	800e6e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e6b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2220      	movs	r2, #32
 800e6c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6d0:	f043 0204 	orr.w	r2, r3, #4
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	e000      	b.n	800e6e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e6e4:	2300      	movs	r3, #0
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	370c      	adds	r7, #12
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f0:	4770      	bx	lr

0800e6f2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800e6f2:	b480      	push	{r7}
 800e6f4:	b083      	sub	sp, #12
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6fe:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e702:	d103      	bne.n	800e70c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2201      	movs	r2, #1
 800e708:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800e70a:	e007      	b.n	800e71c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e710:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e714:	d102      	bne.n	800e71c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2208      	movs	r2, #8
 800e71a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e71c:	bf00      	nop
 800e71e:	370c      	adds	r7, #12
 800e720:	46bd      	mov	sp, r7
 800e722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e726:	4770      	bx	lr

0800e728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b086      	sub	sp, #24
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d101      	bne.n	800e73a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e736:	2301      	movs	r3, #1
 800e738:	e264      	b.n	800ec04 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	f003 0301 	and.w	r3, r3, #1
 800e742:	2b00      	cmp	r3, #0
 800e744:	d075      	beq.n	800e832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e746:	4ba3      	ldr	r3, [pc, #652]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e748:	689b      	ldr	r3, [r3, #8]
 800e74a:	f003 030c 	and.w	r3, r3, #12
 800e74e:	2b04      	cmp	r3, #4
 800e750:	d00c      	beq.n	800e76c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e752:	4ba0      	ldr	r3, [pc, #640]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e754:	689b      	ldr	r3, [r3, #8]
 800e756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e75a:	2b08      	cmp	r3, #8
 800e75c:	d112      	bne.n	800e784 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e75e:	4b9d      	ldr	r3, [pc, #628]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e760:	685b      	ldr	r3, [r3, #4]
 800e762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e76a:	d10b      	bne.n	800e784 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e76c:	4b99      	ldr	r3, [pc, #612]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e774:	2b00      	cmp	r3, #0
 800e776:	d05b      	beq.n	800e830 <HAL_RCC_OscConfig+0x108>
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d157      	bne.n	800e830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e780:	2301      	movs	r3, #1
 800e782:	e23f      	b.n	800ec04 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	685b      	ldr	r3, [r3, #4]
 800e788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e78c:	d106      	bne.n	800e79c <HAL_RCC_OscConfig+0x74>
 800e78e:	4b91      	ldr	r3, [pc, #580]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	4a90      	ldr	r2, [pc, #576]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e798:	6013      	str	r3, [r2, #0]
 800e79a:	e01d      	b.n	800e7d8 <HAL_RCC_OscConfig+0xb0>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e7a4:	d10c      	bne.n	800e7c0 <HAL_RCC_OscConfig+0x98>
 800e7a6:	4b8b      	ldr	r3, [pc, #556]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	4a8a      	ldr	r2, [pc, #552]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e7ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e7b0:	6013      	str	r3, [r2, #0]
 800e7b2:	4b88      	ldr	r3, [pc, #544]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	4a87      	ldr	r2, [pc, #540]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e7b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e7bc:	6013      	str	r3, [r2, #0]
 800e7be:	e00b      	b.n	800e7d8 <HAL_RCC_OscConfig+0xb0>
 800e7c0:	4b84      	ldr	r3, [pc, #528]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	4a83      	ldr	r2, [pc, #524]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e7c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e7ca:	6013      	str	r3, [r2, #0]
 800e7cc:	4b81      	ldr	r3, [pc, #516]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	4a80      	ldr	r2, [pc, #512]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e7d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e7d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d013      	beq.n	800e808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e7e0:	f7fb fed6 	bl	800a590 <HAL_GetTick>
 800e7e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e7e6:	e008      	b.n	800e7fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e7e8:	f7fb fed2 	bl	800a590 <HAL_GetTick>
 800e7ec:	4602      	mov	r2, r0
 800e7ee:	693b      	ldr	r3, [r7, #16]
 800e7f0:	1ad3      	subs	r3, r2, r3
 800e7f2:	2b64      	cmp	r3, #100	; 0x64
 800e7f4:	d901      	bls.n	800e7fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e7f6:	2303      	movs	r3, #3
 800e7f8:	e204      	b.n	800ec04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e7fa:	4b76      	ldr	r3, [pc, #472]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e802:	2b00      	cmp	r3, #0
 800e804:	d0f0      	beq.n	800e7e8 <HAL_RCC_OscConfig+0xc0>
 800e806:	e014      	b.n	800e832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e808:	f7fb fec2 	bl	800a590 <HAL_GetTick>
 800e80c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e80e:	e008      	b.n	800e822 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e810:	f7fb febe 	bl	800a590 <HAL_GetTick>
 800e814:	4602      	mov	r2, r0
 800e816:	693b      	ldr	r3, [r7, #16]
 800e818:	1ad3      	subs	r3, r2, r3
 800e81a:	2b64      	cmp	r3, #100	; 0x64
 800e81c:	d901      	bls.n	800e822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e81e:	2303      	movs	r3, #3
 800e820:	e1f0      	b.n	800ec04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e822:	4b6c      	ldr	r3, [pc, #432]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d1f0      	bne.n	800e810 <HAL_RCC_OscConfig+0xe8>
 800e82e:	e000      	b.n	800e832 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f003 0302 	and.w	r3, r3, #2
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d063      	beq.n	800e906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e83e:	4b65      	ldr	r3, [pc, #404]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e840:	689b      	ldr	r3, [r3, #8]
 800e842:	f003 030c 	and.w	r3, r3, #12
 800e846:	2b00      	cmp	r3, #0
 800e848:	d00b      	beq.n	800e862 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e84a:	4b62      	ldr	r3, [pc, #392]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e84c:	689b      	ldr	r3, [r3, #8]
 800e84e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e852:	2b08      	cmp	r3, #8
 800e854:	d11c      	bne.n	800e890 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e856:	4b5f      	ldr	r3, [pc, #380]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e858:	685b      	ldr	r3, [r3, #4]
 800e85a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d116      	bne.n	800e890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e862:	4b5c      	ldr	r3, [pc, #368]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	f003 0302 	and.w	r3, r3, #2
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d005      	beq.n	800e87a <HAL_RCC_OscConfig+0x152>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	68db      	ldr	r3, [r3, #12]
 800e872:	2b01      	cmp	r3, #1
 800e874:	d001      	beq.n	800e87a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e876:	2301      	movs	r3, #1
 800e878:	e1c4      	b.n	800ec04 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e87a:	4b56      	ldr	r3, [pc, #344]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	691b      	ldr	r3, [r3, #16]
 800e886:	00db      	lsls	r3, r3, #3
 800e888:	4952      	ldr	r1, [pc, #328]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e88a:	4313      	orrs	r3, r2
 800e88c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e88e:	e03a      	b.n	800e906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	68db      	ldr	r3, [r3, #12]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d020      	beq.n	800e8da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e898:	4b4f      	ldr	r3, [pc, #316]	; (800e9d8 <HAL_RCC_OscConfig+0x2b0>)
 800e89a:	2201      	movs	r2, #1
 800e89c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e89e:	f7fb fe77 	bl	800a590 <HAL_GetTick>
 800e8a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e8a4:	e008      	b.n	800e8b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e8a6:	f7fb fe73 	bl	800a590 <HAL_GetTick>
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	1ad3      	subs	r3, r2, r3
 800e8b0:	2b02      	cmp	r3, #2
 800e8b2:	d901      	bls.n	800e8b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e8b4:	2303      	movs	r3, #3
 800e8b6:	e1a5      	b.n	800ec04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e8b8:	4b46      	ldr	r3, [pc, #280]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f003 0302 	and.w	r3, r3, #2
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d0f0      	beq.n	800e8a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e8c4:	4b43      	ldr	r3, [pc, #268]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	691b      	ldr	r3, [r3, #16]
 800e8d0:	00db      	lsls	r3, r3, #3
 800e8d2:	4940      	ldr	r1, [pc, #256]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e8d4:	4313      	orrs	r3, r2
 800e8d6:	600b      	str	r3, [r1, #0]
 800e8d8:	e015      	b.n	800e906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e8da:	4b3f      	ldr	r3, [pc, #252]	; (800e9d8 <HAL_RCC_OscConfig+0x2b0>)
 800e8dc:	2200      	movs	r2, #0
 800e8de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e8e0:	f7fb fe56 	bl	800a590 <HAL_GetTick>
 800e8e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e8e6:	e008      	b.n	800e8fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e8e8:	f7fb fe52 	bl	800a590 <HAL_GetTick>
 800e8ec:	4602      	mov	r2, r0
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	1ad3      	subs	r3, r2, r3
 800e8f2:	2b02      	cmp	r3, #2
 800e8f4:	d901      	bls.n	800e8fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e8f6:	2303      	movs	r3, #3
 800e8f8:	e184      	b.n	800ec04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e8fa:	4b36      	ldr	r3, [pc, #216]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f003 0302 	and.w	r3, r3, #2
 800e902:	2b00      	cmp	r3, #0
 800e904:	d1f0      	bne.n	800e8e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f003 0308 	and.w	r3, r3, #8
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d030      	beq.n	800e974 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	695b      	ldr	r3, [r3, #20]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d016      	beq.n	800e948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e91a:	4b30      	ldr	r3, [pc, #192]	; (800e9dc <HAL_RCC_OscConfig+0x2b4>)
 800e91c:	2201      	movs	r2, #1
 800e91e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e920:	f7fb fe36 	bl	800a590 <HAL_GetTick>
 800e924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e926:	e008      	b.n	800e93a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e928:	f7fb fe32 	bl	800a590 <HAL_GetTick>
 800e92c:	4602      	mov	r2, r0
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	1ad3      	subs	r3, r2, r3
 800e932:	2b02      	cmp	r3, #2
 800e934:	d901      	bls.n	800e93a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e936:	2303      	movs	r3, #3
 800e938:	e164      	b.n	800ec04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e93a:	4b26      	ldr	r3, [pc, #152]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e93c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e93e:	f003 0302 	and.w	r3, r3, #2
 800e942:	2b00      	cmp	r3, #0
 800e944:	d0f0      	beq.n	800e928 <HAL_RCC_OscConfig+0x200>
 800e946:	e015      	b.n	800e974 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e948:	4b24      	ldr	r3, [pc, #144]	; (800e9dc <HAL_RCC_OscConfig+0x2b4>)
 800e94a:	2200      	movs	r2, #0
 800e94c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e94e:	f7fb fe1f 	bl	800a590 <HAL_GetTick>
 800e952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e954:	e008      	b.n	800e968 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e956:	f7fb fe1b 	bl	800a590 <HAL_GetTick>
 800e95a:	4602      	mov	r2, r0
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	1ad3      	subs	r3, r2, r3
 800e960:	2b02      	cmp	r3, #2
 800e962:	d901      	bls.n	800e968 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800e964:	2303      	movs	r3, #3
 800e966:	e14d      	b.n	800ec04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e968:	4b1a      	ldr	r3, [pc, #104]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e96a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e96c:	f003 0302 	and.w	r3, r3, #2
 800e970:	2b00      	cmp	r3, #0
 800e972:	d1f0      	bne.n	800e956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	f003 0304 	and.w	r3, r3, #4
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	f000 80a0 	beq.w	800eac2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e982:	2300      	movs	r3, #0
 800e984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e986:	4b13      	ldr	r3, [pc, #76]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e98a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d10f      	bne.n	800e9b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e992:	2300      	movs	r3, #0
 800e994:	60bb      	str	r3, [r7, #8]
 800e996:	4b0f      	ldr	r3, [pc, #60]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e99a:	4a0e      	ldr	r2, [pc, #56]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e99c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e9a0:	6413      	str	r3, [r2, #64]	; 0x40
 800e9a2:	4b0c      	ldr	r3, [pc, #48]	; (800e9d4 <HAL_RCC_OscConfig+0x2ac>)
 800e9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e9aa:	60bb      	str	r3, [r7, #8]
 800e9ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e9b2:	4b0b      	ldr	r3, [pc, #44]	; (800e9e0 <HAL_RCC_OscConfig+0x2b8>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d121      	bne.n	800ea02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e9be:	4b08      	ldr	r3, [pc, #32]	; (800e9e0 <HAL_RCC_OscConfig+0x2b8>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	4a07      	ldr	r2, [pc, #28]	; (800e9e0 <HAL_RCC_OscConfig+0x2b8>)
 800e9c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e9c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e9ca:	f7fb fde1 	bl	800a590 <HAL_GetTick>
 800e9ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e9d0:	e011      	b.n	800e9f6 <HAL_RCC_OscConfig+0x2ce>
 800e9d2:	bf00      	nop
 800e9d4:	40023800 	.word	0x40023800
 800e9d8:	42470000 	.word	0x42470000
 800e9dc:	42470e80 	.word	0x42470e80
 800e9e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e9e4:	f7fb fdd4 	bl	800a590 <HAL_GetTick>
 800e9e8:	4602      	mov	r2, r0
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	1ad3      	subs	r3, r2, r3
 800e9ee:	2b02      	cmp	r3, #2
 800e9f0:	d901      	bls.n	800e9f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800e9f2:	2303      	movs	r3, #3
 800e9f4:	e106      	b.n	800ec04 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e9f6:	4b85      	ldr	r3, [pc, #532]	; (800ec0c <HAL_RCC_OscConfig+0x4e4>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d0f0      	beq.n	800e9e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	689b      	ldr	r3, [r3, #8]
 800ea06:	2b01      	cmp	r3, #1
 800ea08:	d106      	bne.n	800ea18 <HAL_RCC_OscConfig+0x2f0>
 800ea0a:	4b81      	ldr	r3, [pc, #516]	; (800ec10 <HAL_RCC_OscConfig+0x4e8>)
 800ea0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea0e:	4a80      	ldr	r2, [pc, #512]	; (800ec10 <HAL_RCC_OscConfig+0x4e8>)
 800ea10:	f043 0301 	orr.w	r3, r3, #1
 800ea14:	6713      	str	r3, [r2, #112]	; 0x70
 800ea16:	e01c      	b.n	800ea52 <HAL_RCC_OscConfig+0x32a>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	689b      	ldr	r3, [r3, #8]
 800ea1c:	2b05      	cmp	r3, #5
 800ea1e:	d10c      	bne.n	800ea3a <HAL_RCC_OscConfig+0x312>
 800ea20:	4b7b      	ldr	r3, [pc, #492]	; (800ec10 <HAL_RCC_OscConfig+0x4e8>)
 800ea22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea24:	4a7a      	ldr	r2, [pc, #488]	; (800ec10 <HAL_RCC_OscConfig+0x4e8>)
 800ea26:	f043 0304 	orr.w	r3, r3, #4
 800ea2a:	6713      	str	r3, [r2, #112]	; 0x70
 800ea2c:	4b78      	ldr	r3, [pc, #480]	; (800ec10 <HAL_RCC_OscConfig+0x4e8>)
 800ea2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea30:	4a77      	ldr	r2, [pc, #476]	; (800ec10 <HAL_RCC_OscConfig+0x4e8>)
 800ea32:	f043 0301 	orr.w	r3, r3, #1
 800ea36:	6713      	str	r3, [r2, #112]	; 0x70
 800ea38:	e00b      	b.n	800ea52 <HAL_RCC_OscConfig+0x32a>
 800ea3a:	4b75      	ldr	r3, [pc, #468]	; (800ec10 <HAL_RCC_OscConfig+0x4e8>)
 800ea3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea3e:	4a74      	ldr	r2, [pc, #464]	; (800ec10 <HAL_RCC_OscConfig+0x4e8>)
 800ea40:	f023 0301 	bic.w	r3, r3, #1
 800ea44:	6713      	str	r3, [r2, #112]	; 0x70
 800ea46:	4b72      	ldr	r3, [pc, #456]	; (800ec10 <HAL_RCC_OscConfig+0x4e8>)
 800ea48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea4a:	4a71      	ldr	r2, [pc, #452]	; (800ec10 <HAL_RCC_OscConfig+0x4e8>)
 800ea4c:	f023 0304 	bic.w	r3, r3, #4
 800ea50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	689b      	ldr	r3, [r3, #8]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d015      	beq.n	800ea86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ea5a:	f7fb fd99 	bl	800a590 <HAL_GetTick>
 800ea5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ea60:	e00a      	b.n	800ea78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ea62:	f7fb fd95 	bl	800a590 <HAL_GetTick>
 800ea66:	4602      	mov	r2, r0
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	1ad3      	subs	r3, r2, r3
 800ea6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d901      	bls.n	800ea78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800ea74:	2303      	movs	r3, #3
 800ea76:	e0c5      	b.n	800ec04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ea78:	4b65      	ldr	r3, [pc, #404]	; (800ec10 <HAL_RCC_OscConfig+0x4e8>)
 800ea7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea7c:	f003 0302 	and.w	r3, r3, #2
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d0ee      	beq.n	800ea62 <HAL_RCC_OscConfig+0x33a>
 800ea84:	e014      	b.n	800eab0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ea86:	f7fb fd83 	bl	800a590 <HAL_GetTick>
 800ea8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ea8c:	e00a      	b.n	800eaa4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ea8e:	f7fb fd7f 	bl	800a590 <HAL_GetTick>
 800ea92:	4602      	mov	r2, r0
 800ea94:	693b      	ldr	r3, [r7, #16]
 800ea96:	1ad3      	subs	r3, r2, r3
 800ea98:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d901      	bls.n	800eaa4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800eaa0:	2303      	movs	r3, #3
 800eaa2:	e0af      	b.n	800ec04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800eaa4:	4b5a      	ldr	r3, [pc, #360]	; (800ec10 <HAL_RCC_OscConfig+0x4e8>)
 800eaa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaa8:	f003 0302 	and.w	r3, r3, #2
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d1ee      	bne.n	800ea8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800eab0:	7dfb      	ldrb	r3, [r7, #23]
 800eab2:	2b01      	cmp	r3, #1
 800eab4:	d105      	bne.n	800eac2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800eab6:	4b56      	ldr	r3, [pc, #344]	; (800ec10 <HAL_RCC_OscConfig+0x4e8>)
 800eab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaba:	4a55      	ldr	r2, [pc, #340]	; (800ec10 <HAL_RCC_OscConfig+0x4e8>)
 800eabc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eac0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	699b      	ldr	r3, [r3, #24]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	f000 809b 	beq.w	800ec02 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800eacc:	4b50      	ldr	r3, [pc, #320]	; (800ec10 <HAL_RCC_OscConfig+0x4e8>)
 800eace:	689b      	ldr	r3, [r3, #8]
 800ead0:	f003 030c 	and.w	r3, r3, #12
 800ead4:	2b08      	cmp	r3, #8
 800ead6:	d05c      	beq.n	800eb92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	699b      	ldr	r3, [r3, #24]
 800eadc:	2b02      	cmp	r3, #2
 800eade:	d141      	bne.n	800eb64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800eae0:	4b4c      	ldr	r3, [pc, #304]	; (800ec14 <HAL_RCC_OscConfig+0x4ec>)
 800eae2:	2200      	movs	r2, #0
 800eae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eae6:	f7fb fd53 	bl	800a590 <HAL_GetTick>
 800eaea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eaec:	e008      	b.n	800eb00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800eaee:	f7fb fd4f 	bl	800a590 <HAL_GetTick>
 800eaf2:	4602      	mov	r2, r0
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	1ad3      	subs	r3, r2, r3
 800eaf8:	2b02      	cmp	r3, #2
 800eafa:	d901      	bls.n	800eb00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800eafc:	2303      	movs	r3, #3
 800eafe:	e081      	b.n	800ec04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eb00:	4b43      	ldr	r3, [pc, #268]	; (800ec10 <HAL_RCC_OscConfig+0x4e8>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d1f0      	bne.n	800eaee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	69da      	ldr	r2, [r3, #28]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	6a1b      	ldr	r3, [r3, #32]
 800eb14:	431a      	orrs	r2, r3
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb1a:	019b      	lsls	r3, r3, #6
 800eb1c:	431a      	orrs	r2, r3
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb22:	085b      	lsrs	r3, r3, #1
 800eb24:	3b01      	subs	r3, #1
 800eb26:	041b      	lsls	r3, r3, #16
 800eb28:	431a      	orrs	r2, r3
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb2e:	061b      	lsls	r3, r3, #24
 800eb30:	4937      	ldr	r1, [pc, #220]	; (800ec10 <HAL_RCC_OscConfig+0x4e8>)
 800eb32:	4313      	orrs	r3, r2
 800eb34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800eb36:	4b37      	ldr	r3, [pc, #220]	; (800ec14 <HAL_RCC_OscConfig+0x4ec>)
 800eb38:	2201      	movs	r2, #1
 800eb3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb3c:	f7fb fd28 	bl	800a590 <HAL_GetTick>
 800eb40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800eb42:	e008      	b.n	800eb56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800eb44:	f7fb fd24 	bl	800a590 <HAL_GetTick>
 800eb48:	4602      	mov	r2, r0
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	1ad3      	subs	r3, r2, r3
 800eb4e:	2b02      	cmp	r3, #2
 800eb50:	d901      	bls.n	800eb56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800eb52:	2303      	movs	r3, #3
 800eb54:	e056      	b.n	800ec04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800eb56:	4b2e      	ldr	r3, [pc, #184]	; (800ec10 <HAL_RCC_OscConfig+0x4e8>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d0f0      	beq.n	800eb44 <HAL_RCC_OscConfig+0x41c>
 800eb62:	e04e      	b.n	800ec02 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800eb64:	4b2b      	ldr	r3, [pc, #172]	; (800ec14 <HAL_RCC_OscConfig+0x4ec>)
 800eb66:	2200      	movs	r2, #0
 800eb68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb6a:	f7fb fd11 	bl	800a590 <HAL_GetTick>
 800eb6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eb70:	e008      	b.n	800eb84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800eb72:	f7fb fd0d 	bl	800a590 <HAL_GetTick>
 800eb76:	4602      	mov	r2, r0
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	1ad3      	subs	r3, r2, r3
 800eb7c:	2b02      	cmp	r3, #2
 800eb7e:	d901      	bls.n	800eb84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800eb80:	2303      	movs	r3, #3
 800eb82:	e03f      	b.n	800ec04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eb84:	4b22      	ldr	r3, [pc, #136]	; (800ec10 <HAL_RCC_OscConfig+0x4e8>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d1f0      	bne.n	800eb72 <HAL_RCC_OscConfig+0x44a>
 800eb90:	e037      	b.n	800ec02 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	699b      	ldr	r3, [r3, #24]
 800eb96:	2b01      	cmp	r3, #1
 800eb98:	d101      	bne.n	800eb9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	e032      	b.n	800ec04 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800eb9e:	4b1c      	ldr	r3, [pc, #112]	; (800ec10 <HAL_RCC_OscConfig+0x4e8>)
 800eba0:	685b      	ldr	r3, [r3, #4]
 800eba2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	699b      	ldr	r3, [r3, #24]
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d028      	beq.n	800ebfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	d121      	bne.n	800ebfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d11a      	bne.n	800ebfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ebc8:	68fa      	ldr	r2, [r7, #12]
 800ebca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ebce:	4013      	ands	r3, r2
 800ebd0:	687a      	ldr	r2, [r7, #4]
 800ebd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ebd4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d111      	bne.n	800ebfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebe4:	085b      	lsrs	r3, r3, #1
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d107      	bne.n	800ebfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebf8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d001      	beq.n	800ec02 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800ebfe:	2301      	movs	r3, #1
 800ec00:	e000      	b.n	800ec04 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800ec02:	2300      	movs	r3, #0
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3718      	adds	r7, #24
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	40007000 	.word	0x40007000
 800ec10:	40023800 	.word	0x40023800
 800ec14:	42470060 	.word	0x42470060

0800ec18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d101      	bne.n	800ec2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ec28:	2301      	movs	r3, #1
 800ec2a:	e0cc      	b.n	800edc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ec2c:	4b68      	ldr	r3, [pc, #416]	; (800edd0 <HAL_RCC_ClockConfig+0x1b8>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f003 0307 	and.w	r3, r3, #7
 800ec34:	683a      	ldr	r2, [r7, #0]
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d90c      	bls.n	800ec54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ec3a:	4b65      	ldr	r3, [pc, #404]	; (800edd0 <HAL_RCC_ClockConfig+0x1b8>)
 800ec3c:	683a      	ldr	r2, [r7, #0]
 800ec3e:	b2d2      	uxtb	r2, r2
 800ec40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ec42:	4b63      	ldr	r3, [pc, #396]	; (800edd0 <HAL_RCC_ClockConfig+0x1b8>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	f003 0307 	and.w	r3, r3, #7
 800ec4a:	683a      	ldr	r2, [r7, #0]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d001      	beq.n	800ec54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ec50:	2301      	movs	r3, #1
 800ec52:	e0b8      	b.n	800edc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f003 0302 	and.w	r3, r3, #2
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d020      	beq.n	800eca2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	f003 0304 	and.w	r3, r3, #4
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d005      	beq.n	800ec78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ec6c:	4b59      	ldr	r3, [pc, #356]	; (800edd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ec6e:	689b      	ldr	r3, [r3, #8]
 800ec70:	4a58      	ldr	r2, [pc, #352]	; (800edd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ec72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ec76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	f003 0308 	and.w	r3, r3, #8
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d005      	beq.n	800ec90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ec84:	4b53      	ldr	r3, [pc, #332]	; (800edd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ec86:	689b      	ldr	r3, [r3, #8]
 800ec88:	4a52      	ldr	r2, [pc, #328]	; (800edd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ec8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ec8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ec90:	4b50      	ldr	r3, [pc, #320]	; (800edd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ec92:	689b      	ldr	r3, [r3, #8]
 800ec94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	689b      	ldr	r3, [r3, #8]
 800ec9c:	494d      	ldr	r1, [pc, #308]	; (800edd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ec9e:	4313      	orrs	r3, r2
 800eca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	f003 0301 	and.w	r3, r3, #1
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d044      	beq.n	800ed38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	685b      	ldr	r3, [r3, #4]
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d107      	bne.n	800ecc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ecb6:	4b47      	ldr	r3, [pc, #284]	; (800edd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d119      	bne.n	800ecf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	e07f      	b.n	800edc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	685b      	ldr	r3, [r3, #4]
 800ecca:	2b02      	cmp	r3, #2
 800eccc:	d003      	beq.n	800ecd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ecd2:	2b03      	cmp	r3, #3
 800ecd4:	d107      	bne.n	800ece6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ecd6:	4b3f      	ldr	r3, [pc, #252]	; (800edd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d109      	bne.n	800ecf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ece2:	2301      	movs	r3, #1
 800ece4:	e06f      	b.n	800edc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ece6:	4b3b      	ldr	r3, [pc, #236]	; (800edd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	f003 0302 	and.w	r3, r3, #2
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d101      	bne.n	800ecf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	e067      	b.n	800edc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ecf6:	4b37      	ldr	r3, [pc, #220]	; (800edd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ecf8:	689b      	ldr	r3, [r3, #8]
 800ecfa:	f023 0203 	bic.w	r2, r3, #3
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	685b      	ldr	r3, [r3, #4]
 800ed02:	4934      	ldr	r1, [pc, #208]	; (800edd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ed04:	4313      	orrs	r3, r2
 800ed06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ed08:	f7fb fc42 	bl	800a590 <HAL_GetTick>
 800ed0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ed0e:	e00a      	b.n	800ed26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ed10:	f7fb fc3e 	bl	800a590 <HAL_GetTick>
 800ed14:	4602      	mov	r2, r0
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	1ad3      	subs	r3, r2, r3
 800ed1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	d901      	bls.n	800ed26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ed22:	2303      	movs	r3, #3
 800ed24:	e04f      	b.n	800edc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ed26:	4b2b      	ldr	r3, [pc, #172]	; (800edd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ed28:	689b      	ldr	r3, [r3, #8]
 800ed2a:	f003 020c 	and.w	r2, r3, #12
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	685b      	ldr	r3, [r3, #4]
 800ed32:	009b      	lsls	r3, r3, #2
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d1eb      	bne.n	800ed10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ed38:	4b25      	ldr	r3, [pc, #148]	; (800edd0 <HAL_RCC_ClockConfig+0x1b8>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	f003 0307 	and.w	r3, r3, #7
 800ed40:	683a      	ldr	r2, [r7, #0]
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d20c      	bcs.n	800ed60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ed46:	4b22      	ldr	r3, [pc, #136]	; (800edd0 <HAL_RCC_ClockConfig+0x1b8>)
 800ed48:	683a      	ldr	r2, [r7, #0]
 800ed4a:	b2d2      	uxtb	r2, r2
 800ed4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ed4e:	4b20      	ldr	r3, [pc, #128]	; (800edd0 <HAL_RCC_ClockConfig+0x1b8>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f003 0307 	and.w	r3, r3, #7
 800ed56:	683a      	ldr	r2, [r7, #0]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d001      	beq.n	800ed60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	e032      	b.n	800edc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	f003 0304 	and.w	r3, r3, #4
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d008      	beq.n	800ed7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ed6c:	4b19      	ldr	r3, [pc, #100]	; (800edd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ed6e:	689b      	ldr	r3, [r3, #8]
 800ed70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	68db      	ldr	r3, [r3, #12]
 800ed78:	4916      	ldr	r1, [pc, #88]	; (800edd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ed7a:	4313      	orrs	r3, r2
 800ed7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	f003 0308 	and.w	r3, r3, #8
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d009      	beq.n	800ed9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ed8a:	4b12      	ldr	r3, [pc, #72]	; (800edd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ed8c:	689b      	ldr	r3, [r3, #8]
 800ed8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	691b      	ldr	r3, [r3, #16]
 800ed96:	00db      	lsls	r3, r3, #3
 800ed98:	490e      	ldr	r1, [pc, #56]	; (800edd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ed9a:	4313      	orrs	r3, r2
 800ed9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ed9e:	f000 f821 	bl	800ede4 <HAL_RCC_GetSysClockFreq>
 800eda2:	4602      	mov	r2, r0
 800eda4:	4b0b      	ldr	r3, [pc, #44]	; (800edd4 <HAL_RCC_ClockConfig+0x1bc>)
 800eda6:	689b      	ldr	r3, [r3, #8]
 800eda8:	091b      	lsrs	r3, r3, #4
 800edaa:	f003 030f 	and.w	r3, r3, #15
 800edae:	490a      	ldr	r1, [pc, #40]	; (800edd8 <HAL_RCC_ClockConfig+0x1c0>)
 800edb0:	5ccb      	ldrb	r3, [r1, r3]
 800edb2:	fa22 f303 	lsr.w	r3, r2, r3
 800edb6:	4a09      	ldr	r2, [pc, #36]	; (800eddc <HAL_RCC_ClockConfig+0x1c4>)
 800edb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800edba:	4b09      	ldr	r3, [pc, #36]	; (800ede0 <HAL_RCC_ClockConfig+0x1c8>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7fb fba2 	bl	800a508 <HAL_InitTick>

  return HAL_OK;
 800edc4:	2300      	movs	r3, #0
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3710      	adds	r7, #16
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
 800edce:	bf00      	nop
 800edd0:	40023c00 	.word	0x40023c00
 800edd4:	40023800 	.word	0x40023800
 800edd8:	08026c8c 	.word	0x08026c8c
 800eddc:	20000034 	.word	0x20000034
 800ede0:	20000038 	.word	0x20000038

0800ede4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ede4:	b5b0      	push	{r4, r5, r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800edea:	2100      	movs	r1, #0
 800edec:	6079      	str	r1, [r7, #4]
 800edee:	2100      	movs	r1, #0
 800edf0:	60f9      	str	r1, [r7, #12]
 800edf2:	2100      	movs	r1, #0
 800edf4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800edf6:	2100      	movs	r1, #0
 800edf8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800edfa:	4952      	ldr	r1, [pc, #328]	; (800ef44 <HAL_RCC_GetSysClockFreq+0x160>)
 800edfc:	6889      	ldr	r1, [r1, #8]
 800edfe:	f001 010c 	and.w	r1, r1, #12
 800ee02:	2908      	cmp	r1, #8
 800ee04:	d00d      	beq.n	800ee22 <HAL_RCC_GetSysClockFreq+0x3e>
 800ee06:	2908      	cmp	r1, #8
 800ee08:	f200 8094 	bhi.w	800ef34 <HAL_RCC_GetSysClockFreq+0x150>
 800ee0c:	2900      	cmp	r1, #0
 800ee0e:	d002      	beq.n	800ee16 <HAL_RCC_GetSysClockFreq+0x32>
 800ee10:	2904      	cmp	r1, #4
 800ee12:	d003      	beq.n	800ee1c <HAL_RCC_GetSysClockFreq+0x38>
 800ee14:	e08e      	b.n	800ef34 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ee16:	4b4c      	ldr	r3, [pc, #304]	; (800ef48 <HAL_RCC_GetSysClockFreq+0x164>)
 800ee18:	60bb      	str	r3, [r7, #8]
       break;
 800ee1a:	e08e      	b.n	800ef3a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ee1c:	4b4b      	ldr	r3, [pc, #300]	; (800ef4c <HAL_RCC_GetSysClockFreq+0x168>)
 800ee1e:	60bb      	str	r3, [r7, #8]
      break;
 800ee20:	e08b      	b.n	800ef3a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ee22:	4948      	ldr	r1, [pc, #288]	; (800ef44 <HAL_RCC_GetSysClockFreq+0x160>)
 800ee24:	6849      	ldr	r1, [r1, #4]
 800ee26:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800ee2a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ee2c:	4945      	ldr	r1, [pc, #276]	; (800ef44 <HAL_RCC_GetSysClockFreq+0x160>)
 800ee2e:	6849      	ldr	r1, [r1, #4]
 800ee30:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800ee34:	2900      	cmp	r1, #0
 800ee36:	d024      	beq.n	800ee82 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ee38:	4942      	ldr	r1, [pc, #264]	; (800ef44 <HAL_RCC_GetSysClockFreq+0x160>)
 800ee3a:	6849      	ldr	r1, [r1, #4]
 800ee3c:	0989      	lsrs	r1, r1, #6
 800ee3e:	4608      	mov	r0, r1
 800ee40:	f04f 0100 	mov.w	r1, #0
 800ee44:	f240 14ff 	movw	r4, #511	; 0x1ff
 800ee48:	f04f 0500 	mov.w	r5, #0
 800ee4c:	ea00 0204 	and.w	r2, r0, r4
 800ee50:	ea01 0305 	and.w	r3, r1, r5
 800ee54:	493d      	ldr	r1, [pc, #244]	; (800ef4c <HAL_RCC_GetSysClockFreq+0x168>)
 800ee56:	fb01 f003 	mul.w	r0, r1, r3
 800ee5a:	2100      	movs	r1, #0
 800ee5c:	fb01 f102 	mul.w	r1, r1, r2
 800ee60:	1844      	adds	r4, r0, r1
 800ee62:	493a      	ldr	r1, [pc, #232]	; (800ef4c <HAL_RCC_GetSysClockFreq+0x168>)
 800ee64:	fba2 0101 	umull	r0, r1, r2, r1
 800ee68:	1863      	adds	r3, r4, r1
 800ee6a:	4619      	mov	r1, r3
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	461a      	mov	r2, r3
 800ee70:	f04f 0300 	mov.w	r3, #0
 800ee74:	f7f1 ff20 	bl	8000cb8 <__aeabi_uldivmod>
 800ee78:	4602      	mov	r2, r0
 800ee7a:	460b      	mov	r3, r1
 800ee7c:	4613      	mov	r3, r2
 800ee7e:	60fb      	str	r3, [r7, #12]
 800ee80:	e04a      	b.n	800ef18 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ee82:	4b30      	ldr	r3, [pc, #192]	; (800ef44 <HAL_RCC_GetSysClockFreq+0x160>)
 800ee84:	685b      	ldr	r3, [r3, #4]
 800ee86:	099b      	lsrs	r3, r3, #6
 800ee88:	461a      	mov	r2, r3
 800ee8a:	f04f 0300 	mov.w	r3, #0
 800ee8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ee92:	f04f 0100 	mov.w	r1, #0
 800ee96:	ea02 0400 	and.w	r4, r2, r0
 800ee9a:	ea03 0501 	and.w	r5, r3, r1
 800ee9e:	4620      	mov	r0, r4
 800eea0:	4629      	mov	r1, r5
 800eea2:	f04f 0200 	mov.w	r2, #0
 800eea6:	f04f 0300 	mov.w	r3, #0
 800eeaa:	014b      	lsls	r3, r1, #5
 800eeac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800eeb0:	0142      	lsls	r2, r0, #5
 800eeb2:	4610      	mov	r0, r2
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	1b00      	subs	r0, r0, r4
 800eeb8:	eb61 0105 	sbc.w	r1, r1, r5
 800eebc:	f04f 0200 	mov.w	r2, #0
 800eec0:	f04f 0300 	mov.w	r3, #0
 800eec4:	018b      	lsls	r3, r1, #6
 800eec6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800eeca:	0182      	lsls	r2, r0, #6
 800eecc:	1a12      	subs	r2, r2, r0
 800eece:	eb63 0301 	sbc.w	r3, r3, r1
 800eed2:	f04f 0000 	mov.w	r0, #0
 800eed6:	f04f 0100 	mov.w	r1, #0
 800eeda:	00d9      	lsls	r1, r3, #3
 800eedc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800eee0:	00d0      	lsls	r0, r2, #3
 800eee2:	4602      	mov	r2, r0
 800eee4:	460b      	mov	r3, r1
 800eee6:	1912      	adds	r2, r2, r4
 800eee8:	eb45 0303 	adc.w	r3, r5, r3
 800eeec:	f04f 0000 	mov.w	r0, #0
 800eef0:	f04f 0100 	mov.w	r1, #0
 800eef4:	0299      	lsls	r1, r3, #10
 800eef6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800eefa:	0290      	lsls	r0, r2, #10
 800eefc:	4602      	mov	r2, r0
 800eefe:	460b      	mov	r3, r1
 800ef00:	4610      	mov	r0, r2
 800ef02:	4619      	mov	r1, r3
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	461a      	mov	r2, r3
 800ef08:	f04f 0300 	mov.w	r3, #0
 800ef0c:	f7f1 fed4 	bl	8000cb8 <__aeabi_uldivmod>
 800ef10:	4602      	mov	r2, r0
 800ef12:	460b      	mov	r3, r1
 800ef14:	4613      	mov	r3, r2
 800ef16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ef18:	4b0a      	ldr	r3, [pc, #40]	; (800ef44 <HAL_RCC_GetSysClockFreq+0x160>)
 800ef1a:	685b      	ldr	r3, [r3, #4]
 800ef1c:	0c1b      	lsrs	r3, r3, #16
 800ef1e:	f003 0303 	and.w	r3, r3, #3
 800ef22:	3301      	adds	r3, #1
 800ef24:	005b      	lsls	r3, r3, #1
 800ef26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800ef28:	68fa      	ldr	r2, [r7, #12]
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef30:	60bb      	str	r3, [r7, #8]
      break;
 800ef32:	e002      	b.n	800ef3a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ef34:	4b04      	ldr	r3, [pc, #16]	; (800ef48 <HAL_RCC_GetSysClockFreq+0x164>)
 800ef36:	60bb      	str	r3, [r7, #8]
      break;
 800ef38:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ef3a:	68bb      	ldr	r3, [r7, #8]
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	3710      	adds	r7, #16
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bdb0      	pop	{r4, r5, r7, pc}
 800ef44:	40023800 	.word	0x40023800
 800ef48:	00f42400 	.word	0x00f42400
 800ef4c:	017d7840 	.word	0x017d7840

0800ef50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ef50:	b480      	push	{r7}
 800ef52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ef54:	4b03      	ldr	r3, [pc, #12]	; (800ef64 <HAL_RCC_GetHCLKFreq+0x14>)
 800ef56:	681b      	ldr	r3, [r3, #0]
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef60:	4770      	bx	lr
 800ef62:	bf00      	nop
 800ef64:	20000034 	.word	0x20000034

0800ef68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ef6c:	f7ff fff0 	bl	800ef50 <HAL_RCC_GetHCLKFreq>
 800ef70:	4602      	mov	r2, r0
 800ef72:	4b05      	ldr	r3, [pc, #20]	; (800ef88 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ef74:	689b      	ldr	r3, [r3, #8]
 800ef76:	0a9b      	lsrs	r3, r3, #10
 800ef78:	f003 0307 	and.w	r3, r3, #7
 800ef7c:	4903      	ldr	r1, [pc, #12]	; (800ef8c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ef7e:	5ccb      	ldrb	r3, [r1, r3]
 800ef80:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	bd80      	pop	{r7, pc}
 800ef88:	40023800 	.word	0x40023800
 800ef8c:	08026c9c 	.word	0x08026c9c

0800ef90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ef94:	f7ff ffdc 	bl	800ef50 <HAL_RCC_GetHCLKFreq>
 800ef98:	4602      	mov	r2, r0
 800ef9a:	4b05      	ldr	r3, [pc, #20]	; (800efb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ef9c:	689b      	ldr	r3, [r3, #8]
 800ef9e:	0b5b      	lsrs	r3, r3, #13
 800efa0:	f003 0307 	and.w	r3, r3, #7
 800efa4:	4903      	ldr	r1, [pc, #12]	; (800efb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800efa6:	5ccb      	ldrb	r3, [r1, r3]
 800efa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800efac:	4618      	mov	r0, r3
 800efae:	bd80      	pop	{r7, pc}
 800efb0:	40023800 	.word	0x40023800
 800efb4:	08026c9c 	.word	0x08026c9c

0800efb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b082      	sub	sp, #8
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d101      	bne.n	800efca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800efc6:	2301      	movs	r3, #1
 800efc8:	e07b      	b.n	800f0c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d108      	bne.n	800efe4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	685b      	ldr	r3, [r3, #4]
 800efd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800efda:	d009      	beq.n	800eff0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2200      	movs	r2, #0
 800efe0:	61da      	str	r2, [r3, #28]
 800efe2:	e005      	b.n	800eff0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2200      	movs	r2, #0
 800efe8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2200      	movs	r2, #0
 800efee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2200      	movs	r2, #0
 800eff4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800effc:	b2db      	uxtb	r3, r3
 800effe:	2b00      	cmp	r3, #0
 800f000:	d106      	bne.n	800f010 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2200      	movs	r2, #0
 800f006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f7fa fb04 	bl	8009618 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2202      	movs	r2, #2
 800f014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	681a      	ldr	r2, [r3, #0]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f026:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	689b      	ldr	r3, [r3, #8]
 800f034:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800f038:	431a      	orrs	r2, r3
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	68db      	ldr	r3, [r3, #12]
 800f03e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f042:	431a      	orrs	r2, r3
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	691b      	ldr	r3, [r3, #16]
 800f048:	f003 0302 	and.w	r3, r3, #2
 800f04c:	431a      	orrs	r2, r3
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	695b      	ldr	r3, [r3, #20]
 800f052:	f003 0301 	and.w	r3, r3, #1
 800f056:	431a      	orrs	r2, r3
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	699b      	ldr	r3, [r3, #24]
 800f05c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f060:	431a      	orrs	r2, r3
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	69db      	ldr	r3, [r3, #28]
 800f066:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f06a:	431a      	orrs	r2, r3
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6a1b      	ldr	r3, [r3, #32]
 800f070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f074:	ea42 0103 	orr.w	r1, r2, r3
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f07c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	430a      	orrs	r2, r1
 800f086:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	699b      	ldr	r3, [r3, #24]
 800f08c:	0c1b      	lsrs	r3, r3, #16
 800f08e:	f003 0104 	and.w	r1, r3, #4
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f096:	f003 0210 	and.w	r2, r3, #16
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	430a      	orrs	r2, r1
 800f0a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	69da      	ldr	r2, [r3, #28]
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f0b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800f0c0:	2300      	movs	r3, #0
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3708      	adds	r7, #8
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}

0800f0ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f0ca:	b580      	push	{r7, lr}
 800f0cc:	b08c      	sub	sp, #48	; 0x30
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	60f8      	str	r0, [r7, #12]
 800f0d2:	60b9      	str	r1, [r7, #8]
 800f0d4:	607a      	str	r2, [r7, #4]
 800f0d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f0d8:	2301      	movs	r3, #1
 800f0da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f0dc:	2300      	movs	r3, #0
 800f0de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f0e8:	2b01      	cmp	r3, #1
 800f0ea:	d101      	bne.n	800f0f0 <HAL_SPI_TransmitReceive+0x26>
 800f0ec:	2302      	movs	r3, #2
 800f0ee:	e18a      	b.n	800f406 <HAL_SPI_TransmitReceive+0x33c>
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	2201      	movs	r2, #1
 800f0f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f0f8:	f7fb fa4a 	bl	800a590 <HAL_GetTick>
 800f0fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f104:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800f10e:	887b      	ldrh	r3, [r7, #2]
 800f110:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f112:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f116:	2b01      	cmp	r3, #1
 800f118:	d00f      	beq.n	800f13a <HAL_SPI_TransmitReceive+0x70>
 800f11a:	69fb      	ldr	r3, [r7, #28]
 800f11c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f120:	d107      	bne.n	800f132 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	689b      	ldr	r3, [r3, #8]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d103      	bne.n	800f132 <HAL_SPI_TransmitReceive+0x68>
 800f12a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f12e:	2b04      	cmp	r3, #4
 800f130:	d003      	beq.n	800f13a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800f132:	2302      	movs	r3, #2
 800f134:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f138:	e15b      	b.n	800f3f2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d005      	beq.n	800f14c <HAL_SPI_TransmitReceive+0x82>
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d002      	beq.n	800f14c <HAL_SPI_TransmitReceive+0x82>
 800f146:	887b      	ldrh	r3, [r7, #2]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d103      	bne.n	800f154 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800f14c:	2301      	movs	r3, #1
 800f14e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f152:	e14e      	b.n	800f3f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f15a:	b2db      	uxtb	r3, r3
 800f15c:	2b04      	cmp	r3, #4
 800f15e:	d003      	beq.n	800f168 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	2205      	movs	r2, #5
 800f164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	2200      	movs	r2, #0
 800f16c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	687a      	ldr	r2, [r7, #4]
 800f172:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	887a      	ldrh	r2, [r7, #2]
 800f178:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	887a      	ldrh	r2, [r7, #2]
 800f17e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	68ba      	ldr	r2, [r7, #8]
 800f184:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	887a      	ldrh	r2, [r7, #2]
 800f18a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	887a      	ldrh	r2, [r7, #2]
 800f190:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	2200      	movs	r2, #0
 800f196:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	2200      	movs	r2, #0
 800f19c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1a8:	2b40      	cmp	r3, #64	; 0x40
 800f1aa:	d007      	beq.n	800f1bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f1ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	68db      	ldr	r3, [r3, #12]
 800f1c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f1c4:	d178      	bne.n	800f2b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d002      	beq.n	800f1d4 <HAL_SPI_TransmitReceive+0x10a>
 800f1ce:	8b7b      	ldrh	r3, [r7, #26]
 800f1d0:	2b01      	cmp	r3, #1
 800f1d2:	d166      	bne.n	800f2a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1d8:	881a      	ldrh	r2, [r3, #0]
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1e4:	1c9a      	adds	r2, r3, #2
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	3b01      	subs	r3, #1
 800f1f2:	b29a      	uxth	r2, r3
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f1f8:	e053      	b.n	800f2a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	689b      	ldr	r3, [r3, #8]
 800f200:	f003 0302 	and.w	r3, r3, #2
 800f204:	2b02      	cmp	r3, #2
 800f206:	d11b      	bne.n	800f240 <HAL_SPI_TransmitReceive+0x176>
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f20c:	b29b      	uxth	r3, r3
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d016      	beq.n	800f240 <HAL_SPI_TransmitReceive+0x176>
 800f212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f214:	2b01      	cmp	r3, #1
 800f216:	d113      	bne.n	800f240 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f21c:	881a      	ldrh	r2, [r3, #0]
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f228:	1c9a      	adds	r2, r3, #2
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f232:	b29b      	uxth	r3, r3
 800f234:	3b01      	subs	r3, #1
 800f236:	b29a      	uxth	r2, r3
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f23c:	2300      	movs	r3, #0
 800f23e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	689b      	ldr	r3, [r3, #8]
 800f246:	f003 0301 	and.w	r3, r3, #1
 800f24a:	2b01      	cmp	r3, #1
 800f24c:	d119      	bne.n	800f282 <HAL_SPI_TransmitReceive+0x1b8>
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f252:	b29b      	uxth	r3, r3
 800f254:	2b00      	cmp	r3, #0
 800f256:	d014      	beq.n	800f282 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	68da      	ldr	r2, [r3, #12]
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f262:	b292      	uxth	r2, r2
 800f264:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f26a:	1c9a      	adds	r2, r3, #2
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f274:	b29b      	uxth	r3, r3
 800f276:	3b01      	subs	r3, #1
 800f278:	b29a      	uxth	r2, r3
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f27e:	2301      	movs	r3, #1
 800f280:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f282:	f7fb f985 	bl	800a590 <HAL_GetTick>
 800f286:	4602      	mov	r2, r0
 800f288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28a:	1ad3      	subs	r3, r2, r3
 800f28c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f28e:	429a      	cmp	r2, r3
 800f290:	d807      	bhi.n	800f2a2 <HAL_SPI_TransmitReceive+0x1d8>
 800f292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f298:	d003      	beq.n	800f2a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800f29a:	2303      	movs	r3, #3
 800f29c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f2a0:	e0a7      	b.n	800f3f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f2a6:	b29b      	uxth	r3, r3
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d1a6      	bne.n	800f1fa <HAL_SPI_TransmitReceive+0x130>
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f2b0:	b29b      	uxth	r3, r3
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d1a1      	bne.n	800f1fa <HAL_SPI_TransmitReceive+0x130>
 800f2b6:	e07c      	b.n	800f3b2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	685b      	ldr	r3, [r3, #4]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d002      	beq.n	800f2c6 <HAL_SPI_TransmitReceive+0x1fc>
 800f2c0:	8b7b      	ldrh	r3, [r7, #26]
 800f2c2:	2b01      	cmp	r3, #1
 800f2c4:	d16b      	bne.n	800f39e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	330c      	adds	r3, #12
 800f2d0:	7812      	ldrb	r2, [r2, #0]
 800f2d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2d8:	1c5a      	adds	r2, r3, #1
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	3b01      	subs	r3, #1
 800f2e6:	b29a      	uxth	r2, r3
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f2ec:	e057      	b.n	800f39e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	689b      	ldr	r3, [r3, #8]
 800f2f4:	f003 0302 	and.w	r3, r3, #2
 800f2f8:	2b02      	cmp	r3, #2
 800f2fa:	d11c      	bne.n	800f336 <HAL_SPI_TransmitReceive+0x26c>
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f300:	b29b      	uxth	r3, r3
 800f302:	2b00      	cmp	r3, #0
 800f304:	d017      	beq.n	800f336 <HAL_SPI_TransmitReceive+0x26c>
 800f306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f308:	2b01      	cmp	r3, #1
 800f30a:	d114      	bne.n	800f336 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	330c      	adds	r3, #12
 800f316:	7812      	ldrb	r2, [r2, #0]
 800f318:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f31e:	1c5a      	adds	r2, r3, #1
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f328:	b29b      	uxth	r3, r3
 800f32a:	3b01      	subs	r3, #1
 800f32c:	b29a      	uxth	r2, r3
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f332:	2300      	movs	r3, #0
 800f334:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	689b      	ldr	r3, [r3, #8]
 800f33c:	f003 0301 	and.w	r3, r3, #1
 800f340:	2b01      	cmp	r3, #1
 800f342:	d119      	bne.n	800f378 <HAL_SPI_TransmitReceive+0x2ae>
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f348:	b29b      	uxth	r3, r3
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d014      	beq.n	800f378 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	68da      	ldr	r2, [r3, #12]
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f358:	b2d2      	uxtb	r2, r2
 800f35a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f360:	1c5a      	adds	r2, r3, #1
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f36a:	b29b      	uxth	r3, r3
 800f36c:	3b01      	subs	r3, #1
 800f36e:	b29a      	uxth	r2, r3
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f374:	2301      	movs	r3, #1
 800f376:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f378:	f7fb f90a 	bl	800a590 <HAL_GetTick>
 800f37c:	4602      	mov	r2, r0
 800f37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f380:	1ad3      	subs	r3, r2, r3
 800f382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f384:	429a      	cmp	r2, r3
 800f386:	d803      	bhi.n	800f390 <HAL_SPI_TransmitReceive+0x2c6>
 800f388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f38a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f38e:	d102      	bne.n	800f396 <HAL_SPI_TransmitReceive+0x2cc>
 800f390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f392:	2b00      	cmp	r3, #0
 800f394:	d103      	bne.n	800f39e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800f396:	2303      	movs	r3, #3
 800f398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f39c:	e029      	b.n	800f3f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f3a2:	b29b      	uxth	r3, r3
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d1a2      	bne.n	800f2ee <HAL_SPI_TransmitReceive+0x224>
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f3ac:	b29b      	uxth	r3, r3
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d19d      	bne.n	800f2ee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f3b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f3b6:	68f8      	ldr	r0, [r7, #12]
 800f3b8:	f000 f9d0 	bl	800f75c <SPI_EndRxTxTransaction>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d006      	beq.n	800f3d0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	2220      	movs	r2, #32
 800f3cc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800f3ce:	e010      	b.n	800f3f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	689b      	ldr	r3, [r3, #8]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d10b      	bne.n	800f3f0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f3d8:	2300      	movs	r3, #0
 800f3da:	617b      	str	r3, [r7, #20]
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	68db      	ldr	r3, [r3, #12]
 800f3e2:	617b      	str	r3, [r7, #20]
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	689b      	ldr	r3, [r3, #8]
 800f3ea:	617b      	str	r3, [r7, #20]
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	e000      	b.n	800f3f2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800f3f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	2201      	movs	r2, #1
 800f3f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f402:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f406:	4618      	mov	r0, r3
 800f408:	3730      	adds	r7, #48	; 0x30
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}
	...

0800f410 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b088      	sub	sp, #32
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	685b      	ldr	r3, [r3, #4]
 800f41e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	689b      	ldr	r3, [r3, #8]
 800f426:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f428:	69bb      	ldr	r3, [r7, #24]
 800f42a:	099b      	lsrs	r3, r3, #6
 800f42c:	f003 0301 	and.w	r3, r3, #1
 800f430:	2b00      	cmp	r3, #0
 800f432:	d10f      	bne.n	800f454 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f434:	69bb      	ldr	r3, [r7, #24]
 800f436:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d00a      	beq.n	800f454 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f43e:	69fb      	ldr	r3, [r7, #28]
 800f440:	099b      	lsrs	r3, r3, #6
 800f442:	f003 0301 	and.w	r3, r3, #1
 800f446:	2b00      	cmp	r3, #0
 800f448:	d004      	beq.n	800f454 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	4798      	blx	r3
    return;
 800f452:	e0d7      	b.n	800f604 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800f454:	69bb      	ldr	r3, [r7, #24]
 800f456:	085b      	lsrs	r3, r3, #1
 800f458:	f003 0301 	and.w	r3, r3, #1
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d00a      	beq.n	800f476 <HAL_SPI_IRQHandler+0x66>
 800f460:	69fb      	ldr	r3, [r7, #28]
 800f462:	09db      	lsrs	r3, r3, #7
 800f464:	f003 0301 	and.w	r3, r3, #1
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d004      	beq.n	800f476 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	4798      	blx	r3
    return;
 800f474:	e0c6      	b.n	800f604 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f476:	69bb      	ldr	r3, [r7, #24]
 800f478:	095b      	lsrs	r3, r3, #5
 800f47a:	f003 0301 	and.w	r3, r3, #1
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d10c      	bne.n	800f49c <HAL_SPI_IRQHandler+0x8c>
 800f482:	69bb      	ldr	r3, [r7, #24]
 800f484:	099b      	lsrs	r3, r3, #6
 800f486:	f003 0301 	and.w	r3, r3, #1
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d106      	bne.n	800f49c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f48e:	69bb      	ldr	r3, [r7, #24]
 800f490:	0a1b      	lsrs	r3, r3, #8
 800f492:	f003 0301 	and.w	r3, r3, #1
 800f496:	2b00      	cmp	r3, #0
 800f498:	f000 80b4 	beq.w	800f604 <HAL_SPI_IRQHandler+0x1f4>
 800f49c:	69fb      	ldr	r3, [r7, #28]
 800f49e:	095b      	lsrs	r3, r3, #5
 800f4a0:	f003 0301 	and.w	r3, r3, #1
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	f000 80ad 	beq.w	800f604 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f4aa:	69bb      	ldr	r3, [r7, #24]
 800f4ac:	099b      	lsrs	r3, r3, #6
 800f4ae:	f003 0301 	and.w	r3, r3, #1
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d023      	beq.n	800f4fe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f4bc:	b2db      	uxtb	r3, r3
 800f4be:	2b03      	cmp	r3, #3
 800f4c0:	d011      	beq.n	800f4e6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4c6:	f043 0204 	orr.w	r2, r3, #4
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	617b      	str	r3, [r7, #20]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	68db      	ldr	r3, [r3, #12]
 800f4d8:	617b      	str	r3, [r7, #20]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	689b      	ldr	r3, [r3, #8]
 800f4e0:	617b      	str	r3, [r7, #20]
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	e00b      	b.n	800f4fe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	613b      	str	r3, [r7, #16]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	68db      	ldr	r3, [r3, #12]
 800f4f0:	613b      	str	r3, [r7, #16]
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	689b      	ldr	r3, [r3, #8]
 800f4f8:	613b      	str	r3, [r7, #16]
 800f4fa:	693b      	ldr	r3, [r7, #16]
        return;
 800f4fc:	e082      	b.n	800f604 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f4fe:	69bb      	ldr	r3, [r7, #24]
 800f500:	095b      	lsrs	r3, r3, #5
 800f502:	f003 0301 	and.w	r3, r3, #1
 800f506:	2b00      	cmp	r3, #0
 800f508:	d014      	beq.n	800f534 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f50e:	f043 0201 	orr.w	r2, r3, #1
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f516:	2300      	movs	r3, #0
 800f518:	60fb      	str	r3, [r7, #12]
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	689b      	ldr	r3, [r3, #8]
 800f520:	60fb      	str	r3, [r7, #12]
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f530:	601a      	str	r2, [r3, #0]
 800f532:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800f534:	69bb      	ldr	r3, [r7, #24]
 800f536:	0a1b      	lsrs	r3, r3, #8
 800f538:	f003 0301 	and.w	r3, r3, #1
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d00c      	beq.n	800f55a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f544:	f043 0208 	orr.w	r2, r3, #8
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f54c:	2300      	movs	r3, #0
 800f54e:	60bb      	str	r3, [r7, #8]
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	689b      	ldr	r3, [r3, #8]
 800f556:	60bb      	str	r3, [r7, #8]
 800f558:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d04f      	beq.n	800f602 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	685a      	ldr	r2, [r3, #4]
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f570:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2201      	movs	r2, #1
 800f576:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f57a:	69fb      	ldr	r3, [r7, #28]
 800f57c:	f003 0302 	and.w	r3, r3, #2
 800f580:	2b00      	cmp	r3, #0
 800f582:	d104      	bne.n	800f58e <HAL_SPI_IRQHandler+0x17e>
 800f584:	69fb      	ldr	r3, [r7, #28]
 800f586:	f003 0301 	and.w	r3, r3, #1
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d034      	beq.n	800f5f8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	685a      	ldr	r2, [r3, #4]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	f022 0203 	bic.w	r2, r2, #3
 800f59c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d011      	beq.n	800f5ca <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5aa:	4a18      	ldr	r2, [pc, #96]	; (800f60c <HAL_SPI_IRQHandler+0x1fc>)
 800f5ac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7fb fb32 	bl	800ac1c <HAL_DMA_Abort_IT>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d005      	beq.n	800f5ca <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d016      	beq.n	800f600 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f5d6:	4a0d      	ldr	r2, [pc, #52]	; (800f60c <HAL_SPI_IRQHandler+0x1fc>)
 800f5d8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f7fb fb1c 	bl	800ac1c <HAL_DMA_Abort_IT>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d00a      	beq.n	800f600 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800f5f6:	e003      	b.n	800f600 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f000 f809 	bl	800f610 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f5fe:	e000      	b.n	800f602 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800f600:	bf00      	nop
    return;
 800f602:	bf00      	nop
  }
}
 800f604:	3720      	adds	r7, #32
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
 800f60a:	bf00      	nop
 800f60c:	0800f625 	.word	0x0800f625

0800f610 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f610:	b480      	push	{r7}
 800f612:	b083      	sub	sp, #12
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f618:	bf00      	nop
 800f61a:	370c      	adds	r7, #12
 800f61c:	46bd      	mov	sp, r7
 800f61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f622:	4770      	bx	lr

0800f624 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b084      	sub	sp, #16
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f630:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	2200      	movs	r2, #0
 800f636:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	2200      	movs	r2, #0
 800f63c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f63e:	68f8      	ldr	r0, [r7, #12]
 800f640:	f7ff ffe6 	bl	800f610 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f644:	bf00      	nop
 800f646:	3710      	adds	r7, #16
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}

0800f64c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b088      	sub	sp, #32
 800f650:	af00      	add	r7, sp, #0
 800f652:	60f8      	str	r0, [r7, #12]
 800f654:	60b9      	str	r1, [r7, #8]
 800f656:	603b      	str	r3, [r7, #0]
 800f658:	4613      	mov	r3, r2
 800f65a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f65c:	f7fa ff98 	bl	800a590 <HAL_GetTick>
 800f660:	4602      	mov	r2, r0
 800f662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f664:	1a9b      	subs	r3, r3, r2
 800f666:	683a      	ldr	r2, [r7, #0]
 800f668:	4413      	add	r3, r2
 800f66a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f66c:	f7fa ff90 	bl	800a590 <HAL_GetTick>
 800f670:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f672:	4b39      	ldr	r3, [pc, #228]	; (800f758 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	015b      	lsls	r3, r3, #5
 800f678:	0d1b      	lsrs	r3, r3, #20
 800f67a:	69fa      	ldr	r2, [r7, #28]
 800f67c:	fb02 f303 	mul.w	r3, r2, r3
 800f680:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f682:	e054      	b.n	800f72e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f68a:	d050      	beq.n	800f72e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f68c:	f7fa ff80 	bl	800a590 <HAL_GetTick>
 800f690:	4602      	mov	r2, r0
 800f692:	69bb      	ldr	r3, [r7, #24]
 800f694:	1ad3      	subs	r3, r2, r3
 800f696:	69fa      	ldr	r2, [r7, #28]
 800f698:	429a      	cmp	r2, r3
 800f69a:	d902      	bls.n	800f6a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800f69c:	69fb      	ldr	r3, [r7, #28]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d13d      	bne.n	800f71e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	685a      	ldr	r2, [r3, #4]
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f6b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	685b      	ldr	r3, [r3, #4]
 800f6b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f6ba:	d111      	bne.n	800f6e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	689b      	ldr	r3, [r3, #8]
 800f6c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6c4:	d004      	beq.n	800f6d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	689b      	ldr	r3, [r3, #8]
 800f6ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f6ce:	d107      	bne.n	800f6e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	681a      	ldr	r2, [r3, #0]
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f6de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f6e8:	d10f      	bne.n	800f70a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	681a      	ldr	r2, [r3, #0]
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f6f8:	601a      	str	r2, [r3, #0]
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	681a      	ldr	r2, [r3, #0]
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f708:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	2201      	movs	r2, #1
 800f70e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	2200      	movs	r2, #0
 800f716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f71a:	2303      	movs	r3, #3
 800f71c:	e017      	b.n	800f74e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d101      	bne.n	800f728 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f724:	2300      	movs	r3, #0
 800f726:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	3b01      	subs	r3, #1
 800f72c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	689a      	ldr	r2, [r3, #8]
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	4013      	ands	r3, r2
 800f738:	68ba      	ldr	r2, [r7, #8]
 800f73a:	429a      	cmp	r2, r3
 800f73c:	bf0c      	ite	eq
 800f73e:	2301      	moveq	r3, #1
 800f740:	2300      	movne	r3, #0
 800f742:	b2db      	uxtb	r3, r3
 800f744:	461a      	mov	r2, r3
 800f746:	79fb      	ldrb	r3, [r7, #7]
 800f748:	429a      	cmp	r2, r3
 800f74a:	d19b      	bne.n	800f684 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f74c:	2300      	movs	r3, #0
}
 800f74e:	4618      	mov	r0, r3
 800f750:	3720      	adds	r7, #32
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
 800f756:	bf00      	nop
 800f758:	20000034 	.word	0x20000034

0800f75c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b088      	sub	sp, #32
 800f760:	af02      	add	r7, sp, #8
 800f762:	60f8      	str	r0, [r7, #12]
 800f764:	60b9      	str	r1, [r7, #8]
 800f766:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f768:	4b1b      	ldr	r3, [pc, #108]	; (800f7d8 <SPI_EndRxTxTransaction+0x7c>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	4a1b      	ldr	r2, [pc, #108]	; (800f7dc <SPI_EndRxTxTransaction+0x80>)
 800f76e:	fba2 2303 	umull	r2, r3, r2, r3
 800f772:	0d5b      	lsrs	r3, r3, #21
 800f774:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f778:	fb02 f303 	mul.w	r3, r2, r3
 800f77c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	685b      	ldr	r3, [r3, #4]
 800f782:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f786:	d112      	bne.n	800f7ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	9300      	str	r3, [sp, #0]
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	2200      	movs	r2, #0
 800f790:	2180      	movs	r1, #128	; 0x80
 800f792:	68f8      	ldr	r0, [r7, #12]
 800f794:	f7ff ff5a 	bl	800f64c <SPI_WaitFlagStateUntilTimeout>
 800f798:	4603      	mov	r3, r0
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d016      	beq.n	800f7cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7a2:	f043 0220 	orr.w	r2, r3, #32
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f7aa:	2303      	movs	r3, #3
 800f7ac:	e00f      	b.n	800f7ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d00a      	beq.n	800f7ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	3b01      	subs	r3, #1
 800f7b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	689b      	ldr	r3, [r3, #8]
 800f7c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7c4:	2b80      	cmp	r3, #128	; 0x80
 800f7c6:	d0f2      	beq.n	800f7ae <SPI_EndRxTxTransaction+0x52>
 800f7c8:	e000      	b.n	800f7cc <SPI_EndRxTxTransaction+0x70>
        break;
 800f7ca:	bf00      	nop
  }

  return HAL_OK;
 800f7cc:	2300      	movs	r3, #0
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3718      	adds	r7, #24
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
 800f7d6:	bf00      	nop
 800f7d8:	20000034 	.word	0x20000034
 800f7dc:	165e9f81 	.word	0x165e9f81

0800f7e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b082      	sub	sp, #8
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d101      	bne.n	800f7f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	e041      	b.n	800f876 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f7f8:	b2db      	uxtb	r3, r3
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d106      	bne.n	800f80c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2200      	movs	r2, #0
 800f802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f7fa fa84 	bl	8009d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2202      	movs	r2, #2
 800f810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681a      	ldr	r2, [r3, #0]
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	3304      	adds	r3, #4
 800f81c:	4619      	mov	r1, r3
 800f81e:	4610      	mov	r0, r2
 800f820:	f000 fa96 	bl	800fd50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2201      	movs	r2, #1
 800f828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2201      	movs	r2, #1
 800f830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2201      	movs	r2, #1
 800f838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2201      	movs	r2, #1
 800f840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2201      	movs	r2, #1
 800f848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2201      	movs	r2, #1
 800f850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2201      	movs	r2, #1
 800f858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2201      	movs	r2, #1
 800f860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2201      	movs	r2, #1
 800f868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2201      	movs	r2, #1
 800f870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f874:	2300      	movs	r3, #0
}
 800f876:	4618      	mov	r0, r3
 800f878:	3708      	adds	r7, #8
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
	...

0800f880 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f880:	b480      	push	{r7}
 800f882:	b085      	sub	sp, #20
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	2b01      	cmp	r3, #1
 800f892:	d001      	beq.n	800f898 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f894:	2301      	movs	r3, #1
 800f896:	e044      	b.n	800f922 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2202      	movs	r2, #2
 800f89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	68da      	ldr	r2, [r3, #12]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	f042 0201 	orr.w	r2, r2, #1
 800f8ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	4a1e      	ldr	r2, [pc, #120]	; (800f930 <HAL_TIM_Base_Start_IT+0xb0>)
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	d018      	beq.n	800f8ec <HAL_TIM_Base_Start_IT+0x6c>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8c2:	d013      	beq.n	800f8ec <HAL_TIM_Base_Start_IT+0x6c>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	4a1a      	ldr	r2, [pc, #104]	; (800f934 <HAL_TIM_Base_Start_IT+0xb4>)
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	d00e      	beq.n	800f8ec <HAL_TIM_Base_Start_IT+0x6c>
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	4a19      	ldr	r2, [pc, #100]	; (800f938 <HAL_TIM_Base_Start_IT+0xb8>)
 800f8d4:	4293      	cmp	r3, r2
 800f8d6:	d009      	beq.n	800f8ec <HAL_TIM_Base_Start_IT+0x6c>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	4a17      	ldr	r2, [pc, #92]	; (800f93c <HAL_TIM_Base_Start_IT+0xbc>)
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	d004      	beq.n	800f8ec <HAL_TIM_Base_Start_IT+0x6c>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	4a16      	ldr	r2, [pc, #88]	; (800f940 <HAL_TIM_Base_Start_IT+0xc0>)
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	d111      	bne.n	800f910 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	689b      	ldr	r3, [r3, #8]
 800f8f2:	f003 0307 	and.w	r3, r3, #7
 800f8f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	2b06      	cmp	r3, #6
 800f8fc:	d010      	beq.n	800f920 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	681a      	ldr	r2, [r3, #0]
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	f042 0201 	orr.w	r2, r2, #1
 800f90c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f90e:	e007      	b.n	800f920 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	681a      	ldr	r2, [r3, #0]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	f042 0201 	orr.w	r2, r2, #1
 800f91e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f920:	2300      	movs	r3, #0
}
 800f922:	4618      	mov	r0, r3
 800f924:	3714      	adds	r7, #20
 800f926:	46bd      	mov	sp, r7
 800f928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92c:	4770      	bx	lr
 800f92e:	bf00      	nop
 800f930:	40010000 	.word	0x40010000
 800f934:	40000400 	.word	0x40000400
 800f938:	40000800 	.word	0x40000800
 800f93c:	40000c00 	.word	0x40000c00
 800f940:	40014000 	.word	0x40014000

0800f944 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f944:	b480      	push	{r7}
 800f946:	b083      	sub	sp, #12
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	68da      	ldr	r2, [r3, #12]
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	f022 0201 	bic.w	r2, r2, #1
 800f95a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	6a1a      	ldr	r2, [r3, #32]
 800f962:	f241 1311 	movw	r3, #4369	; 0x1111
 800f966:	4013      	ands	r3, r2
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d10f      	bne.n	800f98c <HAL_TIM_Base_Stop_IT+0x48>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	6a1a      	ldr	r2, [r3, #32]
 800f972:	f240 4344 	movw	r3, #1092	; 0x444
 800f976:	4013      	ands	r3, r2
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d107      	bne.n	800f98c <HAL_TIM_Base_Stop_IT+0x48>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	681a      	ldr	r2, [r3, #0]
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	f022 0201 	bic.w	r2, r2, #1
 800f98a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2201      	movs	r2, #1
 800f990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800f994:	2300      	movs	r3, #0
}
 800f996:	4618      	mov	r0, r3
 800f998:	370c      	adds	r7, #12
 800f99a:	46bd      	mov	sp, r7
 800f99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a0:	4770      	bx	lr

0800f9a2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f9a2:	b580      	push	{r7, lr}
 800f9a4:	b086      	sub	sp, #24
 800f9a6:	af00      	add	r7, sp, #0
 800f9a8:	6078      	str	r0, [r7, #4]
 800f9aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d101      	bne.n	800f9b6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f9b2:	2301      	movs	r3, #1
 800f9b4:	e097      	b.n	800fae6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f9bc:	b2db      	uxtb	r3, r3
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d106      	bne.n	800f9d0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f7fa f95c 	bl	8009c88 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2202      	movs	r2, #2
 800f9d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	689b      	ldr	r3, [r3, #8]
 800f9de:	687a      	ldr	r2, [r7, #4]
 800f9e0:	6812      	ldr	r2, [r2, #0]
 800f9e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f9e6:	f023 0307 	bic.w	r3, r3, #7
 800f9ea:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681a      	ldr	r2, [r3, #0]
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	3304      	adds	r3, #4
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	4610      	mov	r0, r2
 800f9f8:	f000 f9aa 	bl	800fd50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	689b      	ldr	r3, [r3, #8]
 800fa02:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	699b      	ldr	r3, [r3, #24]
 800fa0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	6a1b      	ldr	r3, [r3, #32]
 800fa12:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	697a      	ldr	r2, [r7, #20]
 800fa1a:	4313      	orrs	r3, r2
 800fa1c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800fa1e:	693b      	ldr	r3, [r7, #16]
 800fa20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa24:	f023 0303 	bic.w	r3, r3, #3
 800fa28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	689a      	ldr	r2, [r3, #8]
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	699b      	ldr	r3, [r3, #24]
 800fa32:	021b      	lsls	r3, r3, #8
 800fa34:	4313      	orrs	r3, r2
 800fa36:	693a      	ldr	r2, [r7, #16]
 800fa38:	4313      	orrs	r3, r2
 800fa3a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800fa42:	f023 030c 	bic.w	r3, r3, #12
 800fa46:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800fa48:	693b      	ldr	r3, [r7, #16]
 800fa4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fa4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fa52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	68da      	ldr	r2, [r3, #12]
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	69db      	ldr	r3, [r3, #28]
 800fa5c:	021b      	lsls	r3, r3, #8
 800fa5e:	4313      	orrs	r3, r2
 800fa60:	693a      	ldr	r2, [r7, #16]
 800fa62:	4313      	orrs	r3, r2
 800fa64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	691b      	ldr	r3, [r3, #16]
 800fa6a:	011a      	lsls	r2, r3, #4
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	6a1b      	ldr	r3, [r3, #32]
 800fa70:	031b      	lsls	r3, r3, #12
 800fa72:	4313      	orrs	r3, r2
 800fa74:	693a      	ldr	r2, [r7, #16]
 800fa76:	4313      	orrs	r3, r2
 800fa78:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800fa80:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800fa88:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	685a      	ldr	r2, [r3, #4]
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	695b      	ldr	r3, [r3, #20]
 800fa92:	011b      	lsls	r3, r3, #4
 800fa94:	4313      	orrs	r3, r2
 800fa96:	68fa      	ldr	r2, [r7, #12]
 800fa98:	4313      	orrs	r3, r2
 800fa9a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	697a      	ldr	r2, [r7, #20]
 800faa2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	693a      	ldr	r2, [r7, #16]
 800faaa:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	68fa      	ldr	r2, [r7, #12]
 800fab2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2201      	movs	r2, #1
 800fab8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2201      	movs	r2, #1
 800fac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2201      	movs	r2, #1
 800fac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2201      	movs	r2, #1
 800fad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2201      	movs	r2, #1
 800fad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2201      	movs	r2, #1
 800fae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fae4:	2300      	movs	r3, #0
}
 800fae6:	4618      	mov	r0, r3
 800fae8:	3718      	adds	r7, #24
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}

0800faee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800faee:	b580      	push	{r7, lr}
 800faf0:	b082      	sub	sp, #8
 800faf2:	af00      	add	r7, sp, #0
 800faf4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	691b      	ldr	r3, [r3, #16]
 800fafc:	f003 0302 	and.w	r3, r3, #2
 800fb00:	2b02      	cmp	r3, #2
 800fb02:	d122      	bne.n	800fb4a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	68db      	ldr	r3, [r3, #12]
 800fb0a:	f003 0302 	and.w	r3, r3, #2
 800fb0e:	2b02      	cmp	r3, #2
 800fb10:	d11b      	bne.n	800fb4a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	f06f 0202 	mvn.w	r2, #2
 800fb1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2201      	movs	r2, #1
 800fb20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	699b      	ldr	r3, [r3, #24]
 800fb28:	f003 0303 	and.w	r3, r3, #3
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d003      	beq.n	800fb38 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f000 f8ee 	bl	800fd12 <HAL_TIM_IC_CaptureCallback>
 800fb36:	e005      	b.n	800fb44 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f000 f8e0 	bl	800fcfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f000 f8f1 	bl	800fd26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2200      	movs	r2, #0
 800fb48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	691b      	ldr	r3, [r3, #16]
 800fb50:	f003 0304 	and.w	r3, r3, #4
 800fb54:	2b04      	cmp	r3, #4
 800fb56:	d122      	bne.n	800fb9e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	68db      	ldr	r3, [r3, #12]
 800fb5e:	f003 0304 	and.w	r3, r3, #4
 800fb62:	2b04      	cmp	r3, #4
 800fb64:	d11b      	bne.n	800fb9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	f06f 0204 	mvn.w	r2, #4
 800fb6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2202      	movs	r2, #2
 800fb74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	699b      	ldr	r3, [r3, #24]
 800fb7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d003      	beq.n	800fb8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f000 f8c4 	bl	800fd12 <HAL_TIM_IC_CaptureCallback>
 800fb8a:	e005      	b.n	800fb98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f000 f8b6 	bl	800fcfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f000 f8c7 	bl	800fd26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	691b      	ldr	r3, [r3, #16]
 800fba4:	f003 0308 	and.w	r3, r3, #8
 800fba8:	2b08      	cmp	r3, #8
 800fbaa:	d122      	bne.n	800fbf2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	68db      	ldr	r3, [r3, #12]
 800fbb2:	f003 0308 	and.w	r3, r3, #8
 800fbb6:	2b08      	cmp	r3, #8
 800fbb8:	d11b      	bne.n	800fbf2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	f06f 0208 	mvn.w	r2, #8
 800fbc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2204      	movs	r2, #4
 800fbc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	69db      	ldr	r3, [r3, #28]
 800fbd0:	f003 0303 	and.w	r3, r3, #3
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d003      	beq.n	800fbe0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f000 f89a 	bl	800fd12 <HAL_TIM_IC_CaptureCallback>
 800fbde:	e005      	b.n	800fbec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f000 f88c 	bl	800fcfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fbe6:	6878      	ldr	r0, [r7, #4]
 800fbe8:	f000 f89d 	bl	800fd26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2200      	movs	r2, #0
 800fbf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	691b      	ldr	r3, [r3, #16]
 800fbf8:	f003 0310 	and.w	r3, r3, #16
 800fbfc:	2b10      	cmp	r3, #16
 800fbfe:	d122      	bne.n	800fc46 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	68db      	ldr	r3, [r3, #12]
 800fc06:	f003 0310 	and.w	r3, r3, #16
 800fc0a:	2b10      	cmp	r3, #16
 800fc0c:	d11b      	bne.n	800fc46 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	f06f 0210 	mvn.w	r2, #16
 800fc16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	2208      	movs	r2, #8
 800fc1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	69db      	ldr	r3, [r3, #28]
 800fc24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d003      	beq.n	800fc34 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f000 f870 	bl	800fd12 <HAL_TIM_IC_CaptureCallback>
 800fc32:	e005      	b.n	800fc40 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f000 f862 	bl	800fcfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f000 f873 	bl	800fd26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2200      	movs	r2, #0
 800fc44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	691b      	ldr	r3, [r3, #16]
 800fc4c:	f003 0301 	and.w	r3, r3, #1
 800fc50:	2b01      	cmp	r3, #1
 800fc52:	d10e      	bne.n	800fc72 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	68db      	ldr	r3, [r3, #12]
 800fc5a:	f003 0301 	and.w	r3, r3, #1
 800fc5e:	2b01      	cmp	r3, #1
 800fc60:	d107      	bne.n	800fc72 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	f06f 0201 	mvn.w	r2, #1
 800fc6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f7f6 f855 	bl	8005d1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	691b      	ldr	r3, [r3, #16]
 800fc78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc7c:	2b80      	cmp	r3, #128	; 0x80
 800fc7e:	d10e      	bne.n	800fc9e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	68db      	ldr	r3, [r3, #12]
 800fc86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc8a:	2b80      	cmp	r3, #128	; 0x80
 800fc8c:	d107      	bne.n	800fc9e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fc96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	f000 f951 	bl	800ff40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	691b      	ldr	r3, [r3, #16]
 800fca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fca8:	2b40      	cmp	r3, #64	; 0x40
 800fcaa:	d10e      	bne.n	800fcca <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	68db      	ldr	r3, [r3, #12]
 800fcb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcb6:	2b40      	cmp	r3, #64	; 0x40
 800fcb8:	d107      	bne.n	800fcca <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fcc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f000 f838 	bl	800fd3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	691b      	ldr	r3, [r3, #16]
 800fcd0:	f003 0320 	and.w	r3, r3, #32
 800fcd4:	2b20      	cmp	r3, #32
 800fcd6:	d10e      	bne.n	800fcf6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	68db      	ldr	r3, [r3, #12]
 800fcde:	f003 0320 	and.w	r3, r3, #32
 800fce2:	2b20      	cmp	r3, #32
 800fce4:	d107      	bne.n	800fcf6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	f06f 0220 	mvn.w	r2, #32
 800fcee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f000 f91b 	bl	800ff2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fcf6:	bf00      	nop
 800fcf8:	3708      	adds	r7, #8
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}

0800fcfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fcfe:	b480      	push	{r7}
 800fd00:	b083      	sub	sp, #12
 800fd02:	af00      	add	r7, sp, #0
 800fd04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fd06:	bf00      	nop
 800fd08:	370c      	adds	r7, #12
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd10:	4770      	bx	lr

0800fd12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fd12:	b480      	push	{r7}
 800fd14:	b083      	sub	sp, #12
 800fd16:	af00      	add	r7, sp, #0
 800fd18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fd1a:	bf00      	nop
 800fd1c:	370c      	adds	r7, #12
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd24:	4770      	bx	lr

0800fd26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fd26:	b480      	push	{r7}
 800fd28:	b083      	sub	sp, #12
 800fd2a:	af00      	add	r7, sp, #0
 800fd2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fd2e:	bf00      	nop
 800fd30:	370c      	adds	r7, #12
 800fd32:	46bd      	mov	sp, r7
 800fd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd38:	4770      	bx	lr

0800fd3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fd3a:	b480      	push	{r7}
 800fd3c:	b083      	sub	sp, #12
 800fd3e:	af00      	add	r7, sp, #0
 800fd40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fd42:	bf00      	nop
 800fd44:	370c      	adds	r7, #12
 800fd46:	46bd      	mov	sp, r7
 800fd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4c:	4770      	bx	lr
	...

0800fd50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b085      	sub	sp, #20
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	4a34      	ldr	r2, [pc, #208]	; (800fe34 <TIM_Base_SetConfig+0xe4>)
 800fd64:	4293      	cmp	r3, r2
 800fd66:	d00f      	beq.n	800fd88 <TIM_Base_SetConfig+0x38>
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd6e:	d00b      	beq.n	800fd88 <TIM_Base_SetConfig+0x38>
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	4a31      	ldr	r2, [pc, #196]	; (800fe38 <TIM_Base_SetConfig+0xe8>)
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d007      	beq.n	800fd88 <TIM_Base_SetConfig+0x38>
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	4a30      	ldr	r2, [pc, #192]	; (800fe3c <TIM_Base_SetConfig+0xec>)
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	d003      	beq.n	800fd88 <TIM_Base_SetConfig+0x38>
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	4a2f      	ldr	r2, [pc, #188]	; (800fe40 <TIM_Base_SetConfig+0xf0>)
 800fd84:	4293      	cmp	r3, r2
 800fd86:	d108      	bne.n	800fd9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	685b      	ldr	r3, [r3, #4]
 800fd94:	68fa      	ldr	r2, [r7, #12]
 800fd96:	4313      	orrs	r3, r2
 800fd98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	4a25      	ldr	r2, [pc, #148]	; (800fe34 <TIM_Base_SetConfig+0xe4>)
 800fd9e:	4293      	cmp	r3, r2
 800fda0:	d01b      	beq.n	800fdda <TIM_Base_SetConfig+0x8a>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fda8:	d017      	beq.n	800fdda <TIM_Base_SetConfig+0x8a>
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	4a22      	ldr	r2, [pc, #136]	; (800fe38 <TIM_Base_SetConfig+0xe8>)
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	d013      	beq.n	800fdda <TIM_Base_SetConfig+0x8a>
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	4a21      	ldr	r2, [pc, #132]	; (800fe3c <TIM_Base_SetConfig+0xec>)
 800fdb6:	4293      	cmp	r3, r2
 800fdb8:	d00f      	beq.n	800fdda <TIM_Base_SetConfig+0x8a>
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	4a20      	ldr	r2, [pc, #128]	; (800fe40 <TIM_Base_SetConfig+0xf0>)
 800fdbe:	4293      	cmp	r3, r2
 800fdc0:	d00b      	beq.n	800fdda <TIM_Base_SetConfig+0x8a>
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	4a1f      	ldr	r2, [pc, #124]	; (800fe44 <TIM_Base_SetConfig+0xf4>)
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d007      	beq.n	800fdda <TIM_Base_SetConfig+0x8a>
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	4a1e      	ldr	r2, [pc, #120]	; (800fe48 <TIM_Base_SetConfig+0xf8>)
 800fdce:	4293      	cmp	r3, r2
 800fdd0:	d003      	beq.n	800fdda <TIM_Base_SetConfig+0x8a>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	4a1d      	ldr	r2, [pc, #116]	; (800fe4c <TIM_Base_SetConfig+0xfc>)
 800fdd6:	4293      	cmp	r3, r2
 800fdd8:	d108      	bne.n	800fdec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fde0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	68db      	ldr	r3, [r3, #12]
 800fde6:	68fa      	ldr	r2, [r7, #12]
 800fde8:	4313      	orrs	r3, r2
 800fdea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	695b      	ldr	r3, [r3, #20]
 800fdf6:	4313      	orrs	r3, r2
 800fdf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	68fa      	ldr	r2, [r7, #12]
 800fdfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	689a      	ldr	r2, [r3, #8]
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	681a      	ldr	r2, [r3, #0]
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	4a08      	ldr	r2, [pc, #32]	; (800fe34 <TIM_Base_SetConfig+0xe4>)
 800fe14:	4293      	cmp	r3, r2
 800fe16:	d103      	bne.n	800fe20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	691a      	ldr	r2, [r3, #16]
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2201      	movs	r2, #1
 800fe24:	615a      	str	r2, [r3, #20]
}
 800fe26:	bf00      	nop
 800fe28:	3714      	adds	r7, #20
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe30:	4770      	bx	lr
 800fe32:	bf00      	nop
 800fe34:	40010000 	.word	0x40010000
 800fe38:	40000400 	.word	0x40000400
 800fe3c:	40000800 	.word	0x40000800
 800fe40:	40000c00 	.word	0x40000c00
 800fe44:	40014000 	.word	0x40014000
 800fe48:	40014400 	.word	0x40014400
 800fe4c:	40014800 	.word	0x40014800

0800fe50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fe50:	b480      	push	{r7}
 800fe52:	b085      	sub	sp, #20
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
 800fe58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe60:	2b01      	cmp	r3, #1
 800fe62:	d101      	bne.n	800fe68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fe64:	2302      	movs	r3, #2
 800fe66:	e050      	b.n	800ff0a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2201      	movs	r2, #1
 800fe6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2202      	movs	r2, #2
 800fe74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	685b      	ldr	r3, [r3, #4]
 800fe7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	689b      	ldr	r3, [r3, #8]
 800fe86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	68fa      	ldr	r2, [r7, #12]
 800fe96:	4313      	orrs	r3, r2
 800fe98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	68fa      	ldr	r2, [r7, #12]
 800fea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	4a1c      	ldr	r2, [pc, #112]	; (800ff18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800fea8:	4293      	cmp	r3, r2
 800feaa:	d018      	beq.n	800fede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800feb4:	d013      	beq.n	800fede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	4a18      	ldr	r2, [pc, #96]	; (800ff1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800febc:	4293      	cmp	r3, r2
 800febe:	d00e      	beq.n	800fede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	4a16      	ldr	r2, [pc, #88]	; (800ff20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800fec6:	4293      	cmp	r3, r2
 800fec8:	d009      	beq.n	800fede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	4a15      	ldr	r2, [pc, #84]	; (800ff24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800fed0:	4293      	cmp	r3, r2
 800fed2:	d004      	beq.n	800fede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	4a13      	ldr	r2, [pc, #76]	; (800ff28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800feda:	4293      	cmp	r3, r2
 800fedc:	d10c      	bne.n	800fef8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fee4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	685b      	ldr	r3, [r3, #4]
 800feea:	68ba      	ldr	r2, [r7, #8]
 800feec:	4313      	orrs	r3, r2
 800feee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	68ba      	ldr	r2, [r7, #8]
 800fef6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	2201      	movs	r2, #1
 800fefc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2200      	movs	r2, #0
 800ff04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ff08:	2300      	movs	r3, #0
}
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	3714      	adds	r7, #20
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff14:	4770      	bx	lr
 800ff16:	bf00      	nop
 800ff18:	40010000 	.word	0x40010000
 800ff1c:	40000400 	.word	0x40000400
 800ff20:	40000800 	.word	0x40000800
 800ff24:	40000c00 	.word	0x40000c00
 800ff28:	40014000 	.word	0x40014000

0800ff2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b083      	sub	sp, #12
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ff34:	bf00      	nop
 800ff36:	370c      	adds	r7, #12
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr

0800ff40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ff48:	bf00      	nop
 800ff4a:	370c      	adds	r7, #12
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff52:	4770      	bx	lr

0800ff54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b082      	sub	sp, #8
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d101      	bne.n	800ff66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff62:	2301      	movs	r3, #1
 800ff64:	e03f      	b.n	800ffe6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ff6c:	b2db      	uxtb	r3, r3
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d106      	bne.n	800ff80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2200      	movs	r2, #0
 800ff76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f7fa f906 	bl	800a18c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2224      	movs	r2, #36	; 0x24
 800ff84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	68da      	ldr	r2, [r3, #12]
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ff96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f000 ff53 	bl	8010e44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	691a      	ldr	r2, [r3, #16]
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ffac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	695a      	ldr	r2, [r3, #20]
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ffbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	68da      	ldr	r2, [r3, #12]
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ffcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2220      	movs	r2, #32
 800ffd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2220      	movs	r2, #32
 800ffe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ffe4:	2300      	movs	r3, #0
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3708      	adds	r7, #8
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
	...

0800fff0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b08c      	sub	sp, #48	; 0x30
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	60f8      	str	r0, [r7, #12]
 800fff8:	60b9      	str	r1, [r7, #8]
 800fffa:	4613      	mov	r3, r2
 800fffc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010004:	b2db      	uxtb	r3, r3
 8010006:	2b20      	cmp	r3, #32
 8010008:	d165      	bne.n	80100d6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d002      	beq.n	8010016 <HAL_UART_Transmit_DMA+0x26>
 8010010:	88fb      	ldrh	r3, [r7, #6]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d101      	bne.n	801001a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8010016:	2301      	movs	r3, #1
 8010018:	e05e      	b.n	80100d8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010020:	2b01      	cmp	r3, #1
 8010022:	d101      	bne.n	8010028 <HAL_UART_Transmit_DMA+0x38>
 8010024:	2302      	movs	r3, #2
 8010026:	e057      	b.n	80100d8 <HAL_UART_Transmit_DMA+0xe8>
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	2201      	movs	r2, #1
 801002c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8010030:	68ba      	ldr	r2, [r7, #8]
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	88fa      	ldrh	r2, [r7, #6]
 801003a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	88fa      	ldrh	r2, [r7, #6]
 8010040:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2200      	movs	r2, #0
 8010046:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	2221      	movs	r2, #33	; 0x21
 801004c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010054:	4a22      	ldr	r2, [pc, #136]	; (80100e0 <HAL_UART_Transmit_DMA+0xf0>)
 8010056:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801005c:	4a21      	ldr	r2, [pc, #132]	; (80100e4 <HAL_UART_Transmit_DMA+0xf4>)
 801005e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010064:	4a20      	ldr	r2, [pc, #128]	; (80100e8 <HAL_UART_Transmit_DMA+0xf8>)
 8010066:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801006c:	2200      	movs	r2, #0
 801006e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8010070:	f107 0308 	add.w	r3, r7, #8
 8010074:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801007a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801007c:	6819      	ldr	r1, [r3, #0]
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	3304      	adds	r3, #4
 8010084:	461a      	mov	r2, r3
 8010086:	88fb      	ldrh	r3, [r7, #6]
 8010088:	f7fa fd00 	bl	800aa8c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010094:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	2200      	movs	r2, #0
 801009a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	3314      	adds	r3, #20
 80100a4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100a6:	69bb      	ldr	r3, [r7, #24]
 80100a8:	e853 3f00 	ldrex	r3, [r3]
 80100ac:	617b      	str	r3, [r7, #20]
   return(result);
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	3314      	adds	r3, #20
 80100bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100be:	627a      	str	r2, [r7, #36]	; 0x24
 80100c0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100c2:	6a39      	ldr	r1, [r7, #32]
 80100c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100c6:	e841 2300 	strex	r3, r2, [r1]
 80100ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80100cc:	69fb      	ldr	r3, [r7, #28]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d1e5      	bne.n	801009e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80100d2:	2300      	movs	r3, #0
 80100d4:	e000      	b.n	80100d8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80100d6:	2302      	movs	r3, #2
  }
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3730      	adds	r7, #48	; 0x30
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}
 80100e0:	080106e5 	.word	0x080106e5
 80100e4:	0801077f 	.word	0x0801077f
 80100e8:	080108f7 	.word	0x080108f7

080100ec <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b084      	sub	sp, #16
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	60f8      	str	r0, [r7, #12]
 80100f4:	60b9      	str	r1, [r7, #8]
 80100f6:	4613      	mov	r3, r2
 80100f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010100:	b2db      	uxtb	r3, r3
 8010102:	2b20      	cmp	r3, #32
 8010104:	d11d      	bne.n	8010142 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d002      	beq.n	8010112 <HAL_UART_Receive_DMA+0x26>
 801010c:	88fb      	ldrh	r3, [r7, #6]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d101      	bne.n	8010116 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8010112:	2301      	movs	r3, #1
 8010114:	e016      	b.n	8010144 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801011c:	2b01      	cmp	r3, #1
 801011e:	d101      	bne.n	8010124 <HAL_UART_Receive_DMA+0x38>
 8010120:	2302      	movs	r3, #2
 8010122:	e00f      	b.n	8010144 <HAL_UART_Receive_DMA+0x58>
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	2201      	movs	r2, #1
 8010128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	2200      	movs	r2, #0
 8010130:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010132:	88fb      	ldrh	r3, [r7, #6]
 8010134:	461a      	mov	r2, r3
 8010136:	68b9      	ldr	r1, [r7, #8]
 8010138:	68f8      	ldr	r0, [r7, #12]
 801013a:	f000 fc27 	bl	801098c <UART_Start_Receive_DMA>
 801013e:	4603      	mov	r3, r0
 8010140:	e000      	b.n	8010144 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8010142:	2302      	movs	r3, #2
  }
}
 8010144:	4618      	mov	r0, r3
 8010146:	3710      	adds	r7, #16
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}

0801014c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b0ba      	sub	sp, #232	; 0xe8
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	68db      	ldr	r3, [r3, #12]
 8010164:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	695b      	ldr	r3, [r3, #20]
 801016e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8010172:	2300      	movs	r3, #0
 8010174:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8010178:	2300      	movs	r3, #0
 801017a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801017e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010182:	f003 030f 	and.w	r3, r3, #15
 8010186:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801018a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801018e:	2b00      	cmp	r3, #0
 8010190:	d10f      	bne.n	80101b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010196:	f003 0320 	and.w	r3, r3, #32
 801019a:	2b00      	cmp	r3, #0
 801019c:	d009      	beq.n	80101b2 <HAL_UART_IRQHandler+0x66>
 801019e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80101a2:	f003 0320 	and.w	r3, r3, #32
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d003      	beq.n	80101b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f000 fd8f 	bl	8010cce <UART_Receive_IT>
      return;
 80101b0:	e256      	b.n	8010660 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80101b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	f000 80de 	beq.w	8010378 <HAL_UART_IRQHandler+0x22c>
 80101bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80101c0:	f003 0301 	and.w	r3, r3, #1
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d106      	bne.n	80101d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80101c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80101cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	f000 80d1 	beq.w	8010378 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80101d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80101da:	f003 0301 	and.w	r3, r3, #1
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d00b      	beq.n	80101fa <HAL_UART_IRQHandler+0xae>
 80101e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80101e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d005      	beq.n	80101fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101f2:	f043 0201 	orr.w	r2, r3, #1
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80101fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80101fe:	f003 0304 	and.w	r3, r3, #4
 8010202:	2b00      	cmp	r3, #0
 8010204:	d00b      	beq.n	801021e <HAL_UART_IRQHandler+0xd2>
 8010206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801020a:	f003 0301 	and.w	r3, r3, #1
 801020e:	2b00      	cmp	r3, #0
 8010210:	d005      	beq.n	801021e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010216:	f043 0202 	orr.w	r2, r3, #2
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801021e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010222:	f003 0302 	and.w	r3, r3, #2
 8010226:	2b00      	cmp	r3, #0
 8010228:	d00b      	beq.n	8010242 <HAL_UART_IRQHandler+0xf6>
 801022a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801022e:	f003 0301 	and.w	r3, r3, #1
 8010232:	2b00      	cmp	r3, #0
 8010234:	d005      	beq.n	8010242 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801023a:	f043 0204 	orr.w	r2, r3, #4
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8010242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010246:	f003 0308 	and.w	r3, r3, #8
 801024a:	2b00      	cmp	r3, #0
 801024c:	d011      	beq.n	8010272 <HAL_UART_IRQHandler+0x126>
 801024e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010252:	f003 0320 	and.w	r3, r3, #32
 8010256:	2b00      	cmp	r3, #0
 8010258:	d105      	bne.n	8010266 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801025a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801025e:	f003 0301 	and.w	r3, r3, #1
 8010262:	2b00      	cmp	r3, #0
 8010264:	d005      	beq.n	8010272 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801026a:	f043 0208 	orr.w	r2, r3, #8
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010276:	2b00      	cmp	r3, #0
 8010278:	f000 81ed 	beq.w	8010656 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801027c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010280:	f003 0320 	and.w	r3, r3, #32
 8010284:	2b00      	cmp	r3, #0
 8010286:	d008      	beq.n	801029a <HAL_UART_IRQHandler+0x14e>
 8010288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801028c:	f003 0320 	and.w	r3, r3, #32
 8010290:	2b00      	cmp	r3, #0
 8010292:	d002      	beq.n	801029a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f000 fd1a 	bl	8010cce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	695b      	ldr	r3, [r3, #20]
 80102a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102a4:	2b40      	cmp	r3, #64	; 0x40
 80102a6:	bf0c      	ite	eq
 80102a8:	2301      	moveq	r3, #1
 80102aa:	2300      	movne	r3, #0
 80102ac:	b2db      	uxtb	r3, r3
 80102ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102b6:	f003 0308 	and.w	r3, r3, #8
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d103      	bne.n	80102c6 <HAL_UART_IRQHandler+0x17a>
 80102be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d04f      	beq.n	8010366 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	f000 fc22 	bl	8010b10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	695b      	ldr	r3, [r3, #20]
 80102d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102d6:	2b40      	cmp	r3, #64	; 0x40
 80102d8:	d141      	bne.n	801035e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	3314      	adds	r3, #20
 80102e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80102e8:	e853 3f00 	ldrex	r3, [r3]
 80102ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80102f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80102f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80102f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	3314      	adds	r3, #20
 8010302:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010306:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801030a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801030e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010312:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010316:	e841 2300 	strex	r3, r2, [r1]
 801031a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801031e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010322:	2b00      	cmp	r3, #0
 8010324:	d1d9      	bne.n	80102da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801032a:	2b00      	cmp	r3, #0
 801032c:	d013      	beq.n	8010356 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010332:	4a7d      	ldr	r2, [pc, #500]	; (8010528 <HAL_UART_IRQHandler+0x3dc>)
 8010334:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801033a:	4618      	mov	r0, r3
 801033c:	f7fa fc6e 	bl	800ac1c <HAL_DMA_Abort_IT>
 8010340:	4603      	mov	r3, r0
 8010342:	2b00      	cmp	r3, #0
 8010344:	d016      	beq.n	8010374 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801034a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801034c:	687a      	ldr	r2, [r7, #4]
 801034e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010350:	4610      	mov	r0, r2
 8010352:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010354:	e00e      	b.n	8010374 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f000 f9ae 	bl	80106b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801035c:	e00a      	b.n	8010374 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f000 f9aa 	bl	80106b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010364:	e006      	b.n	8010374 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f000 f9a6 	bl	80106b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2200      	movs	r2, #0
 8010370:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8010372:	e170      	b.n	8010656 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010374:	bf00      	nop
    return;
 8010376:	e16e      	b.n	8010656 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801037c:	2b01      	cmp	r3, #1
 801037e:	f040 814a 	bne.w	8010616 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8010382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010386:	f003 0310 	and.w	r3, r3, #16
 801038a:	2b00      	cmp	r3, #0
 801038c:	f000 8143 	beq.w	8010616 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8010390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010394:	f003 0310 	and.w	r3, r3, #16
 8010398:	2b00      	cmp	r3, #0
 801039a:	f000 813c 	beq.w	8010616 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801039e:	2300      	movs	r3, #0
 80103a0:	60bb      	str	r3, [r7, #8]
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	60bb      	str	r3, [r7, #8]
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	685b      	ldr	r3, [r3, #4]
 80103b0:	60bb      	str	r3, [r7, #8]
 80103b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	695b      	ldr	r3, [r3, #20]
 80103ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103be:	2b40      	cmp	r3, #64	; 0x40
 80103c0:	f040 80b4 	bne.w	801052c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	685b      	ldr	r3, [r3, #4]
 80103cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80103d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	f000 8140 	beq.w	801065a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80103de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80103e2:	429a      	cmp	r2, r3
 80103e4:	f080 8139 	bcs.w	801065a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80103ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103f4:	69db      	ldr	r3, [r3, #28]
 80103f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103fa:	f000 8088 	beq.w	801050e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	330c      	adds	r3, #12
 8010404:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010408:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801040c:	e853 3f00 	ldrex	r3, [r3]
 8010410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010414:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801041c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	330c      	adds	r3, #12
 8010426:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801042a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801042e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010432:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010436:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801043a:	e841 2300 	strex	r3, r2, [r1]
 801043e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010442:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010446:	2b00      	cmp	r3, #0
 8010448:	d1d9      	bne.n	80103fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	3314      	adds	r3, #20
 8010450:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010454:	e853 3f00 	ldrex	r3, [r3]
 8010458:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801045a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801045c:	f023 0301 	bic.w	r3, r3, #1
 8010460:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	3314      	adds	r3, #20
 801046a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801046e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010472:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010474:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010476:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801047a:	e841 2300 	strex	r3, r2, [r1]
 801047e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010482:	2b00      	cmp	r3, #0
 8010484:	d1e1      	bne.n	801044a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	3314      	adds	r3, #20
 801048c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801048e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010490:	e853 3f00 	ldrex	r3, [r3]
 8010494:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801049c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	3314      	adds	r3, #20
 80104a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80104aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80104ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80104b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80104b2:	e841 2300 	strex	r3, r2, [r1]
 80104b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80104b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d1e3      	bne.n	8010486 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2220      	movs	r2, #32
 80104c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2200      	movs	r2, #0
 80104ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	330c      	adds	r3, #12
 80104d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104d6:	e853 3f00 	ldrex	r3, [r3]
 80104da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80104dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104de:	f023 0310 	bic.w	r3, r3, #16
 80104e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	330c      	adds	r3, #12
 80104ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80104f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80104f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80104f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80104f8:	e841 2300 	strex	r3, r2, [r1]
 80104fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80104fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010500:	2b00      	cmp	r3, #0
 8010502:	d1e3      	bne.n	80104cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010508:	4618      	mov	r0, r3
 801050a:	f7fa fb17 	bl	800ab3c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010516:	b29b      	uxth	r3, r3
 8010518:	1ad3      	subs	r3, r2, r3
 801051a:	b29b      	uxth	r3, r3
 801051c:	4619      	mov	r1, r3
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f000 f8d4 	bl	80106cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010524:	e099      	b.n	801065a <HAL_UART_IRQHandler+0x50e>
 8010526:	bf00      	nop
 8010528:	08010bd7 	.word	0x08010bd7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010534:	b29b      	uxth	r3, r3
 8010536:	1ad3      	subs	r3, r2, r3
 8010538:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010540:	b29b      	uxth	r3, r3
 8010542:	2b00      	cmp	r3, #0
 8010544:	f000 808b 	beq.w	801065e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8010548:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801054c:	2b00      	cmp	r3, #0
 801054e:	f000 8086 	beq.w	801065e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	330c      	adds	r3, #12
 8010558:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801055a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801055c:	e853 3f00 	ldrex	r3, [r3]
 8010560:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010564:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010568:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	330c      	adds	r3, #12
 8010572:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010576:	647a      	str	r2, [r7, #68]	; 0x44
 8010578:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801057a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801057c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801057e:	e841 2300 	strex	r3, r2, [r1]
 8010582:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010586:	2b00      	cmp	r3, #0
 8010588:	d1e3      	bne.n	8010552 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	3314      	adds	r3, #20
 8010590:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010594:	e853 3f00 	ldrex	r3, [r3]
 8010598:	623b      	str	r3, [r7, #32]
   return(result);
 801059a:	6a3b      	ldr	r3, [r7, #32]
 801059c:	f023 0301 	bic.w	r3, r3, #1
 80105a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	3314      	adds	r3, #20
 80105aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80105ae:	633a      	str	r2, [r7, #48]	; 0x30
 80105b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80105b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105b6:	e841 2300 	strex	r3, r2, [r1]
 80105ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80105bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d1e3      	bne.n	801058a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2220      	movs	r2, #32
 80105c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2200      	movs	r2, #0
 80105ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	330c      	adds	r3, #12
 80105d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	e853 3f00 	ldrex	r3, [r3]
 80105de:	60fb      	str	r3, [r7, #12]
   return(result);
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	f023 0310 	bic.w	r3, r3, #16
 80105e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	330c      	adds	r3, #12
 80105f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80105f4:	61fa      	str	r2, [r7, #28]
 80105f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105f8:	69b9      	ldr	r1, [r7, #24]
 80105fa:	69fa      	ldr	r2, [r7, #28]
 80105fc:	e841 2300 	strex	r3, r2, [r1]
 8010600:	617b      	str	r3, [r7, #20]
   return(result);
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d1e3      	bne.n	80105d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010608:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801060c:	4619      	mov	r1, r3
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f000 f85c 	bl	80106cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010614:	e023      	b.n	801065e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801061a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801061e:	2b00      	cmp	r3, #0
 8010620:	d009      	beq.n	8010636 <HAL_UART_IRQHandler+0x4ea>
 8010622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801062a:	2b00      	cmp	r3, #0
 801062c:	d003      	beq.n	8010636 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 801062e:	6878      	ldr	r0, [r7, #4]
 8010630:	f000 fae5 	bl	8010bfe <UART_Transmit_IT>
    return;
 8010634:	e014      	b.n	8010660 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801063a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801063e:	2b00      	cmp	r3, #0
 8010640:	d00e      	beq.n	8010660 <HAL_UART_IRQHandler+0x514>
 8010642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801064a:	2b00      	cmp	r3, #0
 801064c:	d008      	beq.n	8010660 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801064e:	6878      	ldr	r0, [r7, #4]
 8010650:	f000 fb25 	bl	8010c9e <UART_EndTransmit_IT>
    return;
 8010654:	e004      	b.n	8010660 <HAL_UART_IRQHandler+0x514>
    return;
 8010656:	bf00      	nop
 8010658:	e002      	b.n	8010660 <HAL_UART_IRQHandler+0x514>
      return;
 801065a:	bf00      	nop
 801065c:	e000      	b.n	8010660 <HAL_UART_IRQHandler+0x514>
      return;
 801065e:	bf00      	nop
  }
}
 8010660:	37e8      	adds	r7, #232	; 0xe8
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}
 8010666:	bf00      	nop

08010668 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010668:	b480      	push	{r7}
 801066a:	b083      	sub	sp, #12
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010670:	bf00      	nop
 8010672:	370c      	adds	r7, #12
 8010674:	46bd      	mov	sp, r7
 8010676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067a:	4770      	bx	lr

0801067c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801067c:	b480      	push	{r7}
 801067e:	b083      	sub	sp, #12
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8010684:	bf00      	nop
 8010686:	370c      	adds	r7, #12
 8010688:	46bd      	mov	sp, r7
 801068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068e:	4770      	bx	lr

08010690 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010690:	b480      	push	{r7}
 8010692:	b083      	sub	sp, #12
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8010698:	bf00      	nop
 801069a:	370c      	adds	r7, #12
 801069c:	46bd      	mov	sp, r7
 801069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a2:	4770      	bx	lr

080106a4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80106a4:	b480      	push	{r7}
 80106a6:	b083      	sub	sp, #12
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80106ac:	bf00      	nop
 80106ae:	370c      	adds	r7, #12
 80106b0:	46bd      	mov	sp, r7
 80106b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b6:	4770      	bx	lr

080106b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80106b8:	b480      	push	{r7}
 80106ba:	b083      	sub	sp, #12
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80106c0:	bf00      	nop
 80106c2:	370c      	adds	r7, #12
 80106c4:	46bd      	mov	sp, r7
 80106c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ca:	4770      	bx	lr

080106cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80106cc:	b480      	push	{r7}
 80106ce:	b083      	sub	sp, #12
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	460b      	mov	r3, r1
 80106d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80106d8:	bf00      	nop
 80106da:	370c      	adds	r7, #12
 80106dc:	46bd      	mov	sp, r7
 80106de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e2:	4770      	bx	lr

080106e4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b090      	sub	sp, #64	; 0x40
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d137      	bne.n	8010770 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8010700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010702:	2200      	movs	r2, #0
 8010704:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	3314      	adds	r3, #20
 801070c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801070e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010710:	e853 3f00 	ldrex	r3, [r3]
 8010714:	623b      	str	r3, [r7, #32]
   return(result);
 8010716:	6a3b      	ldr	r3, [r7, #32]
 8010718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801071c:	63bb      	str	r3, [r7, #56]	; 0x38
 801071e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	3314      	adds	r3, #20
 8010724:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010726:	633a      	str	r2, [r7, #48]	; 0x30
 8010728:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801072a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801072c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801072e:	e841 2300 	strex	r3, r2, [r1]
 8010732:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010736:	2b00      	cmp	r3, #0
 8010738:	d1e5      	bne.n	8010706 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801073a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	330c      	adds	r3, #12
 8010740:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010742:	693b      	ldr	r3, [r7, #16]
 8010744:	e853 3f00 	ldrex	r3, [r3]
 8010748:	60fb      	str	r3, [r7, #12]
   return(result);
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010750:	637b      	str	r3, [r7, #52]	; 0x34
 8010752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	330c      	adds	r3, #12
 8010758:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801075a:	61fa      	str	r2, [r7, #28]
 801075c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801075e:	69b9      	ldr	r1, [r7, #24]
 8010760:	69fa      	ldr	r2, [r7, #28]
 8010762:	e841 2300 	strex	r3, r2, [r1]
 8010766:	617b      	str	r3, [r7, #20]
   return(result);
 8010768:	697b      	ldr	r3, [r7, #20]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d1e5      	bne.n	801073a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801076e:	e002      	b.n	8010776 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8010770:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010772:	f7ff ff79 	bl	8010668 <HAL_UART_TxCpltCallback>
}
 8010776:	bf00      	nop
 8010778:	3740      	adds	r7, #64	; 0x40
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}

0801077e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801077e:	b580      	push	{r7, lr}
 8010780:	b084      	sub	sp, #16
 8010782:	af00      	add	r7, sp, #0
 8010784:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801078a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801078c:	68f8      	ldr	r0, [r7, #12]
 801078e:	f7ff ff75 	bl	801067c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010792:	bf00      	nop
 8010794:	3710      	adds	r7, #16
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}

0801079a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801079a:	b580      	push	{r7, lr}
 801079c:	b09c      	sub	sp, #112	; 0x70
 801079e:	af00      	add	r7, sp, #0
 80107a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d172      	bne.n	801089c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80107b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107b8:	2200      	movs	r2, #0
 80107ba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80107bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	330c      	adds	r3, #12
 80107c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107c6:	e853 3f00 	ldrex	r3, [r3]
 80107ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80107cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80107d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80107d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	330c      	adds	r3, #12
 80107da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80107dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80107de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80107e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80107e4:	e841 2300 	strex	r3, r2, [r1]
 80107e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80107ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d1e5      	bne.n	80107bc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	3314      	adds	r3, #20
 80107f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107fa:	e853 3f00 	ldrex	r3, [r3]
 80107fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010802:	f023 0301 	bic.w	r3, r3, #1
 8010806:	667b      	str	r3, [r7, #100]	; 0x64
 8010808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	3314      	adds	r3, #20
 801080e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010810:	647a      	str	r2, [r7, #68]	; 0x44
 8010812:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010814:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010816:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010818:	e841 2300 	strex	r3, r2, [r1]
 801081c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801081e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010820:	2b00      	cmp	r3, #0
 8010822:	d1e5      	bne.n	80107f0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	3314      	adds	r3, #20
 801082a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801082c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801082e:	e853 3f00 	ldrex	r3, [r3]
 8010832:	623b      	str	r3, [r7, #32]
   return(result);
 8010834:	6a3b      	ldr	r3, [r7, #32]
 8010836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801083a:	663b      	str	r3, [r7, #96]	; 0x60
 801083c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	3314      	adds	r3, #20
 8010842:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010844:	633a      	str	r2, [r7, #48]	; 0x30
 8010846:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010848:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801084a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801084c:	e841 2300 	strex	r3, r2, [r1]
 8010850:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010854:	2b00      	cmp	r3, #0
 8010856:	d1e5      	bne.n	8010824 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801085a:	2220      	movs	r2, #32
 801085c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010864:	2b01      	cmp	r3, #1
 8010866:	d119      	bne.n	801089c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	330c      	adds	r3, #12
 801086e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010870:	693b      	ldr	r3, [r7, #16]
 8010872:	e853 3f00 	ldrex	r3, [r3]
 8010876:	60fb      	str	r3, [r7, #12]
   return(result);
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	f023 0310 	bic.w	r3, r3, #16
 801087e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	330c      	adds	r3, #12
 8010886:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010888:	61fa      	str	r2, [r7, #28]
 801088a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801088c:	69b9      	ldr	r1, [r7, #24]
 801088e:	69fa      	ldr	r2, [r7, #28]
 8010890:	e841 2300 	strex	r3, r2, [r1]
 8010894:	617b      	str	r3, [r7, #20]
   return(result);
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d1e5      	bne.n	8010868 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801089c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801089e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	d106      	bne.n	80108b2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80108a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80108a8:	4619      	mov	r1, r3
 80108aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80108ac:	f7ff ff0e 	bl	80106cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80108b0:	e002      	b.n	80108b8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80108b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80108b4:	f7ff feec 	bl	8010690 <HAL_UART_RxCpltCallback>
}
 80108b8:	bf00      	nop
 80108ba:	3770      	adds	r7, #112	; 0x70
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}

080108c0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b084      	sub	sp, #16
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108cc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108d2:	2b01      	cmp	r3, #1
 80108d4:	d108      	bne.n	80108e8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80108da:	085b      	lsrs	r3, r3, #1
 80108dc:	b29b      	uxth	r3, r3
 80108de:	4619      	mov	r1, r3
 80108e0:	68f8      	ldr	r0, [r7, #12]
 80108e2:	f7ff fef3 	bl	80106cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80108e6:	e002      	b.n	80108ee <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80108e8:	68f8      	ldr	r0, [r7, #12]
 80108ea:	f7ff fedb 	bl	80106a4 <HAL_UART_RxHalfCpltCallback>
}
 80108ee:	bf00      	nop
 80108f0:	3710      	adds	r7, #16
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}

080108f6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80108f6:	b580      	push	{r7, lr}
 80108f8:	b084      	sub	sp, #16
 80108fa:	af00      	add	r7, sp, #0
 80108fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80108fe:	2300      	movs	r3, #0
 8010900:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010906:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	695b      	ldr	r3, [r3, #20]
 801090e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010912:	2b80      	cmp	r3, #128	; 0x80
 8010914:	bf0c      	ite	eq
 8010916:	2301      	moveq	r3, #1
 8010918:	2300      	movne	r3, #0
 801091a:	b2db      	uxtb	r3, r3
 801091c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010924:	b2db      	uxtb	r3, r3
 8010926:	2b21      	cmp	r3, #33	; 0x21
 8010928:	d108      	bne.n	801093c <UART_DMAError+0x46>
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d005      	beq.n	801093c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	2200      	movs	r2, #0
 8010934:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8010936:	68b8      	ldr	r0, [r7, #8]
 8010938:	f000 f8c2 	bl	8010ac0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	695b      	ldr	r3, [r3, #20]
 8010942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010946:	2b40      	cmp	r3, #64	; 0x40
 8010948:	bf0c      	ite	eq
 801094a:	2301      	moveq	r3, #1
 801094c:	2300      	movne	r3, #0
 801094e:	b2db      	uxtb	r3, r3
 8010950:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010952:	68bb      	ldr	r3, [r7, #8]
 8010954:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010958:	b2db      	uxtb	r3, r3
 801095a:	2b22      	cmp	r3, #34	; 0x22
 801095c:	d108      	bne.n	8010970 <UART_DMAError+0x7a>
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d005      	beq.n	8010970 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	2200      	movs	r2, #0
 8010968:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801096a:	68b8      	ldr	r0, [r7, #8]
 801096c:	f000 f8d0 	bl	8010b10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010974:	f043 0210 	orr.w	r2, r3, #16
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801097c:	68b8      	ldr	r0, [r7, #8]
 801097e:	f7ff fe9b 	bl	80106b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010982:	bf00      	nop
 8010984:	3710      	adds	r7, #16
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}
	...

0801098c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b098      	sub	sp, #96	; 0x60
 8010990:	af00      	add	r7, sp, #0
 8010992:	60f8      	str	r0, [r7, #12]
 8010994:	60b9      	str	r1, [r7, #8]
 8010996:	4613      	mov	r3, r2
 8010998:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801099a:	68ba      	ldr	r2, [r7, #8]
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	88fa      	ldrh	r2, [r7, #6]
 80109a4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	2200      	movs	r2, #0
 80109aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	2222      	movs	r2, #34	; 0x22
 80109b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109b8:	4a3e      	ldr	r2, [pc, #248]	; (8010ab4 <UART_Start_Receive_DMA+0x128>)
 80109ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109c0:	4a3d      	ldr	r2, [pc, #244]	; (8010ab8 <UART_Start_Receive_DMA+0x12c>)
 80109c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109c8:	4a3c      	ldr	r2, [pc, #240]	; (8010abc <UART_Start_Receive_DMA+0x130>)
 80109ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109d0:	2200      	movs	r2, #0
 80109d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80109d4:	f107 0308 	add.w	r3, r7, #8
 80109d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	3304      	adds	r3, #4
 80109e4:	4619      	mov	r1, r3
 80109e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80109e8:	681a      	ldr	r2, [r3, #0]
 80109ea:	88fb      	ldrh	r3, [r7, #6]
 80109ec:	f7fa f84e 	bl	800aa8c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80109f0:	2300      	movs	r3, #0
 80109f2:	613b      	str	r3, [r7, #16]
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	613b      	str	r3, [r7, #16]
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	685b      	ldr	r3, [r3, #4]
 8010a02:	613b      	str	r3, [r7, #16]
 8010a04:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	2200      	movs	r2, #0
 8010a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	330c      	adds	r3, #12
 8010a14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a18:	e853 3f00 	ldrex	r3, [r3]
 8010a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010a24:	65bb      	str	r3, [r7, #88]	; 0x58
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	330c      	adds	r3, #12
 8010a2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010a2e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010a30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a32:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010a34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010a36:	e841 2300 	strex	r3, r2, [r1]
 8010a3a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d1e5      	bne.n	8010a0e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	3314      	adds	r3, #20
 8010a48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a4c:	e853 3f00 	ldrex	r3, [r3]
 8010a50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a54:	f043 0301 	orr.w	r3, r3, #1
 8010a58:	657b      	str	r3, [r7, #84]	; 0x54
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	3314      	adds	r3, #20
 8010a60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010a62:	63ba      	str	r2, [r7, #56]	; 0x38
 8010a64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a66:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010a68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a6a:	e841 2300 	strex	r3, r2, [r1]
 8010a6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d1e5      	bne.n	8010a42 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	3314      	adds	r3, #20
 8010a7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a7e:	69bb      	ldr	r3, [r7, #24]
 8010a80:	e853 3f00 	ldrex	r3, [r3]
 8010a84:	617b      	str	r3, [r7, #20]
   return(result);
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a8c:	653b      	str	r3, [r7, #80]	; 0x50
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	3314      	adds	r3, #20
 8010a94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010a96:	627a      	str	r2, [r7, #36]	; 0x24
 8010a98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a9a:	6a39      	ldr	r1, [r7, #32]
 8010a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a9e:	e841 2300 	strex	r3, r2, [r1]
 8010aa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8010aa4:	69fb      	ldr	r3, [r7, #28]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d1e5      	bne.n	8010a76 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8010aaa:	2300      	movs	r3, #0
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3760      	adds	r7, #96	; 0x60
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}
 8010ab4:	0801079b 	.word	0x0801079b
 8010ab8:	080108c1 	.word	0x080108c1
 8010abc:	080108f7 	.word	0x080108f7

08010ac0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010ac0:	b480      	push	{r7}
 8010ac2:	b089      	sub	sp, #36	; 0x24
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	330c      	adds	r3, #12
 8010ace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	e853 3f00 	ldrex	r3, [r3]
 8010ad6:	60bb      	str	r3, [r7, #8]
   return(result);
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010ade:	61fb      	str	r3, [r7, #28]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	330c      	adds	r3, #12
 8010ae6:	69fa      	ldr	r2, [r7, #28]
 8010ae8:	61ba      	str	r2, [r7, #24]
 8010aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aec:	6979      	ldr	r1, [r7, #20]
 8010aee:	69ba      	ldr	r2, [r7, #24]
 8010af0:	e841 2300 	strex	r3, r2, [r1]
 8010af4:	613b      	str	r3, [r7, #16]
   return(result);
 8010af6:	693b      	ldr	r3, [r7, #16]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d1e5      	bne.n	8010ac8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2220      	movs	r2, #32
 8010b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8010b04:	bf00      	nop
 8010b06:	3724      	adds	r7, #36	; 0x24
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0e:	4770      	bx	lr

08010b10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010b10:	b480      	push	{r7}
 8010b12:	b095      	sub	sp, #84	; 0x54
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	330c      	adds	r3, #12
 8010b1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b22:	e853 3f00 	ldrex	r3, [r3]
 8010b26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	330c      	adds	r3, #12
 8010b36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010b38:	643a      	str	r2, [r7, #64]	; 0x40
 8010b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010b3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010b40:	e841 2300 	strex	r3, r2, [r1]
 8010b44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d1e5      	bne.n	8010b18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	3314      	adds	r3, #20
 8010b52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b54:	6a3b      	ldr	r3, [r7, #32]
 8010b56:	e853 3f00 	ldrex	r3, [r3]
 8010b5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8010b5c:	69fb      	ldr	r3, [r7, #28]
 8010b5e:	f023 0301 	bic.w	r3, r3, #1
 8010b62:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	3314      	adds	r3, #20
 8010b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010b6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010b6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b74:	e841 2300 	strex	r3, r2, [r1]
 8010b78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d1e5      	bne.n	8010b4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b84:	2b01      	cmp	r3, #1
 8010b86:	d119      	bne.n	8010bbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	330c      	adds	r3, #12
 8010b8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	e853 3f00 	ldrex	r3, [r3]
 8010b96:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	f023 0310 	bic.w	r3, r3, #16
 8010b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	330c      	adds	r3, #12
 8010ba6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ba8:	61ba      	str	r2, [r7, #24]
 8010baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bac:	6979      	ldr	r1, [r7, #20]
 8010bae:	69ba      	ldr	r2, [r7, #24]
 8010bb0:	e841 2300 	strex	r3, r2, [r1]
 8010bb4:	613b      	str	r3, [r7, #16]
   return(result);
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d1e5      	bne.n	8010b88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2220      	movs	r2, #32
 8010bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8010bca:	bf00      	nop
 8010bcc:	3754      	adds	r7, #84	; 0x54
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd4:	4770      	bx	lr

08010bd6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010bd6:	b580      	push	{r7, lr}
 8010bd8:	b084      	sub	sp, #16
 8010bda:	af00      	add	r7, sp, #0
 8010bdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010be2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	2200      	movs	r2, #0
 8010be8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	2200      	movs	r2, #0
 8010bee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010bf0:	68f8      	ldr	r0, [r7, #12]
 8010bf2:	f7ff fd61 	bl	80106b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010bf6:	bf00      	nop
 8010bf8:	3710      	adds	r7, #16
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}

08010bfe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010bfe:	b480      	push	{r7}
 8010c00:	b085      	sub	sp, #20
 8010c02:	af00      	add	r7, sp, #0
 8010c04:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010c0c:	b2db      	uxtb	r3, r3
 8010c0e:	2b21      	cmp	r3, #33	; 0x21
 8010c10:	d13e      	bne.n	8010c90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	689b      	ldr	r3, [r3, #8]
 8010c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c1a:	d114      	bne.n	8010c46 <UART_Transmit_IT+0x48>
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	691b      	ldr	r3, [r3, #16]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d110      	bne.n	8010c46 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	6a1b      	ldr	r3, [r3, #32]
 8010c28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	881b      	ldrh	r3, [r3, #0]
 8010c2e:	461a      	mov	r2, r3
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010c38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	6a1b      	ldr	r3, [r3, #32]
 8010c3e:	1c9a      	adds	r2, r3, #2
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	621a      	str	r2, [r3, #32]
 8010c44:	e008      	b.n	8010c58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6a1b      	ldr	r3, [r3, #32]
 8010c4a:	1c59      	adds	r1, r3, #1
 8010c4c:	687a      	ldr	r2, [r7, #4]
 8010c4e:	6211      	str	r1, [r2, #32]
 8010c50:	781a      	ldrb	r2, [r3, #0]
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010c5c:	b29b      	uxth	r3, r3
 8010c5e:	3b01      	subs	r3, #1
 8010c60:	b29b      	uxth	r3, r3
 8010c62:	687a      	ldr	r2, [r7, #4]
 8010c64:	4619      	mov	r1, r3
 8010c66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d10f      	bne.n	8010c8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	68da      	ldr	r2, [r3, #12]
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010c7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	68da      	ldr	r2, [r3, #12]
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010c8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	e000      	b.n	8010c92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010c90:	2302      	movs	r3, #2
  }
}
 8010c92:	4618      	mov	r0, r3
 8010c94:	3714      	adds	r7, #20
 8010c96:	46bd      	mov	sp, r7
 8010c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9c:	4770      	bx	lr

08010c9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010c9e:	b580      	push	{r7, lr}
 8010ca0:	b082      	sub	sp, #8
 8010ca2:	af00      	add	r7, sp, #0
 8010ca4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	68da      	ldr	r2, [r3, #12]
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010cb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	2220      	movs	r2, #32
 8010cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f7ff fcd2 	bl	8010668 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010cc4:	2300      	movs	r3, #0
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3708      	adds	r7, #8
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}

08010cce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010cce:	b580      	push	{r7, lr}
 8010cd0:	b08c      	sub	sp, #48	; 0x30
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010cdc:	b2db      	uxtb	r3, r3
 8010cde:	2b22      	cmp	r3, #34	; 0x22
 8010ce0:	f040 80ab 	bne.w	8010e3a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	689b      	ldr	r3, [r3, #8]
 8010ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010cec:	d117      	bne.n	8010d1e <UART_Receive_IT+0x50>
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	691b      	ldr	r3, [r3, #16]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d113      	bne.n	8010d1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cfe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	685b      	ldr	r3, [r3, #4]
 8010d06:	b29b      	uxth	r3, r3
 8010d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d0c:	b29a      	uxth	r2, r3
 8010d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d16:	1c9a      	adds	r2, r3, #2
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	629a      	str	r2, [r3, #40]	; 0x28
 8010d1c:	e026      	b.n	8010d6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8010d24:	2300      	movs	r3, #0
 8010d26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	689b      	ldr	r3, [r3, #8]
 8010d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010d30:	d007      	beq.n	8010d42 <UART_Receive_IT+0x74>
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	689b      	ldr	r3, [r3, #8]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d10a      	bne.n	8010d50 <UART_Receive_IT+0x82>
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	691b      	ldr	r3, [r3, #16]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d106      	bne.n	8010d50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	685b      	ldr	r3, [r3, #4]
 8010d48:	b2da      	uxtb	r2, r3
 8010d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d4c:	701a      	strb	r2, [r3, #0]
 8010d4e:	e008      	b.n	8010d62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	685b      	ldr	r3, [r3, #4]
 8010d56:	b2db      	uxtb	r3, r3
 8010d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d5c:	b2da      	uxtb	r2, r3
 8010d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d66:	1c5a      	adds	r2, r3, #1
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010d70:	b29b      	uxth	r3, r3
 8010d72:	3b01      	subs	r3, #1
 8010d74:	b29b      	uxth	r3, r3
 8010d76:	687a      	ldr	r2, [r7, #4]
 8010d78:	4619      	mov	r1, r3
 8010d7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d15a      	bne.n	8010e36 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	68da      	ldr	r2, [r3, #12]
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	f022 0220 	bic.w	r2, r2, #32
 8010d8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	68da      	ldr	r2, [r3, #12]
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010d9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	695a      	ldr	r2, [r3, #20]
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	f022 0201 	bic.w	r2, r2, #1
 8010dae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	2220      	movs	r2, #32
 8010db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dbc:	2b01      	cmp	r3, #1
 8010dbe:	d135      	bne.n	8010e2c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	330c      	adds	r3, #12
 8010dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	e853 3f00 	ldrex	r3, [r3]
 8010dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8010dd6:	693b      	ldr	r3, [r7, #16]
 8010dd8:	f023 0310 	bic.w	r3, r3, #16
 8010ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	330c      	adds	r3, #12
 8010de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010de6:	623a      	str	r2, [r7, #32]
 8010de8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dea:	69f9      	ldr	r1, [r7, #28]
 8010dec:	6a3a      	ldr	r2, [r7, #32]
 8010dee:	e841 2300 	strex	r3, r2, [r1]
 8010df2:	61bb      	str	r3, [r7, #24]
   return(result);
 8010df4:	69bb      	ldr	r3, [r7, #24]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d1e5      	bne.n	8010dc6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	f003 0310 	and.w	r3, r3, #16
 8010e04:	2b10      	cmp	r3, #16
 8010e06:	d10a      	bne.n	8010e1e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010e08:	2300      	movs	r3, #0
 8010e0a:	60fb      	str	r3, [r7, #12]
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	60fb      	str	r3, [r7, #12]
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	685b      	ldr	r3, [r3, #4]
 8010e1a:	60fb      	str	r3, [r7, #12]
 8010e1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010e22:	4619      	mov	r1, r3
 8010e24:	6878      	ldr	r0, [r7, #4]
 8010e26:	f7ff fc51 	bl	80106cc <HAL_UARTEx_RxEventCallback>
 8010e2a:	e002      	b.n	8010e32 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	f7ff fc2f 	bl	8010690 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8010e32:	2300      	movs	r3, #0
 8010e34:	e002      	b.n	8010e3c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8010e36:	2300      	movs	r3, #0
 8010e38:	e000      	b.n	8010e3c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8010e3a:	2302      	movs	r3, #2
  }
}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3730      	adds	r7, #48	; 0x30
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}

08010e44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e48:	b09f      	sub	sp, #124	; 0x7c
 8010e4a:	af00      	add	r7, sp, #0
 8010e4c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	691b      	ldr	r3, [r3, #16]
 8010e54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8010e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e5a:	68d9      	ldr	r1, [r3, #12]
 8010e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e5e:	681a      	ldr	r2, [r3, #0]
 8010e60:	ea40 0301 	orr.w	r3, r0, r1
 8010e64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e68:	689a      	ldr	r2, [r3, #8]
 8010e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e6c:	691b      	ldr	r3, [r3, #16]
 8010e6e:	431a      	orrs	r2, r3
 8010e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e72:	695b      	ldr	r3, [r3, #20]
 8010e74:	431a      	orrs	r2, r3
 8010e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e78:	69db      	ldr	r3, [r3, #28]
 8010e7a:	4313      	orrs	r3, r2
 8010e7c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8010e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	68db      	ldr	r3, [r3, #12]
 8010e84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8010e88:	f021 010c 	bic.w	r1, r1, #12
 8010e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e8e:	681a      	ldr	r2, [r3, #0]
 8010e90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010e92:	430b      	orrs	r3, r1
 8010e94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	695b      	ldr	r3, [r3, #20]
 8010e9c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8010ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ea2:	6999      	ldr	r1, [r3, #24]
 8010ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ea6:	681a      	ldr	r2, [r3, #0]
 8010ea8:	ea40 0301 	orr.w	r3, r0, r1
 8010eac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010eb0:	681a      	ldr	r2, [r3, #0]
 8010eb2:	4bc5      	ldr	r3, [pc, #788]	; (80111c8 <UART_SetConfig+0x384>)
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d004      	beq.n	8010ec2 <UART_SetConfig+0x7e>
 8010eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010eba:	681a      	ldr	r2, [r3, #0]
 8010ebc:	4bc3      	ldr	r3, [pc, #780]	; (80111cc <UART_SetConfig+0x388>)
 8010ebe:	429a      	cmp	r2, r3
 8010ec0:	d103      	bne.n	8010eca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010ec2:	f7fe f865 	bl	800ef90 <HAL_RCC_GetPCLK2Freq>
 8010ec6:	6778      	str	r0, [r7, #116]	; 0x74
 8010ec8:	e002      	b.n	8010ed0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010eca:	f7fe f84d 	bl	800ef68 <HAL_RCC_GetPCLK1Freq>
 8010ece:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ed2:	69db      	ldr	r3, [r3, #28]
 8010ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010ed8:	f040 80b6 	bne.w	8011048 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ede:	461c      	mov	r4, r3
 8010ee0:	f04f 0500 	mov.w	r5, #0
 8010ee4:	4622      	mov	r2, r4
 8010ee6:	462b      	mov	r3, r5
 8010ee8:	1891      	adds	r1, r2, r2
 8010eea:	6439      	str	r1, [r7, #64]	; 0x40
 8010eec:	415b      	adcs	r3, r3
 8010eee:	647b      	str	r3, [r7, #68]	; 0x44
 8010ef0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010ef4:	1912      	adds	r2, r2, r4
 8010ef6:	eb45 0303 	adc.w	r3, r5, r3
 8010efa:	f04f 0000 	mov.w	r0, #0
 8010efe:	f04f 0100 	mov.w	r1, #0
 8010f02:	00d9      	lsls	r1, r3, #3
 8010f04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010f08:	00d0      	lsls	r0, r2, #3
 8010f0a:	4602      	mov	r2, r0
 8010f0c:	460b      	mov	r3, r1
 8010f0e:	1911      	adds	r1, r2, r4
 8010f10:	6639      	str	r1, [r7, #96]	; 0x60
 8010f12:	416b      	adcs	r3, r5
 8010f14:	667b      	str	r3, [r7, #100]	; 0x64
 8010f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f18:	685b      	ldr	r3, [r3, #4]
 8010f1a:	461a      	mov	r2, r3
 8010f1c:	f04f 0300 	mov.w	r3, #0
 8010f20:	1891      	adds	r1, r2, r2
 8010f22:	63b9      	str	r1, [r7, #56]	; 0x38
 8010f24:	415b      	adcs	r3, r3
 8010f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010f2c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8010f30:	f7ef fec2 	bl	8000cb8 <__aeabi_uldivmod>
 8010f34:	4602      	mov	r2, r0
 8010f36:	460b      	mov	r3, r1
 8010f38:	4ba5      	ldr	r3, [pc, #660]	; (80111d0 <UART_SetConfig+0x38c>)
 8010f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8010f3e:	095b      	lsrs	r3, r3, #5
 8010f40:	011e      	lsls	r6, r3, #4
 8010f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010f44:	461c      	mov	r4, r3
 8010f46:	f04f 0500 	mov.w	r5, #0
 8010f4a:	4622      	mov	r2, r4
 8010f4c:	462b      	mov	r3, r5
 8010f4e:	1891      	adds	r1, r2, r2
 8010f50:	6339      	str	r1, [r7, #48]	; 0x30
 8010f52:	415b      	adcs	r3, r3
 8010f54:	637b      	str	r3, [r7, #52]	; 0x34
 8010f56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8010f5a:	1912      	adds	r2, r2, r4
 8010f5c:	eb45 0303 	adc.w	r3, r5, r3
 8010f60:	f04f 0000 	mov.w	r0, #0
 8010f64:	f04f 0100 	mov.w	r1, #0
 8010f68:	00d9      	lsls	r1, r3, #3
 8010f6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010f6e:	00d0      	lsls	r0, r2, #3
 8010f70:	4602      	mov	r2, r0
 8010f72:	460b      	mov	r3, r1
 8010f74:	1911      	adds	r1, r2, r4
 8010f76:	65b9      	str	r1, [r7, #88]	; 0x58
 8010f78:	416b      	adcs	r3, r5
 8010f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f7e:	685b      	ldr	r3, [r3, #4]
 8010f80:	461a      	mov	r2, r3
 8010f82:	f04f 0300 	mov.w	r3, #0
 8010f86:	1891      	adds	r1, r2, r2
 8010f88:	62b9      	str	r1, [r7, #40]	; 0x28
 8010f8a:	415b      	adcs	r3, r3
 8010f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010f92:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8010f96:	f7ef fe8f 	bl	8000cb8 <__aeabi_uldivmod>
 8010f9a:	4602      	mov	r2, r0
 8010f9c:	460b      	mov	r3, r1
 8010f9e:	4b8c      	ldr	r3, [pc, #560]	; (80111d0 <UART_SetConfig+0x38c>)
 8010fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8010fa4:	095b      	lsrs	r3, r3, #5
 8010fa6:	2164      	movs	r1, #100	; 0x64
 8010fa8:	fb01 f303 	mul.w	r3, r1, r3
 8010fac:	1ad3      	subs	r3, r2, r3
 8010fae:	00db      	lsls	r3, r3, #3
 8010fb0:	3332      	adds	r3, #50	; 0x32
 8010fb2:	4a87      	ldr	r2, [pc, #540]	; (80111d0 <UART_SetConfig+0x38c>)
 8010fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8010fb8:	095b      	lsrs	r3, r3, #5
 8010fba:	005b      	lsls	r3, r3, #1
 8010fbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010fc0:	441e      	add	r6, r3
 8010fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f04f 0100 	mov.w	r1, #0
 8010fca:	4602      	mov	r2, r0
 8010fcc:	460b      	mov	r3, r1
 8010fce:	1894      	adds	r4, r2, r2
 8010fd0:	623c      	str	r4, [r7, #32]
 8010fd2:	415b      	adcs	r3, r3
 8010fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8010fd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010fda:	1812      	adds	r2, r2, r0
 8010fdc:	eb41 0303 	adc.w	r3, r1, r3
 8010fe0:	f04f 0400 	mov.w	r4, #0
 8010fe4:	f04f 0500 	mov.w	r5, #0
 8010fe8:	00dd      	lsls	r5, r3, #3
 8010fea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010fee:	00d4      	lsls	r4, r2, #3
 8010ff0:	4622      	mov	r2, r4
 8010ff2:	462b      	mov	r3, r5
 8010ff4:	1814      	adds	r4, r2, r0
 8010ff6:	653c      	str	r4, [r7, #80]	; 0x50
 8010ff8:	414b      	adcs	r3, r1
 8010ffa:	657b      	str	r3, [r7, #84]	; 0x54
 8010ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ffe:	685b      	ldr	r3, [r3, #4]
 8011000:	461a      	mov	r2, r3
 8011002:	f04f 0300 	mov.w	r3, #0
 8011006:	1891      	adds	r1, r2, r2
 8011008:	61b9      	str	r1, [r7, #24]
 801100a:	415b      	adcs	r3, r3
 801100c:	61fb      	str	r3, [r7, #28]
 801100e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011012:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8011016:	f7ef fe4f 	bl	8000cb8 <__aeabi_uldivmod>
 801101a:	4602      	mov	r2, r0
 801101c:	460b      	mov	r3, r1
 801101e:	4b6c      	ldr	r3, [pc, #432]	; (80111d0 <UART_SetConfig+0x38c>)
 8011020:	fba3 1302 	umull	r1, r3, r3, r2
 8011024:	095b      	lsrs	r3, r3, #5
 8011026:	2164      	movs	r1, #100	; 0x64
 8011028:	fb01 f303 	mul.w	r3, r1, r3
 801102c:	1ad3      	subs	r3, r2, r3
 801102e:	00db      	lsls	r3, r3, #3
 8011030:	3332      	adds	r3, #50	; 0x32
 8011032:	4a67      	ldr	r2, [pc, #412]	; (80111d0 <UART_SetConfig+0x38c>)
 8011034:	fba2 2303 	umull	r2, r3, r2, r3
 8011038:	095b      	lsrs	r3, r3, #5
 801103a:	f003 0207 	and.w	r2, r3, #7
 801103e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	4432      	add	r2, r6
 8011044:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011046:	e0b9      	b.n	80111bc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801104a:	461c      	mov	r4, r3
 801104c:	f04f 0500 	mov.w	r5, #0
 8011050:	4622      	mov	r2, r4
 8011052:	462b      	mov	r3, r5
 8011054:	1891      	adds	r1, r2, r2
 8011056:	6139      	str	r1, [r7, #16]
 8011058:	415b      	adcs	r3, r3
 801105a:	617b      	str	r3, [r7, #20]
 801105c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011060:	1912      	adds	r2, r2, r4
 8011062:	eb45 0303 	adc.w	r3, r5, r3
 8011066:	f04f 0000 	mov.w	r0, #0
 801106a:	f04f 0100 	mov.w	r1, #0
 801106e:	00d9      	lsls	r1, r3, #3
 8011070:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8011074:	00d0      	lsls	r0, r2, #3
 8011076:	4602      	mov	r2, r0
 8011078:	460b      	mov	r3, r1
 801107a:	eb12 0804 	adds.w	r8, r2, r4
 801107e:	eb43 0905 	adc.w	r9, r3, r5
 8011082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011084:	685b      	ldr	r3, [r3, #4]
 8011086:	4618      	mov	r0, r3
 8011088:	f04f 0100 	mov.w	r1, #0
 801108c:	f04f 0200 	mov.w	r2, #0
 8011090:	f04f 0300 	mov.w	r3, #0
 8011094:	008b      	lsls	r3, r1, #2
 8011096:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801109a:	0082      	lsls	r2, r0, #2
 801109c:	4640      	mov	r0, r8
 801109e:	4649      	mov	r1, r9
 80110a0:	f7ef fe0a 	bl	8000cb8 <__aeabi_uldivmod>
 80110a4:	4602      	mov	r2, r0
 80110a6:	460b      	mov	r3, r1
 80110a8:	4b49      	ldr	r3, [pc, #292]	; (80111d0 <UART_SetConfig+0x38c>)
 80110aa:	fba3 2302 	umull	r2, r3, r3, r2
 80110ae:	095b      	lsrs	r3, r3, #5
 80110b0:	011e      	lsls	r6, r3, #4
 80110b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80110b4:	4618      	mov	r0, r3
 80110b6:	f04f 0100 	mov.w	r1, #0
 80110ba:	4602      	mov	r2, r0
 80110bc:	460b      	mov	r3, r1
 80110be:	1894      	adds	r4, r2, r2
 80110c0:	60bc      	str	r4, [r7, #8]
 80110c2:	415b      	adcs	r3, r3
 80110c4:	60fb      	str	r3, [r7, #12]
 80110c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80110ca:	1812      	adds	r2, r2, r0
 80110cc:	eb41 0303 	adc.w	r3, r1, r3
 80110d0:	f04f 0400 	mov.w	r4, #0
 80110d4:	f04f 0500 	mov.w	r5, #0
 80110d8:	00dd      	lsls	r5, r3, #3
 80110da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80110de:	00d4      	lsls	r4, r2, #3
 80110e0:	4622      	mov	r2, r4
 80110e2:	462b      	mov	r3, r5
 80110e4:	1814      	adds	r4, r2, r0
 80110e6:	64bc      	str	r4, [r7, #72]	; 0x48
 80110e8:	414b      	adcs	r3, r1
 80110ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80110ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80110ee:	685b      	ldr	r3, [r3, #4]
 80110f0:	4618      	mov	r0, r3
 80110f2:	f04f 0100 	mov.w	r1, #0
 80110f6:	f04f 0200 	mov.w	r2, #0
 80110fa:	f04f 0300 	mov.w	r3, #0
 80110fe:	008b      	lsls	r3, r1, #2
 8011100:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8011104:	0082      	lsls	r2, r0, #2
 8011106:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801110a:	f7ef fdd5 	bl	8000cb8 <__aeabi_uldivmod>
 801110e:	4602      	mov	r2, r0
 8011110:	460b      	mov	r3, r1
 8011112:	4b2f      	ldr	r3, [pc, #188]	; (80111d0 <UART_SetConfig+0x38c>)
 8011114:	fba3 1302 	umull	r1, r3, r3, r2
 8011118:	095b      	lsrs	r3, r3, #5
 801111a:	2164      	movs	r1, #100	; 0x64
 801111c:	fb01 f303 	mul.w	r3, r1, r3
 8011120:	1ad3      	subs	r3, r2, r3
 8011122:	011b      	lsls	r3, r3, #4
 8011124:	3332      	adds	r3, #50	; 0x32
 8011126:	4a2a      	ldr	r2, [pc, #168]	; (80111d0 <UART_SetConfig+0x38c>)
 8011128:	fba2 2303 	umull	r2, r3, r2, r3
 801112c:	095b      	lsrs	r3, r3, #5
 801112e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011132:	441e      	add	r6, r3
 8011134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011136:	4618      	mov	r0, r3
 8011138:	f04f 0100 	mov.w	r1, #0
 801113c:	4602      	mov	r2, r0
 801113e:	460b      	mov	r3, r1
 8011140:	1894      	adds	r4, r2, r2
 8011142:	603c      	str	r4, [r7, #0]
 8011144:	415b      	adcs	r3, r3
 8011146:	607b      	str	r3, [r7, #4]
 8011148:	e9d7 2300 	ldrd	r2, r3, [r7]
 801114c:	1812      	adds	r2, r2, r0
 801114e:	eb41 0303 	adc.w	r3, r1, r3
 8011152:	f04f 0400 	mov.w	r4, #0
 8011156:	f04f 0500 	mov.w	r5, #0
 801115a:	00dd      	lsls	r5, r3, #3
 801115c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8011160:	00d4      	lsls	r4, r2, #3
 8011162:	4622      	mov	r2, r4
 8011164:	462b      	mov	r3, r5
 8011166:	eb12 0a00 	adds.w	sl, r2, r0
 801116a:	eb43 0b01 	adc.w	fp, r3, r1
 801116e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011170:	685b      	ldr	r3, [r3, #4]
 8011172:	4618      	mov	r0, r3
 8011174:	f04f 0100 	mov.w	r1, #0
 8011178:	f04f 0200 	mov.w	r2, #0
 801117c:	f04f 0300 	mov.w	r3, #0
 8011180:	008b      	lsls	r3, r1, #2
 8011182:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8011186:	0082      	lsls	r2, r0, #2
 8011188:	4650      	mov	r0, sl
 801118a:	4659      	mov	r1, fp
 801118c:	f7ef fd94 	bl	8000cb8 <__aeabi_uldivmod>
 8011190:	4602      	mov	r2, r0
 8011192:	460b      	mov	r3, r1
 8011194:	4b0e      	ldr	r3, [pc, #56]	; (80111d0 <UART_SetConfig+0x38c>)
 8011196:	fba3 1302 	umull	r1, r3, r3, r2
 801119a:	095b      	lsrs	r3, r3, #5
 801119c:	2164      	movs	r1, #100	; 0x64
 801119e:	fb01 f303 	mul.w	r3, r1, r3
 80111a2:	1ad3      	subs	r3, r2, r3
 80111a4:	011b      	lsls	r3, r3, #4
 80111a6:	3332      	adds	r3, #50	; 0x32
 80111a8:	4a09      	ldr	r2, [pc, #36]	; (80111d0 <UART_SetConfig+0x38c>)
 80111aa:	fba2 2303 	umull	r2, r3, r2, r3
 80111ae:	095b      	lsrs	r3, r3, #5
 80111b0:	f003 020f 	and.w	r2, r3, #15
 80111b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	4432      	add	r2, r6
 80111ba:	609a      	str	r2, [r3, #8]
}
 80111bc:	bf00      	nop
 80111be:	377c      	adds	r7, #124	; 0x7c
 80111c0:	46bd      	mov	sp, r7
 80111c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111c6:	bf00      	nop
 80111c8:	40011000 	.word	0x40011000
 80111cc:	40011400 	.word	0x40011400
 80111d0:	51eb851f 	.word	0x51eb851f

080111d4 <atof>:
 80111d4:	2100      	movs	r1, #0
 80111d6:	f001 bd03 	b.w	8012be0 <strtod>

080111da <atoi>:
 80111da:	220a      	movs	r2, #10
 80111dc:	2100      	movs	r1, #0
 80111de:	f001 bded 	b.w	8012dbc <strtol>
	...

080111e4 <__errno>:
 80111e4:	4b01      	ldr	r3, [pc, #4]	; (80111ec <__errno+0x8>)
 80111e6:	6818      	ldr	r0, [r3, #0]
 80111e8:	4770      	bx	lr
 80111ea:	bf00      	nop
 80111ec:	20000040 	.word	0x20000040

080111f0 <__libc_init_array>:
 80111f0:	b570      	push	{r4, r5, r6, lr}
 80111f2:	4d0d      	ldr	r5, [pc, #52]	; (8011228 <__libc_init_array+0x38>)
 80111f4:	4c0d      	ldr	r4, [pc, #52]	; (801122c <__libc_init_array+0x3c>)
 80111f6:	1b64      	subs	r4, r4, r5
 80111f8:	10a4      	asrs	r4, r4, #2
 80111fa:	2600      	movs	r6, #0
 80111fc:	42a6      	cmp	r6, r4
 80111fe:	d109      	bne.n	8011214 <__libc_init_array+0x24>
 8011200:	4d0b      	ldr	r5, [pc, #44]	; (8011230 <__libc_init_array+0x40>)
 8011202:	4c0c      	ldr	r4, [pc, #48]	; (8011234 <__libc_init_array+0x44>)
 8011204:	f004 fcb6 	bl	8015b74 <_init>
 8011208:	1b64      	subs	r4, r4, r5
 801120a:	10a4      	asrs	r4, r4, #2
 801120c:	2600      	movs	r6, #0
 801120e:	42a6      	cmp	r6, r4
 8011210:	d105      	bne.n	801121e <__libc_init_array+0x2e>
 8011212:	bd70      	pop	{r4, r5, r6, pc}
 8011214:	f855 3b04 	ldr.w	r3, [r5], #4
 8011218:	4798      	blx	r3
 801121a:	3601      	adds	r6, #1
 801121c:	e7ee      	b.n	80111fc <__libc_init_array+0xc>
 801121e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011222:	4798      	blx	r3
 8011224:	3601      	adds	r6, #1
 8011226:	e7f2      	b.n	801120e <__libc_init_array+0x1e>
 8011228:	08029bf0 	.word	0x08029bf0
 801122c:	08029bf0 	.word	0x08029bf0
 8011230:	08029bf0 	.word	0x08029bf0
 8011234:	08029bf4 	.word	0x08029bf4

08011238 <memset>:
 8011238:	4402      	add	r2, r0
 801123a:	4603      	mov	r3, r0
 801123c:	4293      	cmp	r3, r2
 801123e:	d100      	bne.n	8011242 <memset+0xa>
 8011240:	4770      	bx	lr
 8011242:	f803 1b01 	strb.w	r1, [r3], #1
 8011246:	e7f9      	b.n	801123c <memset+0x4>

08011248 <__cvt>:
 8011248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801124c:	ec55 4b10 	vmov	r4, r5, d0
 8011250:	2d00      	cmp	r5, #0
 8011252:	460e      	mov	r6, r1
 8011254:	4619      	mov	r1, r3
 8011256:	462b      	mov	r3, r5
 8011258:	bfbb      	ittet	lt
 801125a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801125e:	461d      	movlt	r5, r3
 8011260:	2300      	movge	r3, #0
 8011262:	232d      	movlt	r3, #45	; 0x2d
 8011264:	700b      	strb	r3, [r1, #0]
 8011266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011268:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801126c:	4691      	mov	r9, r2
 801126e:	f023 0820 	bic.w	r8, r3, #32
 8011272:	bfbc      	itt	lt
 8011274:	4622      	movlt	r2, r4
 8011276:	4614      	movlt	r4, r2
 8011278:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801127c:	d005      	beq.n	801128a <__cvt+0x42>
 801127e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011282:	d100      	bne.n	8011286 <__cvt+0x3e>
 8011284:	3601      	adds	r6, #1
 8011286:	2102      	movs	r1, #2
 8011288:	e000      	b.n	801128c <__cvt+0x44>
 801128a:	2103      	movs	r1, #3
 801128c:	ab03      	add	r3, sp, #12
 801128e:	9301      	str	r3, [sp, #4]
 8011290:	ab02      	add	r3, sp, #8
 8011292:	9300      	str	r3, [sp, #0]
 8011294:	ec45 4b10 	vmov	d0, r4, r5
 8011298:	4653      	mov	r3, sl
 801129a:	4632      	mov	r2, r6
 801129c:	f001 fe44 	bl	8012f28 <_dtoa_r>
 80112a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80112a4:	4607      	mov	r7, r0
 80112a6:	d102      	bne.n	80112ae <__cvt+0x66>
 80112a8:	f019 0f01 	tst.w	r9, #1
 80112ac:	d022      	beq.n	80112f4 <__cvt+0xac>
 80112ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80112b2:	eb07 0906 	add.w	r9, r7, r6
 80112b6:	d110      	bne.n	80112da <__cvt+0x92>
 80112b8:	783b      	ldrb	r3, [r7, #0]
 80112ba:	2b30      	cmp	r3, #48	; 0x30
 80112bc:	d10a      	bne.n	80112d4 <__cvt+0x8c>
 80112be:	2200      	movs	r2, #0
 80112c0:	2300      	movs	r3, #0
 80112c2:	4620      	mov	r0, r4
 80112c4:	4629      	mov	r1, r5
 80112c6:	f7ef fc17 	bl	8000af8 <__aeabi_dcmpeq>
 80112ca:	b918      	cbnz	r0, 80112d4 <__cvt+0x8c>
 80112cc:	f1c6 0601 	rsb	r6, r6, #1
 80112d0:	f8ca 6000 	str.w	r6, [sl]
 80112d4:	f8da 3000 	ldr.w	r3, [sl]
 80112d8:	4499      	add	r9, r3
 80112da:	2200      	movs	r2, #0
 80112dc:	2300      	movs	r3, #0
 80112de:	4620      	mov	r0, r4
 80112e0:	4629      	mov	r1, r5
 80112e2:	f7ef fc09 	bl	8000af8 <__aeabi_dcmpeq>
 80112e6:	b108      	cbz	r0, 80112ec <__cvt+0xa4>
 80112e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80112ec:	2230      	movs	r2, #48	; 0x30
 80112ee:	9b03      	ldr	r3, [sp, #12]
 80112f0:	454b      	cmp	r3, r9
 80112f2:	d307      	bcc.n	8011304 <__cvt+0xbc>
 80112f4:	9b03      	ldr	r3, [sp, #12]
 80112f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80112f8:	1bdb      	subs	r3, r3, r7
 80112fa:	4638      	mov	r0, r7
 80112fc:	6013      	str	r3, [r2, #0]
 80112fe:	b004      	add	sp, #16
 8011300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011304:	1c59      	adds	r1, r3, #1
 8011306:	9103      	str	r1, [sp, #12]
 8011308:	701a      	strb	r2, [r3, #0]
 801130a:	e7f0      	b.n	80112ee <__cvt+0xa6>

0801130c <__exponent>:
 801130c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801130e:	4603      	mov	r3, r0
 8011310:	2900      	cmp	r1, #0
 8011312:	bfb8      	it	lt
 8011314:	4249      	neglt	r1, r1
 8011316:	f803 2b02 	strb.w	r2, [r3], #2
 801131a:	bfb4      	ite	lt
 801131c:	222d      	movlt	r2, #45	; 0x2d
 801131e:	222b      	movge	r2, #43	; 0x2b
 8011320:	2909      	cmp	r1, #9
 8011322:	7042      	strb	r2, [r0, #1]
 8011324:	dd2a      	ble.n	801137c <__exponent+0x70>
 8011326:	f10d 0407 	add.w	r4, sp, #7
 801132a:	46a4      	mov	ip, r4
 801132c:	270a      	movs	r7, #10
 801132e:	46a6      	mov	lr, r4
 8011330:	460a      	mov	r2, r1
 8011332:	fb91 f6f7 	sdiv	r6, r1, r7
 8011336:	fb07 1516 	mls	r5, r7, r6, r1
 801133a:	3530      	adds	r5, #48	; 0x30
 801133c:	2a63      	cmp	r2, #99	; 0x63
 801133e:	f104 34ff 	add.w	r4, r4, #4294967295
 8011342:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011346:	4631      	mov	r1, r6
 8011348:	dcf1      	bgt.n	801132e <__exponent+0x22>
 801134a:	3130      	adds	r1, #48	; 0x30
 801134c:	f1ae 0502 	sub.w	r5, lr, #2
 8011350:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011354:	1c44      	adds	r4, r0, #1
 8011356:	4629      	mov	r1, r5
 8011358:	4561      	cmp	r1, ip
 801135a:	d30a      	bcc.n	8011372 <__exponent+0x66>
 801135c:	f10d 0209 	add.w	r2, sp, #9
 8011360:	eba2 020e 	sub.w	r2, r2, lr
 8011364:	4565      	cmp	r5, ip
 8011366:	bf88      	it	hi
 8011368:	2200      	movhi	r2, #0
 801136a:	4413      	add	r3, r2
 801136c:	1a18      	subs	r0, r3, r0
 801136e:	b003      	add	sp, #12
 8011370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011372:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011376:	f804 2f01 	strb.w	r2, [r4, #1]!
 801137a:	e7ed      	b.n	8011358 <__exponent+0x4c>
 801137c:	2330      	movs	r3, #48	; 0x30
 801137e:	3130      	adds	r1, #48	; 0x30
 8011380:	7083      	strb	r3, [r0, #2]
 8011382:	70c1      	strb	r1, [r0, #3]
 8011384:	1d03      	adds	r3, r0, #4
 8011386:	e7f1      	b.n	801136c <__exponent+0x60>

08011388 <_printf_float>:
 8011388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801138c:	ed2d 8b02 	vpush	{d8}
 8011390:	b08d      	sub	sp, #52	; 0x34
 8011392:	460c      	mov	r4, r1
 8011394:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011398:	4616      	mov	r6, r2
 801139a:	461f      	mov	r7, r3
 801139c:	4605      	mov	r5, r0
 801139e:	f002 ff31 	bl	8014204 <_localeconv_r>
 80113a2:	f8d0 a000 	ldr.w	sl, [r0]
 80113a6:	4650      	mov	r0, sl
 80113a8:	f7ee ff24 	bl	80001f4 <strlen>
 80113ac:	2300      	movs	r3, #0
 80113ae:	930a      	str	r3, [sp, #40]	; 0x28
 80113b0:	6823      	ldr	r3, [r4, #0]
 80113b2:	9305      	str	r3, [sp, #20]
 80113b4:	f8d8 3000 	ldr.w	r3, [r8]
 80113b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80113bc:	3307      	adds	r3, #7
 80113be:	f023 0307 	bic.w	r3, r3, #7
 80113c2:	f103 0208 	add.w	r2, r3, #8
 80113c6:	f8c8 2000 	str.w	r2, [r8]
 80113ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80113d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80113d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80113da:	9307      	str	r3, [sp, #28]
 80113dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80113e0:	ee08 0a10 	vmov	s16, r0
 80113e4:	4b9f      	ldr	r3, [pc, #636]	; (8011664 <_printf_float+0x2dc>)
 80113e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80113ea:	f04f 32ff 	mov.w	r2, #4294967295
 80113ee:	f7ef fbb5 	bl	8000b5c <__aeabi_dcmpun>
 80113f2:	bb88      	cbnz	r0, 8011458 <_printf_float+0xd0>
 80113f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80113f8:	4b9a      	ldr	r3, [pc, #616]	; (8011664 <_printf_float+0x2dc>)
 80113fa:	f04f 32ff 	mov.w	r2, #4294967295
 80113fe:	f7ef fb8f 	bl	8000b20 <__aeabi_dcmple>
 8011402:	bb48      	cbnz	r0, 8011458 <_printf_float+0xd0>
 8011404:	2200      	movs	r2, #0
 8011406:	2300      	movs	r3, #0
 8011408:	4640      	mov	r0, r8
 801140a:	4649      	mov	r1, r9
 801140c:	f7ef fb7e 	bl	8000b0c <__aeabi_dcmplt>
 8011410:	b110      	cbz	r0, 8011418 <_printf_float+0x90>
 8011412:	232d      	movs	r3, #45	; 0x2d
 8011414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011418:	4b93      	ldr	r3, [pc, #588]	; (8011668 <_printf_float+0x2e0>)
 801141a:	4894      	ldr	r0, [pc, #592]	; (801166c <_printf_float+0x2e4>)
 801141c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011420:	bf94      	ite	ls
 8011422:	4698      	movls	r8, r3
 8011424:	4680      	movhi	r8, r0
 8011426:	2303      	movs	r3, #3
 8011428:	6123      	str	r3, [r4, #16]
 801142a:	9b05      	ldr	r3, [sp, #20]
 801142c:	f023 0204 	bic.w	r2, r3, #4
 8011430:	6022      	str	r2, [r4, #0]
 8011432:	f04f 0900 	mov.w	r9, #0
 8011436:	9700      	str	r7, [sp, #0]
 8011438:	4633      	mov	r3, r6
 801143a:	aa0b      	add	r2, sp, #44	; 0x2c
 801143c:	4621      	mov	r1, r4
 801143e:	4628      	mov	r0, r5
 8011440:	f000 f9d8 	bl	80117f4 <_printf_common>
 8011444:	3001      	adds	r0, #1
 8011446:	f040 8090 	bne.w	801156a <_printf_float+0x1e2>
 801144a:	f04f 30ff 	mov.w	r0, #4294967295
 801144e:	b00d      	add	sp, #52	; 0x34
 8011450:	ecbd 8b02 	vpop	{d8}
 8011454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011458:	4642      	mov	r2, r8
 801145a:	464b      	mov	r3, r9
 801145c:	4640      	mov	r0, r8
 801145e:	4649      	mov	r1, r9
 8011460:	f7ef fb7c 	bl	8000b5c <__aeabi_dcmpun>
 8011464:	b140      	cbz	r0, 8011478 <_printf_float+0xf0>
 8011466:	464b      	mov	r3, r9
 8011468:	2b00      	cmp	r3, #0
 801146a:	bfbc      	itt	lt
 801146c:	232d      	movlt	r3, #45	; 0x2d
 801146e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011472:	487f      	ldr	r0, [pc, #508]	; (8011670 <_printf_float+0x2e8>)
 8011474:	4b7f      	ldr	r3, [pc, #508]	; (8011674 <_printf_float+0x2ec>)
 8011476:	e7d1      	b.n	801141c <_printf_float+0x94>
 8011478:	6863      	ldr	r3, [r4, #4]
 801147a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801147e:	9206      	str	r2, [sp, #24]
 8011480:	1c5a      	adds	r2, r3, #1
 8011482:	d13f      	bne.n	8011504 <_printf_float+0x17c>
 8011484:	2306      	movs	r3, #6
 8011486:	6063      	str	r3, [r4, #4]
 8011488:	9b05      	ldr	r3, [sp, #20]
 801148a:	6861      	ldr	r1, [r4, #4]
 801148c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011490:	2300      	movs	r3, #0
 8011492:	9303      	str	r3, [sp, #12]
 8011494:	ab0a      	add	r3, sp, #40	; 0x28
 8011496:	e9cd b301 	strd	fp, r3, [sp, #4]
 801149a:	ab09      	add	r3, sp, #36	; 0x24
 801149c:	ec49 8b10 	vmov	d0, r8, r9
 80114a0:	9300      	str	r3, [sp, #0]
 80114a2:	6022      	str	r2, [r4, #0]
 80114a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80114a8:	4628      	mov	r0, r5
 80114aa:	f7ff fecd 	bl	8011248 <__cvt>
 80114ae:	9b06      	ldr	r3, [sp, #24]
 80114b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80114b2:	2b47      	cmp	r3, #71	; 0x47
 80114b4:	4680      	mov	r8, r0
 80114b6:	d108      	bne.n	80114ca <_printf_float+0x142>
 80114b8:	1cc8      	adds	r0, r1, #3
 80114ba:	db02      	blt.n	80114c2 <_printf_float+0x13a>
 80114bc:	6863      	ldr	r3, [r4, #4]
 80114be:	4299      	cmp	r1, r3
 80114c0:	dd41      	ble.n	8011546 <_printf_float+0x1be>
 80114c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80114c6:	fa5f fb8b 	uxtb.w	fp, fp
 80114ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80114ce:	d820      	bhi.n	8011512 <_printf_float+0x18a>
 80114d0:	3901      	subs	r1, #1
 80114d2:	465a      	mov	r2, fp
 80114d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80114d8:	9109      	str	r1, [sp, #36]	; 0x24
 80114da:	f7ff ff17 	bl	801130c <__exponent>
 80114de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80114e0:	1813      	adds	r3, r2, r0
 80114e2:	2a01      	cmp	r2, #1
 80114e4:	4681      	mov	r9, r0
 80114e6:	6123      	str	r3, [r4, #16]
 80114e8:	dc02      	bgt.n	80114f0 <_printf_float+0x168>
 80114ea:	6822      	ldr	r2, [r4, #0]
 80114ec:	07d2      	lsls	r2, r2, #31
 80114ee:	d501      	bpl.n	80114f4 <_printf_float+0x16c>
 80114f0:	3301      	adds	r3, #1
 80114f2:	6123      	str	r3, [r4, #16]
 80114f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d09c      	beq.n	8011436 <_printf_float+0xae>
 80114fc:	232d      	movs	r3, #45	; 0x2d
 80114fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011502:	e798      	b.n	8011436 <_printf_float+0xae>
 8011504:	9a06      	ldr	r2, [sp, #24]
 8011506:	2a47      	cmp	r2, #71	; 0x47
 8011508:	d1be      	bne.n	8011488 <_printf_float+0x100>
 801150a:	2b00      	cmp	r3, #0
 801150c:	d1bc      	bne.n	8011488 <_printf_float+0x100>
 801150e:	2301      	movs	r3, #1
 8011510:	e7b9      	b.n	8011486 <_printf_float+0xfe>
 8011512:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011516:	d118      	bne.n	801154a <_printf_float+0x1c2>
 8011518:	2900      	cmp	r1, #0
 801151a:	6863      	ldr	r3, [r4, #4]
 801151c:	dd0b      	ble.n	8011536 <_printf_float+0x1ae>
 801151e:	6121      	str	r1, [r4, #16]
 8011520:	b913      	cbnz	r3, 8011528 <_printf_float+0x1a0>
 8011522:	6822      	ldr	r2, [r4, #0]
 8011524:	07d0      	lsls	r0, r2, #31
 8011526:	d502      	bpl.n	801152e <_printf_float+0x1a6>
 8011528:	3301      	adds	r3, #1
 801152a:	440b      	add	r3, r1
 801152c:	6123      	str	r3, [r4, #16]
 801152e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011530:	f04f 0900 	mov.w	r9, #0
 8011534:	e7de      	b.n	80114f4 <_printf_float+0x16c>
 8011536:	b913      	cbnz	r3, 801153e <_printf_float+0x1b6>
 8011538:	6822      	ldr	r2, [r4, #0]
 801153a:	07d2      	lsls	r2, r2, #31
 801153c:	d501      	bpl.n	8011542 <_printf_float+0x1ba>
 801153e:	3302      	adds	r3, #2
 8011540:	e7f4      	b.n	801152c <_printf_float+0x1a4>
 8011542:	2301      	movs	r3, #1
 8011544:	e7f2      	b.n	801152c <_printf_float+0x1a4>
 8011546:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801154a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801154c:	4299      	cmp	r1, r3
 801154e:	db05      	blt.n	801155c <_printf_float+0x1d4>
 8011550:	6823      	ldr	r3, [r4, #0]
 8011552:	6121      	str	r1, [r4, #16]
 8011554:	07d8      	lsls	r0, r3, #31
 8011556:	d5ea      	bpl.n	801152e <_printf_float+0x1a6>
 8011558:	1c4b      	adds	r3, r1, #1
 801155a:	e7e7      	b.n	801152c <_printf_float+0x1a4>
 801155c:	2900      	cmp	r1, #0
 801155e:	bfd4      	ite	le
 8011560:	f1c1 0202 	rsble	r2, r1, #2
 8011564:	2201      	movgt	r2, #1
 8011566:	4413      	add	r3, r2
 8011568:	e7e0      	b.n	801152c <_printf_float+0x1a4>
 801156a:	6823      	ldr	r3, [r4, #0]
 801156c:	055a      	lsls	r2, r3, #21
 801156e:	d407      	bmi.n	8011580 <_printf_float+0x1f8>
 8011570:	6923      	ldr	r3, [r4, #16]
 8011572:	4642      	mov	r2, r8
 8011574:	4631      	mov	r1, r6
 8011576:	4628      	mov	r0, r5
 8011578:	47b8      	blx	r7
 801157a:	3001      	adds	r0, #1
 801157c:	d12c      	bne.n	80115d8 <_printf_float+0x250>
 801157e:	e764      	b.n	801144a <_printf_float+0xc2>
 8011580:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011584:	f240 80e0 	bls.w	8011748 <_printf_float+0x3c0>
 8011588:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801158c:	2200      	movs	r2, #0
 801158e:	2300      	movs	r3, #0
 8011590:	f7ef fab2 	bl	8000af8 <__aeabi_dcmpeq>
 8011594:	2800      	cmp	r0, #0
 8011596:	d034      	beq.n	8011602 <_printf_float+0x27a>
 8011598:	4a37      	ldr	r2, [pc, #220]	; (8011678 <_printf_float+0x2f0>)
 801159a:	2301      	movs	r3, #1
 801159c:	4631      	mov	r1, r6
 801159e:	4628      	mov	r0, r5
 80115a0:	47b8      	blx	r7
 80115a2:	3001      	adds	r0, #1
 80115a4:	f43f af51 	beq.w	801144a <_printf_float+0xc2>
 80115a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80115ac:	429a      	cmp	r2, r3
 80115ae:	db02      	blt.n	80115b6 <_printf_float+0x22e>
 80115b0:	6823      	ldr	r3, [r4, #0]
 80115b2:	07d8      	lsls	r0, r3, #31
 80115b4:	d510      	bpl.n	80115d8 <_printf_float+0x250>
 80115b6:	ee18 3a10 	vmov	r3, s16
 80115ba:	4652      	mov	r2, sl
 80115bc:	4631      	mov	r1, r6
 80115be:	4628      	mov	r0, r5
 80115c0:	47b8      	blx	r7
 80115c2:	3001      	adds	r0, #1
 80115c4:	f43f af41 	beq.w	801144a <_printf_float+0xc2>
 80115c8:	f04f 0800 	mov.w	r8, #0
 80115cc:	f104 091a 	add.w	r9, r4, #26
 80115d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115d2:	3b01      	subs	r3, #1
 80115d4:	4543      	cmp	r3, r8
 80115d6:	dc09      	bgt.n	80115ec <_printf_float+0x264>
 80115d8:	6823      	ldr	r3, [r4, #0]
 80115da:	079b      	lsls	r3, r3, #30
 80115dc:	f100 8105 	bmi.w	80117ea <_printf_float+0x462>
 80115e0:	68e0      	ldr	r0, [r4, #12]
 80115e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115e4:	4298      	cmp	r0, r3
 80115e6:	bfb8      	it	lt
 80115e8:	4618      	movlt	r0, r3
 80115ea:	e730      	b.n	801144e <_printf_float+0xc6>
 80115ec:	2301      	movs	r3, #1
 80115ee:	464a      	mov	r2, r9
 80115f0:	4631      	mov	r1, r6
 80115f2:	4628      	mov	r0, r5
 80115f4:	47b8      	blx	r7
 80115f6:	3001      	adds	r0, #1
 80115f8:	f43f af27 	beq.w	801144a <_printf_float+0xc2>
 80115fc:	f108 0801 	add.w	r8, r8, #1
 8011600:	e7e6      	b.n	80115d0 <_printf_float+0x248>
 8011602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011604:	2b00      	cmp	r3, #0
 8011606:	dc39      	bgt.n	801167c <_printf_float+0x2f4>
 8011608:	4a1b      	ldr	r2, [pc, #108]	; (8011678 <_printf_float+0x2f0>)
 801160a:	2301      	movs	r3, #1
 801160c:	4631      	mov	r1, r6
 801160e:	4628      	mov	r0, r5
 8011610:	47b8      	blx	r7
 8011612:	3001      	adds	r0, #1
 8011614:	f43f af19 	beq.w	801144a <_printf_float+0xc2>
 8011618:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801161c:	4313      	orrs	r3, r2
 801161e:	d102      	bne.n	8011626 <_printf_float+0x29e>
 8011620:	6823      	ldr	r3, [r4, #0]
 8011622:	07d9      	lsls	r1, r3, #31
 8011624:	d5d8      	bpl.n	80115d8 <_printf_float+0x250>
 8011626:	ee18 3a10 	vmov	r3, s16
 801162a:	4652      	mov	r2, sl
 801162c:	4631      	mov	r1, r6
 801162e:	4628      	mov	r0, r5
 8011630:	47b8      	blx	r7
 8011632:	3001      	adds	r0, #1
 8011634:	f43f af09 	beq.w	801144a <_printf_float+0xc2>
 8011638:	f04f 0900 	mov.w	r9, #0
 801163c:	f104 0a1a 	add.w	sl, r4, #26
 8011640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011642:	425b      	negs	r3, r3
 8011644:	454b      	cmp	r3, r9
 8011646:	dc01      	bgt.n	801164c <_printf_float+0x2c4>
 8011648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801164a:	e792      	b.n	8011572 <_printf_float+0x1ea>
 801164c:	2301      	movs	r3, #1
 801164e:	4652      	mov	r2, sl
 8011650:	4631      	mov	r1, r6
 8011652:	4628      	mov	r0, r5
 8011654:	47b8      	blx	r7
 8011656:	3001      	adds	r0, #1
 8011658:	f43f aef7 	beq.w	801144a <_printf_float+0xc2>
 801165c:	f109 0901 	add.w	r9, r9, #1
 8011660:	e7ee      	b.n	8011640 <_printf_float+0x2b8>
 8011662:	bf00      	nop
 8011664:	7fefffff 	.word	0x7fefffff
 8011668:	080296dc 	.word	0x080296dc
 801166c:	080296e0 	.word	0x080296e0
 8011670:	080296e8 	.word	0x080296e8
 8011674:	080296e4 	.word	0x080296e4
 8011678:	080296ec 	.word	0x080296ec
 801167c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801167e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011680:	429a      	cmp	r2, r3
 8011682:	bfa8      	it	ge
 8011684:	461a      	movge	r2, r3
 8011686:	2a00      	cmp	r2, #0
 8011688:	4691      	mov	r9, r2
 801168a:	dc37      	bgt.n	80116fc <_printf_float+0x374>
 801168c:	f04f 0b00 	mov.w	fp, #0
 8011690:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011694:	f104 021a 	add.w	r2, r4, #26
 8011698:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801169a:	9305      	str	r3, [sp, #20]
 801169c:	eba3 0309 	sub.w	r3, r3, r9
 80116a0:	455b      	cmp	r3, fp
 80116a2:	dc33      	bgt.n	801170c <_printf_float+0x384>
 80116a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80116a8:	429a      	cmp	r2, r3
 80116aa:	db3b      	blt.n	8011724 <_printf_float+0x39c>
 80116ac:	6823      	ldr	r3, [r4, #0]
 80116ae:	07da      	lsls	r2, r3, #31
 80116b0:	d438      	bmi.n	8011724 <_printf_float+0x39c>
 80116b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80116b4:	9b05      	ldr	r3, [sp, #20]
 80116b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80116b8:	1ad3      	subs	r3, r2, r3
 80116ba:	eba2 0901 	sub.w	r9, r2, r1
 80116be:	4599      	cmp	r9, r3
 80116c0:	bfa8      	it	ge
 80116c2:	4699      	movge	r9, r3
 80116c4:	f1b9 0f00 	cmp.w	r9, #0
 80116c8:	dc35      	bgt.n	8011736 <_printf_float+0x3ae>
 80116ca:	f04f 0800 	mov.w	r8, #0
 80116ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80116d2:	f104 0a1a 	add.w	sl, r4, #26
 80116d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80116da:	1a9b      	subs	r3, r3, r2
 80116dc:	eba3 0309 	sub.w	r3, r3, r9
 80116e0:	4543      	cmp	r3, r8
 80116e2:	f77f af79 	ble.w	80115d8 <_printf_float+0x250>
 80116e6:	2301      	movs	r3, #1
 80116e8:	4652      	mov	r2, sl
 80116ea:	4631      	mov	r1, r6
 80116ec:	4628      	mov	r0, r5
 80116ee:	47b8      	blx	r7
 80116f0:	3001      	adds	r0, #1
 80116f2:	f43f aeaa 	beq.w	801144a <_printf_float+0xc2>
 80116f6:	f108 0801 	add.w	r8, r8, #1
 80116fa:	e7ec      	b.n	80116d6 <_printf_float+0x34e>
 80116fc:	4613      	mov	r3, r2
 80116fe:	4631      	mov	r1, r6
 8011700:	4642      	mov	r2, r8
 8011702:	4628      	mov	r0, r5
 8011704:	47b8      	blx	r7
 8011706:	3001      	adds	r0, #1
 8011708:	d1c0      	bne.n	801168c <_printf_float+0x304>
 801170a:	e69e      	b.n	801144a <_printf_float+0xc2>
 801170c:	2301      	movs	r3, #1
 801170e:	4631      	mov	r1, r6
 8011710:	4628      	mov	r0, r5
 8011712:	9205      	str	r2, [sp, #20]
 8011714:	47b8      	blx	r7
 8011716:	3001      	adds	r0, #1
 8011718:	f43f ae97 	beq.w	801144a <_printf_float+0xc2>
 801171c:	9a05      	ldr	r2, [sp, #20]
 801171e:	f10b 0b01 	add.w	fp, fp, #1
 8011722:	e7b9      	b.n	8011698 <_printf_float+0x310>
 8011724:	ee18 3a10 	vmov	r3, s16
 8011728:	4652      	mov	r2, sl
 801172a:	4631      	mov	r1, r6
 801172c:	4628      	mov	r0, r5
 801172e:	47b8      	blx	r7
 8011730:	3001      	adds	r0, #1
 8011732:	d1be      	bne.n	80116b2 <_printf_float+0x32a>
 8011734:	e689      	b.n	801144a <_printf_float+0xc2>
 8011736:	9a05      	ldr	r2, [sp, #20]
 8011738:	464b      	mov	r3, r9
 801173a:	4442      	add	r2, r8
 801173c:	4631      	mov	r1, r6
 801173e:	4628      	mov	r0, r5
 8011740:	47b8      	blx	r7
 8011742:	3001      	adds	r0, #1
 8011744:	d1c1      	bne.n	80116ca <_printf_float+0x342>
 8011746:	e680      	b.n	801144a <_printf_float+0xc2>
 8011748:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801174a:	2a01      	cmp	r2, #1
 801174c:	dc01      	bgt.n	8011752 <_printf_float+0x3ca>
 801174e:	07db      	lsls	r3, r3, #31
 8011750:	d538      	bpl.n	80117c4 <_printf_float+0x43c>
 8011752:	2301      	movs	r3, #1
 8011754:	4642      	mov	r2, r8
 8011756:	4631      	mov	r1, r6
 8011758:	4628      	mov	r0, r5
 801175a:	47b8      	blx	r7
 801175c:	3001      	adds	r0, #1
 801175e:	f43f ae74 	beq.w	801144a <_printf_float+0xc2>
 8011762:	ee18 3a10 	vmov	r3, s16
 8011766:	4652      	mov	r2, sl
 8011768:	4631      	mov	r1, r6
 801176a:	4628      	mov	r0, r5
 801176c:	47b8      	blx	r7
 801176e:	3001      	adds	r0, #1
 8011770:	f43f ae6b 	beq.w	801144a <_printf_float+0xc2>
 8011774:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011778:	2200      	movs	r2, #0
 801177a:	2300      	movs	r3, #0
 801177c:	f7ef f9bc 	bl	8000af8 <__aeabi_dcmpeq>
 8011780:	b9d8      	cbnz	r0, 80117ba <_printf_float+0x432>
 8011782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011784:	f108 0201 	add.w	r2, r8, #1
 8011788:	3b01      	subs	r3, #1
 801178a:	4631      	mov	r1, r6
 801178c:	4628      	mov	r0, r5
 801178e:	47b8      	blx	r7
 8011790:	3001      	adds	r0, #1
 8011792:	d10e      	bne.n	80117b2 <_printf_float+0x42a>
 8011794:	e659      	b.n	801144a <_printf_float+0xc2>
 8011796:	2301      	movs	r3, #1
 8011798:	4652      	mov	r2, sl
 801179a:	4631      	mov	r1, r6
 801179c:	4628      	mov	r0, r5
 801179e:	47b8      	blx	r7
 80117a0:	3001      	adds	r0, #1
 80117a2:	f43f ae52 	beq.w	801144a <_printf_float+0xc2>
 80117a6:	f108 0801 	add.w	r8, r8, #1
 80117aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117ac:	3b01      	subs	r3, #1
 80117ae:	4543      	cmp	r3, r8
 80117b0:	dcf1      	bgt.n	8011796 <_printf_float+0x40e>
 80117b2:	464b      	mov	r3, r9
 80117b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80117b8:	e6dc      	b.n	8011574 <_printf_float+0x1ec>
 80117ba:	f04f 0800 	mov.w	r8, #0
 80117be:	f104 0a1a 	add.w	sl, r4, #26
 80117c2:	e7f2      	b.n	80117aa <_printf_float+0x422>
 80117c4:	2301      	movs	r3, #1
 80117c6:	4642      	mov	r2, r8
 80117c8:	e7df      	b.n	801178a <_printf_float+0x402>
 80117ca:	2301      	movs	r3, #1
 80117cc:	464a      	mov	r2, r9
 80117ce:	4631      	mov	r1, r6
 80117d0:	4628      	mov	r0, r5
 80117d2:	47b8      	blx	r7
 80117d4:	3001      	adds	r0, #1
 80117d6:	f43f ae38 	beq.w	801144a <_printf_float+0xc2>
 80117da:	f108 0801 	add.w	r8, r8, #1
 80117de:	68e3      	ldr	r3, [r4, #12]
 80117e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80117e2:	1a5b      	subs	r3, r3, r1
 80117e4:	4543      	cmp	r3, r8
 80117e6:	dcf0      	bgt.n	80117ca <_printf_float+0x442>
 80117e8:	e6fa      	b.n	80115e0 <_printf_float+0x258>
 80117ea:	f04f 0800 	mov.w	r8, #0
 80117ee:	f104 0919 	add.w	r9, r4, #25
 80117f2:	e7f4      	b.n	80117de <_printf_float+0x456>

080117f4 <_printf_common>:
 80117f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117f8:	4616      	mov	r6, r2
 80117fa:	4699      	mov	r9, r3
 80117fc:	688a      	ldr	r2, [r1, #8]
 80117fe:	690b      	ldr	r3, [r1, #16]
 8011800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011804:	4293      	cmp	r3, r2
 8011806:	bfb8      	it	lt
 8011808:	4613      	movlt	r3, r2
 801180a:	6033      	str	r3, [r6, #0]
 801180c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011810:	4607      	mov	r7, r0
 8011812:	460c      	mov	r4, r1
 8011814:	b10a      	cbz	r2, 801181a <_printf_common+0x26>
 8011816:	3301      	adds	r3, #1
 8011818:	6033      	str	r3, [r6, #0]
 801181a:	6823      	ldr	r3, [r4, #0]
 801181c:	0699      	lsls	r1, r3, #26
 801181e:	bf42      	ittt	mi
 8011820:	6833      	ldrmi	r3, [r6, #0]
 8011822:	3302      	addmi	r3, #2
 8011824:	6033      	strmi	r3, [r6, #0]
 8011826:	6825      	ldr	r5, [r4, #0]
 8011828:	f015 0506 	ands.w	r5, r5, #6
 801182c:	d106      	bne.n	801183c <_printf_common+0x48>
 801182e:	f104 0a19 	add.w	sl, r4, #25
 8011832:	68e3      	ldr	r3, [r4, #12]
 8011834:	6832      	ldr	r2, [r6, #0]
 8011836:	1a9b      	subs	r3, r3, r2
 8011838:	42ab      	cmp	r3, r5
 801183a:	dc26      	bgt.n	801188a <_printf_common+0x96>
 801183c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011840:	1e13      	subs	r3, r2, #0
 8011842:	6822      	ldr	r2, [r4, #0]
 8011844:	bf18      	it	ne
 8011846:	2301      	movne	r3, #1
 8011848:	0692      	lsls	r2, r2, #26
 801184a:	d42b      	bmi.n	80118a4 <_printf_common+0xb0>
 801184c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011850:	4649      	mov	r1, r9
 8011852:	4638      	mov	r0, r7
 8011854:	47c0      	blx	r8
 8011856:	3001      	adds	r0, #1
 8011858:	d01e      	beq.n	8011898 <_printf_common+0xa4>
 801185a:	6823      	ldr	r3, [r4, #0]
 801185c:	68e5      	ldr	r5, [r4, #12]
 801185e:	6832      	ldr	r2, [r6, #0]
 8011860:	f003 0306 	and.w	r3, r3, #6
 8011864:	2b04      	cmp	r3, #4
 8011866:	bf08      	it	eq
 8011868:	1aad      	subeq	r5, r5, r2
 801186a:	68a3      	ldr	r3, [r4, #8]
 801186c:	6922      	ldr	r2, [r4, #16]
 801186e:	bf0c      	ite	eq
 8011870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011874:	2500      	movne	r5, #0
 8011876:	4293      	cmp	r3, r2
 8011878:	bfc4      	itt	gt
 801187a:	1a9b      	subgt	r3, r3, r2
 801187c:	18ed      	addgt	r5, r5, r3
 801187e:	2600      	movs	r6, #0
 8011880:	341a      	adds	r4, #26
 8011882:	42b5      	cmp	r5, r6
 8011884:	d11a      	bne.n	80118bc <_printf_common+0xc8>
 8011886:	2000      	movs	r0, #0
 8011888:	e008      	b.n	801189c <_printf_common+0xa8>
 801188a:	2301      	movs	r3, #1
 801188c:	4652      	mov	r2, sl
 801188e:	4649      	mov	r1, r9
 8011890:	4638      	mov	r0, r7
 8011892:	47c0      	blx	r8
 8011894:	3001      	adds	r0, #1
 8011896:	d103      	bne.n	80118a0 <_printf_common+0xac>
 8011898:	f04f 30ff 	mov.w	r0, #4294967295
 801189c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118a0:	3501      	adds	r5, #1
 80118a2:	e7c6      	b.n	8011832 <_printf_common+0x3e>
 80118a4:	18e1      	adds	r1, r4, r3
 80118a6:	1c5a      	adds	r2, r3, #1
 80118a8:	2030      	movs	r0, #48	; 0x30
 80118aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80118ae:	4422      	add	r2, r4
 80118b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80118b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80118b8:	3302      	adds	r3, #2
 80118ba:	e7c7      	b.n	801184c <_printf_common+0x58>
 80118bc:	2301      	movs	r3, #1
 80118be:	4622      	mov	r2, r4
 80118c0:	4649      	mov	r1, r9
 80118c2:	4638      	mov	r0, r7
 80118c4:	47c0      	blx	r8
 80118c6:	3001      	adds	r0, #1
 80118c8:	d0e6      	beq.n	8011898 <_printf_common+0xa4>
 80118ca:	3601      	adds	r6, #1
 80118cc:	e7d9      	b.n	8011882 <_printf_common+0x8e>
	...

080118d0 <_printf_i>:
 80118d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80118d4:	460c      	mov	r4, r1
 80118d6:	4691      	mov	r9, r2
 80118d8:	7e27      	ldrb	r7, [r4, #24]
 80118da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80118dc:	2f78      	cmp	r7, #120	; 0x78
 80118de:	4680      	mov	r8, r0
 80118e0:	469a      	mov	sl, r3
 80118e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80118e6:	d807      	bhi.n	80118f8 <_printf_i+0x28>
 80118e8:	2f62      	cmp	r7, #98	; 0x62
 80118ea:	d80a      	bhi.n	8011902 <_printf_i+0x32>
 80118ec:	2f00      	cmp	r7, #0
 80118ee:	f000 80d8 	beq.w	8011aa2 <_printf_i+0x1d2>
 80118f2:	2f58      	cmp	r7, #88	; 0x58
 80118f4:	f000 80a3 	beq.w	8011a3e <_printf_i+0x16e>
 80118f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80118fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011900:	e03a      	b.n	8011978 <_printf_i+0xa8>
 8011902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011906:	2b15      	cmp	r3, #21
 8011908:	d8f6      	bhi.n	80118f8 <_printf_i+0x28>
 801190a:	a001      	add	r0, pc, #4	; (adr r0, 8011910 <_printf_i+0x40>)
 801190c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011910:	08011969 	.word	0x08011969
 8011914:	0801197d 	.word	0x0801197d
 8011918:	080118f9 	.word	0x080118f9
 801191c:	080118f9 	.word	0x080118f9
 8011920:	080118f9 	.word	0x080118f9
 8011924:	080118f9 	.word	0x080118f9
 8011928:	0801197d 	.word	0x0801197d
 801192c:	080118f9 	.word	0x080118f9
 8011930:	080118f9 	.word	0x080118f9
 8011934:	080118f9 	.word	0x080118f9
 8011938:	080118f9 	.word	0x080118f9
 801193c:	08011a89 	.word	0x08011a89
 8011940:	080119ad 	.word	0x080119ad
 8011944:	08011a6b 	.word	0x08011a6b
 8011948:	080118f9 	.word	0x080118f9
 801194c:	080118f9 	.word	0x080118f9
 8011950:	08011aab 	.word	0x08011aab
 8011954:	080118f9 	.word	0x080118f9
 8011958:	080119ad 	.word	0x080119ad
 801195c:	080118f9 	.word	0x080118f9
 8011960:	080118f9 	.word	0x080118f9
 8011964:	08011a73 	.word	0x08011a73
 8011968:	680b      	ldr	r3, [r1, #0]
 801196a:	1d1a      	adds	r2, r3, #4
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	600a      	str	r2, [r1, #0]
 8011970:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011978:	2301      	movs	r3, #1
 801197a:	e0a3      	b.n	8011ac4 <_printf_i+0x1f4>
 801197c:	6825      	ldr	r5, [r4, #0]
 801197e:	6808      	ldr	r0, [r1, #0]
 8011980:	062e      	lsls	r6, r5, #24
 8011982:	f100 0304 	add.w	r3, r0, #4
 8011986:	d50a      	bpl.n	801199e <_printf_i+0xce>
 8011988:	6805      	ldr	r5, [r0, #0]
 801198a:	600b      	str	r3, [r1, #0]
 801198c:	2d00      	cmp	r5, #0
 801198e:	da03      	bge.n	8011998 <_printf_i+0xc8>
 8011990:	232d      	movs	r3, #45	; 0x2d
 8011992:	426d      	negs	r5, r5
 8011994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011998:	485e      	ldr	r0, [pc, #376]	; (8011b14 <_printf_i+0x244>)
 801199a:	230a      	movs	r3, #10
 801199c:	e019      	b.n	80119d2 <_printf_i+0x102>
 801199e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80119a2:	6805      	ldr	r5, [r0, #0]
 80119a4:	600b      	str	r3, [r1, #0]
 80119a6:	bf18      	it	ne
 80119a8:	b22d      	sxthne	r5, r5
 80119aa:	e7ef      	b.n	801198c <_printf_i+0xbc>
 80119ac:	680b      	ldr	r3, [r1, #0]
 80119ae:	6825      	ldr	r5, [r4, #0]
 80119b0:	1d18      	adds	r0, r3, #4
 80119b2:	6008      	str	r0, [r1, #0]
 80119b4:	0628      	lsls	r0, r5, #24
 80119b6:	d501      	bpl.n	80119bc <_printf_i+0xec>
 80119b8:	681d      	ldr	r5, [r3, #0]
 80119ba:	e002      	b.n	80119c2 <_printf_i+0xf2>
 80119bc:	0669      	lsls	r1, r5, #25
 80119be:	d5fb      	bpl.n	80119b8 <_printf_i+0xe8>
 80119c0:	881d      	ldrh	r5, [r3, #0]
 80119c2:	4854      	ldr	r0, [pc, #336]	; (8011b14 <_printf_i+0x244>)
 80119c4:	2f6f      	cmp	r7, #111	; 0x6f
 80119c6:	bf0c      	ite	eq
 80119c8:	2308      	moveq	r3, #8
 80119ca:	230a      	movne	r3, #10
 80119cc:	2100      	movs	r1, #0
 80119ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80119d2:	6866      	ldr	r6, [r4, #4]
 80119d4:	60a6      	str	r6, [r4, #8]
 80119d6:	2e00      	cmp	r6, #0
 80119d8:	bfa2      	ittt	ge
 80119da:	6821      	ldrge	r1, [r4, #0]
 80119dc:	f021 0104 	bicge.w	r1, r1, #4
 80119e0:	6021      	strge	r1, [r4, #0]
 80119e2:	b90d      	cbnz	r5, 80119e8 <_printf_i+0x118>
 80119e4:	2e00      	cmp	r6, #0
 80119e6:	d04d      	beq.n	8011a84 <_printf_i+0x1b4>
 80119e8:	4616      	mov	r6, r2
 80119ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80119ee:	fb03 5711 	mls	r7, r3, r1, r5
 80119f2:	5dc7      	ldrb	r7, [r0, r7]
 80119f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80119f8:	462f      	mov	r7, r5
 80119fa:	42bb      	cmp	r3, r7
 80119fc:	460d      	mov	r5, r1
 80119fe:	d9f4      	bls.n	80119ea <_printf_i+0x11a>
 8011a00:	2b08      	cmp	r3, #8
 8011a02:	d10b      	bne.n	8011a1c <_printf_i+0x14c>
 8011a04:	6823      	ldr	r3, [r4, #0]
 8011a06:	07df      	lsls	r7, r3, #31
 8011a08:	d508      	bpl.n	8011a1c <_printf_i+0x14c>
 8011a0a:	6923      	ldr	r3, [r4, #16]
 8011a0c:	6861      	ldr	r1, [r4, #4]
 8011a0e:	4299      	cmp	r1, r3
 8011a10:	bfde      	ittt	le
 8011a12:	2330      	movle	r3, #48	; 0x30
 8011a14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011a18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011a1c:	1b92      	subs	r2, r2, r6
 8011a1e:	6122      	str	r2, [r4, #16]
 8011a20:	f8cd a000 	str.w	sl, [sp]
 8011a24:	464b      	mov	r3, r9
 8011a26:	aa03      	add	r2, sp, #12
 8011a28:	4621      	mov	r1, r4
 8011a2a:	4640      	mov	r0, r8
 8011a2c:	f7ff fee2 	bl	80117f4 <_printf_common>
 8011a30:	3001      	adds	r0, #1
 8011a32:	d14c      	bne.n	8011ace <_printf_i+0x1fe>
 8011a34:	f04f 30ff 	mov.w	r0, #4294967295
 8011a38:	b004      	add	sp, #16
 8011a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a3e:	4835      	ldr	r0, [pc, #212]	; (8011b14 <_printf_i+0x244>)
 8011a40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011a44:	6823      	ldr	r3, [r4, #0]
 8011a46:	680e      	ldr	r6, [r1, #0]
 8011a48:	061f      	lsls	r7, r3, #24
 8011a4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8011a4e:	600e      	str	r6, [r1, #0]
 8011a50:	d514      	bpl.n	8011a7c <_printf_i+0x1ac>
 8011a52:	07d9      	lsls	r1, r3, #31
 8011a54:	bf44      	itt	mi
 8011a56:	f043 0320 	orrmi.w	r3, r3, #32
 8011a5a:	6023      	strmi	r3, [r4, #0]
 8011a5c:	b91d      	cbnz	r5, 8011a66 <_printf_i+0x196>
 8011a5e:	6823      	ldr	r3, [r4, #0]
 8011a60:	f023 0320 	bic.w	r3, r3, #32
 8011a64:	6023      	str	r3, [r4, #0]
 8011a66:	2310      	movs	r3, #16
 8011a68:	e7b0      	b.n	80119cc <_printf_i+0xfc>
 8011a6a:	6823      	ldr	r3, [r4, #0]
 8011a6c:	f043 0320 	orr.w	r3, r3, #32
 8011a70:	6023      	str	r3, [r4, #0]
 8011a72:	2378      	movs	r3, #120	; 0x78
 8011a74:	4828      	ldr	r0, [pc, #160]	; (8011b18 <_printf_i+0x248>)
 8011a76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011a7a:	e7e3      	b.n	8011a44 <_printf_i+0x174>
 8011a7c:	065e      	lsls	r6, r3, #25
 8011a7e:	bf48      	it	mi
 8011a80:	b2ad      	uxthmi	r5, r5
 8011a82:	e7e6      	b.n	8011a52 <_printf_i+0x182>
 8011a84:	4616      	mov	r6, r2
 8011a86:	e7bb      	b.n	8011a00 <_printf_i+0x130>
 8011a88:	680b      	ldr	r3, [r1, #0]
 8011a8a:	6826      	ldr	r6, [r4, #0]
 8011a8c:	6960      	ldr	r0, [r4, #20]
 8011a8e:	1d1d      	adds	r5, r3, #4
 8011a90:	600d      	str	r5, [r1, #0]
 8011a92:	0635      	lsls	r5, r6, #24
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	d501      	bpl.n	8011a9c <_printf_i+0x1cc>
 8011a98:	6018      	str	r0, [r3, #0]
 8011a9a:	e002      	b.n	8011aa2 <_printf_i+0x1d2>
 8011a9c:	0671      	lsls	r1, r6, #25
 8011a9e:	d5fb      	bpl.n	8011a98 <_printf_i+0x1c8>
 8011aa0:	8018      	strh	r0, [r3, #0]
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	6123      	str	r3, [r4, #16]
 8011aa6:	4616      	mov	r6, r2
 8011aa8:	e7ba      	b.n	8011a20 <_printf_i+0x150>
 8011aaa:	680b      	ldr	r3, [r1, #0]
 8011aac:	1d1a      	adds	r2, r3, #4
 8011aae:	600a      	str	r2, [r1, #0]
 8011ab0:	681e      	ldr	r6, [r3, #0]
 8011ab2:	6862      	ldr	r2, [r4, #4]
 8011ab4:	2100      	movs	r1, #0
 8011ab6:	4630      	mov	r0, r6
 8011ab8:	f7ee fbaa 	bl	8000210 <memchr>
 8011abc:	b108      	cbz	r0, 8011ac2 <_printf_i+0x1f2>
 8011abe:	1b80      	subs	r0, r0, r6
 8011ac0:	6060      	str	r0, [r4, #4]
 8011ac2:	6863      	ldr	r3, [r4, #4]
 8011ac4:	6123      	str	r3, [r4, #16]
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011acc:	e7a8      	b.n	8011a20 <_printf_i+0x150>
 8011ace:	6923      	ldr	r3, [r4, #16]
 8011ad0:	4632      	mov	r2, r6
 8011ad2:	4649      	mov	r1, r9
 8011ad4:	4640      	mov	r0, r8
 8011ad6:	47d0      	blx	sl
 8011ad8:	3001      	adds	r0, #1
 8011ada:	d0ab      	beq.n	8011a34 <_printf_i+0x164>
 8011adc:	6823      	ldr	r3, [r4, #0]
 8011ade:	079b      	lsls	r3, r3, #30
 8011ae0:	d413      	bmi.n	8011b0a <_printf_i+0x23a>
 8011ae2:	68e0      	ldr	r0, [r4, #12]
 8011ae4:	9b03      	ldr	r3, [sp, #12]
 8011ae6:	4298      	cmp	r0, r3
 8011ae8:	bfb8      	it	lt
 8011aea:	4618      	movlt	r0, r3
 8011aec:	e7a4      	b.n	8011a38 <_printf_i+0x168>
 8011aee:	2301      	movs	r3, #1
 8011af0:	4632      	mov	r2, r6
 8011af2:	4649      	mov	r1, r9
 8011af4:	4640      	mov	r0, r8
 8011af6:	47d0      	blx	sl
 8011af8:	3001      	adds	r0, #1
 8011afa:	d09b      	beq.n	8011a34 <_printf_i+0x164>
 8011afc:	3501      	adds	r5, #1
 8011afe:	68e3      	ldr	r3, [r4, #12]
 8011b00:	9903      	ldr	r1, [sp, #12]
 8011b02:	1a5b      	subs	r3, r3, r1
 8011b04:	42ab      	cmp	r3, r5
 8011b06:	dcf2      	bgt.n	8011aee <_printf_i+0x21e>
 8011b08:	e7eb      	b.n	8011ae2 <_printf_i+0x212>
 8011b0a:	2500      	movs	r5, #0
 8011b0c:	f104 0619 	add.w	r6, r4, #25
 8011b10:	e7f5      	b.n	8011afe <_printf_i+0x22e>
 8011b12:	bf00      	nop
 8011b14:	080296ee 	.word	0x080296ee
 8011b18:	080296ff 	.word	0x080296ff

08011b1c <_scanf_float>:
 8011b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b20:	b087      	sub	sp, #28
 8011b22:	4617      	mov	r7, r2
 8011b24:	9303      	str	r3, [sp, #12]
 8011b26:	688b      	ldr	r3, [r1, #8]
 8011b28:	1e5a      	subs	r2, r3, #1
 8011b2a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011b2e:	bf83      	ittte	hi
 8011b30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011b34:	195b      	addhi	r3, r3, r5
 8011b36:	9302      	strhi	r3, [sp, #8]
 8011b38:	2300      	movls	r3, #0
 8011b3a:	bf86      	itte	hi
 8011b3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011b40:	608b      	strhi	r3, [r1, #8]
 8011b42:	9302      	strls	r3, [sp, #8]
 8011b44:	680b      	ldr	r3, [r1, #0]
 8011b46:	468b      	mov	fp, r1
 8011b48:	2500      	movs	r5, #0
 8011b4a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011b4e:	f84b 3b1c 	str.w	r3, [fp], #28
 8011b52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011b56:	4680      	mov	r8, r0
 8011b58:	460c      	mov	r4, r1
 8011b5a:	465e      	mov	r6, fp
 8011b5c:	46aa      	mov	sl, r5
 8011b5e:	46a9      	mov	r9, r5
 8011b60:	9501      	str	r5, [sp, #4]
 8011b62:	68a2      	ldr	r2, [r4, #8]
 8011b64:	b152      	cbz	r2, 8011b7c <_scanf_float+0x60>
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	781b      	ldrb	r3, [r3, #0]
 8011b6a:	2b4e      	cmp	r3, #78	; 0x4e
 8011b6c:	d864      	bhi.n	8011c38 <_scanf_float+0x11c>
 8011b6e:	2b40      	cmp	r3, #64	; 0x40
 8011b70:	d83c      	bhi.n	8011bec <_scanf_float+0xd0>
 8011b72:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8011b76:	b2c8      	uxtb	r0, r1
 8011b78:	280e      	cmp	r0, #14
 8011b7a:	d93a      	bls.n	8011bf2 <_scanf_float+0xd6>
 8011b7c:	f1b9 0f00 	cmp.w	r9, #0
 8011b80:	d003      	beq.n	8011b8a <_scanf_float+0x6e>
 8011b82:	6823      	ldr	r3, [r4, #0]
 8011b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011b88:	6023      	str	r3, [r4, #0]
 8011b8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011b8e:	f1ba 0f01 	cmp.w	sl, #1
 8011b92:	f200 8113 	bhi.w	8011dbc <_scanf_float+0x2a0>
 8011b96:	455e      	cmp	r6, fp
 8011b98:	f200 8105 	bhi.w	8011da6 <_scanf_float+0x28a>
 8011b9c:	2501      	movs	r5, #1
 8011b9e:	4628      	mov	r0, r5
 8011ba0:	b007      	add	sp, #28
 8011ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ba6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8011baa:	2a0d      	cmp	r2, #13
 8011bac:	d8e6      	bhi.n	8011b7c <_scanf_float+0x60>
 8011bae:	a101      	add	r1, pc, #4	; (adr r1, 8011bb4 <_scanf_float+0x98>)
 8011bb0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011bb4:	08011cf3 	.word	0x08011cf3
 8011bb8:	08011b7d 	.word	0x08011b7d
 8011bbc:	08011b7d 	.word	0x08011b7d
 8011bc0:	08011b7d 	.word	0x08011b7d
 8011bc4:	08011d53 	.word	0x08011d53
 8011bc8:	08011d2b 	.word	0x08011d2b
 8011bcc:	08011b7d 	.word	0x08011b7d
 8011bd0:	08011b7d 	.word	0x08011b7d
 8011bd4:	08011d01 	.word	0x08011d01
 8011bd8:	08011b7d 	.word	0x08011b7d
 8011bdc:	08011b7d 	.word	0x08011b7d
 8011be0:	08011b7d 	.word	0x08011b7d
 8011be4:	08011b7d 	.word	0x08011b7d
 8011be8:	08011cb9 	.word	0x08011cb9
 8011bec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011bf0:	e7db      	b.n	8011baa <_scanf_float+0x8e>
 8011bf2:	290e      	cmp	r1, #14
 8011bf4:	d8c2      	bhi.n	8011b7c <_scanf_float+0x60>
 8011bf6:	a001      	add	r0, pc, #4	; (adr r0, 8011bfc <_scanf_float+0xe0>)
 8011bf8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011bfc:	08011cab 	.word	0x08011cab
 8011c00:	08011b7d 	.word	0x08011b7d
 8011c04:	08011cab 	.word	0x08011cab
 8011c08:	08011d3f 	.word	0x08011d3f
 8011c0c:	08011b7d 	.word	0x08011b7d
 8011c10:	08011c59 	.word	0x08011c59
 8011c14:	08011c95 	.word	0x08011c95
 8011c18:	08011c95 	.word	0x08011c95
 8011c1c:	08011c95 	.word	0x08011c95
 8011c20:	08011c95 	.word	0x08011c95
 8011c24:	08011c95 	.word	0x08011c95
 8011c28:	08011c95 	.word	0x08011c95
 8011c2c:	08011c95 	.word	0x08011c95
 8011c30:	08011c95 	.word	0x08011c95
 8011c34:	08011c95 	.word	0x08011c95
 8011c38:	2b6e      	cmp	r3, #110	; 0x6e
 8011c3a:	d809      	bhi.n	8011c50 <_scanf_float+0x134>
 8011c3c:	2b60      	cmp	r3, #96	; 0x60
 8011c3e:	d8b2      	bhi.n	8011ba6 <_scanf_float+0x8a>
 8011c40:	2b54      	cmp	r3, #84	; 0x54
 8011c42:	d077      	beq.n	8011d34 <_scanf_float+0x218>
 8011c44:	2b59      	cmp	r3, #89	; 0x59
 8011c46:	d199      	bne.n	8011b7c <_scanf_float+0x60>
 8011c48:	2d07      	cmp	r5, #7
 8011c4a:	d197      	bne.n	8011b7c <_scanf_float+0x60>
 8011c4c:	2508      	movs	r5, #8
 8011c4e:	e029      	b.n	8011ca4 <_scanf_float+0x188>
 8011c50:	2b74      	cmp	r3, #116	; 0x74
 8011c52:	d06f      	beq.n	8011d34 <_scanf_float+0x218>
 8011c54:	2b79      	cmp	r3, #121	; 0x79
 8011c56:	e7f6      	b.n	8011c46 <_scanf_float+0x12a>
 8011c58:	6821      	ldr	r1, [r4, #0]
 8011c5a:	05c8      	lsls	r0, r1, #23
 8011c5c:	d51a      	bpl.n	8011c94 <_scanf_float+0x178>
 8011c5e:	9b02      	ldr	r3, [sp, #8]
 8011c60:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011c64:	6021      	str	r1, [r4, #0]
 8011c66:	f109 0901 	add.w	r9, r9, #1
 8011c6a:	b11b      	cbz	r3, 8011c74 <_scanf_float+0x158>
 8011c6c:	3b01      	subs	r3, #1
 8011c6e:	3201      	adds	r2, #1
 8011c70:	9302      	str	r3, [sp, #8]
 8011c72:	60a2      	str	r2, [r4, #8]
 8011c74:	68a3      	ldr	r3, [r4, #8]
 8011c76:	3b01      	subs	r3, #1
 8011c78:	60a3      	str	r3, [r4, #8]
 8011c7a:	6923      	ldr	r3, [r4, #16]
 8011c7c:	3301      	adds	r3, #1
 8011c7e:	6123      	str	r3, [r4, #16]
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	3b01      	subs	r3, #1
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	607b      	str	r3, [r7, #4]
 8011c88:	f340 8084 	ble.w	8011d94 <_scanf_float+0x278>
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	3301      	adds	r3, #1
 8011c90:	603b      	str	r3, [r7, #0]
 8011c92:	e766      	b.n	8011b62 <_scanf_float+0x46>
 8011c94:	eb1a 0f05 	cmn.w	sl, r5
 8011c98:	f47f af70 	bne.w	8011b7c <_scanf_float+0x60>
 8011c9c:	6822      	ldr	r2, [r4, #0]
 8011c9e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8011ca2:	6022      	str	r2, [r4, #0]
 8011ca4:	f806 3b01 	strb.w	r3, [r6], #1
 8011ca8:	e7e4      	b.n	8011c74 <_scanf_float+0x158>
 8011caa:	6822      	ldr	r2, [r4, #0]
 8011cac:	0610      	lsls	r0, r2, #24
 8011cae:	f57f af65 	bpl.w	8011b7c <_scanf_float+0x60>
 8011cb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011cb6:	e7f4      	b.n	8011ca2 <_scanf_float+0x186>
 8011cb8:	f1ba 0f00 	cmp.w	sl, #0
 8011cbc:	d10e      	bne.n	8011cdc <_scanf_float+0x1c0>
 8011cbe:	f1b9 0f00 	cmp.w	r9, #0
 8011cc2:	d10e      	bne.n	8011ce2 <_scanf_float+0x1c6>
 8011cc4:	6822      	ldr	r2, [r4, #0]
 8011cc6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011cca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011cce:	d108      	bne.n	8011ce2 <_scanf_float+0x1c6>
 8011cd0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011cd4:	6022      	str	r2, [r4, #0]
 8011cd6:	f04f 0a01 	mov.w	sl, #1
 8011cda:	e7e3      	b.n	8011ca4 <_scanf_float+0x188>
 8011cdc:	f1ba 0f02 	cmp.w	sl, #2
 8011ce0:	d055      	beq.n	8011d8e <_scanf_float+0x272>
 8011ce2:	2d01      	cmp	r5, #1
 8011ce4:	d002      	beq.n	8011cec <_scanf_float+0x1d0>
 8011ce6:	2d04      	cmp	r5, #4
 8011ce8:	f47f af48 	bne.w	8011b7c <_scanf_float+0x60>
 8011cec:	3501      	adds	r5, #1
 8011cee:	b2ed      	uxtb	r5, r5
 8011cf0:	e7d8      	b.n	8011ca4 <_scanf_float+0x188>
 8011cf2:	f1ba 0f01 	cmp.w	sl, #1
 8011cf6:	f47f af41 	bne.w	8011b7c <_scanf_float+0x60>
 8011cfa:	f04f 0a02 	mov.w	sl, #2
 8011cfe:	e7d1      	b.n	8011ca4 <_scanf_float+0x188>
 8011d00:	b97d      	cbnz	r5, 8011d22 <_scanf_float+0x206>
 8011d02:	f1b9 0f00 	cmp.w	r9, #0
 8011d06:	f47f af3c 	bne.w	8011b82 <_scanf_float+0x66>
 8011d0a:	6822      	ldr	r2, [r4, #0]
 8011d0c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011d10:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011d14:	f47f af39 	bne.w	8011b8a <_scanf_float+0x6e>
 8011d18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011d1c:	6022      	str	r2, [r4, #0]
 8011d1e:	2501      	movs	r5, #1
 8011d20:	e7c0      	b.n	8011ca4 <_scanf_float+0x188>
 8011d22:	2d03      	cmp	r5, #3
 8011d24:	d0e2      	beq.n	8011cec <_scanf_float+0x1d0>
 8011d26:	2d05      	cmp	r5, #5
 8011d28:	e7de      	b.n	8011ce8 <_scanf_float+0x1cc>
 8011d2a:	2d02      	cmp	r5, #2
 8011d2c:	f47f af26 	bne.w	8011b7c <_scanf_float+0x60>
 8011d30:	2503      	movs	r5, #3
 8011d32:	e7b7      	b.n	8011ca4 <_scanf_float+0x188>
 8011d34:	2d06      	cmp	r5, #6
 8011d36:	f47f af21 	bne.w	8011b7c <_scanf_float+0x60>
 8011d3a:	2507      	movs	r5, #7
 8011d3c:	e7b2      	b.n	8011ca4 <_scanf_float+0x188>
 8011d3e:	6822      	ldr	r2, [r4, #0]
 8011d40:	0591      	lsls	r1, r2, #22
 8011d42:	f57f af1b 	bpl.w	8011b7c <_scanf_float+0x60>
 8011d46:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8011d4a:	6022      	str	r2, [r4, #0]
 8011d4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8011d50:	e7a8      	b.n	8011ca4 <_scanf_float+0x188>
 8011d52:	6822      	ldr	r2, [r4, #0]
 8011d54:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011d58:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011d5c:	d006      	beq.n	8011d6c <_scanf_float+0x250>
 8011d5e:	0550      	lsls	r0, r2, #21
 8011d60:	f57f af0c 	bpl.w	8011b7c <_scanf_float+0x60>
 8011d64:	f1b9 0f00 	cmp.w	r9, #0
 8011d68:	f43f af0f 	beq.w	8011b8a <_scanf_float+0x6e>
 8011d6c:	0591      	lsls	r1, r2, #22
 8011d6e:	bf58      	it	pl
 8011d70:	9901      	ldrpl	r1, [sp, #4]
 8011d72:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011d76:	bf58      	it	pl
 8011d78:	eba9 0101 	subpl.w	r1, r9, r1
 8011d7c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011d80:	bf58      	it	pl
 8011d82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011d86:	6022      	str	r2, [r4, #0]
 8011d88:	f04f 0900 	mov.w	r9, #0
 8011d8c:	e78a      	b.n	8011ca4 <_scanf_float+0x188>
 8011d8e:	f04f 0a03 	mov.w	sl, #3
 8011d92:	e787      	b.n	8011ca4 <_scanf_float+0x188>
 8011d94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011d98:	4639      	mov	r1, r7
 8011d9a:	4640      	mov	r0, r8
 8011d9c:	4798      	blx	r3
 8011d9e:	2800      	cmp	r0, #0
 8011da0:	f43f aedf 	beq.w	8011b62 <_scanf_float+0x46>
 8011da4:	e6ea      	b.n	8011b7c <_scanf_float+0x60>
 8011da6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011daa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011dae:	463a      	mov	r2, r7
 8011db0:	4640      	mov	r0, r8
 8011db2:	4798      	blx	r3
 8011db4:	6923      	ldr	r3, [r4, #16]
 8011db6:	3b01      	subs	r3, #1
 8011db8:	6123      	str	r3, [r4, #16]
 8011dba:	e6ec      	b.n	8011b96 <_scanf_float+0x7a>
 8011dbc:	1e6b      	subs	r3, r5, #1
 8011dbe:	2b06      	cmp	r3, #6
 8011dc0:	d825      	bhi.n	8011e0e <_scanf_float+0x2f2>
 8011dc2:	2d02      	cmp	r5, #2
 8011dc4:	d836      	bhi.n	8011e34 <_scanf_float+0x318>
 8011dc6:	455e      	cmp	r6, fp
 8011dc8:	f67f aee8 	bls.w	8011b9c <_scanf_float+0x80>
 8011dcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011dd0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011dd4:	463a      	mov	r2, r7
 8011dd6:	4640      	mov	r0, r8
 8011dd8:	4798      	blx	r3
 8011dda:	6923      	ldr	r3, [r4, #16]
 8011ddc:	3b01      	subs	r3, #1
 8011dde:	6123      	str	r3, [r4, #16]
 8011de0:	e7f1      	b.n	8011dc6 <_scanf_float+0x2aa>
 8011de2:	9802      	ldr	r0, [sp, #8]
 8011de4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011de8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8011dec:	9002      	str	r0, [sp, #8]
 8011dee:	463a      	mov	r2, r7
 8011df0:	4640      	mov	r0, r8
 8011df2:	4798      	blx	r3
 8011df4:	6923      	ldr	r3, [r4, #16]
 8011df6:	3b01      	subs	r3, #1
 8011df8:	6123      	str	r3, [r4, #16]
 8011dfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011dfe:	fa5f fa8a 	uxtb.w	sl, sl
 8011e02:	f1ba 0f02 	cmp.w	sl, #2
 8011e06:	d1ec      	bne.n	8011de2 <_scanf_float+0x2c6>
 8011e08:	3d03      	subs	r5, #3
 8011e0a:	b2ed      	uxtb	r5, r5
 8011e0c:	1b76      	subs	r6, r6, r5
 8011e0e:	6823      	ldr	r3, [r4, #0]
 8011e10:	05da      	lsls	r2, r3, #23
 8011e12:	d52f      	bpl.n	8011e74 <_scanf_float+0x358>
 8011e14:	055b      	lsls	r3, r3, #21
 8011e16:	d510      	bpl.n	8011e3a <_scanf_float+0x31e>
 8011e18:	455e      	cmp	r6, fp
 8011e1a:	f67f aebf 	bls.w	8011b9c <_scanf_float+0x80>
 8011e1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011e22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011e26:	463a      	mov	r2, r7
 8011e28:	4640      	mov	r0, r8
 8011e2a:	4798      	blx	r3
 8011e2c:	6923      	ldr	r3, [r4, #16]
 8011e2e:	3b01      	subs	r3, #1
 8011e30:	6123      	str	r3, [r4, #16]
 8011e32:	e7f1      	b.n	8011e18 <_scanf_float+0x2fc>
 8011e34:	46aa      	mov	sl, r5
 8011e36:	9602      	str	r6, [sp, #8]
 8011e38:	e7df      	b.n	8011dfa <_scanf_float+0x2de>
 8011e3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011e3e:	6923      	ldr	r3, [r4, #16]
 8011e40:	2965      	cmp	r1, #101	; 0x65
 8011e42:	f103 33ff 	add.w	r3, r3, #4294967295
 8011e46:	f106 35ff 	add.w	r5, r6, #4294967295
 8011e4a:	6123      	str	r3, [r4, #16]
 8011e4c:	d00c      	beq.n	8011e68 <_scanf_float+0x34c>
 8011e4e:	2945      	cmp	r1, #69	; 0x45
 8011e50:	d00a      	beq.n	8011e68 <_scanf_float+0x34c>
 8011e52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011e56:	463a      	mov	r2, r7
 8011e58:	4640      	mov	r0, r8
 8011e5a:	4798      	blx	r3
 8011e5c:	6923      	ldr	r3, [r4, #16]
 8011e5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011e62:	3b01      	subs	r3, #1
 8011e64:	1eb5      	subs	r5, r6, #2
 8011e66:	6123      	str	r3, [r4, #16]
 8011e68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011e6c:	463a      	mov	r2, r7
 8011e6e:	4640      	mov	r0, r8
 8011e70:	4798      	blx	r3
 8011e72:	462e      	mov	r6, r5
 8011e74:	6825      	ldr	r5, [r4, #0]
 8011e76:	f015 0510 	ands.w	r5, r5, #16
 8011e7a:	d158      	bne.n	8011f2e <_scanf_float+0x412>
 8011e7c:	7035      	strb	r5, [r6, #0]
 8011e7e:	6823      	ldr	r3, [r4, #0]
 8011e80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011e88:	d11c      	bne.n	8011ec4 <_scanf_float+0x3a8>
 8011e8a:	9b01      	ldr	r3, [sp, #4]
 8011e8c:	454b      	cmp	r3, r9
 8011e8e:	eba3 0209 	sub.w	r2, r3, r9
 8011e92:	d124      	bne.n	8011ede <_scanf_float+0x3c2>
 8011e94:	2200      	movs	r2, #0
 8011e96:	4659      	mov	r1, fp
 8011e98:	4640      	mov	r0, r8
 8011e9a:	f000 fe9b 	bl	8012bd4 <_strtod_r>
 8011e9e:	9b03      	ldr	r3, [sp, #12]
 8011ea0:	6821      	ldr	r1, [r4, #0]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	f011 0f02 	tst.w	r1, #2
 8011ea8:	ec57 6b10 	vmov	r6, r7, d0
 8011eac:	f103 0204 	add.w	r2, r3, #4
 8011eb0:	d020      	beq.n	8011ef4 <_scanf_float+0x3d8>
 8011eb2:	9903      	ldr	r1, [sp, #12]
 8011eb4:	600a      	str	r2, [r1, #0]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	e9c3 6700 	strd	r6, r7, [r3]
 8011ebc:	68e3      	ldr	r3, [r4, #12]
 8011ebe:	3301      	adds	r3, #1
 8011ec0:	60e3      	str	r3, [r4, #12]
 8011ec2:	e66c      	b.n	8011b9e <_scanf_float+0x82>
 8011ec4:	9b04      	ldr	r3, [sp, #16]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d0e4      	beq.n	8011e94 <_scanf_float+0x378>
 8011eca:	9905      	ldr	r1, [sp, #20]
 8011ecc:	230a      	movs	r3, #10
 8011ece:	462a      	mov	r2, r5
 8011ed0:	3101      	adds	r1, #1
 8011ed2:	4640      	mov	r0, r8
 8011ed4:	f000 ff70 	bl	8012db8 <_strtol_r>
 8011ed8:	9b04      	ldr	r3, [sp, #16]
 8011eda:	9e05      	ldr	r6, [sp, #20]
 8011edc:	1ac2      	subs	r2, r0, r3
 8011ede:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011ee2:	429e      	cmp	r6, r3
 8011ee4:	bf28      	it	cs
 8011ee6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8011eea:	4912      	ldr	r1, [pc, #72]	; (8011f34 <_scanf_float+0x418>)
 8011eec:	4630      	mov	r0, r6
 8011eee:	f000 f82b 	bl	8011f48 <siprintf>
 8011ef2:	e7cf      	b.n	8011e94 <_scanf_float+0x378>
 8011ef4:	f011 0f04 	tst.w	r1, #4
 8011ef8:	9903      	ldr	r1, [sp, #12]
 8011efa:	600a      	str	r2, [r1, #0]
 8011efc:	d1db      	bne.n	8011eb6 <_scanf_float+0x39a>
 8011efe:	f8d3 8000 	ldr.w	r8, [r3]
 8011f02:	ee10 2a10 	vmov	r2, s0
 8011f06:	ee10 0a10 	vmov	r0, s0
 8011f0a:	463b      	mov	r3, r7
 8011f0c:	4639      	mov	r1, r7
 8011f0e:	f7ee fe25 	bl	8000b5c <__aeabi_dcmpun>
 8011f12:	b128      	cbz	r0, 8011f20 <_scanf_float+0x404>
 8011f14:	4808      	ldr	r0, [pc, #32]	; (8011f38 <_scanf_float+0x41c>)
 8011f16:	f000 f811 	bl	8011f3c <nanf>
 8011f1a:	ed88 0a00 	vstr	s0, [r8]
 8011f1e:	e7cd      	b.n	8011ebc <_scanf_float+0x3a0>
 8011f20:	4630      	mov	r0, r6
 8011f22:	4639      	mov	r1, r7
 8011f24:	f7ee fe78 	bl	8000c18 <__aeabi_d2f>
 8011f28:	f8c8 0000 	str.w	r0, [r8]
 8011f2c:	e7c6      	b.n	8011ebc <_scanf_float+0x3a0>
 8011f2e:	2500      	movs	r5, #0
 8011f30:	e635      	b.n	8011b9e <_scanf_float+0x82>
 8011f32:	bf00      	nop
 8011f34:	08029710 	.word	0x08029710
 8011f38:	0802981b 	.word	0x0802981b

08011f3c <nanf>:
 8011f3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011f44 <nanf+0x8>
 8011f40:	4770      	bx	lr
 8011f42:	bf00      	nop
 8011f44:	7fc00000 	.word	0x7fc00000

08011f48 <siprintf>:
 8011f48:	b40e      	push	{r1, r2, r3}
 8011f4a:	b500      	push	{lr}
 8011f4c:	b09c      	sub	sp, #112	; 0x70
 8011f4e:	ab1d      	add	r3, sp, #116	; 0x74
 8011f50:	9002      	str	r0, [sp, #8]
 8011f52:	9006      	str	r0, [sp, #24]
 8011f54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011f58:	4809      	ldr	r0, [pc, #36]	; (8011f80 <siprintf+0x38>)
 8011f5a:	9107      	str	r1, [sp, #28]
 8011f5c:	9104      	str	r1, [sp, #16]
 8011f5e:	4909      	ldr	r1, [pc, #36]	; (8011f84 <siprintf+0x3c>)
 8011f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f64:	9105      	str	r1, [sp, #20]
 8011f66:	6800      	ldr	r0, [r0, #0]
 8011f68:	9301      	str	r3, [sp, #4]
 8011f6a:	a902      	add	r1, sp, #8
 8011f6c:	f002 ff46 	bl	8014dfc <_svfiprintf_r>
 8011f70:	9b02      	ldr	r3, [sp, #8]
 8011f72:	2200      	movs	r2, #0
 8011f74:	701a      	strb	r2, [r3, #0]
 8011f76:	b01c      	add	sp, #112	; 0x70
 8011f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f7c:	b003      	add	sp, #12
 8011f7e:	4770      	bx	lr
 8011f80:	20000040 	.word	0x20000040
 8011f84:	ffff0208 	.word	0xffff0208

08011f88 <sulp>:
 8011f88:	b570      	push	{r4, r5, r6, lr}
 8011f8a:	4604      	mov	r4, r0
 8011f8c:	460d      	mov	r5, r1
 8011f8e:	ec45 4b10 	vmov	d0, r4, r5
 8011f92:	4616      	mov	r6, r2
 8011f94:	f002 fcce 	bl	8014934 <__ulp>
 8011f98:	ec51 0b10 	vmov	r0, r1, d0
 8011f9c:	b17e      	cbz	r6, 8011fbe <sulp+0x36>
 8011f9e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011fa2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	dd09      	ble.n	8011fbe <sulp+0x36>
 8011faa:	051b      	lsls	r3, r3, #20
 8011fac:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011fb0:	2400      	movs	r4, #0
 8011fb2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011fb6:	4622      	mov	r2, r4
 8011fb8:	462b      	mov	r3, r5
 8011fba:	f7ee fb35 	bl	8000628 <__aeabi_dmul>
 8011fbe:	bd70      	pop	{r4, r5, r6, pc}

08011fc0 <_strtod_l>:
 8011fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fc4:	b0a3      	sub	sp, #140	; 0x8c
 8011fc6:	461f      	mov	r7, r3
 8011fc8:	2300      	movs	r3, #0
 8011fca:	931e      	str	r3, [sp, #120]	; 0x78
 8011fcc:	4ba4      	ldr	r3, [pc, #656]	; (8012260 <_strtod_l+0x2a0>)
 8011fce:	9219      	str	r2, [sp, #100]	; 0x64
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	9307      	str	r3, [sp, #28]
 8011fd4:	4604      	mov	r4, r0
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	4688      	mov	r8, r1
 8011fda:	f7ee f90b 	bl	80001f4 <strlen>
 8011fde:	f04f 0a00 	mov.w	sl, #0
 8011fe2:	4605      	mov	r5, r0
 8011fe4:	f04f 0b00 	mov.w	fp, #0
 8011fe8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011fec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011fee:	781a      	ldrb	r2, [r3, #0]
 8011ff0:	2a2b      	cmp	r2, #43	; 0x2b
 8011ff2:	d04c      	beq.n	801208e <_strtod_l+0xce>
 8011ff4:	d839      	bhi.n	801206a <_strtod_l+0xaa>
 8011ff6:	2a0d      	cmp	r2, #13
 8011ff8:	d832      	bhi.n	8012060 <_strtod_l+0xa0>
 8011ffa:	2a08      	cmp	r2, #8
 8011ffc:	d832      	bhi.n	8012064 <_strtod_l+0xa4>
 8011ffe:	2a00      	cmp	r2, #0
 8012000:	d03c      	beq.n	801207c <_strtod_l+0xbc>
 8012002:	2300      	movs	r3, #0
 8012004:	930e      	str	r3, [sp, #56]	; 0x38
 8012006:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8012008:	7833      	ldrb	r3, [r6, #0]
 801200a:	2b30      	cmp	r3, #48	; 0x30
 801200c:	f040 80b4 	bne.w	8012178 <_strtod_l+0x1b8>
 8012010:	7873      	ldrb	r3, [r6, #1]
 8012012:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012016:	2b58      	cmp	r3, #88	; 0x58
 8012018:	d16c      	bne.n	80120f4 <_strtod_l+0x134>
 801201a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801201c:	9301      	str	r3, [sp, #4]
 801201e:	ab1e      	add	r3, sp, #120	; 0x78
 8012020:	9702      	str	r7, [sp, #8]
 8012022:	9300      	str	r3, [sp, #0]
 8012024:	4a8f      	ldr	r2, [pc, #572]	; (8012264 <_strtod_l+0x2a4>)
 8012026:	ab1f      	add	r3, sp, #124	; 0x7c
 8012028:	a91d      	add	r1, sp, #116	; 0x74
 801202a:	4620      	mov	r0, r4
 801202c:	f001 fde2 	bl	8013bf4 <__gethex>
 8012030:	f010 0707 	ands.w	r7, r0, #7
 8012034:	4605      	mov	r5, r0
 8012036:	d005      	beq.n	8012044 <_strtod_l+0x84>
 8012038:	2f06      	cmp	r7, #6
 801203a:	d12a      	bne.n	8012092 <_strtod_l+0xd2>
 801203c:	3601      	adds	r6, #1
 801203e:	2300      	movs	r3, #0
 8012040:	961d      	str	r6, [sp, #116]	; 0x74
 8012042:	930e      	str	r3, [sp, #56]	; 0x38
 8012044:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012046:	2b00      	cmp	r3, #0
 8012048:	f040 8596 	bne.w	8012b78 <_strtod_l+0xbb8>
 801204c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801204e:	b1db      	cbz	r3, 8012088 <_strtod_l+0xc8>
 8012050:	4652      	mov	r2, sl
 8012052:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012056:	ec43 2b10 	vmov	d0, r2, r3
 801205a:	b023      	add	sp, #140	; 0x8c
 801205c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012060:	2a20      	cmp	r2, #32
 8012062:	d1ce      	bne.n	8012002 <_strtod_l+0x42>
 8012064:	3301      	adds	r3, #1
 8012066:	931d      	str	r3, [sp, #116]	; 0x74
 8012068:	e7c0      	b.n	8011fec <_strtod_l+0x2c>
 801206a:	2a2d      	cmp	r2, #45	; 0x2d
 801206c:	d1c9      	bne.n	8012002 <_strtod_l+0x42>
 801206e:	2201      	movs	r2, #1
 8012070:	920e      	str	r2, [sp, #56]	; 0x38
 8012072:	1c5a      	adds	r2, r3, #1
 8012074:	921d      	str	r2, [sp, #116]	; 0x74
 8012076:	785b      	ldrb	r3, [r3, #1]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d1c4      	bne.n	8012006 <_strtod_l+0x46>
 801207c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801207e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012082:	2b00      	cmp	r3, #0
 8012084:	f040 8576 	bne.w	8012b74 <_strtod_l+0xbb4>
 8012088:	4652      	mov	r2, sl
 801208a:	465b      	mov	r3, fp
 801208c:	e7e3      	b.n	8012056 <_strtod_l+0x96>
 801208e:	2200      	movs	r2, #0
 8012090:	e7ee      	b.n	8012070 <_strtod_l+0xb0>
 8012092:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012094:	b13a      	cbz	r2, 80120a6 <_strtod_l+0xe6>
 8012096:	2135      	movs	r1, #53	; 0x35
 8012098:	a820      	add	r0, sp, #128	; 0x80
 801209a:	f002 fd56 	bl	8014b4a <__copybits>
 801209e:	991e      	ldr	r1, [sp, #120]	; 0x78
 80120a0:	4620      	mov	r0, r4
 80120a2:	f002 f91b 	bl	80142dc <_Bfree>
 80120a6:	3f01      	subs	r7, #1
 80120a8:	2f05      	cmp	r7, #5
 80120aa:	d807      	bhi.n	80120bc <_strtod_l+0xfc>
 80120ac:	e8df f007 	tbb	[pc, r7]
 80120b0:	1d180b0e 	.word	0x1d180b0e
 80120b4:	030e      	.short	0x030e
 80120b6:	f04f 0b00 	mov.w	fp, #0
 80120ba:	46da      	mov	sl, fp
 80120bc:	0728      	lsls	r0, r5, #28
 80120be:	d5c1      	bpl.n	8012044 <_strtod_l+0x84>
 80120c0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80120c4:	e7be      	b.n	8012044 <_strtod_l+0x84>
 80120c6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80120ca:	e7f7      	b.n	80120bc <_strtod_l+0xfc>
 80120cc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80120d0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80120d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80120d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80120da:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80120de:	e7ed      	b.n	80120bc <_strtod_l+0xfc>
 80120e0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8012268 <_strtod_l+0x2a8>
 80120e4:	f04f 0a00 	mov.w	sl, #0
 80120e8:	e7e8      	b.n	80120bc <_strtod_l+0xfc>
 80120ea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80120ee:	f04f 3aff 	mov.w	sl, #4294967295
 80120f2:	e7e3      	b.n	80120bc <_strtod_l+0xfc>
 80120f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80120f6:	1c5a      	adds	r2, r3, #1
 80120f8:	921d      	str	r2, [sp, #116]	; 0x74
 80120fa:	785b      	ldrb	r3, [r3, #1]
 80120fc:	2b30      	cmp	r3, #48	; 0x30
 80120fe:	d0f9      	beq.n	80120f4 <_strtod_l+0x134>
 8012100:	2b00      	cmp	r3, #0
 8012102:	d09f      	beq.n	8012044 <_strtod_l+0x84>
 8012104:	2301      	movs	r3, #1
 8012106:	f04f 0900 	mov.w	r9, #0
 801210a:	9304      	str	r3, [sp, #16]
 801210c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801210e:	930a      	str	r3, [sp, #40]	; 0x28
 8012110:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012114:	464f      	mov	r7, r9
 8012116:	220a      	movs	r2, #10
 8012118:	981d      	ldr	r0, [sp, #116]	; 0x74
 801211a:	7806      	ldrb	r6, [r0, #0]
 801211c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8012120:	b2d9      	uxtb	r1, r3
 8012122:	2909      	cmp	r1, #9
 8012124:	d92a      	bls.n	801217c <_strtod_l+0x1bc>
 8012126:	9907      	ldr	r1, [sp, #28]
 8012128:	462a      	mov	r2, r5
 801212a:	f003 f8d9 	bl	80152e0 <strncmp>
 801212e:	b398      	cbz	r0, 8012198 <_strtod_l+0x1d8>
 8012130:	2000      	movs	r0, #0
 8012132:	4633      	mov	r3, r6
 8012134:	463d      	mov	r5, r7
 8012136:	9007      	str	r0, [sp, #28]
 8012138:	4602      	mov	r2, r0
 801213a:	2b65      	cmp	r3, #101	; 0x65
 801213c:	d001      	beq.n	8012142 <_strtod_l+0x182>
 801213e:	2b45      	cmp	r3, #69	; 0x45
 8012140:	d118      	bne.n	8012174 <_strtod_l+0x1b4>
 8012142:	b91d      	cbnz	r5, 801214c <_strtod_l+0x18c>
 8012144:	9b04      	ldr	r3, [sp, #16]
 8012146:	4303      	orrs	r3, r0
 8012148:	d098      	beq.n	801207c <_strtod_l+0xbc>
 801214a:	2500      	movs	r5, #0
 801214c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8012150:	f108 0301 	add.w	r3, r8, #1
 8012154:	931d      	str	r3, [sp, #116]	; 0x74
 8012156:	f898 3001 	ldrb.w	r3, [r8, #1]
 801215a:	2b2b      	cmp	r3, #43	; 0x2b
 801215c:	d075      	beq.n	801224a <_strtod_l+0x28a>
 801215e:	2b2d      	cmp	r3, #45	; 0x2d
 8012160:	d07b      	beq.n	801225a <_strtod_l+0x29a>
 8012162:	f04f 0c00 	mov.w	ip, #0
 8012166:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801216a:	2909      	cmp	r1, #9
 801216c:	f240 8082 	bls.w	8012274 <_strtod_l+0x2b4>
 8012170:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012174:	2600      	movs	r6, #0
 8012176:	e09d      	b.n	80122b4 <_strtod_l+0x2f4>
 8012178:	2300      	movs	r3, #0
 801217a:	e7c4      	b.n	8012106 <_strtod_l+0x146>
 801217c:	2f08      	cmp	r7, #8
 801217e:	bfd8      	it	le
 8012180:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8012182:	f100 0001 	add.w	r0, r0, #1
 8012186:	bfda      	itte	le
 8012188:	fb02 3301 	mlale	r3, r2, r1, r3
 801218c:	9309      	strle	r3, [sp, #36]	; 0x24
 801218e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8012192:	3701      	adds	r7, #1
 8012194:	901d      	str	r0, [sp, #116]	; 0x74
 8012196:	e7bf      	b.n	8012118 <_strtod_l+0x158>
 8012198:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801219a:	195a      	adds	r2, r3, r5
 801219c:	921d      	str	r2, [sp, #116]	; 0x74
 801219e:	5d5b      	ldrb	r3, [r3, r5]
 80121a0:	2f00      	cmp	r7, #0
 80121a2:	d037      	beq.n	8012214 <_strtod_l+0x254>
 80121a4:	9007      	str	r0, [sp, #28]
 80121a6:	463d      	mov	r5, r7
 80121a8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80121ac:	2a09      	cmp	r2, #9
 80121ae:	d912      	bls.n	80121d6 <_strtod_l+0x216>
 80121b0:	2201      	movs	r2, #1
 80121b2:	e7c2      	b.n	801213a <_strtod_l+0x17a>
 80121b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80121b6:	1c5a      	adds	r2, r3, #1
 80121b8:	921d      	str	r2, [sp, #116]	; 0x74
 80121ba:	785b      	ldrb	r3, [r3, #1]
 80121bc:	3001      	adds	r0, #1
 80121be:	2b30      	cmp	r3, #48	; 0x30
 80121c0:	d0f8      	beq.n	80121b4 <_strtod_l+0x1f4>
 80121c2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80121c6:	2a08      	cmp	r2, #8
 80121c8:	f200 84db 	bhi.w	8012b82 <_strtod_l+0xbc2>
 80121cc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80121ce:	9007      	str	r0, [sp, #28]
 80121d0:	2000      	movs	r0, #0
 80121d2:	920a      	str	r2, [sp, #40]	; 0x28
 80121d4:	4605      	mov	r5, r0
 80121d6:	3b30      	subs	r3, #48	; 0x30
 80121d8:	f100 0201 	add.w	r2, r0, #1
 80121dc:	d014      	beq.n	8012208 <_strtod_l+0x248>
 80121de:	9907      	ldr	r1, [sp, #28]
 80121e0:	4411      	add	r1, r2
 80121e2:	9107      	str	r1, [sp, #28]
 80121e4:	462a      	mov	r2, r5
 80121e6:	eb00 0e05 	add.w	lr, r0, r5
 80121ea:	210a      	movs	r1, #10
 80121ec:	4572      	cmp	r2, lr
 80121ee:	d113      	bne.n	8012218 <_strtod_l+0x258>
 80121f0:	182a      	adds	r2, r5, r0
 80121f2:	2a08      	cmp	r2, #8
 80121f4:	f105 0501 	add.w	r5, r5, #1
 80121f8:	4405      	add	r5, r0
 80121fa:	dc1c      	bgt.n	8012236 <_strtod_l+0x276>
 80121fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80121fe:	220a      	movs	r2, #10
 8012200:	fb02 3301 	mla	r3, r2, r1, r3
 8012204:	9309      	str	r3, [sp, #36]	; 0x24
 8012206:	2200      	movs	r2, #0
 8012208:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801220a:	1c59      	adds	r1, r3, #1
 801220c:	911d      	str	r1, [sp, #116]	; 0x74
 801220e:	785b      	ldrb	r3, [r3, #1]
 8012210:	4610      	mov	r0, r2
 8012212:	e7c9      	b.n	80121a8 <_strtod_l+0x1e8>
 8012214:	4638      	mov	r0, r7
 8012216:	e7d2      	b.n	80121be <_strtod_l+0x1fe>
 8012218:	2a08      	cmp	r2, #8
 801221a:	dc04      	bgt.n	8012226 <_strtod_l+0x266>
 801221c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801221e:	434e      	muls	r6, r1
 8012220:	9609      	str	r6, [sp, #36]	; 0x24
 8012222:	3201      	adds	r2, #1
 8012224:	e7e2      	b.n	80121ec <_strtod_l+0x22c>
 8012226:	f102 0c01 	add.w	ip, r2, #1
 801222a:	f1bc 0f10 	cmp.w	ip, #16
 801222e:	bfd8      	it	le
 8012230:	fb01 f909 	mulle.w	r9, r1, r9
 8012234:	e7f5      	b.n	8012222 <_strtod_l+0x262>
 8012236:	2d10      	cmp	r5, #16
 8012238:	bfdc      	itt	le
 801223a:	220a      	movle	r2, #10
 801223c:	fb02 3909 	mlale	r9, r2, r9, r3
 8012240:	e7e1      	b.n	8012206 <_strtod_l+0x246>
 8012242:	2300      	movs	r3, #0
 8012244:	9307      	str	r3, [sp, #28]
 8012246:	2201      	movs	r2, #1
 8012248:	e77c      	b.n	8012144 <_strtod_l+0x184>
 801224a:	f04f 0c00 	mov.w	ip, #0
 801224e:	f108 0302 	add.w	r3, r8, #2
 8012252:	931d      	str	r3, [sp, #116]	; 0x74
 8012254:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012258:	e785      	b.n	8012166 <_strtod_l+0x1a6>
 801225a:	f04f 0c01 	mov.w	ip, #1
 801225e:	e7f6      	b.n	801224e <_strtod_l+0x28e>
 8012260:	08029a04 	.word	0x08029a04
 8012264:	08029718 	.word	0x08029718
 8012268:	7ff00000 	.word	0x7ff00000
 801226c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801226e:	1c59      	adds	r1, r3, #1
 8012270:	911d      	str	r1, [sp, #116]	; 0x74
 8012272:	785b      	ldrb	r3, [r3, #1]
 8012274:	2b30      	cmp	r3, #48	; 0x30
 8012276:	d0f9      	beq.n	801226c <_strtod_l+0x2ac>
 8012278:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801227c:	2908      	cmp	r1, #8
 801227e:	f63f af79 	bhi.w	8012174 <_strtod_l+0x1b4>
 8012282:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8012286:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012288:	9308      	str	r3, [sp, #32]
 801228a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801228c:	1c59      	adds	r1, r3, #1
 801228e:	911d      	str	r1, [sp, #116]	; 0x74
 8012290:	785b      	ldrb	r3, [r3, #1]
 8012292:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8012296:	2e09      	cmp	r6, #9
 8012298:	d937      	bls.n	801230a <_strtod_l+0x34a>
 801229a:	9e08      	ldr	r6, [sp, #32]
 801229c:	1b89      	subs	r1, r1, r6
 801229e:	2908      	cmp	r1, #8
 80122a0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80122a4:	dc02      	bgt.n	80122ac <_strtod_l+0x2ec>
 80122a6:	4576      	cmp	r6, lr
 80122a8:	bfa8      	it	ge
 80122aa:	4676      	movge	r6, lr
 80122ac:	f1bc 0f00 	cmp.w	ip, #0
 80122b0:	d000      	beq.n	80122b4 <_strtod_l+0x2f4>
 80122b2:	4276      	negs	r6, r6
 80122b4:	2d00      	cmp	r5, #0
 80122b6:	d14f      	bne.n	8012358 <_strtod_l+0x398>
 80122b8:	9904      	ldr	r1, [sp, #16]
 80122ba:	4301      	orrs	r1, r0
 80122bc:	f47f aec2 	bne.w	8012044 <_strtod_l+0x84>
 80122c0:	2a00      	cmp	r2, #0
 80122c2:	f47f aedb 	bne.w	801207c <_strtod_l+0xbc>
 80122c6:	2b69      	cmp	r3, #105	; 0x69
 80122c8:	d027      	beq.n	801231a <_strtod_l+0x35a>
 80122ca:	dc24      	bgt.n	8012316 <_strtod_l+0x356>
 80122cc:	2b49      	cmp	r3, #73	; 0x49
 80122ce:	d024      	beq.n	801231a <_strtod_l+0x35a>
 80122d0:	2b4e      	cmp	r3, #78	; 0x4e
 80122d2:	f47f aed3 	bne.w	801207c <_strtod_l+0xbc>
 80122d6:	499e      	ldr	r1, [pc, #632]	; (8012550 <_strtod_l+0x590>)
 80122d8:	a81d      	add	r0, sp, #116	; 0x74
 80122da:	f001 fee3 	bl	80140a4 <__match>
 80122de:	2800      	cmp	r0, #0
 80122e0:	f43f aecc 	beq.w	801207c <_strtod_l+0xbc>
 80122e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80122e6:	781b      	ldrb	r3, [r3, #0]
 80122e8:	2b28      	cmp	r3, #40	; 0x28
 80122ea:	d12d      	bne.n	8012348 <_strtod_l+0x388>
 80122ec:	4999      	ldr	r1, [pc, #612]	; (8012554 <_strtod_l+0x594>)
 80122ee:	aa20      	add	r2, sp, #128	; 0x80
 80122f0:	a81d      	add	r0, sp, #116	; 0x74
 80122f2:	f001 feeb 	bl	80140cc <__hexnan>
 80122f6:	2805      	cmp	r0, #5
 80122f8:	d126      	bne.n	8012348 <_strtod_l+0x388>
 80122fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122fc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8012300:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012304:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012308:	e69c      	b.n	8012044 <_strtod_l+0x84>
 801230a:	210a      	movs	r1, #10
 801230c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8012310:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012314:	e7b9      	b.n	801228a <_strtod_l+0x2ca>
 8012316:	2b6e      	cmp	r3, #110	; 0x6e
 8012318:	e7db      	b.n	80122d2 <_strtod_l+0x312>
 801231a:	498f      	ldr	r1, [pc, #572]	; (8012558 <_strtod_l+0x598>)
 801231c:	a81d      	add	r0, sp, #116	; 0x74
 801231e:	f001 fec1 	bl	80140a4 <__match>
 8012322:	2800      	cmp	r0, #0
 8012324:	f43f aeaa 	beq.w	801207c <_strtod_l+0xbc>
 8012328:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801232a:	498c      	ldr	r1, [pc, #560]	; (801255c <_strtod_l+0x59c>)
 801232c:	3b01      	subs	r3, #1
 801232e:	a81d      	add	r0, sp, #116	; 0x74
 8012330:	931d      	str	r3, [sp, #116]	; 0x74
 8012332:	f001 feb7 	bl	80140a4 <__match>
 8012336:	b910      	cbnz	r0, 801233e <_strtod_l+0x37e>
 8012338:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801233a:	3301      	adds	r3, #1
 801233c:	931d      	str	r3, [sp, #116]	; 0x74
 801233e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801256c <_strtod_l+0x5ac>
 8012342:	f04f 0a00 	mov.w	sl, #0
 8012346:	e67d      	b.n	8012044 <_strtod_l+0x84>
 8012348:	4885      	ldr	r0, [pc, #532]	; (8012560 <_strtod_l+0x5a0>)
 801234a:	f002 ffb1 	bl	80152b0 <nan>
 801234e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8012352:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012356:	e675      	b.n	8012044 <_strtod_l+0x84>
 8012358:	9b07      	ldr	r3, [sp, #28]
 801235a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801235c:	1af3      	subs	r3, r6, r3
 801235e:	2f00      	cmp	r7, #0
 8012360:	bf08      	it	eq
 8012362:	462f      	moveq	r7, r5
 8012364:	2d10      	cmp	r5, #16
 8012366:	9308      	str	r3, [sp, #32]
 8012368:	46a8      	mov	r8, r5
 801236a:	bfa8      	it	ge
 801236c:	f04f 0810 	movge.w	r8, #16
 8012370:	f7ee f8e0 	bl	8000534 <__aeabi_ui2d>
 8012374:	2d09      	cmp	r5, #9
 8012376:	4682      	mov	sl, r0
 8012378:	468b      	mov	fp, r1
 801237a:	dd13      	ble.n	80123a4 <_strtod_l+0x3e4>
 801237c:	4b79      	ldr	r3, [pc, #484]	; (8012564 <_strtod_l+0x5a4>)
 801237e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012382:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012386:	f7ee f94f 	bl	8000628 <__aeabi_dmul>
 801238a:	4682      	mov	sl, r0
 801238c:	4648      	mov	r0, r9
 801238e:	468b      	mov	fp, r1
 8012390:	f7ee f8d0 	bl	8000534 <__aeabi_ui2d>
 8012394:	4602      	mov	r2, r0
 8012396:	460b      	mov	r3, r1
 8012398:	4650      	mov	r0, sl
 801239a:	4659      	mov	r1, fp
 801239c:	f7ed ff8e 	bl	80002bc <__adddf3>
 80123a0:	4682      	mov	sl, r0
 80123a2:	468b      	mov	fp, r1
 80123a4:	2d0f      	cmp	r5, #15
 80123a6:	dc38      	bgt.n	801241a <_strtod_l+0x45a>
 80123a8:	9b08      	ldr	r3, [sp, #32]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	f43f ae4a 	beq.w	8012044 <_strtod_l+0x84>
 80123b0:	dd24      	ble.n	80123fc <_strtod_l+0x43c>
 80123b2:	2b16      	cmp	r3, #22
 80123b4:	dc0b      	bgt.n	80123ce <_strtod_l+0x40e>
 80123b6:	4d6b      	ldr	r5, [pc, #428]	; (8012564 <_strtod_l+0x5a4>)
 80123b8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80123bc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80123c0:	4652      	mov	r2, sl
 80123c2:	465b      	mov	r3, fp
 80123c4:	f7ee f930 	bl	8000628 <__aeabi_dmul>
 80123c8:	4682      	mov	sl, r0
 80123ca:	468b      	mov	fp, r1
 80123cc:	e63a      	b.n	8012044 <_strtod_l+0x84>
 80123ce:	9a08      	ldr	r2, [sp, #32]
 80123d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80123d4:	4293      	cmp	r3, r2
 80123d6:	db20      	blt.n	801241a <_strtod_l+0x45a>
 80123d8:	4c62      	ldr	r4, [pc, #392]	; (8012564 <_strtod_l+0x5a4>)
 80123da:	f1c5 050f 	rsb	r5, r5, #15
 80123de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80123e2:	4652      	mov	r2, sl
 80123e4:	465b      	mov	r3, fp
 80123e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123ea:	f7ee f91d 	bl	8000628 <__aeabi_dmul>
 80123ee:	9b08      	ldr	r3, [sp, #32]
 80123f0:	1b5d      	subs	r5, r3, r5
 80123f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80123f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80123fa:	e7e3      	b.n	80123c4 <_strtod_l+0x404>
 80123fc:	9b08      	ldr	r3, [sp, #32]
 80123fe:	3316      	adds	r3, #22
 8012400:	db0b      	blt.n	801241a <_strtod_l+0x45a>
 8012402:	9b07      	ldr	r3, [sp, #28]
 8012404:	4a57      	ldr	r2, [pc, #348]	; (8012564 <_strtod_l+0x5a4>)
 8012406:	1b9e      	subs	r6, r3, r6
 8012408:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801240c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012410:	4650      	mov	r0, sl
 8012412:	4659      	mov	r1, fp
 8012414:	f7ee fa32 	bl	800087c <__aeabi_ddiv>
 8012418:	e7d6      	b.n	80123c8 <_strtod_l+0x408>
 801241a:	9b08      	ldr	r3, [sp, #32]
 801241c:	eba5 0808 	sub.w	r8, r5, r8
 8012420:	4498      	add	r8, r3
 8012422:	f1b8 0f00 	cmp.w	r8, #0
 8012426:	dd71      	ble.n	801250c <_strtod_l+0x54c>
 8012428:	f018 030f 	ands.w	r3, r8, #15
 801242c:	d00a      	beq.n	8012444 <_strtod_l+0x484>
 801242e:	494d      	ldr	r1, [pc, #308]	; (8012564 <_strtod_l+0x5a4>)
 8012430:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012434:	4652      	mov	r2, sl
 8012436:	465b      	mov	r3, fp
 8012438:	e9d1 0100 	ldrd	r0, r1, [r1]
 801243c:	f7ee f8f4 	bl	8000628 <__aeabi_dmul>
 8012440:	4682      	mov	sl, r0
 8012442:	468b      	mov	fp, r1
 8012444:	f038 080f 	bics.w	r8, r8, #15
 8012448:	d04d      	beq.n	80124e6 <_strtod_l+0x526>
 801244a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801244e:	dd22      	ble.n	8012496 <_strtod_l+0x4d6>
 8012450:	2500      	movs	r5, #0
 8012452:	462e      	mov	r6, r5
 8012454:	9509      	str	r5, [sp, #36]	; 0x24
 8012456:	9507      	str	r5, [sp, #28]
 8012458:	2322      	movs	r3, #34	; 0x22
 801245a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801256c <_strtod_l+0x5ac>
 801245e:	6023      	str	r3, [r4, #0]
 8012460:	f04f 0a00 	mov.w	sl, #0
 8012464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012466:	2b00      	cmp	r3, #0
 8012468:	f43f adec 	beq.w	8012044 <_strtod_l+0x84>
 801246c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801246e:	4620      	mov	r0, r4
 8012470:	f001 ff34 	bl	80142dc <_Bfree>
 8012474:	9907      	ldr	r1, [sp, #28]
 8012476:	4620      	mov	r0, r4
 8012478:	f001 ff30 	bl	80142dc <_Bfree>
 801247c:	4631      	mov	r1, r6
 801247e:	4620      	mov	r0, r4
 8012480:	f001 ff2c 	bl	80142dc <_Bfree>
 8012484:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012486:	4620      	mov	r0, r4
 8012488:	f001 ff28 	bl	80142dc <_Bfree>
 801248c:	4629      	mov	r1, r5
 801248e:	4620      	mov	r0, r4
 8012490:	f001 ff24 	bl	80142dc <_Bfree>
 8012494:	e5d6      	b.n	8012044 <_strtod_l+0x84>
 8012496:	2300      	movs	r3, #0
 8012498:	ea4f 1828 	mov.w	r8, r8, asr #4
 801249c:	4650      	mov	r0, sl
 801249e:	4659      	mov	r1, fp
 80124a0:	4699      	mov	r9, r3
 80124a2:	f1b8 0f01 	cmp.w	r8, #1
 80124a6:	dc21      	bgt.n	80124ec <_strtod_l+0x52c>
 80124a8:	b10b      	cbz	r3, 80124ae <_strtod_l+0x4ee>
 80124aa:	4682      	mov	sl, r0
 80124ac:	468b      	mov	fp, r1
 80124ae:	4b2e      	ldr	r3, [pc, #184]	; (8012568 <_strtod_l+0x5a8>)
 80124b0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80124b4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80124b8:	4652      	mov	r2, sl
 80124ba:	465b      	mov	r3, fp
 80124bc:	e9d9 0100 	ldrd	r0, r1, [r9]
 80124c0:	f7ee f8b2 	bl	8000628 <__aeabi_dmul>
 80124c4:	4b29      	ldr	r3, [pc, #164]	; (801256c <_strtod_l+0x5ac>)
 80124c6:	460a      	mov	r2, r1
 80124c8:	400b      	ands	r3, r1
 80124ca:	4929      	ldr	r1, [pc, #164]	; (8012570 <_strtod_l+0x5b0>)
 80124cc:	428b      	cmp	r3, r1
 80124ce:	4682      	mov	sl, r0
 80124d0:	d8be      	bhi.n	8012450 <_strtod_l+0x490>
 80124d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80124d6:	428b      	cmp	r3, r1
 80124d8:	bf86      	itte	hi
 80124da:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8012574 <_strtod_l+0x5b4>
 80124de:	f04f 3aff 	movhi.w	sl, #4294967295
 80124e2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80124e6:	2300      	movs	r3, #0
 80124e8:	9304      	str	r3, [sp, #16]
 80124ea:	e081      	b.n	80125f0 <_strtod_l+0x630>
 80124ec:	f018 0f01 	tst.w	r8, #1
 80124f0:	d007      	beq.n	8012502 <_strtod_l+0x542>
 80124f2:	4b1d      	ldr	r3, [pc, #116]	; (8012568 <_strtod_l+0x5a8>)
 80124f4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80124f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124fc:	f7ee f894 	bl	8000628 <__aeabi_dmul>
 8012500:	2301      	movs	r3, #1
 8012502:	f109 0901 	add.w	r9, r9, #1
 8012506:	ea4f 0868 	mov.w	r8, r8, asr #1
 801250a:	e7ca      	b.n	80124a2 <_strtod_l+0x4e2>
 801250c:	d0eb      	beq.n	80124e6 <_strtod_l+0x526>
 801250e:	f1c8 0800 	rsb	r8, r8, #0
 8012512:	f018 020f 	ands.w	r2, r8, #15
 8012516:	d00a      	beq.n	801252e <_strtod_l+0x56e>
 8012518:	4b12      	ldr	r3, [pc, #72]	; (8012564 <_strtod_l+0x5a4>)
 801251a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801251e:	4650      	mov	r0, sl
 8012520:	4659      	mov	r1, fp
 8012522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012526:	f7ee f9a9 	bl	800087c <__aeabi_ddiv>
 801252a:	4682      	mov	sl, r0
 801252c:	468b      	mov	fp, r1
 801252e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8012532:	d0d8      	beq.n	80124e6 <_strtod_l+0x526>
 8012534:	f1b8 0f1f 	cmp.w	r8, #31
 8012538:	dd1e      	ble.n	8012578 <_strtod_l+0x5b8>
 801253a:	2500      	movs	r5, #0
 801253c:	462e      	mov	r6, r5
 801253e:	9509      	str	r5, [sp, #36]	; 0x24
 8012540:	9507      	str	r5, [sp, #28]
 8012542:	2322      	movs	r3, #34	; 0x22
 8012544:	f04f 0a00 	mov.w	sl, #0
 8012548:	f04f 0b00 	mov.w	fp, #0
 801254c:	6023      	str	r3, [r4, #0]
 801254e:	e789      	b.n	8012464 <_strtod_l+0x4a4>
 8012550:	080296e9 	.word	0x080296e9
 8012554:	0802972c 	.word	0x0802972c
 8012558:	080296e1 	.word	0x080296e1
 801255c:	08029920 	.word	0x08029920
 8012560:	0802981b 	.word	0x0802981b
 8012564:	08029aa0 	.word	0x08029aa0
 8012568:	08029a78 	.word	0x08029a78
 801256c:	7ff00000 	.word	0x7ff00000
 8012570:	7ca00000 	.word	0x7ca00000
 8012574:	7fefffff 	.word	0x7fefffff
 8012578:	f018 0310 	ands.w	r3, r8, #16
 801257c:	bf18      	it	ne
 801257e:	236a      	movne	r3, #106	; 0x6a
 8012580:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8012938 <_strtod_l+0x978>
 8012584:	9304      	str	r3, [sp, #16]
 8012586:	4650      	mov	r0, sl
 8012588:	4659      	mov	r1, fp
 801258a:	2300      	movs	r3, #0
 801258c:	f018 0f01 	tst.w	r8, #1
 8012590:	d004      	beq.n	801259c <_strtod_l+0x5dc>
 8012592:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012596:	f7ee f847 	bl	8000628 <__aeabi_dmul>
 801259a:	2301      	movs	r3, #1
 801259c:	ea5f 0868 	movs.w	r8, r8, asr #1
 80125a0:	f109 0908 	add.w	r9, r9, #8
 80125a4:	d1f2      	bne.n	801258c <_strtod_l+0x5cc>
 80125a6:	b10b      	cbz	r3, 80125ac <_strtod_l+0x5ec>
 80125a8:	4682      	mov	sl, r0
 80125aa:	468b      	mov	fp, r1
 80125ac:	9b04      	ldr	r3, [sp, #16]
 80125ae:	b1bb      	cbz	r3, 80125e0 <_strtod_l+0x620>
 80125b0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80125b4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	4659      	mov	r1, fp
 80125bc:	dd10      	ble.n	80125e0 <_strtod_l+0x620>
 80125be:	2b1f      	cmp	r3, #31
 80125c0:	f340 8128 	ble.w	8012814 <_strtod_l+0x854>
 80125c4:	2b34      	cmp	r3, #52	; 0x34
 80125c6:	bfde      	ittt	le
 80125c8:	3b20      	suble	r3, #32
 80125ca:	f04f 32ff 	movle.w	r2, #4294967295
 80125ce:	fa02 f303 	lslle.w	r3, r2, r3
 80125d2:	f04f 0a00 	mov.w	sl, #0
 80125d6:	bfcc      	ite	gt
 80125d8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80125dc:	ea03 0b01 	andle.w	fp, r3, r1
 80125e0:	2200      	movs	r2, #0
 80125e2:	2300      	movs	r3, #0
 80125e4:	4650      	mov	r0, sl
 80125e6:	4659      	mov	r1, fp
 80125e8:	f7ee fa86 	bl	8000af8 <__aeabi_dcmpeq>
 80125ec:	2800      	cmp	r0, #0
 80125ee:	d1a4      	bne.n	801253a <_strtod_l+0x57a>
 80125f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125f2:	9300      	str	r3, [sp, #0]
 80125f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80125f6:	462b      	mov	r3, r5
 80125f8:	463a      	mov	r2, r7
 80125fa:	4620      	mov	r0, r4
 80125fc:	f001 feda 	bl	80143b4 <__s2b>
 8012600:	9009      	str	r0, [sp, #36]	; 0x24
 8012602:	2800      	cmp	r0, #0
 8012604:	f43f af24 	beq.w	8012450 <_strtod_l+0x490>
 8012608:	9b07      	ldr	r3, [sp, #28]
 801260a:	1b9e      	subs	r6, r3, r6
 801260c:	9b08      	ldr	r3, [sp, #32]
 801260e:	2b00      	cmp	r3, #0
 8012610:	bfb4      	ite	lt
 8012612:	4633      	movlt	r3, r6
 8012614:	2300      	movge	r3, #0
 8012616:	9310      	str	r3, [sp, #64]	; 0x40
 8012618:	9b08      	ldr	r3, [sp, #32]
 801261a:	2500      	movs	r5, #0
 801261c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012620:	9318      	str	r3, [sp, #96]	; 0x60
 8012622:	462e      	mov	r6, r5
 8012624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012626:	4620      	mov	r0, r4
 8012628:	6859      	ldr	r1, [r3, #4]
 801262a:	f001 fe17 	bl	801425c <_Balloc>
 801262e:	9007      	str	r0, [sp, #28]
 8012630:	2800      	cmp	r0, #0
 8012632:	f43f af11 	beq.w	8012458 <_strtod_l+0x498>
 8012636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012638:	691a      	ldr	r2, [r3, #16]
 801263a:	3202      	adds	r2, #2
 801263c:	f103 010c 	add.w	r1, r3, #12
 8012640:	0092      	lsls	r2, r2, #2
 8012642:	300c      	adds	r0, #12
 8012644:	f001 fdfc 	bl	8014240 <memcpy>
 8012648:	ec4b ab10 	vmov	d0, sl, fp
 801264c:	aa20      	add	r2, sp, #128	; 0x80
 801264e:	a91f      	add	r1, sp, #124	; 0x7c
 8012650:	4620      	mov	r0, r4
 8012652:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8012656:	f002 f9e9 	bl	8014a2c <__d2b>
 801265a:	901e      	str	r0, [sp, #120]	; 0x78
 801265c:	2800      	cmp	r0, #0
 801265e:	f43f aefb 	beq.w	8012458 <_strtod_l+0x498>
 8012662:	2101      	movs	r1, #1
 8012664:	4620      	mov	r0, r4
 8012666:	f001 ff3f 	bl	80144e8 <__i2b>
 801266a:	4606      	mov	r6, r0
 801266c:	2800      	cmp	r0, #0
 801266e:	f43f aef3 	beq.w	8012458 <_strtod_l+0x498>
 8012672:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012674:	9904      	ldr	r1, [sp, #16]
 8012676:	2b00      	cmp	r3, #0
 8012678:	bfab      	itete	ge
 801267a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801267c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801267e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8012680:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8012684:	bfac      	ite	ge
 8012686:	eb03 0902 	addge.w	r9, r3, r2
 801268a:	1ad7      	sublt	r7, r2, r3
 801268c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801268e:	eba3 0801 	sub.w	r8, r3, r1
 8012692:	4490      	add	r8, r2
 8012694:	4ba3      	ldr	r3, [pc, #652]	; (8012924 <_strtod_l+0x964>)
 8012696:	f108 38ff 	add.w	r8, r8, #4294967295
 801269a:	4598      	cmp	r8, r3
 801269c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80126a0:	f280 80cc 	bge.w	801283c <_strtod_l+0x87c>
 80126a4:	eba3 0308 	sub.w	r3, r3, r8
 80126a8:	2b1f      	cmp	r3, #31
 80126aa:	eba2 0203 	sub.w	r2, r2, r3
 80126ae:	f04f 0101 	mov.w	r1, #1
 80126b2:	f300 80b6 	bgt.w	8012822 <_strtod_l+0x862>
 80126b6:	fa01 f303 	lsl.w	r3, r1, r3
 80126ba:	9311      	str	r3, [sp, #68]	; 0x44
 80126bc:	2300      	movs	r3, #0
 80126be:	930c      	str	r3, [sp, #48]	; 0x30
 80126c0:	eb09 0802 	add.w	r8, r9, r2
 80126c4:	9b04      	ldr	r3, [sp, #16]
 80126c6:	45c1      	cmp	r9, r8
 80126c8:	4417      	add	r7, r2
 80126ca:	441f      	add	r7, r3
 80126cc:	464b      	mov	r3, r9
 80126ce:	bfa8      	it	ge
 80126d0:	4643      	movge	r3, r8
 80126d2:	42bb      	cmp	r3, r7
 80126d4:	bfa8      	it	ge
 80126d6:	463b      	movge	r3, r7
 80126d8:	2b00      	cmp	r3, #0
 80126da:	bfc2      	ittt	gt
 80126dc:	eba8 0803 	subgt.w	r8, r8, r3
 80126e0:	1aff      	subgt	r7, r7, r3
 80126e2:	eba9 0903 	subgt.w	r9, r9, r3
 80126e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	dd17      	ble.n	801271c <_strtod_l+0x75c>
 80126ec:	4631      	mov	r1, r6
 80126ee:	461a      	mov	r2, r3
 80126f0:	4620      	mov	r0, r4
 80126f2:	f001 ffb5 	bl	8014660 <__pow5mult>
 80126f6:	4606      	mov	r6, r0
 80126f8:	2800      	cmp	r0, #0
 80126fa:	f43f aead 	beq.w	8012458 <_strtod_l+0x498>
 80126fe:	4601      	mov	r1, r0
 8012700:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012702:	4620      	mov	r0, r4
 8012704:	f001 ff06 	bl	8014514 <__multiply>
 8012708:	900f      	str	r0, [sp, #60]	; 0x3c
 801270a:	2800      	cmp	r0, #0
 801270c:	f43f aea4 	beq.w	8012458 <_strtod_l+0x498>
 8012710:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012712:	4620      	mov	r0, r4
 8012714:	f001 fde2 	bl	80142dc <_Bfree>
 8012718:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801271a:	931e      	str	r3, [sp, #120]	; 0x78
 801271c:	f1b8 0f00 	cmp.w	r8, #0
 8012720:	f300 8091 	bgt.w	8012846 <_strtod_l+0x886>
 8012724:	9b08      	ldr	r3, [sp, #32]
 8012726:	2b00      	cmp	r3, #0
 8012728:	dd08      	ble.n	801273c <_strtod_l+0x77c>
 801272a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801272c:	9907      	ldr	r1, [sp, #28]
 801272e:	4620      	mov	r0, r4
 8012730:	f001 ff96 	bl	8014660 <__pow5mult>
 8012734:	9007      	str	r0, [sp, #28]
 8012736:	2800      	cmp	r0, #0
 8012738:	f43f ae8e 	beq.w	8012458 <_strtod_l+0x498>
 801273c:	2f00      	cmp	r7, #0
 801273e:	dd08      	ble.n	8012752 <_strtod_l+0x792>
 8012740:	9907      	ldr	r1, [sp, #28]
 8012742:	463a      	mov	r2, r7
 8012744:	4620      	mov	r0, r4
 8012746:	f001 ffe5 	bl	8014714 <__lshift>
 801274a:	9007      	str	r0, [sp, #28]
 801274c:	2800      	cmp	r0, #0
 801274e:	f43f ae83 	beq.w	8012458 <_strtod_l+0x498>
 8012752:	f1b9 0f00 	cmp.w	r9, #0
 8012756:	dd08      	ble.n	801276a <_strtod_l+0x7aa>
 8012758:	4631      	mov	r1, r6
 801275a:	464a      	mov	r2, r9
 801275c:	4620      	mov	r0, r4
 801275e:	f001 ffd9 	bl	8014714 <__lshift>
 8012762:	4606      	mov	r6, r0
 8012764:	2800      	cmp	r0, #0
 8012766:	f43f ae77 	beq.w	8012458 <_strtod_l+0x498>
 801276a:	9a07      	ldr	r2, [sp, #28]
 801276c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801276e:	4620      	mov	r0, r4
 8012770:	f002 f858 	bl	8014824 <__mdiff>
 8012774:	4605      	mov	r5, r0
 8012776:	2800      	cmp	r0, #0
 8012778:	f43f ae6e 	beq.w	8012458 <_strtod_l+0x498>
 801277c:	68c3      	ldr	r3, [r0, #12]
 801277e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012780:	2300      	movs	r3, #0
 8012782:	60c3      	str	r3, [r0, #12]
 8012784:	4631      	mov	r1, r6
 8012786:	f002 f831 	bl	80147ec <__mcmp>
 801278a:	2800      	cmp	r0, #0
 801278c:	da65      	bge.n	801285a <_strtod_l+0x89a>
 801278e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012790:	ea53 030a 	orrs.w	r3, r3, sl
 8012794:	f040 8087 	bne.w	80128a6 <_strtod_l+0x8e6>
 8012798:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801279c:	2b00      	cmp	r3, #0
 801279e:	f040 8082 	bne.w	80128a6 <_strtod_l+0x8e6>
 80127a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80127a6:	0d1b      	lsrs	r3, r3, #20
 80127a8:	051b      	lsls	r3, r3, #20
 80127aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80127ae:	d97a      	bls.n	80128a6 <_strtod_l+0x8e6>
 80127b0:	696b      	ldr	r3, [r5, #20]
 80127b2:	b913      	cbnz	r3, 80127ba <_strtod_l+0x7fa>
 80127b4:	692b      	ldr	r3, [r5, #16]
 80127b6:	2b01      	cmp	r3, #1
 80127b8:	dd75      	ble.n	80128a6 <_strtod_l+0x8e6>
 80127ba:	4629      	mov	r1, r5
 80127bc:	2201      	movs	r2, #1
 80127be:	4620      	mov	r0, r4
 80127c0:	f001 ffa8 	bl	8014714 <__lshift>
 80127c4:	4631      	mov	r1, r6
 80127c6:	4605      	mov	r5, r0
 80127c8:	f002 f810 	bl	80147ec <__mcmp>
 80127cc:	2800      	cmp	r0, #0
 80127ce:	dd6a      	ble.n	80128a6 <_strtod_l+0x8e6>
 80127d0:	9904      	ldr	r1, [sp, #16]
 80127d2:	4a55      	ldr	r2, [pc, #340]	; (8012928 <_strtod_l+0x968>)
 80127d4:	465b      	mov	r3, fp
 80127d6:	2900      	cmp	r1, #0
 80127d8:	f000 8085 	beq.w	80128e6 <_strtod_l+0x926>
 80127dc:	ea02 010b 	and.w	r1, r2, fp
 80127e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80127e4:	dc7f      	bgt.n	80128e6 <_strtod_l+0x926>
 80127e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80127ea:	f77f aeaa 	ble.w	8012542 <_strtod_l+0x582>
 80127ee:	4a4f      	ldr	r2, [pc, #316]	; (801292c <_strtod_l+0x96c>)
 80127f0:	2300      	movs	r3, #0
 80127f2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80127f6:	4650      	mov	r0, sl
 80127f8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80127fc:	4659      	mov	r1, fp
 80127fe:	f7ed ff13 	bl	8000628 <__aeabi_dmul>
 8012802:	460b      	mov	r3, r1
 8012804:	4303      	orrs	r3, r0
 8012806:	bf08      	it	eq
 8012808:	2322      	moveq	r3, #34	; 0x22
 801280a:	4682      	mov	sl, r0
 801280c:	468b      	mov	fp, r1
 801280e:	bf08      	it	eq
 8012810:	6023      	streq	r3, [r4, #0]
 8012812:	e62b      	b.n	801246c <_strtod_l+0x4ac>
 8012814:	f04f 32ff 	mov.w	r2, #4294967295
 8012818:	fa02 f303 	lsl.w	r3, r2, r3
 801281c:	ea03 0a0a 	and.w	sl, r3, sl
 8012820:	e6de      	b.n	80125e0 <_strtod_l+0x620>
 8012822:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8012826:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801282a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801282e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8012832:	fa01 f308 	lsl.w	r3, r1, r8
 8012836:	930c      	str	r3, [sp, #48]	; 0x30
 8012838:	9111      	str	r1, [sp, #68]	; 0x44
 801283a:	e741      	b.n	80126c0 <_strtod_l+0x700>
 801283c:	2300      	movs	r3, #0
 801283e:	930c      	str	r3, [sp, #48]	; 0x30
 8012840:	2301      	movs	r3, #1
 8012842:	9311      	str	r3, [sp, #68]	; 0x44
 8012844:	e73c      	b.n	80126c0 <_strtod_l+0x700>
 8012846:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012848:	4642      	mov	r2, r8
 801284a:	4620      	mov	r0, r4
 801284c:	f001 ff62 	bl	8014714 <__lshift>
 8012850:	901e      	str	r0, [sp, #120]	; 0x78
 8012852:	2800      	cmp	r0, #0
 8012854:	f47f af66 	bne.w	8012724 <_strtod_l+0x764>
 8012858:	e5fe      	b.n	8012458 <_strtod_l+0x498>
 801285a:	465f      	mov	r7, fp
 801285c:	d16e      	bne.n	801293c <_strtod_l+0x97c>
 801285e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012860:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012864:	b342      	cbz	r2, 80128b8 <_strtod_l+0x8f8>
 8012866:	4a32      	ldr	r2, [pc, #200]	; (8012930 <_strtod_l+0x970>)
 8012868:	4293      	cmp	r3, r2
 801286a:	d128      	bne.n	80128be <_strtod_l+0x8fe>
 801286c:	9b04      	ldr	r3, [sp, #16]
 801286e:	4650      	mov	r0, sl
 8012870:	b1eb      	cbz	r3, 80128ae <_strtod_l+0x8ee>
 8012872:	4a2d      	ldr	r2, [pc, #180]	; (8012928 <_strtod_l+0x968>)
 8012874:	403a      	ands	r2, r7
 8012876:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801287a:	f04f 31ff 	mov.w	r1, #4294967295
 801287e:	d819      	bhi.n	80128b4 <_strtod_l+0x8f4>
 8012880:	0d12      	lsrs	r2, r2, #20
 8012882:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012886:	fa01 f303 	lsl.w	r3, r1, r3
 801288a:	4298      	cmp	r0, r3
 801288c:	d117      	bne.n	80128be <_strtod_l+0x8fe>
 801288e:	4b29      	ldr	r3, [pc, #164]	; (8012934 <_strtod_l+0x974>)
 8012890:	429f      	cmp	r7, r3
 8012892:	d102      	bne.n	801289a <_strtod_l+0x8da>
 8012894:	3001      	adds	r0, #1
 8012896:	f43f addf 	beq.w	8012458 <_strtod_l+0x498>
 801289a:	4b23      	ldr	r3, [pc, #140]	; (8012928 <_strtod_l+0x968>)
 801289c:	403b      	ands	r3, r7
 801289e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80128a2:	f04f 0a00 	mov.w	sl, #0
 80128a6:	9b04      	ldr	r3, [sp, #16]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d1a0      	bne.n	80127ee <_strtod_l+0x82e>
 80128ac:	e5de      	b.n	801246c <_strtod_l+0x4ac>
 80128ae:	f04f 33ff 	mov.w	r3, #4294967295
 80128b2:	e7ea      	b.n	801288a <_strtod_l+0x8ca>
 80128b4:	460b      	mov	r3, r1
 80128b6:	e7e8      	b.n	801288a <_strtod_l+0x8ca>
 80128b8:	ea53 030a 	orrs.w	r3, r3, sl
 80128bc:	d088      	beq.n	80127d0 <_strtod_l+0x810>
 80128be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80128c0:	b1db      	cbz	r3, 80128fa <_strtod_l+0x93a>
 80128c2:	423b      	tst	r3, r7
 80128c4:	d0ef      	beq.n	80128a6 <_strtod_l+0x8e6>
 80128c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80128c8:	9a04      	ldr	r2, [sp, #16]
 80128ca:	4650      	mov	r0, sl
 80128cc:	4659      	mov	r1, fp
 80128ce:	b1c3      	cbz	r3, 8012902 <_strtod_l+0x942>
 80128d0:	f7ff fb5a 	bl	8011f88 <sulp>
 80128d4:	4602      	mov	r2, r0
 80128d6:	460b      	mov	r3, r1
 80128d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80128dc:	f7ed fcee 	bl	80002bc <__adddf3>
 80128e0:	4682      	mov	sl, r0
 80128e2:	468b      	mov	fp, r1
 80128e4:	e7df      	b.n	80128a6 <_strtod_l+0x8e6>
 80128e6:	4013      	ands	r3, r2
 80128e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80128ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80128f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80128f4:	f04f 3aff 	mov.w	sl, #4294967295
 80128f8:	e7d5      	b.n	80128a6 <_strtod_l+0x8e6>
 80128fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80128fc:	ea13 0f0a 	tst.w	r3, sl
 8012900:	e7e0      	b.n	80128c4 <_strtod_l+0x904>
 8012902:	f7ff fb41 	bl	8011f88 <sulp>
 8012906:	4602      	mov	r2, r0
 8012908:	460b      	mov	r3, r1
 801290a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801290e:	f7ed fcd3 	bl	80002b8 <__aeabi_dsub>
 8012912:	2200      	movs	r2, #0
 8012914:	2300      	movs	r3, #0
 8012916:	4682      	mov	sl, r0
 8012918:	468b      	mov	fp, r1
 801291a:	f7ee f8ed 	bl	8000af8 <__aeabi_dcmpeq>
 801291e:	2800      	cmp	r0, #0
 8012920:	d0c1      	beq.n	80128a6 <_strtod_l+0x8e6>
 8012922:	e60e      	b.n	8012542 <_strtod_l+0x582>
 8012924:	fffffc02 	.word	0xfffffc02
 8012928:	7ff00000 	.word	0x7ff00000
 801292c:	39500000 	.word	0x39500000
 8012930:	000fffff 	.word	0x000fffff
 8012934:	7fefffff 	.word	0x7fefffff
 8012938:	08029740 	.word	0x08029740
 801293c:	4631      	mov	r1, r6
 801293e:	4628      	mov	r0, r5
 8012940:	f002 f8d0 	bl	8014ae4 <__ratio>
 8012944:	ec59 8b10 	vmov	r8, r9, d0
 8012948:	ee10 0a10 	vmov	r0, s0
 801294c:	2200      	movs	r2, #0
 801294e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012952:	4649      	mov	r1, r9
 8012954:	f7ee f8e4 	bl	8000b20 <__aeabi_dcmple>
 8012958:	2800      	cmp	r0, #0
 801295a:	d07c      	beq.n	8012a56 <_strtod_l+0xa96>
 801295c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801295e:	2b00      	cmp	r3, #0
 8012960:	d04c      	beq.n	80129fc <_strtod_l+0xa3c>
 8012962:	4b95      	ldr	r3, [pc, #596]	; (8012bb8 <_strtod_l+0xbf8>)
 8012964:	2200      	movs	r2, #0
 8012966:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801296a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8012bb8 <_strtod_l+0xbf8>
 801296e:	f04f 0800 	mov.w	r8, #0
 8012972:	4b92      	ldr	r3, [pc, #584]	; (8012bbc <_strtod_l+0xbfc>)
 8012974:	403b      	ands	r3, r7
 8012976:	9311      	str	r3, [sp, #68]	; 0x44
 8012978:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801297a:	4b91      	ldr	r3, [pc, #580]	; (8012bc0 <_strtod_l+0xc00>)
 801297c:	429a      	cmp	r2, r3
 801297e:	f040 80b2 	bne.w	8012ae6 <_strtod_l+0xb26>
 8012982:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012986:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801298a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801298e:	ec4b ab10 	vmov	d0, sl, fp
 8012992:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8012996:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801299a:	f001 ffcb 	bl	8014934 <__ulp>
 801299e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80129a2:	ec53 2b10 	vmov	r2, r3, d0
 80129a6:	f7ed fe3f 	bl	8000628 <__aeabi_dmul>
 80129aa:	4652      	mov	r2, sl
 80129ac:	465b      	mov	r3, fp
 80129ae:	f7ed fc85 	bl	80002bc <__adddf3>
 80129b2:	460b      	mov	r3, r1
 80129b4:	4981      	ldr	r1, [pc, #516]	; (8012bbc <_strtod_l+0xbfc>)
 80129b6:	4a83      	ldr	r2, [pc, #524]	; (8012bc4 <_strtod_l+0xc04>)
 80129b8:	4019      	ands	r1, r3
 80129ba:	4291      	cmp	r1, r2
 80129bc:	4682      	mov	sl, r0
 80129be:	d95e      	bls.n	8012a7e <_strtod_l+0xabe>
 80129c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80129c2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80129c6:	4293      	cmp	r3, r2
 80129c8:	d103      	bne.n	80129d2 <_strtod_l+0xa12>
 80129ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80129cc:	3301      	adds	r3, #1
 80129ce:	f43f ad43 	beq.w	8012458 <_strtod_l+0x498>
 80129d2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8012bd0 <_strtod_l+0xc10>
 80129d6:	f04f 3aff 	mov.w	sl, #4294967295
 80129da:	991e      	ldr	r1, [sp, #120]	; 0x78
 80129dc:	4620      	mov	r0, r4
 80129de:	f001 fc7d 	bl	80142dc <_Bfree>
 80129e2:	9907      	ldr	r1, [sp, #28]
 80129e4:	4620      	mov	r0, r4
 80129e6:	f001 fc79 	bl	80142dc <_Bfree>
 80129ea:	4631      	mov	r1, r6
 80129ec:	4620      	mov	r0, r4
 80129ee:	f001 fc75 	bl	80142dc <_Bfree>
 80129f2:	4629      	mov	r1, r5
 80129f4:	4620      	mov	r0, r4
 80129f6:	f001 fc71 	bl	80142dc <_Bfree>
 80129fa:	e613      	b.n	8012624 <_strtod_l+0x664>
 80129fc:	f1ba 0f00 	cmp.w	sl, #0
 8012a00:	d11b      	bne.n	8012a3a <_strtod_l+0xa7a>
 8012a02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012a06:	b9f3      	cbnz	r3, 8012a46 <_strtod_l+0xa86>
 8012a08:	4b6b      	ldr	r3, [pc, #428]	; (8012bb8 <_strtod_l+0xbf8>)
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	4640      	mov	r0, r8
 8012a0e:	4649      	mov	r1, r9
 8012a10:	f7ee f87c 	bl	8000b0c <__aeabi_dcmplt>
 8012a14:	b9d0      	cbnz	r0, 8012a4c <_strtod_l+0xa8c>
 8012a16:	4640      	mov	r0, r8
 8012a18:	4649      	mov	r1, r9
 8012a1a:	4b6b      	ldr	r3, [pc, #428]	; (8012bc8 <_strtod_l+0xc08>)
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	f7ed fe03 	bl	8000628 <__aeabi_dmul>
 8012a22:	4680      	mov	r8, r0
 8012a24:	4689      	mov	r9, r1
 8012a26:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012a2a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8012a2e:	931b      	str	r3, [sp, #108]	; 0x6c
 8012a30:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8012a34:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012a38:	e79b      	b.n	8012972 <_strtod_l+0x9b2>
 8012a3a:	f1ba 0f01 	cmp.w	sl, #1
 8012a3e:	d102      	bne.n	8012a46 <_strtod_l+0xa86>
 8012a40:	2f00      	cmp	r7, #0
 8012a42:	f43f ad7e 	beq.w	8012542 <_strtod_l+0x582>
 8012a46:	4b61      	ldr	r3, [pc, #388]	; (8012bcc <_strtod_l+0xc0c>)
 8012a48:	2200      	movs	r2, #0
 8012a4a:	e78c      	b.n	8012966 <_strtod_l+0x9a6>
 8012a4c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8012bc8 <_strtod_l+0xc08>
 8012a50:	f04f 0800 	mov.w	r8, #0
 8012a54:	e7e7      	b.n	8012a26 <_strtod_l+0xa66>
 8012a56:	4b5c      	ldr	r3, [pc, #368]	; (8012bc8 <_strtod_l+0xc08>)
 8012a58:	4640      	mov	r0, r8
 8012a5a:	4649      	mov	r1, r9
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	f7ed fde3 	bl	8000628 <__aeabi_dmul>
 8012a62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a64:	4680      	mov	r8, r0
 8012a66:	4689      	mov	r9, r1
 8012a68:	b933      	cbnz	r3, 8012a78 <_strtod_l+0xab8>
 8012a6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012a6e:	9012      	str	r0, [sp, #72]	; 0x48
 8012a70:	9313      	str	r3, [sp, #76]	; 0x4c
 8012a72:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8012a76:	e7dd      	b.n	8012a34 <_strtod_l+0xa74>
 8012a78:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8012a7c:	e7f9      	b.n	8012a72 <_strtod_l+0xab2>
 8012a7e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8012a82:	9b04      	ldr	r3, [sp, #16]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d1a8      	bne.n	80129da <_strtod_l+0xa1a>
 8012a88:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012a8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012a8e:	0d1b      	lsrs	r3, r3, #20
 8012a90:	051b      	lsls	r3, r3, #20
 8012a92:	429a      	cmp	r2, r3
 8012a94:	d1a1      	bne.n	80129da <_strtod_l+0xa1a>
 8012a96:	4640      	mov	r0, r8
 8012a98:	4649      	mov	r1, r9
 8012a9a:	f7ee f925 	bl	8000ce8 <__aeabi_d2lz>
 8012a9e:	f7ed fd95 	bl	80005cc <__aeabi_l2d>
 8012aa2:	4602      	mov	r2, r0
 8012aa4:	460b      	mov	r3, r1
 8012aa6:	4640      	mov	r0, r8
 8012aa8:	4649      	mov	r1, r9
 8012aaa:	f7ed fc05 	bl	80002b8 <__aeabi_dsub>
 8012aae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012ab0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012ab4:	ea43 030a 	orr.w	r3, r3, sl
 8012ab8:	4313      	orrs	r3, r2
 8012aba:	4680      	mov	r8, r0
 8012abc:	4689      	mov	r9, r1
 8012abe:	d053      	beq.n	8012b68 <_strtod_l+0xba8>
 8012ac0:	a335      	add	r3, pc, #212	; (adr r3, 8012b98 <_strtod_l+0xbd8>)
 8012ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ac6:	f7ee f821 	bl	8000b0c <__aeabi_dcmplt>
 8012aca:	2800      	cmp	r0, #0
 8012acc:	f47f acce 	bne.w	801246c <_strtod_l+0x4ac>
 8012ad0:	a333      	add	r3, pc, #204	; (adr r3, 8012ba0 <_strtod_l+0xbe0>)
 8012ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad6:	4640      	mov	r0, r8
 8012ad8:	4649      	mov	r1, r9
 8012ada:	f7ee f835 	bl	8000b48 <__aeabi_dcmpgt>
 8012ade:	2800      	cmp	r0, #0
 8012ae0:	f43f af7b 	beq.w	80129da <_strtod_l+0xa1a>
 8012ae4:	e4c2      	b.n	801246c <_strtod_l+0x4ac>
 8012ae6:	9b04      	ldr	r3, [sp, #16]
 8012ae8:	b333      	cbz	r3, 8012b38 <_strtod_l+0xb78>
 8012aea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012aec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012af0:	d822      	bhi.n	8012b38 <_strtod_l+0xb78>
 8012af2:	a32d      	add	r3, pc, #180	; (adr r3, 8012ba8 <_strtod_l+0xbe8>)
 8012af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012af8:	4640      	mov	r0, r8
 8012afa:	4649      	mov	r1, r9
 8012afc:	f7ee f810 	bl	8000b20 <__aeabi_dcmple>
 8012b00:	b1a0      	cbz	r0, 8012b2c <_strtod_l+0xb6c>
 8012b02:	4649      	mov	r1, r9
 8012b04:	4640      	mov	r0, r8
 8012b06:	f7ee f867 	bl	8000bd8 <__aeabi_d2uiz>
 8012b0a:	2801      	cmp	r0, #1
 8012b0c:	bf38      	it	cc
 8012b0e:	2001      	movcc	r0, #1
 8012b10:	f7ed fd10 	bl	8000534 <__aeabi_ui2d>
 8012b14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012b16:	4680      	mov	r8, r0
 8012b18:	4689      	mov	r9, r1
 8012b1a:	bb13      	cbnz	r3, 8012b62 <_strtod_l+0xba2>
 8012b1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b20:	9014      	str	r0, [sp, #80]	; 0x50
 8012b22:	9315      	str	r3, [sp, #84]	; 0x54
 8012b24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012b28:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012b2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012b2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012b30:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012b34:	1a9b      	subs	r3, r3, r2
 8012b36:	930d      	str	r3, [sp, #52]	; 0x34
 8012b38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012b3c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012b40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012b44:	f001 fef6 	bl	8014934 <__ulp>
 8012b48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012b4c:	ec53 2b10 	vmov	r2, r3, d0
 8012b50:	f7ed fd6a 	bl	8000628 <__aeabi_dmul>
 8012b54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012b58:	f7ed fbb0 	bl	80002bc <__adddf3>
 8012b5c:	4682      	mov	sl, r0
 8012b5e:	468b      	mov	fp, r1
 8012b60:	e78f      	b.n	8012a82 <_strtod_l+0xac2>
 8012b62:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8012b66:	e7dd      	b.n	8012b24 <_strtod_l+0xb64>
 8012b68:	a311      	add	r3, pc, #68	; (adr r3, 8012bb0 <_strtod_l+0xbf0>)
 8012b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b6e:	f7ed ffcd 	bl	8000b0c <__aeabi_dcmplt>
 8012b72:	e7b4      	b.n	8012ade <_strtod_l+0xb1e>
 8012b74:	2300      	movs	r3, #0
 8012b76:	930e      	str	r3, [sp, #56]	; 0x38
 8012b78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012b7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012b7c:	6013      	str	r3, [r2, #0]
 8012b7e:	f7ff ba65 	b.w	801204c <_strtod_l+0x8c>
 8012b82:	2b65      	cmp	r3, #101	; 0x65
 8012b84:	f43f ab5d 	beq.w	8012242 <_strtod_l+0x282>
 8012b88:	2b45      	cmp	r3, #69	; 0x45
 8012b8a:	f43f ab5a 	beq.w	8012242 <_strtod_l+0x282>
 8012b8e:	2201      	movs	r2, #1
 8012b90:	f7ff bb92 	b.w	80122b8 <_strtod_l+0x2f8>
 8012b94:	f3af 8000 	nop.w
 8012b98:	94a03595 	.word	0x94a03595
 8012b9c:	3fdfffff 	.word	0x3fdfffff
 8012ba0:	35afe535 	.word	0x35afe535
 8012ba4:	3fe00000 	.word	0x3fe00000
 8012ba8:	ffc00000 	.word	0xffc00000
 8012bac:	41dfffff 	.word	0x41dfffff
 8012bb0:	94a03595 	.word	0x94a03595
 8012bb4:	3fcfffff 	.word	0x3fcfffff
 8012bb8:	3ff00000 	.word	0x3ff00000
 8012bbc:	7ff00000 	.word	0x7ff00000
 8012bc0:	7fe00000 	.word	0x7fe00000
 8012bc4:	7c9fffff 	.word	0x7c9fffff
 8012bc8:	3fe00000 	.word	0x3fe00000
 8012bcc:	bff00000 	.word	0xbff00000
 8012bd0:	7fefffff 	.word	0x7fefffff

08012bd4 <_strtod_r>:
 8012bd4:	4b01      	ldr	r3, [pc, #4]	; (8012bdc <_strtod_r+0x8>)
 8012bd6:	f7ff b9f3 	b.w	8011fc0 <_strtod_l>
 8012bda:	bf00      	nop
 8012bdc:	200000a8 	.word	0x200000a8

08012be0 <strtod>:
 8012be0:	460a      	mov	r2, r1
 8012be2:	4601      	mov	r1, r0
 8012be4:	4802      	ldr	r0, [pc, #8]	; (8012bf0 <strtod+0x10>)
 8012be6:	4b03      	ldr	r3, [pc, #12]	; (8012bf4 <strtod+0x14>)
 8012be8:	6800      	ldr	r0, [r0, #0]
 8012bea:	f7ff b9e9 	b.w	8011fc0 <_strtod_l>
 8012bee:	bf00      	nop
 8012bf0:	20000040 	.word	0x20000040
 8012bf4:	200000a8 	.word	0x200000a8

08012bf8 <strtok>:
 8012bf8:	4b16      	ldr	r3, [pc, #88]	; (8012c54 <strtok+0x5c>)
 8012bfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012bfc:	681e      	ldr	r6, [r3, #0]
 8012bfe:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8012c00:	4605      	mov	r5, r0
 8012c02:	b9fc      	cbnz	r4, 8012c44 <strtok+0x4c>
 8012c04:	2050      	movs	r0, #80	; 0x50
 8012c06:	9101      	str	r1, [sp, #4]
 8012c08:	f001 fb00 	bl	801420c <malloc>
 8012c0c:	9901      	ldr	r1, [sp, #4]
 8012c0e:	65b0      	str	r0, [r6, #88]	; 0x58
 8012c10:	4602      	mov	r2, r0
 8012c12:	b920      	cbnz	r0, 8012c1e <strtok+0x26>
 8012c14:	4b10      	ldr	r3, [pc, #64]	; (8012c58 <strtok+0x60>)
 8012c16:	4811      	ldr	r0, [pc, #68]	; (8012c5c <strtok+0x64>)
 8012c18:	2157      	movs	r1, #87	; 0x57
 8012c1a:	f000 f8d9 	bl	8012dd0 <__assert_func>
 8012c1e:	e9c0 4400 	strd	r4, r4, [r0]
 8012c22:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8012c26:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012c2a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8012c2e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8012c32:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8012c36:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8012c3a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8012c3e:	6184      	str	r4, [r0, #24]
 8012c40:	7704      	strb	r4, [r0, #28]
 8012c42:	6244      	str	r4, [r0, #36]	; 0x24
 8012c44:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8012c46:	2301      	movs	r3, #1
 8012c48:	4628      	mov	r0, r5
 8012c4a:	b002      	add	sp, #8
 8012c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c50:	f000 b806 	b.w	8012c60 <__strtok_r>
 8012c54:	20000040 	.word	0x20000040
 8012c58:	08029768 	.word	0x08029768
 8012c5c:	0802977f 	.word	0x0802977f

08012c60 <__strtok_r>:
 8012c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c62:	b908      	cbnz	r0, 8012c68 <__strtok_r+0x8>
 8012c64:	6810      	ldr	r0, [r2, #0]
 8012c66:	b188      	cbz	r0, 8012c8c <__strtok_r+0x2c>
 8012c68:	4604      	mov	r4, r0
 8012c6a:	4620      	mov	r0, r4
 8012c6c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012c70:	460f      	mov	r7, r1
 8012c72:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012c76:	b91e      	cbnz	r6, 8012c80 <__strtok_r+0x20>
 8012c78:	b965      	cbnz	r5, 8012c94 <__strtok_r+0x34>
 8012c7a:	6015      	str	r5, [r2, #0]
 8012c7c:	4628      	mov	r0, r5
 8012c7e:	e005      	b.n	8012c8c <__strtok_r+0x2c>
 8012c80:	42b5      	cmp	r5, r6
 8012c82:	d1f6      	bne.n	8012c72 <__strtok_r+0x12>
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d1f0      	bne.n	8012c6a <__strtok_r+0xa>
 8012c88:	6014      	str	r4, [r2, #0]
 8012c8a:	7003      	strb	r3, [r0, #0]
 8012c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c8e:	461c      	mov	r4, r3
 8012c90:	e00c      	b.n	8012cac <__strtok_r+0x4c>
 8012c92:	b915      	cbnz	r5, 8012c9a <__strtok_r+0x3a>
 8012c94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012c98:	460e      	mov	r6, r1
 8012c9a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8012c9e:	42ab      	cmp	r3, r5
 8012ca0:	d1f7      	bne.n	8012c92 <__strtok_r+0x32>
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d0f3      	beq.n	8012c8e <__strtok_r+0x2e>
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8012cac:	6014      	str	r4, [r2, #0]
 8012cae:	e7ed      	b.n	8012c8c <__strtok_r+0x2c>

08012cb0 <_strtol_l.isra.0>:
 8012cb0:	2b01      	cmp	r3, #1
 8012cb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cb6:	d001      	beq.n	8012cbc <_strtol_l.isra.0+0xc>
 8012cb8:	2b24      	cmp	r3, #36	; 0x24
 8012cba:	d906      	bls.n	8012cca <_strtol_l.isra.0+0x1a>
 8012cbc:	f7fe fa92 	bl	80111e4 <__errno>
 8012cc0:	2316      	movs	r3, #22
 8012cc2:	6003      	str	r3, [r0, #0]
 8012cc4:	2000      	movs	r0, #0
 8012cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cca:	4f3a      	ldr	r7, [pc, #232]	; (8012db4 <_strtol_l.isra.0+0x104>)
 8012ccc:	468e      	mov	lr, r1
 8012cce:	4676      	mov	r6, lr
 8012cd0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8012cd4:	5de5      	ldrb	r5, [r4, r7]
 8012cd6:	f015 0508 	ands.w	r5, r5, #8
 8012cda:	d1f8      	bne.n	8012cce <_strtol_l.isra.0+0x1e>
 8012cdc:	2c2d      	cmp	r4, #45	; 0x2d
 8012cde:	d134      	bne.n	8012d4a <_strtol_l.isra.0+0x9a>
 8012ce0:	f89e 4000 	ldrb.w	r4, [lr]
 8012ce4:	f04f 0801 	mov.w	r8, #1
 8012ce8:	f106 0e02 	add.w	lr, r6, #2
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d05c      	beq.n	8012daa <_strtol_l.isra.0+0xfa>
 8012cf0:	2b10      	cmp	r3, #16
 8012cf2:	d10c      	bne.n	8012d0e <_strtol_l.isra.0+0x5e>
 8012cf4:	2c30      	cmp	r4, #48	; 0x30
 8012cf6:	d10a      	bne.n	8012d0e <_strtol_l.isra.0+0x5e>
 8012cf8:	f89e 4000 	ldrb.w	r4, [lr]
 8012cfc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012d00:	2c58      	cmp	r4, #88	; 0x58
 8012d02:	d14d      	bne.n	8012da0 <_strtol_l.isra.0+0xf0>
 8012d04:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8012d08:	2310      	movs	r3, #16
 8012d0a:	f10e 0e02 	add.w	lr, lr, #2
 8012d0e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8012d12:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012d16:	2600      	movs	r6, #0
 8012d18:	fbbc f9f3 	udiv	r9, ip, r3
 8012d1c:	4635      	mov	r5, r6
 8012d1e:	fb03 ca19 	mls	sl, r3, r9, ip
 8012d22:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8012d26:	2f09      	cmp	r7, #9
 8012d28:	d818      	bhi.n	8012d5c <_strtol_l.isra.0+0xac>
 8012d2a:	463c      	mov	r4, r7
 8012d2c:	42a3      	cmp	r3, r4
 8012d2e:	dd24      	ble.n	8012d7a <_strtol_l.isra.0+0xca>
 8012d30:	2e00      	cmp	r6, #0
 8012d32:	db1f      	blt.n	8012d74 <_strtol_l.isra.0+0xc4>
 8012d34:	45a9      	cmp	r9, r5
 8012d36:	d31d      	bcc.n	8012d74 <_strtol_l.isra.0+0xc4>
 8012d38:	d101      	bne.n	8012d3e <_strtol_l.isra.0+0x8e>
 8012d3a:	45a2      	cmp	sl, r4
 8012d3c:	db1a      	blt.n	8012d74 <_strtol_l.isra.0+0xc4>
 8012d3e:	fb05 4503 	mla	r5, r5, r3, r4
 8012d42:	2601      	movs	r6, #1
 8012d44:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8012d48:	e7eb      	b.n	8012d22 <_strtol_l.isra.0+0x72>
 8012d4a:	2c2b      	cmp	r4, #43	; 0x2b
 8012d4c:	bf08      	it	eq
 8012d4e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8012d52:	46a8      	mov	r8, r5
 8012d54:	bf08      	it	eq
 8012d56:	f106 0e02 	addeq.w	lr, r6, #2
 8012d5a:	e7c7      	b.n	8012cec <_strtol_l.isra.0+0x3c>
 8012d5c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8012d60:	2f19      	cmp	r7, #25
 8012d62:	d801      	bhi.n	8012d68 <_strtol_l.isra.0+0xb8>
 8012d64:	3c37      	subs	r4, #55	; 0x37
 8012d66:	e7e1      	b.n	8012d2c <_strtol_l.isra.0+0x7c>
 8012d68:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8012d6c:	2f19      	cmp	r7, #25
 8012d6e:	d804      	bhi.n	8012d7a <_strtol_l.isra.0+0xca>
 8012d70:	3c57      	subs	r4, #87	; 0x57
 8012d72:	e7db      	b.n	8012d2c <_strtol_l.isra.0+0x7c>
 8012d74:	f04f 36ff 	mov.w	r6, #4294967295
 8012d78:	e7e4      	b.n	8012d44 <_strtol_l.isra.0+0x94>
 8012d7a:	2e00      	cmp	r6, #0
 8012d7c:	da05      	bge.n	8012d8a <_strtol_l.isra.0+0xda>
 8012d7e:	2322      	movs	r3, #34	; 0x22
 8012d80:	6003      	str	r3, [r0, #0]
 8012d82:	4665      	mov	r5, ip
 8012d84:	b942      	cbnz	r2, 8012d98 <_strtol_l.isra.0+0xe8>
 8012d86:	4628      	mov	r0, r5
 8012d88:	e79d      	b.n	8012cc6 <_strtol_l.isra.0+0x16>
 8012d8a:	f1b8 0f00 	cmp.w	r8, #0
 8012d8e:	d000      	beq.n	8012d92 <_strtol_l.isra.0+0xe2>
 8012d90:	426d      	negs	r5, r5
 8012d92:	2a00      	cmp	r2, #0
 8012d94:	d0f7      	beq.n	8012d86 <_strtol_l.isra.0+0xd6>
 8012d96:	b10e      	cbz	r6, 8012d9c <_strtol_l.isra.0+0xec>
 8012d98:	f10e 31ff 	add.w	r1, lr, #4294967295
 8012d9c:	6011      	str	r1, [r2, #0]
 8012d9e:	e7f2      	b.n	8012d86 <_strtol_l.isra.0+0xd6>
 8012da0:	2430      	movs	r4, #48	; 0x30
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d1b3      	bne.n	8012d0e <_strtol_l.isra.0+0x5e>
 8012da6:	2308      	movs	r3, #8
 8012da8:	e7b1      	b.n	8012d0e <_strtol_l.isra.0+0x5e>
 8012daa:	2c30      	cmp	r4, #48	; 0x30
 8012dac:	d0a4      	beq.n	8012cf8 <_strtol_l.isra.0+0x48>
 8012dae:	230a      	movs	r3, #10
 8012db0:	e7ad      	b.n	8012d0e <_strtol_l.isra.0+0x5e>
 8012db2:	bf00      	nop
 8012db4:	0802981d 	.word	0x0802981d

08012db8 <_strtol_r>:
 8012db8:	f7ff bf7a 	b.w	8012cb0 <_strtol_l.isra.0>

08012dbc <strtol>:
 8012dbc:	4613      	mov	r3, r2
 8012dbe:	460a      	mov	r2, r1
 8012dc0:	4601      	mov	r1, r0
 8012dc2:	4802      	ldr	r0, [pc, #8]	; (8012dcc <strtol+0x10>)
 8012dc4:	6800      	ldr	r0, [r0, #0]
 8012dc6:	f7ff bf73 	b.w	8012cb0 <_strtol_l.isra.0>
 8012dca:	bf00      	nop
 8012dcc:	20000040 	.word	0x20000040

08012dd0 <__assert_func>:
 8012dd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012dd2:	4614      	mov	r4, r2
 8012dd4:	461a      	mov	r2, r3
 8012dd6:	4b09      	ldr	r3, [pc, #36]	; (8012dfc <__assert_func+0x2c>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	4605      	mov	r5, r0
 8012ddc:	68d8      	ldr	r0, [r3, #12]
 8012dde:	b14c      	cbz	r4, 8012df4 <__assert_func+0x24>
 8012de0:	4b07      	ldr	r3, [pc, #28]	; (8012e00 <__assert_func+0x30>)
 8012de2:	9100      	str	r1, [sp, #0]
 8012de4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012de8:	4906      	ldr	r1, [pc, #24]	; (8012e04 <__assert_func+0x34>)
 8012dea:	462b      	mov	r3, r5
 8012dec:	f000 fe88 	bl	8013b00 <fiprintf>
 8012df0:	f002 fb56 	bl	80154a0 <abort>
 8012df4:	4b04      	ldr	r3, [pc, #16]	; (8012e08 <__assert_func+0x38>)
 8012df6:	461c      	mov	r4, r3
 8012df8:	e7f3      	b.n	8012de2 <__assert_func+0x12>
 8012dfa:	bf00      	nop
 8012dfc:	20000040 	.word	0x20000040
 8012e00:	080297e0 	.word	0x080297e0
 8012e04:	080297ed 	.word	0x080297ed
 8012e08:	0802981b 	.word	0x0802981b

08012e0c <quorem>:
 8012e0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e10:	6903      	ldr	r3, [r0, #16]
 8012e12:	690c      	ldr	r4, [r1, #16]
 8012e14:	42a3      	cmp	r3, r4
 8012e16:	4607      	mov	r7, r0
 8012e18:	f2c0 8081 	blt.w	8012f1e <quorem+0x112>
 8012e1c:	3c01      	subs	r4, #1
 8012e1e:	f101 0814 	add.w	r8, r1, #20
 8012e22:	f100 0514 	add.w	r5, r0, #20
 8012e26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012e2a:	9301      	str	r3, [sp, #4]
 8012e2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012e30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012e34:	3301      	adds	r3, #1
 8012e36:	429a      	cmp	r2, r3
 8012e38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012e3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012e40:	fbb2 f6f3 	udiv	r6, r2, r3
 8012e44:	d331      	bcc.n	8012eaa <quorem+0x9e>
 8012e46:	f04f 0e00 	mov.w	lr, #0
 8012e4a:	4640      	mov	r0, r8
 8012e4c:	46ac      	mov	ip, r5
 8012e4e:	46f2      	mov	sl, lr
 8012e50:	f850 2b04 	ldr.w	r2, [r0], #4
 8012e54:	b293      	uxth	r3, r2
 8012e56:	fb06 e303 	mla	r3, r6, r3, lr
 8012e5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012e5e:	b29b      	uxth	r3, r3
 8012e60:	ebaa 0303 	sub.w	r3, sl, r3
 8012e64:	0c12      	lsrs	r2, r2, #16
 8012e66:	f8dc a000 	ldr.w	sl, [ip]
 8012e6a:	fb06 e202 	mla	r2, r6, r2, lr
 8012e6e:	fa13 f38a 	uxtah	r3, r3, sl
 8012e72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012e76:	fa1f fa82 	uxth.w	sl, r2
 8012e7a:	f8dc 2000 	ldr.w	r2, [ip]
 8012e7e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8012e82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012e86:	b29b      	uxth	r3, r3
 8012e88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012e8c:	4581      	cmp	r9, r0
 8012e8e:	f84c 3b04 	str.w	r3, [ip], #4
 8012e92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012e96:	d2db      	bcs.n	8012e50 <quorem+0x44>
 8012e98:	f855 300b 	ldr.w	r3, [r5, fp]
 8012e9c:	b92b      	cbnz	r3, 8012eaa <quorem+0x9e>
 8012e9e:	9b01      	ldr	r3, [sp, #4]
 8012ea0:	3b04      	subs	r3, #4
 8012ea2:	429d      	cmp	r5, r3
 8012ea4:	461a      	mov	r2, r3
 8012ea6:	d32e      	bcc.n	8012f06 <quorem+0xfa>
 8012ea8:	613c      	str	r4, [r7, #16]
 8012eaa:	4638      	mov	r0, r7
 8012eac:	f001 fc9e 	bl	80147ec <__mcmp>
 8012eb0:	2800      	cmp	r0, #0
 8012eb2:	db24      	blt.n	8012efe <quorem+0xf2>
 8012eb4:	3601      	adds	r6, #1
 8012eb6:	4628      	mov	r0, r5
 8012eb8:	f04f 0c00 	mov.w	ip, #0
 8012ebc:	f858 2b04 	ldr.w	r2, [r8], #4
 8012ec0:	f8d0 e000 	ldr.w	lr, [r0]
 8012ec4:	b293      	uxth	r3, r2
 8012ec6:	ebac 0303 	sub.w	r3, ip, r3
 8012eca:	0c12      	lsrs	r2, r2, #16
 8012ecc:	fa13 f38e 	uxtah	r3, r3, lr
 8012ed0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012ed4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012ed8:	b29b      	uxth	r3, r3
 8012eda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012ede:	45c1      	cmp	r9, r8
 8012ee0:	f840 3b04 	str.w	r3, [r0], #4
 8012ee4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012ee8:	d2e8      	bcs.n	8012ebc <quorem+0xb0>
 8012eea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012eee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012ef2:	b922      	cbnz	r2, 8012efe <quorem+0xf2>
 8012ef4:	3b04      	subs	r3, #4
 8012ef6:	429d      	cmp	r5, r3
 8012ef8:	461a      	mov	r2, r3
 8012efa:	d30a      	bcc.n	8012f12 <quorem+0x106>
 8012efc:	613c      	str	r4, [r7, #16]
 8012efe:	4630      	mov	r0, r6
 8012f00:	b003      	add	sp, #12
 8012f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f06:	6812      	ldr	r2, [r2, #0]
 8012f08:	3b04      	subs	r3, #4
 8012f0a:	2a00      	cmp	r2, #0
 8012f0c:	d1cc      	bne.n	8012ea8 <quorem+0x9c>
 8012f0e:	3c01      	subs	r4, #1
 8012f10:	e7c7      	b.n	8012ea2 <quorem+0x96>
 8012f12:	6812      	ldr	r2, [r2, #0]
 8012f14:	3b04      	subs	r3, #4
 8012f16:	2a00      	cmp	r2, #0
 8012f18:	d1f0      	bne.n	8012efc <quorem+0xf0>
 8012f1a:	3c01      	subs	r4, #1
 8012f1c:	e7eb      	b.n	8012ef6 <quorem+0xea>
 8012f1e:	2000      	movs	r0, #0
 8012f20:	e7ee      	b.n	8012f00 <quorem+0xf4>
 8012f22:	0000      	movs	r0, r0
 8012f24:	0000      	movs	r0, r0
	...

08012f28 <_dtoa_r>:
 8012f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f2c:	ed2d 8b02 	vpush	{d8}
 8012f30:	ec57 6b10 	vmov	r6, r7, d0
 8012f34:	b095      	sub	sp, #84	; 0x54
 8012f36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012f38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012f3c:	9105      	str	r1, [sp, #20]
 8012f3e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012f42:	4604      	mov	r4, r0
 8012f44:	9209      	str	r2, [sp, #36]	; 0x24
 8012f46:	930f      	str	r3, [sp, #60]	; 0x3c
 8012f48:	b975      	cbnz	r5, 8012f68 <_dtoa_r+0x40>
 8012f4a:	2010      	movs	r0, #16
 8012f4c:	f001 f95e 	bl	801420c <malloc>
 8012f50:	4602      	mov	r2, r0
 8012f52:	6260      	str	r0, [r4, #36]	; 0x24
 8012f54:	b920      	cbnz	r0, 8012f60 <_dtoa_r+0x38>
 8012f56:	4bb2      	ldr	r3, [pc, #712]	; (8013220 <_dtoa_r+0x2f8>)
 8012f58:	21ea      	movs	r1, #234	; 0xea
 8012f5a:	48b2      	ldr	r0, [pc, #712]	; (8013224 <_dtoa_r+0x2fc>)
 8012f5c:	f7ff ff38 	bl	8012dd0 <__assert_func>
 8012f60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012f64:	6005      	str	r5, [r0, #0]
 8012f66:	60c5      	str	r5, [r0, #12]
 8012f68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f6a:	6819      	ldr	r1, [r3, #0]
 8012f6c:	b151      	cbz	r1, 8012f84 <_dtoa_r+0x5c>
 8012f6e:	685a      	ldr	r2, [r3, #4]
 8012f70:	604a      	str	r2, [r1, #4]
 8012f72:	2301      	movs	r3, #1
 8012f74:	4093      	lsls	r3, r2
 8012f76:	608b      	str	r3, [r1, #8]
 8012f78:	4620      	mov	r0, r4
 8012f7a:	f001 f9af 	bl	80142dc <_Bfree>
 8012f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f80:	2200      	movs	r2, #0
 8012f82:	601a      	str	r2, [r3, #0]
 8012f84:	1e3b      	subs	r3, r7, #0
 8012f86:	bfb9      	ittee	lt
 8012f88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012f8c:	9303      	strlt	r3, [sp, #12]
 8012f8e:	2300      	movge	r3, #0
 8012f90:	f8c8 3000 	strge.w	r3, [r8]
 8012f94:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012f98:	4ba3      	ldr	r3, [pc, #652]	; (8013228 <_dtoa_r+0x300>)
 8012f9a:	bfbc      	itt	lt
 8012f9c:	2201      	movlt	r2, #1
 8012f9e:	f8c8 2000 	strlt.w	r2, [r8]
 8012fa2:	ea33 0309 	bics.w	r3, r3, r9
 8012fa6:	d11b      	bne.n	8012fe0 <_dtoa_r+0xb8>
 8012fa8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012faa:	f242 730f 	movw	r3, #9999	; 0x270f
 8012fae:	6013      	str	r3, [r2, #0]
 8012fb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012fb4:	4333      	orrs	r3, r6
 8012fb6:	f000 857a 	beq.w	8013aae <_dtoa_r+0xb86>
 8012fba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012fbc:	b963      	cbnz	r3, 8012fd8 <_dtoa_r+0xb0>
 8012fbe:	4b9b      	ldr	r3, [pc, #620]	; (801322c <_dtoa_r+0x304>)
 8012fc0:	e024      	b.n	801300c <_dtoa_r+0xe4>
 8012fc2:	4b9b      	ldr	r3, [pc, #620]	; (8013230 <_dtoa_r+0x308>)
 8012fc4:	9300      	str	r3, [sp, #0]
 8012fc6:	3308      	adds	r3, #8
 8012fc8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012fca:	6013      	str	r3, [r2, #0]
 8012fcc:	9800      	ldr	r0, [sp, #0]
 8012fce:	b015      	add	sp, #84	; 0x54
 8012fd0:	ecbd 8b02 	vpop	{d8}
 8012fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fd8:	4b94      	ldr	r3, [pc, #592]	; (801322c <_dtoa_r+0x304>)
 8012fda:	9300      	str	r3, [sp, #0]
 8012fdc:	3303      	adds	r3, #3
 8012fde:	e7f3      	b.n	8012fc8 <_dtoa_r+0xa0>
 8012fe0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	ec51 0b17 	vmov	r0, r1, d7
 8012fea:	2300      	movs	r3, #0
 8012fec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012ff0:	f7ed fd82 	bl	8000af8 <__aeabi_dcmpeq>
 8012ff4:	4680      	mov	r8, r0
 8012ff6:	b158      	cbz	r0, 8013010 <_dtoa_r+0xe8>
 8012ff8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	6013      	str	r3, [r2, #0]
 8012ffe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013000:	2b00      	cmp	r3, #0
 8013002:	f000 8551 	beq.w	8013aa8 <_dtoa_r+0xb80>
 8013006:	488b      	ldr	r0, [pc, #556]	; (8013234 <_dtoa_r+0x30c>)
 8013008:	6018      	str	r0, [r3, #0]
 801300a:	1e43      	subs	r3, r0, #1
 801300c:	9300      	str	r3, [sp, #0]
 801300e:	e7dd      	b.n	8012fcc <_dtoa_r+0xa4>
 8013010:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013014:	aa12      	add	r2, sp, #72	; 0x48
 8013016:	a913      	add	r1, sp, #76	; 0x4c
 8013018:	4620      	mov	r0, r4
 801301a:	f001 fd07 	bl	8014a2c <__d2b>
 801301e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013022:	4683      	mov	fp, r0
 8013024:	2d00      	cmp	r5, #0
 8013026:	d07c      	beq.n	8013122 <_dtoa_r+0x1fa>
 8013028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801302a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801302e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013032:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8013036:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801303a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801303e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013042:	4b7d      	ldr	r3, [pc, #500]	; (8013238 <_dtoa_r+0x310>)
 8013044:	2200      	movs	r2, #0
 8013046:	4630      	mov	r0, r6
 8013048:	4639      	mov	r1, r7
 801304a:	f7ed f935 	bl	80002b8 <__aeabi_dsub>
 801304e:	a36e      	add	r3, pc, #440	; (adr r3, 8013208 <_dtoa_r+0x2e0>)
 8013050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013054:	f7ed fae8 	bl	8000628 <__aeabi_dmul>
 8013058:	a36d      	add	r3, pc, #436	; (adr r3, 8013210 <_dtoa_r+0x2e8>)
 801305a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801305e:	f7ed f92d 	bl	80002bc <__adddf3>
 8013062:	4606      	mov	r6, r0
 8013064:	4628      	mov	r0, r5
 8013066:	460f      	mov	r7, r1
 8013068:	f7ed fa74 	bl	8000554 <__aeabi_i2d>
 801306c:	a36a      	add	r3, pc, #424	; (adr r3, 8013218 <_dtoa_r+0x2f0>)
 801306e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013072:	f7ed fad9 	bl	8000628 <__aeabi_dmul>
 8013076:	4602      	mov	r2, r0
 8013078:	460b      	mov	r3, r1
 801307a:	4630      	mov	r0, r6
 801307c:	4639      	mov	r1, r7
 801307e:	f7ed f91d 	bl	80002bc <__adddf3>
 8013082:	4606      	mov	r6, r0
 8013084:	460f      	mov	r7, r1
 8013086:	f7ed fd7f 	bl	8000b88 <__aeabi_d2iz>
 801308a:	2200      	movs	r2, #0
 801308c:	4682      	mov	sl, r0
 801308e:	2300      	movs	r3, #0
 8013090:	4630      	mov	r0, r6
 8013092:	4639      	mov	r1, r7
 8013094:	f7ed fd3a 	bl	8000b0c <__aeabi_dcmplt>
 8013098:	b148      	cbz	r0, 80130ae <_dtoa_r+0x186>
 801309a:	4650      	mov	r0, sl
 801309c:	f7ed fa5a 	bl	8000554 <__aeabi_i2d>
 80130a0:	4632      	mov	r2, r6
 80130a2:	463b      	mov	r3, r7
 80130a4:	f7ed fd28 	bl	8000af8 <__aeabi_dcmpeq>
 80130a8:	b908      	cbnz	r0, 80130ae <_dtoa_r+0x186>
 80130aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80130ae:	f1ba 0f16 	cmp.w	sl, #22
 80130b2:	d854      	bhi.n	801315e <_dtoa_r+0x236>
 80130b4:	4b61      	ldr	r3, [pc, #388]	; (801323c <_dtoa_r+0x314>)
 80130b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80130ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80130c2:	f7ed fd23 	bl	8000b0c <__aeabi_dcmplt>
 80130c6:	2800      	cmp	r0, #0
 80130c8:	d04b      	beq.n	8013162 <_dtoa_r+0x23a>
 80130ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80130ce:	2300      	movs	r3, #0
 80130d0:	930e      	str	r3, [sp, #56]	; 0x38
 80130d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80130d4:	1b5d      	subs	r5, r3, r5
 80130d6:	1e6b      	subs	r3, r5, #1
 80130d8:	9304      	str	r3, [sp, #16]
 80130da:	bf43      	ittte	mi
 80130dc:	2300      	movmi	r3, #0
 80130de:	f1c5 0801 	rsbmi	r8, r5, #1
 80130e2:	9304      	strmi	r3, [sp, #16]
 80130e4:	f04f 0800 	movpl.w	r8, #0
 80130e8:	f1ba 0f00 	cmp.w	sl, #0
 80130ec:	db3b      	blt.n	8013166 <_dtoa_r+0x23e>
 80130ee:	9b04      	ldr	r3, [sp, #16]
 80130f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80130f4:	4453      	add	r3, sl
 80130f6:	9304      	str	r3, [sp, #16]
 80130f8:	2300      	movs	r3, #0
 80130fa:	9306      	str	r3, [sp, #24]
 80130fc:	9b05      	ldr	r3, [sp, #20]
 80130fe:	2b09      	cmp	r3, #9
 8013100:	d869      	bhi.n	80131d6 <_dtoa_r+0x2ae>
 8013102:	2b05      	cmp	r3, #5
 8013104:	bfc4      	itt	gt
 8013106:	3b04      	subgt	r3, #4
 8013108:	9305      	strgt	r3, [sp, #20]
 801310a:	9b05      	ldr	r3, [sp, #20]
 801310c:	f1a3 0302 	sub.w	r3, r3, #2
 8013110:	bfcc      	ite	gt
 8013112:	2500      	movgt	r5, #0
 8013114:	2501      	movle	r5, #1
 8013116:	2b03      	cmp	r3, #3
 8013118:	d869      	bhi.n	80131ee <_dtoa_r+0x2c6>
 801311a:	e8df f003 	tbb	[pc, r3]
 801311e:	4e2c      	.short	0x4e2c
 8013120:	5a4c      	.short	0x5a4c
 8013122:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8013126:	441d      	add	r5, r3
 8013128:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801312c:	2b20      	cmp	r3, #32
 801312e:	bfc1      	itttt	gt
 8013130:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013134:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013138:	fa09 f303 	lslgt.w	r3, r9, r3
 801313c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013140:	bfda      	itte	le
 8013142:	f1c3 0320 	rsble	r3, r3, #32
 8013146:	fa06 f003 	lslle.w	r0, r6, r3
 801314a:	4318      	orrgt	r0, r3
 801314c:	f7ed f9f2 	bl	8000534 <__aeabi_ui2d>
 8013150:	2301      	movs	r3, #1
 8013152:	4606      	mov	r6, r0
 8013154:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013158:	3d01      	subs	r5, #1
 801315a:	9310      	str	r3, [sp, #64]	; 0x40
 801315c:	e771      	b.n	8013042 <_dtoa_r+0x11a>
 801315e:	2301      	movs	r3, #1
 8013160:	e7b6      	b.n	80130d0 <_dtoa_r+0x1a8>
 8013162:	900e      	str	r0, [sp, #56]	; 0x38
 8013164:	e7b5      	b.n	80130d2 <_dtoa_r+0x1aa>
 8013166:	f1ca 0300 	rsb	r3, sl, #0
 801316a:	9306      	str	r3, [sp, #24]
 801316c:	2300      	movs	r3, #0
 801316e:	eba8 080a 	sub.w	r8, r8, sl
 8013172:	930d      	str	r3, [sp, #52]	; 0x34
 8013174:	e7c2      	b.n	80130fc <_dtoa_r+0x1d4>
 8013176:	2300      	movs	r3, #0
 8013178:	9308      	str	r3, [sp, #32]
 801317a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801317c:	2b00      	cmp	r3, #0
 801317e:	dc39      	bgt.n	80131f4 <_dtoa_r+0x2cc>
 8013180:	f04f 0901 	mov.w	r9, #1
 8013184:	f8cd 9004 	str.w	r9, [sp, #4]
 8013188:	464b      	mov	r3, r9
 801318a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801318e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013190:	2200      	movs	r2, #0
 8013192:	6042      	str	r2, [r0, #4]
 8013194:	2204      	movs	r2, #4
 8013196:	f102 0614 	add.w	r6, r2, #20
 801319a:	429e      	cmp	r6, r3
 801319c:	6841      	ldr	r1, [r0, #4]
 801319e:	d92f      	bls.n	8013200 <_dtoa_r+0x2d8>
 80131a0:	4620      	mov	r0, r4
 80131a2:	f001 f85b 	bl	801425c <_Balloc>
 80131a6:	9000      	str	r0, [sp, #0]
 80131a8:	2800      	cmp	r0, #0
 80131aa:	d14b      	bne.n	8013244 <_dtoa_r+0x31c>
 80131ac:	4b24      	ldr	r3, [pc, #144]	; (8013240 <_dtoa_r+0x318>)
 80131ae:	4602      	mov	r2, r0
 80131b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80131b4:	e6d1      	b.n	8012f5a <_dtoa_r+0x32>
 80131b6:	2301      	movs	r3, #1
 80131b8:	e7de      	b.n	8013178 <_dtoa_r+0x250>
 80131ba:	2300      	movs	r3, #0
 80131bc:	9308      	str	r3, [sp, #32]
 80131be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131c0:	eb0a 0903 	add.w	r9, sl, r3
 80131c4:	f109 0301 	add.w	r3, r9, #1
 80131c8:	2b01      	cmp	r3, #1
 80131ca:	9301      	str	r3, [sp, #4]
 80131cc:	bfb8      	it	lt
 80131ce:	2301      	movlt	r3, #1
 80131d0:	e7dd      	b.n	801318e <_dtoa_r+0x266>
 80131d2:	2301      	movs	r3, #1
 80131d4:	e7f2      	b.n	80131bc <_dtoa_r+0x294>
 80131d6:	2501      	movs	r5, #1
 80131d8:	2300      	movs	r3, #0
 80131da:	9305      	str	r3, [sp, #20]
 80131dc:	9508      	str	r5, [sp, #32]
 80131de:	f04f 39ff 	mov.w	r9, #4294967295
 80131e2:	2200      	movs	r2, #0
 80131e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80131e8:	2312      	movs	r3, #18
 80131ea:	9209      	str	r2, [sp, #36]	; 0x24
 80131ec:	e7cf      	b.n	801318e <_dtoa_r+0x266>
 80131ee:	2301      	movs	r3, #1
 80131f0:	9308      	str	r3, [sp, #32]
 80131f2:	e7f4      	b.n	80131de <_dtoa_r+0x2b6>
 80131f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80131f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80131fc:	464b      	mov	r3, r9
 80131fe:	e7c6      	b.n	801318e <_dtoa_r+0x266>
 8013200:	3101      	adds	r1, #1
 8013202:	6041      	str	r1, [r0, #4]
 8013204:	0052      	lsls	r2, r2, #1
 8013206:	e7c6      	b.n	8013196 <_dtoa_r+0x26e>
 8013208:	636f4361 	.word	0x636f4361
 801320c:	3fd287a7 	.word	0x3fd287a7
 8013210:	8b60c8b3 	.word	0x8b60c8b3
 8013214:	3fc68a28 	.word	0x3fc68a28
 8013218:	509f79fb 	.word	0x509f79fb
 801321c:	3fd34413 	.word	0x3fd34413
 8013220:	08029768 	.word	0x08029768
 8013224:	0802992a 	.word	0x0802992a
 8013228:	7ff00000 	.word	0x7ff00000
 801322c:	08029926 	.word	0x08029926
 8013230:	0802991d 	.word	0x0802991d
 8013234:	080296ed 	.word	0x080296ed
 8013238:	3ff80000 	.word	0x3ff80000
 801323c:	08029aa0 	.word	0x08029aa0
 8013240:	08029989 	.word	0x08029989
 8013244:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013246:	9a00      	ldr	r2, [sp, #0]
 8013248:	601a      	str	r2, [r3, #0]
 801324a:	9b01      	ldr	r3, [sp, #4]
 801324c:	2b0e      	cmp	r3, #14
 801324e:	f200 80ad 	bhi.w	80133ac <_dtoa_r+0x484>
 8013252:	2d00      	cmp	r5, #0
 8013254:	f000 80aa 	beq.w	80133ac <_dtoa_r+0x484>
 8013258:	f1ba 0f00 	cmp.w	sl, #0
 801325c:	dd36      	ble.n	80132cc <_dtoa_r+0x3a4>
 801325e:	4ac3      	ldr	r2, [pc, #780]	; (801356c <_dtoa_r+0x644>)
 8013260:	f00a 030f 	and.w	r3, sl, #15
 8013264:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013268:	ed93 7b00 	vldr	d7, [r3]
 801326c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013270:	ea4f 172a 	mov.w	r7, sl, asr #4
 8013274:	eeb0 8a47 	vmov.f32	s16, s14
 8013278:	eef0 8a67 	vmov.f32	s17, s15
 801327c:	d016      	beq.n	80132ac <_dtoa_r+0x384>
 801327e:	4bbc      	ldr	r3, [pc, #752]	; (8013570 <_dtoa_r+0x648>)
 8013280:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013284:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013288:	f7ed faf8 	bl	800087c <__aeabi_ddiv>
 801328c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013290:	f007 070f 	and.w	r7, r7, #15
 8013294:	2503      	movs	r5, #3
 8013296:	4eb6      	ldr	r6, [pc, #728]	; (8013570 <_dtoa_r+0x648>)
 8013298:	b957      	cbnz	r7, 80132b0 <_dtoa_r+0x388>
 801329a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801329e:	ec53 2b18 	vmov	r2, r3, d8
 80132a2:	f7ed faeb 	bl	800087c <__aeabi_ddiv>
 80132a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132aa:	e029      	b.n	8013300 <_dtoa_r+0x3d8>
 80132ac:	2502      	movs	r5, #2
 80132ae:	e7f2      	b.n	8013296 <_dtoa_r+0x36e>
 80132b0:	07f9      	lsls	r1, r7, #31
 80132b2:	d508      	bpl.n	80132c6 <_dtoa_r+0x39e>
 80132b4:	ec51 0b18 	vmov	r0, r1, d8
 80132b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80132bc:	f7ed f9b4 	bl	8000628 <__aeabi_dmul>
 80132c0:	ec41 0b18 	vmov	d8, r0, r1
 80132c4:	3501      	adds	r5, #1
 80132c6:	107f      	asrs	r7, r7, #1
 80132c8:	3608      	adds	r6, #8
 80132ca:	e7e5      	b.n	8013298 <_dtoa_r+0x370>
 80132cc:	f000 80a6 	beq.w	801341c <_dtoa_r+0x4f4>
 80132d0:	f1ca 0600 	rsb	r6, sl, #0
 80132d4:	4ba5      	ldr	r3, [pc, #660]	; (801356c <_dtoa_r+0x644>)
 80132d6:	4fa6      	ldr	r7, [pc, #664]	; (8013570 <_dtoa_r+0x648>)
 80132d8:	f006 020f 	and.w	r2, r6, #15
 80132dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80132e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80132e8:	f7ed f99e 	bl	8000628 <__aeabi_dmul>
 80132ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132f0:	1136      	asrs	r6, r6, #4
 80132f2:	2300      	movs	r3, #0
 80132f4:	2502      	movs	r5, #2
 80132f6:	2e00      	cmp	r6, #0
 80132f8:	f040 8085 	bne.w	8013406 <_dtoa_r+0x4de>
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d1d2      	bne.n	80132a6 <_dtoa_r+0x37e>
 8013300:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013302:	2b00      	cmp	r3, #0
 8013304:	f000 808c 	beq.w	8013420 <_dtoa_r+0x4f8>
 8013308:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801330c:	4b99      	ldr	r3, [pc, #612]	; (8013574 <_dtoa_r+0x64c>)
 801330e:	2200      	movs	r2, #0
 8013310:	4630      	mov	r0, r6
 8013312:	4639      	mov	r1, r7
 8013314:	f7ed fbfa 	bl	8000b0c <__aeabi_dcmplt>
 8013318:	2800      	cmp	r0, #0
 801331a:	f000 8081 	beq.w	8013420 <_dtoa_r+0x4f8>
 801331e:	9b01      	ldr	r3, [sp, #4]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d07d      	beq.n	8013420 <_dtoa_r+0x4f8>
 8013324:	f1b9 0f00 	cmp.w	r9, #0
 8013328:	dd3c      	ble.n	80133a4 <_dtoa_r+0x47c>
 801332a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801332e:	9307      	str	r3, [sp, #28]
 8013330:	2200      	movs	r2, #0
 8013332:	4b91      	ldr	r3, [pc, #580]	; (8013578 <_dtoa_r+0x650>)
 8013334:	4630      	mov	r0, r6
 8013336:	4639      	mov	r1, r7
 8013338:	f7ed f976 	bl	8000628 <__aeabi_dmul>
 801333c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013340:	3501      	adds	r5, #1
 8013342:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8013346:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801334a:	4628      	mov	r0, r5
 801334c:	f7ed f902 	bl	8000554 <__aeabi_i2d>
 8013350:	4632      	mov	r2, r6
 8013352:	463b      	mov	r3, r7
 8013354:	f7ed f968 	bl	8000628 <__aeabi_dmul>
 8013358:	4b88      	ldr	r3, [pc, #544]	; (801357c <_dtoa_r+0x654>)
 801335a:	2200      	movs	r2, #0
 801335c:	f7ec ffae 	bl	80002bc <__adddf3>
 8013360:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013368:	9303      	str	r3, [sp, #12]
 801336a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801336c:	2b00      	cmp	r3, #0
 801336e:	d15c      	bne.n	801342a <_dtoa_r+0x502>
 8013370:	4b83      	ldr	r3, [pc, #524]	; (8013580 <_dtoa_r+0x658>)
 8013372:	2200      	movs	r2, #0
 8013374:	4630      	mov	r0, r6
 8013376:	4639      	mov	r1, r7
 8013378:	f7ec ff9e 	bl	80002b8 <__aeabi_dsub>
 801337c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013380:	4606      	mov	r6, r0
 8013382:	460f      	mov	r7, r1
 8013384:	f7ed fbe0 	bl	8000b48 <__aeabi_dcmpgt>
 8013388:	2800      	cmp	r0, #0
 801338a:	f040 8296 	bne.w	80138ba <_dtoa_r+0x992>
 801338e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013392:	4630      	mov	r0, r6
 8013394:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013398:	4639      	mov	r1, r7
 801339a:	f7ed fbb7 	bl	8000b0c <__aeabi_dcmplt>
 801339e:	2800      	cmp	r0, #0
 80133a0:	f040 8288 	bne.w	80138b4 <_dtoa_r+0x98c>
 80133a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80133a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80133ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	f2c0 8158 	blt.w	8013664 <_dtoa_r+0x73c>
 80133b4:	f1ba 0f0e 	cmp.w	sl, #14
 80133b8:	f300 8154 	bgt.w	8013664 <_dtoa_r+0x73c>
 80133bc:	4b6b      	ldr	r3, [pc, #428]	; (801356c <_dtoa_r+0x644>)
 80133be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80133c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80133c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	f280 80e3 	bge.w	8013594 <_dtoa_r+0x66c>
 80133ce:	9b01      	ldr	r3, [sp, #4]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	f300 80df 	bgt.w	8013594 <_dtoa_r+0x66c>
 80133d6:	f040 826d 	bne.w	80138b4 <_dtoa_r+0x98c>
 80133da:	4b69      	ldr	r3, [pc, #420]	; (8013580 <_dtoa_r+0x658>)
 80133dc:	2200      	movs	r2, #0
 80133de:	4640      	mov	r0, r8
 80133e0:	4649      	mov	r1, r9
 80133e2:	f7ed f921 	bl	8000628 <__aeabi_dmul>
 80133e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80133ea:	f7ed fba3 	bl	8000b34 <__aeabi_dcmpge>
 80133ee:	9e01      	ldr	r6, [sp, #4]
 80133f0:	4637      	mov	r7, r6
 80133f2:	2800      	cmp	r0, #0
 80133f4:	f040 8243 	bne.w	801387e <_dtoa_r+0x956>
 80133f8:	9d00      	ldr	r5, [sp, #0]
 80133fa:	2331      	movs	r3, #49	; 0x31
 80133fc:	f805 3b01 	strb.w	r3, [r5], #1
 8013400:	f10a 0a01 	add.w	sl, sl, #1
 8013404:	e23f      	b.n	8013886 <_dtoa_r+0x95e>
 8013406:	07f2      	lsls	r2, r6, #31
 8013408:	d505      	bpl.n	8013416 <_dtoa_r+0x4ee>
 801340a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801340e:	f7ed f90b 	bl	8000628 <__aeabi_dmul>
 8013412:	3501      	adds	r5, #1
 8013414:	2301      	movs	r3, #1
 8013416:	1076      	asrs	r6, r6, #1
 8013418:	3708      	adds	r7, #8
 801341a:	e76c      	b.n	80132f6 <_dtoa_r+0x3ce>
 801341c:	2502      	movs	r5, #2
 801341e:	e76f      	b.n	8013300 <_dtoa_r+0x3d8>
 8013420:	9b01      	ldr	r3, [sp, #4]
 8013422:	f8cd a01c 	str.w	sl, [sp, #28]
 8013426:	930c      	str	r3, [sp, #48]	; 0x30
 8013428:	e78d      	b.n	8013346 <_dtoa_r+0x41e>
 801342a:	9900      	ldr	r1, [sp, #0]
 801342c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801342e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013430:	4b4e      	ldr	r3, [pc, #312]	; (801356c <_dtoa_r+0x644>)
 8013432:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013436:	4401      	add	r1, r0
 8013438:	9102      	str	r1, [sp, #8]
 801343a:	9908      	ldr	r1, [sp, #32]
 801343c:	eeb0 8a47 	vmov.f32	s16, s14
 8013440:	eef0 8a67 	vmov.f32	s17, s15
 8013444:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013448:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801344c:	2900      	cmp	r1, #0
 801344e:	d045      	beq.n	80134dc <_dtoa_r+0x5b4>
 8013450:	494c      	ldr	r1, [pc, #304]	; (8013584 <_dtoa_r+0x65c>)
 8013452:	2000      	movs	r0, #0
 8013454:	f7ed fa12 	bl	800087c <__aeabi_ddiv>
 8013458:	ec53 2b18 	vmov	r2, r3, d8
 801345c:	f7ec ff2c 	bl	80002b8 <__aeabi_dsub>
 8013460:	9d00      	ldr	r5, [sp, #0]
 8013462:	ec41 0b18 	vmov	d8, r0, r1
 8013466:	4639      	mov	r1, r7
 8013468:	4630      	mov	r0, r6
 801346a:	f7ed fb8d 	bl	8000b88 <__aeabi_d2iz>
 801346e:	900c      	str	r0, [sp, #48]	; 0x30
 8013470:	f7ed f870 	bl	8000554 <__aeabi_i2d>
 8013474:	4602      	mov	r2, r0
 8013476:	460b      	mov	r3, r1
 8013478:	4630      	mov	r0, r6
 801347a:	4639      	mov	r1, r7
 801347c:	f7ec ff1c 	bl	80002b8 <__aeabi_dsub>
 8013480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013482:	3330      	adds	r3, #48	; 0x30
 8013484:	f805 3b01 	strb.w	r3, [r5], #1
 8013488:	ec53 2b18 	vmov	r2, r3, d8
 801348c:	4606      	mov	r6, r0
 801348e:	460f      	mov	r7, r1
 8013490:	f7ed fb3c 	bl	8000b0c <__aeabi_dcmplt>
 8013494:	2800      	cmp	r0, #0
 8013496:	d165      	bne.n	8013564 <_dtoa_r+0x63c>
 8013498:	4632      	mov	r2, r6
 801349a:	463b      	mov	r3, r7
 801349c:	4935      	ldr	r1, [pc, #212]	; (8013574 <_dtoa_r+0x64c>)
 801349e:	2000      	movs	r0, #0
 80134a0:	f7ec ff0a 	bl	80002b8 <__aeabi_dsub>
 80134a4:	ec53 2b18 	vmov	r2, r3, d8
 80134a8:	f7ed fb30 	bl	8000b0c <__aeabi_dcmplt>
 80134ac:	2800      	cmp	r0, #0
 80134ae:	f040 80b9 	bne.w	8013624 <_dtoa_r+0x6fc>
 80134b2:	9b02      	ldr	r3, [sp, #8]
 80134b4:	429d      	cmp	r5, r3
 80134b6:	f43f af75 	beq.w	80133a4 <_dtoa_r+0x47c>
 80134ba:	4b2f      	ldr	r3, [pc, #188]	; (8013578 <_dtoa_r+0x650>)
 80134bc:	ec51 0b18 	vmov	r0, r1, d8
 80134c0:	2200      	movs	r2, #0
 80134c2:	f7ed f8b1 	bl	8000628 <__aeabi_dmul>
 80134c6:	4b2c      	ldr	r3, [pc, #176]	; (8013578 <_dtoa_r+0x650>)
 80134c8:	ec41 0b18 	vmov	d8, r0, r1
 80134cc:	2200      	movs	r2, #0
 80134ce:	4630      	mov	r0, r6
 80134d0:	4639      	mov	r1, r7
 80134d2:	f7ed f8a9 	bl	8000628 <__aeabi_dmul>
 80134d6:	4606      	mov	r6, r0
 80134d8:	460f      	mov	r7, r1
 80134da:	e7c4      	b.n	8013466 <_dtoa_r+0x53e>
 80134dc:	ec51 0b17 	vmov	r0, r1, d7
 80134e0:	f7ed f8a2 	bl	8000628 <__aeabi_dmul>
 80134e4:	9b02      	ldr	r3, [sp, #8]
 80134e6:	9d00      	ldr	r5, [sp, #0]
 80134e8:	930c      	str	r3, [sp, #48]	; 0x30
 80134ea:	ec41 0b18 	vmov	d8, r0, r1
 80134ee:	4639      	mov	r1, r7
 80134f0:	4630      	mov	r0, r6
 80134f2:	f7ed fb49 	bl	8000b88 <__aeabi_d2iz>
 80134f6:	9011      	str	r0, [sp, #68]	; 0x44
 80134f8:	f7ed f82c 	bl	8000554 <__aeabi_i2d>
 80134fc:	4602      	mov	r2, r0
 80134fe:	460b      	mov	r3, r1
 8013500:	4630      	mov	r0, r6
 8013502:	4639      	mov	r1, r7
 8013504:	f7ec fed8 	bl	80002b8 <__aeabi_dsub>
 8013508:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801350a:	3330      	adds	r3, #48	; 0x30
 801350c:	f805 3b01 	strb.w	r3, [r5], #1
 8013510:	9b02      	ldr	r3, [sp, #8]
 8013512:	429d      	cmp	r5, r3
 8013514:	4606      	mov	r6, r0
 8013516:	460f      	mov	r7, r1
 8013518:	f04f 0200 	mov.w	r2, #0
 801351c:	d134      	bne.n	8013588 <_dtoa_r+0x660>
 801351e:	4b19      	ldr	r3, [pc, #100]	; (8013584 <_dtoa_r+0x65c>)
 8013520:	ec51 0b18 	vmov	r0, r1, d8
 8013524:	f7ec feca 	bl	80002bc <__adddf3>
 8013528:	4602      	mov	r2, r0
 801352a:	460b      	mov	r3, r1
 801352c:	4630      	mov	r0, r6
 801352e:	4639      	mov	r1, r7
 8013530:	f7ed fb0a 	bl	8000b48 <__aeabi_dcmpgt>
 8013534:	2800      	cmp	r0, #0
 8013536:	d175      	bne.n	8013624 <_dtoa_r+0x6fc>
 8013538:	ec53 2b18 	vmov	r2, r3, d8
 801353c:	4911      	ldr	r1, [pc, #68]	; (8013584 <_dtoa_r+0x65c>)
 801353e:	2000      	movs	r0, #0
 8013540:	f7ec feba 	bl	80002b8 <__aeabi_dsub>
 8013544:	4602      	mov	r2, r0
 8013546:	460b      	mov	r3, r1
 8013548:	4630      	mov	r0, r6
 801354a:	4639      	mov	r1, r7
 801354c:	f7ed fade 	bl	8000b0c <__aeabi_dcmplt>
 8013550:	2800      	cmp	r0, #0
 8013552:	f43f af27 	beq.w	80133a4 <_dtoa_r+0x47c>
 8013556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013558:	1e6b      	subs	r3, r5, #1
 801355a:	930c      	str	r3, [sp, #48]	; 0x30
 801355c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013560:	2b30      	cmp	r3, #48	; 0x30
 8013562:	d0f8      	beq.n	8013556 <_dtoa_r+0x62e>
 8013564:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013568:	e04a      	b.n	8013600 <_dtoa_r+0x6d8>
 801356a:	bf00      	nop
 801356c:	08029aa0 	.word	0x08029aa0
 8013570:	08029a78 	.word	0x08029a78
 8013574:	3ff00000 	.word	0x3ff00000
 8013578:	40240000 	.word	0x40240000
 801357c:	401c0000 	.word	0x401c0000
 8013580:	40140000 	.word	0x40140000
 8013584:	3fe00000 	.word	0x3fe00000
 8013588:	4baf      	ldr	r3, [pc, #700]	; (8013848 <_dtoa_r+0x920>)
 801358a:	f7ed f84d 	bl	8000628 <__aeabi_dmul>
 801358e:	4606      	mov	r6, r0
 8013590:	460f      	mov	r7, r1
 8013592:	e7ac      	b.n	80134ee <_dtoa_r+0x5c6>
 8013594:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013598:	9d00      	ldr	r5, [sp, #0]
 801359a:	4642      	mov	r2, r8
 801359c:	464b      	mov	r3, r9
 801359e:	4630      	mov	r0, r6
 80135a0:	4639      	mov	r1, r7
 80135a2:	f7ed f96b 	bl	800087c <__aeabi_ddiv>
 80135a6:	f7ed faef 	bl	8000b88 <__aeabi_d2iz>
 80135aa:	9002      	str	r0, [sp, #8]
 80135ac:	f7ec ffd2 	bl	8000554 <__aeabi_i2d>
 80135b0:	4642      	mov	r2, r8
 80135b2:	464b      	mov	r3, r9
 80135b4:	f7ed f838 	bl	8000628 <__aeabi_dmul>
 80135b8:	4602      	mov	r2, r0
 80135ba:	460b      	mov	r3, r1
 80135bc:	4630      	mov	r0, r6
 80135be:	4639      	mov	r1, r7
 80135c0:	f7ec fe7a 	bl	80002b8 <__aeabi_dsub>
 80135c4:	9e02      	ldr	r6, [sp, #8]
 80135c6:	9f01      	ldr	r7, [sp, #4]
 80135c8:	3630      	adds	r6, #48	; 0x30
 80135ca:	f805 6b01 	strb.w	r6, [r5], #1
 80135ce:	9e00      	ldr	r6, [sp, #0]
 80135d0:	1bae      	subs	r6, r5, r6
 80135d2:	42b7      	cmp	r7, r6
 80135d4:	4602      	mov	r2, r0
 80135d6:	460b      	mov	r3, r1
 80135d8:	d137      	bne.n	801364a <_dtoa_r+0x722>
 80135da:	f7ec fe6f 	bl	80002bc <__adddf3>
 80135de:	4642      	mov	r2, r8
 80135e0:	464b      	mov	r3, r9
 80135e2:	4606      	mov	r6, r0
 80135e4:	460f      	mov	r7, r1
 80135e6:	f7ed faaf 	bl	8000b48 <__aeabi_dcmpgt>
 80135ea:	b9c8      	cbnz	r0, 8013620 <_dtoa_r+0x6f8>
 80135ec:	4642      	mov	r2, r8
 80135ee:	464b      	mov	r3, r9
 80135f0:	4630      	mov	r0, r6
 80135f2:	4639      	mov	r1, r7
 80135f4:	f7ed fa80 	bl	8000af8 <__aeabi_dcmpeq>
 80135f8:	b110      	cbz	r0, 8013600 <_dtoa_r+0x6d8>
 80135fa:	9b02      	ldr	r3, [sp, #8]
 80135fc:	07d9      	lsls	r1, r3, #31
 80135fe:	d40f      	bmi.n	8013620 <_dtoa_r+0x6f8>
 8013600:	4620      	mov	r0, r4
 8013602:	4659      	mov	r1, fp
 8013604:	f000 fe6a 	bl	80142dc <_Bfree>
 8013608:	2300      	movs	r3, #0
 801360a:	702b      	strb	r3, [r5, #0]
 801360c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801360e:	f10a 0001 	add.w	r0, sl, #1
 8013612:	6018      	str	r0, [r3, #0]
 8013614:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013616:	2b00      	cmp	r3, #0
 8013618:	f43f acd8 	beq.w	8012fcc <_dtoa_r+0xa4>
 801361c:	601d      	str	r5, [r3, #0]
 801361e:	e4d5      	b.n	8012fcc <_dtoa_r+0xa4>
 8013620:	f8cd a01c 	str.w	sl, [sp, #28]
 8013624:	462b      	mov	r3, r5
 8013626:	461d      	mov	r5, r3
 8013628:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801362c:	2a39      	cmp	r2, #57	; 0x39
 801362e:	d108      	bne.n	8013642 <_dtoa_r+0x71a>
 8013630:	9a00      	ldr	r2, [sp, #0]
 8013632:	429a      	cmp	r2, r3
 8013634:	d1f7      	bne.n	8013626 <_dtoa_r+0x6fe>
 8013636:	9a07      	ldr	r2, [sp, #28]
 8013638:	9900      	ldr	r1, [sp, #0]
 801363a:	3201      	adds	r2, #1
 801363c:	9207      	str	r2, [sp, #28]
 801363e:	2230      	movs	r2, #48	; 0x30
 8013640:	700a      	strb	r2, [r1, #0]
 8013642:	781a      	ldrb	r2, [r3, #0]
 8013644:	3201      	adds	r2, #1
 8013646:	701a      	strb	r2, [r3, #0]
 8013648:	e78c      	b.n	8013564 <_dtoa_r+0x63c>
 801364a:	4b7f      	ldr	r3, [pc, #508]	; (8013848 <_dtoa_r+0x920>)
 801364c:	2200      	movs	r2, #0
 801364e:	f7ec ffeb 	bl	8000628 <__aeabi_dmul>
 8013652:	2200      	movs	r2, #0
 8013654:	2300      	movs	r3, #0
 8013656:	4606      	mov	r6, r0
 8013658:	460f      	mov	r7, r1
 801365a:	f7ed fa4d 	bl	8000af8 <__aeabi_dcmpeq>
 801365e:	2800      	cmp	r0, #0
 8013660:	d09b      	beq.n	801359a <_dtoa_r+0x672>
 8013662:	e7cd      	b.n	8013600 <_dtoa_r+0x6d8>
 8013664:	9a08      	ldr	r2, [sp, #32]
 8013666:	2a00      	cmp	r2, #0
 8013668:	f000 80c4 	beq.w	80137f4 <_dtoa_r+0x8cc>
 801366c:	9a05      	ldr	r2, [sp, #20]
 801366e:	2a01      	cmp	r2, #1
 8013670:	f300 80a8 	bgt.w	80137c4 <_dtoa_r+0x89c>
 8013674:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013676:	2a00      	cmp	r2, #0
 8013678:	f000 80a0 	beq.w	80137bc <_dtoa_r+0x894>
 801367c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013680:	9e06      	ldr	r6, [sp, #24]
 8013682:	4645      	mov	r5, r8
 8013684:	9a04      	ldr	r2, [sp, #16]
 8013686:	2101      	movs	r1, #1
 8013688:	441a      	add	r2, r3
 801368a:	4620      	mov	r0, r4
 801368c:	4498      	add	r8, r3
 801368e:	9204      	str	r2, [sp, #16]
 8013690:	f000 ff2a 	bl	80144e8 <__i2b>
 8013694:	4607      	mov	r7, r0
 8013696:	2d00      	cmp	r5, #0
 8013698:	dd0b      	ble.n	80136b2 <_dtoa_r+0x78a>
 801369a:	9b04      	ldr	r3, [sp, #16]
 801369c:	2b00      	cmp	r3, #0
 801369e:	dd08      	ble.n	80136b2 <_dtoa_r+0x78a>
 80136a0:	42ab      	cmp	r3, r5
 80136a2:	9a04      	ldr	r2, [sp, #16]
 80136a4:	bfa8      	it	ge
 80136a6:	462b      	movge	r3, r5
 80136a8:	eba8 0803 	sub.w	r8, r8, r3
 80136ac:	1aed      	subs	r5, r5, r3
 80136ae:	1ad3      	subs	r3, r2, r3
 80136b0:	9304      	str	r3, [sp, #16]
 80136b2:	9b06      	ldr	r3, [sp, #24]
 80136b4:	b1fb      	cbz	r3, 80136f6 <_dtoa_r+0x7ce>
 80136b6:	9b08      	ldr	r3, [sp, #32]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	f000 809f 	beq.w	80137fc <_dtoa_r+0x8d4>
 80136be:	2e00      	cmp	r6, #0
 80136c0:	dd11      	ble.n	80136e6 <_dtoa_r+0x7be>
 80136c2:	4639      	mov	r1, r7
 80136c4:	4632      	mov	r2, r6
 80136c6:	4620      	mov	r0, r4
 80136c8:	f000 ffca 	bl	8014660 <__pow5mult>
 80136cc:	465a      	mov	r2, fp
 80136ce:	4601      	mov	r1, r0
 80136d0:	4607      	mov	r7, r0
 80136d2:	4620      	mov	r0, r4
 80136d4:	f000 ff1e 	bl	8014514 <__multiply>
 80136d8:	4659      	mov	r1, fp
 80136da:	9007      	str	r0, [sp, #28]
 80136dc:	4620      	mov	r0, r4
 80136de:	f000 fdfd 	bl	80142dc <_Bfree>
 80136e2:	9b07      	ldr	r3, [sp, #28]
 80136e4:	469b      	mov	fp, r3
 80136e6:	9b06      	ldr	r3, [sp, #24]
 80136e8:	1b9a      	subs	r2, r3, r6
 80136ea:	d004      	beq.n	80136f6 <_dtoa_r+0x7ce>
 80136ec:	4659      	mov	r1, fp
 80136ee:	4620      	mov	r0, r4
 80136f0:	f000 ffb6 	bl	8014660 <__pow5mult>
 80136f4:	4683      	mov	fp, r0
 80136f6:	2101      	movs	r1, #1
 80136f8:	4620      	mov	r0, r4
 80136fa:	f000 fef5 	bl	80144e8 <__i2b>
 80136fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013700:	2b00      	cmp	r3, #0
 8013702:	4606      	mov	r6, r0
 8013704:	dd7c      	ble.n	8013800 <_dtoa_r+0x8d8>
 8013706:	461a      	mov	r2, r3
 8013708:	4601      	mov	r1, r0
 801370a:	4620      	mov	r0, r4
 801370c:	f000 ffa8 	bl	8014660 <__pow5mult>
 8013710:	9b05      	ldr	r3, [sp, #20]
 8013712:	2b01      	cmp	r3, #1
 8013714:	4606      	mov	r6, r0
 8013716:	dd76      	ble.n	8013806 <_dtoa_r+0x8de>
 8013718:	2300      	movs	r3, #0
 801371a:	9306      	str	r3, [sp, #24]
 801371c:	6933      	ldr	r3, [r6, #16]
 801371e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013722:	6918      	ldr	r0, [r3, #16]
 8013724:	f000 fe90 	bl	8014448 <__hi0bits>
 8013728:	f1c0 0020 	rsb	r0, r0, #32
 801372c:	9b04      	ldr	r3, [sp, #16]
 801372e:	4418      	add	r0, r3
 8013730:	f010 001f 	ands.w	r0, r0, #31
 8013734:	f000 8086 	beq.w	8013844 <_dtoa_r+0x91c>
 8013738:	f1c0 0320 	rsb	r3, r0, #32
 801373c:	2b04      	cmp	r3, #4
 801373e:	dd7f      	ble.n	8013840 <_dtoa_r+0x918>
 8013740:	f1c0 001c 	rsb	r0, r0, #28
 8013744:	9b04      	ldr	r3, [sp, #16]
 8013746:	4403      	add	r3, r0
 8013748:	4480      	add	r8, r0
 801374a:	4405      	add	r5, r0
 801374c:	9304      	str	r3, [sp, #16]
 801374e:	f1b8 0f00 	cmp.w	r8, #0
 8013752:	dd05      	ble.n	8013760 <_dtoa_r+0x838>
 8013754:	4659      	mov	r1, fp
 8013756:	4642      	mov	r2, r8
 8013758:	4620      	mov	r0, r4
 801375a:	f000 ffdb 	bl	8014714 <__lshift>
 801375e:	4683      	mov	fp, r0
 8013760:	9b04      	ldr	r3, [sp, #16]
 8013762:	2b00      	cmp	r3, #0
 8013764:	dd05      	ble.n	8013772 <_dtoa_r+0x84a>
 8013766:	4631      	mov	r1, r6
 8013768:	461a      	mov	r2, r3
 801376a:	4620      	mov	r0, r4
 801376c:	f000 ffd2 	bl	8014714 <__lshift>
 8013770:	4606      	mov	r6, r0
 8013772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013774:	2b00      	cmp	r3, #0
 8013776:	d069      	beq.n	801384c <_dtoa_r+0x924>
 8013778:	4631      	mov	r1, r6
 801377a:	4658      	mov	r0, fp
 801377c:	f001 f836 	bl	80147ec <__mcmp>
 8013780:	2800      	cmp	r0, #0
 8013782:	da63      	bge.n	801384c <_dtoa_r+0x924>
 8013784:	2300      	movs	r3, #0
 8013786:	4659      	mov	r1, fp
 8013788:	220a      	movs	r2, #10
 801378a:	4620      	mov	r0, r4
 801378c:	f000 fdc8 	bl	8014320 <__multadd>
 8013790:	9b08      	ldr	r3, [sp, #32]
 8013792:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013796:	4683      	mov	fp, r0
 8013798:	2b00      	cmp	r3, #0
 801379a:	f000 818f 	beq.w	8013abc <_dtoa_r+0xb94>
 801379e:	4639      	mov	r1, r7
 80137a0:	2300      	movs	r3, #0
 80137a2:	220a      	movs	r2, #10
 80137a4:	4620      	mov	r0, r4
 80137a6:	f000 fdbb 	bl	8014320 <__multadd>
 80137aa:	f1b9 0f00 	cmp.w	r9, #0
 80137ae:	4607      	mov	r7, r0
 80137b0:	f300 808e 	bgt.w	80138d0 <_dtoa_r+0x9a8>
 80137b4:	9b05      	ldr	r3, [sp, #20]
 80137b6:	2b02      	cmp	r3, #2
 80137b8:	dc50      	bgt.n	801385c <_dtoa_r+0x934>
 80137ba:	e089      	b.n	80138d0 <_dtoa_r+0x9a8>
 80137bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80137be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80137c2:	e75d      	b.n	8013680 <_dtoa_r+0x758>
 80137c4:	9b01      	ldr	r3, [sp, #4]
 80137c6:	1e5e      	subs	r6, r3, #1
 80137c8:	9b06      	ldr	r3, [sp, #24]
 80137ca:	42b3      	cmp	r3, r6
 80137cc:	bfbf      	itttt	lt
 80137ce:	9b06      	ldrlt	r3, [sp, #24]
 80137d0:	9606      	strlt	r6, [sp, #24]
 80137d2:	1af2      	sublt	r2, r6, r3
 80137d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80137d6:	bfb6      	itet	lt
 80137d8:	189b      	addlt	r3, r3, r2
 80137da:	1b9e      	subge	r6, r3, r6
 80137dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80137de:	9b01      	ldr	r3, [sp, #4]
 80137e0:	bfb8      	it	lt
 80137e2:	2600      	movlt	r6, #0
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	bfb5      	itete	lt
 80137e8:	eba8 0503 	sublt.w	r5, r8, r3
 80137ec:	9b01      	ldrge	r3, [sp, #4]
 80137ee:	2300      	movlt	r3, #0
 80137f0:	4645      	movge	r5, r8
 80137f2:	e747      	b.n	8013684 <_dtoa_r+0x75c>
 80137f4:	9e06      	ldr	r6, [sp, #24]
 80137f6:	9f08      	ldr	r7, [sp, #32]
 80137f8:	4645      	mov	r5, r8
 80137fa:	e74c      	b.n	8013696 <_dtoa_r+0x76e>
 80137fc:	9a06      	ldr	r2, [sp, #24]
 80137fe:	e775      	b.n	80136ec <_dtoa_r+0x7c4>
 8013800:	9b05      	ldr	r3, [sp, #20]
 8013802:	2b01      	cmp	r3, #1
 8013804:	dc18      	bgt.n	8013838 <_dtoa_r+0x910>
 8013806:	9b02      	ldr	r3, [sp, #8]
 8013808:	b9b3      	cbnz	r3, 8013838 <_dtoa_r+0x910>
 801380a:	9b03      	ldr	r3, [sp, #12]
 801380c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013810:	b9a3      	cbnz	r3, 801383c <_dtoa_r+0x914>
 8013812:	9b03      	ldr	r3, [sp, #12]
 8013814:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013818:	0d1b      	lsrs	r3, r3, #20
 801381a:	051b      	lsls	r3, r3, #20
 801381c:	b12b      	cbz	r3, 801382a <_dtoa_r+0x902>
 801381e:	9b04      	ldr	r3, [sp, #16]
 8013820:	3301      	adds	r3, #1
 8013822:	9304      	str	r3, [sp, #16]
 8013824:	f108 0801 	add.w	r8, r8, #1
 8013828:	2301      	movs	r3, #1
 801382a:	9306      	str	r3, [sp, #24]
 801382c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801382e:	2b00      	cmp	r3, #0
 8013830:	f47f af74 	bne.w	801371c <_dtoa_r+0x7f4>
 8013834:	2001      	movs	r0, #1
 8013836:	e779      	b.n	801372c <_dtoa_r+0x804>
 8013838:	2300      	movs	r3, #0
 801383a:	e7f6      	b.n	801382a <_dtoa_r+0x902>
 801383c:	9b02      	ldr	r3, [sp, #8]
 801383e:	e7f4      	b.n	801382a <_dtoa_r+0x902>
 8013840:	d085      	beq.n	801374e <_dtoa_r+0x826>
 8013842:	4618      	mov	r0, r3
 8013844:	301c      	adds	r0, #28
 8013846:	e77d      	b.n	8013744 <_dtoa_r+0x81c>
 8013848:	40240000 	.word	0x40240000
 801384c:	9b01      	ldr	r3, [sp, #4]
 801384e:	2b00      	cmp	r3, #0
 8013850:	dc38      	bgt.n	80138c4 <_dtoa_r+0x99c>
 8013852:	9b05      	ldr	r3, [sp, #20]
 8013854:	2b02      	cmp	r3, #2
 8013856:	dd35      	ble.n	80138c4 <_dtoa_r+0x99c>
 8013858:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801385c:	f1b9 0f00 	cmp.w	r9, #0
 8013860:	d10d      	bne.n	801387e <_dtoa_r+0x956>
 8013862:	4631      	mov	r1, r6
 8013864:	464b      	mov	r3, r9
 8013866:	2205      	movs	r2, #5
 8013868:	4620      	mov	r0, r4
 801386a:	f000 fd59 	bl	8014320 <__multadd>
 801386e:	4601      	mov	r1, r0
 8013870:	4606      	mov	r6, r0
 8013872:	4658      	mov	r0, fp
 8013874:	f000 ffba 	bl	80147ec <__mcmp>
 8013878:	2800      	cmp	r0, #0
 801387a:	f73f adbd 	bgt.w	80133f8 <_dtoa_r+0x4d0>
 801387e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013880:	9d00      	ldr	r5, [sp, #0]
 8013882:	ea6f 0a03 	mvn.w	sl, r3
 8013886:	f04f 0800 	mov.w	r8, #0
 801388a:	4631      	mov	r1, r6
 801388c:	4620      	mov	r0, r4
 801388e:	f000 fd25 	bl	80142dc <_Bfree>
 8013892:	2f00      	cmp	r7, #0
 8013894:	f43f aeb4 	beq.w	8013600 <_dtoa_r+0x6d8>
 8013898:	f1b8 0f00 	cmp.w	r8, #0
 801389c:	d005      	beq.n	80138aa <_dtoa_r+0x982>
 801389e:	45b8      	cmp	r8, r7
 80138a0:	d003      	beq.n	80138aa <_dtoa_r+0x982>
 80138a2:	4641      	mov	r1, r8
 80138a4:	4620      	mov	r0, r4
 80138a6:	f000 fd19 	bl	80142dc <_Bfree>
 80138aa:	4639      	mov	r1, r7
 80138ac:	4620      	mov	r0, r4
 80138ae:	f000 fd15 	bl	80142dc <_Bfree>
 80138b2:	e6a5      	b.n	8013600 <_dtoa_r+0x6d8>
 80138b4:	2600      	movs	r6, #0
 80138b6:	4637      	mov	r7, r6
 80138b8:	e7e1      	b.n	801387e <_dtoa_r+0x956>
 80138ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80138bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80138c0:	4637      	mov	r7, r6
 80138c2:	e599      	b.n	80133f8 <_dtoa_r+0x4d0>
 80138c4:	9b08      	ldr	r3, [sp, #32]
 80138c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	f000 80fd 	beq.w	8013aca <_dtoa_r+0xba2>
 80138d0:	2d00      	cmp	r5, #0
 80138d2:	dd05      	ble.n	80138e0 <_dtoa_r+0x9b8>
 80138d4:	4639      	mov	r1, r7
 80138d6:	462a      	mov	r2, r5
 80138d8:	4620      	mov	r0, r4
 80138da:	f000 ff1b 	bl	8014714 <__lshift>
 80138de:	4607      	mov	r7, r0
 80138e0:	9b06      	ldr	r3, [sp, #24]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d05c      	beq.n	80139a0 <_dtoa_r+0xa78>
 80138e6:	6879      	ldr	r1, [r7, #4]
 80138e8:	4620      	mov	r0, r4
 80138ea:	f000 fcb7 	bl	801425c <_Balloc>
 80138ee:	4605      	mov	r5, r0
 80138f0:	b928      	cbnz	r0, 80138fe <_dtoa_r+0x9d6>
 80138f2:	4b80      	ldr	r3, [pc, #512]	; (8013af4 <_dtoa_r+0xbcc>)
 80138f4:	4602      	mov	r2, r0
 80138f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80138fa:	f7ff bb2e 	b.w	8012f5a <_dtoa_r+0x32>
 80138fe:	693a      	ldr	r2, [r7, #16]
 8013900:	3202      	adds	r2, #2
 8013902:	0092      	lsls	r2, r2, #2
 8013904:	f107 010c 	add.w	r1, r7, #12
 8013908:	300c      	adds	r0, #12
 801390a:	f000 fc99 	bl	8014240 <memcpy>
 801390e:	2201      	movs	r2, #1
 8013910:	4629      	mov	r1, r5
 8013912:	4620      	mov	r0, r4
 8013914:	f000 fefe 	bl	8014714 <__lshift>
 8013918:	9b00      	ldr	r3, [sp, #0]
 801391a:	3301      	adds	r3, #1
 801391c:	9301      	str	r3, [sp, #4]
 801391e:	9b00      	ldr	r3, [sp, #0]
 8013920:	444b      	add	r3, r9
 8013922:	9307      	str	r3, [sp, #28]
 8013924:	9b02      	ldr	r3, [sp, #8]
 8013926:	f003 0301 	and.w	r3, r3, #1
 801392a:	46b8      	mov	r8, r7
 801392c:	9306      	str	r3, [sp, #24]
 801392e:	4607      	mov	r7, r0
 8013930:	9b01      	ldr	r3, [sp, #4]
 8013932:	4631      	mov	r1, r6
 8013934:	3b01      	subs	r3, #1
 8013936:	4658      	mov	r0, fp
 8013938:	9302      	str	r3, [sp, #8]
 801393a:	f7ff fa67 	bl	8012e0c <quorem>
 801393e:	4603      	mov	r3, r0
 8013940:	3330      	adds	r3, #48	; 0x30
 8013942:	9004      	str	r0, [sp, #16]
 8013944:	4641      	mov	r1, r8
 8013946:	4658      	mov	r0, fp
 8013948:	9308      	str	r3, [sp, #32]
 801394a:	f000 ff4f 	bl	80147ec <__mcmp>
 801394e:	463a      	mov	r2, r7
 8013950:	4681      	mov	r9, r0
 8013952:	4631      	mov	r1, r6
 8013954:	4620      	mov	r0, r4
 8013956:	f000 ff65 	bl	8014824 <__mdiff>
 801395a:	68c2      	ldr	r2, [r0, #12]
 801395c:	9b08      	ldr	r3, [sp, #32]
 801395e:	4605      	mov	r5, r0
 8013960:	bb02      	cbnz	r2, 80139a4 <_dtoa_r+0xa7c>
 8013962:	4601      	mov	r1, r0
 8013964:	4658      	mov	r0, fp
 8013966:	f000 ff41 	bl	80147ec <__mcmp>
 801396a:	9b08      	ldr	r3, [sp, #32]
 801396c:	4602      	mov	r2, r0
 801396e:	4629      	mov	r1, r5
 8013970:	4620      	mov	r0, r4
 8013972:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8013976:	f000 fcb1 	bl	80142dc <_Bfree>
 801397a:	9b05      	ldr	r3, [sp, #20]
 801397c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801397e:	9d01      	ldr	r5, [sp, #4]
 8013980:	ea43 0102 	orr.w	r1, r3, r2
 8013984:	9b06      	ldr	r3, [sp, #24]
 8013986:	430b      	orrs	r3, r1
 8013988:	9b08      	ldr	r3, [sp, #32]
 801398a:	d10d      	bne.n	80139a8 <_dtoa_r+0xa80>
 801398c:	2b39      	cmp	r3, #57	; 0x39
 801398e:	d029      	beq.n	80139e4 <_dtoa_r+0xabc>
 8013990:	f1b9 0f00 	cmp.w	r9, #0
 8013994:	dd01      	ble.n	801399a <_dtoa_r+0xa72>
 8013996:	9b04      	ldr	r3, [sp, #16]
 8013998:	3331      	adds	r3, #49	; 0x31
 801399a:	9a02      	ldr	r2, [sp, #8]
 801399c:	7013      	strb	r3, [r2, #0]
 801399e:	e774      	b.n	801388a <_dtoa_r+0x962>
 80139a0:	4638      	mov	r0, r7
 80139a2:	e7b9      	b.n	8013918 <_dtoa_r+0x9f0>
 80139a4:	2201      	movs	r2, #1
 80139a6:	e7e2      	b.n	801396e <_dtoa_r+0xa46>
 80139a8:	f1b9 0f00 	cmp.w	r9, #0
 80139ac:	db06      	blt.n	80139bc <_dtoa_r+0xa94>
 80139ae:	9905      	ldr	r1, [sp, #20]
 80139b0:	ea41 0909 	orr.w	r9, r1, r9
 80139b4:	9906      	ldr	r1, [sp, #24]
 80139b6:	ea59 0101 	orrs.w	r1, r9, r1
 80139ba:	d120      	bne.n	80139fe <_dtoa_r+0xad6>
 80139bc:	2a00      	cmp	r2, #0
 80139be:	ddec      	ble.n	801399a <_dtoa_r+0xa72>
 80139c0:	4659      	mov	r1, fp
 80139c2:	2201      	movs	r2, #1
 80139c4:	4620      	mov	r0, r4
 80139c6:	9301      	str	r3, [sp, #4]
 80139c8:	f000 fea4 	bl	8014714 <__lshift>
 80139cc:	4631      	mov	r1, r6
 80139ce:	4683      	mov	fp, r0
 80139d0:	f000 ff0c 	bl	80147ec <__mcmp>
 80139d4:	2800      	cmp	r0, #0
 80139d6:	9b01      	ldr	r3, [sp, #4]
 80139d8:	dc02      	bgt.n	80139e0 <_dtoa_r+0xab8>
 80139da:	d1de      	bne.n	801399a <_dtoa_r+0xa72>
 80139dc:	07da      	lsls	r2, r3, #31
 80139de:	d5dc      	bpl.n	801399a <_dtoa_r+0xa72>
 80139e0:	2b39      	cmp	r3, #57	; 0x39
 80139e2:	d1d8      	bne.n	8013996 <_dtoa_r+0xa6e>
 80139e4:	9a02      	ldr	r2, [sp, #8]
 80139e6:	2339      	movs	r3, #57	; 0x39
 80139e8:	7013      	strb	r3, [r2, #0]
 80139ea:	462b      	mov	r3, r5
 80139ec:	461d      	mov	r5, r3
 80139ee:	3b01      	subs	r3, #1
 80139f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80139f4:	2a39      	cmp	r2, #57	; 0x39
 80139f6:	d050      	beq.n	8013a9a <_dtoa_r+0xb72>
 80139f8:	3201      	adds	r2, #1
 80139fa:	701a      	strb	r2, [r3, #0]
 80139fc:	e745      	b.n	801388a <_dtoa_r+0x962>
 80139fe:	2a00      	cmp	r2, #0
 8013a00:	dd03      	ble.n	8013a0a <_dtoa_r+0xae2>
 8013a02:	2b39      	cmp	r3, #57	; 0x39
 8013a04:	d0ee      	beq.n	80139e4 <_dtoa_r+0xabc>
 8013a06:	3301      	adds	r3, #1
 8013a08:	e7c7      	b.n	801399a <_dtoa_r+0xa72>
 8013a0a:	9a01      	ldr	r2, [sp, #4]
 8013a0c:	9907      	ldr	r1, [sp, #28]
 8013a0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013a12:	428a      	cmp	r2, r1
 8013a14:	d02a      	beq.n	8013a6c <_dtoa_r+0xb44>
 8013a16:	4659      	mov	r1, fp
 8013a18:	2300      	movs	r3, #0
 8013a1a:	220a      	movs	r2, #10
 8013a1c:	4620      	mov	r0, r4
 8013a1e:	f000 fc7f 	bl	8014320 <__multadd>
 8013a22:	45b8      	cmp	r8, r7
 8013a24:	4683      	mov	fp, r0
 8013a26:	f04f 0300 	mov.w	r3, #0
 8013a2a:	f04f 020a 	mov.w	r2, #10
 8013a2e:	4641      	mov	r1, r8
 8013a30:	4620      	mov	r0, r4
 8013a32:	d107      	bne.n	8013a44 <_dtoa_r+0xb1c>
 8013a34:	f000 fc74 	bl	8014320 <__multadd>
 8013a38:	4680      	mov	r8, r0
 8013a3a:	4607      	mov	r7, r0
 8013a3c:	9b01      	ldr	r3, [sp, #4]
 8013a3e:	3301      	adds	r3, #1
 8013a40:	9301      	str	r3, [sp, #4]
 8013a42:	e775      	b.n	8013930 <_dtoa_r+0xa08>
 8013a44:	f000 fc6c 	bl	8014320 <__multadd>
 8013a48:	4639      	mov	r1, r7
 8013a4a:	4680      	mov	r8, r0
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	220a      	movs	r2, #10
 8013a50:	4620      	mov	r0, r4
 8013a52:	f000 fc65 	bl	8014320 <__multadd>
 8013a56:	4607      	mov	r7, r0
 8013a58:	e7f0      	b.n	8013a3c <_dtoa_r+0xb14>
 8013a5a:	f1b9 0f00 	cmp.w	r9, #0
 8013a5e:	9a00      	ldr	r2, [sp, #0]
 8013a60:	bfcc      	ite	gt
 8013a62:	464d      	movgt	r5, r9
 8013a64:	2501      	movle	r5, #1
 8013a66:	4415      	add	r5, r2
 8013a68:	f04f 0800 	mov.w	r8, #0
 8013a6c:	4659      	mov	r1, fp
 8013a6e:	2201      	movs	r2, #1
 8013a70:	4620      	mov	r0, r4
 8013a72:	9301      	str	r3, [sp, #4]
 8013a74:	f000 fe4e 	bl	8014714 <__lshift>
 8013a78:	4631      	mov	r1, r6
 8013a7a:	4683      	mov	fp, r0
 8013a7c:	f000 feb6 	bl	80147ec <__mcmp>
 8013a80:	2800      	cmp	r0, #0
 8013a82:	dcb2      	bgt.n	80139ea <_dtoa_r+0xac2>
 8013a84:	d102      	bne.n	8013a8c <_dtoa_r+0xb64>
 8013a86:	9b01      	ldr	r3, [sp, #4]
 8013a88:	07db      	lsls	r3, r3, #31
 8013a8a:	d4ae      	bmi.n	80139ea <_dtoa_r+0xac2>
 8013a8c:	462b      	mov	r3, r5
 8013a8e:	461d      	mov	r5, r3
 8013a90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013a94:	2a30      	cmp	r2, #48	; 0x30
 8013a96:	d0fa      	beq.n	8013a8e <_dtoa_r+0xb66>
 8013a98:	e6f7      	b.n	801388a <_dtoa_r+0x962>
 8013a9a:	9a00      	ldr	r2, [sp, #0]
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	d1a5      	bne.n	80139ec <_dtoa_r+0xac4>
 8013aa0:	f10a 0a01 	add.w	sl, sl, #1
 8013aa4:	2331      	movs	r3, #49	; 0x31
 8013aa6:	e779      	b.n	801399c <_dtoa_r+0xa74>
 8013aa8:	4b13      	ldr	r3, [pc, #76]	; (8013af8 <_dtoa_r+0xbd0>)
 8013aaa:	f7ff baaf 	b.w	801300c <_dtoa_r+0xe4>
 8013aae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	f47f aa86 	bne.w	8012fc2 <_dtoa_r+0x9a>
 8013ab6:	4b11      	ldr	r3, [pc, #68]	; (8013afc <_dtoa_r+0xbd4>)
 8013ab8:	f7ff baa8 	b.w	801300c <_dtoa_r+0xe4>
 8013abc:	f1b9 0f00 	cmp.w	r9, #0
 8013ac0:	dc03      	bgt.n	8013aca <_dtoa_r+0xba2>
 8013ac2:	9b05      	ldr	r3, [sp, #20]
 8013ac4:	2b02      	cmp	r3, #2
 8013ac6:	f73f aec9 	bgt.w	801385c <_dtoa_r+0x934>
 8013aca:	9d00      	ldr	r5, [sp, #0]
 8013acc:	4631      	mov	r1, r6
 8013ace:	4658      	mov	r0, fp
 8013ad0:	f7ff f99c 	bl	8012e0c <quorem>
 8013ad4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013ad8:	f805 3b01 	strb.w	r3, [r5], #1
 8013adc:	9a00      	ldr	r2, [sp, #0]
 8013ade:	1aaa      	subs	r2, r5, r2
 8013ae0:	4591      	cmp	r9, r2
 8013ae2:	ddba      	ble.n	8013a5a <_dtoa_r+0xb32>
 8013ae4:	4659      	mov	r1, fp
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	220a      	movs	r2, #10
 8013aea:	4620      	mov	r0, r4
 8013aec:	f000 fc18 	bl	8014320 <__multadd>
 8013af0:	4683      	mov	fp, r0
 8013af2:	e7eb      	b.n	8013acc <_dtoa_r+0xba4>
 8013af4:	08029989 	.word	0x08029989
 8013af8:	080296ec 	.word	0x080296ec
 8013afc:	0802991d 	.word	0x0802991d

08013b00 <fiprintf>:
 8013b00:	b40e      	push	{r1, r2, r3}
 8013b02:	b503      	push	{r0, r1, lr}
 8013b04:	4601      	mov	r1, r0
 8013b06:	ab03      	add	r3, sp, #12
 8013b08:	4805      	ldr	r0, [pc, #20]	; (8013b20 <fiprintf+0x20>)
 8013b0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b0e:	6800      	ldr	r0, [r0, #0]
 8013b10:	9301      	str	r3, [sp, #4]
 8013b12:	f001 fa9d 	bl	8015050 <_vfiprintf_r>
 8013b16:	b002      	add	sp, #8
 8013b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b1c:	b003      	add	sp, #12
 8013b1e:	4770      	bx	lr
 8013b20:	20000040 	.word	0x20000040

08013b24 <rshift>:
 8013b24:	6903      	ldr	r3, [r0, #16]
 8013b26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013b2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013b32:	f100 0414 	add.w	r4, r0, #20
 8013b36:	dd45      	ble.n	8013bc4 <rshift+0xa0>
 8013b38:	f011 011f 	ands.w	r1, r1, #31
 8013b3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013b40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013b44:	d10c      	bne.n	8013b60 <rshift+0x3c>
 8013b46:	f100 0710 	add.w	r7, r0, #16
 8013b4a:	4629      	mov	r1, r5
 8013b4c:	42b1      	cmp	r1, r6
 8013b4e:	d334      	bcc.n	8013bba <rshift+0x96>
 8013b50:	1a9b      	subs	r3, r3, r2
 8013b52:	009b      	lsls	r3, r3, #2
 8013b54:	1eea      	subs	r2, r5, #3
 8013b56:	4296      	cmp	r6, r2
 8013b58:	bf38      	it	cc
 8013b5a:	2300      	movcc	r3, #0
 8013b5c:	4423      	add	r3, r4
 8013b5e:	e015      	b.n	8013b8c <rshift+0x68>
 8013b60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013b64:	f1c1 0820 	rsb	r8, r1, #32
 8013b68:	40cf      	lsrs	r7, r1
 8013b6a:	f105 0e04 	add.w	lr, r5, #4
 8013b6e:	46a1      	mov	r9, r4
 8013b70:	4576      	cmp	r6, lr
 8013b72:	46f4      	mov	ip, lr
 8013b74:	d815      	bhi.n	8013ba2 <rshift+0x7e>
 8013b76:	1a9b      	subs	r3, r3, r2
 8013b78:	009a      	lsls	r2, r3, #2
 8013b7a:	3a04      	subs	r2, #4
 8013b7c:	3501      	adds	r5, #1
 8013b7e:	42ae      	cmp	r6, r5
 8013b80:	bf38      	it	cc
 8013b82:	2200      	movcc	r2, #0
 8013b84:	18a3      	adds	r3, r4, r2
 8013b86:	50a7      	str	r7, [r4, r2]
 8013b88:	b107      	cbz	r7, 8013b8c <rshift+0x68>
 8013b8a:	3304      	adds	r3, #4
 8013b8c:	1b1a      	subs	r2, r3, r4
 8013b8e:	42a3      	cmp	r3, r4
 8013b90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013b94:	bf08      	it	eq
 8013b96:	2300      	moveq	r3, #0
 8013b98:	6102      	str	r2, [r0, #16]
 8013b9a:	bf08      	it	eq
 8013b9c:	6143      	streq	r3, [r0, #20]
 8013b9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ba2:	f8dc c000 	ldr.w	ip, [ip]
 8013ba6:	fa0c fc08 	lsl.w	ip, ip, r8
 8013baa:	ea4c 0707 	orr.w	r7, ip, r7
 8013bae:	f849 7b04 	str.w	r7, [r9], #4
 8013bb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013bb6:	40cf      	lsrs	r7, r1
 8013bb8:	e7da      	b.n	8013b70 <rshift+0x4c>
 8013bba:	f851 cb04 	ldr.w	ip, [r1], #4
 8013bbe:	f847 cf04 	str.w	ip, [r7, #4]!
 8013bc2:	e7c3      	b.n	8013b4c <rshift+0x28>
 8013bc4:	4623      	mov	r3, r4
 8013bc6:	e7e1      	b.n	8013b8c <rshift+0x68>

08013bc8 <__hexdig_fun>:
 8013bc8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013bcc:	2b09      	cmp	r3, #9
 8013bce:	d802      	bhi.n	8013bd6 <__hexdig_fun+0xe>
 8013bd0:	3820      	subs	r0, #32
 8013bd2:	b2c0      	uxtb	r0, r0
 8013bd4:	4770      	bx	lr
 8013bd6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013bda:	2b05      	cmp	r3, #5
 8013bdc:	d801      	bhi.n	8013be2 <__hexdig_fun+0x1a>
 8013bde:	3847      	subs	r0, #71	; 0x47
 8013be0:	e7f7      	b.n	8013bd2 <__hexdig_fun+0xa>
 8013be2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013be6:	2b05      	cmp	r3, #5
 8013be8:	d801      	bhi.n	8013bee <__hexdig_fun+0x26>
 8013bea:	3827      	subs	r0, #39	; 0x27
 8013bec:	e7f1      	b.n	8013bd2 <__hexdig_fun+0xa>
 8013bee:	2000      	movs	r0, #0
 8013bf0:	4770      	bx	lr
	...

08013bf4 <__gethex>:
 8013bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bf8:	ed2d 8b02 	vpush	{d8}
 8013bfc:	b089      	sub	sp, #36	; 0x24
 8013bfe:	ee08 0a10 	vmov	s16, r0
 8013c02:	9304      	str	r3, [sp, #16]
 8013c04:	4bbc      	ldr	r3, [pc, #752]	; (8013ef8 <__gethex+0x304>)
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	9301      	str	r3, [sp, #4]
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	468b      	mov	fp, r1
 8013c0e:	4690      	mov	r8, r2
 8013c10:	f7ec faf0 	bl	80001f4 <strlen>
 8013c14:	9b01      	ldr	r3, [sp, #4]
 8013c16:	f8db 2000 	ldr.w	r2, [fp]
 8013c1a:	4403      	add	r3, r0
 8013c1c:	4682      	mov	sl, r0
 8013c1e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8013c22:	9305      	str	r3, [sp, #20]
 8013c24:	1c93      	adds	r3, r2, #2
 8013c26:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013c2a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013c2e:	32fe      	adds	r2, #254	; 0xfe
 8013c30:	18d1      	adds	r1, r2, r3
 8013c32:	461f      	mov	r7, r3
 8013c34:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013c38:	9100      	str	r1, [sp, #0]
 8013c3a:	2830      	cmp	r0, #48	; 0x30
 8013c3c:	d0f8      	beq.n	8013c30 <__gethex+0x3c>
 8013c3e:	f7ff ffc3 	bl	8013bc8 <__hexdig_fun>
 8013c42:	4604      	mov	r4, r0
 8013c44:	2800      	cmp	r0, #0
 8013c46:	d13a      	bne.n	8013cbe <__gethex+0xca>
 8013c48:	9901      	ldr	r1, [sp, #4]
 8013c4a:	4652      	mov	r2, sl
 8013c4c:	4638      	mov	r0, r7
 8013c4e:	f001 fb47 	bl	80152e0 <strncmp>
 8013c52:	4605      	mov	r5, r0
 8013c54:	2800      	cmp	r0, #0
 8013c56:	d168      	bne.n	8013d2a <__gethex+0x136>
 8013c58:	f817 000a 	ldrb.w	r0, [r7, sl]
 8013c5c:	eb07 060a 	add.w	r6, r7, sl
 8013c60:	f7ff ffb2 	bl	8013bc8 <__hexdig_fun>
 8013c64:	2800      	cmp	r0, #0
 8013c66:	d062      	beq.n	8013d2e <__gethex+0x13a>
 8013c68:	4633      	mov	r3, r6
 8013c6a:	7818      	ldrb	r0, [r3, #0]
 8013c6c:	2830      	cmp	r0, #48	; 0x30
 8013c6e:	461f      	mov	r7, r3
 8013c70:	f103 0301 	add.w	r3, r3, #1
 8013c74:	d0f9      	beq.n	8013c6a <__gethex+0x76>
 8013c76:	f7ff ffa7 	bl	8013bc8 <__hexdig_fun>
 8013c7a:	2301      	movs	r3, #1
 8013c7c:	fab0 f480 	clz	r4, r0
 8013c80:	0964      	lsrs	r4, r4, #5
 8013c82:	4635      	mov	r5, r6
 8013c84:	9300      	str	r3, [sp, #0]
 8013c86:	463a      	mov	r2, r7
 8013c88:	4616      	mov	r6, r2
 8013c8a:	3201      	adds	r2, #1
 8013c8c:	7830      	ldrb	r0, [r6, #0]
 8013c8e:	f7ff ff9b 	bl	8013bc8 <__hexdig_fun>
 8013c92:	2800      	cmp	r0, #0
 8013c94:	d1f8      	bne.n	8013c88 <__gethex+0x94>
 8013c96:	9901      	ldr	r1, [sp, #4]
 8013c98:	4652      	mov	r2, sl
 8013c9a:	4630      	mov	r0, r6
 8013c9c:	f001 fb20 	bl	80152e0 <strncmp>
 8013ca0:	b980      	cbnz	r0, 8013cc4 <__gethex+0xd0>
 8013ca2:	b94d      	cbnz	r5, 8013cb8 <__gethex+0xc4>
 8013ca4:	eb06 050a 	add.w	r5, r6, sl
 8013ca8:	462a      	mov	r2, r5
 8013caa:	4616      	mov	r6, r2
 8013cac:	3201      	adds	r2, #1
 8013cae:	7830      	ldrb	r0, [r6, #0]
 8013cb0:	f7ff ff8a 	bl	8013bc8 <__hexdig_fun>
 8013cb4:	2800      	cmp	r0, #0
 8013cb6:	d1f8      	bne.n	8013caa <__gethex+0xb6>
 8013cb8:	1bad      	subs	r5, r5, r6
 8013cba:	00ad      	lsls	r5, r5, #2
 8013cbc:	e004      	b.n	8013cc8 <__gethex+0xd4>
 8013cbe:	2400      	movs	r4, #0
 8013cc0:	4625      	mov	r5, r4
 8013cc2:	e7e0      	b.n	8013c86 <__gethex+0x92>
 8013cc4:	2d00      	cmp	r5, #0
 8013cc6:	d1f7      	bne.n	8013cb8 <__gethex+0xc4>
 8013cc8:	7833      	ldrb	r3, [r6, #0]
 8013cca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013cce:	2b50      	cmp	r3, #80	; 0x50
 8013cd0:	d13b      	bne.n	8013d4a <__gethex+0x156>
 8013cd2:	7873      	ldrb	r3, [r6, #1]
 8013cd4:	2b2b      	cmp	r3, #43	; 0x2b
 8013cd6:	d02c      	beq.n	8013d32 <__gethex+0x13e>
 8013cd8:	2b2d      	cmp	r3, #45	; 0x2d
 8013cda:	d02e      	beq.n	8013d3a <__gethex+0x146>
 8013cdc:	1c71      	adds	r1, r6, #1
 8013cde:	f04f 0900 	mov.w	r9, #0
 8013ce2:	7808      	ldrb	r0, [r1, #0]
 8013ce4:	f7ff ff70 	bl	8013bc8 <__hexdig_fun>
 8013ce8:	1e43      	subs	r3, r0, #1
 8013cea:	b2db      	uxtb	r3, r3
 8013cec:	2b18      	cmp	r3, #24
 8013cee:	d82c      	bhi.n	8013d4a <__gethex+0x156>
 8013cf0:	f1a0 0210 	sub.w	r2, r0, #16
 8013cf4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013cf8:	f7ff ff66 	bl	8013bc8 <__hexdig_fun>
 8013cfc:	1e43      	subs	r3, r0, #1
 8013cfe:	b2db      	uxtb	r3, r3
 8013d00:	2b18      	cmp	r3, #24
 8013d02:	d91d      	bls.n	8013d40 <__gethex+0x14c>
 8013d04:	f1b9 0f00 	cmp.w	r9, #0
 8013d08:	d000      	beq.n	8013d0c <__gethex+0x118>
 8013d0a:	4252      	negs	r2, r2
 8013d0c:	4415      	add	r5, r2
 8013d0e:	f8cb 1000 	str.w	r1, [fp]
 8013d12:	b1e4      	cbz	r4, 8013d4e <__gethex+0x15a>
 8013d14:	9b00      	ldr	r3, [sp, #0]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	bf14      	ite	ne
 8013d1a:	2700      	movne	r7, #0
 8013d1c:	2706      	moveq	r7, #6
 8013d1e:	4638      	mov	r0, r7
 8013d20:	b009      	add	sp, #36	; 0x24
 8013d22:	ecbd 8b02 	vpop	{d8}
 8013d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d2a:	463e      	mov	r6, r7
 8013d2c:	4625      	mov	r5, r4
 8013d2e:	2401      	movs	r4, #1
 8013d30:	e7ca      	b.n	8013cc8 <__gethex+0xd4>
 8013d32:	f04f 0900 	mov.w	r9, #0
 8013d36:	1cb1      	adds	r1, r6, #2
 8013d38:	e7d3      	b.n	8013ce2 <__gethex+0xee>
 8013d3a:	f04f 0901 	mov.w	r9, #1
 8013d3e:	e7fa      	b.n	8013d36 <__gethex+0x142>
 8013d40:	230a      	movs	r3, #10
 8013d42:	fb03 0202 	mla	r2, r3, r2, r0
 8013d46:	3a10      	subs	r2, #16
 8013d48:	e7d4      	b.n	8013cf4 <__gethex+0x100>
 8013d4a:	4631      	mov	r1, r6
 8013d4c:	e7df      	b.n	8013d0e <__gethex+0x11a>
 8013d4e:	1bf3      	subs	r3, r6, r7
 8013d50:	3b01      	subs	r3, #1
 8013d52:	4621      	mov	r1, r4
 8013d54:	2b07      	cmp	r3, #7
 8013d56:	dc0b      	bgt.n	8013d70 <__gethex+0x17c>
 8013d58:	ee18 0a10 	vmov	r0, s16
 8013d5c:	f000 fa7e 	bl	801425c <_Balloc>
 8013d60:	4604      	mov	r4, r0
 8013d62:	b940      	cbnz	r0, 8013d76 <__gethex+0x182>
 8013d64:	4b65      	ldr	r3, [pc, #404]	; (8013efc <__gethex+0x308>)
 8013d66:	4602      	mov	r2, r0
 8013d68:	21de      	movs	r1, #222	; 0xde
 8013d6a:	4865      	ldr	r0, [pc, #404]	; (8013f00 <__gethex+0x30c>)
 8013d6c:	f7ff f830 	bl	8012dd0 <__assert_func>
 8013d70:	3101      	adds	r1, #1
 8013d72:	105b      	asrs	r3, r3, #1
 8013d74:	e7ee      	b.n	8013d54 <__gethex+0x160>
 8013d76:	f100 0914 	add.w	r9, r0, #20
 8013d7a:	f04f 0b00 	mov.w	fp, #0
 8013d7e:	f1ca 0301 	rsb	r3, sl, #1
 8013d82:	f8cd 9008 	str.w	r9, [sp, #8]
 8013d86:	f8cd b000 	str.w	fp, [sp]
 8013d8a:	9306      	str	r3, [sp, #24]
 8013d8c:	42b7      	cmp	r7, r6
 8013d8e:	d340      	bcc.n	8013e12 <__gethex+0x21e>
 8013d90:	9802      	ldr	r0, [sp, #8]
 8013d92:	9b00      	ldr	r3, [sp, #0]
 8013d94:	f840 3b04 	str.w	r3, [r0], #4
 8013d98:	eba0 0009 	sub.w	r0, r0, r9
 8013d9c:	1080      	asrs	r0, r0, #2
 8013d9e:	0146      	lsls	r6, r0, #5
 8013da0:	6120      	str	r0, [r4, #16]
 8013da2:	4618      	mov	r0, r3
 8013da4:	f000 fb50 	bl	8014448 <__hi0bits>
 8013da8:	1a30      	subs	r0, r6, r0
 8013daa:	f8d8 6000 	ldr.w	r6, [r8]
 8013dae:	42b0      	cmp	r0, r6
 8013db0:	dd63      	ble.n	8013e7a <__gethex+0x286>
 8013db2:	1b87      	subs	r7, r0, r6
 8013db4:	4639      	mov	r1, r7
 8013db6:	4620      	mov	r0, r4
 8013db8:	f000 feea 	bl	8014b90 <__any_on>
 8013dbc:	4682      	mov	sl, r0
 8013dbe:	b1a8      	cbz	r0, 8013dec <__gethex+0x1f8>
 8013dc0:	1e7b      	subs	r3, r7, #1
 8013dc2:	1159      	asrs	r1, r3, #5
 8013dc4:	f003 021f 	and.w	r2, r3, #31
 8013dc8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013dcc:	f04f 0a01 	mov.w	sl, #1
 8013dd0:	fa0a f202 	lsl.w	r2, sl, r2
 8013dd4:	420a      	tst	r2, r1
 8013dd6:	d009      	beq.n	8013dec <__gethex+0x1f8>
 8013dd8:	4553      	cmp	r3, sl
 8013dda:	dd05      	ble.n	8013de8 <__gethex+0x1f4>
 8013ddc:	1eb9      	subs	r1, r7, #2
 8013dde:	4620      	mov	r0, r4
 8013de0:	f000 fed6 	bl	8014b90 <__any_on>
 8013de4:	2800      	cmp	r0, #0
 8013de6:	d145      	bne.n	8013e74 <__gethex+0x280>
 8013de8:	f04f 0a02 	mov.w	sl, #2
 8013dec:	4639      	mov	r1, r7
 8013dee:	4620      	mov	r0, r4
 8013df0:	f7ff fe98 	bl	8013b24 <rshift>
 8013df4:	443d      	add	r5, r7
 8013df6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013dfa:	42ab      	cmp	r3, r5
 8013dfc:	da4c      	bge.n	8013e98 <__gethex+0x2a4>
 8013dfe:	ee18 0a10 	vmov	r0, s16
 8013e02:	4621      	mov	r1, r4
 8013e04:	f000 fa6a 	bl	80142dc <_Bfree>
 8013e08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	6013      	str	r3, [r2, #0]
 8013e0e:	27a3      	movs	r7, #163	; 0xa3
 8013e10:	e785      	b.n	8013d1e <__gethex+0x12a>
 8013e12:	1e73      	subs	r3, r6, #1
 8013e14:	9a05      	ldr	r2, [sp, #20]
 8013e16:	9303      	str	r3, [sp, #12]
 8013e18:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013e1c:	4293      	cmp	r3, r2
 8013e1e:	d019      	beq.n	8013e54 <__gethex+0x260>
 8013e20:	f1bb 0f20 	cmp.w	fp, #32
 8013e24:	d107      	bne.n	8013e36 <__gethex+0x242>
 8013e26:	9b02      	ldr	r3, [sp, #8]
 8013e28:	9a00      	ldr	r2, [sp, #0]
 8013e2a:	f843 2b04 	str.w	r2, [r3], #4
 8013e2e:	9302      	str	r3, [sp, #8]
 8013e30:	2300      	movs	r3, #0
 8013e32:	9300      	str	r3, [sp, #0]
 8013e34:	469b      	mov	fp, r3
 8013e36:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013e3a:	f7ff fec5 	bl	8013bc8 <__hexdig_fun>
 8013e3e:	9b00      	ldr	r3, [sp, #0]
 8013e40:	f000 000f 	and.w	r0, r0, #15
 8013e44:	fa00 f00b 	lsl.w	r0, r0, fp
 8013e48:	4303      	orrs	r3, r0
 8013e4a:	9300      	str	r3, [sp, #0]
 8013e4c:	f10b 0b04 	add.w	fp, fp, #4
 8013e50:	9b03      	ldr	r3, [sp, #12]
 8013e52:	e00d      	b.n	8013e70 <__gethex+0x27c>
 8013e54:	9b03      	ldr	r3, [sp, #12]
 8013e56:	9a06      	ldr	r2, [sp, #24]
 8013e58:	4413      	add	r3, r2
 8013e5a:	42bb      	cmp	r3, r7
 8013e5c:	d3e0      	bcc.n	8013e20 <__gethex+0x22c>
 8013e5e:	4618      	mov	r0, r3
 8013e60:	9901      	ldr	r1, [sp, #4]
 8013e62:	9307      	str	r3, [sp, #28]
 8013e64:	4652      	mov	r2, sl
 8013e66:	f001 fa3b 	bl	80152e0 <strncmp>
 8013e6a:	9b07      	ldr	r3, [sp, #28]
 8013e6c:	2800      	cmp	r0, #0
 8013e6e:	d1d7      	bne.n	8013e20 <__gethex+0x22c>
 8013e70:	461e      	mov	r6, r3
 8013e72:	e78b      	b.n	8013d8c <__gethex+0x198>
 8013e74:	f04f 0a03 	mov.w	sl, #3
 8013e78:	e7b8      	b.n	8013dec <__gethex+0x1f8>
 8013e7a:	da0a      	bge.n	8013e92 <__gethex+0x29e>
 8013e7c:	1a37      	subs	r7, r6, r0
 8013e7e:	4621      	mov	r1, r4
 8013e80:	ee18 0a10 	vmov	r0, s16
 8013e84:	463a      	mov	r2, r7
 8013e86:	f000 fc45 	bl	8014714 <__lshift>
 8013e8a:	1bed      	subs	r5, r5, r7
 8013e8c:	4604      	mov	r4, r0
 8013e8e:	f100 0914 	add.w	r9, r0, #20
 8013e92:	f04f 0a00 	mov.w	sl, #0
 8013e96:	e7ae      	b.n	8013df6 <__gethex+0x202>
 8013e98:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013e9c:	42a8      	cmp	r0, r5
 8013e9e:	dd72      	ble.n	8013f86 <__gethex+0x392>
 8013ea0:	1b45      	subs	r5, r0, r5
 8013ea2:	42ae      	cmp	r6, r5
 8013ea4:	dc36      	bgt.n	8013f14 <__gethex+0x320>
 8013ea6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013eaa:	2b02      	cmp	r3, #2
 8013eac:	d02a      	beq.n	8013f04 <__gethex+0x310>
 8013eae:	2b03      	cmp	r3, #3
 8013eb0:	d02c      	beq.n	8013f0c <__gethex+0x318>
 8013eb2:	2b01      	cmp	r3, #1
 8013eb4:	d115      	bne.n	8013ee2 <__gethex+0x2ee>
 8013eb6:	42ae      	cmp	r6, r5
 8013eb8:	d113      	bne.n	8013ee2 <__gethex+0x2ee>
 8013eba:	2e01      	cmp	r6, #1
 8013ebc:	d10b      	bne.n	8013ed6 <__gethex+0x2e2>
 8013ebe:	9a04      	ldr	r2, [sp, #16]
 8013ec0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013ec4:	6013      	str	r3, [r2, #0]
 8013ec6:	2301      	movs	r3, #1
 8013ec8:	6123      	str	r3, [r4, #16]
 8013eca:	f8c9 3000 	str.w	r3, [r9]
 8013ece:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013ed0:	2762      	movs	r7, #98	; 0x62
 8013ed2:	601c      	str	r4, [r3, #0]
 8013ed4:	e723      	b.n	8013d1e <__gethex+0x12a>
 8013ed6:	1e71      	subs	r1, r6, #1
 8013ed8:	4620      	mov	r0, r4
 8013eda:	f000 fe59 	bl	8014b90 <__any_on>
 8013ede:	2800      	cmp	r0, #0
 8013ee0:	d1ed      	bne.n	8013ebe <__gethex+0x2ca>
 8013ee2:	ee18 0a10 	vmov	r0, s16
 8013ee6:	4621      	mov	r1, r4
 8013ee8:	f000 f9f8 	bl	80142dc <_Bfree>
 8013eec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013eee:	2300      	movs	r3, #0
 8013ef0:	6013      	str	r3, [r2, #0]
 8013ef2:	2750      	movs	r7, #80	; 0x50
 8013ef4:	e713      	b.n	8013d1e <__gethex+0x12a>
 8013ef6:	bf00      	nop
 8013ef8:	08029a04 	.word	0x08029a04
 8013efc:	08029989 	.word	0x08029989
 8013f00:	0802999a 	.word	0x0802999a
 8013f04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d1eb      	bne.n	8013ee2 <__gethex+0x2ee>
 8013f0a:	e7d8      	b.n	8013ebe <__gethex+0x2ca>
 8013f0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d1d5      	bne.n	8013ebe <__gethex+0x2ca>
 8013f12:	e7e6      	b.n	8013ee2 <__gethex+0x2ee>
 8013f14:	1e6f      	subs	r7, r5, #1
 8013f16:	f1ba 0f00 	cmp.w	sl, #0
 8013f1a:	d131      	bne.n	8013f80 <__gethex+0x38c>
 8013f1c:	b127      	cbz	r7, 8013f28 <__gethex+0x334>
 8013f1e:	4639      	mov	r1, r7
 8013f20:	4620      	mov	r0, r4
 8013f22:	f000 fe35 	bl	8014b90 <__any_on>
 8013f26:	4682      	mov	sl, r0
 8013f28:	117b      	asrs	r3, r7, #5
 8013f2a:	2101      	movs	r1, #1
 8013f2c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8013f30:	f007 071f 	and.w	r7, r7, #31
 8013f34:	fa01 f707 	lsl.w	r7, r1, r7
 8013f38:	421f      	tst	r7, r3
 8013f3a:	4629      	mov	r1, r5
 8013f3c:	4620      	mov	r0, r4
 8013f3e:	bf18      	it	ne
 8013f40:	f04a 0a02 	orrne.w	sl, sl, #2
 8013f44:	1b76      	subs	r6, r6, r5
 8013f46:	f7ff fded 	bl	8013b24 <rshift>
 8013f4a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013f4e:	2702      	movs	r7, #2
 8013f50:	f1ba 0f00 	cmp.w	sl, #0
 8013f54:	d048      	beq.n	8013fe8 <__gethex+0x3f4>
 8013f56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013f5a:	2b02      	cmp	r3, #2
 8013f5c:	d015      	beq.n	8013f8a <__gethex+0x396>
 8013f5e:	2b03      	cmp	r3, #3
 8013f60:	d017      	beq.n	8013f92 <__gethex+0x39e>
 8013f62:	2b01      	cmp	r3, #1
 8013f64:	d109      	bne.n	8013f7a <__gethex+0x386>
 8013f66:	f01a 0f02 	tst.w	sl, #2
 8013f6a:	d006      	beq.n	8013f7a <__gethex+0x386>
 8013f6c:	f8d9 0000 	ldr.w	r0, [r9]
 8013f70:	ea4a 0a00 	orr.w	sl, sl, r0
 8013f74:	f01a 0f01 	tst.w	sl, #1
 8013f78:	d10e      	bne.n	8013f98 <__gethex+0x3a4>
 8013f7a:	f047 0710 	orr.w	r7, r7, #16
 8013f7e:	e033      	b.n	8013fe8 <__gethex+0x3f4>
 8013f80:	f04f 0a01 	mov.w	sl, #1
 8013f84:	e7d0      	b.n	8013f28 <__gethex+0x334>
 8013f86:	2701      	movs	r7, #1
 8013f88:	e7e2      	b.n	8013f50 <__gethex+0x35c>
 8013f8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f8c:	f1c3 0301 	rsb	r3, r3, #1
 8013f90:	9315      	str	r3, [sp, #84]	; 0x54
 8013f92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d0f0      	beq.n	8013f7a <__gethex+0x386>
 8013f98:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013f9c:	f104 0314 	add.w	r3, r4, #20
 8013fa0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013fa4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013fa8:	f04f 0c00 	mov.w	ip, #0
 8013fac:	4618      	mov	r0, r3
 8013fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8013fb2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013fb6:	d01c      	beq.n	8013ff2 <__gethex+0x3fe>
 8013fb8:	3201      	adds	r2, #1
 8013fba:	6002      	str	r2, [r0, #0]
 8013fbc:	2f02      	cmp	r7, #2
 8013fbe:	f104 0314 	add.w	r3, r4, #20
 8013fc2:	d13f      	bne.n	8014044 <__gethex+0x450>
 8013fc4:	f8d8 2000 	ldr.w	r2, [r8]
 8013fc8:	3a01      	subs	r2, #1
 8013fca:	42b2      	cmp	r2, r6
 8013fcc:	d10a      	bne.n	8013fe4 <__gethex+0x3f0>
 8013fce:	1171      	asrs	r1, r6, #5
 8013fd0:	2201      	movs	r2, #1
 8013fd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013fd6:	f006 061f 	and.w	r6, r6, #31
 8013fda:	fa02 f606 	lsl.w	r6, r2, r6
 8013fde:	421e      	tst	r6, r3
 8013fe0:	bf18      	it	ne
 8013fe2:	4617      	movne	r7, r2
 8013fe4:	f047 0720 	orr.w	r7, r7, #32
 8013fe8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013fea:	601c      	str	r4, [r3, #0]
 8013fec:	9b04      	ldr	r3, [sp, #16]
 8013fee:	601d      	str	r5, [r3, #0]
 8013ff0:	e695      	b.n	8013d1e <__gethex+0x12a>
 8013ff2:	4299      	cmp	r1, r3
 8013ff4:	f843 cc04 	str.w	ip, [r3, #-4]
 8013ff8:	d8d8      	bhi.n	8013fac <__gethex+0x3b8>
 8013ffa:	68a3      	ldr	r3, [r4, #8]
 8013ffc:	459b      	cmp	fp, r3
 8013ffe:	db19      	blt.n	8014034 <__gethex+0x440>
 8014000:	6861      	ldr	r1, [r4, #4]
 8014002:	ee18 0a10 	vmov	r0, s16
 8014006:	3101      	adds	r1, #1
 8014008:	f000 f928 	bl	801425c <_Balloc>
 801400c:	4681      	mov	r9, r0
 801400e:	b918      	cbnz	r0, 8014018 <__gethex+0x424>
 8014010:	4b1a      	ldr	r3, [pc, #104]	; (801407c <__gethex+0x488>)
 8014012:	4602      	mov	r2, r0
 8014014:	2184      	movs	r1, #132	; 0x84
 8014016:	e6a8      	b.n	8013d6a <__gethex+0x176>
 8014018:	6922      	ldr	r2, [r4, #16]
 801401a:	3202      	adds	r2, #2
 801401c:	f104 010c 	add.w	r1, r4, #12
 8014020:	0092      	lsls	r2, r2, #2
 8014022:	300c      	adds	r0, #12
 8014024:	f000 f90c 	bl	8014240 <memcpy>
 8014028:	4621      	mov	r1, r4
 801402a:	ee18 0a10 	vmov	r0, s16
 801402e:	f000 f955 	bl	80142dc <_Bfree>
 8014032:	464c      	mov	r4, r9
 8014034:	6923      	ldr	r3, [r4, #16]
 8014036:	1c5a      	adds	r2, r3, #1
 8014038:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801403c:	6122      	str	r2, [r4, #16]
 801403e:	2201      	movs	r2, #1
 8014040:	615a      	str	r2, [r3, #20]
 8014042:	e7bb      	b.n	8013fbc <__gethex+0x3c8>
 8014044:	6922      	ldr	r2, [r4, #16]
 8014046:	455a      	cmp	r2, fp
 8014048:	dd0b      	ble.n	8014062 <__gethex+0x46e>
 801404a:	2101      	movs	r1, #1
 801404c:	4620      	mov	r0, r4
 801404e:	f7ff fd69 	bl	8013b24 <rshift>
 8014052:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014056:	3501      	adds	r5, #1
 8014058:	42ab      	cmp	r3, r5
 801405a:	f6ff aed0 	blt.w	8013dfe <__gethex+0x20a>
 801405e:	2701      	movs	r7, #1
 8014060:	e7c0      	b.n	8013fe4 <__gethex+0x3f0>
 8014062:	f016 061f 	ands.w	r6, r6, #31
 8014066:	d0fa      	beq.n	801405e <__gethex+0x46a>
 8014068:	449a      	add	sl, r3
 801406a:	f1c6 0620 	rsb	r6, r6, #32
 801406e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8014072:	f000 f9e9 	bl	8014448 <__hi0bits>
 8014076:	42b0      	cmp	r0, r6
 8014078:	dbe7      	blt.n	801404a <__gethex+0x456>
 801407a:	e7f0      	b.n	801405e <__gethex+0x46a>
 801407c:	08029989 	.word	0x08029989

08014080 <L_shift>:
 8014080:	f1c2 0208 	rsb	r2, r2, #8
 8014084:	0092      	lsls	r2, r2, #2
 8014086:	b570      	push	{r4, r5, r6, lr}
 8014088:	f1c2 0620 	rsb	r6, r2, #32
 801408c:	6843      	ldr	r3, [r0, #4]
 801408e:	6804      	ldr	r4, [r0, #0]
 8014090:	fa03 f506 	lsl.w	r5, r3, r6
 8014094:	432c      	orrs	r4, r5
 8014096:	40d3      	lsrs	r3, r2
 8014098:	6004      	str	r4, [r0, #0]
 801409a:	f840 3f04 	str.w	r3, [r0, #4]!
 801409e:	4288      	cmp	r0, r1
 80140a0:	d3f4      	bcc.n	801408c <L_shift+0xc>
 80140a2:	bd70      	pop	{r4, r5, r6, pc}

080140a4 <__match>:
 80140a4:	b530      	push	{r4, r5, lr}
 80140a6:	6803      	ldr	r3, [r0, #0]
 80140a8:	3301      	adds	r3, #1
 80140aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80140ae:	b914      	cbnz	r4, 80140b6 <__match+0x12>
 80140b0:	6003      	str	r3, [r0, #0]
 80140b2:	2001      	movs	r0, #1
 80140b4:	bd30      	pop	{r4, r5, pc}
 80140b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80140ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80140be:	2d19      	cmp	r5, #25
 80140c0:	bf98      	it	ls
 80140c2:	3220      	addls	r2, #32
 80140c4:	42a2      	cmp	r2, r4
 80140c6:	d0f0      	beq.n	80140aa <__match+0x6>
 80140c8:	2000      	movs	r0, #0
 80140ca:	e7f3      	b.n	80140b4 <__match+0x10>

080140cc <__hexnan>:
 80140cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140d0:	680b      	ldr	r3, [r1, #0]
 80140d2:	6801      	ldr	r1, [r0, #0]
 80140d4:	115e      	asrs	r6, r3, #5
 80140d6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80140da:	f013 031f 	ands.w	r3, r3, #31
 80140de:	b087      	sub	sp, #28
 80140e0:	bf18      	it	ne
 80140e2:	3604      	addne	r6, #4
 80140e4:	2500      	movs	r5, #0
 80140e6:	1f37      	subs	r7, r6, #4
 80140e8:	4682      	mov	sl, r0
 80140ea:	4690      	mov	r8, r2
 80140ec:	9301      	str	r3, [sp, #4]
 80140ee:	f846 5c04 	str.w	r5, [r6, #-4]
 80140f2:	46b9      	mov	r9, r7
 80140f4:	463c      	mov	r4, r7
 80140f6:	9502      	str	r5, [sp, #8]
 80140f8:	46ab      	mov	fp, r5
 80140fa:	784a      	ldrb	r2, [r1, #1]
 80140fc:	1c4b      	adds	r3, r1, #1
 80140fe:	9303      	str	r3, [sp, #12]
 8014100:	b342      	cbz	r2, 8014154 <__hexnan+0x88>
 8014102:	4610      	mov	r0, r2
 8014104:	9105      	str	r1, [sp, #20]
 8014106:	9204      	str	r2, [sp, #16]
 8014108:	f7ff fd5e 	bl	8013bc8 <__hexdig_fun>
 801410c:	2800      	cmp	r0, #0
 801410e:	d14f      	bne.n	80141b0 <__hexnan+0xe4>
 8014110:	9a04      	ldr	r2, [sp, #16]
 8014112:	9905      	ldr	r1, [sp, #20]
 8014114:	2a20      	cmp	r2, #32
 8014116:	d818      	bhi.n	801414a <__hexnan+0x7e>
 8014118:	9b02      	ldr	r3, [sp, #8]
 801411a:	459b      	cmp	fp, r3
 801411c:	dd13      	ble.n	8014146 <__hexnan+0x7a>
 801411e:	454c      	cmp	r4, r9
 8014120:	d206      	bcs.n	8014130 <__hexnan+0x64>
 8014122:	2d07      	cmp	r5, #7
 8014124:	dc04      	bgt.n	8014130 <__hexnan+0x64>
 8014126:	462a      	mov	r2, r5
 8014128:	4649      	mov	r1, r9
 801412a:	4620      	mov	r0, r4
 801412c:	f7ff ffa8 	bl	8014080 <L_shift>
 8014130:	4544      	cmp	r4, r8
 8014132:	d950      	bls.n	80141d6 <__hexnan+0x10a>
 8014134:	2300      	movs	r3, #0
 8014136:	f1a4 0904 	sub.w	r9, r4, #4
 801413a:	f844 3c04 	str.w	r3, [r4, #-4]
 801413e:	f8cd b008 	str.w	fp, [sp, #8]
 8014142:	464c      	mov	r4, r9
 8014144:	461d      	mov	r5, r3
 8014146:	9903      	ldr	r1, [sp, #12]
 8014148:	e7d7      	b.n	80140fa <__hexnan+0x2e>
 801414a:	2a29      	cmp	r2, #41	; 0x29
 801414c:	d156      	bne.n	80141fc <__hexnan+0x130>
 801414e:	3102      	adds	r1, #2
 8014150:	f8ca 1000 	str.w	r1, [sl]
 8014154:	f1bb 0f00 	cmp.w	fp, #0
 8014158:	d050      	beq.n	80141fc <__hexnan+0x130>
 801415a:	454c      	cmp	r4, r9
 801415c:	d206      	bcs.n	801416c <__hexnan+0xa0>
 801415e:	2d07      	cmp	r5, #7
 8014160:	dc04      	bgt.n	801416c <__hexnan+0xa0>
 8014162:	462a      	mov	r2, r5
 8014164:	4649      	mov	r1, r9
 8014166:	4620      	mov	r0, r4
 8014168:	f7ff ff8a 	bl	8014080 <L_shift>
 801416c:	4544      	cmp	r4, r8
 801416e:	d934      	bls.n	80141da <__hexnan+0x10e>
 8014170:	f1a8 0204 	sub.w	r2, r8, #4
 8014174:	4623      	mov	r3, r4
 8014176:	f853 1b04 	ldr.w	r1, [r3], #4
 801417a:	f842 1f04 	str.w	r1, [r2, #4]!
 801417e:	429f      	cmp	r7, r3
 8014180:	d2f9      	bcs.n	8014176 <__hexnan+0xaa>
 8014182:	1b3b      	subs	r3, r7, r4
 8014184:	f023 0303 	bic.w	r3, r3, #3
 8014188:	3304      	adds	r3, #4
 801418a:	3401      	adds	r4, #1
 801418c:	3e03      	subs	r6, #3
 801418e:	42b4      	cmp	r4, r6
 8014190:	bf88      	it	hi
 8014192:	2304      	movhi	r3, #4
 8014194:	4443      	add	r3, r8
 8014196:	2200      	movs	r2, #0
 8014198:	f843 2b04 	str.w	r2, [r3], #4
 801419c:	429f      	cmp	r7, r3
 801419e:	d2fb      	bcs.n	8014198 <__hexnan+0xcc>
 80141a0:	683b      	ldr	r3, [r7, #0]
 80141a2:	b91b      	cbnz	r3, 80141ac <__hexnan+0xe0>
 80141a4:	4547      	cmp	r7, r8
 80141a6:	d127      	bne.n	80141f8 <__hexnan+0x12c>
 80141a8:	2301      	movs	r3, #1
 80141aa:	603b      	str	r3, [r7, #0]
 80141ac:	2005      	movs	r0, #5
 80141ae:	e026      	b.n	80141fe <__hexnan+0x132>
 80141b0:	3501      	adds	r5, #1
 80141b2:	2d08      	cmp	r5, #8
 80141b4:	f10b 0b01 	add.w	fp, fp, #1
 80141b8:	dd06      	ble.n	80141c8 <__hexnan+0xfc>
 80141ba:	4544      	cmp	r4, r8
 80141bc:	d9c3      	bls.n	8014146 <__hexnan+0x7a>
 80141be:	2300      	movs	r3, #0
 80141c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80141c4:	2501      	movs	r5, #1
 80141c6:	3c04      	subs	r4, #4
 80141c8:	6822      	ldr	r2, [r4, #0]
 80141ca:	f000 000f 	and.w	r0, r0, #15
 80141ce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80141d2:	6022      	str	r2, [r4, #0]
 80141d4:	e7b7      	b.n	8014146 <__hexnan+0x7a>
 80141d6:	2508      	movs	r5, #8
 80141d8:	e7b5      	b.n	8014146 <__hexnan+0x7a>
 80141da:	9b01      	ldr	r3, [sp, #4]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d0df      	beq.n	80141a0 <__hexnan+0xd4>
 80141e0:	f04f 32ff 	mov.w	r2, #4294967295
 80141e4:	f1c3 0320 	rsb	r3, r3, #32
 80141e8:	fa22 f303 	lsr.w	r3, r2, r3
 80141ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80141f0:	401a      	ands	r2, r3
 80141f2:	f846 2c04 	str.w	r2, [r6, #-4]
 80141f6:	e7d3      	b.n	80141a0 <__hexnan+0xd4>
 80141f8:	3f04      	subs	r7, #4
 80141fa:	e7d1      	b.n	80141a0 <__hexnan+0xd4>
 80141fc:	2004      	movs	r0, #4
 80141fe:	b007      	add	sp, #28
 8014200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014204 <_localeconv_r>:
 8014204:	4800      	ldr	r0, [pc, #0]	; (8014208 <_localeconv_r+0x4>)
 8014206:	4770      	bx	lr
 8014208:	20000198 	.word	0x20000198

0801420c <malloc>:
 801420c:	4b02      	ldr	r3, [pc, #8]	; (8014218 <malloc+0xc>)
 801420e:	4601      	mov	r1, r0
 8014210:	6818      	ldr	r0, [r3, #0]
 8014212:	f000 bd3d 	b.w	8014c90 <_malloc_r>
 8014216:	bf00      	nop
 8014218:	20000040 	.word	0x20000040

0801421c <__ascii_mbtowc>:
 801421c:	b082      	sub	sp, #8
 801421e:	b901      	cbnz	r1, 8014222 <__ascii_mbtowc+0x6>
 8014220:	a901      	add	r1, sp, #4
 8014222:	b142      	cbz	r2, 8014236 <__ascii_mbtowc+0x1a>
 8014224:	b14b      	cbz	r3, 801423a <__ascii_mbtowc+0x1e>
 8014226:	7813      	ldrb	r3, [r2, #0]
 8014228:	600b      	str	r3, [r1, #0]
 801422a:	7812      	ldrb	r2, [r2, #0]
 801422c:	1e10      	subs	r0, r2, #0
 801422e:	bf18      	it	ne
 8014230:	2001      	movne	r0, #1
 8014232:	b002      	add	sp, #8
 8014234:	4770      	bx	lr
 8014236:	4610      	mov	r0, r2
 8014238:	e7fb      	b.n	8014232 <__ascii_mbtowc+0x16>
 801423a:	f06f 0001 	mvn.w	r0, #1
 801423e:	e7f8      	b.n	8014232 <__ascii_mbtowc+0x16>

08014240 <memcpy>:
 8014240:	440a      	add	r2, r1
 8014242:	4291      	cmp	r1, r2
 8014244:	f100 33ff 	add.w	r3, r0, #4294967295
 8014248:	d100      	bne.n	801424c <memcpy+0xc>
 801424a:	4770      	bx	lr
 801424c:	b510      	push	{r4, lr}
 801424e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014252:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014256:	4291      	cmp	r1, r2
 8014258:	d1f9      	bne.n	801424e <memcpy+0xe>
 801425a:	bd10      	pop	{r4, pc}

0801425c <_Balloc>:
 801425c:	b570      	push	{r4, r5, r6, lr}
 801425e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014260:	4604      	mov	r4, r0
 8014262:	460d      	mov	r5, r1
 8014264:	b976      	cbnz	r6, 8014284 <_Balloc+0x28>
 8014266:	2010      	movs	r0, #16
 8014268:	f7ff ffd0 	bl	801420c <malloc>
 801426c:	4602      	mov	r2, r0
 801426e:	6260      	str	r0, [r4, #36]	; 0x24
 8014270:	b920      	cbnz	r0, 801427c <_Balloc+0x20>
 8014272:	4b18      	ldr	r3, [pc, #96]	; (80142d4 <_Balloc+0x78>)
 8014274:	4818      	ldr	r0, [pc, #96]	; (80142d8 <_Balloc+0x7c>)
 8014276:	2166      	movs	r1, #102	; 0x66
 8014278:	f7fe fdaa 	bl	8012dd0 <__assert_func>
 801427c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014280:	6006      	str	r6, [r0, #0]
 8014282:	60c6      	str	r6, [r0, #12]
 8014284:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014286:	68f3      	ldr	r3, [r6, #12]
 8014288:	b183      	cbz	r3, 80142ac <_Balloc+0x50>
 801428a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801428c:	68db      	ldr	r3, [r3, #12]
 801428e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014292:	b9b8      	cbnz	r0, 80142c4 <_Balloc+0x68>
 8014294:	2101      	movs	r1, #1
 8014296:	fa01 f605 	lsl.w	r6, r1, r5
 801429a:	1d72      	adds	r2, r6, #5
 801429c:	0092      	lsls	r2, r2, #2
 801429e:	4620      	mov	r0, r4
 80142a0:	f000 fc97 	bl	8014bd2 <_calloc_r>
 80142a4:	b160      	cbz	r0, 80142c0 <_Balloc+0x64>
 80142a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80142aa:	e00e      	b.n	80142ca <_Balloc+0x6e>
 80142ac:	2221      	movs	r2, #33	; 0x21
 80142ae:	2104      	movs	r1, #4
 80142b0:	4620      	mov	r0, r4
 80142b2:	f000 fc8e 	bl	8014bd2 <_calloc_r>
 80142b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80142b8:	60f0      	str	r0, [r6, #12]
 80142ba:	68db      	ldr	r3, [r3, #12]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d1e4      	bne.n	801428a <_Balloc+0x2e>
 80142c0:	2000      	movs	r0, #0
 80142c2:	bd70      	pop	{r4, r5, r6, pc}
 80142c4:	6802      	ldr	r2, [r0, #0]
 80142c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80142ca:	2300      	movs	r3, #0
 80142cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80142d0:	e7f7      	b.n	80142c2 <_Balloc+0x66>
 80142d2:	bf00      	nop
 80142d4:	08029768 	.word	0x08029768
 80142d8:	08029a18 	.word	0x08029a18

080142dc <_Bfree>:
 80142dc:	b570      	push	{r4, r5, r6, lr}
 80142de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80142e0:	4605      	mov	r5, r0
 80142e2:	460c      	mov	r4, r1
 80142e4:	b976      	cbnz	r6, 8014304 <_Bfree+0x28>
 80142e6:	2010      	movs	r0, #16
 80142e8:	f7ff ff90 	bl	801420c <malloc>
 80142ec:	4602      	mov	r2, r0
 80142ee:	6268      	str	r0, [r5, #36]	; 0x24
 80142f0:	b920      	cbnz	r0, 80142fc <_Bfree+0x20>
 80142f2:	4b09      	ldr	r3, [pc, #36]	; (8014318 <_Bfree+0x3c>)
 80142f4:	4809      	ldr	r0, [pc, #36]	; (801431c <_Bfree+0x40>)
 80142f6:	218a      	movs	r1, #138	; 0x8a
 80142f8:	f7fe fd6a 	bl	8012dd0 <__assert_func>
 80142fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014300:	6006      	str	r6, [r0, #0]
 8014302:	60c6      	str	r6, [r0, #12]
 8014304:	b13c      	cbz	r4, 8014316 <_Bfree+0x3a>
 8014306:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014308:	6862      	ldr	r2, [r4, #4]
 801430a:	68db      	ldr	r3, [r3, #12]
 801430c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014310:	6021      	str	r1, [r4, #0]
 8014312:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014316:	bd70      	pop	{r4, r5, r6, pc}
 8014318:	08029768 	.word	0x08029768
 801431c:	08029a18 	.word	0x08029a18

08014320 <__multadd>:
 8014320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014324:	690e      	ldr	r6, [r1, #16]
 8014326:	4607      	mov	r7, r0
 8014328:	4698      	mov	r8, r3
 801432a:	460c      	mov	r4, r1
 801432c:	f101 0014 	add.w	r0, r1, #20
 8014330:	2300      	movs	r3, #0
 8014332:	6805      	ldr	r5, [r0, #0]
 8014334:	b2a9      	uxth	r1, r5
 8014336:	fb02 8101 	mla	r1, r2, r1, r8
 801433a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801433e:	0c2d      	lsrs	r5, r5, #16
 8014340:	fb02 c505 	mla	r5, r2, r5, ip
 8014344:	b289      	uxth	r1, r1
 8014346:	3301      	adds	r3, #1
 8014348:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801434c:	429e      	cmp	r6, r3
 801434e:	f840 1b04 	str.w	r1, [r0], #4
 8014352:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8014356:	dcec      	bgt.n	8014332 <__multadd+0x12>
 8014358:	f1b8 0f00 	cmp.w	r8, #0
 801435c:	d022      	beq.n	80143a4 <__multadd+0x84>
 801435e:	68a3      	ldr	r3, [r4, #8]
 8014360:	42b3      	cmp	r3, r6
 8014362:	dc19      	bgt.n	8014398 <__multadd+0x78>
 8014364:	6861      	ldr	r1, [r4, #4]
 8014366:	4638      	mov	r0, r7
 8014368:	3101      	adds	r1, #1
 801436a:	f7ff ff77 	bl	801425c <_Balloc>
 801436e:	4605      	mov	r5, r0
 8014370:	b928      	cbnz	r0, 801437e <__multadd+0x5e>
 8014372:	4602      	mov	r2, r0
 8014374:	4b0d      	ldr	r3, [pc, #52]	; (80143ac <__multadd+0x8c>)
 8014376:	480e      	ldr	r0, [pc, #56]	; (80143b0 <__multadd+0x90>)
 8014378:	21b5      	movs	r1, #181	; 0xb5
 801437a:	f7fe fd29 	bl	8012dd0 <__assert_func>
 801437e:	6922      	ldr	r2, [r4, #16]
 8014380:	3202      	adds	r2, #2
 8014382:	f104 010c 	add.w	r1, r4, #12
 8014386:	0092      	lsls	r2, r2, #2
 8014388:	300c      	adds	r0, #12
 801438a:	f7ff ff59 	bl	8014240 <memcpy>
 801438e:	4621      	mov	r1, r4
 8014390:	4638      	mov	r0, r7
 8014392:	f7ff ffa3 	bl	80142dc <_Bfree>
 8014396:	462c      	mov	r4, r5
 8014398:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801439c:	3601      	adds	r6, #1
 801439e:	f8c3 8014 	str.w	r8, [r3, #20]
 80143a2:	6126      	str	r6, [r4, #16]
 80143a4:	4620      	mov	r0, r4
 80143a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143aa:	bf00      	nop
 80143ac:	08029989 	.word	0x08029989
 80143b0:	08029a18 	.word	0x08029a18

080143b4 <__s2b>:
 80143b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143b8:	460c      	mov	r4, r1
 80143ba:	4615      	mov	r5, r2
 80143bc:	461f      	mov	r7, r3
 80143be:	2209      	movs	r2, #9
 80143c0:	3308      	adds	r3, #8
 80143c2:	4606      	mov	r6, r0
 80143c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80143c8:	2100      	movs	r1, #0
 80143ca:	2201      	movs	r2, #1
 80143cc:	429a      	cmp	r2, r3
 80143ce:	db09      	blt.n	80143e4 <__s2b+0x30>
 80143d0:	4630      	mov	r0, r6
 80143d2:	f7ff ff43 	bl	801425c <_Balloc>
 80143d6:	b940      	cbnz	r0, 80143ea <__s2b+0x36>
 80143d8:	4602      	mov	r2, r0
 80143da:	4b19      	ldr	r3, [pc, #100]	; (8014440 <__s2b+0x8c>)
 80143dc:	4819      	ldr	r0, [pc, #100]	; (8014444 <__s2b+0x90>)
 80143de:	21ce      	movs	r1, #206	; 0xce
 80143e0:	f7fe fcf6 	bl	8012dd0 <__assert_func>
 80143e4:	0052      	lsls	r2, r2, #1
 80143e6:	3101      	adds	r1, #1
 80143e8:	e7f0      	b.n	80143cc <__s2b+0x18>
 80143ea:	9b08      	ldr	r3, [sp, #32]
 80143ec:	6143      	str	r3, [r0, #20]
 80143ee:	2d09      	cmp	r5, #9
 80143f0:	f04f 0301 	mov.w	r3, #1
 80143f4:	6103      	str	r3, [r0, #16]
 80143f6:	dd16      	ble.n	8014426 <__s2b+0x72>
 80143f8:	f104 0909 	add.w	r9, r4, #9
 80143fc:	46c8      	mov	r8, r9
 80143fe:	442c      	add	r4, r5
 8014400:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014404:	4601      	mov	r1, r0
 8014406:	3b30      	subs	r3, #48	; 0x30
 8014408:	220a      	movs	r2, #10
 801440a:	4630      	mov	r0, r6
 801440c:	f7ff ff88 	bl	8014320 <__multadd>
 8014410:	45a0      	cmp	r8, r4
 8014412:	d1f5      	bne.n	8014400 <__s2b+0x4c>
 8014414:	f1a5 0408 	sub.w	r4, r5, #8
 8014418:	444c      	add	r4, r9
 801441a:	1b2d      	subs	r5, r5, r4
 801441c:	1963      	adds	r3, r4, r5
 801441e:	42bb      	cmp	r3, r7
 8014420:	db04      	blt.n	801442c <__s2b+0x78>
 8014422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014426:	340a      	adds	r4, #10
 8014428:	2509      	movs	r5, #9
 801442a:	e7f6      	b.n	801441a <__s2b+0x66>
 801442c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014430:	4601      	mov	r1, r0
 8014432:	3b30      	subs	r3, #48	; 0x30
 8014434:	220a      	movs	r2, #10
 8014436:	4630      	mov	r0, r6
 8014438:	f7ff ff72 	bl	8014320 <__multadd>
 801443c:	e7ee      	b.n	801441c <__s2b+0x68>
 801443e:	bf00      	nop
 8014440:	08029989 	.word	0x08029989
 8014444:	08029a18 	.word	0x08029a18

08014448 <__hi0bits>:
 8014448:	0c03      	lsrs	r3, r0, #16
 801444a:	041b      	lsls	r3, r3, #16
 801444c:	b9d3      	cbnz	r3, 8014484 <__hi0bits+0x3c>
 801444e:	0400      	lsls	r0, r0, #16
 8014450:	2310      	movs	r3, #16
 8014452:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014456:	bf04      	itt	eq
 8014458:	0200      	lsleq	r0, r0, #8
 801445a:	3308      	addeq	r3, #8
 801445c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014460:	bf04      	itt	eq
 8014462:	0100      	lsleq	r0, r0, #4
 8014464:	3304      	addeq	r3, #4
 8014466:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801446a:	bf04      	itt	eq
 801446c:	0080      	lsleq	r0, r0, #2
 801446e:	3302      	addeq	r3, #2
 8014470:	2800      	cmp	r0, #0
 8014472:	db05      	blt.n	8014480 <__hi0bits+0x38>
 8014474:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014478:	f103 0301 	add.w	r3, r3, #1
 801447c:	bf08      	it	eq
 801447e:	2320      	moveq	r3, #32
 8014480:	4618      	mov	r0, r3
 8014482:	4770      	bx	lr
 8014484:	2300      	movs	r3, #0
 8014486:	e7e4      	b.n	8014452 <__hi0bits+0xa>

08014488 <__lo0bits>:
 8014488:	6803      	ldr	r3, [r0, #0]
 801448a:	f013 0207 	ands.w	r2, r3, #7
 801448e:	4601      	mov	r1, r0
 8014490:	d00b      	beq.n	80144aa <__lo0bits+0x22>
 8014492:	07da      	lsls	r2, r3, #31
 8014494:	d424      	bmi.n	80144e0 <__lo0bits+0x58>
 8014496:	0798      	lsls	r0, r3, #30
 8014498:	bf49      	itett	mi
 801449a:	085b      	lsrmi	r3, r3, #1
 801449c:	089b      	lsrpl	r3, r3, #2
 801449e:	2001      	movmi	r0, #1
 80144a0:	600b      	strmi	r3, [r1, #0]
 80144a2:	bf5c      	itt	pl
 80144a4:	600b      	strpl	r3, [r1, #0]
 80144a6:	2002      	movpl	r0, #2
 80144a8:	4770      	bx	lr
 80144aa:	b298      	uxth	r0, r3
 80144ac:	b9b0      	cbnz	r0, 80144dc <__lo0bits+0x54>
 80144ae:	0c1b      	lsrs	r3, r3, #16
 80144b0:	2010      	movs	r0, #16
 80144b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80144b6:	bf04      	itt	eq
 80144b8:	0a1b      	lsreq	r3, r3, #8
 80144ba:	3008      	addeq	r0, #8
 80144bc:	071a      	lsls	r2, r3, #28
 80144be:	bf04      	itt	eq
 80144c0:	091b      	lsreq	r3, r3, #4
 80144c2:	3004      	addeq	r0, #4
 80144c4:	079a      	lsls	r2, r3, #30
 80144c6:	bf04      	itt	eq
 80144c8:	089b      	lsreq	r3, r3, #2
 80144ca:	3002      	addeq	r0, #2
 80144cc:	07da      	lsls	r2, r3, #31
 80144ce:	d403      	bmi.n	80144d8 <__lo0bits+0x50>
 80144d0:	085b      	lsrs	r3, r3, #1
 80144d2:	f100 0001 	add.w	r0, r0, #1
 80144d6:	d005      	beq.n	80144e4 <__lo0bits+0x5c>
 80144d8:	600b      	str	r3, [r1, #0]
 80144da:	4770      	bx	lr
 80144dc:	4610      	mov	r0, r2
 80144de:	e7e8      	b.n	80144b2 <__lo0bits+0x2a>
 80144e0:	2000      	movs	r0, #0
 80144e2:	4770      	bx	lr
 80144e4:	2020      	movs	r0, #32
 80144e6:	4770      	bx	lr

080144e8 <__i2b>:
 80144e8:	b510      	push	{r4, lr}
 80144ea:	460c      	mov	r4, r1
 80144ec:	2101      	movs	r1, #1
 80144ee:	f7ff feb5 	bl	801425c <_Balloc>
 80144f2:	4602      	mov	r2, r0
 80144f4:	b928      	cbnz	r0, 8014502 <__i2b+0x1a>
 80144f6:	4b05      	ldr	r3, [pc, #20]	; (801450c <__i2b+0x24>)
 80144f8:	4805      	ldr	r0, [pc, #20]	; (8014510 <__i2b+0x28>)
 80144fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80144fe:	f7fe fc67 	bl	8012dd0 <__assert_func>
 8014502:	2301      	movs	r3, #1
 8014504:	6144      	str	r4, [r0, #20]
 8014506:	6103      	str	r3, [r0, #16]
 8014508:	bd10      	pop	{r4, pc}
 801450a:	bf00      	nop
 801450c:	08029989 	.word	0x08029989
 8014510:	08029a18 	.word	0x08029a18

08014514 <__multiply>:
 8014514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014518:	4614      	mov	r4, r2
 801451a:	690a      	ldr	r2, [r1, #16]
 801451c:	6923      	ldr	r3, [r4, #16]
 801451e:	429a      	cmp	r2, r3
 8014520:	bfb8      	it	lt
 8014522:	460b      	movlt	r3, r1
 8014524:	460d      	mov	r5, r1
 8014526:	bfbc      	itt	lt
 8014528:	4625      	movlt	r5, r4
 801452a:	461c      	movlt	r4, r3
 801452c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014530:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014534:	68ab      	ldr	r3, [r5, #8]
 8014536:	6869      	ldr	r1, [r5, #4]
 8014538:	eb0a 0709 	add.w	r7, sl, r9
 801453c:	42bb      	cmp	r3, r7
 801453e:	b085      	sub	sp, #20
 8014540:	bfb8      	it	lt
 8014542:	3101      	addlt	r1, #1
 8014544:	f7ff fe8a 	bl	801425c <_Balloc>
 8014548:	b930      	cbnz	r0, 8014558 <__multiply+0x44>
 801454a:	4602      	mov	r2, r0
 801454c:	4b42      	ldr	r3, [pc, #264]	; (8014658 <__multiply+0x144>)
 801454e:	4843      	ldr	r0, [pc, #268]	; (801465c <__multiply+0x148>)
 8014550:	f240 115d 	movw	r1, #349	; 0x15d
 8014554:	f7fe fc3c 	bl	8012dd0 <__assert_func>
 8014558:	f100 0614 	add.w	r6, r0, #20
 801455c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014560:	4633      	mov	r3, r6
 8014562:	2200      	movs	r2, #0
 8014564:	4543      	cmp	r3, r8
 8014566:	d31e      	bcc.n	80145a6 <__multiply+0x92>
 8014568:	f105 0c14 	add.w	ip, r5, #20
 801456c:	f104 0314 	add.w	r3, r4, #20
 8014570:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8014574:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014578:	9202      	str	r2, [sp, #8]
 801457a:	ebac 0205 	sub.w	r2, ip, r5
 801457e:	3a15      	subs	r2, #21
 8014580:	f022 0203 	bic.w	r2, r2, #3
 8014584:	3204      	adds	r2, #4
 8014586:	f105 0115 	add.w	r1, r5, #21
 801458a:	458c      	cmp	ip, r1
 801458c:	bf38      	it	cc
 801458e:	2204      	movcc	r2, #4
 8014590:	9201      	str	r2, [sp, #4]
 8014592:	9a02      	ldr	r2, [sp, #8]
 8014594:	9303      	str	r3, [sp, #12]
 8014596:	429a      	cmp	r2, r3
 8014598:	d808      	bhi.n	80145ac <__multiply+0x98>
 801459a:	2f00      	cmp	r7, #0
 801459c:	dc55      	bgt.n	801464a <__multiply+0x136>
 801459e:	6107      	str	r7, [r0, #16]
 80145a0:	b005      	add	sp, #20
 80145a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145a6:	f843 2b04 	str.w	r2, [r3], #4
 80145aa:	e7db      	b.n	8014564 <__multiply+0x50>
 80145ac:	f8b3 a000 	ldrh.w	sl, [r3]
 80145b0:	f1ba 0f00 	cmp.w	sl, #0
 80145b4:	d020      	beq.n	80145f8 <__multiply+0xe4>
 80145b6:	f105 0e14 	add.w	lr, r5, #20
 80145ba:	46b1      	mov	r9, r6
 80145bc:	2200      	movs	r2, #0
 80145be:	f85e 4b04 	ldr.w	r4, [lr], #4
 80145c2:	f8d9 b000 	ldr.w	fp, [r9]
 80145c6:	b2a1      	uxth	r1, r4
 80145c8:	fa1f fb8b 	uxth.w	fp, fp
 80145cc:	fb0a b101 	mla	r1, sl, r1, fp
 80145d0:	4411      	add	r1, r2
 80145d2:	f8d9 2000 	ldr.w	r2, [r9]
 80145d6:	0c24      	lsrs	r4, r4, #16
 80145d8:	0c12      	lsrs	r2, r2, #16
 80145da:	fb0a 2404 	mla	r4, sl, r4, r2
 80145de:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80145e2:	b289      	uxth	r1, r1
 80145e4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80145e8:	45f4      	cmp	ip, lr
 80145ea:	f849 1b04 	str.w	r1, [r9], #4
 80145ee:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80145f2:	d8e4      	bhi.n	80145be <__multiply+0xaa>
 80145f4:	9901      	ldr	r1, [sp, #4]
 80145f6:	5072      	str	r2, [r6, r1]
 80145f8:	9a03      	ldr	r2, [sp, #12]
 80145fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80145fe:	3304      	adds	r3, #4
 8014600:	f1b9 0f00 	cmp.w	r9, #0
 8014604:	d01f      	beq.n	8014646 <__multiply+0x132>
 8014606:	6834      	ldr	r4, [r6, #0]
 8014608:	f105 0114 	add.w	r1, r5, #20
 801460c:	46b6      	mov	lr, r6
 801460e:	f04f 0a00 	mov.w	sl, #0
 8014612:	880a      	ldrh	r2, [r1, #0]
 8014614:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014618:	fb09 b202 	mla	r2, r9, r2, fp
 801461c:	4492      	add	sl, r2
 801461e:	b2a4      	uxth	r4, r4
 8014620:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014624:	f84e 4b04 	str.w	r4, [lr], #4
 8014628:	f851 4b04 	ldr.w	r4, [r1], #4
 801462c:	f8be 2000 	ldrh.w	r2, [lr]
 8014630:	0c24      	lsrs	r4, r4, #16
 8014632:	fb09 2404 	mla	r4, r9, r4, r2
 8014636:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801463a:	458c      	cmp	ip, r1
 801463c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014640:	d8e7      	bhi.n	8014612 <__multiply+0xfe>
 8014642:	9a01      	ldr	r2, [sp, #4]
 8014644:	50b4      	str	r4, [r6, r2]
 8014646:	3604      	adds	r6, #4
 8014648:	e7a3      	b.n	8014592 <__multiply+0x7e>
 801464a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801464e:	2b00      	cmp	r3, #0
 8014650:	d1a5      	bne.n	801459e <__multiply+0x8a>
 8014652:	3f01      	subs	r7, #1
 8014654:	e7a1      	b.n	801459a <__multiply+0x86>
 8014656:	bf00      	nop
 8014658:	08029989 	.word	0x08029989
 801465c:	08029a18 	.word	0x08029a18

08014660 <__pow5mult>:
 8014660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014664:	4615      	mov	r5, r2
 8014666:	f012 0203 	ands.w	r2, r2, #3
 801466a:	4606      	mov	r6, r0
 801466c:	460f      	mov	r7, r1
 801466e:	d007      	beq.n	8014680 <__pow5mult+0x20>
 8014670:	4c25      	ldr	r4, [pc, #148]	; (8014708 <__pow5mult+0xa8>)
 8014672:	3a01      	subs	r2, #1
 8014674:	2300      	movs	r3, #0
 8014676:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801467a:	f7ff fe51 	bl	8014320 <__multadd>
 801467e:	4607      	mov	r7, r0
 8014680:	10ad      	asrs	r5, r5, #2
 8014682:	d03d      	beq.n	8014700 <__pow5mult+0xa0>
 8014684:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014686:	b97c      	cbnz	r4, 80146a8 <__pow5mult+0x48>
 8014688:	2010      	movs	r0, #16
 801468a:	f7ff fdbf 	bl	801420c <malloc>
 801468e:	4602      	mov	r2, r0
 8014690:	6270      	str	r0, [r6, #36]	; 0x24
 8014692:	b928      	cbnz	r0, 80146a0 <__pow5mult+0x40>
 8014694:	4b1d      	ldr	r3, [pc, #116]	; (801470c <__pow5mult+0xac>)
 8014696:	481e      	ldr	r0, [pc, #120]	; (8014710 <__pow5mult+0xb0>)
 8014698:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801469c:	f7fe fb98 	bl	8012dd0 <__assert_func>
 80146a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80146a4:	6004      	str	r4, [r0, #0]
 80146a6:	60c4      	str	r4, [r0, #12]
 80146a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80146ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80146b0:	b94c      	cbnz	r4, 80146c6 <__pow5mult+0x66>
 80146b2:	f240 2171 	movw	r1, #625	; 0x271
 80146b6:	4630      	mov	r0, r6
 80146b8:	f7ff ff16 	bl	80144e8 <__i2b>
 80146bc:	2300      	movs	r3, #0
 80146be:	f8c8 0008 	str.w	r0, [r8, #8]
 80146c2:	4604      	mov	r4, r0
 80146c4:	6003      	str	r3, [r0, #0]
 80146c6:	f04f 0900 	mov.w	r9, #0
 80146ca:	07eb      	lsls	r3, r5, #31
 80146cc:	d50a      	bpl.n	80146e4 <__pow5mult+0x84>
 80146ce:	4639      	mov	r1, r7
 80146d0:	4622      	mov	r2, r4
 80146d2:	4630      	mov	r0, r6
 80146d4:	f7ff ff1e 	bl	8014514 <__multiply>
 80146d8:	4639      	mov	r1, r7
 80146da:	4680      	mov	r8, r0
 80146dc:	4630      	mov	r0, r6
 80146de:	f7ff fdfd 	bl	80142dc <_Bfree>
 80146e2:	4647      	mov	r7, r8
 80146e4:	106d      	asrs	r5, r5, #1
 80146e6:	d00b      	beq.n	8014700 <__pow5mult+0xa0>
 80146e8:	6820      	ldr	r0, [r4, #0]
 80146ea:	b938      	cbnz	r0, 80146fc <__pow5mult+0x9c>
 80146ec:	4622      	mov	r2, r4
 80146ee:	4621      	mov	r1, r4
 80146f0:	4630      	mov	r0, r6
 80146f2:	f7ff ff0f 	bl	8014514 <__multiply>
 80146f6:	6020      	str	r0, [r4, #0]
 80146f8:	f8c0 9000 	str.w	r9, [r0]
 80146fc:	4604      	mov	r4, r0
 80146fe:	e7e4      	b.n	80146ca <__pow5mult+0x6a>
 8014700:	4638      	mov	r0, r7
 8014702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014706:	bf00      	nop
 8014708:	08029b68 	.word	0x08029b68
 801470c:	08029768 	.word	0x08029768
 8014710:	08029a18 	.word	0x08029a18

08014714 <__lshift>:
 8014714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014718:	460c      	mov	r4, r1
 801471a:	6849      	ldr	r1, [r1, #4]
 801471c:	6923      	ldr	r3, [r4, #16]
 801471e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014722:	68a3      	ldr	r3, [r4, #8]
 8014724:	4607      	mov	r7, r0
 8014726:	4691      	mov	r9, r2
 8014728:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801472c:	f108 0601 	add.w	r6, r8, #1
 8014730:	42b3      	cmp	r3, r6
 8014732:	db0b      	blt.n	801474c <__lshift+0x38>
 8014734:	4638      	mov	r0, r7
 8014736:	f7ff fd91 	bl	801425c <_Balloc>
 801473a:	4605      	mov	r5, r0
 801473c:	b948      	cbnz	r0, 8014752 <__lshift+0x3e>
 801473e:	4602      	mov	r2, r0
 8014740:	4b28      	ldr	r3, [pc, #160]	; (80147e4 <__lshift+0xd0>)
 8014742:	4829      	ldr	r0, [pc, #164]	; (80147e8 <__lshift+0xd4>)
 8014744:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014748:	f7fe fb42 	bl	8012dd0 <__assert_func>
 801474c:	3101      	adds	r1, #1
 801474e:	005b      	lsls	r3, r3, #1
 8014750:	e7ee      	b.n	8014730 <__lshift+0x1c>
 8014752:	2300      	movs	r3, #0
 8014754:	f100 0114 	add.w	r1, r0, #20
 8014758:	f100 0210 	add.w	r2, r0, #16
 801475c:	4618      	mov	r0, r3
 801475e:	4553      	cmp	r3, sl
 8014760:	db33      	blt.n	80147ca <__lshift+0xb6>
 8014762:	6920      	ldr	r0, [r4, #16]
 8014764:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014768:	f104 0314 	add.w	r3, r4, #20
 801476c:	f019 091f 	ands.w	r9, r9, #31
 8014770:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014774:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014778:	d02b      	beq.n	80147d2 <__lshift+0xbe>
 801477a:	f1c9 0e20 	rsb	lr, r9, #32
 801477e:	468a      	mov	sl, r1
 8014780:	2200      	movs	r2, #0
 8014782:	6818      	ldr	r0, [r3, #0]
 8014784:	fa00 f009 	lsl.w	r0, r0, r9
 8014788:	4302      	orrs	r2, r0
 801478a:	f84a 2b04 	str.w	r2, [sl], #4
 801478e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014792:	459c      	cmp	ip, r3
 8014794:	fa22 f20e 	lsr.w	r2, r2, lr
 8014798:	d8f3      	bhi.n	8014782 <__lshift+0x6e>
 801479a:	ebac 0304 	sub.w	r3, ip, r4
 801479e:	3b15      	subs	r3, #21
 80147a0:	f023 0303 	bic.w	r3, r3, #3
 80147a4:	3304      	adds	r3, #4
 80147a6:	f104 0015 	add.w	r0, r4, #21
 80147aa:	4584      	cmp	ip, r0
 80147ac:	bf38      	it	cc
 80147ae:	2304      	movcc	r3, #4
 80147b0:	50ca      	str	r2, [r1, r3]
 80147b2:	b10a      	cbz	r2, 80147b8 <__lshift+0xa4>
 80147b4:	f108 0602 	add.w	r6, r8, #2
 80147b8:	3e01      	subs	r6, #1
 80147ba:	4638      	mov	r0, r7
 80147bc:	612e      	str	r6, [r5, #16]
 80147be:	4621      	mov	r1, r4
 80147c0:	f7ff fd8c 	bl	80142dc <_Bfree>
 80147c4:	4628      	mov	r0, r5
 80147c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80147ce:	3301      	adds	r3, #1
 80147d0:	e7c5      	b.n	801475e <__lshift+0x4a>
 80147d2:	3904      	subs	r1, #4
 80147d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80147d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80147dc:	459c      	cmp	ip, r3
 80147de:	d8f9      	bhi.n	80147d4 <__lshift+0xc0>
 80147e0:	e7ea      	b.n	80147b8 <__lshift+0xa4>
 80147e2:	bf00      	nop
 80147e4:	08029989 	.word	0x08029989
 80147e8:	08029a18 	.word	0x08029a18

080147ec <__mcmp>:
 80147ec:	b530      	push	{r4, r5, lr}
 80147ee:	6902      	ldr	r2, [r0, #16]
 80147f0:	690c      	ldr	r4, [r1, #16]
 80147f2:	1b12      	subs	r2, r2, r4
 80147f4:	d10e      	bne.n	8014814 <__mcmp+0x28>
 80147f6:	f100 0314 	add.w	r3, r0, #20
 80147fa:	3114      	adds	r1, #20
 80147fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014800:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014804:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014808:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801480c:	42a5      	cmp	r5, r4
 801480e:	d003      	beq.n	8014818 <__mcmp+0x2c>
 8014810:	d305      	bcc.n	801481e <__mcmp+0x32>
 8014812:	2201      	movs	r2, #1
 8014814:	4610      	mov	r0, r2
 8014816:	bd30      	pop	{r4, r5, pc}
 8014818:	4283      	cmp	r3, r0
 801481a:	d3f3      	bcc.n	8014804 <__mcmp+0x18>
 801481c:	e7fa      	b.n	8014814 <__mcmp+0x28>
 801481e:	f04f 32ff 	mov.w	r2, #4294967295
 8014822:	e7f7      	b.n	8014814 <__mcmp+0x28>

08014824 <__mdiff>:
 8014824:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014828:	460c      	mov	r4, r1
 801482a:	4606      	mov	r6, r0
 801482c:	4611      	mov	r1, r2
 801482e:	4620      	mov	r0, r4
 8014830:	4617      	mov	r7, r2
 8014832:	f7ff ffdb 	bl	80147ec <__mcmp>
 8014836:	1e05      	subs	r5, r0, #0
 8014838:	d110      	bne.n	801485c <__mdiff+0x38>
 801483a:	4629      	mov	r1, r5
 801483c:	4630      	mov	r0, r6
 801483e:	f7ff fd0d 	bl	801425c <_Balloc>
 8014842:	b930      	cbnz	r0, 8014852 <__mdiff+0x2e>
 8014844:	4b39      	ldr	r3, [pc, #228]	; (801492c <__mdiff+0x108>)
 8014846:	4602      	mov	r2, r0
 8014848:	f240 2132 	movw	r1, #562	; 0x232
 801484c:	4838      	ldr	r0, [pc, #224]	; (8014930 <__mdiff+0x10c>)
 801484e:	f7fe fabf 	bl	8012dd0 <__assert_func>
 8014852:	2301      	movs	r3, #1
 8014854:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014858:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801485c:	bfa4      	itt	ge
 801485e:	463b      	movge	r3, r7
 8014860:	4627      	movge	r7, r4
 8014862:	4630      	mov	r0, r6
 8014864:	6879      	ldr	r1, [r7, #4]
 8014866:	bfa6      	itte	ge
 8014868:	461c      	movge	r4, r3
 801486a:	2500      	movge	r5, #0
 801486c:	2501      	movlt	r5, #1
 801486e:	f7ff fcf5 	bl	801425c <_Balloc>
 8014872:	b920      	cbnz	r0, 801487e <__mdiff+0x5a>
 8014874:	4b2d      	ldr	r3, [pc, #180]	; (801492c <__mdiff+0x108>)
 8014876:	4602      	mov	r2, r0
 8014878:	f44f 7110 	mov.w	r1, #576	; 0x240
 801487c:	e7e6      	b.n	801484c <__mdiff+0x28>
 801487e:	693e      	ldr	r6, [r7, #16]
 8014880:	60c5      	str	r5, [r0, #12]
 8014882:	6925      	ldr	r5, [r4, #16]
 8014884:	f107 0114 	add.w	r1, r7, #20
 8014888:	f104 0914 	add.w	r9, r4, #20
 801488c:	f100 0e14 	add.w	lr, r0, #20
 8014890:	f107 0210 	add.w	r2, r7, #16
 8014894:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014898:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801489c:	46f2      	mov	sl, lr
 801489e:	2700      	movs	r7, #0
 80148a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80148a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80148a8:	fa1f f883 	uxth.w	r8, r3
 80148ac:	fa17 f78b 	uxtah	r7, r7, fp
 80148b0:	0c1b      	lsrs	r3, r3, #16
 80148b2:	eba7 0808 	sub.w	r8, r7, r8
 80148b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80148ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80148be:	fa1f f888 	uxth.w	r8, r8
 80148c2:	141f      	asrs	r7, r3, #16
 80148c4:	454d      	cmp	r5, r9
 80148c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80148ca:	f84a 3b04 	str.w	r3, [sl], #4
 80148ce:	d8e7      	bhi.n	80148a0 <__mdiff+0x7c>
 80148d0:	1b2b      	subs	r3, r5, r4
 80148d2:	3b15      	subs	r3, #21
 80148d4:	f023 0303 	bic.w	r3, r3, #3
 80148d8:	3304      	adds	r3, #4
 80148da:	3415      	adds	r4, #21
 80148dc:	42a5      	cmp	r5, r4
 80148de:	bf38      	it	cc
 80148e0:	2304      	movcc	r3, #4
 80148e2:	4419      	add	r1, r3
 80148e4:	4473      	add	r3, lr
 80148e6:	469e      	mov	lr, r3
 80148e8:	460d      	mov	r5, r1
 80148ea:	4565      	cmp	r5, ip
 80148ec:	d30e      	bcc.n	801490c <__mdiff+0xe8>
 80148ee:	f10c 0203 	add.w	r2, ip, #3
 80148f2:	1a52      	subs	r2, r2, r1
 80148f4:	f022 0203 	bic.w	r2, r2, #3
 80148f8:	3903      	subs	r1, #3
 80148fa:	458c      	cmp	ip, r1
 80148fc:	bf38      	it	cc
 80148fe:	2200      	movcc	r2, #0
 8014900:	441a      	add	r2, r3
 8014902:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014906:	b17b      	cbz	r3, 8014928 <__mdiff+0x104>
 8014908:	6106      	str	r6, [r0, #16]
 801490a:	e7a5      	b.n	8014858 <__mdiff+0x34>
 801490c:	f855 8b04 	ldr.w	r8, [r5], #4
 8014910:	fa17 f488 	uxtah	r4, r7, r8
 8014914:	1422      	asrs	r2, r4, #16
 8014916:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801491a:	b2a4      	uxth	r4, r4
 801491c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014920:	f84e 4b04 	str.w	r4, [lr], #4
 8014924:	1417      	asrs	r7, r2, #16
 8014926:	e7e0      	b.n	80148ea <__mdiff+0xc6>
 8014928:	3e01      	subs	r6, #1
 801492a:	e7ea      	b.n	8014902 <__mdiff+0xde>
 801492c:	08029989 	.word	0x08029989
 8014930:	08029a18 	.word	0x08029a18

08014934 <__ulp>:
 8014934:	b082      	sub	sp, #8
 8014936:	ed8d 0b00 	vstr	d0, [sp]
 801493a:	9b01      	ldr	r3, [sp, #4]
 801493c:	4912      	ldr	r1, [pc, #72]	; (8014988 <__ulp+0x54>)
 801493e:	4019      	ands	r1, r3
 8014940:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8014944:	2900      	cmp	r1, #0
 8014946:	dd05      	ble.n	8014954 <__ulp+0x20>
 8014948:	2200      	movs	r2, #0
 801494a:	460b      	mov	r3, r1
 801494c:	ec43 2b10 	vmov	d0, r2, r3
 8014950:	b002      	add	sp, #8
 8014952:	4770      	bx	lr
 8014954:	4249      	negs	r1, r1
 8014956:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801495a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801495e:	f04f 0200 	mov.w	r2, #0
 8014962:	f04f 0300 	mov.w	r3, #0
 8014966:	da04      	bge.n	8014972 <__ulp+0x3e>
 8014968:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801496c:	fa41 f300 	asr.w	r3, r1, r0
 8014970:	e7ec      	b.n	801494c <__ulp+0x18>
 8014972:	f1a0 0114 	sub.w	r1, r0, #20
 8014976:	291e      	cmp	r1, #30
 8014978:	bfda      	itte	le
 801497a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801497e:	fa20 f101 	lsrle.w	r1, r0, r1
 8014982:	2101      	movgt	r1, #1
 8014984:	460a      	mov	r2, r1
 8014986:	e7e1      	b.n	801494c <__ulp+0x18>
 8014988:	7ff00000 	.word	0x7ff00000

0801498c <__b2d>:
 801498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801498e:	6905      	ldr	r5, [r0, #16]
 8014990:	f100 0714 	add.w	r7, r0, #20
 8014994:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014998:	1f2e      	subs	r6, r5, #4
 801499a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801499e:	4620      	mov	r0, r4
 80149a0:	f7ff fd52 	bl	8014448 <__hi0bits>
 80149a4:	f1c0 0320 	rsb	r3, r0, #32
 80149a8:	280a      	cmp	r0, #10
 80149aa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8014a28 <__b2d+0x9c>
 80149ae:	600b      	str	r3, [r1, #0]
 80149b0:	dc14      	bgt.n	80149dc <__b2d+0x50>
 80149b2:	f1c0 0e0b 	rsb	lr, r0, #11
 80149b6:	fa24 f10e 	lsr.w	r1, r4, lr
 80149ba:	42b7      	cmp	r7, r6
 80149bc:	ea41 030c 	orr.w	r3, r1, ip
 80149c0:	bf34      	ite	cc
 80149c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80149c6:	2100      	movcs	r1, #0
 80149c8:	3015      	adds	r0, #21
 80149ca:	fa04 f000 	lsl.w	r0, r4, r0
 80149ce:	fa21 f10e 	lsr.w	r1, r1, lr
 80149d2:	ea40 0201 	orr.w	r2, r0, r1
 80149d6:	ec43 2b10 	vmov	d0, r2, r3
 80149da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149dc:	42b7      	cmp	r7, r6
 80149de:	bf3a      	itte	cc
 80149e0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80149e4:	f1a5 0608 	subcc.w	r6, r5, #8
 80149e8:	2100      	movcs	r1, #0
 80149ea:	380b      	subs	r0, #11
 80149ec:	d017      	beq.n	8014a1e <__b2d+0x92>
 80149ee:	f1c0 0c20 	rsb	ip, r0, #32
 80149f2:	fa04 f500 	lsl.w	r5, r4, r0
 80149f6:	42be      	cmp	r6, r7
 80149f8:	fa21 f40c 	lsr.w	r4, r1, ip
 80149fc:	ea45 0504 	orr.w	r5, r5, r4
 8014a00:	bf8c      	ite	hi
 8014a02:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8014a06:	2400      	movls	r4, #0
 8014a08:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8014a0c:	fa01 f000 	lsl.w	r0, r1, r0
 8014a10:	fa24 f40c 	lsr.w	r4, r4, ip
 8014a14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014a18:	ea40 0204 	orr.w	r2, r0, r4
 8014a1c:	e7db      	b.n	80149d6 <__b2d+0x4a>
 8014a1e:	ea44 030c 	orr.w	r3, r4, ip
 8014a22:	460a      	mov	r2, r1
 8014a24:	e7d7      	b.n	80149d6 <__b2d+0x4a>
 8014a26:	bf00      	nop
 8014a28:	3ff00000 	.word	0x3ff00000

08014a2c <__d2b>:
 8014a2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014a30:	4689      	mov	r9, r1
 8014a32:	2101      	movs	r1, #1
 8014a34:	ec57 6b10 	vmov	r6, r7, d0
 8014a38:	4690      	mov	r8, r2
 8014a3a:	f7ff fc0f 	bl	801425c <_Balloc>
 8014a3e:	4604      	mov	r4, r0
 8014a40:	b930      	cbnz	r0, 8014a50 <__d2b+0x24>
 8014a42:	4602      	mov	r2, r0
 8014a44:	4b25      	ldr	r3, [pc, #148]	; (8014adc <__d2b+0xb0>)
 8014a46:	4826      	ldr	r0, [pc, #152]	; (8014ae0 <__d2b+0xb4>)
 8014a48:	f240 310a 	movw	r1, #778	; 0x30a
 8014a4c:	f7fe f9c0 	bl	8012dd0 <__assert_func>
 8014a50:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014a54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014a58:	bb35      	cbnz	r5, 8014aa8 <__d2b+0x7c>
 8014a5a:	2e00      	cmp	r6, #0
 8014a5c:	9301      	str	r3, [sp, #4]
 8014a5e:	d028      	beq.n	8014ab2 <__d2b+0x86>
 8014a60:	4668      	mov	r0, sp
 8014a62:	9600      	str	r6, [sp, #0]
 8014a64:	f7ff fd10 	bl	8014488 <__lo0bits>
 8014a68:	9900      	ldr	r1, [sp, #0]
 8014a6a:	b300      	cbz	r0, 8014aae <__d2b+0x82>
 8014a6c:	9a01      	ldr	r2, [sp, #4]
 8014a6e:	f1c0 0320 	rsb	r3, r0, #32
 8014a72:	fa02 f303 	lsl.w	r3, r2, r3
 8014a76:	430b      	orrs	r3, r1
 8014a78:	40c2      	lsrs	r2, r0
 8014a7a:	6163      	str	r3, [r4, #20]
 8014a7c:	9201      	str	r2, [sp, #4]
 8014a7e:	9b01      	ldr	r3, [sp, #4]
 8014a80:	61a3      	str	r3, [r4, #24]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	bf14      	ite	ne
 8014a86:	2202      	movne	r2, #2
 8014a88:	2201      	moveq	r2, #1
 8014a8a:	6122      	str	r2, [r4, #16]
 8014a8c:	b1d5      	cbz	r5, 8014ac4 <__d2b+0x98>
 8014a8e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014a92:	4405      	add	r5, r0
 8014a94:	f8c9 5000 	str.w	r5, [r9]
 8014a98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014a9c:	f8c8 0000 	str.w	r0, [r8]
 8014aa0:	4620      	mov	r0, r4
 8014aa2:	b003      	add	sp, #12
 8014aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014aa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014aac:	e7d5      	b.n	8014a5a <__d2b+0x2e>
 8014aae:	6161      	str	r1, [r4, #20]
 8014ab0:	e7e5      	b.n	8014a7e <__d2b+0x52>
 8014ab2:	a801      	add	r0, sp, #4
 8014ab4:	f7ff fce8 	bl	8014488 <__lo0bits>
 8014ab8:	9b01      	ldr	r3, [sp, #4]
 8014aba:	6163      	str	r3, [r4, #20]
 8014abc:	2201      	movs	r2, #1
 8014abe:	6122      	str	r2, [r4, #16]
 8014ac0:	3020      	adds	r0, #32
 8014ac2:	e7e3      	b.n	8014a8c <__d2b+0x60>
 8014ac4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014ac8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014acc:	f8c9 0000 	str.w	r0, [r9]
 8014ad0:	6918      	ldr	r0, [r3, #16]
 8014ad2:	f7ff fcb9 	bl	8014448 <__hi0bits>
 8014ad6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014ada:	e7df      	b.n	8014a9c <__d2b+0x70>
 8014adc:	08029989 	.word	0x08029989
 8014ae0:	08029a18 	.word	0x08029a18

08014ae4 <__ratio>:
 8014ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ae8:	4688      	mov	r8, r1
 8014aea:	4669      	mov	r1, sp
 8014aec:	4681      	mov	r9, r0
 8014aee:	f7ff ff4d 	bl	801498c <__b2d>
 8014af2:	a901      	add	r1, sp, #4
 8014af4:	4640      	mov	r0, r8
 8014af6:	ec55 4b10 	vmov	r4, r5, d0
 8014afa:	f7ff ff47 	bl	801498c <__b2d>
 8014afe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014b02:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014b06:	eba3 0c02 	sub.w	ip, r3, r2
 8014b0a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014b0e:	1a9b      	subs	r3, r3, r2
 8014b10:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014b14:	ec51 0b10 	vmov	r0, r1, d0
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	bfd6      	itet	le
 8014b1c:	460a      	movle	r2, r1
 8014b1e:	462a      	movgt	r2, r5
 8014b20:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014b24:	468b      	mov	fp, r1
 8014b26:	462f      	mov	r7, r5
 8014b28:	bfd4      	ite	le
 8014b2a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014b2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014b32:	4620      	mov	r0, r4
 8014b34:	ee10 2a10 	vmov	r2, s0
 8014b38:	465b      	mov	r3, fp
 8014b3a:	4639      	mov	r1, r7
 8014b3c:	f7eb fe9e 	bl	800087c <__aeabi_ddiv>
 8014b40:	ec41 0b10 	vmov	d0, r0, r1
 8014b44:	b003      	add	sp, #12
 8014b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014b4a <__copybits>:
 8014b4a:	3901      	subs	r1, #1
 8014b4c:	b570      	push	{r4, r5, r6, lr}
 8014b4e:	1149      	asrs	r1, r1, #5
 8014b50:	6914      	ldr	r4, [r2, #16]
 8014b52:	3101      	adds	r1, #1
 8014b54:	f102 0314 	add.w	r3, r2, #20
 8014b58:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014b5c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014b60:	1f05      	subs	r5, r0, #4
 8014b62:	42a3      	cmp	r3, r4
 8014b64:	d30c      	bcc.n	8014b80 <__copybits+0x36>
 8014b66:	1aa3      	subs	r3, r4, r2
 8014b68:	3b11      	subs	r3, #17
 8014b6a:	f023 0303 	bic.w	r3, r3, #3
 8014b6e:	3211      	adds	r2, #17
 8014b70:	42a2      	cmp	r2, r4
 8014b72:	bf88      	it	hi
 8014b74:	2300      	movhi	r3, #0
 8014b76:	4418      	add	r0, r3
 8014b78:	2300      	movs	r3, #0
 8014b7a:	4288      	cmp	r0, r1
 8014b7c:	d305      	bcc.n	8014b8a <__copybits+0x40>
 8014b7e:	bd70      	pop	{r4, r5, r6, pc}
 8014b80:	f853 6b04 	ldr.w	r6, [r3], #4
 8014b84:	f845 6f04 	str.w	r6, [r5, #4]!
 8014b88:	e7eb      	b.n	8014b62 <__copybits+0x18>
 8014b8a:	f840 3b04 	str.w	r3, [r0], #4
 8014b8e:	e7f4      	b.n	8014b7a <__copybits+0x30>

08014b90 <__any_on>:
 8014b90:	f100 0214 	add.w	r2, r0, #20
 8014b94:	6900      	ldr	r0, [r0, #16]
 8014b96:	114b      	asrs	r3, r1, #5
 8014b98:	4298      	cmp	r0, r3
 8014b9a:	b510      	push	{r4, lr}
 8014b9c:	db11      	blt.n	8014bc2 <__any_on+0x32>
 8014b9e:	dd0a      	ble.n	8014bb6 <__any_on+0x26>
 8014ba0:	f011 011f 	ands.w	r1, r1, #31
 8014ba4:	d007      	beq.n	8014bb6 <__any_on+0x26>
 8014ba6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014baa:	fa24 f001 	lsr.w	r0, r4, r1
 8014bae:	fa00 f101 	lsl.w	r1, r0, r1
 8014bb2:	428c      	cmp	r4, r1
 8014bb4:	d10b      	bne.n	8014bce <__any_on+0x3e>
 8014bb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014bba:	4293      	cmp	r3, r2
 8014bbc:	d803      	bhi.n	8014bc6 <__any_on+0x36>
 8014bbe:	2000      	movs	r0, #0
 8014bc0:	bd10      	pop	{r4, pc}
 8014bc2:	4603      	mov	r3, r0
 8014bc4:	e7f7      	b.n	8014bb6 <__any_on+0x26>
 8014bc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014bca:	2900      	cmp	r1, #0
 8014bcc:	d0f5      	beq.n	8014bba <__any_on+0x2a>
 8014bce:	2001      	movs	r0, #1
 8014bd0:	e7f6      	b.n	8014bc0 <__any_on+0x30>

08014bd2 <_calloc_r>:
 8014bd2:	b513      	push	{r0, r1, r4, lr}
 8014bd4:	434a      	muls	r2, r1
 8014bd6:	4611      	mov	r1, r2
 8014bd8:	9201      	str	r2, [sp, #4]
 8014bda:	f000 f859 	bl	8014c90 <_malloc_r>
 8014bde:	4604      	mov	r4, r0
 8014be0:	b118      	cbz	r0, 8014bea <_calloc_r+0x18>
 8014be2:	9a01      	ldr	r2, [sp, #4]
 8014be4:	2100      	movs	r1, #0
 8014be6:	f7fc fb27 	bl	8011238 <memset>
 8014bea:	4620      	mov	r0, r4
 8014bec:	b002      	add	sp, #8
 8014bee:	bd10      	pop	{r4, pc}

08014bf0 <_free_r>:
 8014bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014bf2:	2900      	cmp	r1, #0
 8014bf4:	d048      	beq.n	8014c88 <_free_r+0x98>
 8014bf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014bfa:	9001      	str	r0, [sp, #4]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	f1a1 0404 	sub.w	r4, r1, #4
 8014c02:	bfb8      	it	lt
 8014c04:	18e4      	addlt	r4, r4, r3
 8014c06:	f000 fe8b 	bl	8015920 <__malloc_lock>
 8014c0a:	4a20      	ldr	r2, [pc, #128]	; (8014c8c <_free_r+0x9c>)
 8014c0c:	9801      	ldr	r0, [sp, #4]
 8014c0e:	6813      	ldr	r3, [r2, #0]
 8014c10:	4615      	mov	r5, r2
 8014c12:	b933      	cbnz	r3, 8014c22 <_free_r+0x32>
 8014c14:	6063      	str	r3, [r4, #4]
 8014c16:	6014      	str	r4, [r2, #0]
 8014c18:	b003      	add	sp, #12
 8014c1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c1e:	f000 be85 	b.w	801592c <__malloc_unlock>
 8014c22:	42a3      	cmp	r3, r4
 8014c24:	d90b      	bls.n	8014c3e <_free_r+0x4e>
 8014c26:	6821      	ldr	r1, [r4, #0]
 8014c28:	1862      	adds	r2, r4, r1
 8014c2a:	4293      	cmp	r3, r2
 8014c2c:	bf04      	itt	eq
 8014c2e:	681a      	ldreq	r2, [r3, #0]
 8014c30:	685b      	ldreq	r3, [r3, #4]
 8014c32:	6063      	str	r3, [r4, #4]
 8014c34:	bf04      	itt	eq
 8014c36:	1852      	addeq	r2, r2, r1
 8014c38:	6022      	streq	r2, [r4, #0]
 8014c3a:	602c      	str	r4, [r5, #0]
 8014c3c:	e7ec      	b.n	8014c18 <_free_r+0x28>
 8014c3e:	461a      	mov	r2, r3
 8014c40:	685b      	ldr	r3, [r3, #4]
 8014c42:	b10b      	cbz	r3, 8014c48 <_free_r+0x58>
 8014c44:	42a3      	cmp	r3, r4
 8014c46:	d9fa      	bls.n	8014c3e <_free_r+0x4e>
 8014c48:	6811      	ldr	r1, [r2, #0]
 8014c4a:	1855      	adds	r5, r2, r1
 8014c4c:	42a5      	cmp	r5, r4
 8014c4e:	d10b      	bne.n	8014c68 <_free_r+0x78>
 8014c50:	6824      	ldr	r4, [r4, #0]
 8014c52:	4421      	add	r1, r4
 8014c54:	1854      	adds	r4, r2, r1
 8014c56:	42a3      	cmp	r3, r4
 8014c58:	6011      	str	r1, [r2, #0]
 8014c5a:	d1dd      	bne.n	8014c18 <_free_r+0x28>
 8014c5c:	681c      	ldr	r4, [r3, #0]
 8014c5e:	685b      	ldr	r3, [r3, #4]
 8014c60:	6053      	str	r3, [r2, #4]
 8014c62:	4421      	add	r1, r4
 8014c64:	6011      	str	r1, [r2, #0]
 8014c66:	e7d7      	b.n	8014c18 <_free_r+0x28>
 8014c68:	d902      	bls.n	8014c70 <_free_r+0x80>
 8014c6a:	230c      	movs	r3, #12
 8014c6c:	6003      	str	r3, [r0, #0]
 8014c6e:	e7d3      	b.n	8014c18 <_free_r+0x28>
 8014c70:	6825      	ldr	r5, [r4, #0]
 8014c72:	1961      	adds	r1, r4, r5
 8014c74:	428b      	cmp	r3, r1
 8014c76:	bf04      	itt	eq
 8014c78:	6819      	ldreq	r1, [r3, #0]
 8014c7a:	685b      	ldreq	r3, [r3, #4]
 8014c7c:	6063      	str	r3, [r4, #4]
 8014c7e:	bf04      	itt	eq
 8014c80:	1949      	addeq	r1, r1, r5
 8014c82:	6021      	streq	r1, [r4, #0]
 8014c84:	6054      	str	r4, [r2, #4]
 8014c86:	e7c7      	b.n	8014c18 <_free_r+0x28>
 8014c88:	b003      	add	sp, #12
 8014c8a:	bd30      	pop	{r4, r5, pc}
 8014c8c:	200002b8 	.word	0x200002b8

08014c90 <_malloc_r>:
 8014c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c92:	1ccd      	adds	r5, r1, #3
 8014c94:	f025 0503 	bic.w	r5, r5, #3
 8014c98:	3508      	adds	r5, #8
 8014c9a:	2d0c      	cmp	r5, #12
 8014c9c:	bf38      	it	cc
 8014c9e:	250c      	movcc	r5, #12
 8014ca0:	2d00      	cmp	r5, #0
 8014ca2:	4606      	mov	r6, r0
 8014ca4:	db01      	blt.n	8014caa <_malloc_r+0x1a>
 8014ca6:	42a9      	cmp	r1, r5
 8014ca8:	d903      	bls.n	8014cb2 <_malloc_r+0x22>
 8014caa:	230c      	movs	r3, #12
 8014cac:	6033      	str	r3, [r6, #0]
 8014cae:	2000      	movs	r0, #0
 8014cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cb2:	f000 fe35 	bl	8015920 <__malloc_lock>
 8014cb6:	4921      	ldr	r1, [pc, #132]	; (8014d3c <_malloc_r+0xac>)
 8014cb8:	680a      	ldr	r2, [r1, #0]
 8014cba:	4614      	mov	r4, r2
 8014cbc:	b99c      	cbnz	r4, 8014ce6 <_malloc_r+0x56>
 8014cbe:	4f20      	ldr	r7, [pc, #128]	; (8014d40 <_malloc_r+0xb0>)
 8014cc0:	683b      	ldr	r3, [r7, #0]
 8014cc2:	b923      	cbnz	r3, 8014cce <_malloc_r+0x3e>
 8014cc4:	4621      	mov	r1, r4
 8014cc6:	4630      	mov	r0, r6
 8014cc8:	f000 fafa 	bl	80152c0 <_sbrk_r>
 8014ccc:	6038      	str	r0, [r7, #0]
 8014cce:	4629      	mov	r1, r5
 8014cd0:	4630      	mov	r0, r6
 8014cd2:	f000 faf5 	bl	80152c0 <_sbrk_r>
 8014cd6:	1c43      	adds	r3, r0, #1
 8014cd8:	d123      	bne.n	8014d22 <_malloc_r+0x92>
 8014cda:	230c      	movs	r3, #12
 8014cdc:	6033      	str	r3, [r6, #0]
 8014cde:	4630      	mov	r0, r6
 8014ce0:	f000 fe24 	bl	801592c <__malloc_unlock>
 8014ce4:	e7e3      	b.n	8014cae <_malloc_r+0x1e>
 8014ce6:	6823      	ldr	r3, [r4, #0]
 8014ce8:	1b5b      	subs	r3, r3, r5
 8014cea:	d417      	bmi.n	8014d1c <_malloc_r+0x8c>
 8014cec:	2b0b      	cmp	r3, #11
 8014cee:	d903      	bls.n	8014cf8 <_malloc_r+0x68>
 8014cf0:	6023      	str	r3, [r4, #0]
 8014cf2:	441c      	add	r4, r3
 8014cf4:	6025      	str	r5, [r4, #0]
 8014cf6:	e004      	b.n	8014d02 <_malloc_r+0x72>
 8014cf8:	6863      	ldr	r3, [r4, #4]
 8014cfa:	42a2      	cmp	r2, r4
 8014cfc:	bf0c      	ite	eq
 8014cfe:	600b      	streq	r3, [r1, #0]
 8014d00:	6053      	strne	r3, [r2, #4]
 8014d02:	4630      	mov	r0, r6
 8014d04:	f000 fe12 	bl	801592c <__malloc_unlock>
 8014d08:	f104 000b 	add.w	r0, r4, #11
 8014d0c:	1d23      	adds	r3, r4, #4
 8014d0e:	f020 0007 	bic.w	r0, r0, #7
 8014d12:	1ac2      	subs	r2, r0, r3
 8014d14:	d0cc      	beq.n	8014cb0 <_malloc_r+0x20>
 8014d16:	1a1b      	subs	r3, r3, r0
 8014d18:	50a3      	str	r3, [r4, r2]
 8014d1a:	e7c9      	b.n	8014cb0 <_malloc_r+0x20>
 8014d1c:	4622      	mov	r2, r4
 8014d1e:	6864      	ldr	r4, [r4, #4]
 8014d20:	e7cc      	b.n	8014cbc <_malloc_r+0x2c>
 8014d22:	1cc4      	adds	r4, r0, #3
 8014d24:	f024 0403 	bic.w	r4, r4, #3
 8014d28:	42a0      	cmp	r0, r4
 8014d2a:	d0e3      	beq.n	8014cf4 <_malloc_r+0x64>
 8014d2c:	1a21      	subs	r1, r4, r0
 8014d2e:	4630      	mov	r0, r6
 8014d30:	f000 fac6 	bl	80152c0 <_sbrk_r>
 8014d34:	3001      	adds	r0, #1
 8014d36:	d1dd      	bne.n	8014cf4 <_malloc_r+0x64>
 8014d38:	e7cf      	b.n	8014cda <_malloc_r+0x4a>
 8014d3a:	bf00      	nop
 8014d3c:	200002b8 	.word	0x200002b8
 8014d40:	200002bc 	.word	0x200002bc

08014d44 <__ssputs_r>:
 8014d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d48:	688e      	ldr	r6, [r1, #8]
 8014d4a:	429e      	cmp	r6, r3
 8014d4c:	4682      	mov	sl, r0
 8014d4e:	460c      	mov	r4, r1
 8014d50:	4690      	mov	r8, r2
 8014d52:	461f      	mov	r7, r3
 8014d54:	d838      	bhi.n	8014dc8 <__ssputs_r+0x84>
 8014d56:	898a      	ldrh	r2, [r1, #12]
 8014d58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014d5c:	d032      	beq.n	8014dc4 <__ssputs_r+0x80>
 8014d5e:	6825      	ldr	r5, [r4, #0]
 8014d60:	6909      	ldr	r1, [r1, #16]
 8014d62:	eba5 0901 	sub.w	r9, r5, r1
 8014d66:	6965      	ldr	r5, [r4, #20]
 8014d68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014d6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014d70:	3301      	adds	r3, #1
 8014d72:	444b      	add	r3, r9
 8014d74:	106d      	asrs	r5, r5, #1
 8014d76:	429d      	cmp	r5, r3
 8014d78:	bf38      	it	cc
 8014d7a:	461d      	movcc	r5, r3
 8014d7c:	0553      	lsls	r3, r2, #21
 8014d7e:	d531      	bpl.n	8014de4 <__ssputs_r+0xa0>
 8014d80:	4629      	mov	r1, r5
 8014d82:	f7ff ff85 	bl	8014c90 <_malloc_r>
 8014d86:	4606      	mov	r6, r0
 8014d88:	b950      	cbnz	r0, 8014da0 <__ssputs_r+0x5c>
 8014d8a:	230c      	movs	r3, #12
 8014d8c:	f8ca 3000 	str.w	r3, [sl]
 8014d90:	89a3      	ldrh	r3, [r4, #12]
 8014d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d96:	81a3      	strh	r3, [r4, #12]
 8014d98:	f04f 30ff 	mov.w	r0, #4294967295
 8014d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014da0:	6921      	ldr	r1, [r4, #16]
 8014da2:	464a      	mov	r2, r9
 8014da4:	f7ff fa4c 	bl	8014240 <memcpy>
 8014da8:	89a3      	ldrh	r3, [r4, #12]
 8014daa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014db2:	81a3      	strh	r3, [r4, #12]
 8014db4:	6126      	str	r6, [r4, #16]
 8014db6:	6165      	str	r5, [r4, #20]
 8014db8:	444e      	add	r6, r9
 8014dba:	eba5 0509 	sub.w	r5, r5, r9
 8014dbe:	6026      	str	r6, [r4, #0]
 8014dc0:	60a5      	str	r5, [r4, #8]
 8014dc2:	463e      	mov	r6, r7
 8014dc4:	42be      	cmp	r6, r7
 8014dc6:	d900      	bls.n	8014dca <__ssputs_r+0x86>
 8014dc8:	463e      	mov	r6, r7
 8014dca:	4632      	mov	r2, r6
 8014dcc:	6820      	ldr	r0, [r4, #0]
 8014dce:	4641      	mov	r1, r8
 8014dd0:	f000 fd8c 	bl	80158ec <memmove>
 8014dd4:	68a3      	ldr	r3, [r4, #8]
 8014dd6:	6822      	ldr	r2, [r4, #0]
 8014dd8:	1b9b      	subs	r3, r3, r6
 8014dda:	4432      	add	r2, r6
 8014ddc:	60a3      	str	r3, [r4, #8]
 8014dde:	6022      	str	r2, [r4, #0]
 8014de0:	2000      	movs	r0, #0
 8014de2:	e7db      	b.n	8014d9c <__ssputs_r+0x58>
 8014de4:	462a      	mov	r2, r5
 8014de6:	f000 fda7 	bl	8015938 <_realloc_r>
 8014dea:	4606      	mov	r6, r0
 8014dec:	2800      	cmp	r0, #0
 8014dee:	d1e1      	bne.n	8014db4 <__ssputs_r+0x70>
 8014df0:	6921      	ldr	r1, [r4, #16]
 8014df2:	4650      	mov	r0, sl
 8014df4:	f7ff fefc 	bl	8014bf0 <_free_r>
 8014df8:	e7c7      	b.n	8014d8a <__ssputs_r+0x46>
	...

08014dfc <_svfiprintf_r>:
 8014dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e00:	4698      	mov	r8, r3
 8014e02:	898b      	ldrh	r3, [r1, #12]
 8014e04:	061b      	lsls	r3, r3, #24
 8014e06:	b09d      	sub	sp, #116	; 0x74
 8014e08:	4607      	mov	r7, r0
 8014e0a:	460d      	mov	r5, r1
 8014e0c:	4614      	mov	r4, r2
 8014e0e:	d50e      	bpl.n	8014e2e <_svfiprintf_r+0x32>
 8014e10:	690b      	ldr	r3, [r1, #16]
 8014e12:	b963      	cbnz	r3, 8014e2e <_svfiprintf_r+0x32>
 8014e14:	2140      	movs	r1, #64	; 0x40
 8014e16:	f7ff ff3b 	bl	8014c90 <_malloc_r>
 8014e1a:	6028      	str	r0, [r5, #0]
 8014e1c:	6128      	str	r0, [r5, #16]
 8014e1e:	b920      	cbnz	r0, 8014e2a <_svfiprintf_r+0x2e>
 8014e20:	230c      	movs	r3, #12
 8014e22:	603b      	str	r3, [r7, #0]
 8014e24:	f04f 30ff 	mov.w	r0, #4294967295
 8014e28:	e0d1      	b.n	8014fce <_svfiprintf_r+0x1d2>
 8014e2a:	2340      	movs	r3, #64	; 0x40
 8014e2c:	616b      	str	r3, [r5, #20]
 8014e2e:	2300      	movs	r3, #0
 8014e30:	9309      	str	r3, [sp, #36]	; 0x24
 8014e32:	2320      	movs	r3, #32
 8014e34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014e38:	f8cd 800c 	str.w	r8, [sp, #12]
 8014e3c:	2330      	movs	r3, #48	; 0x30
 8014e3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014fe8 <_svfiprintf_r+0x1ec>
 8014e42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014e46:	f04f 0901 	mov.w	r9, #1
 8014e4a:	4623      	mov	r3, r4
 8014e4c:	469a      	mov	sl, r3
 8014e4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e52:	b10a      	cbz	r2, 8014e58 <_svfiprintf_r+0x5c>
 8014e54:	2a25      	cmp	r2, #37	; 0x25
 8014e56:	d1f9      	bne.n	8014e4c <_svfiprintf_r+0x50>
 8014e58:	ebba 0b04 	subs.w	fp, sl, r4
 8014e5c:	d00b      	beq.n	8014e76 <_svfiprintf_r+0x7a>
 8014e5e:	465b      	mov	r3, fp
 8014e60:	4622      	mov	r2, r4
 8014e62:	4629      	mov	r1, r5
 8014e64:	4638      	mov	r0, r7
 8014e66:	f7ff ff6d 	bl	8014d44 <__ssputs_r>
 8014e6a:	3001      	adds	r0, #1
 8014e6c:	f000 80aa 	beq.w	8014fc4 <_svfiprintf_r+0x1c8>
 8014e70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e72:	445a      	add	r2, fp
 8014e74:	9209      	str	r2, [sp, #36]	; 0x24
 8014e76:	f89a 3000 	ldrb.w	r3, [sl]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	f000 80a2 	beq.w	8014fc4 <_svfiprintf_r+0x1c8>
 8014e80:	2300      	movs	r3, #0
 8014e82:	f04f 32ff 	mov.w	r2, #4294967295
 8014e86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e8a:	f10a 0a01 	add.w	sl, sl, #1
 8014e8e:	9304      	str	r3, [sp, #16]
 8014e90:	9307      	str	r3, [sp, #28]
 8014e92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014e96:	931a      	str	r3, [sp, #104]	; 0x68
 8014e98:	4654      	mov	r4, sl
 8014e9a:	2205      	movs	r2, #5
 8014e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ea0:	4851      	ldr	r0, [pc, #324]	; (8014fe8 <_svfiprintf_r+0x1ec>)
 8014ea2:	f7eb f9b5 	bl	8000210 <memchr>
 8014ea6:	9a04      	ldr	r2, [sp, #16]
 8014ea8:	b9d8      	cbnz	r0, 8014ee2 <_svfiprintf_r+0xe6>
 8014eaa:	06d0      	lsls	r0, r2, #27
 8014eac:	bf44      	itt	mi
 8014eae:	2320      	movmi	r3, #32
 8014eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014eb4:	0711      	lsls	r1, r2, #28
 8014eb6:	bf44      	itt	mi
 8014eb8:	232b      	movmi	r3, #43	; 0x2b
 8014eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8014ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8014ec4:	d015      	beq.n	8014ef2 <_svfiprintf_r+0xf6>
 8014ec6:	9a07      	ldr	r2, [sp, #28]
 8014ec8:	4654      	mov	r4, sl
 8014eca:	2000      	movs	r0, #0
 8014ecc:	f04f 0c0a 	mov.w	ip, #10
 8014ed0:	4621      	mov	r1, r4
 8014ed2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014ed6:	3b30      	subs	r3, #48	; 0x30
 8014ed8:	2b09      	cmp	r3, #9
 8014eda:	d94e      	bls.n	8014f7a <_svfiprintf_r+0x17e>
 8014edc:	b1b0      	cbz	r0, 8014f0c <_svfiprintf_r+0x110>
 8014ede:	9207      	str	r2, [sp, #28]
 8014ee0:	e014      	b.n	8014f0c <_svfiprintf_r+0x110>
 8014ee2:	eba0 0308 	sub.w	r3, r0, r8
 8014ee6:	fa09 f303 	lsl.w	r3, r9, r3
 8014eea:	4313      	orrs	r3, r2
 8014eec:	9304      	str	r3, [sp, #16]
 8014eee:	46a2      	mov	sl, r4
 8014ef0:	e7d2      	b.n	8014e98 <_svfiprintf_r+0x9c>
 8014ef2:	9b03      	ldr	r3, [sp, #12]
 8014ef4:	1d19      	adds	r1, r3, #4
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	9103      	str	r1, [sp, #12]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	bfbb      	ittet	lt
 8014efe:	425b      	neglt	r3, r3
 8014f00:	f042 0202 	orrlt.w	r2, r2, #2
 8014f04:	9307      	strge	r3, [sp, #28]
 8014f06:	9307      	strlt	r3, [sp, #28]
 8014f08:	bfb8      	it	lt
 8014f0a:	9204      	strlt	r2, [sp, #16]
 8014f0c:	7823      	ldrb	r3, [r4, #0]
 8014f0e:	2b2e      	cmp	r3, #46	; 0x2e
 8014f10:	d10c      	bne.n	8014f2c <_svfiprintf_r+0x130>
 8014f12:	7863      	ldrb	r3, [r4, #1]
 8014f14:	2b2a      	cmp	r3, #42	; 0x2a
 8014f16:	d135      	bne.n	8014f84 <_svfiprintf_r+0x188>
 8014f18:	9b03      	ldr	r3, [sp, #12]
 8014f1a:	1d1a      	adds	r2, r3, #4
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	9203      	str	r2, [sp, #12]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	bfb8      	it	lt
 8014f24:	f04f 33ff 	movlt.w	r3, #4294967295
 8014f28:	3402      	adds	r4, #2
 8014f2a:	9305      	str	r3, [sp, #20]
 8014f2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014ff8 <_svfiprintf_r+0x1fc>
 8014f30:	7821      	ldrb	r1, [r4, #0]
 8014f32:	2203      	movs	r2, #3
 8014f34:	4650      	mov	r0, sl
 8014f36:	f7eb f96b 	bl	8000210 <memchr>
 8014f3a:	b140      	cbz	r0, 8014f4e <_svfiprintf_r+0x152>
 8014f3c:	2340      	movs	r3, #64	; 0x40
 8014f3e:	eba0 000a 	sub.w	r0, r0, sl
 8014f42:	fa03 f000 	lsl.w	r0, r3, r0
 8014f46:	9b04      	ldr	r3, [sp, #16]
 8014f48:	4303      	orrs	r3, r0
 8014f4a:	3401      	adds	r4, #1
 8014f4c:	9304      	str	r3, [sp, #16]
 8014f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f52:	4826      	ldr	r0, [pc, #152]	; (8014fec <_svfiprintf_r+0x1f0>)
 8014f54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014f58:	2206      	movs	r2, #6
 8014f5a:	f7eb f959 	bl	8000210 <memchr>
 8014f5e:	2800      	cmp	r0, #0
 8014f60:	d038      	beq.n	8014fd4 <_svfiprintf_r+0x1d8>
 8014f62:	4b23      	ldr	r3, [pc, #140]	; (8014ff0 <_svfiprintf_r+0x1f4>)
 8014f64:	bb1b      	cbnz	r3, 8014fae <_svfiprintf_r+0x1b2>
 8014f66:	9b03      	ldr	r3, [sp, #12]
 8014f68:	3307      	adds	r3, #7
 8014f6a:	f023 0307 	bic.w	r3, r3, #7
 8014f6e:	3308      	adds	r3, #8
 8014f70:	9303      	str	r3, [sp, #12]
 8014f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f74:	4433      	add	r3, r6
 8014f76:	9309      	str	r3, [sp, #36]	; 0x24
 8014f78:	e767      	b.n	8014e4a <_svfiprintf_r+0x4e>
 8014f7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f7e:	460c      	mov	r4, r1
 8014f80:	2001      	movs	r0, #1
 8014f82:	e7a5      	b.n	8014ed0 <_svfiprintf_r+0xd4>
 8014f84:	2300      	movs	r3, #0
 8014f86:	3401      	adds	r4, #1
 8014f88:	9305      	str	r3, [sp, #20]
 8014f8a:	4619      	mov	r1, r3
 8014f8c:	f04f 0c0a 	mov.w	ip, #10
 8014f90:	4620      	mov	r0, r4
 8014f92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f96:	3a30      	subs	r2, #48	; 0x30
 8014f98:	2a09      	cmp	r2, #9
 8014f9a:	d903      	bls.n	8014fa4 <_svfiprintf_r+0x1a8>
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d0c5      	beq.n	8014f2c <_svfiprintf_r+0x130>
 8014fa0:	9105      	str	r1, [sp, #20]
 8014fa2:	e7c3      	b.n	8014f2c <_svfiprintf_r+0x130>
 8014fa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8014fa8:	4604      	mov	r4, r0
 8014faa:	2301      	movs	r3, #1
 8014fac:	e7f0      	b.n	8014f90 <_svfiprintf_r+0x194>
 8014fae:	ab03      	add	r3, sp, #12
 8014fb0:	9300      	str	r3, [sp, #0]
 8014fb2:	462a      	mov	r2, r5
 8014fb4:	4b0f      	ldr	r3, [pc, #60]	; (8014ff4 <_svfiprintf_r+0x1f8>)
 8014fb6:	a904      	add	r1, sp, #16
 8014fb8:	4638      	mov	r0, r7
 8014fba:	f7fc f9e5 	bl	8011388 <_printf_float>
 8014fbe:	1c42      	adds	r2, r0, #1
 8014fc0:	4606      	mov	r6, r0
 8014fc2:	d1d6      	bne.n	8014f72 <_svfiprintf_r+0x176>
 8014fc4:	89ab      	ldrh	r3, [r5, #12]
 8014fc6:	065b      	lsls	r3, r3, #25
 8014fc8:	f53f af2c 	bmi.w	8014e24 <_svfiprintf_r+0x28>
 8014fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014fce:	b01d      	add	sp, #116	; 0x74
 8014fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fd4:	ab03      	add	r3, sp, #12
 8014fd6:	9300      	str	r3, [sp, #0]
 8014fd8:	462a      	mov	r2, r5
 8014fda:	4b06      	ldr	r3, [pc, #24]	; (8014ff4 <_svfiprintf_r+0x1f8>)
 8014fdc:	a904      	add	r1, sp, #16
 8014fde:	4638      	mov	r0, r7
 8014fe0:	f7fc fc76 	bl	80118d0 <_printf_i>
 8014fe4:	e7eb      	b.n	8014fbe <_svfiprintf_r+0x1c2>
 8014fe6:	bf00      	nop
 8014fe8:	08029b74 	.word	0x08029b74
 8014fec:	08029b7e 	.word	0x08029b7e
 8014ff0:	08011389 	.word	0x08011389
 8014ff4:	08014d45 	.word	0x08014d45
 8014ff8:	08029b7a 	.word	0x08029b7a

08014ffc <__sfputc_r>:
 8014ffc:	6893      	ldr	r3, [r2, #8]
 8014ffe:	3b01      	subs	r3, #1
 8015000:	2b00      	cmp	r3, #0
 8015002:	b410      	push	{r4}
 8015004:	6093      	str	r3, [r2, #8]
 8015006:	da08      	bge.n	801501a <__sfputc_r+0x1e>
 8015008:	6994      	ldr	r4, [r2, #24]
 801500a:	42a3      	cmp	r3, r4
 801500c:	db01      	blt.n	8015012 <__sfputc_r+0x16>
 801500e:	290a      	cmp	r1, #10
 8015010:	d103      	bne.n	801501a <__sfputc_r+0x1e>
 8015012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015016:	f000 b975 	b.w	8015304 <__swbuf_r>
 801501a:	6813      	ldr	r3, [r2, #0]
 801501c:	1c58      	adds	r0, r3, #1
 801501e:	6010      	str	r0, [r2, #0]
 8015020:	7019      	strb	r1, [r3, #0]
 8015022:	4608      	mov	r0, r1
 8015024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015028:	4770      	bx	lr

0801502a <__sfputs_r>:
 801502a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801502c:	4606      	mov	r6, r0
 801502e:	460f      	mov	r7, r1
 8015030:	4614      	mov	r4, r2
 8015032:	18d5      	adds	r5, r2, r3
 8015034:	42ac      	cmp	r4, r5
 8015036:	d101      	bne.n	801503c <__sfputs_r+0x12>
 8015038:	2000      	movs	r0, #0
 801503a:	e007      	b.n	801504c <__sfputs_r+0x22>
 801503c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015040:	463a      	mov	r2, r7
 8015042:	4630      	mov	r0, r6
 8015044:	f7ff ffda 	bl	8014ffc <__sfputc_r>
 8015048:	1c43      	adds	r3, r0, #1
 801504a:	d1f3      	bne.n	8015034 <__sfputs_r+0xa>
 801504c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015050 <_vfiprintf_r>:
 8015050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015054:	460d      	mov	r5, r1
 8015056:	b09d      	sub	sp, #116	; 0x74
 8015058:	4614      	mov	r4, r2
 801505a:	4698      	mov	r8, r3
 801505c:	4606      	mov	r6, r0
 801505e:	b118      	cbz	r0, 8015068 <_vfiprintf_r+0x18>
 8015060:	6983      	ldr	r3, [r0, #24]
 8015062:	b90b      	cbnz	r3, 8015068 <_vfiprintf_r+0x18>
 8015064:	f000 fb3e 	bl	80156e4 <__sinit>
 8015068:	4b89      	ldr	r3, [pc, #548]	; (8015290 <_vfiprintf_r+0x240>)
 801506a:	429d      	cmp	r5, r3
 801506c:	d11b      	bne.n	80150a6 <_vfiprintf_r+0x56>
 801506e:	6875      	ldr	r5, [r6, #4]
 8015070:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015072:	07d9      	lsls	r1, r3, #31
 8015074:	d405      	bmi.n	8015082 <_vfiprintf_r+0x32>
 8015076:	89ab      	ldrh	r3, [r5, #12]
 8015078:	059a      	lsls	r2, r3, #22
 801507a:	d402      	bmi.n	8015082 <_vfiprintf_r+0x32>
 801507c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801507e:	f000 fbcf 	bl	8015820 <__retarget_lock_acquire_recursive>
 8015082:	89ab      	ldrh	r3, [r5, #12]
 8015084:	071b      	lsls	r3, r3, #28
 8015086:	d501      	bpl.n	801508c <_vfiprintf_r+0x3c>
 8015088:	692b      	ldr	r3, [r5, #16]
 801508a:	b9eb      	cbnz	r3, 80150c8 <_vfiprintf_r+0x78>
 801508c:	4629      	mov	r1, r5
 801508e:	4630      	mov	r0, r6
 8015090:	f000 f998 	bl	80153c4 <__swsetup_r>
 8015094:	b1c0      	cbz	r0, 80150c8 <_vfiprintf_r+0x78>
 8015096:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015098:	07dc      	lsls	r4, r3, #31
 801509a:	d50e      	bpl.n	80150ba <_vfiprintf_r+0x6a>
 801509c:	f04f 30ff 	mov.w	r0, #4294967295
 80150a0:	b01d      	add	sp, #116	; 0x74
 80150a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150a6:	4b7b      	ldr	r3, [pc, #492]	; (8015294 <_vfiprintf_r+0x244>)
 80150a8:	429d      	cmp	r5, r3
 80150aa:	d101      	bne.n	80150b0 <_vfiprintf_r+0x60>
 80150ac:	68b5      	ldr	r5, [r6, #8]
 80150ae:	e7df      	b.n	8015070 <_vfiprintf_r+0x20>
 80150b0:	4b79      	ldr	r3, [pc, #484]	; (8015298 <_vfiprintf_r+0x248>)
 80150b2:	429d      	cmp	r5, r3
 80150b4:	bf08      	it	eq
 80150b6:	68f5      	ldreq	r5, [r6, #12]
 80150b8:	e7da      	b.n	8015070 <_vfiprintf_r+0x20>
 80150ba:	89ab      	ldrh	r3, [r5, #12]
 80150bc:	0598      	lsls	r0, r3, #22
 80150be:	d4ed      	bmi.n	801509c <_vfiprintf_r+0x4c>
 80150c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80150c2:	f000 fbae 	bl	8015822 <__retarget_lock_release_recursive>
 80150c6:	e7e9      	b.n	801509c <_vfiprintf_r+0x4c>
 80150c8:	2300      	movs	r3, #0
 80150ca:	9309      	str	r3, [sp, #36]	; 0x24
 80150cc:	2320      	movs	r3, #32
 80150ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80150d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80150d6:	2330      	movs	r3, #48	; 0x30
 80150d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801529c <_vfiprintf_r+0x24c>
 80150dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80150e0:	f04f 0901 	mov.w	r9, #1
 80150e4:	4623      	mov	r3, r4
 80150e6:	469a      	mov	sl, r3
 80150e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80150ec:	b10a      	cbz	r2, 80150f2 <_vfiprintf_r+0xa2>
 80150ee:	2a25      	cmp	r2, #37	; 0x25
 80150f0:	d1f9      	bne.n	80150e6 <_vfiprintf_r+0x96>
 80150f2:	ebba 0b04 	subs.w	fp, sl, r4
 80150f6:	d00b      	beq.n	8015110 <_vfiprintf_r+0xc0>
 80150f8:	465b      	mov	r3, fp
 80150fa:	4622      	mov	r2, r4
 80150fc:	4629      	mov	r1, r5
 80150fe:	4630      	mov	r0, r6
 8015100:	f7ff ff93 	bl	801502a <__sfputs_r>
 8015104:	3001      	adds	r0, #1
 8015106:	f000 80aa 	beq.w	801525e <_vfiprintf_r+0x20e>
 801510a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801510c:	445a      	add	r2, fp
 801510e:	9209      	str	r2, [sp, #36]	; 0x24
 8015110:	f89a 3000 	ldrb.w	r3, [sl]
 8015114:	2b00      	cmp	r3, #0
 8015116:	f000 80a2 	beq.w	801525e <_vfiprintf_r+0x20e>
 801511a:	2300      	movs	r3, #0
 801511c:	f04f 32ff 	mov.w	r2, #4294967295
 8015120:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015124:	f10a 0a01 	add.w	sl, sl, #1
 8015128:	9304      	str	r3, [sp, #16]
 801512a:	9307      	str	r3, [sp, #28]
 801512c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015130:	931a      	str	r3, [sp, #104]	; 0x68
 8015132:	4654      	mov	r4, sl
 8015134:	2205      	movs	r2, #5
 8015136:	f814 1b01 	ldrb.w	r1, [r4], #1
 801513a:	4858      	ldr	r0, [pc, #352]	; (801529c <_vfiprintf_r+0x24c>)
 801513c:	f7eb f868 	bl	8000210 <memchr>
 8015140:	9a04      	ldr	r2, [sp, #16]
 8015142:	b9d8      	cbnz	r0, 801517c <_vfiprintf_r+0x12c>
 8015144:	06d1      	lsls	r1, r2, #27
 8015146:	bf44      	itt	mi
 8015148:	2320      	movmi	r3, #32
 801514a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801514e:	0713      	lsls	r3, r2, #28
 8015150:	bf44      	itt	mi
 8015152:	232b      	movmi	r3, #43	; 0x2b
 8015154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015158:	f89a 3000 	ldrb.w	r3, [sl]
 801515c:	2b2a      	cmp	r3, #42	; 0x2a
 801515e:	d015      	beq.n	801518c <_vfiprintf_r+0x13c>
 8015160:	9a07      	ldr	r2, [sp, #28]
 8015162:	4654      	mov	r4, sl
 8015164:	2000      	movs	r0, #0
 8015166:	f04f 0c0a 	mov.w	ip, #10
 801516a:	4621      	mov	r1, r4
 801516c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015170:	3b30      	subs	r3, #48	; 0x30
 8015172:	2b09      	cmp	r3, #9
 8015174:	d94e      	bls.n	8015214 <_vfiprintf_r+0x1c4>
 8015176:	b1b0      	cbz	r0, 80151a6 <_vfiprintf_r+0x156>
 8015178:	9207      	str	r2, [sp, #28]
 801517a:	e014      	b.n	80151a6 <_vfiprintf_r+0x156>
 801517c:	eba0 0308 	sub.w	r3, r0, r8
 8015180:	fa09 f303 	lsl.w	r3, r9, r3
 8015184:	4313      	orrs	r3, r2
 8015186:	9304      	str	r3, [sp, #16]
 8015188:	46a2      	mov	sl, r4
 801518a:	e7d2      	b.n	8015132 <_vfiprintf_r+0xe2>
 801518c:	9b03      	ldr	r3, [sp, #12]
 801518e:	1d19      	adds	r1, r3, #4
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	9103      	str	r1, [sp, #12]
 8015194:	2b00      	cmp	r3, #0
 8015196:	bfbb      	ittet	lt
 8015198:	425b      	neglt	r3, r3
 801519a:	f042 0202 	orrlt.w	r2, r2, #2
 801519e:	9307      	strge	r3, [sp, #28]
 80151a0:	9307      	strlt	r3, [sp, #28]
 80151a2:	bfb8      	it	lt
 80151a4:	9204      	strlt	r2, [sp, #16]
 80151a6:	7823      	ldrb	r3, [r4, #0]
 80151a8:	2b2e      	cmp	r3, #46	; 0x2e
 80151aa:	d10c      	bne.n	80151c6 <_vfiprintf_r+0x176>
 80151ac:	7863      	ldrb	r3, [r4, #1]
 80151ae:	2b2a      	cmp	r3, #42	; 0x2a
 80151b0:	d135      	bne.n	801521e <_vfiprintf_r+0x1ce>
 80151b2:	9b03      	ldr	r3, [sp, #12]
 80151b4:	1d1a      	adds	r2, r3, #4
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	9203      	str	r2, [sp, #12]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	bfb8      	it	lt
 80151be:	f04f 33ff 	movlt.w	r3, #4294967295
 80151c2:	3402      	adds	r4, #2
 80151c4:	9305      	str	r3, [sp, #20]
 80151c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80152ac <_vfiprintf_r+0x25c>
 80151ca:	7821      	ldrb	r1, [r4, #0]
 80151cc:	2203      	movs	r2, #3
 80151ce:	4650      	mov	r0, sl
 80151d0:	f7eb f81e 	bl	8000210 <memchr>
 80151d4:	b140      	cbz	r0, 80151e8 <_vfiprintf_r+0x198>
 80151d6:	2340      	movs	r3, #64	; 0x40
 80151d8:	eba0 000a 	sub.w	r0, r0, sl
 80151dc:	fa03 f000 	lsl.w	r0, r3, r0
 80151e0:	9b04      	ldr	r3, [sp, #16]
 80151e2:	4303      	orrs	r3, r0
 80151e4:	3401      	adds	r4, #1
 80151e6:	9304      	str	r3, [sp, #16]
 80151e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151ec:	482c      	ldr	r0, [pc, #176]	; (80152a0 <_vfiprintf_r+0x250>)
 80151ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80151f2:	2206      	movs	r2, #6
 80151f4:	f7eb f80c 	bl	8000210 <memchr>
 80151f8:	2800      	cmp	r0, #0
 80151fa:	d03f      	beq.n	801527c <_vfiprintf_r+0x22c>
 80151fc:	4b29      	ldr	r3, [pc, #164]	; (80152a4 <_vfiprintf_r+0x254>)
 80151fe:	bb1b      	cbnz	r3, 8015248 <_vfiprintf_r+0x1f8>
 8015200:	9b03      	ldr	r3, [sp, #12]
 8015202:	3307      	adds	r3, #7
 8015204:	f023 0307 	bic.w	r3, r3, #7
 8015208:	3308      	adds	r3, #8
 801520a:	9303      	str	r3, [sp, #12]
 801520c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801520e:	443b      	add	r3, r7
 8015210:	9309      	str	r3, [sp, #36]	; 0x24
 8015212:	e767      	b.n	80150e4 <_vfiprintf_r+0x94>
 8015214:	fb0c 3202 	mla	r2, ip, r2, r3
 8015218:	460c      	mov	r4, r1
 801521a:	2001      	movs	r0, #1
 801521c:	e7a5      	b.n	801516a <_vfiprintf_r+0x11a>
 801521e:	2300      	movs	r3, #0
 8015220:	3401      	adds	r4, #1
 8015222:	9305      	str	r3, [sp, #20]
 8015224:	4619      	mov	r1, r3
 8015226:	f04f 0c0a 	mov.w	ip, #10
 801522a:	4620      	mov	r0, r4
 801522c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015230:	3a30      	subs	r2, #48	; 0x30
 8015232:	2a09      	cmp	r2, #9
 8015234:	d903      	bls.n	801523e <_vfiprintf_r+0x1ee>
 8015236:	2b00      	cmp	r3, #0
 8015238:	d0c5      	beq.n	80151c6 <_vfiprintf_r+0x176>
 801523a:	9105      	str	r1, [sp, #20]
 801523c:	e7c3      	b.n	80151c6 <_vfiprintf_r+0x176>
 801523e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015242:	4604      	mov	r4, r0
 8015244:	2301      	movs	r3, #1
 8015246:	e7f0      	b.n	801522a <_vfiprintf_r+0x1da>
 8015248:	ab03      	add	r3, sp, #12
 801524a:	9300      	str	r3, [sp, #0]
 801524c:	462a      	mov	r2, r5
 801524e:	4b16      	ldr	r3, [pc, #88]	; (80152a8 <_vfiprintf_r+0x258>)
 8015250:	a904      	add	r1, sp, #16
 8015252:	4630      	mov	r0, r6
 8015254:	f7fc f898 	bl	8011388 <_printf_float>
 8015258:	4607      	mov	r7, r0
 801525a:	1c78      	adds	r0, r7, #1
 801525c:	d1d6      	bne.n	801520c <_vfiprintf_r+0x1bc>
 801525e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015260:	07d9      	lsls	r1, r3, #31
 8015262:	d405      	bmi.n	8015270 <_vfiprintf_r+0x220>
 8015264:	89ab      	ldrh	r3, [r5, #12]
 8015266:	059a      	lsls	r2, r3, #22
 8015268:	d402      	bmi.n	8015270 <_vfiprintf_r+0x220>
 801526a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801526c:	f000 fad9 	bl	8015822 <__retarget_lock_release_recursive>
 8015270:	89ab      	ldrh	r3, [r5, #12]
 8015272:	065b      	lsls	r3, r3, #25
 8015274:	f53f af12 	bmi.w	801509c <_vfiprintf_r+0x4c>
 8015278:	9809      	ldr	r0, [sp, #36]	; 0x24
 801527a:	e711      	b.n	80150a0 <_vfiprintf_r+0x50>
 801527c:	ab03      	add	r3, sp, #12
 801527e:	9300      	str	r3, [sp, #0]
 8015280:	462a      	mov	r2, r5
 8015282:	4b09      	ldr	r3, [pc, #36]	; (80152a8 <_vfiprintf_r+0x258>)
 8015284:	a904      	add	r1, sp, #16
 8015286:	4630      	mov	r0, r6
 8015288:	f7fc fb22 	bl	80118d0 <_printf_i>
 801528c:	e7e4      	b.n	8015258 <_vfiprintf_r+0x208>
 801528e:	bf00      	nop
 8015290:	08029ba8 	.word	0x08029ba8
 8015294:	08029bc8 	.word	0x08029bc8
 8015298:	08029b88 	.word	0x08029b88
 801529c:	08029b74 	.word	0x08029b74
 80152a0:	08029b7e 	.word	0x08029b7e
 80152a4:	08011389 	.word	0x08011389
 80152a8:	0801502b 	.word	0x0801502b
 80152ac:	08029b7a 	.word	0x08029b7a

080152b0 <nan>:
 80152b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80152b8 <nan+0x8>
 80152b4:	4770      	bx	lr
 80152b6:	bf00      	nop
 80152b8:	00000000 	.word	0x00000000
 80152bc:	7ff80000 	.word	0x7ff80000

080152c0 <_sbrk_r>:
 80152c0:	b538      	push	{r3, r4, r5, lr}
 80152c2:	4d06      	ldr	r5, [pc, #24]	; (80152dc <_sbrk_r+0x1c>)
 80152c4:	2300      	movs	r3, #0
 80152c6:	4604      	mov	r4, r0
 80152c8:	4608      	mov	r0, r1
 80152ca:	602b      	str	r3, [r5, #0]
 80152cc:	f7f4 fbf6 	bl	8009abc <_sbrk>
 80152d0:	1c43      	adds	r3, r0, #1
 80152d2:	d102      	bne.n	80152da <_sbrk_r+0x1a>
 80152d4:	682b      	ldr	r3, [r5, #0]
 80152d6:	b103      	cbz	r3, 80152da <_sbrk_r+0x1a>
 80152d8:	6023      	str	r3, [r4, #0]
 80152da:	bd38      	pop	{r3, r4, r5, pc}
 80152dc:	20000c80 	.word	0x20000c80

080152e0 <strncmp>:
 80152e0:	b510      	push	{r4, lr}
 80152e2:	b16a      	cbz	r2, 8015300 <strncmp+0x20>
 80152e4:	3901      	subs	r1, #1
 80152e6:	1884      	adds	r4, r0, r2
 80152e8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80152ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80152f0:	4293      	cmp	r3, r2
 80152f2:	d103      	bne.n	80152fc <strncmp+0x1c>
 80152f4:	42a0      	cmp	r0, r4
 80152f6:	d001      	beq.n	80152fc <strncmp+0x1c>
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d1f5      	bne.n	80152e8 <strncmp+0x8>
 80152fc:	1a98      	subs	r0, r3, r2
 80152fe:	bd10      	pop	{r4, pc}
 8015300:	4610      	mov	r0, r2
 8015302:	e7fc      	b.n	80152fe <strncmp+0x1e>

08015304 <__swbuf_r>:
 8015304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015306:	460e      	mov	r6, r1
 8015308:	4614      	mov	r4, r2
 801530a:	4605      	mov	r5, r0
 801530c:	b118      	cbz	r0, 8015316 <__swbuf_r+0x12>
 801530e:	6983      	ldr	r3, [r0, #24]
 8015310:	b90b      	cbnz	r3, 8015316 <__swbuf_r+0x12>
 8015312:	f000 f9e7 	bl	80156e4 <__sinit>
 8015316:	4b21      	ldr	r3, [pc, #132]	; (801539c <__swbuf_r+0x98>)
 8015318:	429c      	cmp	r4, r3
 801531a:	d12b      	bne.n	8015374 <__swbuf_r+0x70>
 801531c:	686c      	ldr	r4, [r5, #4]
 801531e:	69a3      	ldr	r3, [r4, #24]
 8015320:	60a3      	str	r3, [r4, #8]
 8015322:	89a3      	ldrh	r3, [r4, #12]
 8015324:	071a      	lsls	r2, r3, #28
 8015326:	d52f      	bpl.n	8015388 <__swbuf_r+0x84>
 8015328:	6923      	ldr	r3, [r4, #16]
 801532a:	b36b      	cbz	r3, 8015388 <__swbuf_r+0x84>
 801532c:	6923      	ldr	r3, [r4, #16]
 801532e:	6820      	ldr	r0, [r4, #0]
 8015330:	1ac0      	subs	r0, r0, r3
 8015332:	6963      	ldr	r3, [r4, #20]
 8015334:	b2f6      	uxtb	r6, r6
 8015336:	4283      	cmp	r3, r0
 8015338:	4637      	mov	r7, r6
 801533a:	dc04      	bgt.n	8015346 <__swbuf_r+0x42>
 801533c:	4621      	mov	r1, r4
 801533e:	4628      	mov	r0, r5
 8015340:	f000 f93c 	bl	80155bc <_fflush_r>
 8015344:	bb30      	cbnz	r0, 8015394 <__swbuf_r+0x90>
 8015346:	68a3      	ldr	r3, [r4, #8]
 8015348:	3b01      	subs	r3, #1
 801534a:	60a3      	str	r3, [r4, #8]
 801534c:	6823      	ldr	r3, [r4, #0]
 801534e:	1c5a      	adds	r2, r3, #1
 8015350:	6022      	str	r2, [r4, #0]
 8015352:	701e      	strb	r6, [r3, #0]
 8015354:	6963      	ldr	r3, [r4, #20]
 8015356:	3001      	adds	r0, #1
 8015358:	4283      	cmp	r3, r0
 801535a:	d004      	beq.n	8015366 <__swbuf_r+0x62>
 801535c:	89a3      	ldrh	r3, [r4, #12]
 801535e:	07db      	lsls	r3, r3, #31
 8015360:	d506      	bpl.n	8015370 <__swbuf_r+0x6c>
 8015362:	2e0a      	cmp	r6, #10
 8015364:	d104      	bne.n	8015370 <__swbuf_r+0x6c>
 8015366:	4621      	mov	r1, r4
 8015368:	4628      	mov	r0, r5
 801536a:	f000 f927 	bl	80155bc <_fflush_r>
 801536e:	b988      	cbnz	r0, 8015394 <__swbuf_r+0x90>
 8015370:	4638      	mov	r0, r7
 8015372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015374:	4b0a      	ldr	r3, [pc, #40]	; (80153a0 <__swbuf_r+0x9c>)
 8015376:	429c      	cmp	r4, r3
 8015378:	d101      	bne.n	801537e <__swbuf_r+0x7a>
 801537a:	68ac      	ldr	r4, [r5, #8]
 801537c:	e7cf      	b.n	801531e <__swbuf_r+0x1a>
 801537e:	4b09      	ldr	r3, [pc, #36]	; (80153a4 <__swbuf_r+0xa0>)
 8015380:	429c      	cmp	r4, r3
 8015382:	bf08      	it	eq
 8015384:	68ec      	ldreq	r4, [r5, #12]
 8015386:	e7ca      	b.n	801531e <__swbuf_r+0x1a>
 8015388:	4621      	mov	r1, r4
 801538a:	4628      	mov	r0, r5
 801538c:	f000 f81a 	bl	80153c4 <__swsetup_r>
 8015390:	2800      	cmp	r0, #0
 8015392:	d0cb      	beq.n	801532c <__swbuf_r+0x28>
 8015394:	f04f 37ff 	mov.w	r7, #4294967295
 8015398:	e7ea      	b.n	8015370 <__swbuf_r+0x6c>
 801539a:	bf00      	nop
 801539c:	08029ba8 	.word	0x08029ba8
 80153a0:	08029bc8 	.word	0x08029bc8
 80153a4:	08029b88 	.word	0x08029b88

080153a8 <__ascii_wctomb>:
 80153a8:	b149      	cbz	r1, 80153be <__ascii_wctomb+0x16>
 80153aa:	2aff      	cmp	r2, #255	; 0xff
 80153ac:	bf85      	ittet	hi
 80153ae:	238a      	movhi	r3, #138	; 0x8a
 80153b0:	6003      	strhi	r3, [r0, #0]
 80153b2:	700a      	strbls	r2, [r1, #0]
 80153b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80153b8:	bf98      	it	ls
 80153ba:	2001      	movls	r0, #1
 80153bc:	4770      	bx	lr
 80153be:	4608      	mov	r0, r1
 80153c0:	4770      	bx	lr
	...

080153c4 <__swsetup_r>:
 80153c4:	4b32      	ldr	r3, [pc, #200]	; (8015490 <__swsetup_r+0xcc>)
 80153c6:	b570      	push	{r4, r5, r6, lr}
 80153c8:	681d      	ldr	r5, [r3, #0]
 80153ca:	4606      	mov	r6, r0
 80153cc:	460c      	mov	r4, r1
 80153ce:	b125      	cbz	r5, 80153da <__swsetup_r+0x16>
 80153d0:	69ab      	ldr	r3, [r5, #24]
 80153d2:	b913      	cbnz	r3, 80153da <__swsetup_r+0x16>
 80153d4:	4628      	mov	r0, r5
 80153d6:	f000 f985 	bl	80156e4 <__sinit>
 80153da:	4b2e      	ldr	r3, [pc, #184]	; (8015494 <__swsetup_r+0xd0>)
 80153dc:	429c      	cmp	r4, r3
 80153de:	d10f      	bne.n	8015400 <__swsetup_r+0x3c>
 80153e0:	686c      	ldr	r4, [r5, #4]
 80153e2:	89a3      	ldrh	r3, [r4, #12]
 80153e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80153e8:	0719      	lsls	r1, r3, #28
 80153ea:	d42c      	bmi.n	8015446 <__swsetup_r+0x82>
 80153ec:	06dd      	lsls	r5, r3, #27
 80153ee:	d411      	bmi.n	8015414 <__swsetup_r+0x50>
 80153f0:	2309      	movs	r3, #9
 80153f2:	6033      	str	r3, [r6, #0]
 80153f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80153f8:	81a3      	strh	r3, [r4, #12]
 80153fa:	f04f 30ff 	mov.w	r0, #4294967295
 80153fe:	e03e      	b.n	801547e <__swsetup_r+0xba>
 8015400:	4b25      	ldr	r3, [pc, #148]	; (8015498 <__swsetup_r+0xd4>)
 8015402:	429c      	cmp	r4, r3
 8015404:	d101      	bne.n	801540a <__swsetup_r+0x46>
 8015406:	68ac      	ldr	r4, [r5, #8]
 8015408:	e7eb      	b.n	80153e2 <__swsetup_r+0x1e>
 801540a:	4b24      	ldr	r3, [pc, #144]	; (801549c <__swsetup_r+0xd8>)
 801540c:	429c      	cmp	r4, r3
 801540e:	bf08      	it	eq
 8015410:	68ec      	ldreq	r4, [r5, #12]
 8015412:	e7e6      	b.n	80153e2 <__swsetup_r+0x1e>
 8015414:	0758      	lsls	r0, r3, #29
 8015416:	d512      	bpl.n	801543e <__swsetup_r+0x7a>
 8015418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801541a:	b141      	cbz	r1, 801542e <__swsetup_r+0x6a>
 801541c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015420:	4299      	cmp	r1, r3
 8015422:	d002      	beq.n	801542a <__swsetup_r+0x66>
 8015424:	4630      	mov	r0, r6
 8015426:	f7ff fbe3 	bl	8014bf0 <_free_r>
 801542a:	2300      	movs	r3, #0
 801542c:	6363      	str	r3, [r4, #52]	; 0x34
 801542e:	89a3      	ldrh	r3, [r4, #12]
 8015430:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015434:	81a3      	strh	r3, [r4, #12]
 8015436:	2300      	movs	r3, #0
 8015438:	6063      	str	r3, [r4, #4]
 801543a:	6923      	ldr	r3, [r4, #16]
 801543c:	6023      	str	r3, [r4, #0]
 801543e:	89a3      	ldrh	r3, [r4, #12]
 8015440:	f043 0308 	orr.w	r3, r3, #8
 8015444:	81a3      	strh	r3, [r4, #12]
 8015446:	6923      	ldr	r3, [r4, #16]
 8015448:	b94b      	cbnz	r3, 801545e <__swsetup_r+0x9a>
 801544a:	89a3      	ldrh	r3, [r4, #12]
 801544c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015454:	d003      	beq.n	801545e <__swsetup_r+0x9a>
 8015456:	4621      	mov	r1, r4
 8015458:	4630      	mov	r0, r6
 801545a:	f000 fa07 	bl	801586c <__smakebuf_r>
 801545e:	89a0      	ldrh	r0, [r4, #12]
 8015460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015464:	f010 0301 	ands.w	r3, r0, #1
 8015468:	d00a      	beq.n	8015480 <__swsetup_r+0xbc>
 801546a:	2300      	movs	r3, #0
 801546c:	60a3      	str	r3, [r4, #8]
 801546e:	6963      	ldr	r3, [r4, #20]
 8015470:	425b      	negs	r3, r3
 8015472:	61a3      	str	r3, [r4, #24]
 8015474:	6923      	ldr	r3, [r4, #16]
 8015476:	b943      	cbnz	r3, 801548a <__swsetup_r+0xc6>
 8015478:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801547c:	d1ba      	bne.n	80153f4 <__swsetup_r+0x30>
 801547e:	bd70      	pop	{r4, r5, r6, pc}
 8015480:	0781      	lsls	r1, r0, #30
 8015482:	bf58      	it	pl
 8015484:	6963      	ldrpl	r3, [r4, #20]
 8015486:	60a3      	str	r3, [r4, #8]
 8015488:	e7f4      	b.n	8015474 <__swsetup_r+0xb0>
 801548a:	2000      	movs	r0, #0
 801548c:	e7f7      	b.n	801547e <__swsetup_r+0xba>
 801548e:	bf00      	nop
 8015490:	20000040 	.word	0x20000040
 8015494:	08029ba8 	.word	0x08029ba8
 8015498:	08029bc8 	.word	0x08029bc8
 801549c:	08029b88 	.word	0x08029b88

080154a0 <abort>:
 80154a0:	b508      	push	{r3, lr}
 80154a2:	2006      	movs	r0, #6
 80154a4:	f000 fa96 	bl	80159d4 <raise>
 80154a8:	2001      	movs	r0, #1
 80154aa:	f7f4 fa8f 	bl	80099cc <_exit>
	...

080154b0 <__sflush_r>:
 80154b0:	898a      	ldrh	r2, [r1, #12]
 80154b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154b6:	4605      	mov	r5, r0
 80154b8:	0710      	lsls	r0, r2, #28
 80154ba:	460c      	mov	r4, r1
 80154bc:	d458      	bmi.n	8015570 <__sflush_r+0xc0>
 80154be:	684b      	ldr	r3, [r1, #4]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	dc05      	bgt.n	80154d0 <__sflush_r+0x20>
 80154c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	dc02      	bgt.n	80154d0 <__sflush_r+0x20>
 80154ca:	2000      	movs	r0, #0
 80154cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80154d2:	2e00      	cmp	r6, #0
 80154d4:	d0f9      	beq.n	80154ca <__sflush_r+0x1a>
 80154d6:	2300      	movs	r3, #0
 80154d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80154dc:	682f      	ldr	r7, [r5, #0]
 80154de:	602b      	str	r3, [r5, #0]
 80154e0:	d032      	beq.n	8015548 <__sflush_r+0x98>
 80154e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80154e4:	89a3      	ldrh	r3, [r4, #12]
 80154e6:	075a      	lsls	r2, r3, #29
 80154e8:	d505      	bpl.n	80154f6 <__sflush_r+0x46>
 80154ea:	6863      	ldr	r3, [r4, #4]
 80154ec:	1ac0      	subs	r0, r0, r3
 80154ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80154f0:	b10b      	cbz	r3, 80154f6 <__sflush_r+0x46>
 80154f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80154f4:	1ac0      	subs	r0, r0, r3
 80154f6:	2300      	movs	r3, #0
 80154f8:	4602      	mov	r2, r0
 80154fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80154fc:	6a21      	ldr	r1, [r4, #32]
 80154fe:	4628      	mov	r0, r5
 8015500:	47b0      	blx	r6
 8015502:	1c43      	adds	r3, r0, #1
 8015504:	89a3      	ldrh	r3, [r4, #12]
 8015506:	d106      	bne.n	8015516 <__sflush_r+0x66>
 8015508:	6829      	ldr	r1, [r5, #0]
 801550a:	291d      	cmp	r1, #29
 801550c:	d82c      	bhi.n	8015568 <__sflush_r+0xb8>
 801550e:	4a2a      	ldr	r2, [pc, #168]	; (80155b8 <__sflush_r+0x108>)
 8015510:	40ca      	lsrs	r2, r1
 8015512:	07d6      	lsls	r6, r2, #31
 8015514:	d528      	bpl.n	8015568 <__sflush_r+0xb8>
 8015516:	2200      	movs	r2, #0
 8015518:	6062      	str	r2, [r4, #4]
 801551a:	04d9      	lsls	r1, r3, #19
 801551c:	6922      	ldr	r2, [r4, #16]
 801551e:	6022      	str	r2, [r4, #0]
 8015520:	d504      	bpl.n	801552c <__sflush_r+0x7c>
 8015522:	1c42      	adds	r2, r0, #1
 8015524:	d101      	bne.n	801552a <__sflush_r+0x7a>
 8015526:	682b      	ldr	r3, [r5, #0]
 8015528:	b903      	cbnz	r3, 801552c <__sflush_r+0x7c>
 801552a:	6560      	str	r0, [r4, #84]	; 0x54
 801552c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801552e:	602f      	str	r7, [r5, #0]
 8015530:	2900      	cmp	r1, #0
 8015532:	d0ca      	beq.n	80154ca <__sflush_r+0x1a>
 8015534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015538:	4299      	cmp	r1, r3
 801553a:	d002      	beq.n	8015542 <__sflush_r+0x92>
 801553c:	4628      	mov	r0, r5
 801553e:	f7ff fb57 	bl	8014bf0 <_free_r>
 8015542:	2000      	movs	r0, #0
 8015544:	6360      	str	r0, [r4, #52]	; 0x34
 8015546:	e7c1      	b.n	80154cc <__sflush_r+0x1c>
 8015548:	6a21      	ldr	r1, [r4, #32]
 801554a:	2301      	movs	r3, #1
 801554c:	4628      	mov	r0, r5
 801554e:	47b0      	blx	r6
 8015550:	1c41      	adds	r1, r0, #1
 8015552:	d1c7      	bne.n	80154e4 <__sflush_r+0x34>
 8015554:	682b      	ldr	r3, [r5, #0]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d0c4      	beq.n	80154e4 <__sflush_r+0x34>
 801555a:	2b1d      	cmp	r3, #29
 801555c:	d001      	beq.n	8015562 <__sflush_r+0xb2>
 801555e:	2b16      	cmp	r3, #22
 8015560:	d101      	bne.n	8015566 <__sflush_r+0xb6>
 8015562:	602f      	str	r7, [r5, #0]
 8015564:	e7b1      	b.n	80154ca <__sflush_r+0x1a>
 8015566:	89a3      	ldrh	r3, [r4, #12]
 8015568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801556c:	81a3      	strh	r3, [r4, #12]
 801556e:	e7ad      	b.n	80154cc <__sflush_r+0x1c>
 8015570:	690f      	ldr	r7, [r1, #16]
 8015572:	2f00      	cmp	r7, #0
 8015574:	d0a9      	beq.n	80154ca <__sflush_r+0x1a>
 8015576:	0793      	lsls	r3, r2, #30
 8015578:	680e      	ldr	r6, [r1, #0]
 801557a:	bf08      	it	eq
 801557c:	694b      	ldreq	r3, [r1, #20]
 801557e:	600f      	str	r7, [r1, #0]
 8015580:	bf18      	it	ne
 8015582:	2300      	movne	r3, #0
 8015584:	eba6 0807 	sub.w	r8, r6, r7
 8015588:	608b      	str	r3, [r1, #8]
 801558a:	f1b8 0f00 	cmp.w	r8, #0
 801558e:	dd9c      	ble.n	80154ca <__sflush_r+0x1a>
 8015590:	6a21      	ldr	r1, [r4, #32]
 8015592:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015594:	4643      	mov	r3, r8
 8015596:	463a      	mov	r2, r7
 8015598:	4628      	mov	r0, r5
 801559a:	47b0      	blx	r6
 801559c:	2800      	cmp	r0, #0
 801559e:	dc06      	bgt.n	80155ae <__sflush_r+0xfe>
 80155a0:	89a3      	ldrh	r3, [r4, #12]
 80155a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155a6:	81a3      	strh	r3, [r4, #12]
 80155a8:	f04f 30ff 	mov.w	r0, #4294967295
 80155ac:	e78e      	b.n	80154cc <__sflush_r+0x1c>
 80155ae:	4407      	add	r7, r0
 80155b0:	eba8 0800 	sub.w	r8, r8, r0
 80155b4:	e7e9      	b.n	801558a <__sflush_r+0xda>
 80155b6:	bf00      	nop
 80155b8:	20400001 	.word	0x20400001

080155bc <_fflush_r>:
 80155bc:	b538      	push	{r3, r4, r5, lr}
 80155be:	690b      	ldr	r3, [r1, #16]
 80155c0:	4605      	mov	r5, r0
 80155c2:	460c      	mov	r4, r1
 80155c4:	b913      	cbnz	r3, 80155cc <_fflush_r+0x10>
 80155c6:	2500      	movs	r5, #0
 80155c8:	4628      	mov	r0, r5
 80155ca:	bd38      	pop	{r3, r4, r5, pc}
 80155cc:	b118      	cbz	r0, 80155d6 <_fflush_r+0x1a>
 80155ce:	6983      	ldr	r3, [r0, #24]
 80155d0:	b90b      	cbnz	r3, 80155d6 <_fflush_r+0x1a>
 80155d2:	f000 f887 	bl	80156e4 <__sinit>
 80155d6:	4b14      	ldr	r3, [pc, #80]	; (8015628 <_fflush_r+0x6c>)
 80155d8:	429c      	cmp	r4, r3
 80155da:	d11b      	bne.n	8015614 <_fflush_r+0x58>
 80155dc:	686c      	ldr	r4, [r5, #4]
 80155de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d0ef      	beq.n	80155c6 <_fflush_r+0xa>
 80155e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80155e8:	07d0      	lsls	r0, r2, #31
 80155ea:	d404      	bmi.n	80155f6 <_fflush_r+0x3a>
 80155ec:	0599      	lsls	r1, r3, #22
 80155ee:	d402      	bmi.n	80155f6 <_fflush_r+0x3a>
 80155f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80155f2:	f000 f915 	bl	8015820 <__retarget_lock_acquire_recursive>
 80155f6:	4628      	mov	r0, r5
 80155f8:	4621      	mov	r1, r4
 80155fa:	f7ff ff59 	bl	80154b0 <__sflush_r>
 80155fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015600:	07da      	lsls	r2, r3, #31
 8015602:	4605      	mov	r5, r0
 8015604:	d4e0      	bmi.n	80155c8 <_fflush_r+0xc>
 8015606:	89a3      	ldrh	r3, [r4, #12]
 8015608:	059b      	lsls	r3, r3, #22
 801560a:	d4dd      	bmi.n	80155c8 <_fflush_r+0xc>
 801560c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801560e:	f000 f908 	bl	8015822 <__retarget_lock_release_recursive>
 8015612:	e7d9      	b.n	80155c8 <_fflush_r+0xc>
 8015614:	4b05      	ldr	r3, [pc, #20]	; (801562c <_fflush_r+0x70>)
 8015616:	429c      	cmp	r4, r3
 8015618:	d101      	bne.n	801561e <_fflush_r+0x62>
 801561a:	68ac      	ldr	r4, [r5, #8]
 801561c:	e7df      	b.n	80155de <_fflush_r+0x22>
 801561e:	4b04      	ldr	r3, [pc, #16]	; (8015630 <_fflush_r+0x74>)
 8015620:	429c      	cmp	r4, r3
 8015622:	bf08      	it	eq
 8015624:	68ec      	ldreq	r4, [r5, #12]
 8015626:	e7da      	b.n	80155de <_fflush_r+0x22>
 8015628:	08029ba8 	.word	0x08029ba8
 801562c:	08029bc8 	.word	0x08029bc8
 8015630:	08029b88 	.word	0x08029b88

08015634 <std>:
 8015634:	2300      	movs	r3, #0
 8015636:	b510      	push	{r4, lr}
 8015638:	4604      	mov	r4, r0
 801563a:	e9c0 3300 	strd	r3, r3, [r0]
 801563e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015642:	6083      	str	r3, [r0, #8]
 8015644:	8181      	strh	r1, [r0, #12]
 8015646:	6643      	str	r3, [r0, #100]	; 0x64
 8015648:	81c2      	strh	r2, [r0, #14]
 801564a:	6183      	str	r3, [r0, #24]
 801564c:	4619      	mov	r1, r3
 801564e:	2208      	movs	r2, #8
 8015650:	305c      	adds	r0, #92	; 0x5c
 8015652:	f7fb fdf1 	bl	8011238 <memset>
 8015656:	4b05      	ldr	r3, [pc, #20]	; (801566c <std+0x38>)
 8015658:	6263      	str	r3, [r4, #36]	; 0x24
 801565a:	4b05      	ldr	r3, [pc, #20]	; (8015670 <std+0x3c>)
 801565c:	62a3      	str	r3, [r4, #40]	; 0x28
 801565e:	4b05      	ldr	r3, [pc, #20]	; (8015674 <std+0x40>)
 8015660:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015662:	4b05      	ldr	r3, [pc, #20]	; (8015678 <std+0x44>)
 8015664:	6224      	str	r4, [r4, #32]
 8015666:	6323      	str	r3, [r4, #48]	; 0x30
 8015668:	bd10      	pop	{r4, pc}
 801566a:	bf00      	nop
 801566c:	08015a0d 	.word	0x08015a0d
 8015670:	08015a2f 	.word	0x08015a2f
 8015674:	08015a67 	.word	0x08015a67
 8015678:	08015a8b 	.word	0x08015a8b

0801567c <_cleanup_r>:
 801567c:	4901      	ldr	r1, [pc, #4]	; (8015684 <_cleanup_r+0x8>)
 801567e:	f000 b8af 	b.w	80157e0 <_fwalk_reent>
 8015682:	bf00      	nop
 8015684:	080155bd 	.word	0x080155bd

08015688 <__sfmoreglue>:
 8015688:	b570      	push	{r4, r5, r6, lr}
 801568a:	1e4a      	subs	r2, r1, #1
 801568c:	2568      	movs	r5, #104	; 0x68
 801568e:	4355      	muls	r5, r2
 8015690:	460e      	mov	r6, r1
 8015692:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015696:	f7ff fafb 	bl	8014c90 <_malloc_r>
 801569a:	4604      	mov	r4, r0
 801569c:	b140      	cbz	r0, 80156b0 <__sfmoreglue+0x28>
 801569e:	2100      	movs	r1, #0
 80156a0:	e9c0 1600 	strd	r1, r6, [r0]
 80156a4:	300c      	adds	r0, #12
 80156a6:	60a0      	str	r0, [r4, #8]
 80156a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80156ac:	f7fb fdc4 	bl	8011238 <memset>
 80156b0:	4620      	mov	r0, r4
 80156b2:	bd70      	pop	{r4, r5, r6, pc}

080156b4 <__sfp_lock_acquire>:
 80156b4:	4801      	ldr	r0, [pc, #4]	; (80156bc <__sfp_lock_acquire+0x8>)
 80156b6:	f000 b8b3 	b.w	8015820 <__retarget_lock_acquire_recursive>
 80156ba:	bf00      	nop
 80156bc:	20000c7c 	.word	0x20000c7c

080156c0 <__sfp_lock_release>:
 80156c0:	4801      	ldr	r0, [pc, #4]	; (80156c8 <__sfp_lock_release+0x8>)
 80156c2:	f000 b8ae 	b.w	8015822 <__retarget_lock_release_recursive>
 80156c6:	bf00      	nop
 80156c8:	20000c7c 	.word	0x20000c7c

080156cc <__sinit_lock_acquire>:
 80156cc:	4801      	ldr	r0, [pc, #4]	; (80156d4 <__sinit_lock_acquire+0x8>)
 80156ce:	f000 b8a7 	b.w	8015820 <__retarget_lock_acquire_recursive>
 80156d2:	bf00      	nop
 80156d4:	20000c77 	.word	0x20000c77

080156d8 <__sinit_lock_release>:
 80156d8:	4801      	ldr	r0, [pc, #4]	; (80156e0 <__sinit_lock_release+0x8>)
 80156da:	f000 b8a2 	b.w	8015822 <__retarget_lock_release_recursive>
 80156de:	bf00      	nop
 80156e0:	20000c77 	.word	0x20000c77

080156e4 <__sinit>:
 80156e4:	b510      	push	{r4, lr}
 80156e6:	4604      	mov	r4, r0
 80156e8:	f7ff fff0 	bl	80156cc <__sinit_lock_acquire>
 80156ec:	69a3      	ldr	r3, [r4, #24]
 80156ee:	b11b      	cbz	r3, 80156f8 <__sinit+0x14>
 80156f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80156f4:	f7ff bff0 	b.w	80156d8 <__sinit_lock_release>
 80156f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80156fc:	6523      	str	r3, [r4, #80]	; 0x50
 80156fe:	4b13      	ldr	r3, [pc, #76]	; (801574c <__sinit+0x68>)
 8015700:	4a13      	ldr	r2, [pc, #76]	; (8015750 <__sinit+0x6c>)
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	62a2      	str	r2, [r4, #40]	; 0x28
 8015706:	42a3      	cmp	r3, r4
 8015708:	bf04      	itt	eq
 801570a:	2301      	moveq	r3, #1
 801570c:	61a3      	streq	r3, [r4, #24]
 801570e:	4620      	mov	r0, r4
 8015710:	f000 f820 	bl	8015754 <__sfp>
 8015714:	6060      	str	r0, [r4, #4]
 8015716:	4620      	mov	r0, r4
 8015718:	f000 f81c 	bl	8015754 <__sfp>
 801571c:	60a0      	str	r0, [r4, #8]
 801571e:	4620      	mov	r0, r4
 8015720:	f000 f818 	bl	8015754 <__sfp>
 8015724:	2200      	movs	r2, #0
 8015726:	60e0      	str	r0, [r4, #12]
 8015728:	2104      	movs	r1, #4
 801572a:	6860      	ldr	r0, [r4, #4]
 801572c:	f7ff ff82 	bl	8015634 <std>
 8015730:	68a0      	ldr	r0, [r4, #8]
 8015732:	2201      	movs	r2, #1
 8015734:	2109      	movs	r1, #9
 8015736:	f7ff ff7d 	bl	8015634 <std>
 801573a:	68e0      	ldr	r0, [r4, #12]
 801573c:	2202      	movs	r2, #2
 801573e:	2112      	movs	r1, #18
 8015740:	f7ff ff78 	bl	8015634 <std>
 8015744:	2301      	movs	r3, #1
 8015746:	61a3      	str	r3, [r4, #24]
 8015748:	e7d2      	b.n	80156f0 <__sinit+0xc>
 801574a:	bf00      	nop
 801574c:	080296d8 	.word	0x080296d8
 8015750:	0801567d 	.word	0x0801567d

08015754 <__sfp>:
 8015754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015756:	4607      	mov	r7, r0
 8015758:	f7ff ffac 	bl	80156b4 <__sfp_lock_acquire>
 801575c:	4b1e      	ldr	r3, [pc, #120]	; (80157d8 <__sfp+0x84>)
 801575e:	681e      	ldr	r6, [r3, #0]
 8015760:	69b3      	ldr	r3, [r6, #24]
 8015762:	b913      	cbnz	r3, 801576a <__sfp+0x16>
 8015764:	4630      	mov	r0, r6
 8015766:	f7ff ffbd 	bl	80156e4 <__sinit>
 801576a:	3648      	adds	r6, #72	; 0x48
 801576c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015770:	3b01      	subs	r3, #1
 8015772:	d503      	bpl.n	801577c <__sfp+0x28>
 8015774:	6833      	ldr	r3, [r6, #0]
 8015776:	b30b      	cbz	r3, 80157bc <__sfp+0x68>
 8015778:	6836      	ldr	r6, [r6, #0]
 801577a:	e7f7      	b.n	801576c <__sfp+0x18>
 801577c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015780:	b9d5      	cbnz	r5, 80157b8 <__sfp+0x64>
 8015782:	4b16      	ldr	r3, [pc, #88]	; (80157dc <__sfp+0x88>)
 8015784:	60e3      	str	r3, [r4, #12]
 8015786:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801578a:	6665      	str	r5, [r4, #100]	; 0x64
 801578c:	f000 f847 	bl	801581e <__retarget_lock_init_recursive>
 8015790:	f7ff ff96 	bl	80156c0 <__sfp_lock_release>
 8015794:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015798:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801579c:	6025      	str	r5, [r4, #0]
 801579e:	61a5      	str	r5, [r4, #24]
 80157a0:	2208      	movs	r2, #8
 80157a2:	4629      	mov	r1, r5
 80157a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80157a8:	f7fb fd46 	bl	8011238 <memset>
 80157ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80157b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80157b4:	4620      	mov	r0, r4
 80157b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157b8:	3468      	adds	r4, #104	; 0x68
 80157ba:	e7d9      	b.n	8015770 <__sfp+0x1c>
 80157bc:	2104      	movs	r1, #4
 80157be:	4638      	mov	r0, r7
 80157c0:	f7ff ff62 	bl	8015688 <__sfmoreglue>
 80157c4:	4604      	mov	r4, r0
 80157c6:	6030      	str	r0, [r6, #0]
 80157c8:	2800      	cmp	r0, #0
 80157ca:	d1d5      	bne.n	8015778 <__sfp+0x24>
 80157cc:	f7ff ff78 	bl	80156c0 <__sfp_lock_release>
 80157d0:	230c      	movs	r3, #12
 80157d2:	603b      	str	r3, [r7, #0]
 80157d4:	e7ee      	b.n	80157b4 <__sfp+0x60>
 80157d6:	bf00      	nop
 80157d8:	080296d8 	.word	0x080296d8
 80157dc:	ffff0001 	.word	0xffff0001

080157e0 <_fwalk_reent>:
 80157e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80157e4:	4606      	mov	r6, r0
 80157e6:	4688      	mov	r8, r1
 80157e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80157ec:	2700      	movs	r7, #0
 80157ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80157f2:	f1b9 0901 	subs.w	r9, r9, #1
 80157f6:	d505      	bpl.n	8015804 <_fwalk_reent+0x24>
 80157f8:	6824      	ldr	r4, [r4, #0]
 80157fa:	2c00      	cmp	r4, #0
 80157fc:	d1f7      	bne.n	80157ee <_fwalk_reent+0xe>
 80157fe:	4638      	mov	r0, r7
 8015800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015804:	89ab      	ldrh	r3, [r5, #12]
 8015806:	2b01      	cmp	r3, #1
 8015808:	d907      	bls.n	801581a <_fwalk_reent+0x3a>
 801580a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801580e:	3301      	adds	r3, #1
 8015810:	d003      	beq.n	801581a <_fwalk_reent+0x3a>
 8015812:	4629      	mov	r1, r5
 8015814:	4630      	mov	r0, r6
 8015816:	47c0      	blx	r8
 8015818:	4307      	orrs	r7, r0
 801581a:	3568      	adds	r5, #104	; 0x68
 801581c:	e7e9      	b.n	80157f2 <_fwalk_reent+0x12>

0801581e <__retarget_lock_init_recursive>:
 801581e:	4770      	bx	lr

08015820 <__retarget_lock_acquire_recursive>:
 8015820:	4770      	bx	lr

08015822 <__retarget_lock_release_recursive>:
 8015822:	4770      	bx	lr

08015824 <__swhatbuf_r>:
 8015824:	b570      	push	{r4, r5, r6, lr}
 8015826:	460e      	mov	r6, r1
 8015828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801582c:	2900      	cmp	r1, #0
 801582e:	b096      	sub	sp, #88	; 0x58
 8015830:	4614      	mov	r4, r2
 8015832:	461d      	mov	r5, r3
 8015834:	da07      	bge.n	8015846 <__swhatbuf_r+0x22>
 8015836:	2300      	movs	r3, #0
 8015838:	602b      	str	r3, [r5, #0]
 801583a:	89b3      	ldrh	r3, [r6, #12]
 801583c:	061a      	lsls	r2, r3, #24
 801583e:	d410      	bmi.n	8015862 <__swhatbuf_r+0x3e>
 8015840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015844:	e00e      	b.n	8015864 <__swhatbuf_r+0x40>
 8015846:	466a      	mov	r2, sp
 8015848:	f000 f946 	bl	8015ad8 <_fstat_r>
 801584c:	2800      	cmp	r0, #0
 801584e:	dbf2      	blt.n	8015836 <__swhatbuf_r+0x12>
 8015850:	9a01      	ldr	r2, [sp, #4]
 8015852:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015856:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801585a:	425a      	negs	r2, r3
 801585c:	415a      	adcs	r2, r3
 801585e:	602a      	str	r2, [r5, #0]
 8015860:	e7ee      	b.n	8015840 <__swhatbuf_r+0x1c>
 8015862:	2340      	movs	r3, #64	; 0x40
 8015864:	2000      	movs	r0, #0
 8015866:	6023      	str	r3, [r4, #0]
 8015868:	b016      	add	sp, #88	; 0x58
 801586a:	bd70      	pop	{r4, r5, r6, pc}

0801586c <__smakebuf_r>:
 801586c:	898b      	ldrh	r3, [r1, #12]
 801586e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015870:	079d      	lsls	r5, r3, #30
 8015872:	4606      	mov	r6, r0
 8015874:	460c      	mov	r4, r1
 8015876:	d507      	bpl.n	8015888 <__smakebuf_r+0x1c>
 8015878:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801587c:	6023      	str	r3, [r4, #0]
 801587e:	6123      	str	r3, [r4, #16]
 8015880:	2301      	movs	r3, #1
 8015882:	6163      	str	r3, [r4, #20]
 8015884:	b002      	add	sp, #8
 8015886:	bd70      	pop	{r4, r5, r6, pc}
 8015888:	ab01      	add	r3, sp, #4
 801588a:	466a      	mov	r2, sp
 801588c:	f7ff ffca 	bl	8015824 <__swhatbuf_r>
 8015890:	9900      	ldr	r1, [sp, #0]
 8015892:	4605      	mov	r5, r0
 8015894:	4630      	mov	r0, r6
 8015896:	f7ff f9fb 	bl	8014c90 <_malloc_r>
 801589a:	b948      	cbnz	r0, 80158b0 <__smakebuf_r+0x44>
 801589c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80158a0:	059a      	lsls	r2, r3, #22
 80158a2:	d4ef      	bmi.n	8015884 <__smakebuf_r+0x18>
 80158a4:	f023 0303 	bic.w	r3, r3, #3
 80158a8:	f043 0302 	orr.w	r3, r3, #2
 80158ac:	81a3      	strh	r3, [r4, #12]
 80158ae:	e7e3      	b.n	8015878 <__smakebuf_r+0xc>
 80158b0:	4b0d      	ldr	r3, [pc, #52]	; (80158e8 <__smakebuf_r+0x7c>)
 80158b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80158b4:	89a3      	ldrh	r3, [r4, #12]
 80158b6:	6020      	str	r0, [r4, #0]
 80158b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80158bc:	81a3      	strh	r3, [r4, #12]
 80158be:	9b00      	ldr	r3, [sp, #0]
 80158c0:	6163      	str	r3, [r4, #20]
 80158c2:	9b01      	ldr	r3, [sp, #4]
 80158c4:	6120      	str	r0, [r4, #16]
 80158c6:	b15b      	cbz	r3, 80158e0 <__smakebuf_r+0x74>
 80158c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80158cc:	4630      	mov	r0, r6
 80158ce:	f000 f915 	bl	8015afc <_isatty_r>
 80158d2:	b128      	cbz	r0, 80158e0 <__smakebuf_r+0x74>
 80158d4:	89a3      	ldrh	r3, [r4, #12]
 80158d6:	f023 0303 	bic.w	r3, r3, #3
 80158da:	f043 0301 	orr.w	r3, r3, #1
 80158de:	81a3      	strh	r3, [r4, #12]
 80158e0:	89a0      	ldrh	r0, [r4, #12]
 80158e2:	4305      	orrs	r5, r0
 80158e4:	81a5      	strh	r5, [r4, #12]
 80158e6:	e7cd      	b.n	8015884 <__smakebuf_r+0x18>
 80158e8:	0801567d 	.word	0x0801567d

080158ec <memmove>:
 80158ec:	4288      	cmp	r0, r1
 80158ee:	b510      	push	{r4, lr}
 80158f0:	eb01 0402 	add.w	r4, r1, r2
 80158f4:	d902      	bls.n	80158fc <memmove+0x10>
 80158f6:	4284      	cmp	r4, r0
 80158f8:	4623      	mov	r3, r4
 80158fa:	d807      	bhi.n	801590c <memmove+0x20>
 80158fc:	1e43      	subs	r3, r0, #1
 80158fe:	42a1      	cmp	r1, r4
 8015900:	d008      	beq.n	8015914 <memmove+0x28>
 8015902:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015906:	f803 2f01 	strb.w	r2, [r3, #1]!
 801590a:	e7f8      	b.n	80158fe <memmove+0x12>
 801590c:	4402      	add	r2, r0
 801590e:	4601      	mov	r1, r0
 8015910:	428a      	cmp	r2, r1
 8015912:	d100      	bne.n	8015916 <memmove+0x2a>
 8015914:	bd10      	pop	{r4, pc}
 8015916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801591a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801591e:	e7f7      	b.n	8015910 <memmove+0x24>

08015920 <__malloc_lock>:
 8015920:	4801      	ldr	r0, [pc, #4]	; (8015928 <__malloc_lock+0x8>)
 8015922:	f7ff bf7d 	b.w	8015820 <__retarget_lock_acquire_recursive>
 8015926:	bf00      	nop
 8015928:	20000c78 	.word	0x20000c78

0801592c <__malloc_unlock>:
 801592c:	4801      	ldr	r0, [pc, #4]	; (8015934 <__malloc_unlock+0x8>)
 801592e:	f7ff bf78 	b.w	8015822 <__retarget_lock_release_recursive>
 8015932:	bf00      	nop
 8015934:	20000c78 	.word	0x20000c78

08015938 <_realloc_r>:
 8015938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801593a:	4607      	mov	r7, r0
 801593c:	4614      	mov	r4, r2
 801593e:	460e      	mov	r6, r1
 8015940:	b921      	cbnz	r1, 801594c <_realloc_r+0x14>
 8015942:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015946:	4611      	mov	r1, r2
 8015948:	f7ff b9a2 	b.w	8014c90 <_malloc_r>
 801594c:	b922      	cbnz	r2, 8015958 <_realloc_r+0x20>
 801594e:	f7ff f94f 	bl	8014bf0 <_free_r>
 8015952:	4625      	mov	r5, r4
 8015954:	4628      	mov	r0, r5
 8015956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015958:	f000 f8f2 	bl	8015b40 <_malloc_usable_size_r>
 801595c:	42a0      	cmp	r0, r4
 801595e:	d20f      	bcs.n	8015980 <_realloc_r+0x48>
 8015960:	4621      	mov	r1, r4
 8015962:	4638      	mov	r0, r7
 8015964:	f7ff f994 	bl	8014c90 <_malloc_r>
 8015968:	4605      	mov	r5, r0
 801596a:	2800      	cmp	r0, #0
 801596c:	d0f2      	beq.n	8015954 <_realloc_r+0x1c>
 801596e:	4631      	mov	r1, r6
 8015970:	4622      	mov	r2, r4
 8015972:	f7fe fc65 	bl	8014240 <memcpy>
 8015976:	4631      	mov	r1, r6
 8015978:	4638      	mov	r0, r7
 801597a:	f7ff f939 	bl	8014bf0 <_free_r>
 801597e:	e7e9      	b.n	8015954 <_realloc_r+0x1c>
 8015980:	4635      	mov	r5, r6
 8015982:	e7e7      	b.n	8015954 <_realloc_r+0x1c>

08015984 <_raise_r>:
 8015984:	291f      	cmp	r1, #31
 8015986:	b538      	push	{r3, r4, r5, lr}
 8015988:	4604      	mov	r4, r0
 801598a:	460d      	mov	r5, r1
 801598c:	d904      	bls.n	8015998 <_raise_r+0x14>
 801598e:	2316      	movs	r3, #22
 8015990:	6003      	str	r3, [r0, #0]
 8015992:	f04f 30ff 	mov.w	r0, #4294967295
 8015996:	bd38      	pop	{r3, r4, r5, pc}
 8015998:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801599a:	b112      	cbz	r2, 80159a2 <_raise_r+0x1e>
 801599c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80159a0:	b94b      	cbnz	r3, 80159b6 <_raise_r+0x32>
 80159a2:	4620      	mov	r0, r4
 80159a4:	f000 f830 	bl	8015a08 <_getpid_r>
 80159a8:	462a      	mov	r2, r5
 80159aa:	4601      	mov	r1, r0
 80159ac:	4620      	mov	r0, r4
 80159ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80159b2:	f000 b817 	b.w	80159e4 <_kill_r>
 80159b6:	2b01      	cmp	r3, #1
 80159b8:	d00a      	beq.n	80159d0 <_raise_r+0x4c>
 80159ba:	1c59      	adds	r1, r3, #1
 80159bc:	d103      	bne.n	80159c6 <_raise_r+0x42>
 80159be:	2316      	movs	r3, #22
 80159c0:	6003      	str	r3, [r0, #0]
 80159c2:	2001      	movs	r0, #1
 80159c4:	e7e7      	b.n	8015996 <_raise_r+0x12>
 80159c6:	2400      	movs	r4, #0
 80159c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80159cc:	4628      	mov	r0, r5
 80159ce:	4798      	blx	r3
 80159d0:	2000      	movs	r0, #0
 80159d2:	e7e0      	b.n	8015996 <_raise_r+0x12>

080159d4 <raise>:
 80159d4:	4b02      	ldr	r3, [pc, #8]	; (80159e0 <raise+0xc>)
 80159d6:	4601      	mov	r1, r0
 80159d8:	6818      	ldr	r0, [r3, #0]
 80159da:	f7ff bfd3 	b.w	8015984 <_raise_r>
 80159de:	bf00      	nop
 80159e0:	20000040 	.word	0x20000040

080159e4 <_kill_r>:
 80159e4:	b538      	push	{r3, r4, r5, lr}
 80159e6:	4d07      	ldr	r5, [pc, #28]	; (8015a04 <_kill_r+0x20>)
 80159e8:	2300      	movs	r3, #0
 80159ea:	4604      	mov	r4, r0
 80159ec:	4608      	mov	r0, r1
 80159ee:	4611      	mov	r1, r2
 80159f0:	602b      	str	r3, [r5, #0]
 80159f2:	f7f3 ffdb 	bl	80099ac <_kill>
 80159f6:	1c43      	adds	r3, r0, #1
 80159f8:	d102      	bne.n	8015a00 <_kill_r+0x1c>
 80159fa:	682b      	ldr	r3, [r5, #0]
 80159fc:	b103      	cbz	r3, 8015a00 <_kill_r+0x1c>
 80159fe:	6023      	str	r3, [r4, #0]
 8015a00:	bd38      	pop	{r3, r4, r5, pc}
 8015a02:	bf00      	nop
 8015a04:	20000c80 	.word	0x20000c80

08015a08 <_getpid_r>:
 8015a08:	f7f3 bfc8 	b.w	800999c <_getpid>

08015a0c <__sread>:
 8015a0c:	b510      	push	{r4, lr}
 8015a0e:	460c      	mov	r4, r1
 8015a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a14:	f000 f89c 	bl	8015b50 <_read_r>
 8015a18:	2800      	cmp	r0, #0
 8015a1a:	bfab      	itete	ge
 8015a1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015a1e:	89a3      	ldrhlt	r3, [r4, #12]
 8015a20:	181b      	addge	r3, r3, r0
 8015a22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015a26:	bfac      	ite	ge
 8015a28:	6563      	strge	r3, [r4, #84]	; 0x54
 8015a2a:	81a3      	strhlt	r3, [r4, #12]
 8015a2c:	bd10      	pop	{r4, pc}

08015a2e <__swrite>:
 8015a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a32:	461f      	mov	r7, r3
 8015a34:	898b      	ldrh	r3, [r1, #12]
 8015a36:	05db      	lsls	r3, r3, #23
 8015a38:	4605      	mov	r5, r0
 8015a3a:	460c      	mov	r4, r1
 8015a3c:	4616      	mov	r6, r2
 8015a3e:	d505      	bpl.n	8015a4c <__swrite+0x1e>
 8015a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a44:	2302      	movs	r3, #2
 8015a46:	2200      	movs	r2, #0
 8015a48:	f000 f868 	bl	8015b1c <_lseek_r>
 8015a4c:	89a3      	ldrh	r3, [r4, #12]
 8015a4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015a52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015a56:	81a3      	strh	r3, [r4, #12]
 8015a58:	4632      	mov	r2, r6
 8015a5a:	463b      	mov	r3, r7
 8015a5c:	4628      	mov	r0, r5
 8015a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a62:	f000 b817 	b.w	8015a94 <_write_r>

08015a66 <__sseek>:
 8015a66:	b510      	push	{r4, lr}
 8015a68:	460c      	mov	r4, r1
 8015a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a6e:	f000 f855 	bl	8015b1c <_lseek_r>
 8015a72:	1c43      	adds	r3, r0, #1
 8015a74:	89a3      	ldrh	r3, [r4, #12]
 8015a76:	bf15      	itete	ne
 8015a78:	6560      	strne	r0, [r4, #84]	; 0x54
 8015a7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015a7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015a82:	81a3      	strheq	r3, [r4, #12]
 8015a84:	bf18      	it	ne
 8015a86:	81a3      	strhne	r3, [r4, #12]
 8015a88:	bd10      	pop	{r4, pc}

08015a8a <__sclose>:
 8015a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a8e:	f000 b813 	b.w	8015ab8 <_close_r>
	...

08015a94 <_write_r>:
 8015a94:	b538      	push	{r3, r4, r5, lr}
 8015a96:	4d07      	ldr	r5, [pc, #28]	; (8015ab4 <_write_r+0x20>)
 8015a98:	4604      	mov	r4, r0
 8015a9a:	4608      	mov	r0, r1
 8015a9c:	4611      	mov	r1, r2
 8015a9e:	2200      	movs	r2, #0
 8015aa0:	602a      	str	r2, [r5, #0]
 8015aa2:	461a      	mov	r2, r3
 8015aa4:	f7f3 ffb9 	bl	8009a1a <_write>
 8015aa8:	1c43      	adds	r3, r0, #1
 8015aaa:	d102      	bne.n	8015ab2 <_write_r+0x1e>
 8015aac:	682b      	ldr	r3, [r5, #0]
 8015aae:	b103      	cbz	r3, 8015ab2 <_write_r+0x1e>
 8015ab0:	6023      	str	r3, [r4, #0]
 8015ab2:	bd38      	pop	{r3, r4, r5, pc}
 8015ab4:	20000c80 	.word	0x20000c80

08015ab8 <_close_r>:
 8015ab8:	b538      	push	{r3, r4, r5, lr}
 8015aba:	4d06      	ldr	r5, [pc, #24]	; (8015ad4 <_close_r+0x1c>)
 8015abc:	2300      	movs	r3, #0
 8015abe:	4604      	mov	r4, r0
 8015ac0:	4608      	mov	r0, r1
 8015ac2:	602b      	str	r3, [r5, #0]
 8015ac4:	f7f3 ffc5 	bl	8009a52 <_close>
 8015ac8:	1c43      	adds	r3, r0, #1
 8015aca:	d102      	bne.n	8015ad2 <_close_r+0x1a>
 8015acc:	682b      	ldr	r3, [r5, #0]
 8015ace:	b103      	cbz	r3, 8015ad2 <_close_r+0x1a>
 8015ad0:	6023      	str	r3, [r4, #0]
 8015ad2:	bd38      	pop	{r3, r4, r5, pc}
 8015ad4:	20000c80 	.word	0x20000c80

08015ad8 <_fstat_r>:
 8015ad8:	b538      	push	{r3, r4, r5, lr}
 8015ada:	4d07      	ldr	r5, [pc, #28]	; (8015af8 <_fstat_r+0x20>)
 8015adc:	2300      	movs	r3, #0
 8015ade:	4604      	mov	r4, r0
 8015ae0:	4608      	mov	r0, r1
 8015ae2:	4611      	mov	r1, r2
 8015ae4:	602b      	str	r3, [r5, #0]
 8015ae6:	f7f3 ffc0 	bl	8009a6a <_fstat>
 8015aea:	1c43      	adds	r3, r0, #1
 8015aec:	d102      	bne.n	8015af4 <_fstat_r+0x1c>
 8015aee:	682b      	ldr	r3, [r5, #0]
 8015af0:	b103      	cbz	r3, 8015af4 <_fstat_r+0x1c>
 8015af2:	6023      	str	r3, [r4, #0]
 8015af4:	bd38      	pop	{r3, r4, r5, pc}
 8015af6:	bf00      	nop
 8015af8:	20000c80 	.word	0x20000c80

08015afc <_isatty_r>:
 8015afc:	b538      	push	{r3, r4, r5, lr}
 8015afe:	4d06      	ldr	r5, [pc, #24]	; (8015b18 <_isatty_r+0x1c>)
 8015b00:	2300      	movs	r3, #0
 8015b02:	4604      	mov	r4, r0
 8015b04:	4608      	mov	r0, r1
 8015b06:	602b      	str	r3, [r5, #0]
 8015b08:	f7f3 ffbf 	bl	8009a8a <_isatty>
 8015b0c:	1c43      	adds	r3, r0, #1
 8015b0e:	d102      	bne.n	8015b16 <_isatty_r+0x1a>
 8015b10:	682b      	ldr	r3, [r5, #0]
 8015b12:	b103      	cbz	r3, 8015b16 <_isatty_r+0x1a>
 8015b14:	6023      	str	r3, [r4, #0]
 8015b16:	bd38      	pop	{r3, r4, r5, pc}
 8015b18:	20000c80 	.word	0x20000c80

08015b1c <_lseek_r>:
 8015b1c:	b538      	push	{r3, r4, r5, lr}
 8015b1e:	4d07      	ldr	r5, [pc, #28]	; (8015b3c <_lseek_r+0x20>)
 8015b20:	4604      	mov	r4, r0
 8015b22:	4608      	mov	r0, r1
 8015b24:	4611      	mov	r1, r2
 8015b26:	2200      	movs	r2, #0
 8015b28:	602a      	str	r2, [r5, #0]
 8015b2a:	461a      	mov	r2, r3
 8015b2c:	f7f3 ffb8 	bl	8009aa0 <_lseek>
 8015b30:	1c43      	adds	r3, r0, #1
 8015b32:	d102      	bne.n	8015b3a <_lseek_r+0x1e>
 8015b34:	682b      	ldr	r3, [r5, #0]
 8015b36:	b103      	cbz	r3, 8015b3a <_lseek_r+0x1e>
 8015b38:	6023      	str	r3, [r4, #0]
 8015b3a:	bd38      	pop	{r3, r4, r5, pc}
 8015b3c:	20000c80 	.word	0x20000c80

08015b40 <_malloc_usable_size_r>:
 8015b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015b44:	1f18      	subs	r0, r3, #4
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	bfbc      	itt	lt
 8015b4a:	580b      	ldrlt	r3, [r1, r0]
 8015b4c:	18c0      	addlt	r0, r0, r3
 8015b4e:	4770      	bx	lr

08015b50 <_read_r>:
 8015b50:	b538      	push	{r3, r4, r5, lr}
 8015b52:	4d07      	ldr	r5, [pc, #28]	; (8015b70 <_read_r+0x20>)
 8015b54:	4604      	mov	r4, r0
 8015b56:	4608      	mov	r0, r1
 8015b58:	4611      	mov	r1, r2
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	602a      	str	r2, [r5, #0]
 8015b5e:	461a      	mov	r2, r3
 8015b60:	f7f3 ff3e 	bl	80099e0 <_read>
 8015b64:	1c43      	adds	r3, r0, #1
 8015b66:	d102      	bne.n	8015b6e <_read_r+0x1e>
 8015b68:	682b      	ldr	r3, [r5, #0]
 8015b6a:	b103      	cbz	r3, 8015b6e <_read_r+0x1e>
 8015b6c:	6023      	str	r3, [r4, #0]
 8015b6e:	bd38      	pop	{r3, r4, r5, pc}
 8015b70:	20000c80 	.word	0x20000c80

08015b74 <_init>:
 8015b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b76:	bf00      	nop
 8015b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b7a:	bc08      	pop	{r3}
 8015b7c:	469e      	mov	lr, r3
 8015b7e:	4770      	bx	lr

08015b80 <_fini>:
 8015b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b82:	bf00      	nop
 8015b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b86:	bc08      	pop	{r3}
 8015b88:	469e      	mov	lr, r3
 8015b8a:	4770      	bx	lr
